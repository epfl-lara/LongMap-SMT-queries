; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11802 () Bool)

(assert start!11802)

(declare-fun b!98943 () Bool)

(declare-fun b_free!2437 () Bool)

(declare-fun b_next!2437 () Bool)

(assert (=> b!98943 (= b_free!2437 (not b_next!2437))))

(declare-fun tp!9601 () Bool)

(declare-fun b_and!6073 () Bool)

(assert (=> b!98943 (= tp!9601 b_and!6073)))

(declare-fun b!98935 () Bool)

(declare-fun b_free!2439 () Bool)

(declare-fun b_next!2439 () Bool)

(assert (=> b!98935 (= b_free!2439 (not b_next!2439))))

(declare-fun tp!9602 () Bool)

(declare-fun b_and!6075 () Bool)

(assert (=> b!98935 (= tp!9602 b_and!6075)))

(declare-fun b!98928 () Bool)

(declare-fun e!64476 () Bool)

(declare-fun e!64468 () Bool)

(assert (=> b!98928 (= e!64476 e!64468)))

(declare-fun res!49725 () Bool)

(assert (=> b!98928 (=> (not res!49725) (not e!64468))))

(declare-datatypes ((V!3161 0))(
  ( (V!3162 (val!1362 Int)) )
))
(declare-datatypes ((array!4237 0))(
  ( (array!4238 (arr!2012 (Array (_ BitVec 32) (_ BitVec 64))) (size!2263 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!974 0))(
  ( (ValueCellFull!974 (v!2816 V!3161)) (EmptyCell!974) )
))
(declare-datatypes ((array!4239 0))(
  ( (array!4240 (arr!2013 (Array (_ BitVec 32) ValueCell!974)) (size!2264 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!856 0))(
  ( (LongMapFixedSize!857 (defaultEntry!2501 Int) (mask!6608 (_ BitVec 32)) (extraKeys!2318 (_ BitVec 32)) (zeroValue!2382 V!3161) (minValue!2382 V!3161) (_size!477 (_ BitVec 32)) (_keys!4195 array!4237) (_values!2484 array!4239) (_vacant!477 (_ BitVec 32))) )
))
(declare-datatypes ((tuple2!2306 0))(
  ( (tuple2!2307 (_1!1164 Bool) (_2!1164 LongMapFixedSize!856)) )
))
(declare-fun lt!49741 () tuple2!2306)

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!98928 (= res!49725 (and (_1!1164 lt!49741) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-datatypes ((Unit!2982 0))(
  ( (Unit!2983) )
))
(declare-fun lt!49743 () Unit!2982)

(declare-fun e!64463 () Unit!2982)

(assert (=> b!98928 (= lt!49743 e!64463)))

(declare-datatypes ((Cell!660 0))(
  ( (Cell!661 (v!2817 LongMapFixedSize!856)) )
))
(declare-datatypes ((LongMap!660 0))(
  ( (LongMap!661 (underlying!341 Cell!660)) )
))
(declare-fun thiss!992 () LongMap!660)

(declare-datatypes ((tuple2!2308 0))(
  ( (tuple2!2309 (_1!1165 (_ BitVec 64)) (_2!1165 V!3161)) )
))
(declare-datatypes ((List!1568 0))(
  ( (Nil!1565) (Cons!1564 (h!2159 tuple2!2308) (t!5534 List!1568)) )
))
(declare-datatypes ((ListLongMap!1503 0))(
  ( (ListLongMap!1504 (toList!767 List!1568)) )
))
(declare-fun lt!49742 () ListLongMap!1503)

(declare-fun c!16866 () Bool)

(declare-fun contains!792 (ListLongMap!1503 (_ BitVec 64)) Bool)

(assert (=> b!98928 (= c!16866 (contains!792 lt!49742 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun newMap!16 () LongMapFixedSize!856)

(declare-fun update!147 (LongMapFixedSize!856 (_ BitVec 64) V!3161) tuple2!2306)

(declare-fun get!1295 (ValueCell!974 V!3161) V!3161)

(declare-fun dynLambda!372 (Int (_ BitVec 64)) V!3161)

(assert (=> b!98928 (= lt!49741 (update!147 newMap!16 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98929 () Bool)

(declare-fun e!64462 () Bool)

(declare-fun tp_is_empty!2635 () Bool)

(assert (=> b!98929 (= e!64462 tp_is_empty!2635)))

(declare-fun b!98930 () Bool)

(declare-fun e!64473 () Bool)

(declare-fun e!64470 () Bool)

(declare-fun mapRes!3765 () Bool)

(assert (=> b!98930 (= e!64473 (and e!64470 mapRes!3765))))

(declare-fun condMapEmpty!3765 () Bool)

(declare-fun mapDefault!3766 () ValueCell!974)

(assert (=> b!98930 (= condMapEmpty!3765 (= (arr!2013 (_values!2484 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3766)))))

(declare-fun b!98931 () Bool)

(declare-fun e!64467 () Bool)

(assert (=> b!98931 (= e!64467 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3765 () Bool)

(declare-fun tp!9604 () Bool)

(assert (=> mapNonEmpty!3765 (= mapRes!3765 (and tp!9604 e!64462))))

(declare-fun mapKey!3765 () (_ BitVec 32))

(declare-fun mapRest!3766 () (Array (_ BitVec 32) ValueCell!974))

(declare-fun mapValue!3766 () ValueCell!974)

(assert (=> mapNonEmpty!3765 (= (arr!2013 (_values!2484 newMap!16)) (store mapRest!3766 mapKey!3765 mapValue!3766))))

(declare-fun mapNonEmpty!3766 () Bool)

(declare-fun mapRes!3766 () Bool)

(declare-fun tp!9603 () Bool)

(assert (=> mapNonEmpty!3766 (= mapRes!3766 (and tp!9603 e!64467))))

(declare-fun mapKey!3766 () (_ BitVec 32))

(declare-fun mapValue!3765 () ValueCell!974)

(declare-fun mapRest!3765 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3766 (= (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (store mapRest!3765 mapKey!3766 mapValue!3765))))

(declare-fun b!98932 () Bool)

(declare-fun res!49730 () Bool)

(declare-fun e!64471 () Bool)

(assert (=> b!98932 (=> (not res!49730) (not e!64471))))

(declare-fun valid!396 (LongMapFixedSize!856) Bool)

(assert (=> b!98932 (= res!49730 (valid!396 newMap!16))))

(declare-fun res!49726 () Bool)

(assert (=> start!11802 (=> (not res!49726) (not e!64471))))

(declare-fun valid!397 (LongMap!660) Bool)

(assert (=> start!11802 (= res!49726 (valid!397 thiss!992))))

(assert (=> start!11802 e!64471))

(declare-fun e!64474 () Bool)

(assert (=> start!11802 e!64474))

(assert (=> start!11802 true))

(declare-fun e!64466 () Bool)

(assert (=> start!11802 e!64466))

(declare-fun b!98933 () Bool)

(declare-fun res!49724 () Bool)

(assert (=> b!98933 (=> (not res!49724) (not e!64471))))

(assert (=> b!98933 (= res!49724 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6608 newMap!16)) (_size!477 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun mapIsEmpty!3765 () Bool)

(assert (=> mapIsEmpty!3765 mapRes!3765))

(declare-fun b!98934 () Bool)

(declare-fun e!64465 () Bool)

(declare-fun e!64475 () Bool)

(assert (=> b!98934 (= e!64465 e!64475)))

(declare-fun array_inv!1239 (array!4237) Bool)

(declare-fun array_inv!1240 (array!4239) Bool)

(assert (=> b!98935 (= e!64466 (and tp!9602 tp_is_empty!2635 (array_inv!1239 (_keys!4195 newMap!16)) (array_inv!1240 (_values!2484 newMap!16)) e!64473))))

(declare-fun b!98936 () Bool)

(assert (=> b!98936 (= e!64474 e!64465)))

(declare-fun b!98937 () Bool)

(declare-fun e!64477 () Bool)

(assert (=> b!98937 (= e!64477 tp_is_empty!2635)))

(declare-fun b!98938 () Bool)

(declare-fun Unit!2984 () Unit!2982)

(assert (=> b!98938 (= e!64463 Unit!2984)))

(declare-fun mapIsEmpty!3766 () Bool)

(assert (=> mapIsEmpty!3766 mapRes!3766))

(declare-fun b!98939 () Bool)

(declare-fun Unit!2985 () Unit!2982)

(assert (=> b!98939 (= e!64463 Unit!2985)))

(declare-fun lt!49740 () Unit!2982)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!88 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) (_ BitVec 32) Int) Unit!2982)

(assert (=> b!98939 (= lt!49740 (lemmaListMapContainsThenArrayContainsFrom!88 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4237 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!98939 (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!49745 () Unit!2982)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4237 (_ BitVec 32) (_ BitVec 32)) Unit!2982)

(assert (=> b!98939 (= lt!49745 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1569 0))(
  ( (Nil!1566) (Cons!1565 (h!2160 (_ BitVec 64)) (t!5535 List!1569)) )
))
(declare-fun arrayNoDuplicates!0 (array!4237 (_ BitVec 32) List!1569) Bool)

(assert (=> b!98939 (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) from!355 Nil!1566)))

(declare-fun lt!49744 () Unit!2982)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4237 (_ BitVec 32) (_ BitVec 64) List!1569) Unit!2982)

(assert (=> b!98939 (= lt!49744 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566)))))

(assert (=> b!98939 false))

(declare-fun b!98940 () Bool)

(declare-fun res!49729 () Bool)

(assert (=> b!98940 (=> (not res!49729) (not e!64468))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!98940 (= res!49729 (validMask!0 (mask!6608 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun b!98941 () Bool)

(declare-fun res!49727 () Bool)

(assert (=> b!98941 (=> (not res!49727) (not e!64471))))

(assert (=> b!98941 (= res!49727 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!98942 () Bool)

(assert (=> b!98942 (= e!64471 e!64476)))

(declare-fun res!49728 () Bool)

(assert (=> b!98942 (=> (not res!49728) (not e!64476))))

(declare-fun lt!49746 () ListLongMap!1503)

(assert (=> b!98942 (= res!49728 (and (= lt!49746 lt!49742) (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1256 (LongMapFixedSize!856) ListLongMap!1503)

(assert (=> b!98942 (= lt!49742 (map!1256 newMap!16))))

(declare-fun getCurrentListMap!456 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) Int) ListLongMap!1503)

(assert (=> b!98942 (= lt!49746 (getCurrentListMap!456 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun e!64472 () Bool)

(assert (=> b!98943 (= e!64475 (and tp!9601 tp_is_empty!2635 (array_inv!1239 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (array_inv!1240 (_values!2484 (v!2817 (underlying!341 thiss!992)))) e!64472))))

(declare-fun b!98944 () Bool)

(assert (=> b!98944 (= e!64468 (and (= (size!2264 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6608 (v!2817 (underlying!341 thiss!992))))) (= (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (size!2264 (_values!2484 (v!2817 (underlying!341 thiss!992))))) (bvsge (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000) (bvsge (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000) (bvsgt (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000011)))))

(declare-fun b!98945 () Bool)

(assert (=> b!98945 (= e!64472 (and e!64477 mapRes!3766))))

(declare-fun condMapEmpty!3766 () Bool)

(declare-fun mapDefault!3765 () ValueCell!974)

(assert (=> b!98945 (= condMapEmpty!3766 (= (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3765)))))

(declare-fun b!98946 () Bool)

(assert (=> b!98946 (= e!64470 tp_is_empty!2635)))

(assert (= (and start!11802 res!49726) b!98941))

(assert (= (and b!98941 res!49727) b!98932))

(assert (= (and b!98932 res!49730) b!98933))

(assert (= (and b!98933 res!49724) b!98942))

(assert (= (and b!98942 res!49728) b!98928))

(assert (= (and b!98928 c!16866) b!98939))

(assert (= (and b!98928 (not c!16866)) b!98938))

(assert (= (and b!98928 res!49725) b!98940))

(assert (= (and b!98940 res!49729) b!98944))

(assert (= (and b!98945 condMapEmpty!3766) mapIsEmpty!3766))

(assert (= (and b!98945 (not condMapEmpty!3766)) mapNonEmpty!3766))

(get-info :version)

(assert (= (and mapNonEmpty!3766 ((_ is ValueCellFull!974) mapValue!3765)) b!98931))

(assert (= (and b!98945 ((_ is ValueCellFull!974) mapDefault!3765)) b!98937))

(assert (= b!98943 b!98945))

(assert (= b!98934 b!98943))

(assert (= b!98936 b!98934))

(assert (= start!11802 b!98936))

(assert (= (and b!98930 condMapEmpty!3765) mapIsEmpty!3765))

(assert (= (and b!98930 (not condMapEmpty!3765)) mapNonEmpty!3765))

(assert (= (and mapNonEmpty!3765 ((_ is ValueCellFull!974) mapValue!3766)) b!98929))

(assert (= (and b!98930 ((_ is ValueCellFull!974) mapDefault!3766)) b!98946))

(assert (= b!98935 b!98930))

(assert (= start!11802 b!98935))

(declare-fun b_lambda!4415 () Bool)

(assert (=> (not b_lambda!4415) (not b!98928)))

(declare-fun t!5531 () Bool)

(declare-fun tb!1933 () Bool)

(assert (=> (and b!98943 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))) t!5531) tb!1933))

(declare-fun result!3279 () Bool)

(assert (=> tb!1933 (= result!3279 tp_is_empty!2635)))

(assert (=> b!98928 t!5531))

(declare-fun b_and!6077 () Bool)

(assert (= b_and!6073 (and (=> t!5531 result!3279) b_and!6077)))

(declare-fun tb!1935 () Bool)

(declare-fun t!5533 () Bool)

(assert (=> (and b!98935 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))) t!5533) tb!1935))

(declare-fun result!3283 () Bool)

(assert (= result!3283 result!3279))

(assert (=> b!98928 t!5533))

(declare-fun b_and!6079 () Bool)

(assert (= b_and!6075 (and (=> t!5533 result!3283) b_and!6079)))

(declare-fun m!108731 () Bool)

(assert (=> b!98939 m!108731))

(declare-fun m!108733 () Bool)

(assert (=> b!98939 m!108733))

(declare-fun m!108735 () Bool)

(assert (=> b!98939 m!108735))

(declare-fun m!108737 () Bool)

(assert (=> b!98939 m!108737))

(assert (=> b!98939 m!108735))

(assert (=> b!98939 m!108735))

(declare-fun m!108739 () Bool)

(assert (=> b!98939 m!108739))

(assert (=> b!98939 m!108735))

(declare-fun m!108741 () Bool)

(assert (=> b!98939 m!108741))

(declare-fun m!108743 () Bool)

(assert (=> start!11802 m!108743))

(declare-fun m!108745 () Bool)

(assert (=> b!98928 m!108745))

(declare-fun m!108747 () Bool)

(assert (=> b!98928 m!108747))

(declare-fun m!108749 () Bool)

(assert (=> b!98928 m!108749))

(assert (=> b!98928 m!108735))

(declare-fun m!108751 () Bool)

(assert (=> b!98928 m!108751))

(assert (=> b!98928 m!108735))

(assert (=> b!98928 m!108747))

(assert (=> b!98928 m!108735))

(assert (=> b!98928 m!108749))

(declare-fun m!108753 () Bool)

(assert (=> b!98928 m!108753))

(assert (=> b!98928 m!108745))

(declare-fun m!108755 () Bool)

(assert (=> mapNonEmpty!3766 m!108755))

(assert (=> b!98942 m!108735))

(declare-fun m!108757 () Bool)

(assert (=> b!98942 m!108757))

(declare-fun m!108759 () Bool)

(assert (=> b!98942 m!108759))

(declare-fun m!108761 () Bool)

(assert (=> b!98935 m!108761))

(declare-fun m!108763 () Bool)

(assert (=> b!98935 m!108763))

(declare-fun m!108765 () Bool)

(assert (=> mapNonEmpty!3765 m!108765))

(declare-fun m!108767 () Bool)

(assert (=> b!98940 m!108767))

(declare-fun m!108769 () Bool)

(assert (=> b!98943 m!108769))

(declare-fun m!108771 () Bool)

(assert (=> b!98943 m!108771))

(declare-fun m!108773 () Bool)

(assert (=> b!98932 m!108773))

(check-sat tp_is_empty!2635 (not mapNonEmpty!3765) (not b!98943) (not b!98932) (not start!11802) (not b!98942) (not b_next!2437) (not b!98928) (not b!98935) b_and!6077 (not b_lambda!4415) (not b!98940) (not b!98939) b_and!6079 (not b_next!2439) (not mapNonEmpty!3766))
(check-sat b_and!6077 b_and!6079 (not b_next!2437) (not b_next!2439))
(get-model)

(declare-fun b_lambda!4421 () Bool)

(assert (= b_lambda!4415 (or (and b!98943 b_free!2437) (and b!98935 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))))) b_lambda!4421)))

(check-sat tp_is_empty!2635 (not mapNonEmpty!3765) (not b!98943) (not b!98932) (not start!11802) (not b!98942) (not b_next!2437) (not b_lambda!4421) (not b!98928) (not b!98935) b_and!6077 (not b!98940) (not b!98939) b_and!6079 (not b_next!2439) (not mapNonEmpty!3766))
(check-sat b_and!6077 b_and!6079 (not b_next!2437) (not b_next!2439))
(get-model)

(declare-fun d!26611 () Bool)

(assert (=> d!26611 (= (array_inv!1239 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvsge (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!98943 d!26611))

(declare-fun d!26613 () Bool)

(assert (=> d!26613 (= (array_inv!1240 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvsge (size!2264 (_values!2484 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!98943 d!26613))

(declare-fun d!26615 () Bool)

(assert (=> d!26615 (= (map!1256 newMap!16) (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun bs!4095 () Bool)

(assert (= bs!4095 d!26615))

(declare-fun m!108863 () Bool)

(assert (=> bs!4095 m!108863))

(assert (=> b!98942 d!26615))

(declare-fun b!99109 () Bool)

(declare-fun e!64605 () ListLongMap!1503)

(declare-fun call!10111 () ListLongMap!1503)

(assert (=> b!99109 (= e!64605 call!10111)))

(declare-fun bm!10104 () Bool)

(declare-fun call!10110 () ListLongMap!1503)

(declare-fun call!10108 () ListLongMap!1503)

(assert (=> bm!10104 (= call!10110 call!10108)))

(declare-fun b!99110 () Bool)

(declare-fun res!49797 () Bool)

(declare-fun e!64608 () Bool)

(assert (=> b!99110 (=> (not res!49797) (not e!64608))))

(declare-fun e!64610 () Bool)

(assert (=> b!99110 (= res!49797 e!64610)))

(declare-fun c!16887 () Bool)

(assert (=> b!99110 (= c!16887 (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99111 () Bool)

(declare-fun e!64606 () ListLongMap!1503)

(declare-fun e!64609 () ListLongMap!1503)

(assert (=> b!99111 (= e!64606 e!64609)))

(declare-fun c!16885 () Bool)

(assert (=> b!99111 (= c!16885 (and (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99112 () Bool)

(declare-fun e!64611 () Bool)

(declare-fun lt!49838 () ListLongMap!1503)

(declare-fun apply!93 (ListLongMap!1503 (_ BitVec 64)) V!3161)

(assert (=> b!99112 (= e!64611 (= (apply!93 lt!49838 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun b!99113 () Bool)

(declare-fun call!10107 () ListLongMap!1503)

(assert (=> b!99113 (= e!64605 call!10107)))

(declare-fun b!99114 () Bool)

(declare-fun res!49798 () Bool)

(assert (=> b!99114 (=> (not res!49798) (not e!64608))))

(declare-fun e!64612 () Bool)

(assert (=> b!99114 (= res!49798 e!64612)))

(declare-fun res!49795 () Bool)

(assert (=> b!99114 (=> res!49795 e!64612)))

(declare-fun e!64607 () Bool)

(assert (=> b!99114 (= res!49795 (not e!64607))))

(declare-fun res!49794 () Bool)

(assert (=> b!99114 (=> (not res!49794) (not e!64607))))

(assert (=> b!99114 (= res!49794 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99115 () Bool)

(declare-fun e!64603 () Unit!2982)

(declare-fun Unit!2988 () Unit!2982)

(assert (=> b!99115 (= e!64603 Unit!2988)))

(declare-fun b!99116 () Bool)

(declare-fun lt!49840 () Unit!2982)

(assert (=> b!99116 (= e!64603 lt!49840)))

(declare-fun lt!49844 () ListLongMap!1503)

(declare-fun getCurrentListMapNoExtraKeys!96 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) Int) ListLongMap!1503)

(assert (=> b!99116 (= lt!49844 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun lt!49847 () (_ BitVec 64))

(assert (=> b!99116 (= lt!49847 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49853 () (_ BitVec 64))

(assert (=> b!99116 (= lt!49853 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49843 () Unit!2982)

(declare-fun addStillContains!69 (ListLongMap!1503 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2982)

(assert (=> b!99116 (= lt!49843 (addStillContains!69 lt!49844 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49853))))

(declare-fun +!131 (ListLongMap!1503 tuple2!2308) ListLongMap!1503)

(assert (=> b!99116 (contains!792 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49853)))

(declare-fun lt!49851 () Unit!2982)

(assert (=> b!99116 (= lt!49851 lt!49843)))

(declare-fun lt!49833 () ListLongMap!1503)

(assert (=> b!99116 (= lt!49833 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun lt!49839 () (_ BitVec 64))

(assert (=> b!99116 (= lt!49839 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49836 () (_ BitVec 64))

(assert (=> b!99116 (= lt!49836 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49848 () Unit!2982)

(declare-fun addApplyDifferent!69 (ListLongMap!1503 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2982)

(assert (=> b!99116 (= lt!49848 (addApplyDifferent!69 lt!49833 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49836))))

(assert (=> b!99116 (= (apply!93 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49836) (apply!93 lt!49833 lt!49836))))

(declare-fun lt!49837 () Unit!2982)

(assert (=> b!99116 (= lt!49837 lt!49848)))

(declare-fun lt!49850 () ListLongMap!1503)

(assert (=> b!99116 (= lt!49850 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun lt!49854 () (_ BitVec 64))

(assert (=> b!99116 (= lt!49854 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49841 () (_ BitVec 64))

(assert (=> b!99116 (= lt!49841 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49835 () Unit!2982)

(assert (=> b!99116 (= lt!49835 (addApplyDifferent!69 lt!49850 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49841))))

(assert (=> b!99116 (= (apply!93 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49841) (apply!93 lt!49850 lt!49841))))

(declare-fun lt!49845 () Unit!2982)

(assert (=> b!99116 (= lt!49845 lt!49835)))

(declare-fun lt!49849 () ListLongMap!1503)

(assert (=> b!99116 (= lt!49849 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun lt!49852 () (_ BitVec 64))

(assert (=> b!99116 (= lt!49852 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49834 () (_ BitVec 64))

(assert (=> b!99116 (= lt!49834 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!99116 (= lt!49840 (addApplyDifferent!69 lt!49849 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49834))))

(assert (=> b!99116 (= (apply!93 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49834) (apply!93 lt!49849 lt!49834))))

(declare-fun e!64601 () Bool)

(declare-fun b!99117 () Bool)

(assert (=> b!99117 (= e!64601 (= (apply!93 lt!49838 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99117 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_values!2484 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> b!99117 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99118 () Bool)

(assert (=> b!99118 (= e!64612 e!64601)))

(declare-fun res!49791 () Bool)

(assert (=> b!99118 (=> (not res!49791) (not e!64601))))

(assert (=> b!99118 (= res!49791 (contains!792 lt!49838 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99118 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99119 () Bool)

(declare-fun e!64600 () Bool)

(assert (=> b!99119 (= e!64600 e!64611)))

(declare-fun res!49799 () Bool)

(declare-fun call!10113 () Bool)

(assert (=> b!99119 (= res!49799 call!10113)))

(assert (=> b!99119 (=> (not res!49799) (not e!64611))))

(declare-fun b!99120 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!99120 (= e!64607 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99121 () Bool)

(assert (=> b!99121 (= e!64609 call!10111)))

(declare-fun b!99122 () Bool)

(declare-fun call!10109 () ListLongMap!1503)

(assert (=> b!99122 (= e!64606 (+!131 call!10109 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99123 () Bool)

(declare-fun call!10112 () Bool)

(assert (=> b!99123 (= e!64610 (not call!10112))))

(declare-fun b!99124 () Bool)

(declare-fun e!64602 () Bool)

(assert (=> b!99124 (= e!64602 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun c!16889 () Bool)

(declare-fun bm!10105 () Bool)

(assert (=> bm!10105 (= call!10109 (+!131 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107)) (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun bm!10106 () Bool)

(assert (=> bm!10106 (= call!10111 call!10109)))

(declare-fun b!99125 () Bool)

(declare-fun e!64604 () Bool)

(assert (=> b!99125 (= e!64610 e!64604)))

(declare-fun res!49793 () Bool)

(assert (=> b!99125 (= res!49793 call!10112)))

(assert (=> b!99125 (=> (not res!49793) (not e!64604))))

(declare-fun b!99126 () Bool)

(declare-fun c!16890 () Bool)

(assert (=> b!99126 (= c!16890 (and (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99126 (= e!64609 e!64605)))

(declare-fun b!99127 () Bool)

(assert (=> b!99127 (= e!64608 e!64600)))

(declare-fun c!16886 () Bool)

(assert (=> b!99127 (= c!16886 (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10107 () Bool)

(assert (=> bm!10107 (= call!10113 (contains!792 lt!49838 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10108 () Bool)

(assert (=> bm!10108 (= call!10107 call!10110)))

(declare-fun bm!10109 () Bool)

(assert (=> bm!10109 (= call!10112 (contains!792 lt!49838 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99128 () Bool)

(assert (=> b!99128 (= e!64600 (not call!10113))))

(declare-fun b!99129 () Bool)

(assert (=> b!99129 (= e!64604 (= (apply!93 lt!49838 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun d!26617 () Bool)

(assert (=> d!26617 e!64608))

(declare-fun res!49796 () Bool)

(assert (=> d!26617 (=> (not res!49796) (not e!64608))))

(assert (=> d!26617 (= res!49796 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun lt!49842 () ListLongMap!1503)

(assert (=> d!26617 (= lt!49838 lt!49842)))

(declare-fun lt!49846 () Unit!2982)

(assert (=> d!26617 (= lt!49846 e!64603)))

(declare-fun c!16888 () Bool)

(assert (=> d!26617 (= c!16888 e!64602)))

(declare-fun res!49792 () Bool)

(assert (=> d!26617 (=> (not res!49792) (not e!64602))))

(assert (=> d!26617 (= res!49792 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!26617 (= lt!49842 e!64606)))

(assert (=> d!26617 (= c!16889 (and (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26617 (validMask!0 (mask!6608 (v!2817 (underlying!341 thiss!992))))))

(assert (=> d!26617 (= (getCurrentListMap!456 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))) lt!49838)))

(declare-fun bm!10110 () Bool)

(assert (=> bm!10110 (= call!10108 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(assert (= (and d!26617 c!16889) b!99122))

(assert (= (and d!26617 (not c!16889)) b!99111))

(assert (= (and b!99111 c!16885) b!99121))

(assert (= (and b!99111 (not c!16885)) b!99126))

(assert (= (and b!99126 c!16890) b!99109))

(assert (= (and b!99126 (not c!16890)) b!99113))

(assert (= (or b!99109 b!99113) bm!10108))

(assert (= (or b!99121 bm!10108) bm!10104))

(assert (= (or b!99121 b!99109) bm!10106))

(assert (= (or b!99122 bm!10104) bm!10110))

(assert (= (or b!99122 bm!10106) bm!10105))

(assert (= (and d!26617 res!49792) b!99124))

(assert (= (and d!26617 c!16888) b!99116))

(assert (= (and d!26617 (not c!16888)) b!99115))

(assert (= (and d!26617 res!49796) b!99114))

(assert (= (and b!99114 res!49794) b!99120))

(assert (= (and b!99114 (not res!49795)) b!99118))

(assert (= (and b!99118 res!49791) b!99117))

(assert (= (and b!99114 res!49798) b!99110))

(assert (= (and b!99110 c!16887) b!99125))

(assert (= (and b!99110 (not c!16887)) b!99123))

(assert (= (and b!99125 res!49793) b!99129))

(assert (= (or b!99125 b!99123) bm!10109))

(assert (= (and b!99110 res!49797) b!99127))

(assert (= (and b!99127 c!16886) b!99119))

(assert (= (and b!99127 (not c!16886)) b!99128))

(assert (= (and b!99119 res!49799) b!99112))

(assert (= (or b!99119 b!99128) bm!10107))

(declare-fun b_lambda!4423 () Bool)

(assert (=> (not b_lambda!4423) (not b!99117)))

(assert (=> b!99117 t!5531))

(declare-fun b_and!6097 () Bool)

(assert (= b_and!6077 (and (=> t!5531 result!3279) b_and!6097)))

(assert (=> b!99117 t!5533))

(declare-fun b_and!6099 () Bool)

(assert (= b_and!6079 (and (=> t!5533 result!3283) b_and!6099)))

(declare-fun m!108865 () Bool)

(assert (=> b!99116 m!108865))

(declare-fun m!108867 () Bool)

(assert (=> b!99116 m!108867))

(declare-fun m!108869 () Bool)

(assert (=> b!99116 m!108869))

(declare-fun m!108871 () Bool)

(assert (=> b!99116 m!108871))

(declare-fun m!108873 () Bool)

(assert (=> b!99116 m!108873))

(declare-fun m!108875 () Bool)

(assert (=> b!99116 m!108875))

(declare-fun m!108877 () Bool)

(assert (=> b!99116 m!108877))

(declare-fun m!108879 () Bool)

(assert (=> b!99116 m!108879))

(declare-fun m!108881 () Bool)

(assert (=> b!99116 m!108881))

(assert (=> b!99116 m!108865))

(declare-fun m!108883 () Bool)

(assert (=> b!99116 m!108883))

(declare-fun m!108885 () Bool)

(assert (=> b!99116 m!108885))

(declare-fun m!108887 () Bool)

(assert (=> b!99116 m!108887))

(assert (=> b!99116 m!108867))

(declare-fun m!108889 () Bool)

(assert (=> b!99116 m!108889))

(assert (=> b!99116 m!108871))

(assert (=> b!99116 m!108877))

(declare-fun m!108891 () Bool)

(assert (=> b!99116 m!108891))

(declare-fun m!108893 () Bool)

(assert (=> b!99116 m!108893))

(declare-fun m!108895 () Bool)

(assert (=> b!99116 m!108895))

(declare-fun m!108897 () Bool)

(assert (=> b!99116 m!108897))

(assert (=> d!26617 m!108767))

(assert (=> bm!10110 m!108885))

(declare-fun m!108899 () Bool)

(assert (=> bm!10107 m!108899))

(assert (=> b!99120 m!108875))

(assert (=> b!99120 m!108875))

(declare-fun m!108901 () Bool)

(assert (=> b!99120 m!108901))

(declare-fun m!108903 () Bool)

(assert (=> b!99129 m!108903))

(declare-fun m!108905 () Bool)

(assert (=> bm!10105 m!108905))

(declare-fun m!108907 () Bool)

(assert (=> bm!10109 m!108907))

(declare-fun m!108909 () Bool)

(assert (=> b!99122 m!108909))

(assert (=> b!99124 m!108875))

(assert (=> b!99124 m!108875))

(assert (=> b!99124 m!108901))

(assert (=> b!99118 m!108875))

(assert (=> b!99118 m!108875))

(declare-fun m!108911 () Bool)

(assert (=> b!99118 m!108911))

(assert (=> b!99117 m!108875))

(declare-fun m!108913 () Bool)

(assert (=> b!99117 m!108913))

(declare-fun m!108915 () Bool)

(assert (=> b!99117 m!108915))

(assert (=> b!99117 m!108747))

(assert (=> b!99117 m!108915))

(assert (=> b!99117 m!108747))

(declare-fun m!108917 () Bool)

(assert (=> b!99117 m!108917))

(assert (=> b!99117 m!108875))

(declare-fun m!108919 () Bool)

(assert (=> b!99112 m!108919))

(assert (=> b!98942 d!26617))

(declare-fun d!26619 () Bool)

(assert (=> d!26619 (= (valid!397 thiss!992) (valid!396 (v!2817 (underlying!341 thiss!992))))))

(declare-fun bs!4096 () Bool)

(assert (= bs!4096 d!26619))

(declare-fun m!108921 () Bool)

(assert (=> bs!4096 m!108921))

(assert (=> start!11802 d!26619))

(declare-fun d!26621 () Bool)

(declare-fun res!49806 () Bool)

(declare-fun e!64615 () Bool)

(assert (=> d!26621 (=> (not res!49806) (not e!64615))))

(declare-fun simpleValid!69 (LongMapFixedSize!856) Bool)

(assert (=> d!26621 (= res!49806 (simpleValid!69 newMap!16))))

(assert (=> d!26621 (= (valid!396 newMap!16) e!64615)))

(declare-fun b!99136 () Bool)

(declare-fun res!49807 () Bool)

(assert (=> b!99136 (=> (not res!49807) (not e!64615))))

(declare-fun arrayCountValidKeys!0 (array!4237 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!99136 (= res!49807 (= (arrayCountValidKeys!0 (_keys!4195 newMap!16) #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (_size!477 newMap!16)))))

(declare-fun b!99137 () Bool)

(declare-fun res!49808 () Bool)

(assert (=> b!99137 (=> (not res!49808) (not e!64615))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4237 (_ BitVec 32)) Bool)

(assert (=> b!99137 (= res!49808 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(declare-fun b!99138 () Bool)

(assert (=> b!99138 (= e!64615 (arrayNoDuplicates!0 (_keys!4195 newMap!16) #b00000000000000000000000000000000 Nil!1566))))

(assert (= (and d!26621 res!49806) b!99136))

(assert (= (and b!99136 res!49807) b!99137))

(assert (= (and b!99137 res!49808) b!99138))

(declare-fun m!108923 () Bool)

(assert (=> d!26621 m!108923))

(declare-fun m!108925 () Bool)

(assert (=> b!99136 m!108925))

(declare-fun m!108927 () Bool)

(assert (=> b!99137 m!108927))

(declare-fun m!108929 () Bool)

(assert (=> b!99138 m!108929))

(assert (=> b!98932 d!26621))

(declare-fun d!26623 () Bool)

(assert (=> d!26623 (= (validMask!0 (mask!6608 (v!2817 (underlying!341 thiss!992)))) (and (or (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000001111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000011111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000001111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000011111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000001111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000011111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000001111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000011111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000001111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000011111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000001111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000011111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000111111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000001111111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000011111111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000111111111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000001111111111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000011111111111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000111111111111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00001111111111111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00011111111111111111111111111111) (= (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!98940 d!26623))

(declare-fun d!26625 () Bool)

(declare-fun e!64621 () Bool)

(assert (=> d!26625 e!64621))

(declare-fun res!49811 () Bool)

(assert (=> d!26625 (=> res!49811 e!64621)))

(declare-fun lt!49865 () Bool)

(assert (=> d!26625 (= res!49811 (not lt!49865))))

(declare-fun lt!49864 () Bool)

(assert (=> d!26625 (= lt!49865 lt!49864)))

(declare-fun lt!49863 () Unit!2982)

(declare-fun e!64620 () Unit!2982)

(assert (=> d!26625 (= lt!49863 e!64620)))

(declare-fun c!16893 () Bool)

(assert (=> d!26625 (= c!16893 lt!49864)))

(declare-fun containsKey!155 (List!1568 (_ BitVec 64)) Bool)

(assert (=> d!26625 (= lt!49864 (containsKey!155 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!26625 (= (contains!792 lt!49742 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!49865)))

(declare-fun b!99145 () Bool)

(declare-fun lt!49866 () Unit!2982)

(assert (=> b!99145 (= e!64620 lt!49866)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!103 (List!1568 (_ BitVec 64)) Unit!2982)

(assert (=> b!99145 (= lt!49866 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-datatypes ((Option!158 0))(
  ( (Some!157 (v!2823 V!3161)) (None!156) )
))
(declare-fun isDefined!104 (Option!158) Bool)

(declare-fun getValueByKey!152 (List!1568 (_ BitVec 64)) Option!158)

(assert (=> b!99145 (isDefined!104 (getValueByKey!152 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99146 () Bool)

(declare-fun Unit!2989 () Unit!2982)

(assert (=> b!99146 (= e!64620 Unit!2989)))

(declare-fun b!99147 () Bool)

(assert (=> b!99147 (= e!64621 (isDefined!104 (getValueByKey!152 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (= (and d!26625 c!16893) b!99145))

(assert (= (and d!26625 (not c!16893)) b!99146))

(assert (= (and d!26625 (not res!49811)) b!99147))

(assert (=> d!26625 m!108735))

(declare-fun m!108931 () Bool)

(assert (=> d!26625 m!108931))

(assert (=> b!99145 m!108735))

(declare-fun m!108933 () Bool)

(assert (=> b!99145 m!108933))

(assert (=> b!99145 m!108735))

(declare-fun m!108935 () Bool)

(assert (=> b!99145 m!108935))

(assert (=> b!99145 m!108935))

(declare-fun m!108937 () Bool)

(assert (=> b!99145 m!108937))

(assert (=> b!99147 m!108735))

(assert (=> b!99147 m!108935))

(assert (=> b!99147 m!108935))

(assert (=> b!99147 m!108937))

(assert (=> b!98928 d!26625))

(declare-fun bm!10159 () Bool)

(declare-fun call!10162 () ListLongMap!1503)

(declare-fun call!10166 () ListLongMap!1503)

(assert (=> bm!10159 (= call!10162 call!10166)))

(declare-fun b!99228 () Bool)

(declare-fun e!64669 () Unit!2982)

(declare-fun lt!49936 () Unit!2982)

(assert (=> b!99228 (= e!64669 lt!49936)))

(declare-fun call!10184 () Unit!2982)

(assert (=> b!99228 (= lt!49936 call!10184)))

(declare-datatypes ((SeekEntryResult!248 0))(
  ( (MissingZero!248 (index!3136 (_ BitVec 32))) (Found!248 (index!3137 (_ BitVec 32))) (Intermediate!248 (undefined!1060 Bool) (index!3138 (_ BitVec 32)) (x!13098 (_ BitVec 32))) (Undefined!248) (MissingVacant!248 (index!3139 (_ BitVec 32))) )
))
(declare-fun lt!49938 () SeekEntryResult!248)

(declare-fun call!10178 () SeekEntryResult!248)

(assert (=> b!99228 (= lt!49938 call!10178)))

(declare-fun c!16921 () Bool)

(assert (=> b!99228 (= c!16921 ((_ is MissingZero!248) lt!49938))))

(declare-fun e!64683 () Bool)

(assert (=> b!99228 e!64683))

(declare-fun b!99229 () Bool)

(declare-fun c!16931 () Bool)

(assert (=> b!99229 (= c!16931 ((_ is MissingVacant!248) lt!49938))))

(declare-fun e!64676 () Bool)

(assert (=> b!99229 (= e!64683 e!64676)))

(declare-fun bm!10160 () Bool)

(declare-fun call!10180 () Bool)

(declare-fun call!10177 () Bool)

(assert (=> bm!10160 (= call!10180 call!10177)))

(declare-fun bm!10161 () Bool)

(declare-fun c!16929 () Bool)

(declare-fun c!16925 () Bool)

(assert (=> bm!10161 (= c!16929 c!16925)))

(declare-fun e!64680 () ListLongMap!1503)

(declare-fun call!10168 () Bool)

(declare-fun lt!49929 () SeekEntryResult!248)

(assert (=> bm!10161 (= call!10168 (contains!792 e!64680 (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(declare-fun bm!10162 () Bool)

(declare-fun call!10183 () Bool)

(declare-fun call!10182 () Bool)

(assert (=> bm!10162 (= call!10183 call!10182)))

(declare-fun b!99230 () Bool)

(declare-fun res!49844 () Bool)

(declare-fun call!10173 () Bool)

(assert (=> b!99230 (= res!49844 call!10173)))

(declare-fun e!64678 () Bool)

(assert (=> b!99230 (=> (not res!49844) (not e!64678))))

(declare-fun b!99232 () Bool)

(declare-fun lt!49932 () array!4239)

(assert (=> b!99232 (= e!64680 (getCurrentListMap!456 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun bm!10163 () Bool)

(declare-fun call!10179 () ListLongMap!1503)

(declare-fun call!10175 () ListLongMap!1503)

(assert (=> bm!10163 (= call!10179 call!10175)))

(declare-fun b!99233 () Bool)

(declare-fun c!16923 () Bool)

(assert (=> b!99233 (= c!16923 ((_ is MissingVacant!248) lt!49929))))

(declare-fun e!64665 () tuple2!2306)

(declare-fun e!64674 () tuple2!2306)

(assert (=> b!99233 (= e!64665 e!64674)))

(declare-fun b!99234 () Bool)

(declare-fun lt!49933 () Unit!2982)

(declare-fun lt!49946 () Unit!2982)

(assert (=> b!99234 (= lt!49933 lt!49946)))

(declare-fun call!10181 () ListLongMap!1503)

(assert (=> b!99234 (= call!10181 call!10179)))

(declare-fun lt!49942 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!42 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 V!3161 Int) Unit!2982)

(assert (=> b!99234 (= lt!49946 (lemmaChangeZeroKeyThenAddPairToListMap!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) lt!49942 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (defaultEntry!2501 newMap!16)))))

(assert (=> b!99234 (= lt!49942 (bvor (extraKeys!2318 newMap!16) #b00000000000000000000000000000001))))

(declare-fun e!64681 () tuple2!2306)

(assert (=> b!99234 (= e!64681 (tuple2!2307 true (LongMapFixedSize!857 (defaultEntry!2501 newMap!16) (mask!6608 newMap!16) (bvor (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (_size!477 newMap!16) (_keys!4195 newMap!16) (_values!2484 newMap!16) (_vacant!477 newMap!16))))))

(declare-fun b!99235 () Bool)

(assert (=> b!99235 (= e!64676 ((_ is Undefined!248) lt!49938))))

(declare-fun bm!10164 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) Int) Unit!2982)

(assert (=> bm!10164 (= call!10184 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(declare-fun b!99236 () Bool)

(declare-fun e!64671 () Bool)

(declare-fun call!10174 () ListLongMap!1503)

(declare-fun call!10176 () ListLongMap!1503)

(assert (=> b!99236 (= e!64671 (= call!10174 call!10176))))

(declare-fun b!99237 () Bool)

(declare-fun res!49848 () Bool)

(declare-fun e!64677 () Bool)

(assert (=> b!99237 (=> (not res!49848) (not e!64677))))

(declare-fun lt!49940 () SeekEntryResult!248)

(assert (=> b!99237 (= res!49848 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3136 lt!49940)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!49923 () (_ BitVec 32))

(declare-fun c!16932 () Bool)

(declare-fun bm!10165 () Bool)

(declare-fun c!16926 () Bool)

(assert (=> bm!10165 (= call!10166 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun b!99238 () Bool)

(declare-fun e!64679 () Bool)

(assert (=> b!99238 (= e!64679 (not call!10180))))

(declare-fun bm!10166 () Bool)

(declare-fun call!10169 () ListLongMap!1503)

(assert (=> bm!10166 (= call!10181 call!10169)))

(declare-fun bm!10167 () Bool)

(assert (=> bm!10167 (= call!10177 (arrayContainsKey!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!99239 () Bool)

(declare-fun e!64668 () Unit!2982)

(declare-fun Unit!2990 () Unit!2982)

(assert (=> b!99239 (= e!64668 Unit!2990)))

(declare-fun lt!49922 () Unit!2982)

(assert (=> b!99239 (= lt!49922 call!10184)))

(declare-fun call!10185 () SeekEntryResult!248)

(assert (=> b!99239 (= lt!49940 call!10185)))

(declare-fun c!16922 () Bool)

(assert (=> b!99239 (= c!16922 ((_ is MissingZero!248) lt!49940))))

(declare-fun e!64682 () Bool)

(assert (=> b!99239 e!64682))

(declare-fun lt!49939 () Unit!2982)

(assert (=> b!99239 (= lt!49939 lt!49922)))

(assert (=> b!99239 false))

(declare-fun b!99240 () Bool)

(declare-fun Unit!2991 () Unit!2982)

(assert (=> b!99240 (= e!64669 Unit!2991)))

(declare-fun lt!49927 () Unit!2982)

(declare-fun call!10165 () Unit!2982)

(assert (=> b!99240 (= lt!49927 call!10165)))

(declare-fun lt!49931 () SeekEntryResult!248)

(assert (=> b!99240 (= lt!49931 call!10178)))

(declare-fun res!49853 () Bool)

(assert (=> b!99240 (= res!49853 ((_ is Found!248) lt!49931))))

(declare-fun e!64666 () Bool)

(assert (=> b!99240 (=> (not res!49853) (not e!64666))))

(assert (=> b!99240 e!64666))

(declare-fun lt!49925 () Unit!2982)

(assert (=> b!99240 (= lt!49925 lt!49927)))

(assert (=> b!99240 false))

(declare-fun c!16924 () Bool)

(declare-fun lt!49937 () SeekEntryResult!248)

(declare-fun c!16927 () Bool)

(declare-fun bm!10168 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!10168 (= call!10182 (inRange!0 (ite c!16925 (ite c!16927 (index!3137 lt!49931) (ite c!16921 (index!3136 lt!49938) (index!3139 lt!49938))) (ite c!16924 (index!3137 lt!49937) (ite c!16922 (index!3136 lt!49940) (index!3139 lt!49940)))) (mask!6608 newMap!16)))))

(declare-fun bm!10169 () Bool)

(assert (=> bm!10169 (= call!10176 (map!1256 newMap!16))))

(declare-fun bm!10170 () Bool)

(declare-fun call!10171 () ListLongMap!1503)

(assert (=> bm!10170 (= call!10171 call!10175)))

(declare-fun b!99241 () Bool)

(declare-fun lt!49934 () Unit!2982)

(declare-fun lt!49943 () Unit!2982)

(assert (=> b!99241 (= lt!49934 lt!49943)))

(assert (=> b!99241 (= call!10181 call!10162)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 V!3161 Int) Unit!2982)

(assert (=> b!99241 (= lt!49943 (lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(assert (=> b!99241 (= lt!49923 (bvor (extraKeys!2318 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!99241 (= e!64681 (tuple2!2307 true (LongMapFixedSize!857 (defaultEntry!2501 newMap!16) (mask!6608 newMap!16) (bvor (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!477 newMap!16) (_keys!4195 newMap!16) (_values!2484 newMap!16) (_vacant!477 newMap!16))))))

(declare-fun b!99242 () Bool)

(declare-fun e!64684 () tuple2!2306)

(assert (=> b!99242 (= e!64684 e!64681)))

(assert (=> b!99242 (= c!16926 (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99243 () Bool)

(declare-fun lt!49930 () tuple2!2306)

(assert (=> b!99243 (= e!64674 (tuple2!2307 (_1!1164 lt!49930) (_2!1164 lt!49930)))))

(declare-fun call!10170 () tuple2!2306)

(assert (=> b!99243 (= lt!49930 call!10170)))

(declare-fun bm!10171 () Bool)

(assert (=> bm!10171 (= call!10169 (+!131 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166) (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!10172 () Bool)

(declare-fun updateHelperNewKey!42 (LongMapFixedSize!856 (_ BitVec 64) V!3161 (_ BitVec 32)) tuple2!2306)

(assert (=> bm!10172 (= call!10170 (updateHelperNewKey!42 newMap!16 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))))))

(declare-fun b!99244 () Bool)

(declare-fun c!16920 () Bool)

(assert (=> b!99244 (= c!16920 ((_ is MissingVacant!248) lt!49940))))

(declare-fun e!64664 () Bool)

(assert (=> b!99244 (= e!64682 e!64664)))

(declare-fun b!99245 () Bool)

(declare-fun lt!49928 () Unit!2982)

(assert (=> b!99245 (= lt!49928 e!64669)))

(assert (=> b!99245 (= c!16927 call!10168)))

(assert (=> b!99245 (= e!64665 (tuple2!2307 false newMap!16))))

(declare-fun b!99246 () Bool)

(declare-fun e!64675 () Bool)

(declare-fun call!10167 () Bool)

(assert (=> b!99246 (= e!64675 (not call!10167))))

(declare-fun b!99247 () Bool)

(assert (=> b!99247 (= e!64677 (not call!10180))))

(declare-fun b!99231 () Bool)

(declare-fun res!49846 () Bool)

(assert (=> b!99231 (= res!49846 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3139 lt!49940)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99231 (=> (not res!49846) (not e!64679))))

(declare-fun d!26627 () Bool)

(declare-fun e!64667 () Bool)

(assert (=> d!26627 e!64667))

(declare-fun res!49851 () Bool)

(assert (=> d!26627 (=> (not res!49851) (not e!64667))))

(declare-fun lt!49941 () tuple2!2306)

(assert (=> d!26627 (= res!49851 (valid!396 (_2!1164 lt!49941)))))

(assert (=> d!26627 (= lt!49941 e!64684)))

(assert (=> d!26627 (= c!16932 (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvneg (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (=> d!26627 (valid!396 newMap!16)))

(assert (=> d!26627 (= (update!147 newMap!16 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!49941)))

(declare-fun bm!10173 () Bool)

(declare-fun call!10163 () SeekEntryResult!248)

(assert (=> bm!10173 (= call!10185 call!10163)))

(declare-fun b!99248 () Bool)

(assert (=> b!99248 (= e!64678 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49937)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99249 () Bool)

(assert (=> b!99249 (= e!64664 e!64679)))

(declare-fun res!49850 () Bool)

(declare-fun call!10164 () Bool)

(assert (=> b!99249 (= res!49850 call!10164)))

(assert (=> b!99249 (=> (not res!49850) (not e!64679))))

(declare-fun b!99250 () Bool)

(declare-fun res!49841 () Bool)

(assert (=> b!99250 (=> (not res!49841) (not e!64677))))

(assert (=> b!99250 (= res!49841 call!10164)))

(assert (=> b!99250 (= e!64682 e!64677)))

(declare-fun b!99251 () Bool)

(assert (=> b!99251 (= e!64667 e!64671)))

(declare-fun c!16930 () Bool)

(assert (=> b!99251 (= c!16930 (_1!1164 lt!49941))))

(declare-fun b!99252 () Bool)

(declare-fun lt!49945 () Unit!2982)

(assert (=> b!99252 (= e!64668 lt!49945)))

(assert (=> b!99252 (= lt!49945 call!10165)))

(assert (=> b!99252 (= lt!49937 call!10185)))

(declare-fun res!49852 () Bool)

(assert (=> b!99252 (= res!49852 ((_ is Found!248) lt!49937))))

(assert (=> b!99252 (=> (not res!49852) (not e!64678))))

(assert (=> b!99252 e!64678))

(declare-fun e!64673 () Bool)

(declare-fun b!99253 () Bool)

(assert (=> b!99253 (= e!64673 (= call!10174 (+!131 call!10176 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99254 () Bool)

(declare-fun e!64672 () Bool)

(assert (=> b!99254 (= e!64676 e!64672)))

(declare-fun res!49842 () Bool)

(declare-fun call!10172 () Bool)

(assert (=> b!99254 (= res!49842 call!10172)))

(assert (=> b!99254 (=> (not res!49842) (not e!64672))))

(declare-fun bm!10174 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) Int) Unit!2982)

(assert (=> bm!10174 (= call!10165 (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(declare-fun b!99255 () Bool)

(assert (=> b!99255 (= e!64666 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49931)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun bm!10175 () Bool)

(assert (=> bm!10175 (= call!10164 call!10173)))

(declare-fun bm!10176 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4237 (_ BitVec 32)) SeekEntryResult!248)

(assert (=> bm!10176 (= call!10163 (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(declare-fun b!99256 () Bool)

(declare-fun lt!49926 () tuple2!2306)

(assert (=> b!99256 (= lt!49926 call!10170)))

(declare-fun e!64670 () tuple2!2306)

(assert (=> b!99256 (= e!64670 (tuple2!2307 (_1!1164 lt!49926) (_2!1164 lt!49926)))))

(declare-fun bm!10177 () Bool)

(assert (=> bm!10177 (= call!10173 call!10182)))

(declare-fun bm!10178 () Bool)

(assert (=> bm!10178 (= call!10178 call!10163)))

(declare-fun b!99257 () Bool)

(declare-fun res!49849 () Bool)

(assert (=> b!99257 (= res!49849 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3139 lt!49938)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99257 (=> (not res!49849) (not e!64672))))

(declare-fun b!99258 () Bool)

(assert (=> b!99258 (= e!64674 e!64670)))

(declare-fun c!16928 () Bool)

(assert (=> b!99258 (= c!16928 ((_ is MissingZero!248) lt!49929))))

(declare-fun b!99259 () Bool)

(assert (=> b!99259 (= e!64684 e!64665)))

(assert (=> b!99259 (= lt!49929 (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(assert (=> b!99259 (= c!16925 ((_ is Undefined!248) lt!49929))))

(declare-fun b!99260 () Bool)

(assert (=> b!99260 (= e!64671 e!64673)))

(declare-fun res!49843 () Bool)

(assert (=> b!99260 (= res!49843 (contains!792 call!10174 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> b!99260 (=> (not res!49843) (not e!64673))))

(declare-fun b!99261 () Bool)

(declare-fun lt!49935 () Unit!2982)

(declare-fun lt!49921 () Unit!2982)

(assert (=> b!99261 (= lt!49935 lt!49921)))

(assert (=> b!99261 call!10168))

(declare-fun lemmaValidKeyInArrayIsInListMap!102 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) Int) Unit!2982)

(assert (=> b!99261 (= lt!49921 (lemmaValidKeyInArrayIsInListMap!102 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3137 lt!49929) (defaultEntry!2501 newMap!16)))))

(assert (=> b!99261 (= lt!49932 (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))))

(declare-fun lt!49944 () Unit!2982)

(declare-fun lt!49947 () Unit!2982)

(assert (=> b!99261 (= lt!49944 lt!49947)))

(assert (=> b!99261 (= call!10169 call!10171)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) (_ BitVec 64) V!3161 Int) Unit!2982)

(assert (=> b!99261 (= lt!49947 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3137 lt!49929) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(declare-fun lt!49924 () Unit!2982)

(assert (=> b!99261 (= lt!49924 e!64668)))

(assert (=> b!99261 (= c!16924 (contains!792 call!10166 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> b!99261 (= e!64670 (tuple2!2307 true (LongMapFixedSize!857 (defaultEntry!2501 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (_size!477 newMap!16) (_keys!4195 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (_vacant!477 newMap!16))))))

(declare-fun b!99262 () Bool)

(assert (=> b!99262 (= e!64664 ((_ is Undefined!248) lt!49940))))

(declare-fun b!99263 () Bool)

(declare-fun res!49840 () Bool)

(assert (=> b!99263 (=> (not res!49840) (not e!64675))))

(assert (=> b!99263 (= res!49840 call!10172)))

(assert (=> b!99263 (= e!64683 e!64675)))

(declare-fun b!99264 () Bool)

(declare-fun res!49847 () Bool)

(assert (=> b!99264 (=> (not res!49847) (not e!64675))))

(assert (=> b!99264 (= res!49847 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3136 lt!49938)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99265 () Bool)

(declare-fun res!49845 () Bool)

(assert (=> b!99265 (= res!49845 call!10183)))

(assert (=> b!99265 (=> (not res!49845) (not e!64666))))

(declare-fun b!99266 () Bool)

(assert (=> b!99266 (= e!64680 call!10171)))

(declare-fun b!99267 () Bool)

(assert (=> b!99267 (= e!64672 (not call!10167))))

(declare-fun bm!10179 () Bool)

(assert (=> bm!10179 (= call!10172 call!10183)))

(declare-fun bm!10180 () Bool)

(assert (=> bm!10180 (= call!10175 (getCurrentListMap!456 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun bm!10181 () Bool)

(assert (=> bm!10181 (= call!10167 call!10177)))

(declare-fun bm!10182 () Bool)

(assert (=> bm!10182 (= call!10174 (map!1256 (_2!1164 lt!49941)))))

(assert (= (and d!26627 c!16932) b!99242))

(assert (= (and d!26627 (not c!16932)) b!99259))

(assert (= (and b!99242 c!16926) b!99234))

(assert (= (and b!99242 (not c!16926)) b!99241))

(assert (= (or b!99234 b!99241) bm!10163))

(assert (= (or b!99234 b!99241) bm!10159))

(assert (= (or b!99234 b!99241) bm!10166))

(assert (= (and b!99259 c!16925) b!99245))

(assert (= (and b!99259 (not c!16925)) b!99233))

(assert (= (and b!99245 c!16927) b!99240))

(assert (= (and b!99245 (not c!16927)) b!99228))

(assert (= (and b!99240 res!49853) b!99265))

(assert (= (and b!99265 res!49845) b!99255))

(assert (= (and b!99228 c!16921) b!99263))

(assert (= (and b!99228 (not c!16921)) b!99229))

(assert (= (and b!99263 res!49840) b!99264))

(assert (= (and b!99264 res!49847) b!99246))

(assert (= (and b!99229 c!16931) b!99254))

(assert (= (and b!99229 (not c!16931)) b!99235))

(assert (= (and b!99254 res!49842) b!99257))

(assert (= (and b!99257 res!49849) b!99267))

(assert (= (or b!99263 b!99254) bm!10179))

(assert (= (or b!99246 b!99267) bm!10181))

(assert (= (or b!99265 bm!10179) bm!10162))

(assert (= (or b!99240 b!99228) bm!10178))

(assert (= (and b!99233 c!16923) b!99243))

(assert (= (and b!99233 (not c!16923)) b!99258))

(assert (= (and b!99258 c!16928) b!99256))

(assert (= (and b!99258 (not c!16928)) b!99261))

(assert (= (and b!99261 c!16924) b!99252))

(assert (= (and b!99261 (not c!16924)) b!99239))

(assert (= (and b!99252 res!49852) b!99230))

(assert (= (and b!99230 res!49844) b!99248))

(assert (= (and b!99239 c!16922) b!99250))

(assert (= (and b!99239 (not c!16922)) b!99244))

(assert (= (and b!99250 res!49841) b!99237))

(assert (= (and b!99237 res!49848) b!99247))

(assert (= (and b!99244 c!16920) b!99249))

(assert (= (and b!99244 (not c!16920)) b!99262))

(assert (= (and b!99249 res!49850) b!99231))

(assert (= (and b!99231 res!49846) b!99238))

(assert (= (or b!99250 b!99249) bm!10175))

(assert (= (or b!99247 b!99238) bm!10160))

(assert (= (or b!99230 bm!10175) bm!10177))

(assert (= (or b!99252 b!99239) bm!10173))

(assert (= (or b!99243 b!99256) bm!10172))

(assert (= (or b!99228 b!99239) bm!10164))

(assert (= (or b!99245 b!99261) bm!10170))

(assert (= (or bm!10162 bm!10177) bm!10168))

(assert (= (or bm!10181 bm!10160) bm!10167))

(assert (= (or bm!10178 bm!10173) bm!10176))

(assert (= (or b!99240 b!99252) bm!10174))

(assert (= (or b!99245 b!99261) bm!10161))

(assert (= (and bm!10161 c!16929) b!99266))

(assert (= (and bm!10161 (not c!16929)) b!99232))

(assert (= (or bm!10159 b!99261) bm!10165))

(assert (= (or bm!10163 bm!10170) bm!10180))

(assert (= (or bm!10166 b!99261) bm!10171))

(assert (= (and d!26627 res!49851) b!99251))

(assert (= (and b!99251 c!16930) b!99260))

(assert (= (and b!99251 (not c!16930)) b!99236))

(assert (= (and b!99260 res!49843) b!99253))

(assert (= (or b!99260 b!99253 b!99236) bm!10182))

(assert (= (or b!99253 b!99236) bm!10169))

(declare-fun m!108939 () Bool)

(assert (=> bm!10161 m!108939))

(declare-fun m!108941 () Bool)

(assert (=> bm!10161 m!108941))

(declare-fun m!108943 () Bool)

(assert (=> bm!10171 m!108943))

(declare-fun m!108945 () Bool)

(assert (=> b!99261 m!108945))

(declare-fun m!108947 () Bool)

(assert (=> b!99261 m!108947))

(assert (=> b!99261 m!108735))

(assert (=> b!99261 m!108749))

(declare-fun m!108949 () Bool)

(assert (=> b!99261 m!108949))

(assert (=> b!99261 m!108735))

(declare-fun m!108951 () Bool)

(assert (=> b!99261 m!108951))

(assert (=> b!99260 m!108735))

(declare-fun m!108953 () Bool)

(assert (=> b!99260 m!108953))

(assert (=> b!99241 m!108749))

(declare-fun m!108955 () Bool)

(assert (=> b!99241 m!108955))

(declare-fun m!108957 () Bool)

(assert (=> bm!10165 m!108957))

(declare-fun m!108959 () Bool)

(assert (=> b!99253 m!108959))

(assert (=> b!99259 m!108735))

(declare-fun m!108961 () Bool)

(assert (=> b!99259 m!108961))

(declare-fun m!108963 () Bool)

(assert (=> bm!10168 m!108963))

(assert (=> bm!10176 m!108735))

(assert (=> bm!10176 m!108961))

(declare-fun m!108965 () Bool)

(assert (=> d!26627 m!108965))

(assert (=> d!26627 m!108773))

(declare-fun m!108967 () Bool)

(assert (=> b!99248 m!108967))

(declare-fun m!108969 () Bool)

(assert (=> b!99257 m!108969))

(declare-fun m!108971 () Bool)

(assert (=> b!99255 m!108971))

(assert (=> bm!10180 m!108947))

(declare-fun m!108973 () Bool)

(assert (=> bm!10180 m!108973))

(declare-fun m!108975 () Bool)

(assert (=> b!99237 m!108975))

(assert (=> bm!10167 m!108735))

(declare-fun m!108977 () Bool)

(assert (=> bm!10167 m!108977))

(declare-fun m!108979 () Bool)

(assert (=> b!99231 m!108979))

(assert (=> bm!10172 m!108735))

(assert (=> bm!10172 m!108749))

(declare-fun m!108981 () Bool)

(assert (=> bm!10172 m!108981))

(declare-fun m!108983 () Bool)

(assert (=> bm!10182 m!108983))

(assert (=> b!99234 m!108749))

(declare-fun m!108985 () Bool)

(assert (=> b!99234 m!108985))

(declare-fun m!108987 () Bool)

(assert (=> b!99264 m!108987))

(declare-fun m!108989 () Bool)

(assert (=> b!99232 m!108989))

(assert (=> bm!10169 m!108757))

(assert (=> bm!10164 m!108735))

(declare-fun m!108991 () Bool)

(assert (=> bm!10164 m!108991))

(assert (=> bm!10174 m!108735))

(declare-fun m!108993 () Bool)

(assert (=> bm!10174 m!108993))

(assert (=> b!98928 d!26627))

(declare-fun d!26629 () Bool)

(declare-fun c!16935 () Bool)

(assert (=> d!26629 (= c!16935 ((_ is ValueCellFull!974) (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun e!64687 () V!3161)

(assert (=> d!26629 (= (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64687)))

(declare-fun b!99272 () Bool)

(declare-fun get!1297 (ValueCell!974 V!3161) V!3161)

(assert (=> b!99272 (= e!64687 (get!1297 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99273 () Bool)

(declare-fun get!1298 (ValueCell!974 V!3161) V!3161)

(assert (=> b!99273 (= e!64687 (get!1298 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26629 c!16935) b!99272))

(assert (= (and d!26629 (not c!16935)) b!99273))

(assert (=> b!99272 m!108745))

(assert (=> b!99272 m!108747))

(declare-fun m!108995 () Bool)

(assert (=> b!99272 m!108995))

(assert (=> b!99273 m!108745))

(assert (=> b!99273 m!108747))

(declare-fun m!108997 () Bool)

(assert (=> b!99273 m!108997))

(assert (=> b!98928 d!26629))

(declare-fun d!26631 () Bool)

(assert (=> d!26631 (= (array_inv!1239 (_keys!4195 newMap!16)) (bvsge (size!2263 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98935 d!26631))

(declare-fun d!26633 () Bool)

(assert (=> d!26633 (= (array_inv!1240 (_values!2484 newMap!16)) (bvsge (size!2264 (_values!2484 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98935 d!26633))

(declare-fun d!26635 () Bool)

(assert (=> d!26635 (not (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49950 () Unit!2982)

(declare-fun choose!68 (array!4237 (_ BitVec 32) (_ BitVec 64) List!1569) Unit!2982)

(assert (=> d!26635 (= lt!49950 (choose!68 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566)))))

(assert (=> d!26635 (bvslt (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26635 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566)) lt!49950)))

(declare-fun bs!4097 () Bool)

(assert (= bs!4097 d!26635))

(assert (=> bs!4097 m!108735))

(assert (=> bs!4097 m!108739))

(assert (=> bs!4097 m!108735))

(declare-fun m!108999 () Bool)

(assert (=> bs!4097 m!108999))

(assert (=> b!98939 d!26635))

(declare-fun d!26637 () Bool)

(assert (=> d!26637 (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) from!355 Nil!1566)))

(declare-fun lt!49953 () Unit!2982)

(declare-fun choose!39 (array!4237 (_ BitVec 32) (_ BitVec 32)) Unit!2982)

(assert (=> d!26637 (= lt!49953 (choose!39 (_keys!4195 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!26637 (bvslt (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26637 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000 from!355) lt!49953)))

(declare-fun bs!4098 () Bool)

(assert (= bs!4098 d!26637))

(assert (=> bs!4098 m!108733))

(declare-fun m!109001 () Bool)

(assert (=> bs!4098 m!109001))

(assert (=> b!98939 d!26637))

(declare-fun d!26639 () Bool)

(declare-fun res!49858 () Bool)

(declare-fun e!64692 () Bool)

(assert (=> d!26639 (=> res!49858 e!64692)))

(assert (=> d!26639 (= res!49858 (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!26639 (= (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!64692)))

(declare-fun b!99278 () Bool)

(declare-fun e!64693 () Bool)

(assert (=> b!99278 (= e!64692 e!64693)))

(declare-fun res!49859 () Bool)

(assert (=> b!99278 (=> (not res!49859) (not e!64693))))

(assert (=> b!99278 (= res!49859 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99279 () Bool)

(assert (=> b!99279 (= e!64693 (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!26639 (not res!49858)) b!99278))

(assert (= (and b!99278 res!49859) b!99279))

(assert (=> d!26639 m!108875))

(assert (=> b!99279 m!108735))

(declare-fun m!109003 () Bool)

(assert (=> b!99279 m!109003))

(assert (=> b!98939 d!26639))

(declare-fun d!26641 () Bool)

(declare-fun e!64696 () Bool)

(assert (=> d!26641 e!64696))

(declare-fun c!16938 () Bool)

(assert (=> d!26641 (= c!16938 (and (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!49956 () Unit!2982)

(declare-fun choose!608 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) (_ BitVec 32) Int) Unit!2982)

(assert (=> d!26641 (= lt!49956 (choose!608 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(assert (=> d!26641 (validMask!0 (mask!6608 (v!2817 (underlying!341 thiss!992))))))

(assert (=> d!26641 (= (lemmaListMapContainsThenArrayContainsFrom!88 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))) lt!49956)))

(declare-fun b!99284 () Bool)

(assert (=> b!99284 (= e!64696 (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!99285 () Bool)

(assert (=> b!99285 (= e!64696 (ite (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26641 c!16938) b!99284))

(assert (= (and d!26641 (not c!16938)) b!99285))

(assert (=> d!26641 m!108735))

(declare-fun m!109005 () Bool)

(assert (=> d!26641 m!109005))

(assert (=> d!26641 m!108767))

(assert (=> b!99284 m!108735))

(assert (=> b!99284 m!108739))

(assert (=> b!98939 d!26641))

(declare-fun b!99296 () Bool)

(declare-fun e!64705 () Bool)

(declare-fun e!64706 () Bool)

(assert (=> b!99296 (= e!64705 e!64706)))

(declare-fun c!16941 () Bool)

(assert (=> b!99296 (= c!16941 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun bm!10185 () Bool)

(declare-fun call!10188 () Bool)

(assert (=> bm!10185 (= call!10188 (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)))))

(declare-fun d!26643 () Bool)

(declare-fun res!49868 () Bool)

(declare-fun e!64707 () Bool)

(assert (=> d!26643 (=> res!49868 e!64707)))

(assert (=> d!26643 (= res!49868 (bvsge from!355 (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!26643 (= (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) from!355 Nil!1566) e!64707)))

(declare-fun b!99297 () Bool)

(assert (=> b!99297 (= e!64706 call!10188)))

(declare-fun b!99298 () Bool)

(assert (=> b!99298 (= e!64707 e!64705)))

(declare-fun res!49867 () Bool)

(assert (=> b!99298 (=> (not res!49867) (not e!64705))))

(declare-fun e!64708 () Bool)

(assert (=> b!99298 (= res!49867 (not e!64708))))

(declare-fun res!49866 () Bool)

(assert (=> b!99298 (=> (not res!49866) (not e!64708))))

(assert (=> b!99298 (= res!49866 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99299 () Bool)

(assert (=> b!99299 (= e!64706 call!10188)))

(declare-fun b!99300 () Bool)

(declare-fun contains!794 (List!1569 (_ BitVec 64)) Bool)

(assert (=> b!99300 (= e!64708 (contains!794 Nil!1566 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26643 (not res!49868)) b!99298))

(assert (= (and b!99298 res!49866) b!99300))

(assert (= (and b!99298 res!49867) b!99296))

(assert (= (and b!99296 c!16941) b!99299))

(assert (= (and b!99296 (not c!16941)) b!99297))

(assert (= (or b!99299 b!99297) bm!10185))

(assert (=> b!99296 m!108735))

(assert (=> b!99296 m!108735))

(declare-fun m!109007 () Bool)

(assert (=> b!99296 m!109007))

(assert (=> bm!10185 m!108735))

(declare-fun m!109009 () Bool)

(assert (=> bm!10185 m!109009))

(assert (=> b!99298 m!108735))

(assert (=> b!99298 m!108735))

(assert (=> b!99298 m!109007))

(assert (=> b!99300 m!108735))

(assert (=> b!99300 m!108735))

(declare-fun m!109011 () Bool)

(assert (=> b!99300 m!109011))

(assert (=> b!98939 d!26643))

(declare-fun mapIsEmpty!3781 () Bool)

(declare-fun mapRes!3781 () Bool)

(assert (=> mapIsEmpty!3781 mapRes!3781))

(declare-fun b!99308 () Bool)

(declare-fun e!64713 () Bool)

(assert (=> b!99308 (= e!64713 tp_is_empty!2635)))

(declare-fun condMapEmpty!3781 () Bool)

(declare-fun mapDefault!3781 () ValueCell!974)

(assert (=> mapNonEmpty!3765 (= condMapEmpty!3781 (= mapRest!3766 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3781)))))

(assert (=> mapNonEmpty!3765 (= tp!9604 (and e!64713 mapRes!3781))))

(declare-fun b!99307 () Bool)

(declare-fun e!64714 () Bool)

(assert (=> b!99307 (= e!64714 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3781 () Bool)

(declare-fun tp!9631 () Bool)

(assert (=> mapNonEmpty!3781 (= mapRes!3781 (and tp!9631 e!64714))))

(declare-fun mapValue!3781 () ValueCell!974)

(declare-fun mapKey!3781 () (_ BitVec 32))

(declare-fun mapRest!3781 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3781 (= mapRest!3766 (store mapRest!3781 mapKey!3781 mapValue!3781))))

(assert (= (and mapNonEmpty!3765 condMapEmpty!3781) mapIsEmpty!3781))

(assert (= (and mapNonEmpty!3765 (not condMapEmpty!3781)) mapNonEmpty!3781))

(assert (= (and mapNonEmpty!3781 ((_ is ValueCellFull!974) mapValue!3781)) b!99307))

(assert (= (and mapNonEmpty!3765 ((_ is ValueCellFull!974) mapDefault!3781)) b!99308))

(declare-fun m!109013 () Bool)

(assert (=> mapNonEmpty!3781 m!109013))

(declare-fun mapIsEmpty!3782 () Bool)

(declare-fun mapRes!3782 () Bool)

(assert (=> mapIsEmpty!3782 mapRes!3782))

(declare-fun b!99310 () Bool)

(declare-fun e!64715 () Bool)

(assert (=> b!99310 (= e!64715 tp_is_empty!2635)))

(declare-fun condMapEmpty!3782 () Bool)

(declare-fun mapDefault!3782 () ValueCell!974)

(assert (=> mapNonEmpty!3766 (= condMapEmpty!3782 (= mapRest!3765 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3782)))))

(assert (=> mapNonEmpty!3766 (= tp!9603 (and e!64715 mapRes!3782))))

(declare-fun b!99309 () Bool)

(declare-fun e!64716 () Bool)

(assert (=> b!99309 (= e!64716 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3782 () Bool)

(declare-fun tp!9632 () Bool)

(assert (=> mapNonEmpty!3782 (= mapRes!3782 (and tp!9632 e!64716))))

(declare-fun mapValue!3782 () ValueCell!974)

(declare-fun mapKey!3782 () (_ BitVec 32))

(declare-fun mapRest!3782 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3782 (= mapRest!3765 (store mapRest!3782 mapKey!3782 mapValue!3782))))

(assert (= (and mapNonEmpty!3766 condMapEmpty!3782) mapIsEmpty!3782))

(assert (= (and mapNonEmpty!3766 (not condMapEmpty!3782)) mapNonEmpty!3782))

(assert (= (and mapNonEmpty!3782 ((_ is ValueCellFull!974) mapValue!3782)) b!99309))

(assert (= (and mapNonEmpty!3766 ((_ is ValueCellFull!974) mapDefault!3782)) b!99310))

(declare-fun m!109015 () Bool)

(assert (=> mapNonEmpty!3782 m!109015))

(declare-fun b_lambda!4425 () Bool)

(assert (= b_lambda!4423 (or (and b!98943 b_free!2437) (and b!98935 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))))) b_lambda!4425)))

(check-sat (not b_next!2437) (not bm!10105) (not d!26625) (not b_next!2439) (not b!99112) (not bm!10172) (not b!99232) (not d!26641) (not b!99273) (not bm!10182) tp_is_empty!2635 (not bm!10164) (not b!99260) (not b!99117) (not bm!10171) (not b!99137) (not mapNonEmpty!3781) (not b!99118) (not mapNonEmpty!3782) (not b!99138) (not d!26627) (not b!99241) (not b_lambda!4425) (not b!99116) (not bm!10174) (not bm!10110) (not b!99279) (not b!99284) (not b!99145) b_and!6099 (not d!26621) (not b!99129) (not bm!10176) (not b!99234) (not b!99259) (not b!99296) (not b!99124) (not bm!10169) (not b!99120) (not b_lambda!4421) (not d!26619) (not d!26617) (not b!99253) (not b!99300) (not bm!10185) (not b!99272) (not b!99298) (not bm!10109) (not bm!10165) (not bm!10168) (not b!99122) (not b!99261) (not bm!10180) (not d!26635) (not bm!10167) (not d!26615) (not d!26637) (not b!99147) (not bm!10161) b_and!6097 (not b!99136) (not bm!10107))
(check-sat b_and!6097 b_and!6099 (not b_next!2437) (not b_next!2439))
(get-model)

(declare-fun b!99323 () Bool)

(declare-fun e!64724 () SeekEntryResult!248)

(declare-fun lt!49963 () SeekEntryResult!248)

(assert (=> b!99323 (= e!64724 (MissingZero!248 (index!3138 lt!49963)))))

(declare-fun b!99324 () Bool)

(declare-fun e!64725 () SeekEntryResult!248)

(assert (=> b!99324 (= e!64725 Undefined!248)))

(declare-fun b!99325 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4237 (_ BitVec 32)) SeekEntryResult!248)

(assert (=> b!99325 (= e!64724 (seekKeyOrZeroReturnVacant!0 (x!13098 lt!49963) (index!3138 lt!49963) (index!3138 lt!49963) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(declare-fun lt!49965 () SeekEntryResult!248)

(declare-fun d!26645 () Bool)

(assert (=> d!26645 (and (or ((_ is Undefined!248) lt!49965) (not ((_ is Found!248) lt!49965)) (and (bvsge (index!3137 lt!49965) #b00000000000000000000000000000000) (bvslt (index!3137 lt!49965) (size!2263 (_keys!4195 newMap!16))))) (or ((_ is Undefined!248) lt!49965) ((_ is Found!248) lt!49965) (not ((_ is MissingZero!248) lt!49965)) (and (bvsge (index!3136 lt!49965) #b00000000000000000000000000000000) (bvslt (index!3136 lt!49965) (size!2263 (_keys!4195 newMap!16))))) (or ((_ is Undefined!248) lt!49965) ((_ is Found!248) lt!49965) ((_ is MissingZero!248) lt!49965) (not ((_ is MissingVacant!248) lt!49965)) (and (bvsge (index!3139 lt!49965) #b00000000000000000000000000000000) (bvslt (index!3139 lt!49965) (size!2263 (_keys!4195 newMap!16))))) (or ((_ is Undefined!248) lt!49965) (ite ((_ is Found!248) lt!49965) (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49965)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (ite ((_ is MissingZero!248) lt!49965) (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3136 lt!49965)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!248) lt!49965) (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3139 lt!49965)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26645 (= lt!49965 e!64725)))

(declare-fun c!16950 () Bool)

(assert (=> d!26645 (= c!16950 (and ((_ is Intermediate!248) lt!49963) (undefined!1060 lt!49963)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4237 (_ BitVec 32)) SeekEntryResult!248)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!26645 (= lt!49963 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (mask!6608 newMap!16)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(assert (=> d!26645 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26645 (= (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)) lt!49965)))

(declare-fun b!99326 () Bool)

(declare-fun e!64723 () SeekEntryResult!248)

(assert (=> b!99326 (= e!64723 (Found!248 (index!3138 lt!49963)))))

(declare-fun b!99327 () Bool)

(assert (=> b!99327 (= e!64725 e!64723)))

(declare-fun lt!49964 () (_ BitVec 64))

(assert (=> b!99327 (= lt!49964 (select (arr!2012 (_keys!4195 newMap!16)) (index!3138 lt!49963)))))

(declare-fun c!16948 () Bool)

(assert (=> b!99327 (= c!16948 (= lt!49964 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99328 () Bool)

(declare-fun c!16949 () Bool)

(assert (=> b!99328 (= c!16949 (= lt!49964 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99328 (= e!64723 e!64724)))

(assert (= (and d!26645 c!16950) b!99324))

(assert (= (and d!26645 (not c!16950)) b!99327))

(assert (= (and b!99327 c!16948) b!99326))

(assert (= (and b!99327 (not c!16948)) b!99328))

(assert (= (and b!99328 c!16949) b!99323))

(assert (= (and b!99328 (not c!16949)) b!99325))

(assert (=> b!99325 m!108735))

(declare-fun m!109017 () Bool)

(assert (=> b!99325 m!109017))

(declare-fun m!109019 () Bool)

(assert (=> d!26645 m!109019))

(assert (=> d!26645 m!108735))

(declare-fun m!109021 () Bool)

(assert (=> d!26645 m!109021))

(declare-fun m!109023 () Bool)

(assert (=> d!26645 m!109023))

(assert (=> d!26645 m!108735))

(assert (=> d!26645 m!109019))

(declare-fun m!109025 () Bool)

(assert (=> d!26645 m!109025))

(declare-fun m!109027 () Bool)

(assert (=> d!26645 m!109027))

(declare-fun m!109029 () Bool)

(assert (=> d!26645 m!109029))

(declare-fun m!109031 () Bool)

(assert (=> b!99327 m!109031))

(assert (=> bm!10176 d!26645))

(declare-fun d!26647 () Bool)

(assert (=> d!26647 (= (inRange!0 (ite c!16925 (ite c!16927 (index!3137 lt!49931) (ite c!16921 (index!3136 lt!49938) (index!3139 lt!49938))) (ite c!16924 (index!3137 lt!49937) (ite c!16922 (index!3136 lt!49940) (index!3139 lt!49940)))) (mask!6608 newMap!16)) (and (bvsge (ite c!16925 (ite c!16927 (index!3137 lt!49931) (ite c!16921 (index!3136 lt!49938) (index!3139 lt!49938))) (ite c!16924 (index!3137 lt!49937) (ite c!16922 (index!3136 lt!49940) (index!3139 lt!49940)))) #b00000000000000000000000000000000) (bvslt (ite c!16925 (ite c!16927 (index!3137 lt!49931) (ite c!16921 (index!3136 lt!49938) (index!3139 lt!49938))) (ite c!16924 (index!3137 lt!49937) (ite c!16922 (index!3136 lt!49940) (index!3139 lt!49940)))) (bvadd (mask!6608 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10168 d!26647))

(declare-fun b!99337 () Bool)

(declare-fun e!64734 () Bool)

(declare-fun call!10191 () Bool)

(assert (=> b!99337 (= e!64734 call!10191)))

(declare-fun b!99338 () Bool)

(declare-fun e!64733 () Bool)

(assert (=> b!99338 (= e!64733 e!64734)))

(declare-fun lt!49974 () (_ BitVec 64))

(assert (=> b!99338 (= lt!49974 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49973 () Unit!2982)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4237 (_ BitVec 64) (_ BitVec 32)) Unit!2982)

(assert (=> b!99338 (= lt!49973 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4195 newMap!16) lt!49974 #b00000000000000000000000000000000))))

(assert (=> b!99338 (arrayContainsKey!0 (_keys!4195 newMap!16) lt!49974 #b00000000000000000000000000000000)))

(declare-fun lt!49972 () Unit!2982)

(assert (=> b!99338 (= lt!49972 lt!49973)))

(declare-fun res!49874 () Bool)

(assert (=> b!99338 (= res!49874 (= (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (_keys!4195 newMap!16) (mask!6608 newMap!16)) (Found!248 #b00000000000000000000000000000000)))))

(assert (=> b!99338 (=> (not res!49874) (not e!64734))))

(declare-fun d!26649 () Bool)

(declare-fun res!49873 () Bool)

(declare-fun e!64732 () Bool)

(assert (=> d!26649 (=> res!49873 e!64732)))

(assert (=> d!26649 (= res!49873 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26649 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4195 newMap!16) (mask!6608 newMap!16)) e!64732)))

(declare-fun b!99339 () Bool)

(assert (=> b!99339 (= e!64733 call!10191)))

(declare-fun b!99340 () Bool)

(assert (=> b!99340 (= e!64732 e!64733)))

(declare-fun c!16953 () Bool)

(assert (=> b!99340 (= c!16953 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10188 () Bool)

(assert (=> bm!10188 (= call!10191 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(assert (= (and d!26649 (not res!49873)) b!99340))

(assert (= (and b!99340 c!16953) b!99338))

(assert (= (and b!99340 (not c!16953)) b!99339))

(assert (= (and b!99338 res!49874) b!99337))

(assert (= (or b!99337 b!99339) bm!10188))

(declare-fun m!109033 () Bool)

(assert (=> b!99338 m!109033))

(declare-fun m!109035 () Bool)

(assert (=> b!99338 m!109035))

(declare-fun m!109037 () Bool)

(assert (=> b!99338 m!109037))

(assert (=> b!99338 m!109033))

(declare-fun m!109039 () Bool)

(assert (=> b!99338 m!109039))

(assert (=> b!99340 m!109033))

(assert (=> b!99340 m!109033))

(declare-fun m!109041 () Bool)

(assert (=> b!99340 m!109041))

(declare-fun m!109043 () Bool)

(assert (=> bm!10188 m!109043))

(assert (=> b!99137 d!26649))

(declare-fun d!26651 () Bool)

(declare-fun res!49875 () Bool)

(declare-fun e!64735 () Bool)

(assert (=> d!26651 (=> (not res!49875) (not e!64735))))

(assert (=> d!26651 (= res!49875 (simpleValid!69 (_2!1164 lt!49941)))))

(assert (=> d!26651 (= (valid!396 (_2!1164 lt!49941)) e!64735)))

(declare-fun b!99341 () Bool)

(declare-fun res!49876 () Bool)

(assert (=> b!99341 (=> (not res!49876) (not e!64735))))

(assert (=> b!99341 (= res!49876 (= (arrayCountValidKeys!0 (_keys!4195 (_2!1164 lt!49941)) #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))) (_size!477 (_2!1164 lt!49941))))))

(declare-fun b!99342 () Bool)

(declare-fun res!49877 () Bool)

(assert (=> b!99342 (=> (not res!49877) (not e!64735))))

(assert (=> b!99342 (= res!49877 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4195 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941))))))

(declare-fun b!99343 () Bool)

(assert (=> b!99343 (= e!64735 (arrayNoDuplicates!0 (_keys!4195 (_2!1164 lt!49941)) #b00000000000000000000000000000000 Nil!1566))))

(assert (= (and d!26651 res!49875) b!99341))

(assert (= (and b!99341 res!49876) b!99342))

(assert (= (and b!99342 res!49877) b!99343))

(declare-fun m!109045 () Bool)

(assert (=> d!26651 m!109045))

(declare-fun m!109047 () Bool)

(assert (=> b!99341 m!109047))

(declare-fun m!109049 () Bool)

(assert (=> b!99342 m!109049))

(declare-fun m!109051 () Bool)

(assert (=> b!99343 m!109051))

(assert (=> d!26627 d!26651))

(assert (=> d!26627 d!26621))

(declare-fun d!26653 () Bool)

(declare-fun e!64738 () Bool)

(assert (=> d!26653 e!64738))

(declare-fun res!49883 () Bool)

(assert (=> d!26653 (=> (not res!49883) (not e!64738))))

(declare-fun lt!49985 () ListLongMap!1503)

(assert (=> d!26653 (= res!49883 (contains!792 lt!49985 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun lt!49984 () List!1568)

(assert (=> d!26653 (= lt!49985 (ListLongMap!1504 lt!49984))))

(declare-fun lt!49983 () Unit!2982)

(declare-fun lt!49986 () Unit!2982)

(assert (=> d!26653 (= lt!49983 lt!49986)))

(assert (=> d!26653 (= (getValueByKey!152 lt!49984 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) (Some!157 (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!68 (List!1568 (_ BitVec 64) V!3161) Unit!2982)

(assert (=> d!26653 (= lt!49986 (lemmaContainsTupThenGetReturnValue!68 lt!49984 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun insertStrictlySorted!71 (List!1568 (_ BitVec 64) V!3161) List!1568)

(assert (=> d!26653 (= lt!49984 (insertStrictlySorted!71 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107))) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!26653 (= (+!131 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107)) (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49985)))

(declare-fun b!99348 () Bool)

(declare-fun res!49882 () Bool)

(assert (=> b!99348 (=> (not res!49882) (not e!64738))))

(assert (=> b!99348 (= res!49882 (= (getValueByKey!152 (toList!767 lt!49985) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) (Some!157 (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!99349 () Bool)

(declare-fun contains!795 (List!1568 tuple2!2308) Bool)

(assert (=> b!99349 (= e!64738 (contains!795 (toList!767 lt!49985) (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!26653 res!49883) b!99348))

(assert (= (and b!99348 res!49882) b!99349))

(declare-fun m!109053 () Bool)

(assert (=> d!26653 m!109053))

(declare-fun m!109055 () Bool)

(assert (=> d!26653 m!109055))

(declare-fun m!109057 () Bool)

(assert (=> d!26653 m!109057))

(declare-fun m!109059 () Bool)

(assert (=> d!26653 m!109059))

(declare-fun m!109061 () Bool)

(assert (=> b!99348 m!109061))

(declare-fun m!109063 () Bool)

(assert (=> b!99349 m!109063))

(assert (=> bm!10105 d!26653))

(declare-fun d!26655 () Bool)

(assert (=> d!26655 (= (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (and (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99296 d!26655))

(declare-fun d!26657 () Bool)

(declare-fun res!49888 () Bool)

(declare-fun e!64743 () Bool)

(assert (=> d!26657 (=> res!49888 e!64743)))

(assert (=> d!26657 (= res!49888 (and ((_ is Cons!1564) (toList!767 lt!49742)) (= (_1!1165 (h!2159 (toList!767 lt!49742))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (=> d!26657 (= (containsKey!155 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) e!64743)))

(declare-fun b!99354 () Bool)

(declare-fun e!64744 () Bool)

(assert (=> b!99354 (= e!64743 e!64744)))

(declare-fun res!49889 () Bool)

(assert (=> b!99354 (=> (not res!49889) (not e!64744))))

(assert (=> b!99354 (= res!49889 (and (or (not ((_ is Cons!1564) (toList!767 lt!49742))) (bvsle (_1!1165 (h!2159 (toList!767 lt!49742))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))) ((_ is Cons!1564) (toList!767 lt!49742)) (bvslt (_1!1165 (h!2159 (toList!767 lt!49742))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(declare-fun b!99355 () Bool)

(assert (=> b!99355 (= e!64744 (containsKey!155 (t!5534 (toList!767 lt!49742)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26657 (not res!49888)) b!99354))

(assert (= (and b!99354 res!49889) b!99355))

(assert (=> b!99355 m!108735))

(declare-fun m!109065 () Bool)

(assert (=> b!99355 m!109065))

(assert (=> d!26625 d!26657))

(declare-fun d!26659 () Bool)

(declare-fun e!64746 () Bool)

(assert (=> d!26659 e!64746))

(declare-fun res!49890 () Bool)

(assert (=> d!26659 (=> res!49890 e!64746)))

(declare-fun lt!49989 () Bool)

(assert (=> d!26659 (= res!49890 (not lt!49989))))

(declare-fun lt!49988 () Bool)

(assert (=> d!26659 (= lt!49989 lt!49988)))

(declare-fun lt!49987 () Unit!2982)

(declare-fun e!64745 () Unit!2982)

(assert (=> d!26659 (= lt!49987 e!64745)))

(declare-fun c!16954 () Bool)

(assert (=> d!26659 (= c!16954 lt!49988)))

(assert (=> d!26659 (= lt!49988 (containsKey!155 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26659 (= (contains!792 lt!49838 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49989)))

(declare-fun b!99356 () Bool)

(declare-fun lt!49990 () Unit!2982)

(assert (=> b!99356 (= e!64745 lt!49990)))

(assert (=> b!99356 (= lt!49990 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99356 (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99357 () Bool)

(declare-fun Unit!2992 () Unit!2982)

(assert (=> b!99357 (= e!64745 Unit!2992)))

(declare-fun b!99358 () Bool)

(assert (=> b!99358 (= e!64746 (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26659 c!16954) b!99356))

(assert (= (and d!26659 (not c!16954)) b!99357))

(assert (= (and d!26659 (not res!49890)) b!99358))

(assert (=> d!26659 m!108875))

(declare-fun m!109067 () Bool)

(assert (=> d!26659 m!109067))

(assert (=> b!99356 m!108875))

(declare-fun m!109069 () Bool)

(assert (=> b!99356 m!109069))

(assert (=> b!99356 m!108875))

(declare-fun m!109071 () Bool)

(assert (=> b!99356 m!109071))

(assert (=> b!99356 m!109071))

(declare-fun m!109073 () Bool)

(assert (=> b!99356 m!109073))

(assert (=> b!99358 m!108875))

(assert (=> b!99358 m!109071))

(assert (=> b!99358 m!109071))

(assert (=> b!99358 m!109073))

(assert (=> b!99118 d!26659))

(declare-fun b!99359 () Bool)

(declare-fun e!64752 () ListLongMap!1503)

(declare-fun call!10196 () ListLongMap!1503)

(assert (=> b!99359 (= e!64752 call!10196)))

(declare-fun bm!10189 () Bool)

(declare-fun call!10195 () ListLongMap!1503)

(declare-fun call!10193 () ListLongMap!1503)

(assert (=> bm!10189 (= call!10195 call!10193)))

(declare-fun b!99360 () Bool)

(declare-fun res!49897 () Bool)

(declare-fun e!64755 () Bool)

(assert (=> b!99360 (=> (not res!49897) (not e!64755))))

(declare-fun e!64757 () Bool)

(assert (=> b!99360 (= res!49897 e!64757)))

(declare-fun c!16957 () Bool)

(assert (=> b!99360 (= c!16957 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99361 () Bool)

(declare-fun e!64753 () ListLongMap!1503)

(declare-fun e!64756 () ListLongMap!1503)

(assert (=> b!99361 (= e!64753 e!64756)))

(declare-fun c!16955 () Bool)

(assert (=> b!99361 (= c!16955 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99362 () Bool)

(declare-fun e!64758 () Bool)

(declare-fun lt!49996 () ListLongMap!1503)

(assert (=> b!99362 (= e!64758 (= (apply!93 lt!49996 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun b!99363 () Bool)

(declare-fun call!10192 () ListLongMap!1503)

(assert (=> b!99363 (= e!64752 call!10192)))

(declare-fun b!99364 () Bool)

(declare-fun res!49898 () Bool)

(assert (=> b!99364 (=> (not res!49898) (not e!64755))))

(declare-fun e!64759 () Bool)

(assert (=> b!99364 (= res!49898 e!64759)))

(declare-fun res!49895 () Bool)

(assert (=> b!99364 (=> res!49895 e!64759)))

(declare-fun e!64754 () Bool)

(assert (=> b!99364 (= res!49895 (not e!64754))))

(declare-fun res!49894 () Bool)

(assert (=> b!99364 (=> (not res!49894) (not e!64754))))

(assert (=> b!99364 (= res!49894 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99365 () Bool)

(declare-fun e!64750 () Unit!2982)

(declare-fun Unit!2993 () Unit!2982)

(assert (=> b!99365 (= e!64750 Unit!2993)))

(declare-fun b!99366 () Bool)

(declare-fun lt!49998 () Unit!2982)

(assert (=> b!99366 (= e!64750 lt!49998)))

(declare-fun lt!50002 () ListLongMap!1503)

(assert (=> b!99366 (= lt!50002 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50005 () (_ BitVec 64))

(assert (=> b!99366 (= lt!50005 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50011 () (_ BitVec 64))

(assert (=> b!99366 (= lt!50011 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50001 () Unit!2982)

(assert (=> b!99366 (= lt!50001 (addStillContains!69 lt!50002 lt!50005 (zeroValue!2382 newMap!16) lt!50011))))

(assert (=> b!99366 (contains!792 (+!131 lt!50002 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16))) lt!50011)))

(declare-fun lt!50009 () Unit!2982)

(assert (=> b!99366 (= lt!50009 lt!50001)))

(declare-fun lt!49991 () ListLongMap!1503)

(assert (=> b!99366 (= lt!49991 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!49997 () (_ BitVec 64))

(assert (=> b!99366 (= lt!49997 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49994 () (_ BitVec 64))

(assert (=> b!99366 (= lt!49994 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50006 () Unit!2982)

(assert (=> b!99366 (= lt!50006 (addApplyDifferent!69 lt!49991 lt!49997 (minValue!2382 newMap!16) lt!49994))))

(assert (=> b!99366 (= (apply!93 (+!131 lt!49991 (tuple2!2309 lt!49997 (minValue!2382 newMap!16))) lt!49994) (apply!93 lt!49991 lt!49994))))

(declare-fun lt!49995 () Unit!2982)

(assert (=> b!99366 (= lt!49995 lt!50006)))

(declare-fun lt!50008 () ListLongMap!1503)

(assert (=> b!99366 (= lt!50008 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50012 () (_ BitVec 64))

(assert (=> b!99366 (= lt!50012 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49999 () (_ BitVec 64))

(assert (=> b!99366 (= lt!49999 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49993 () Unit!2982)

(assert (=> b!99366 (= lt!49993 (addApplyDifferent!69 lt!50008 lt!50012 (zeroValue!2382 newMap!16) lt!49999))))

(assert (=> b!99366 (= (apply!93 (+!131 lt!50008 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16))) lt!49999) (apply!93 lt!50008 lt!49999))))

(declare-fun lt!50003 () Unit!2982)

(assert (=> b!99366 (= lt!50003 lt!49993)))

(declare-fun lt!50007 () ListLongMap!1503)

(assert (=> b!99366 (= lt!50007 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50010 () (_ BitVec 64))

(assert (=> b!99366 (= lt!50010 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49992 () (_ BitVec 64))

(assert (=> b!99366 (= lt!49992 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99366 (= lt!49998 (addApplyDifferent!69 lt!50007 lt!50010 (minValue!2382 newMap!16) lt!49992))))

(assert (=> b!99366 (= (apply!93 (+!131 lt!50007 (tuple2!2309 lt!50010 (minValue!2382 newMap!16))) lt!49992) (apply!93 lt!50007 lt!49992))))

(declare-fun b!99367 () Bool)

(declare-fun e!64748 () Bool)

(assert (=> b!99367 (= e!64748 (= (apply!93 lt!49996 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99367 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_values!2484 newMap!16))))))

(assert (=> b!99367 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99368 () Bool)

(assert (=> b!99368 (= e!64759 e!64748)))

(declare-fun res!49891 () Bool)

(assert (=> b!99368 (=> (not res!49891) (not e!64748))))

(assert (=> b!99368 (= res!49891 (contains!792 lt!49996 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99368 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99369 () Bool)

(declare-fun e!64747 () Bool)

(assert (=> b!99369 (= e!64747 e!64758)))

(declare-fun res!49899 () Bool)

(declare-fun call!10198 () Bool)

(assert (=> b!99369 (= res!49899 call!10198)))

(assert (=> b!99369 (=> (not res!49899) (not e!64758))))

(declare-fun b!99370 () Bool)

(assert (=> b!99370 (= e!64754 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99371 () Bool)

(assert (=> b!99371 (= e!64756 call!10196)))

(declare-fun b!99372 () Bool)

(declare-fun call!10194 () ListLongMap!1503)

(assert (=> b!99372 (= e!64753 (+!131 call!10194 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99373 () Bool)

(declare-fun call!10197 () Bool)

(assert (=> b!99373 (= e!64757 (not call!10197))))

(declare-fun b!99374 () Bool)

(declare-fun e!64749 () Bool)

(assert (=> b!99374 (= e!64749 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun c!16959 () Bool)

(declare-fun bm!10190 () Bool)

(assert (=> bm!10190 (= call!10194 (+!131 (ite c!16959 call!10193 (ite c!16955 call!10195 call!10192)) (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun bm!10191 () Bool)

(assert (=> bm!10191 (= call!10196 call!10194)))

(declare-fun b!99375 () Bool)

(declare-fun e!64751 () Bool)

(assert (=> b!99375 (= e!64757 e!64751)))

(declare-fun res!49893 () Bool)

(assert (=> b!99375 (= res!49893 call!10197)))

(assert (=> b!99375 (=> (not res!49893) (not e!64751))))

(declare-fun b!99376 () Bool)

(declare-fun c!16960 () Bool)

(assert (=> b!99376 (= c!16960 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99376 (= e!64756 e!64752)))

(declare-fun b!99377 () Bool)

(assert (=> b!99377 (= e!64755 e!64747)))

(declare-fun c!16956 () Bool)

(assert (=> b!99377 (= c!16956 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10192 () Bool)

(assert (=> bm!10192 (= call!10198 (contains!792 lt!49996 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10193 () Bool)

(assert (=> bm!10193 (= call!10192 call!10195)))

(declare-fun bm!10194 () Bool)

(assert (=> bm!10194 (= call!10197 (contains!792 lt!49996 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99378 () Bool)

(assert (=> b!99378 (= e!64747 (not call!10198))))

(declare-fun b!99379 () Bool)

(assert (=> b!99379 (= e!64751 (= (apply!93 lt!49996 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun d!26661 () Bool)

(assert (=> d!26661 e!64755))

(declare-fun res!49896 () Bool)

(assert (=> d!26661 (=> (not res!49896) (not e!64755))))

(assert (=> d!26661 (= res!49896 (or (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun lt!50000 () ListLongMap!1503)

(assert (=> d!26661 (= lt!49996 lt!50000)))

(declare-fun lt!50004 () Unit!2982)

(assert (=> d!26661 (= lt!50004 e!64750)))

(declare-fun c!16958 () Bool)

(assert (=> d!26661 (= c!16958 e!64749)))

(declare-fun res!49892 () Bool)

(assert (=> d!26661 (=> (not res!49892) (not e!64749))))

(assert (=> d!26661 (= res!49892 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26661 (= lt!50000 e!64753)))

(assert (=> d!26661 (= c!16959 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26661 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26661 (= (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!49996)))

(declare-fun bm!10195 () Bool)

(assert (=> bm!10195 (= call!10193 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (= (and d!26661 c!16959) b!99372))

(assert (= (and d!26661 (not c!16959)) b!99361))

(assert (= (and b!99361 c!16955) b!99371))

(assert (= (and b!99361 (not c!16955)) b!99376))

(assert (= (and b!99376 c!16960) b!99359))

(assert (= (and b!99376 (not c!16960)) b!99363))

(assert (= (or b!99359 b!99363) bm!10193))

(assert (= (or b!99371 bm!10193) bm!10189))

(assert (= (or b!99371 b!99359) bm!10191))

(assert (= (or b!99372 bm!10189) bm!10195))

(assert (= (or b!99372 bm!10191) bm!10190))

(assert (= (and d!26661 res!49892) b!99374))

(assert (= (and d!26661 c!16958) b!99366))

(assert (= (and d!26661 (not c!16958)) b!99365))

(assert (= (and d!26661 res!49896) b!99364))

(assert (= (and b!99364 res!49894) b!99370))

(assert (= (and b!99364 (not res!49895)) b!99368))

(assert (= (and b!99368 res!49891) b!99367))

(assert (= (and b!99364 res!49898) b!99360))

(assert (= (and b!99360 c!16957) b!99375))

(assert (= (and b!99360 (not c!16957)) b!99373))

(assert (= (and b!99375 res!49893) b!99379))

(assert (= (or b!99375 b!99373) bm!10194))

(assert (= (and b!99360 res!49897) b!99377))

(assert (= (and b!99377 c!16956) b!99369))

(assert (= (and b!99377 (not c!16956)) b!99378))

(assert (= (and b!99369 res!49899) b!99362))

(assert (= (or b!99369 b!99378) bm!10192))

(declare-fun b_lambda!4427 () Bool)

(assert (=> (not b_lambda!4427) (not b!99367)))

(declare-fun tb!1945 () Bool)

(declare-fun t!5546 () Bool)

(assert (=> (and b!98943 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16)) t!5546) tb!1945))

(declare-fun result!3299 () Bool)

(assert (=> tb!1945 (= result!3299 tp_is_empty!2635)))

(assert (=> b!99367 t!5546))

(declare-fun b_and!6101 () Bool)

(assert (= b_and!6097 (and (=> t!5546 result!3299) b_and!6101)))

(declare-fun t!5548 () Bool)

(declare-fun tb!1947 () Bool)

(assert (=> (and b!98935 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 newMap!16)) t!5548) tb!1947))

(declare-fun result!3301 () Bool)

(assert (= result!3301 result!3299))

(assert (=> b!99367 t!5548))

(declare-fun b_and!6103 () Bool)

(assert (= b_and!6099 (and (=> t!5548 result!3301) b_and!6103)))

(declare-fun m!109075 () Bool)

(assert (=> b!99366 m!109075))

(declare-fun m!109077 () Bool)

(assert (=> b!99366 m!109077))

(declare-fun m!109079 () Bool)

(assert (=> b!99366 m!109079))

(declare-fun m!109081 () Bool)

(assert (=> b!99366 m!109081))

(declare-fun m!109083 () Bool)

(assert (=> b!99366 m!109083))

(assert (=> b!99366 m!109033))

(declare-fun m!109085 () Bool)

(assert (=> b!99366 m!109085))

(declare-fun m!109087 () Bool)

(assert (=> b!99366 m!109087))

(declare-fun m!109089 () Bool)

(assert (=> b!99366 m!109089))

(assert (=> b!99366 m!109075))

(declare-fun m!109091 () Bool)

(assert (=> b!99366 m!109091))

(declare-fun m!109093 () Bool)

(assert (=> b!99366 m!109093))

(declare-fun m!109095 () Bool)

(assert (=> b!99366 m!109095))

(assert (=> b!99366 m!109077))

(declare-fun m!109097 () Bool)

(assert (=> b!99366 m!109097))

(assert (=> b!99366 m!109081))

(assert (=> b!99366 m!109085))

(declare-fun m!109099 () Bool)

(assert (=> b!99366 m!109099))

(declare-fun m!109101 () Bool)

(assert (=> b!99366 m!109101))

(declare-fun m!109103 () Bool)

(assert (=> b!99366 m!109103))

(declare-fun m!109105 () Bool)

(assert (=> b!99366 m!109105))

(assert (=> d!26661 m!109025))

(assert (=> bm!10195 m!109093))

(declare-fun m!109107 () Bool)

(assert (=> bm!10192 m!109107))

(assert (=> b!99370 m!109033))

(assert (=> b!99370 m!109033))

(assert (=> b!99370 m!109041))

(declare-fun m!109109 () Bool)

(assert (=> b!99379 m!109109))

(declare-fun m!109111 () Bool)

(assert (=> bm!10190 m!109111))

(declare-fun m!109113 () Bool)

(assert (=> bm!10194 m!109113))

(declare-fun m!109115 () Bool)

(assert (=> b!99372 m!109115))

(assert (=> b!99374 m!109033))

(assert (=> b!99374 m!109033))

(assert (=> b!99374 m!109041))

(assert (=> b!99368 m!109033))

(assert (=> b!99368 m!109033))

(declare-fun m!109117 () Bool)

(assert (=> b!99368 m!109117))

(assert (=> b!99367 m!109033))

(declare-fun m!109119 () Bool)

(assert (=> b!99367 m!109119))

(declare-fun m!109121 () Bool)

(assert (=> b!99367 m!109121))

(declare-fun m!109123 () Bool)

(assert (=> b!99367 m!109123))

(assert (=> b!99367 m!109121))

(assert (=> b!99367 m!109123))

(declare-fun m!109125 () Bool)

(assert (=> b!99367 m!109125))

(assert (=> b!99367 m!109033))

(declare-fun m!109127 () Bool)

(assert (=> b!99362 m!109127))

(assert (=> d!26615 d!26661))

(declare-fun b!99396 () Bool)

(declare-fun res!49911 () Bool)

(declare-fun e!64768 () Bool)

(assert (=> b!99396 (=> (not res!49911) (not e!64768))))

(declare-fun call!10204 () Bool)

(assert (=> b!99396 (= res!49911 call!10204)))

(declare-fun e!64769 () Bool)

(assert (=> b!99396 (= e!64769 e!64768)))

(declare-fun c!16965 () Bool)

(declare-fun lt!50018 () SeekEntryResult!248)

(declare-fun bm!10200 () Bool)

(assert (=> bm!10200 (= call!10204 (inRange!0 (ite c!16965 (index!3136 lt!50018) (index!3139 lt!50018)) (mask!6608 newMap!16)))))

(declare-fun b!99397 () Bool)

(assert (=> b!99397 (and (bvsge (index!3136 lt!50018) #b00000000000000000000000000000000) (bvslt (index!3136 lt!50018) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun res!49908 () Bool)

(assert (=> b!99397 (= res!49908 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3136 lt!50018)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64771 () Bool)

(assert (=> b!99397 (=> (not res!49908) (not e!64771))))

(declare-fun b!99398 () Bool)

(declare-fun call!10203 () Bool)

(assert (=> b!99398 (= e!64771 (not call!10203))))

(declare-fun b!99399 () Bool)

(declare-fun res!49910 () Bool)

(assert (=> b!99399 (=> (not res!49910) (not e!64768))))

(assert (=> b!99399 (= res!49910 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3139 lt!50018)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99399 (and (bvsge (index!3139 lt!50018) #b00000000000000000000000000000000) (bvslt (index!3139 lt!50018) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99401 () Bool)

(assert (=> b!99401 (= e!64769 ((_ is Undefined!248) lt!50018))))

(declare-fun b!99402 () Bool)

(declare-fun e!64770 () Bool)

(assert (=> b!99402 (= e!64770 e!64769)))

(declare-fun c!16966 () Bool)

(assert (=> b!99402 (= c!16966 ((_ is MissingVacant!248) lt!50018))))

(declare-fun bm!10201 () Bool)

(assert (=> bm!10201 (= call!10203 (arrayContainsKey!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!99403 () Bool)

(assert (=> b!99403 (= e!64768 (not call!10203))))

(declare-fun d!26663 () Bool)

(assert (=> d!26663 e!64770))

(assert (=> d!26663 (= c!16965 ((_ is MissingZero!248) lt!50018))))

(assert (=> d!26663 (= lt!50018 (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(declare-fun lt!50017 () Unit!2982)

(declare-fun choose!609 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) Int) Unit!2982)

(assert (=> d!26663 (= lt!50017 (choose!609 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26663 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26663 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)) lt!50017)))

(declare-fun b!99400 () Bool)

(assert (=> b!99400 (= e!64770 e!64771)))

(declare-fun res!49909 () Bool)

(assert (=> b!99400 (= res!49909 call!10204)))

(assert (=> b!99400 (=> (not res!49909) (not e!64771))))

(assert (= (and d!26663 c!16965) b!99400))

(assert (= (and d!26663 (not c!16965)) b!99402))

(assert (= (and b!99400 res!49909) b!99397))

(assert (= (and b!99397 res!49908) b!99398))

(assert (= (and b!99402 c!16966) b!99396))

(assert (= (and b!99402 (not c!16966)) b!99401))

(assert (= (and b!99396 res!49911) b!99399))

(assert (= (and b!99399 res!49910) b!99403))

(assert (= (or b!99400 b!99396) bm!10200))

(assert (= (or b!99398 b!99403) bm!10201))

(declare-fun m!109129 () Bool)

(assert (=> bm!10200 m!109129))

(assert (=> d!26663 m!108735))

(assert (=> d!26663 m!108961))

(assert (=> d!26663 m!108735))

(declare-fun m!109131 () Bool)

(assert (=> d!26663 m!109131))

(assert (=> d!26663 m!109025))

(declare-fun m!109133 () Bool)

(assert (=> b!99397 m!109133))

(assert (=> bm!10201 m!108735))

(assert (=> bm!10201 m!108977))

(declare-fun m!109135 () Bool)

(assert (=> b!99399 m!109135))

(assert (=> bm!10164 d!26663))

(declare-fun d!26665 () Bool)

(assert (=> d!26665 (= (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99120 d!26665))

(assert (=> b!99259 d!26645))

(declare-fun b!99428 () Bool)

(declare-fun e!64788 () Bool)

(assert (=> b!99428 (= e!64788 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99428 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun e!64790 () Bool)

(declare-fun b!99429 () Bool)

(declare-fun lt!50036 () ListLongMap!1503)

(assert (=> b!99429 (= e!64790 (= lt!50036 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99430 () Bool)

(declare-fun e!64792 () ListLongMap!1503)

(assert (=> b!99430 (= e!64792 (ListLongMap!1504 Nil!1565))))

(declare-fun b!99431 () Bool)

(assert (=> b!99431 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> b!99431 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_values!2484 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun e!64787 () Bool)

(assert (=> b!99431 (= e!64787 (= (apply!93 lt!50036 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!10204 () Bool)

(declare-fun call!10207 () ListLongMap!1503)

(assert (=> bm!10204 (= call!10207 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun d!26667 () Bool)

(declare-fun e!64786 () Bool)

(assert (=> d!26667 e!64786))

(declare-fun res!49921 () Bool)

(assert (=> d!26667 (=> (not res!49921) (not e!64786))))

(assert (=> d!26667 (= res!49921 (not (contains!792 lt!50036 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26667 (= lt!50036 e!64792)))

(declare-fun c!16975 () Bool)

(assert (=> d!26667 (= c!16975 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!26667 (validMask!0 (mask!6608 (v!2817 (underlying!341 thiss!992))))))

(assert (=> d!26667 (= (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))) lt!50036)))

(declare-fun b!99432 () Bool)

(declare-fun e!64791 () ListLongMap!1503)

(assert (=> b!99432 (= e!64792 e!64791)))

(declare-fun c!16978 () Bool)

(assert (=> b!99432 (= c!16978 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99433 () Bool)

(declare-fun e!64789 () Bool)

(assert (=> b!99433 (= e!64789 e!64790)))

(declare-fun c!16976 () Bool)

(assert (=> b!99433 (= c!16976 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99434 () Bool)

(declare-fun res!49922 () Bool)

(assert (=> b!99434 (=> (not res!49922) (not e!64786))))

(assert (=> b!99434 (= res!49922 (not (contains!792 lt!50036 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99435 () Bool)

(declare-fun lt!50037 () Unit!2982)

(declare-fun lt!50034 () Unit!2982)

(assert (=> b!99435 (= lt!50037 lt!50034)))

(declare-fun lt!50035 () (_ BitVec 64))

(declare-fun lt!50038 () ListLongMap!1503)

(declare-fun lt!50033 () V!3161)

(declare-fun lt!50039 () (_ BitVec 64))

(assert (=> b!99435 (not (contains!792 (+!131 lt!50038 (tuple2!2309 lt!50039 lt!50033)) lt!50035))))

(declare-fun addStillNotContains!43 (ListLongMap!1503 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2982)

(assert (=> b!99435 (= lt!50034 (addStillNotContains!43 lt!50038 lt!50039 lt!50033 lt!50035))))

(assert (=> b!99435 (= lt!50035 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99435 (= lt!50033 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99435 (= lt!50039 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!99435 (= lt!50038 call!10207)))

(assert (=> b!99435 (= e!64791 (+!131 call!10207 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99436 () Bool)

(assert (=> b!99436 (= e!64789 e!64787)))

(assert (=> b!99436 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun res!49920 () Bool)

(assert (=> b!99436 (= res!49920 (contains!792 lt!50036 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99436 (=> (not res!49920) (not e!64787))))

(declare-fun b!99437 () Bool)

(assert (=> b!99437 (= e!64786 e!64789)))

(declare-fun c!16977 () Bool)

(assert (=> b!99437 (= c!16977 e!64788)))

(declare-fun res!49923 () Bool)

(assert (=> b!99437 (=> (not res!49923) (not e!64788))))

(assert (=> b!99437 (= res!49923 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99438 () Bool)

(assert (=> b!99438 (= e!64791 call!10207)))

(declare-fun b!99439 () Bool)

(declare-fun isEmpty!365 (ListLongMap!1503) Bool)

(assert (=> b!99439 (= e!64790 (isEmpty!365 lt!50036))))

(assert (= (and d!26667 c!16975) b!99430))

(assert (= (and d!26667 (not c!16975)) b!99432))

(assert (= (and b!99432 c!16978) b!99435))

(assert (= (and b!99432 (not c!16978)) b!99438))

(assert (= (or b!99435 b!99438) bm!10204))

(assert (= (and d!26667 res!49921) b!99434))

(assert (= (and b!99434 res!49922) b!99437))

(assert (= (and b!99437 res!49923) b!99428))

(assert (= (and b!99437 c!16977) b!99436))

(assert (= (and b!99437 (not c!16977)) b!99433))

(assert (= (and b!99436 res!49920) b!99431))

(assert (= (and b!99433 c!16976) b!99429))

(assert (= (and b!99433 (not c!16976)) b!99439))

(declare-fun b_lambda!4429 () Bool)

(assert (=> (not b_lambda!4429) (not b!99431)))

(assert (=> b!99431 t!5531))

(declare-fun b_and!6105 () Bool)

(assert (= b_and!6101 (and (=> t!5531 result!3279) b_and!6105)))

(assert (=> b!99431 t!5533))

(declare-fun b_and!6107 () Bool)

(assert (= b_and!6103 (and (=> t!5533 result!3283) b_and!6107)))

(declare-fun b_lambda!4431 () Bool)

(assert (=> (not b_lambda!4431) (not b!99435)))

(assert (=> b!99435 t!5531))

(declare-fun b_and!6109 () Bool)

(assert (= b_and!6105 (and (=> t!5531 result!3279) b_and!6109)))

(assert (=> b!99435 t!5533))

(declare-fun b_and!6111 () Bool)

(assert (= b_and!6107 (and (=> t!5533 result!3283) b_and!6111)))

(declare-fun m!109137 () Bool)

(assert (=> bm!10204 m!109137))

(declare-fun m!109139 () Bool)

(assert (=> b!99439 m!109139))

(declare-fun m!109141 () Bool)

(assert (=> b!99434 m!109141))

(assert (=> b!99432 m!108875))

(assert (=> b!99432 m!108875))

(assert (=> b!99432 m!108901))

(assert (=> b!99435 m!108915))

(declare-fun m!109143 () Bool)

(assert (=> b!99435 m!109143))

(declare-fun m!109145 () Bool)

(assert (=> b!99435 m!109145))

(declare-fun m!109147 () Bool)

(assert (=> b!99435 m!109147))

(assert (=> b!99435 m!109143))

(assert (=> b!99435 m!108747))

(assert (=> b!99435 m!108875))

(assert (=> b!99435 m!108915))

(assert (=> b!99435 m!108747))

(assert (=> b!99435 m!108917))

(declare-fun m!109149 () Bool)

(assert (=> b!99435 m!109149))

(assert (=> b!99428 m!108875))

(assert (=> b!99428 m!108875))

(assert (=> b!99428 m!108901))

(assert (=> b!99436 m!108875))

(assert (=> b!99436 m!108875))

(declare-fun m!109151 () Bool)

(assert (=> b!99436 m!109151))

(declare-fun m!109153 () Bool)

(assert (=> d!26667 m!109153))

(assert (=> d!26667 m!108767))

(assert (=> b!99429 m!109137))

(assert (=> b!99431 m!108915))

(assert (=> b!99431 m!108875))

(declare-fun m!109155 () Bool)

(assert (=> b!99431 m!109155))

(assert (=> b!99431 m!108747))

(assert (=> b!99431 m!108875))

(assert (=> b!99431 m!108915))

(assert (=> b!99431 m!108747))

(assert (=> b!99431 m!108917))

(assert (=> bm!10110 d!26667))

(declare-fun d!26669 () Bool)

(declare-fun e!64793 () Bool)

(assert (=> d!26669 e!64793))

(declare-fun res!49925 () Bool)

(assert (=> d!26669 (=> (not res!49925) (not e!64793))))

(declare-fun lt!50042 () ListLongMap!1503)

(assert (=> d!26669 (= res!49925 (contains!792 lt!50042 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!50041 () List!1568)

(assert (=> d!26669 (= lt!50042 (ListLongMap!1504 lt!50041))))

(declare-fun lt!50040 () Unit!2982)

(declare-fun lt!50043 () Unit!2982)

(assert (=> d!26669 (= lt!50040 lt!50043)))

(assert (=> d!26669 (= (getValueByKey!152 lt!50041 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!157 (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26669 (= lt!50043 (lemmaContainsTupThenGetReturnValue!68 lt!50041 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26669 (= lt!50041 (insertStrictlySorted!71 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166)) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26669 (= (+!131 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166) (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50042)))

(declare-fun b!99440 () Bool)

(declare-fun res!49924 () Bool)

(assert (=> b!99440 (=> (not res!49924) (not e!64793))))

(assert (=> b!99440 (= res!49924 (= (getValueByKey!152 (toList!767 lt!50042) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!157 (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!99441 () Bool)

(assert (=> b!99441 (= e!64793 (contains!795 (toList!767 lt!50042) (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26669 res!49925) b!99440))

(assert (= (and b!99440 res!49924) b!99441))

(declare-fun m!109157 () Bool)

(assert (=> d!26669 m!109157))

(declare-fun m!109159 () Bool)

(assert (=> d!26669 m!109159))

(declare-fun m!109161 () Bool)

(assert (=> d!26669 m!109161))

(declare-fun m!109163 () Bool)

(assert (=> d!26669 m!109163))

(declare-fun m!109165 () Bool)

(assert (=> b!99440 m!109165))

(declare-fun m!109167 () Bool)

(assert (=> b!99441 m!109167))

(assert (=> bm!10171 d!26669))

(declare-fun d!26671 () Bool)

(declare-fun get!1299 (Option!158) V!3161)

(assert (=> d!26671 (= (apply!93 lt!49838 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4099 () Bool)

(assert (= bs!4099 d!26671))

(declare-fun m!109169 () Bool)

(assert (=> bs!4099 m!109169))

(assert (=> bs!4099 m!109169))

(declare-fun m!109171 () Bool)

(assert (=> bs!4099 m!109171))

(assert (=> b!99112 d!26671))

(declare-fun d!26673 () Bool)

(assert (=> d!26673 (= (apply!93 lt!49850 lt!49841) (get!1299 (getValueByKey!152 (toList!767 lt!49850) lt!49841)))))

(declare-fun bs!4100 () Bool)

(assert (= bs!4100 d!26673))

(declare-fun m!109173 () Bool)

(assert (=> bs!4100 m!109173))

(assert (=> bs!4100 m!109173))

(declare-fun m!109175 () Bool)

(assert (=> bs!4100 m!109175))

(assert (=> b!99116 d!26673))

(declare-fun d!26675 () Bool)

(assert (=> d!26675 (= (apply!93 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49841) (apply!93 lt!49850 lt!49841))))

(declare-fun lt!50046 () Unit!2982)

(declare-fun choose!610 (ListLongMap!1503 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2982)

(assert (=> d!26675 (= lt!50046 (choose!610 lt!49850 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49841))))

(declare-fun e!64796 () Bool)

(assert (=> d!26675 e!64796))

(declare-fun res!49928 () Bool)

(assert (=> d!26675 (=> (not res!49928) (not e!64796))))

(assert (=> d!26675 (= res!49928 (contains!792 lt!49850 lt!49841))))

(assert (=> d!26675 (= (addApplyDifferent!69 lt!49850 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49841) lt!50046)))

(declare-fun b!99445 () Bool)

(assert (=> b!99445 (= e!64796 (not (= lt!49841 lt!49854)))))

(assert (= (and d!26675 res!49928) b!99445))

(assert (=> d!26675 m!108867))

(assert (=> d!26675 m!108869))

(declare-fun m!109177 () Bool)

(assert (=> d!26675 m!109177))

(declare-fun m!109179 () Bool)

(assert (=> d!26675 m!109179))

(assert (=> d!26675 m!108867))

(assert (=> d!26675 m!108889))

(assert (=> b!99116 d!26675))

(declare-fun d!26677 () Bool)

(assert (=> d!26677 (= (apply!93 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49836) (apply!93 lt!49833 lt!49836))))

(declare-fun lt!50047 () Unit!2982)

(assert (=> d!26677 (= lt!50047 (choose!610 lt!49833 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49836))))

(declare-fun e!64797 () Bool)

(assert (=> d!26677 e!64797))

(declare-fun res!49929 () Bool)

(assert (=> d!26677 (=> (not res!49929) (not e!64797))))

(assert (=> d!26677 (= res!49929 (contains!792 lt!49833 lt!49836))))

(assert (=> d!26677 (= (addApplyDifferent!69 lt!49833 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49836) lt!50047)))

(declare-fun b!99446 () Bool)

(assert (=> b!99446 (= e!64797 (not (= lt!49836 lt!49839)))))

(assert (= (and d!26677 res!49929) b!99446))

(assert (=> d!26677 m!108877))

(assert (=> d!26677 m!108887))

(declare-fun m!109181 () Bool)

(assert (=> d!26677 m!109181))

(declare-fun m!109183 () Bool)

(assert (=> d!26677 m!109183))

(assert (=> d!26677 m!108877))

(assert (=> d!26677 m!108891))

(assert (=> b!99116 d!26677))

(declare-fun d!26679 () Bool)

(assert (=> d!26679 (= (apply!93 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49836) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49836)))))

(declare-fun bs!4101 () Bool)

(assert (= bs!4101 d!26679))

(declare-fun m!109185 () Bool)

(assert (=> bs!4101 m!109185))

(assert (=> bs!4101 m!109185))

(declare-fun m!109187 () Bool)

(assert (=> bs!4101 m!109187))

(assert (=> b!99116 d!26679))

(declare-fun d!26681 () Bool)

(assert (=> d!26681 (= (apply!93 lt!49849 lt!49834) (get!1299 (getValueByKey!152 (toList!767 lt!49849) lt!49834)))))

(declare-fun bs!4102 () Bool)

(assert (= bs!4102 d!26681))

(declare-fun m!109189 () Bool)

(assert (=> bs!4102 m!109189))

(assert (=> bs!4102 m!109189))

(declare-fun m!109191 () Bool)

(assert (=> bs!4102 m!109191))

(assert (=> b!99116 d!26681))

(declare-fun d!26683 () Bool)

(declare-fun e!64798 () Bool)

(assert (=> d!26683 e!64798))

(declare-fun res!49931 () Bool)

(assert (=> d!26683 (=> (not res!49931) (not e!64798))))

(declare-fun lt!50050 () ListLongMap!1503)

(assert (=> d!26683 (= res!49931 (contains!792 lt!50050 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50049 () List!1568)

(assert (=> d!26683 (= lt!50050 (ListLongMap!1504 lt!50049))))

(declare-fun lt!50048 () Unit!2982)

(declare-fun lt!50051 () Unit!2982)

(assert (=> d!26683 (= lt!50048 lt!50051)))

(assert (=> d!26683 (= (getValueByKey!152 lt!50049 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26683 (= lt!50051 (lemmaContainsTupThenGetReturnValue!68 lt!50049 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26683 (= lt!50049 (insertStrictlySorted!71 (toList!767 lt!49844) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26683 (= (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50050)))

(declare-fun b!99447 () Bool)

(declare-fun res!49930 () Bool)

(assert (=> b!99447 (=> (not res!49930) (not e!64798))))

(assert (=> b!99447 (= res!49930 (= (getValueByKey!152 (toList!767 lt!50050) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!99448 () Bool)

(assert (=> b!99448 (= e!64798 (contains!795 (toList!767 lt!50050) (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!26683 res!49931) b!99447))

(assert (= (and b!99447 res!49930) b!99448))

(declare-fun m!109193 () Bool)

(assert (=> d!26683 m!109193))

(declare-fun m!109195 () Bool)

(assert (=> d!26683 m!109195))

(declare-fun m!109197 () Bool)

(assert (=> d!26683 m!109197))

(declare-fun m!109199 () Bool)

(assert (=> d!26683 m!109199))

(declare-fun m!109201 () Bool)

(assert (=> b!99447 m!109201))

(declare-fun m!109203 () Bool)

(assert (=> b!99448 m!109203))

(assert (=> b!99116 d!26683))

(declare-fun d!26685 () Bool)

(assert (=> d!26685 (= (apply!93 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49841) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49841)))))

(declare-fun bs!4103 () Bool)

(assert (= bs!4103 d!26685))

(declare-fun m!109205 () Bool)

(assert (=> bs!4103 m!109205))

(assert (=> bs!4103 m!109205))

(declare-fun m!109207 () Bool)

(assert (=> bs!4103 m!109207))

(assert (=> b!99116 d!26685))

(declare-fun d!26687 () Bool)

(declare-fun e!64800 () Bool)

(assert (=> d!26687 e!64800))

(declare-fun res!49932 () Bool)

(assert (=> d!26687 (=> res!49932 e!64800)))

(declare-fun lt!50054 () Bool)

(assert (=> d!26687 (= res!49932 (not lt!50054))))

(declare-fun lt!50053 () Bool)

(assert (=> d!26687 (= lt!50054 lt!50053)))

(declare-fun lt!50052 () Unit!2982)

(declare-fun e!64799 () Unit!2982)

(assert (=> d!26687 (= lt!50052 e!64799)))

(declare-fun c!16979 () Bool)

(assert (=> d!26687 (= c!16979 lt!50053)))

(assert (=> d!26687 (= lt!50053 (containsKey!155 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853))))

(assert (=> d!26687 (= (contains!792 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49853) lt!50054)))

(declare-fun b!99449 () Bool)

(declare-fun lt!50055 () Unit!2982)

(assert (=> b!99449 (= e!64799 lt!50055)))

(assert (=> b!99449 (= lt!50055 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853))))

(assert (=> b!99449 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853))))

(declare-fun b!99450 () Bool)

(declare-fun Unit!2994 () Unit!2982)

(assert (=> b!99450 (= e!64799 Unit!2994)))

(declare-fun b!99451 () Bool)

(assert (=> b!99451 (= e!64800 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853)))))

(assert (= (and d!26687 c!16979) b!99449))

(assert (= (and d!26687 (not c!16979)) b!99450))

(assert (= (and d!26687 (not res!49932)) b!99451))

(declare-fun m!109209 () Bool)

(assert (=> d!26687 m!109209))

(declare-fun m!109211 () Bool)

(assert (=> b!99449 m!109211))

(declare-fun m!109213 () Bool)

(assert (=> b!99449 m!109213))

(assert (=> b!99449 m!109213))

(declare-fun m!109215 () Bool)

(assert (=> b!99449 m!109215))

(assert (=> b!99451 m!109213))

(assert (=> b!99451 m!109213))

(assert (=> b!99451 m!109215))

(assert (=> b!99116 d!26687))

(declare-fun d!26689 () Bool)

(assert (=> d!26689 (= (apply!93 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49834) (apply!93 lt!49849 lt!49834))))

(declare-fun lt!50056 () Unit!2982)

(assert (=> d!26689 (= lt!50056 (choose!610 lt!49849 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49834))))

(declare-fun e!64801 () Bool)

(assert (=> d!26689 e!64801))

(declare-fun res!49933 () Bool)

(assert (=> d!26689 (=> (not res!49933) (not e!64801))))

(assert (=> d!26689 (= res!49933 (contains!792 lt!49849 lt!49834))))

(assert (=> d!26689 (= (addApplyDifferent!69 lt!49849 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49834) lt!50056)))

(declare-fun b!99452 () Bool)

(assert (=> b!99452 (= e!64801 (not (= lt!49834 lt!49852)))))

(assert (= (and d!26689 res!49933) b!99452))

(assert (=> d!26689 m!108871))

(assert (=> d!26689 m!108879))

(declare-fun m!109217 () Bool)

(assert (=> d!26689 m!109217))

(declare-fun m!109219 () Bool)

(assert (=> d!26689 m!109219))

(assert (=> d!26689 m!108871))

(assert (=> d!26689 m!108873))

(assert (=> b!99116 d!26689))

(declare-fun d!26691 () Bool)

(assert (=> d!26691 (= (apply!93 lt!49833 lt!49836) (get!1299 (getValueByKey!152 (toList!767 lt!49833) lt!49836)))))

(declare-fun bs!4104 () Bool)

(assert (= bs!4104 d!26691))

(declare-fun m!109221 () Bool)

(assert (=> bs!4104 m!109221))

(assert (=> bs!4104 m!109221))

(declare-fun m!109223 () Bool)

(assert (=> bs!4104 m!109223))

(assert (=> b!99116 d!26691))

(assert (=> b!99116 d!26667))

(declare-fun d!26693 () Bool)

(assert (=> d!26693 (= (apply!93 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49834) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49834)))))

(declare-fun bs!4105 () Bool)

(assert (= bs!4105 d!26693))

(declare-fun m!109225 () Bool)

(assert (=> bs!4105 m!109225))

(assert (=> bs!4105 m!109225))

(declare-fun m!109227 () Bool)

(assert (=> bs!4105 m!109227))

(assert (=> b!99116 d!26693))

(declare-fun d!26695 () Bool)

(assert (=> d!26695 (contains!792 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49853)))

(declare-fun lt!50059 () Unit!2982)

(declare-fun choose!611 (ListLongMap!1503 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2982)

(assert (=> d!26695 (= lt!50059 (choose!611 lt!49844 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49853))))

(assert (=> d!26695 (contains!792 lt!49844 lt!49853)))

(assert (=> d!26695 (= (addStillContains!69 lt!49844 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49853) lt!50059)))

(declare-fun bs!4106 () Bool)

(assert (= bs!4106 d!26695))

(assert (=> bs!4106 m!108865))

(assert (=> bs!4106 m!108865))

(assert (=> bs!4106 m!108883))

(declare-fun m!109229 () Bool)

(assert (=> bs!4106 m!109229))

(declare-fun m!109231 () Bool)

(assert (=> bs!4106 m!109231))

(assert (=> b!99116 d!26695))

(declare-fun d!26697 () Bool)

(declare-fun e!64802 () Bool)

(assert (=> d!26697 e!64802))

(declare-fun res!49935 () Bool)

(assert (=> d!26697 (=> (not res!49935) (not e!64802))))

(declare-fun lt!50062 () ListLongMap!1503)

(assert (=> d!26697 (= res!49935 (contains!792 lt!50062 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50061 () List!1568)

(assert (=> d!26697 (= lt!50062 (ListLongMap!1504 lt!50061))))

(declare-fun lt!50060 () Unit!2982)

(declare-fun lt!50063 () Unit!2982)

(assert (=> d!26697 (= lt!50060 lt!50063)))

(assert (=> d!26697 (= (getValueByKey!152 lt!50061 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26697 (= lt!50063 (lemmaContainsTupThenGetReturnValue!68 lt!50061 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26697 (= lt!50061 (insertStrictlySorted!71 (toList!767 lt!49833) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26697 (= (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50062)))

(declare-fun b!99454 () Bool)

(declare-fun res!49934 () Bool)

(assert (=> b!99454 (=> (not res!49934) (not e!64802))))

(assert (=> b!99454 (= res!49934 (= (getValueByKey!152 (toList!767 lt!50062) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!99455 () Bool)

(assert (=> b!99455 (= e!64802 (contains!795 (toList!767 lt!50062) (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!26697 res!49935) b!99454))

(assert (= (and b!99454 res!49934) b!99455))

(declare-fun m!109233 () Bool)

(assert (=> d!26697 m!109233))

(declare-fun m!109235 () Bool)

(assert (=> d!26697 m!109235))

(declare-fun m!109237 () Bool)

(assert (=> d!26697 m!109237))

(declare-fun m!109239 () Bool)

(assert (=> d!26697 m!109239))

(declare-fun m!109241 () Bool)

(assert (=> b!99454 m!109241))

(declare-fun m!109243 () Bool)

(assert (=> b!99455 m!109243))

(assert (=> b!99116 d!26697))

(declare-fun d!26699 () Bool)

(declare-fun e!64803 () Bool)

(assert (=> d!26699 e!64803))

(declare-fun res!49937 () Bool)

(assert (=> d!26699 (=> (not res!49937) (not e!64803))))

(declare-fun lt!50066 () ListLongMap!1503)

(assert (=> d!26699 (= res!49937 (contains!792 lt!50066 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50065 () List!1568)

(assert (=> d!26699 (= lt!50066 (ListLongMap!1504 lt!50065))))

(declare-fun lt!50064 () Unit!2982)

(declare-fun lt!50067 () Unit!2982)

(assert (=> d!26699 (= lt!50064 lt!50067)))

(assert (=> d!26699 (= (getValueByKey!152 lt!50065 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26699 (= lt!50067 (lemmaContainsTupThenGetReturnValue!68 lt!50065 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26699 (= lt!50065 (insertStrictlySorted!71 (toList!767 lt!49849) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26699 (= (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50066)))

(declare-fun b!99456 () Bool)

(declare-fun res!49936 () Bool)

(assert (=> b!99456 (=> (not res!49936) (not e!64803))))

(assert (=> b!99456 (= res!49936 (= (getValueByKey!152 (toList!767 lt!50066) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!99457 () Bool)

(assert (=> b!99457 (= e!64803 (contains!795 (toList!767 lt!50066) (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!26699 res!49937) b!99456))

(assert (= (and b!99456 res!49936) b!99457))

(declare-fun m!109245 () Bool)

(assert (=> d!26699 m!109245))

(declare-fun m!109247 () Bool)

(assert (=> d!26699 m!109247))

(declare-fun m!109249 () Bool)

(assert (=> d!26699 m!109249))

(declare-fun m!109251 () Bool)

(assert (=> d!26699 m!109251))

(declare-fun m!109253 () Bool)

(assert (=> b!99456 m!109253))

(declare-fun m!109255 () Bool)

(assert (=> b!99457 m!109255))

(assert (=> b!99116 d!26699))

(declare-fun d!26701 () Bool)

(declare-fun e!64804 () Bool)

(assert (=> d!26701 e!64804))

(declare-fun res!49939 () Bool)

(assert (=> d!26701 (=> (not res!49939) (not e!64804))))

(declare-fun lt!50070 () ListLongMap!1503)

(assert (=> d!26701 (= res!49939 (contains!792 lt!50070 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50069 () List!1568)

(assert (=> d!26701 (= lt!50070 (ListLongMap!1504 lt!50069))))

(declare-fun lt!50068 () Unit!2982)

(declare-fun lt!50071 () Unit!2982)

(assert (=> d!26701 (= lt!50068 lt!50071)))

(assert (=> d!26701 (= (getValueByKey!152 lt!50069 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26701 (= lt!50071 (lemmaContainsTupThenGetReturnValue!68 lt!50069 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26701 (= lt!50069 (insertStrictlySorted!71 (toList!767 lt!49850) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26701 (= (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50070)))

(declare-fun b!99458 () Bool)

(declare-fun res!49938 () Bool)

(assert (=> b!99458 (=> (not res!49938) (not e!64804))))

(assert (=> b!99458 (= res!49938 (= (getValueByKey!152 (toList!767 lt!50070) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!99459 () Bool)

(assert (=> b!99459 (= e!64804 (contains!795 (toList!767 lt!50070) (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!26701 res!49939) b!99458))

(assert (= (and b!99458 res!49938) b!99459))

(declare-fun m!109257 () Bool)

(assert (=> d!26701 m!109257))

(declare-fun m!109259 () Bool)

(assert (=> d!26701 m!109259))

(declare-fun m!109261 () Bool)

(assert (=> d!26701 m!109261))

(declare-fun m!109263 () Bool)

(assert (=> d!26701 m!109263))

(declare-fun m!109265 () Bool)

(assert (=> b!99458 m!109265))

(declare-fun m!109267 () Bool)

(assert (=> b!99459 m!109267))

(assert (=> b!99116 d!26701))

(declare-fun d!26703 () Bool)

(assert (=> d!26703 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49942 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50074 () Unit!2982)

(declare-fun choose!612 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 V!3161 Int) Unit!2982)

(assert (=> d!26703 (= lt!50074 (choose!612 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) lt!49942 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26703 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26703 (= (lemmaChangeZeroKeyThenAddPairToListMap!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) lt!49942 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (defaultEntry!2501 newMap!16)) lt!50074)))

(declare-fun bs!4107 () Bool)

(assert (= bs!4107 d!26703))

(assert (=> bs!4107 m!108863))

(assert (=> bs!4107 m!108863))

(declare-fun m!109269 () Bool)

(assert (=> bs!4107 m!109269))

(assert (=> bs!4107 m!108749))

(declare-fun m!109271 () Bool)

(assert (=> bs!4107 m!109271))

(assert (=> bs!4107 m!108749))

(declare-fun m!109273 () Bool)

(assert (=> bs!4107 m!109273))

(assert (=> bs!4107 m!109025))

(assert (=> b!99234 d!26703))

(declare-fun d!26705 () Bool)

(declare-fun e!64807 () Bool)

(assert (=> d!26705 e!64807))

(declare-fun res!49942 () Bool)

(assert (=> d!26705 (=> (not res!49942) (not e!64807))))

(assert (=> d!26705 (= res!49942 (and (bvsge (index!3137 lt!49929) #b00000000000000000000000000000000) (bvslt (index!3137 lt!49929) (size!2263 (_keys!4195 newMap!16)))))))

(declare-fun lt!50077 () Unit!2982)

(declare-fun choose!613 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) Int) Unit!2982)

(assert (=> d!26705 (= lt!50077 (choose!613 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3137 lt!49929) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26705 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26705 (= (lemmaValidKeyInArrayIsInListMap!102 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3137 lt!49929) (defaultEntry!2501 newMap!16)) lt!50077)))

(declare-fun b!99462 () Bool)

(assert (=> b!99462 (= e!64807 (contains!792 (getCurrentListMap!456 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))))

(assert (= (and d!26705 res!49942) b!99462))

(declare-fun m!109275 () Bool)

(assert (=> d!26705 m!109275))

(assert (=> d!26705 m!109025))

(assert (=> b!99462 m!108989))

(assert (=> b!99462 m!108939))

(assert (=> b!99462 m!108989))

(assert (=> b!99462 m!108939))

(declare-fun m!109277 () Bool)

(assert (=> b!99462 m!109277))

(assert (=> b!99261 d!26705))

(declare-fun d!26707 () Bool)

(declare-fun e!64810 () Bool)

(assert (=> d!26707 e!64810))

(declare-fun res!49945 () Bool)

(assert (=> d!26707 (=> (not res!49945) (not e!64810))))

(assert (=> d!26707 (= res!49945 (and (bvsge (index!3137 lt!49929) #b00000000000000000000000000000000) (bvslt (index!3137 lt!49929) (size!2264 (_values!2484 newMap!16)))))))

(declare-fun lt!50080 () Unit!2982)

(declare-fun choose!614 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) (_ BitVec 64) V!3161 Int) Unit!2982)

(assert (=> d!26707 (= lt!50080 (choose!614 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3137 lt!49929) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26707 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26707 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3137 lt!49929) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) lt!50080)))

(declare-fun b!99465 () Bool)

(assert (=> b!99465 (= e!64810 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!456 (_keys!4195 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))))

(assert (= (and d!26707 res!49945) b!99465))

(assert (=> d!26707 m!108735))

(assert (=> d!26707 m!108749))

(declare-fun m!109279 () Bool)

(assert (=> d!26707 m!109279))

(assert (=> d!26707 m!109025))

(assert (=> b!99465 m!108863))

(assert (=> b!99465 m!108863))

(declare-fun m!109281 () Bool)

(assert (=> b!99465 m!109281))

(assert (=> b!99465 m!108947))

(declare-fun m!109283 () Bool)

(assert (=> b!99465 m!109283))

(assert (=> b!99261 d!26707))

(declare-fun d!26709 () Bool)

(declare-fun e!64812 () Bool)

(assert (=> d!26709 e!64812))

(declare-fun res!49946 () Bool)

(assert (=> d!26709 (=> res!49946 e!64812)))

(declare-fun lt!50083 () Bool)

(assert (=> d!26709 (= res!49946 (not lt!50083))))

(declare-fun lt!50082 () Bool)

(assert (=> d!26709 (= lt!50083 lt!50082)))

(declare-fun lt!50081 () Unit!2982)

(declare-fun e!64811 () Unit!2982)

(assert (=> d!26709 (= lt!50081 e!64811)))

(declare-fun c!16980 () Bool)

(assert (=> d!26709 (= c!16980 lt!50082)))

(assert (=> d!26709 (= lt!50082 (containsKey!155 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!26709 (= (contains!792 call!10166 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!50083)))

(declare-fun b!99466 () Bool)

(declare-fun lt!50084 () Unit!2982)

(assert (=> b!99466 (= e!64811 lt!50084)))

(assert (=> b!99466 (= lt!50084 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> b!99466 (isDefined!104 (getValueByKey!152 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99467 () Bool)

(declare-fun Unit!2995 () Unit!2982)

(assert (=> b!99467 (= e!64811 Unit!2995)))

(declare-fun b!99468 () Bool)

(assert (=> b!99468 (= e!64812 (isDefined!104 (getValueByKey!152 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (= (and d!26709 c!16980) b!99466))

(assert (= (and d!26709 (not c!16980)) b!99467))

(assert (= (and d!26709 (not res!49946)) b!99468))

(assert (=> d!26709 m!108735))

(declare-fun m!109285 () Bool)

(assert (=> d!26709 m!109285))

(assert (=> b!99466 m!108735))

(declare-fun m!109287 () Bool)

(assert (=> b!99466 m!109287))

(assert (=> b!99466 m!108735))

(declare-fun m!109289 () Bool)

(assert (=> b!99466 m!109289))

(assert (=> b!99466 m!109289))

(declare-fun m!109291 () Bool)

(assert (=> b!99466 m!109291))

(assert (=> b!99468 m!108735))

(assert (=> b!99468 m!109289))

(assert (=> b!99468 m!109289))

(assert (=> b!99468 m!109291))

(assert (=> b!99261 d!26709))

(declare-fun d!26711 () Bool)

(assert (=> d!26711 (= (get!1298 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99273 d!26711))

(assert (=> bm!10169 d!26615))

(assert (=> b!99298 d!26655))

(declare-fun d!26713 () Bool)

(declare-fun e!64814 () Bool)

(assert (=> d!26713 e!64814))

(declare-fun res!49947 () Bool)

(assert (=> d!26713 (=> res!49947 e!64814)))

(declare-fun lt!50087 () Bool)

(assert (=> d!26713 (= res!49947 (not lt!50087))))

(declare-fun lt!50086 () Bool)

(assert (=> d!26713 (= lt!50087 lt!50086)))

(declare-fun lt!50085 () Unit!2982)

(declare-fun e!64813 () Unit!2982)

(assert (=> d!26713 (= lt!50085 e!64813)))

(declare-fun c!16981 () Bool)

(assert (=> d!26713 (= c!16981 lt!50086)))

(assert (=> d!26713 (= lt!50086 (containsKey!155 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26713 (= (contains!792 lt!49838 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50087)))

(declare-fun b!99469 () Bool)

(declare-fun lt!50088 () Unit!2982)

(assert (=> b!99469 (= e!64813 lt!50088)))

(assert (=> b!99469 (= lt!50088 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99469 (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99470 () Bool)

(declare-fun Unit!2996 () Unit!2982)

(assert (=> b!99470 (= e!64813 Unit!2996)))

(declare-fun b!99471 () Bool)

(assert (=> b!99471 (= e!64814 (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26713 c!16981) b!99469))

(assert (= (and d!26713 (not c!16981)) b!99470))

(assert (= (and d!26713 (not res!49947)) b!99471))

(declare-fun m!109293 () Bool)

(assert (=> d!26713 m!109293))

(declare-fun m!109295 () Bool)

(assert (=> b!99469 m!109295))

(declare-fun m!109297 () Bool)

(assert (=> b!99469 m!109297))

(assert (=> b!99469 m!109297))

(declare-fun m!109299 () Bool)

(assert (=> b!99469 m!109299))

(assert (=> b!99471 m!109297))

(assert (=> b!99471 m!109297))

(assert (=> b!99471 m!109299))

(assert (=> bm!10109 d!26713))

(declare-fun d!26715 () Bool)

(declare-fun res!49948 () Bool)

(declare-fun e!64815 () Bool)

(assert (=> d!26715 (=> res!49948 e!64815)))

(assert (=> d!26715 (= res!49948 (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!26715 (= (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!64815)))

(declare-fun b!99472 () Bool)

(declare-fun e!64816 () Bool)

(assert (=> b!99472 (= e!64815 e!64816)))

(declare-fun res!49949 () Bool)

(assert (=> b!99472 (=> (not res!49949) (not e!64816))))

(assert (=> b!99472 (= res!49949 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99473 () Bool)

(assert (=> b!99473 (= e!64816 (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26715 (not res!49948)) b!99472))

(assert (= (and b!99472 res!49949) b!99473))

(declare-fun m!109301 () Bool)

(assert (=> d!26715 m!109301))

(assert (=> b!99473 m!108735))

(declare-fun m!109303 () Bool)

(assert (=> b!99473 m!109303))

(assert (=> b!99279 d!26715))

(declare-fun d!26717 () Bool)

(assert (=> d!26717 (isDefined!104 (getValueByKey!152 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun lt!50091 () Unit!2982)

(declare-fun choose!615 (List!1568 (_ BitVec 64)) Unit!2982)

(assert (=> d!26717 (= lt!50091 (choose!615 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun e!64819 () Bool)

(assert (=> d!26717 e!64819))

(declare-fun res!49952 () Bool)

(assert (=> d!26717 (=> (not res!49952) (not e!64819))))

(declare-fun isStrictlySorted!292 (List!1568) Bool)

(assert (=> d!26717 (= res!49952 (isStrictlySorted!292 (toList!767 lt!49742)))))

(assert (=> d!26717 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!50091)))

(declare-fun b!99476 () Bool)

(assert (=> b!99476 (= e!64819 (containsKey!155 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26717 res!49952) b!99476))

(assert (=> d!26717 m!108735))

(assert (=> d!26717 m!108935))

(assert (=> d!26717 m!108935))

(assert (=> d!26717 m!108937))

(assert (=> d!26717 m!108735))

(declare-fun m!109305 () Bool)

(assert (=> d!26717 m!109305))

(declare-fun m!109307 () Bool)

(assert (=> d!26717 m!109307))

(assert (=> b!99476 m!108735))

(assert (=> b!99476 m!108931))

(assert (=> b!99145 d!26717))

(declare-fun d!26719 () Bool)

(declare-fun isEmpty!366 (Option!158) Bool)

(assert (=> d!26719 (= (isDefined!104 (getValueByKey!152 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))) (not (isEmpty!366 (getValueByKey!152 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))))

(declare-fun bs!4108 () Bool)

(assert (= bs!4108 d!26719))

(assert (=> bs!4108 m!108935))

(declare-fun m!109309 () Bool)

(assert (=> bs!4108 m!109309))

(assert (=> b!99145 d!26719))

(declare-fun b!99488 () Bool)

(declare-fun e!64825 () Option!158)

(assert (=> b!99488 (= e!64825 None!156)))

(declare-fun b!99486 () Bool)

(declare-fun e!64824 () Option!158)

(assert (=> b!99486 (= e!64824 e!64825)))

(declare-fun c!16987 () Bool)

(assert (=> b!99486 (= c!16987 (and ((_ is Cons!1564) (toList!767 lt!49742)) (not (= (_1!1165 (h!2159 (toList!767 lt!49742))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))))

(declare-fun b!99485 () Bool)

(assert (=> b!99485 (= e!64824 (Some!157 (_2!1165 (h!2159 (toList!767 lt!49742)))))))

(declare-fun d!26721 () Bool)

(declare-fun c!16986 () Bool)

(assert (=> d!26721 (= c!16986 (and ((_ is Cons!1564) (toList!767 lt!49742)) (= (_1!1165 (h!2159 (toList!767 lt!49742))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (=> d!26721 (= (getValueByKey!152 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) e!64824)))

(declare-fun b!99487 () Bool)

(assert (=> b!99487 (= e!64825 (getValueByKey!152 (t!5534 (toList!767 lt!49742)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26721 c!16986) b!99485))

(assert (= (and d!26721 (not c!16986)) b!99486))

(assert (= (and b!99486 c!16987) b!99487))

(assert (= (and b!99486 (not c!16987)) b!99488))

(assert (=> b!99487 m!108735))

(declare-fun m!109311 () Bool)

(assert (=> b!99487 m!109311))

(assert (=> b!99145 d!26721))

(declare-fun d!26723 () Bool)

(declare-fun e!64827 () Bool)

(assert (=> d!26723 e!64827))

(declare-fun res!49953 () Bool)

(assert (=> d!26723 (=> res!49953 e!64827)))

(declare-fun lt!50094 () Bool)

(assert (=> d!26723 (= res!49953 (not lt!50094))))

(declare-fun lt!50093 () Bool)

(assert (=> d!26723 (= lt!50094 lt!50093)))

(declare-fun lt!50092 () Unit!2982)

(declare-fun e!64826 () Unit!2982)

(assert (=> d!26723 (= lt!50092 e!64826)))

(declare-fun c!16988 () Bool)

(assert (=> d!26723 (= c!16988 lt!50093)))

(assert (=> d!26723 (= lt!50093 (containsKey!155 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(assert (=> d!26723 (= (contains!792 e!64680 (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))) lt!50094)))

(declare-fun b!99489 () Bool)

(declare-fun lt!50095 () Unit!2982)

(assert (=> b!99489 (= e!64826 lt!50095)))

(assert (=> b!99489 (= lt!50095 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(assert (=> b!99489 (isDefined!104 (getValueByKey!152 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(declare-fun b!99490 () Bool)

(declare-fun Unit!2997 () Unit!2982)

(assert (=> b!99490 (= e!64826 Unit!2997)))

(declare-fun b!99491 () Bool)

(assert (=> b!99491 (= e!64827 (isDefined!104 (getValueByKey!152 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))))))

(assert (= (and d!26723 c!16988) b!99489))

(assert (= (and d!26723 (not c!16988)) b!99490))

(assert (= (and d!26723 (not res!49953)) b!99491))

(declare-fun m!109313 () Bool)

(assert (=> d!26723 m!109313))

(declare-fun m!109315 () Bool)

(assert (=> b!99489 m!109315))

(declare-fun m!109317 () Bool)

(assert (=> b!99489 m!109317))

(assert (=> b!99489 m!109317))

(declare-fun m!109319 () Bool)

(assert (=> b!99489 m!109319))

(assert (=> b!99491 m!109317))

(assert (=> b!99491 m!109317))

(assert (=> b!99491 m!109319))

(assert (=> bm!10161 d!26723))

(declare-fun d!26725 () Bool)

(declare-fun lt!50098 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!104 (List!1569) (InoxSet (_ BitVec 64)))

(assert (=> d!26725 (= lt!50098 (select (content!104 Nil!1566) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun e!64833 () Bool)

(assert (=> d!26725 (= lt!50098 e!64833)))

(declare-fun res!49958 () Bool)

(assert (=> d!26725 (=> (not res!49958) (not e!64833))))

(assert (=> d!26725 (= res!49958 ((_ is Cons!1565) Nil!1566))))

(assert (=> d!26725 (= (contains!794 Nil!1566 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!50098)))

(declare-fun b!99496 () Bool)

(declare-fun e!64832 () Bool)

(assert (=> b!99496 (= e!64833 e!64832)))

(declare-fun res!49959 () Bool)

(assert (=> b!99496 (=> res!49959 e!64832)))

(assert (=> b!99496 (= res!49959 (= (h!2160 Nil!1566) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99497 () Bool)

(assert (=> b!99497 (= e!64832 (contains!794 (t!5535 Nil!1566) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26725 res!49958) b!99496))

(assert (= (and b!99496 (not res!49959)) b!99497))

(declare-fun m!109321 () Bool)

(assert (=> d!26725 m!109321))

(assert (=> d!26725 m!108735))

(declare-fun m!109323 () Bool)

(assert (=> d!26725 m!109323))

(assert (=> b!99497 m!108735))

(declare-fun m!109325 () Bool)

(assert (=> b!99497 m!109325))

(assert (=> b!99300 d!26725))

(declare-fun d!26727 () Bool)

(declare-fun e!64835 () Bool)

(assert (=> d!26727 e!64835))

(declare-fun res!49960 () Bool)

(assert (=> d!26727 (=> res!49960 e!64835)))

(declare-fun lt!50101 () Bool)

(assert (=> d!26727 (= res!49960 (not lt!50101))))

(declare-fun lt!50100 () Bool)

(assert (=> d!26727 (= lt!50101 lt!50100)))

(declare-fun lt!50099 () Unit!2982)

(declare-fun e!64834 () Unit!2982)

(assert (=> d!26727 (= lt!50099 e!64834)))

(declare-fun c!16989 () Bool)

(assert (=> d!26727 (= c!16989 lt!50100)))

(assert (=> d!26727 (= lt!50100 (containsKey!155 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26727 (= (contains!792 lt!49838 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50101)))

(declare-fun b!99498 () Bool)

(declare-fun lt!50102 () Unit!2982)

(assert (=> b!99498 (= e!64834 lt!50102)))

(assert (=> b!99498 (= lt!50102 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99498 (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99499 () Bool)

(declare-fun Unit!2998 () Unit!2982)

(assert (=> b!99499 (= e!64834 Unit!2998)))

(declare-fun b!99500 () Bool)

(assert (=> b!99500 (= e!64835 (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26727 c!16989) b!99498))

(assert (= (and d!26727 (not c!16989)) b!99499))

(assert (= (and d!26727 (not res!49960)) b!99500))

(declare-fun m!109327 () Bool)

(assert (=> d!26727 m!109327))

(declare-fun m!109329 () Bool)

(assert (=> b!99498 m!109329))

(assert (=> b!99498 m!109169))

(assert (=> b!99498 m!109169))

(declare-fun m!109331 () Bool)

(assert (=> b!99498 m!109331))

(assert (=> b!99500 m!109169))

(assert (=> b!99500 m!109169))

(assert (=> b!99500 m!109331))

(assert (=> bm!10107 d!26727))

(declare-fun d!26729 () Bool)

(assert (=> d!26729 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50105 () Unit!2982)

(declare-fun choose!616 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 V!3161 Int) Unit!2982)

(assert (=> d!26729 (= lt!50105 (choose!616 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26729 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26729 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) lt!50105)))

(declare-fun bs!4109 () Bool)

(assert (= bs!4109 d!26729))

(assert (=> bs!4109 m!108863))

(assert (=> bs!4109 m!109025))

(assert (=> bs!4109 m!108749))

(declare-fun m!109333 () Bool)

(assert (=> bs!4109 m!109333))

(assert (=> bs!4109 m!108749))

(declare-fun m!109335 () Bool)

(assert (=> bs!4109 m!109335))

(assert (=> bs!4109 m!108863))

(declare-fun m!109337 () Bool)

(assert (=> bs!4109 m!109337))

(assert (=> b!99241 d!26729))

(declare-fun d!26731 () Bool)

(declare-fun e!64836 () Bool)

(assert (=> d!26731 e!64836))

(declare-fun res!49962 () Bool)

(assert (=> d!26731 (=> (not res!49962) (not e!64836))))

(declare-fun lt!50108 () ListLongMap!1503)

(assert (=> d!26731 (= res!49962 (contains!792 lt!50108 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50107 () List!1568)

(assert (=> d!26731 (= lt!50108 (ListLongMap!1504 lt!50107))))

(declare-fun lt!50106 () Unit!2982)

(declare-fun lt!50109 () Unit!2982)

(assert (=> d!26731 (= lt!50106 lt!50109)))

(assert (=> d!26731 (= (getValueByKey!152 lt!50107 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26731 (= lt!50109 (lemmaContainsTupThenGetReturnValue!68 lt!50107 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26731 (= lt!50107 (insertStrictlySorted!71 (toList!767 call!10176) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26731 (= (+!131 call!10176 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50108)))

(declare-fun b!99501 () Bool)

(declare-fun res!49961 () Bool)

(assert (=> b!99501 (=> (not res!49961) (not e!64836))))

(assert (=> b!99501 (= res!49961 (= (getValueByKey!152 (toList!767 lt!50108) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99502 () Bool)

(assert (=> b!99502 (= e!64836 (contains!795 (toList!767 lt!50108) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26731 res!49962) b!99501))

(assert (= (and b!99501 res!49961) b!99502))

(declare-fun m!109339 () Bool)

(assert (=> d!26731 m!109339))

(declare-fun m!109341 () Bool)

(assert (=> d!26731 m!109341))

(declare-fun m!109343 () Bool)

(assert (=> d!26731 m!109343))

(declare-fun m!109345 () Bool)

(assert (=> d!26731 m!109345))

(declare-fun m!109347 () Bool)

(assert (=> b!99501 m!109347))

(declare-fun m!109349 () Bool)

(assert (=> b!99502 m!109349))

(assert (=> b!99253 d!26731))

(assert (=> b!99124 d!26665))

(declare-fun d!26733 () Bool)

(declare-fun res!49963 () Bool)

(declare-fun e!64837 () Bool)

(assert (=> d!26733 (=> res!49963 e!64837)))

(assert (=> d!26733 (= res!49963 (= (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!26733 (= (arrayContainsKey!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000) e!64837)))

(declare-fun b!99503 () Bool)

(declare-fun e!64838 () Bool)

(assert (=> b!99503 (= e!64837 e!64838)))

(declare-fun res!49964 () Bool)

(assert (=> b!99503 (=> (not res!49964) (not e!64838))))

(assert (=> b!99503 (= res!49964 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99504 () Bool)

(assert (=> b!99504 (= e!64838 (arrayContainsKey!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26733 (not res!49963)) b!99503))

(assert (= (and b!99503 res!49964) b!99504))

(assert (=> d!26733 m!109033))

(assert (=> b!99504 m!108735))

(declare-fun m!109351 () Bool)

(assert (=> b!99504 m!109351))

(assert (=> bm!10167 d!26733))

(declare-fun b!99505 () Bool)

(declare-fun e!64839 () Bool)

(declare-fun e!64840 () Bool)

(assert (=> b!99505 (= e!64839 e!64840)))

(declare-fun c!16990 () Bool)

(assert (=> b!99505 (= c!16990 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10205 () Bool)

(declare-fun call!10208 () Bool)

(assert (=> bm!10205 (= call!10208 (arrayNoDuplicates!0 (_keys!4195 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16990 (Cons!1565 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) Nil!1566) Nil!1566)))))

(declare-fun d!26735 () Bool)

(declare-fun res!49967 () Bool)

(declare-fun e!64841 () Bool)

(assert (=> d!26735 (=> res!49967 e!64841)))

(assert (=> d!26735 (= res!49967 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26735 (= (arrayNoDuplicates!0 (_keys!4195 newMap!16) #b00000000000000000000000000000000 Nil!1566) e!64841)))

(declare-fun b!99506 () Bool)

(assert (=> b!99506 (= e!64840 call!10208)))

(declare-fun b!99507 () Bool)

(assert (=> b!99507 (= e!64841 e!64839)))

(declare-fun res!49966 () Bool)

(assert (=> b!99507 (=> (not res!49966) (not e!64839))))

(declare-fun e!64842 () Bool)

(assert (=> b!99507 (= res!49966 (not e!64842))))

(declare-fun res!49965 () Bool)

(assert (=> b!99507 (=> (not res!49965) (not e!64842))))

(assert (=> b!99507 (= res!49965 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99508 () Bool)

(assert (=> b!99508 (= e!64840 call!10208)))

(declare-fun b!99509 () Bool)

(assert (=> b!99509 (= e!64842 (contains!794 Nil!1566 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26735 (not res!49967)) b!99507))

(assert (= (and b!99507 res!49965) b!99509))

(assert (= (and b!99507 res!49966) b!99505))

(assert (= (and b!99505 c!16990) b!99508))

(assert (= (and b!99505 (not c!16990)) b!99506))

(assert (= (or b!99508 b!99506) bm!10205))

(assert (=> b!99505 m!109033))

(assert (=> b!99505 m!109033))

(assert (=> b!99505 m!109041))

(assert (=> bm!10205 m!109033))

(declare-fun m!109353 () Bool)

(assert (=> bm!10205 m!109353))

(assert (=> b!99507 m!109033))

(assert (=> b!99507 m!109033))

(assert (=> b!99507 m!109041))

(assert (=> b!99509 m!109033))

(assert (=> b!99509 m!109033))

(declare-fun m!109355 () Bool)

(assert (=> b!99509 m!109355))

(assert (=> b!99138 d!26735))

(assert (=> d!26635 d!26639))

(declare-fun d!26737 () Bool)

(assert (=> d!26737 (not (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!26737 true))

(declare-fun _$68!94 () Unit!2982)

(assert (=> d!26737 (= (choose!68 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566)) _$68!94)))

(declare-fun bs!4110 () Bool)

(assert (= bs!4110 d!26737))

(assert (=> bs!4110 m!108735))

(assert (=> bs!4110 m!108739))

(assert (=> d!26635 d!26737))

(declare-fun b!99510 () Bool)

(declare-fun e!64848 () ListLongMap!1503)

(declare-fun call!10213 () ListLongMap!1503)

(assert (=> b!99510 (= e!64848 call!10213)))

(declare-fun bm!10206 () Bool)

(declare-fun call!10212 () ListLongMap!1503)

(declare-fun call!10210 () ListLongMap!1503)

(assert (=> bm!10206 (= call!10212 call!10210)))

(declare-fun b!99511 () Bool)

(declare-fun res!49974 () Bool)

(declare-fun e!64851 () Bool)

(assert (=> b!99511 (=> (not res!49974) (not e!64851))))

(declare-fun e!64853 () Bool)

(assert (=> b!99511 (= res!49974 e!64853)))

(declare-fun c!16993 () Bool)

(assert (=> b!99511 (= c!16993 (not (= (bvand (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99512 () Bool)

(declare-fun e!64849 () ListLongMap!1503)

(declare-fun e!64852 () ListLongMap!1503)

(assert (=> b!99512 (= e!64849 e!64852)))

(declare-fun c!16991 () Bool)

(assert (=> b!99512 (= c!16991 (and (not (= (bvand (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99513 () Bool)

(declare-fun e!64854 () Bool)

(declare-fun lt!50115 () ListLongMap!1503)

(assert (=> b!99513 (= e!64854 (= (apply!93 lt!50115 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun b!99514 () Bool)

(declare-fun call!10209 () ListLongMap!1503)

(assert (=> b!99514 (= e!64848 call!10209)))

(declare-fun b!99515 () Bool)

(declare-fun res!49975 () Bool)

(assert (=> b!99515 (=> (not res!49975) (not e!64851))))

(declare-fun e!64855 () Bool)

(assert (=> b!99515 (= res!49975 e!64855)))

(declare-fun res!49972 () Bool)

(assert (=> b!99515 (=> res!49972 e!64855)))

(declare-fun e!64850 () Bool)

(assert (=> b!99515 (= res!49972 (not e!64850))))

(declare-fun res!49971 () Bool)

(assert (=> b!99515 (=> (not res!49971) (not e!64850))))

(assert (=> b!99515 (= res!49971 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99516 () Bool)

(declare-fun e!64846 () Unit!2982)

(declare-fun Unit!2999 () Unit!2982)

(assert (=> b!99516 (= e!64846 Unit!2999)))

(declare-fun b!99517 () Bool)

(declare-fun lt!50117 () Unit!2982)

(assert (=> b!99517 (= e!64846 lt!50117)))

(declare-fun lt!50121 () ListLongMap!1503)

(assert (=> b!99517 (= lt!50121 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50124 () (_ BitVec 64))

(assert (=> b!99517 (= lt!50124 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50130 () (_ BitVec 64))

(assert (=> b!99517 (= lt!50130 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50120 () Unit!2982)

(assert (=> b!99517 (= lt!50120 (addStillContains!69 lt!50121 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50130))))

(assert (=> b!99517 (contains!792 (+!131 lt!50121 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50130)))

(declare-fun lt!50128 () Unit!2982)

(assert (=> b!99517 (= lt!50128 lt!50120)))

(declare-fun lt!50110 () ListLongMap!1503)

(assert (=> b!99517 (= lt!50110 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50116 () (_ BitVec 64))

(assert (=> b!99517 (= lt!50116 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50113 () (_ BitVec 64))

(assert (=> b!99517 (= lt!50113 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50125 () Unit!2982)

(assert (=> b!99517 (= lt!50125 (addApplyDifferent!69 lt!50110 lt!50116 (minValue!2382 newMap!16) lt!50113))))

(assert (=> b!99517 (= (apply!93 (+!131 lt!50110 (tuple2!2309 lt!50116 (minValue!2382 newMap!16))) lt!50113) (apply!93 lt!50110 lt!50113))))

(declare-fun lt!50114 () Unit!2982)

(assert (=> b!99517 (= lt!50114 lt!50125)))

(declare-fun lt!50127 () ListLongMap!1503)

(assert (=> b!99517 (= lt!50127 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50131 () (_ BitVec 64))

(assert (=> b!99517 (= lt!50131 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50118 () (_ BitVec 64))

(assert (=> b!99517 (= lt!50118 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50112 () Unit!2982)

(assert (=> b!99517 (= lt!50112 (addApplyDifferent!69 lt!50127 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50118))))

(assert (=> b!99517 (= (apply!93 (+!131 lt!50127 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50118) (apply!93 lt!50127 lt!50118))))

(declare-fun lt!50122 () Unit!2982)

(assert (=> b!99517 (= lt!50122 lt!50112)))

(declare-fun lt!50126 () ListLongMap!1503)

(assert (=> b!99517 (= lt!50126 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50129 () (_ BitVec 64))

(assert (=> b!99517 (= lt!50129 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50111 () (_ BitVec 64))

(assert (=> b!99517 (= lt!50111 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99517 (= lt!50117 (addApplyDifferent!69 lt!50126 lt!50129 (minValue!2382 newMap!16) lt!50111))))

(assert (=> b!99517 (= (apply!93 (+!131 lt!50126 (tuple2!2309 lt!50129 (minValue!2382 newMap!16))) lt!50111) (apply!93 lt!50126 lt!50111))))

(declare-fun e!64844 () Bool)

(declare-fun b!99518 () Bool)

(assert (=> b!99518 (= e!64844 (= (apply!93 lt!50115 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99518 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))))))))

(assert (=> b!99518 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99519 () Bool)

(assert (=> b!99519 (= e!64855 e!64844)))

(declare-fun res!49968 () Bool)

(assert (=> b!99519 (=> (not res!49968) (not e!64844))))

(assert (=> b!99519 (= res!49968 (contains!792 lt!50115 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99520 () Bool)

(declare-fun e!64843 () Bool)

(assert (=> b!99520 (= e!64843 e!64854)))

(declare-fun res!49976 () Bool)

(declare-fun call!10215 () Bool)

(assert (=> b!99520 (= res!49976 call!10215)))

(assert (=> b!99520 (=> (not res!49976) (not e!64854))))

(declare-fun b!99521 () Bool)

(assert (=> b!99521 (= e!64850 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99522 () Bool)

(assert (=> b!99522 (= e!64852 call!10213)))

(declare-fun b!99523 () Bool)

(declare-fun call!10211 () ListLongMap!1503)

(assert (=> b!99523 (= e!64849 (+!131 call!10211 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99524 () Bool)

(declare-fun call!10214 () Bool)

(assert (=> b!99524 (= e!64853 (not call!10214))))

(declare-fun b!99525 () Bool)

(declare-fun e!64845 () Bool)

(assert (=> b!99525 (= e!64845 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun c!16995 () Bool)

(declare-fun bm!10207 () Bool)

(assert (=> bm!10207 (= call!10211 (+!131 (ite c!16995 call!10210 (ite c!16991 call!10212 call!10209)) (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun bm!10208 () Bool)

(assert (=> bm!10208 (= call!10213 call!10211)))

(declare-fun b!99526 () Bool)

(declare-fun e!64847 () Bool)

(assert (=> b!99526 (= e!64853 e!64847)))

(declare-fun res!49970 () Bool)

(assert (=> b!99526 (= res!49970 call!10214)))

(assert (=> b!99526 (=> (not res!49970) (not e!64847))))

(declare-fun b!99527 () Bool)

(declare-fun c!16996 () Bool)

(assert (=> b!99527 (= c!16996 (and (not (= (bvand (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99527 (= e!64852 e!64848)))

(declare-fun b!99528 () Bool)

(assert (=> b!99528 (= e!64851 e!64843)))

(declare-fun c!16992 () Bool)

(assert (=> b!99528 (= c!16992 (not (= (bvand (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10209 () Bool)

(assert (=> bm!10209 (= call!10215 (contains!792 lt!50115 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10210 () Bool)

(assert (=> bm!10210 (= call!10209 call!10212)))

(declare-fun bm!10211 () Bool)

(assert (=> bm!10211 (= call!10214 (contains!792 lt!50115 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99529 () Bool)

(assert (=> b!99529 (= e!64843 (not call!10215))))

(declare-fun b!99530 () Bool)

(assert (=> b!99530 (= e!64847 (= (apply!93 lt!50115 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))

(declare-fun d!26739 () Bool)

(assert (=> d!26739 e!64851))

(declare-fun res!49973 () Bool)

(assert (=> d!26739 (=> (not res!49973) (not e!64851))))

(assert (=> d!26739 (= res!49973 (or (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun lt!50119 () ListLongMap!1503)

(assert (=> d!26739 (= lt!50115 lt!50119)))

(declare-fun lt!50123 () Unit!2982)

(assert (=> d!26739 (= lt!50123 e!64846)))

(declare-fun c!16994 () Bool)

(assert (=> d!26739 (= c!16994 e!64845)))

(declare-fun res!49969 () Bool)

(assert (=> d!26739 (=> (not res!49969) (not e!64845))))

(assert (=> d!26739 (= res!49969 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26739 (= lt!50119 e!64849)))

(assert (=> d!26739 (= c!16995 (and (not (= (bvand (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26739 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26739 (= (getCurrentListMap!456 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50115)))

(declare-fun bm!10212 () Bool)

(assert (=> bm!10212 (= call!10210 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (= (and d!26739 c!16995) b!99523))

(assert (= (and d!26739 (not c!16995)) b!99512))

(assert (= (and b!99512 c!16991) b!99522))

(assert (= (and b!99512 (not c!16991)) b!99527))

(assert (= (and b!99527 c!16996) b!99510))

(assert (= (and b!99527 (not c!16996)) b!99514))

(assert (= (or b!99510 b!99514) bm!10210))

(assert (= (or b!99522 bm!10210) bm!10206))

(assert (= (or b!99522 b!99510) bm!10208))

(assert (= (or b!99523 bm!10206) bm!10212))

(assert (= (or b!99523 bm!10208) bm!10207))

(assert (= (and d!26739 res!49969) b!99525))

(assert (= (and d!26739 c!16994) b!99517))

(assert (= (and d!26739 (not c!16994)) b!99516))

(assert (= (and d!26739 res!49973) b!99515))

(assert (= (and b!99515 res!49971) b!99521))

(assert (= (and b!99515 (not res!49972)) b!99519))

(assert (= (and b!99519 res!49968) b!99518))

(assert (= (and b!99515 res!49975) b!99511))

(assert (= (and b!99511 c!16993) b!99526))

(assert (= (and b!99511 (not c!16993)) b!99524))

(assert (= (and b!99526 res!49970) b!99530))

(assert (= (or b!99526 b!99524) bm!10211))

(assert (= (and b!99511 res!49974) b!99528))

(assert (= (and b!99528 c!16992) b!99520))

(assert (= (and b!99528 (not c!16992)) b!99529))

(assert (= (and b!99520 res!49976) b!99513))

(assert (= (or b!99520 b!99529) bm!10209))

(declare-fun b_lambda!4433 () Bool)

(assert (=> (not b_lambda!4433) (not b!99518)))

(assert (=> b!99518 t!5546))

(declare-fun b_and!6113 () Bool)

(assert (= b_and!6109 (and (=> t!5546 result!3299) b_and!6113)))

(assert (=> b!99518 t!5548))

(declare-fun b_and!6115 () Bool)

(assert (= b_and!6111 (and (=> t!5548 result!3301) b_and!6115)))

(declare-fun m!109357 () Bool)

(assert (=> b!99517 m!109357))

(declare-fun m!109359 () Bool)

(assert (=> b!99517 m!109359))

(declare-fun m!109361 () Bool)

(assert (=> b!99517 m!109361))

(declare-fun m!109363 () Bool)

(assert (=> b!99517 m!109363))

(declare-fun m!109365 () Bool)

(assert (=> b!99517 m!109365))

(assert (=> b!99517 m!109033))

(declare-fun m!109367 () Bool)

(assert (=> b!99517 m!109367))

(declare-fun m!109369 () Bool)

(assert (=> b!99517 m!109369))

(declare-fun m!109371 () Bool)

(assert (=> b!99517 m!109371))

(assert (=> b!99517 m!109357))

(declare-fun m!109373 () Bool)

(assert (=> b!99517 m!109373))

(declare-fun m!109375 () Bool)

(assert (=> b!99517 m!109375))

(declare-fun m!109377 () Bool)

(assert (=> b!99517 m!109377))

(assert (=> b!99517 m!109359))

(declare-fun m!109379 () Bool)

(assert (=> b!99517 m!109379))

(assert (=> b!99517 m!109363))

(assert (=> b!99517 m!109367))

(declare-fun m!109381 () Bool)

(assert (=> b!99517 m!109381))

(declare-fun m!109383 () Bool)

(assert (=> b!99517 m!109383))

(declare-fun m!109385 () Bool)

(assert (=> b!99517 m!109385))

(declare-fun m!109387 () Bool)

(assert (=> b!99517 m!109387))

(assert (=> d!26739 m!109025))

(assert (=> bm!10212 m!109375))

(declare-fun m!109389 () Bool)

(assert (=> bm!10209 m!109389))

(assert (=> b!99521 m!109033))

(assert (=> b!99521 m!109033))

(assert (=> b!99521 m!109041))

(declare-fun m!109391 () Bool)

(assert (=> b!99530 m!109391))

(declare-fun m!109393 () Bool)

(assert (=> bm!10207 m!109393))

(declare-fun m!109395 () Bool)

(assert (=> bm!10211 m!109395))

(declare-fun m!109397 () Bool)

(assert (=> b!99523 m!109397))

(assert (=> b!99525 m!109033))

(assert (=> b!99525 m!109033))

(assert (=> b!99525 m!109041))

(assert (=> b!99519 m!109033))

(assert (=> b!99519 m!109033))

(declare-fun m!109399 () Bool)

(assert (=> b!99519 m!109399))

(assert (=> b!99518 m!109033))

(declare-fun m!109401 () Bool)

(assert (=> b!99518 m!109401))

(declare-fun m!109403 () Bool)

(assert (=> b!99518 m!109403))

(assert (=> b!99518 m!109123))

(assert (=> b!99518 m!109403))

(assert (=> b!99518 m!109123))

(declare-fun m!109405 () Bool)

(assert (=> b!99518 m!109405))

(assert (=> b!99518 m!109033))

(declare-fun m!109407 () Bool)

(assert (=> b!99513 m!109407))

(assert (=> bm!10180 d!26739))

(declare-fun d!26741 () Bool)

(declare-fun e!64856 () Bool)

(assert (=> d!26741 e!64856))

(declare-fun res!49978 () Bool)

(assert (=> d!26741 (=> (not res!49978) (not e!64856))))

(declare-fun lt!50134 () ListLongMap!1503)

(assert (=> d!26741 (= res!49978 (contains!792 lt!50134 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50133 () List!1568)

(assert (=> d!26741 (= lt!50134 (ListLongMap!1504 lt!50133))))

(declare-fun lt!50132 () Unit!2982)

(declare-fun lt!50135 () Unit!2982)

(assert (=> d!26741 (= lt!50132 lt!50135)))

(assert (=> d!26741 (= (getValueByKey!152 lt!50133 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26741 (= lt!50135 (lemmaContainsTupThenGetReturnValue!68 lt!50133 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26741 (= lt!50133 (insertStrictlySorted!71 (toList!767 call!10109) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26741 (= (+!131 call!10109 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50134)))

(declare-fun b!99531 () Bool)

(declare-fun res!49977 () Bool)

(assert (=> b!99531 (=> (not res!49977) (not e!64856))))

(assert (=> b!99531 (= res!49977 (= (getValueByKey!152 (toList!767 lt!50134) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!99532 () Bool)

(assert (=> b!99532 (= e!64856 (contains!795 (toList!767 lt!50134) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!26741 res!49978) b!99531))

(assert (= (and b!99531 res!49977) b!99532))

(declare-fun m!109409 () Bool)

(assert (=> d!26741 m!109409))

(declare-fun m!109411 () Bool)

(assert (=> d!26741 m!109411))

(declare-fun m!109413 () Bool)

(assert (=> d!26741 m!109413))

(declare-fun m!109415 () Bool)

(assert (=> d!26741 m!109415))

(declare-fun m!109417 () Bool)

(assert (=> b!99531 m!109417))

(declare-fun m!109419 () Bool)

(assert (=> b!99532 m!109419))

(assert (=> b!99122 d!26741))

(declare-fun b!99541 () Bool)

(declare-fun e!64861 () (_ BitVec 32))

(declare-fun call!10218 () (_ BitVec 32))

(assert (=> b!99541 (= e!64861 (bvadd #b00000000000000000000000000000001 call!10218))))

(declare-fun d!26743 () Bool)

(declare-fun lt!50138 () (_ BitVec 32))

(assert (=> d!26743 (and (bvsge lt!50138 #b00000000000000000000000000000000) (bvsle lt!50138 (bvsub (size!2263 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64862 () (_ BitVec 32))

(assert (=> d!26743 (= lt!50138 e!64862)))

(declare-fun c!17001 () Bool)

(assert (=> d!26743 (= c!17001 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26743 (and (bvsle #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2263 (_keys!4195 newMap!16)) (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26743 (= (arrayCountValidKeys!0 (_keys!4195 newMap!16) #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) lt!50138)))

(declare-fun b!99542 () Bool)

(assert (=> b!99542 (= e!64862 #b00000000000000000000000000000000)))

(declare-fun b!99543 () Bool)

(assert (=> b!99543 (= e!64862 e!64861)))

(declare-fun c!17002 () Bool)

(assert (=> b!99543 (= c!17002 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10215 () Bool)

(assert (=> bm!10215 (= call!10218 (arrayCountValidKeys!0 (_keys!4195 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99544 () Bool)

(assert (=> b!99544 (= e!64861 call!10218)))

(assert (= (and d!26743 c!17001) b!99542))

(assert (= (and d!26743 (not c!17001)) b!99543))

(assert (= (and b!99543 c!17002) b!99541))

(assert (= (and b!99543 (not c!17002)) b!99544))

(assert (= (or b!99541 b!99544) bm!10215))

(assert (=> b!99543 m!109033))

(assert (=> b!99543 m!109033))

(assert (=> b!99543 m!109041))

(declare-fun m!109421 () Bool)

(assert (=> bm!10215 m!109421))

(assert (=> b!99136 d!26743))

(declare-fun b!99545 () Bool)

(declare-fun e!64863 () Bool)

(declare-fun e!64864 () Bool)

(assert (=> b!99545 (= e!64863 e!64864)))

(declare-fun c!17003 () Bool)

(assert (=> b!99545 (= c!17003 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!10216 () Bool)

(declare-fun call!10219 () Bool)

(assert (=> bm!10216 (= call!10219 (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17003 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566))))))

(declare-fun d!26745 () Bool)

(declare-fun res!49981 () Bool)

(declare-fun e!64865 () Bool)

(assert (=> d!26745 (=> res!49981 e!64865)))

(assert (=> d!26745 (= res!49981 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!26745 (= (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) e!64865)))

(declare-fun b!99546 () Bool)

(assert (=> b!99546 (= e!64864 call!10219)))

(declare-fun b!99547 () Bool)

(assert (=> b!99547 (= e!64865 e!64863)))

(declare-fun res!49980 () Bool)

(assert (=> b!99547 (=> (not res!49980) (not e!64863))))

(declare-fun e!64866 () Bool)

(assert (=> b!99547 (= res!49980 (not e!64866))))

(declare-fun res!49979 () Bool)

(assert (=> b!99547 (=> (not res!49979) (not e!64866))))

(assert (=> b!99547 (= res!49979 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!99548 () Bool)

(assert (=> b!99548 (= e!64864 call!10219)))

(declare-fun b!99549 () Bool)

(assert (=> b!99549 (= e!64866 (contains!794 (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!26745 (not res!49981)) b!99547))

(assert (= (and b!99547 res!49979) b!99549))

(assert (= (and b!99547 res!49980) b!99545))

(assert (= (and b!99545 c!17003) b!99548))

(assert (= (and b!99545 (not c!17003)) b!99546))

(assert (= (or b!99548 b!99546) bm!10216))

(declare-fun m!109423 () Bool)

(assert (=> b!99545 m!109423))

(assert (=> b!99545 m!109423))

(declare-fun m!109425 () Bool)

(assert (=> b!99545 m!109425))

(assert (=> bm!10216 m!109423))

(declare-fun m!109427 () Bool)

(assert (=> bm!10216 m!109427))

(assert (=> b!99547 m!109423))

(assert (=> b!99547 m!109423))

(assert (=> b!99547 m!109425))

(assert (=> b!99549 m!109423))

(assert (=> b!99549 m!109423))

(declare-fun m!109429 () Bool)

(assert (=> b!99549 m!109429))

(assert (=> bm!10185 d!26745))

(declare-fun d!26747 () Bool)

(declare-fun e!64869 () Bool)

(assert (=> d!26747 e!64869))

(declare-fun res!49987 () Bool)

(assert (=> d!26747 (=> (not res!49987) (not e!64869))))

(declare-fun lt!50143 () SeekEntryResult!248)

(assert (=> d!26747 (= res!49987 ((_ is Found!248) lt!50143))))

(assert (=> d!26747 (= lt!50143 (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(declare-fun lt!50144 () Unit!2982)

(declare-fun choose!617 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) Int) Unit!2982)

(assert (=> d!26747 (= lt!50144 (choose!617 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26747 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26747 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)) lt!50144)))

(declare-fun b!99554 () Bool)

(declare-fun res!49986 () Bool)

(assert (=> b!99554 (=> (not res!49986) (not e!64869))))

(assert (=> b!99554 (= res!49986 (inRange!0 (index!3137 lt!50143) (mask!6608 newMap!16)))))

(declare-fun b!99555 () Bool)

(assert (=> b!99555 (= e!64869 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!50143)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> b!99555 (and (bvsge (index!3137 lt!50143) #b00000000000000000000000000000000) (bvslt (index!3137 lt!50143) (size!2263 (_keys!4195 newMap!16))))))

(assert (= (and d!26747 res!49987) b!99554))

(assert (= (and b!99554 res!49986) b!99555))

(assert (=> d!26747 m!108735))

(assert (=> d!26747 m!108961))

(assert (=> d!26747 m!108735))

(declare-fun m!109431 () Bool)

(assert (=> d!26747 m!109431))

(assert (=> d!26747 m!109025))

(declare-fun m!109433 () Bool)

(assert (=> b!99554 m!109433))

(declare-fun m!109435 () Bool)

(assert (=> b!99555 m!109435))

(assert (=> bm!10174 d!26747))

(assert (=> d!26617 d!26623))

(declare-fun d!26749 () Bool)

(assert (=> d!26749 (= (map!1256 (_2!1164 lt!49941)) (getCurrentListMap!456 (_keys!4195 (_2!1164 lt!49941)) (_values!2484 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941)) (extraKeys!2318 (_2!1164 lt!49941)) (zeroValue!2382 (_2!1164 lt!49941)) (minValue!2382 (_2!1164 lt!49941)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1164 lt!49941))))))

(declare-fun bs!4111 () Bool)

(assert (= bs!4111 d!26749))

(declare-fun m!109437 () Bool)

(assert (=> bs!4111 m!109437))

(assert (=> bm!10182 d!26749))

(assert (=> b!99284 d!26639))

(assert (=> d!26637 d!26643))

(declare-fun d!26751 () Bool)

(assert (=> d!26751 (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) from!355 Nil!1566)))

(assert (=> d!26751 true))

(declare-fun _$71!135 () Unit!2982)

(assert (=> d!26751 (= (choose!39 (_keys!4195 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!135)))

(declare-fun bs!4112 () Bool)

(assert (= bs!4112 d!26751))

(assert (=> bs!4112 m!108733))

(assert (=> d!26637 d!26751))

(declare-fun d!26753 () Bool)

(assert (=> d!26753 (= (apply!93 lt!49838 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1299 (getValueByKey!152 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4113 () Bool)

(assert (= bs!4113 d!26753))

(assert (=> bs!4113 m!108875))

(assert (=> bs!4113 m!109071))

(assert (=> bs!4113 m!109071))

(declare-fun m!109439 () Bool)

(assert (=> bs!4113 m!109439))

(assert (=> b!99117 d!26753))

(declare-fun d!26755 () Bool)

(declare-fun c!17004 () Bool)

(assert (=> d!26755 (= c!17004 ((_ is ValueCellFull!974) (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!64870 () V!3161)

(assert (=> d!26755 (= (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64870)))

(declare-fun b!99556 () Bool)

(assert (=> b!99556 (= e!64870 (get!1297 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99557 () Bool)

(assert (=> b!99557 (= e!64870 (get!1298 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26755 c!17004) b!99556))

(assert (= (and d!26755 (not c!17004)) b!99557))

(assert (=> b!99556 m!108915))

(assert (=> b!99556 m!108747))

(declare-fun m!109441 () Bool)

(assert (=> b!99556 m!109441))

(assert (=> b!99557 m!108915))

(assert (=> b!99557 m!108747))

(declare-fun m!109443 () Bool)

(assert (=> b!99557 m!109443))

(assert (=> b!99117 d!26755))

(declare-fun b!99558 () Bool)

(declare-fun e!64876 () ListLongMap!1503)

(declare-fun call!10224 () ListLongMap!1503)

(assert (=> b!99558 (= e!64876 call!10224)))

(declare-fun bm!10217 () Bool)

(declare-fun call!10223 () ListLongMap!1503)

(declare-fun call!10221 () ListLongMap!1503)

(assert (=> bm!10217 (= call!10223 call!10221)))

(declare-fun b!99559 () Bool)

(declare-fun res!49994 () Bool)

(declare-fun e!64879 () Bool)

(assert (=> b!99559 (=> (not res!49994) (not e!64879))))

(declare-fun e!64881 () Bool)

(assert (=> b!99559 (= res!49994 e!64881)))

(declare-fun c!17007 () Bool)

(assert (=> b!99559 (= c!17007 (not (= (bvand (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99560 () Bool)

(declare-fun e!64877 () ListLongMap!1503)

(declare-fun e!64880 () ListLongMap!1503)

(assert (=> b!99560 (= e!64877 e!64880)))

(declare-fun c!17005 () Bool)

(assert (=> b!99560 (= c!17005 (and (not (= (bvand (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99561 () Bool)

(declare-fun lt!50150 () ListLongMap!1503)

(declare-fun e!64882 () Bool)

(assert (=> b!99561 (= e!64882 (= (apply!93 lt!50150 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))

(declare-fun b!99562 () Bool)

(declare-fun call!10220 () ListLongMap!1503)

(assert (=> b!99562 (= e!64876 call!10220)))

(declare-fun b!99563 () Bool)

(declare-fun res!49995 () Bool)

(assert (=> b!99563 (=> (not res!49995) (not e!64879))))

(declare-fun e!64883 () Bool)

(assert (=> b!99563 (= res!49995 e!64883)))

(declare-fun res!49992 () Bool)

(assert (=> b!99563 (=> res!49992 e!64883)))

(declare-fun e!64878 () Bool)

(assert (=> b!99563 (= res!49992 (not e!64878))))

(declare-fun res!49991 () Bool)

(assert (=> b!99563 (=> (not res!49991) (not e!64878))))

(assert (=> b!99563 (= res!49991 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99564 () Bool)

(declare-fun e!64874 () Unit!2982)

(declare-fun Unit!3000 () Unit!2982)

(assert (=> b!99564 (= e!64874 Unit!3000)))

(declare-fun b!99565 () Bool)

(declare-fun lt!50152 () Unit!2982)

(assert (=> b!99565 (= e!64874 lt!50152)))

(declare-fun lt!50156 () ListLongMap!1503)

(assert (=> b!99565 (= lt!50156 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50159 () (_ BitVec 64))

(assert (=> b!99565 (= lt!50159 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50165 () (_ BitVec 64))

(assert (=> b!99565 (= lt!50165 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50155 () Unit!2982)

(assert (=> b!99565 (= lt!50155 (addStillContains!69 lt!50156 lt!50159 (zeroValue!2382 newMap!16) lt!50165))))

(assert (=> b!99565 (contains!792 (+!131 lt!50156 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16))) lt!50165)))

(declare-fun lt!50163 () Unit!2982)

(assert (=> b!99565 (= lt!50163 lt!50155)))

(declare-fun lt!50145 () ListLongMap!1503)

(assert (=> b!99565 (= lt!50145 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50151 () (_ BitVec 64))

(assert (=> b!99565 (= lt!50151 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50148 () (_ BitVec 64))

(assert (=> b!99565 (= lt!50148 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50160 () Unit!2982)

(assert (=> b!99565 (= lt!50160 (addApplyDifferent!69 lt!50145 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50148))))

(assert (=> b!99565 (= (apply!93 (+!131 lt!50145 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50148) (apply!93 lt!50145 lt!50148))))

(declare-fun lt!50149 () Unit!2982)

(assert (=> b!99565 (= lt!50149 lt!50160)))

(declare-fun lt!50162 () ListLongMap!1503)

(assert (=> b!99565 (= lt!50162 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50166 () (_ BitVec 64))

(assert (=> b!99565 (= lt!50166 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50153 () (_ BitVec 64))

(assert (=> b!99565 (= lt!50153 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50147 () Unit!2982)

(assert (=> b!99565 (= lt!50147 (addApplyDifferent!69 lt!50162 lt!50166 (zeroValue!2382 newMap!16) lt!50153))))

(assert (=> b!99565 (= (apply!93 (+!131 lt!50162 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16))) lt!50153) (apply!93 lt!50162 lt!50153))))

(declare-fun lt!50157 () Unit!2982)

(assert (=> b!99565 (= lt!50157 lt!50147)))

(declare-fun lt!50161 () ListLongMap!1503)

(assert (=> b!99565 (= lt!50161 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50164 () (_ BitVec 64))

(assert (=> b!99565 (= lt!50164 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50146 () (_ BitVec 64))

(assert (=> b!99565 (= lt!50146 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99565 (= lt!50152 (addApplyDifferent!69 lt!50161 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50146))))

(assert (=> b!99565 (= (apply!93 (+!131 lt!50161 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50146) (apply!93 lt!50161 lt!50146))))

(declare-fun b!99566 () Bool)

(declare-fun e!64872 () Bool)

(assert (=> b!99566 (= e!64872 (= (apply!93 lt!50150 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99566 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_values!2484 newMap!16))))))

(assert (=> b!99566 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99567 () Bool)

(assert (=> b!99567 (= e!64883 e!64872)))

(declare-fun res!49988 () Bool)

(assert (=> b!99567 (=> (not res!49988) (not e!64872))))

(assert (=> b!99567 (= res!49988 (contains!792 lt!50150 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99567 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99568 () Bool)

(declare-fun e!64871 () Bool)

(assert (=> b!99568 (= e!64871 e!64882)))

(declare-fun res!49996 () Bool)

(declare-fun call!10226 () Bool)

(assert (=> b!99568 (= res!49996 call!10226)))

(assert (=> b!99568 (=> (not res!49996) (not e!64882))))

(declare-fun b!99569 () Bool)

(assert (=> b!99569 (= e!64878 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99570 () Bool)

(assert (=> b!99570 (= e!64880 call!10224)))

(declare-fun call!10222 () ListLongMap!1503)

(declare-fun b!99571 () Bool)

(assert (=> b!99571 (= e!64877 (+!131 call!10222 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))

(declare-fun b!99572 () Bool)

(declare-fun call!10225 () Bool)

(assert (=> b!99572 (= e!64881 (not call!10225))))

(declare-fun b!99573 () Bool)

(declare-fun e!64873 () Bool)

(assert (=> b!99573 (= e!64873 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun c!17009 () Bool)

(declare-fun bm!10218 () Bool)

(assert (=> bm!10218 (= call!10222 (+!131 (ite c!17009 call!10221 (ite c!17005 call!10223 call!10220)) (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(declare-fun bm!10219 () Bool)

(assert (=> bm!10219 (= call!10224 call!10222)))

(declare-fun b!99574 () Bool)

(declare-fun e!64875 () Bool)

(assert (=> b!99574 (= e!64881 e!64875)))

(declare-fun res!49990 () Bool)

(assert (=> b!99574 (= res!49990 call!10225)))

(assert (=> b!99574 (=> (not res!49990) (not e!64875))))

(declare-fun c!17010 () Bool)

(declare-fun b!99575 () Bool)

(assert (=> b!99575 (= c!17010 (and (not (= (bvand (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99575 (= e!64880 e!64876)))

(declare-fun b!99576 () Bool)

(assert (=> b!99576 (= e!64879 e!64871)))

(declare-fun c!17006 () Bool)

(assert (=> b!99576 (= c!17006 (not (= (bvand (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10220 () Bool)

(assert (=> bm!10220 (= call!10226 (contains!792 lt!50150 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10221 () Bool)

(assert (=> bm!10221 (= call!10220 call!10223)))

(declare-fun bm!10222 () Bool)

(assert (=> bm!10222 (= call!10225 (contains!792 lt!50150 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99577 () Bool)

(assert (=> b!99577 (= e!64871 (not call!10226))))

(declare-fun b!99578 () Bool)

(assert (=> b!99578 (= e!64875 (= (apply!93 lt!50150 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun d!26757 () Bool)

(assert (=> d!26757 e!64879))

(declare-fun res!49993 () Bool)

(assert (=> d!26757 (=> (not res!49993) (not e!64879))))

(assert (=> d!26757 (= res!49993 (or (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun lt!50154 () ListLongMap!1503)

(assert (=> d!26757 (= lt!50150 lt!50154)))

(declare-fun lt!50158 () Unit!2982)

(assert (=> d!26757 (= lt!50158 e!64874)))

(declare-fun c!17008 () Bool)

(assert (=> d!26757 (= c!17008 e!64873)))

(declare-fun res!49989 () Bool)

(assert (=> d!26757 (=> (not res!49989) (not e!64873))))

(assert (=> d!26757 (= res!49989 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26757 (= lt!50154 e!64877)))

(assert (=> d!26757 (= c!17009 (and (not (= (bvand (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26757 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26757 (= (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50150)))

(declare-fun bm!10223 () Bool)

(assert (=> bm!10223 (= call!10221 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (= (and d!26757 c!17009) b!99571))

(assert (= (and d!26757 (not c!17009)) b!99560))

(assert (= (and b!99560 c!17005) b!99570))

(assert (= (and b!99560 (not c!17005)) b!99575))

(assert (= (and b!99575 c!17010) b!99558))

(assert (= (and b!99575 (not c!17010)) b!99562))

(assert (= (or b!99558 b!99562) bm!10221))

(assert (= (or b!99570 bm!10221) bm!10217))

(assert (= (or b!99570 b!99558) bm!10219))

(assert (= (or b!99571 bm!10217) bm!10223))

(assert (= (or b!99571 bm!10219) bm!10218))

(assert (= (and d!26757 res!49989) b!99573))

(assert (= (and d!26757 c!17008) b!99565))

(assert (= (and d!26757 (not c!17008)) b!99564))

(assert (= (and d!26757 res!49993) b!99563))

(assert (= (and b!99563 res!49991) b!99569))

(assert (= (and b!99563 (not res!49992)) b!99567))

(assert (= (and b!99567 res!49988) b!99566))

(assert (= (and b!99563 res!49995) b!99559))

(assert (= (and b!99559 c!17007) b!99574))

(assert (= (and b!99559 (not c!17007)) b!99572))

(assert (= (and b!99574 res!49990) b!99578))

(assert (= (or b!99574 b!99572) bm!10222))

(assert (= (and b!99559 res!49994) b!99576))

(assert (= (and b!99576 c!17006) b!99568))

(assert (= (and b!99576 (not c!17006)) b!99577))

(assert (= (and b!99568 res!49996) b!99561))

(assert (= (or b!99568 b!99577) bm!10220))

(declare-fun b_lambda!4435 () Bool)

(assert (=> (not b_lambda!4435) (not b!99566)))

(assert (=> b!99566 t!5546))

(declare-fun b_and!6117 () Bool)

(assert (= b_and!6113 (and (=> t!5546 result!3299) b_and!6117)))

(assert (=> b!99566 t!5548))

(declare-fun b_and!6119 () Bool)

(assert (= b_and!6115 (and (=> t!5548 result!3301) b_and!6119)))

(declare-fun m!109445 () Bool)

(assert (=> b!99565 m!109445))

(declare-fun m!109447 () Bool)

(assert (=> b!99565 m!109447))

(declare-fun m!109449 () Bool)

(assert (=> b!99565 m!109449))

(declare-fun m!109451 () Bool)

(assert (=> b!99565 m!109451))

(declare-fun m!109453 () Bool)

(assert (=> b!99565 m!109453))

(assert (=> b!99565 m!109033))

(declare-fun m!109455 () Bool)

(assert (=> b!99565 m!109455))

(declare-fun m!109457 () Bool)

(assert (=> b!99565 m!109457))

(declare-fun m!109459 () Bool)

(assert (=> b!99565 m!109459))

(assert (=> b!99565 m!109445))

(declare-fun m!109461 () Bool)

(assert (=> b!99565 m!109461))

(declare-fun m!109463 () Bool)

(assert (=> b!99565 m!109463))

(declare-fun m!109465 () Bool)

(assert (=> b!99565 m!109465))

(assert (=> b!99565 m!109447))

(declare-fun m!109467 () Bool)

(assert (=> b!99565 m!109467))

(assert (=> b!99565 m!109451))

(assert (=> b!99565 m!109455))

(declare-fun m!109469 () Bool)

(assert (=> b!99565 m!109469))

(declare-fun m!109471 () Bool)

(assert (=> b!99565 m!109471))

(declare-fun m!109473 () Bool)

(assert (=> b!99565 m!109473))

(declare-fun m!109475 () Bool)

(assert (=> b!99565 m!109475))

(assert (=> d!26757 m!109025))

(assert (=> bm!10223 m!109463))

(declare-fun m!109477 () Bool)

(assert (=> bm!10220 m!109477))

(assert (=> b!99569 m!109033))

(assert (=> b!99569 m!109033))

(assert (=> b!99569 m!109041))

(declare-fun m!109479 () Bool)

(assert (=> b!99578 m!109479))

(declare-fun m!109481 () Bool)

(assert (=> bm!10218 m!109481))

(declare-fun m!109483 () Bool)

(assert (=> bm!10222 m!109483))

(declare-fun m!109485 () Bool)

(assert (=> b!99571 m!109485))

(assert (=> b!99573 m!109033))

(assert (=> b!99573 m!109033))

(assert (=> b!99573 m!109041))

(assert (=> b!99567 m!109033))

(assert (=> b!99567 m!109033))

(declare-fun m!109487 () Bool)

(assert (=> b!99567 m!109487))

(assert (=> b!99566 m!109033))

(declare-fun m!109489 () Bool)

(assert (=> b!99566 m!109489))

(assert (=> b!99566 m!109121))

(assert (=> b!99566 m!109123))

(assert (=> b!99566 m!109121))

(assert (=> b!99566 m!109123))

(assert (=> b!99566 m!109125))

(assert (=> b!99566 m!109033))

(declare-fun m!109491 () Bool)

(assert (=> b!99561 m!109491))

(assert (=> bm!10165 d!26757))

(declare-fun b!99589 () Bool)

(declare-fun res!50007 () Bool)

(declare-fun e!64886 () Bool)

(assert (=> b!99589 (=> (not res!50007) (not e!64886))))

(declare-fun size!2269 (LongMapFixedSize!856) (_ BitVec 32))

(assert (=> b!99589 (= res!50007 (= (size!2269 newMap!16) (bvadd (_size!477 newMap!16) (bvsdiv (bvadd (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!99588 () Bool)

(declare-fun res!50005 () Bool)

(assert (=> b!99588 (=> (not res!50005) (not e!64886))))

(assert (=> b!99588 (= res!50005 (bvsge (size!2269 newMap!16) (_size!477 newMap!16)))))

(declare-fun b!99590 () Bool)

(assert (=> b!99590 (= e!64886 (and (bvsge (extraKeys!2318 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2318 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!477 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun d!26759 () Bool)

(declare-fun res!50006 () Bool)

(assert (=> d!26759 (=> (not res!50006) (not e!64886))))

(assert (=> d!26759 (= res!50006 (validMask!0 (mask!6608 newMap!16)))))

(assert (=> d!26759 (= (simpleValid!69 newMap!16) e!64886)))

(declare-fun b!99587 () Bool)

(declare-fun res!50008 () Bool)

(assert (=> b!99587 (=> (not res!50008) (not e!64886))))

(assert (=> b!99587 (= res!50008 (and (= (size!2264 (_values!2484 newMap!16)) (bvadd (mask!6608 newMap!16) #b00000000000000000000000000000001)) (= (size!2263 (_keys!4195 newMap!16)) (size!2264 (_values!2484 newMap!16))) (bvsge (_size!477 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!477 newMap!16) (bvadd (mask!6608 newMap!16) #b00000000000000000000000000000001))))))

(assert (= (and d!26759 res!50006) b!99587))

(assert (= (and b!99587 res!50008) b!99588))

(assert (= (and b!99588 res!50005) b!99589))

(assert (= (and b!99589 res!50007) b!99590))

(declare-fun m!109493 () Bool)

(assert (=> b!99589 m!109493))

(assert (=> b!99588 m!109493))

(assert (=> d!26759 m!109025))

(assert (=> d!26621 d!26759))

(declare-fun b!99591 () Bool)

(declare-fun e!64892 () ListLongMap!1503)

(declare-fun call!10231 () ListLongMap!1503)

(assert (=> b!99591 (= e!64892 call!10231)))

(declare-fun bm!10224 () Bool)

(declare-fun call!10230 () ListLongMap!1503)

(declare-fun call!10228 () ListLongMap!1503)

(assert (=> bm!10224 (= call!10230 call!10228)))

(declare-fun b!99592 () Bool)

(declare-fun res!50015 () Bool)

(declare-fun e!64895 () Bool)

(assert (=> b!99592 (=> (not res!50015) (not e!64895))))

(declare-fun e!64897 () Bool)

(assert (=> b!99592 (= res!50015 e!64897)))

(declare-fun c!17013 () Bool)

(assert (=> b!99592 (= c!17013 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99593 () Bool)

(declare-fun e!64893 () ListLongMap!1503)

(declare-fun e!64896 () ListLongMap!1503)

(assert (=> b!99593 (= e!64893 e!64896)))

(declare-fun c!17011 () Bool)

(assert (=> b!99593 (= c!17011 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99594 () Bool)

(declare-fun e!64898 () Bool)

(declare-fun lt!50172 () ListLongMap!1503)

(assert (=> b!99594 (= e!64898 (= (apply!93 lt!50172 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun b!99595 () Bool)

(declare-fun call!10227 () ListLongMap!1503)

(assert (=> b!99595 (= e!64892 call!10227)))

(declare-fun b!99596 () Bool)

(declare-fun res!50016 () Bool)

(assert (=> b!99596 (=> (not res!50016) (not e!64895))))

(declare-fun e!64899 () Bool)

(assert (=> b!99596 (= res!50016 e!64899)))

(declare-fun res!50013 () Bool)

(assert (=> b!99596 (=> res!50013 e!64899)))

(declare-fun e!64894 () Bool)

(assert (=> b!99596 (= res!50013 (not e!64894))))

(declare-fun res!50012 () Bool)

(assert (=> b!99596 (=> (not res!50012) (not e!64894))))

(assert (=> b!99596 (= res!50012 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99597 () Bool)

(declare-fun e!64890 () Unit!2982)

(declare-fun Unit!3001 () Unit!2982)

(assert (=> b!99597 (= e!64890 Unit!3001)))

(declare-fun b!99598 () Bool)

(declare-fun lt!50174 () Unit!2982)

(assert (=> b!99598 (= e!64890 lt!50174)))

(declare-fun lt!50178 () ListLongMap!1503)

(assert (=> b!99598 (= lt!50178 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50181 () (_ BitVec 64))

(assert (=> b!99598 (= lt!50181 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50187 () (_ BitVec 64))

(assert (=> b!99598 (= lt!50187 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50177 () Unit!2982)

(assert (=> b!99598 (= lt!50177 (addStillContains!69 lt!50178 lt!50181 (zeroValue!2382 newMap!16) lt!50187))))

(assert (=> b!99598 (contains!792 (+!131 lt!50178 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16))) lt!50187)))

(declare-fun lt!50185 () Unit!2982)

(assert (=> b!99598 (= lt!50185 lt!50177)))

(declare-fun lt!50167 () ListLongMap!1503)

(assert (=> b!99598 (= lt!50167 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50173 () (_ BitVec 64))

(assert (=> b!99598 (= lt!50173 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50170 () (_ BitVec 64))

(assert (=> b!99598 (= lt!50170 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50182 () Unit!2982)

(assert (=> b!99598 (= lt!50182 (addApplyDifferent!69 lt!50167 lt!50173 (minValue!2382 newMap!16) lt!50170))))

(assert (=> b!99598 (= (apply!93 (+!131 lt!50167 (tuple2!2309 lt!50173 (minValue!2382 newMap!16))) lt!50170) (apply!93 lt!50167 lt!50170))))

(declare-fun lt!50171 () Unit!2982)

(assert (=> b!99598 (= lt!50171 lt!50182)))

(declare-fun lt!50184 () ListLongMap!1503)

(assert (=> b!99598 (= lt!50184 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50188 () (_ BitVec 64))

(assert (=> b!99598 (= lt!50188 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50175 () (_ BitVec 64))

(assert (=> b!99598 (= lt!50175 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50169 () Unit!2982)

(assert (=> b!99598 (= lt!50169 (addApplyDifferent!69 lt!50184 lt!50188 (zeroValue!2382 newMap!16) lt!50175))))

(assert (=> b!99598 (= (apply!93 (+!131 lt!50184 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16))) lt!50175) (apply!93 lt!50184 lt!50175))))

(declare-fun lt!50179 () Unit!2982)

(assert (=> b!99598 (= lt!50179 lt!50169)))

(declare-fun lt!50183 () ListLongMap!1503)

(assert (=> b!99598 (= lt!50183 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50186 () (_ BitVec 64))

(assert (=> b!99598 (= lt!50186 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50168 () (_ BitVec 64))

(assert (=> b!99598 (= lt!50168 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99598 (= lt!50174 (addApplyDifferent!69 lt!50183 lt!50186 (minValue!2382 newMap!16) lt!50168))))

(assert (=> b!99598 (= (apply!93 (+!131 lt!50183 (tuple2!2309 lt!50186 (minValue!2382 newMap!16))) lt!50168) (apply!93 lt!50183 lt!50168))))

(declare-fun b!99599 () Bool)

(declare-fun e!64888 () Bool)

(assert (=> b!99599 (= e!64888 (= (apply!93 lt!50172 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 lt!49932) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99599 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 lt!49932)))))

(assert (=> b!99599 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99600 () Bool)

(assert (=> b!99600 (= e!64899 e!64888)))

(declare-fun res!50009 () Bool)

(assert (=> b!99600 (=> (not res!50009) (not e!64888))))

(assert (=> b!99600 (= res!50009 (contains!792 lt!50172 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99600 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99601 () Bool)

(declare-fun e!64887 () Bool)

(assert (=> b!99601 (= e!64887 e!64898)))

(declare-fun res!50017 () Bool)

(declare-fun call!10233 () Bool)

(assert (=> b!99601 (= res!50017 call!10233)))

(assert (=> b!99601 (=> (not res!50017) (not e!64898))))

(declare-fun b!99602 () Bool)

(assert (=> b!99602 (= e!64894 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99603 () Bool)

(assert (=> b!99603 (= e!64896 call!10231)))

(declare-fun b!99604 () Bool)

(declare-fun call!10229 () ListLongMap!1503)

(assert (=> b!99604 (= e!64893 (+!131 call!10229 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99605 () Bool)

(declare-fun call!10232 () Bool)

(assert (=> b!99605 (= e!64897 (not call!10232))))

(declare-fun b!99606 () Bool)

(declare-fun e!64889 () Bool)

(assert (=> b!99606 (= e!64889 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10225 () Bool)

(declare-fun c!17015 () Bool)

(assert (=> bm!10225 (= call!10229 (+!131 (ite c!17015 call!10228 (ite c!17011 call!10230 call!10227)) (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun bm!10226 () Bool)

(assert (=> bm!10226 (= call!10231 call!10229)))

(declare-fun b!99607 () Bool)

(declare-fun e!64891 () Bool)

(assert (=> b!99607 (= e!64897 e!64891)))

(declare-fun res!50011 () Bool)

(assert (=> b!99607 (= res!50011 call!10232)))

(assert (=> b!99607 (=> (not res!50011) (not e!64891))))

(declare-fun b!99608 () Bool)

(declare-fun c!17016 () Bool)

(assert (=> b!99608 (= c!17016 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99608 (= e!64896 e!64892)))

(declare-fun b!99609 () Bool)

(assert (=> b!99609 (= e!64895 e!64887)))

(declare-fun c!17012 () Bool)

(assert (=> b!99609 (= c!17012 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10227 () Bool)

(assert (=> bm!10227 (= call!10233 (contains!792 lt!50172 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10228 () Bool)

(assert (=> bm!10228 (= call!10227 call!10230)))

(declare-fun bm!10229 () Bool)

(assert (=> bm!10229 (= call!10232 (contains!792 lt!50172 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99610 () Bool)

(assert (=> b!99610 (= e!64887 (not call!10233))))

(declare-fun b!99611 () Bool)

(assert (=> b!99611 (= e!64891 (= (apply!93 lt!50172 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun d!26761 () Bool)

(assert (=> d!26761 e!64895))

(declare-fun res!50014 () Bool)

(assert (=> d!26761 (=> (not res!50014) (not e!64895))))

(assert (=> d!26761 (= res!50014 (or (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun lt!50176 () ListLongMap!1503)

(assert (=> d!26761 (= lt!50172 lt!50176)))

(declare-fun lt!50180 () Unit!2982)

(assert (=> d!26761 (= lt!50180 e!64890)))

(declare-fun c!17014 () Bool)

(assert (=> d!26761 (= c!17014 e!64889)))

(declare-fun res!50010 () Bool)

(assert (=> d!26761 (=> (not res!50010) (not e!64889))))

(assert (=> d!26761 (= res!50010 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26761 (= lt!50176 e!64893)))

(assert (=> d!26761 (= c!17015 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26761 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26761 (= (getCurrentListMap!456 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50172)))

(declare-fun bm!10230 () Bool)

(assert (=> bm!10230 (= call!10228 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (= (and d!26761 c!17015) b!99604))

(assert (= (and d!26761 (not c!17015)) b!99593))

(assert (= (and b!99593 c!17011) b!99603))

(assert (= (and b!99593 (not c!17011)) b!99608))

(assert (= (and b!99608 c!17016) b!99591))

(assert (= (and b!99608 (not c!17016)) b!99595))

(assert (= (or b!99591 b!99595) bm!10228))

(assert (= (or b!99603 bm!10228) bm!10224))

(assert (= (or b!99603 b!99591) bm!10226))

(assert (= (or b!99604 bm!10224) bm!10230))

(assert (= (or b!99604 bm!10226) bm!10225))

(assert (= (and d!26761 res!50010) b!99606))

(assert (= (and d!26761 c!17014) b!99598))

(assert (= (and d!26761 (not c!17014)) b!99597))

(assert (= (and d!26761 res!50014) b!99596))

(assert (= (and b!99596 res!50012) b!99602))

(assert (= (and b!99596 (not res!50013)) b!99600))

(assert (= (and b!99600 res!50009) b!99599))

(assert (= (and b!99596 res!50016) b!99592))

(assert (= (and b!99592 c!17013) b!99607))

(assert (= (and b!99592 (not c!17013)) b!99605))

(assert (= (and b!99607 res!50011) b!99611))

(assert (= (or b!99607 b!99605) bm!10229))

(assert (= (and b!99592 res!50015) b!99609))

(assert (= (and b!99609 c!17012) b!99601))

(assert (= (and b!99609 (not c!17012)) b!99610))

(assert (= (and b!99601 res!50017) b!99594))

(assert (= (or b!99601 b!99610) bm!10227))

(declare-fun b_lambda!4437 () Bool)

(assert (=> (not b_lambda!4437) (not b!99599)))

(assert (=> b!99599 t!5546))

(declare-fun b_and!6121 () Bool)

(assert (= b_and!6117 (and (=> t!5546 result!3299) b_and!6121)))

(assert (=> b!99599 t!5548))

(declare-fun b_and!6123 () Bool)

(assert (= b_and!6119 (and (=> t!5548 result!3301) b_and!6123)))

(declare-fun m!109495 () Bool)

(assert (=> b!99598 m!109495))

(declare-fun m!109497 () Bool)

(assert (=> b!99598 m!109497))

(declare-fun m!109499 () Bool)

(assert (=> b!99598 m!109499))

(declare-fun m!109501 () Bool)

(assert (=> b!99598 m!109501))

(declare-fun m!109503 () Bool)

(assert (=> b!99598 m!109503))

(assert (=> b!99598 m!109033))

(declare-fun m!109505 () Bool)

(assert (=> b!99598 m!109505))

(declare-fun m!109507 () Bool)

(assert (=> b!99598 m!109507))

(declare-fun m!109509 () Bool)

(assert (=> b!99598 m!109509))

(assert (=> b!99598 m!109495))

(declare-fun m!109511 () Bool)

(assert (=> b!99598 m!109511))

(declare-fun m!109513 () Bool)

(assert (=> b!99598 m!109513))

(declare-fun m!109515 () Bool)

(assert (=> b!99598 m!109515))

(assert (=> b!99598 m!109497))

(declare-fun m!109517 () Bool)

(assert (=> b!99598 m!109517))

(assert (=> b!99598 m!109501))

(assert (=> b!99598 m!109505))

(declare-fun m!109519 () Bool)

(assert (=> b!99598 m!109519))

(declare-fun m!109521 () Bool)

(assert (=> b!99598 m!109521))

(declare-fun m!109523 () Bool)

(assert (=> b!99598 m!109523))

(declare-fun m!109525 () Bool)

(assert (=> b!99598 m!109525))

(assert (=> d!26761 m!109025))

(assert (=> bm!10230 m!109513))

(declare-fun m!109527 () Bool)

(assert (=> bm!10227 m!109527))

(assert (=> b!99602 m!109033))

(assert (=> b!99602 m!109033))

(assert (=> b!99602 m!109041))

(declare-fun m!109529 () Bool)

(assert (=> b!99611 m!109529))

(declare-fun m!109531 () Bool)

(assert (=> bm!10225 m!109531))

(declare-fun m!109533 () Bool)

(assert (=> bm!10229 m!109533))

(declare-fun m!109535 () Bool)

(assert (=> b!99604 m!109535))

(assert (=> b!99606 m!109033))

(assert (=> b!99606 m!109033))

(assert (=> b!99606 m!109041))

(assert (=> b!99600 m!109033))

(assert (=> b!99600 m!109033))

(declare-fun m!109537 () Bool)

(assert (=> b!99600 m!109537))

(assert (=> b!99599 m!109033))

(declare-fun m!109539 () Bool)

(assert (=> b!99599 m!109539))

(declare-fun m!109541 () Bool)

(assert (=> b!99599 m!109541))

(assert (=> b!99599 m!109123))

(assert (=> b!99599 m!109541))

(assert (=> b!99599 m!109123))

(declare-fun m!109543 () Bool)

(assert (=> b!99599 m!109543))

(assert (=> b!99599 m!109033))

(declare-fun m!109545 () Bool)

(assert (=> b!99594 m!109545))

(assert (=> b!99232 d!26761))

(declare-fun d!26763 () Bool)

(declare-fun res!50018 () Bool)

(declare-fun e!64900 () Bool)

(assert (=> d!26763 (=> (not res!50018) (not e!64900))))

(assert (=> d!26763 (= res!50018 (simpleValid!69 (v!2817 (underlying!341 thiss!992))))))

(assert (=> d!26763 (= (valid!396 (v!2817 (underlying!341 thiss!992))) e!64900)))

(declare-fun b!99612 () Bool)

(declare-fun res!50019 () Bool)

(assert (=> b!99612 (=> (not res!50019) (not e!64900))))

(assert (=> b!99612 (= res!50019 (= (arrayCountValidKeys!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000 (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))) (_size!477 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun b!99613 () Bool)

(declare-fun res!50020 () Bool)

(assert (=> b!99613 (=> (not res!50020) (not e!64900))))

(assert (=> b!99613 (= res!50020 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun b!99614 () Bool)

(assert (=> b!99614 (= e!64900 (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000 Nil!1566))))

(assert (= (and d!26763 res!50018) b!99612))

(assert (= (and b!99612 res!50019) b!99613))

(assert (= (and b!99613 res!50020) b!99614))

(declare-fun m!109547 () Bool)

(assert (=> d!26763 m!109547))

(declare-fun m!109549 () Bool)

(assert (=> b!99612 m!109549))

(declare-fun m!109551 () Bool)

(assert (=> b!99613 m!109551))

(declare-fun m!109553 () Bool)

(assert (=> b!99614 m!109553))

(assert (=> d!26619 d!26763))

(declare-fun d!26765 () Bool)

(assert (=> d!26765 (= (apply!93 lt!49838 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4114 () Bool)

(assert (= bs!4114 d!26765))

(assert (=> bs!4114 m!109297))

(assert (=> bs!4114 m!109297))

(declare-fun m!109555 () Bool)

(assert (=> bs!4114 m!109555))

(assert (=> b!99129 d!26765))

(declare-fun b!99649 () Bool)

(declare-fun e!64917 () Unit!2982)

(declare-fun Unit!3002 () Unit!2982)

(assert (=> b!99649 (= e!64917 Unit!3002)))

(declare-fun b!99650 () Bool)

(declare-fun e!64918 () Bool)

(declare-fun lt!50265 () SeekEntryResult!248)

(assert (=> b!99650 (= e!64918 ((_ is Undefined!248) lt!50265))))

(declare-fun b!99651 () Bool)

(declare-fun e!64924 () Unit!2982)

(declare-fun lt!50254 () Unit!2982)

(assert (=> b!99651 (= e!64924 lt!50254)))

(assert (=> b!99651 (= lt!50254 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(declare-fun call!10243 () SeekEntryResult!248)

(assert (=> b!99651 (= lt!50265 call!10243)))

(declare-fun c!17028 () Bool)

(assert (=> b!99651 (= c!17028 ((_ is MissingZero!248) lt!50265))))

(declare-fun e!64921 () Bool)

(assert (=> b!99651 e!64921))

(declare-fun b!99652 () Bool)

(declare-fun Unit!3003 () Unit!2982)

(assert (=> b!99652 (= e!64924 Unit!3003)))

(declare-fun lt!50272 () Unit!2982)

(assert (=> b!99652 (= lt!50272 (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50269 () SeekEntryResult!248)

(assert (=> b!99652 (= lt!50269 call!10243)))

(declare-fun res!50041 () Bool)

(assert (=> b!99652 (= res!50041 ((_ is Found!248) lt!50269))))

(declare-fun e!64923 () Bool)

(assert (=> b!99652 (=> (not res!50041) (not e!64923))))

(assert (=> b!99652 e!64923))

(declare-fun lt!50260 () Unit!2982)

(assert (=> b!99652 (= lt!50260 lt!50272)))

(assert (=> b!99652 false))

(declare-fun bm!10239 () Bool)

(assert (=> bm!10239 (= call!10243 (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(declare-fun b!99653 () Bool)

(declare-fun res!50046 () Bool)

(declare-fun e!64920 () Bool)

(assert (=> b!99653 (=> (not res!50046) (not e!64920))))

(declare-fun lt!50250 () tuple2!2306)

(assert (=> b!99653 (= res!50046 (contains!792 (map!1256 (_2!1164 lt!50250)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun call!10242 () Bool)

(declare-fun bm!10240 () Bool)

(assert (=> bm!10240 (= call!10242 (arrayContainsKey!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!99654 () Bool)

(declare-fun e!64922 () Bool)

(assert (=> b!99654 (= e!64922 (not call!10242))))

(declare-fun b!99655 () Bool)

(declare-fun res!50039 () Bool)

(assert (=> b!99655 (=> (not res!50039) (not e!64922))))

(assert (=> b!99655 (= res!50039 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3136 lt!50265)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99656 () Bool)

(declare-fun Unit!3004 () Unit!2982)

(assert (=> b!99656 (= e!64917 Unit!3004)))

(declare-fun lt!50271 () Unit!2982)

(declare-fun lemmaArrayContainsKeyThenInListMap!26 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) (_ BitVec 32) Int) Unit!2982)

(assert (=> b!99656 (= lt!50271 (lemmaArrayContainsKeyThenInListMap!26 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> b!99656 (contains!792 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))

(declare-fun lt!50278 () Unit!2982)

(assert (=> b!99656 (= lt!50278 lt!50271)))

(assert (=> b!99656 false))

(declare-fun b!99657 () Bool)

(declare-fun res!50045 () Bool)

(assert (=> b!99657 (=> (not res!50045) (not e!64920))))

(assert (=> b!99657 (= res!50045 (valid!396 (_2!1164 lt!50250)))))

(declare-fun b!99658 () Bool)

(declare-fun e!64919 () Bool)

(assert (=> b!99658 (= e!64918 e!64919)))

(declare-fun res!50044 () Bool)

(declare-fun call!10244 () Bool)

(assert (=> b!99658 (= res!50044 call!10244)))

(assert (=> b!99658 (=> (not res!50044) (not e!64919))))

(declare-fun b!99659 () Bool)

(declare-fun res!50043 () Bool)

(declare-fun call!10245 () Bool)

(assert (=> b!99659 (= res!50043 call!10245)))

(assert (=> b!99659 (=> (not res!50043) (not e!64923))))

(declare-fun bm!10241 () Bool)

(declare-fun c!17027 () Bool)

(assert (=> bm!10241 (= call!10245 (inRange!0 (ite c!17027 (index!3137 lt!50269) (ite c!17028 (index!3136 lt!50265) (index!3139 lt!50265))) (mask!6608 newMap!16)))))

(declare-fun bm!10242 () Bool)

(assert (=> bm!10242 (= call!10244 call!10245)))

(declare-fun b!99660 () Bool)

(assert (=> b!99660 (= e!64923 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!50269)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99661 () Bool)

(declare-fun res!50042 () Bool)

(assert (=> b!99661 (=> (not res!50042) (not e!64922))))

(assert (=> b!99661 (= res!50042 call!10244)))

(assert (=> b!99661 (= e!64921 e!64922)))

(declare-fun d!26767 () Bool)

(assert (=> d!26767 e!64920))

(declare-fun res!50040 () Bool)

(assert (=> d!26767 (=> (not res!50040) (not e!64920))))

(assert (=> d!26767 (= res!50040 (_1!1164 lt!50250))))

(assert (=> d!26767 (= lt!50250 (tuple2!2307 true (LongMapFixedSize!857 (defaultEntry!2501 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (bvadd (_size!477 newMap!16) #b00000000000000000000000000000001) (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (_vacant!477 newMap!16))))))

(declare-fun lt!50256 () Unit!2982)

(declare-fun lt!50261 () Unit!2982)

(assert (=> d!26767 (= lt!50256 lt!50261)))

(declare-fun lt!50275 () array!4239)

(declare-fun lt!50252 () array!4237)

(assert (=> d!26767 (contains!792 (getCurrentListMap!456 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))))))

(assert (=> d!26767 (= lt!50261 (lemmaValidKeyInArrayIsInListMap!102 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!26767 (= lt!50275 (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))))

(assert (=> d!26767 (= lt!50252 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun lt!50277 () Unit!2982)

(declare-fun lt!50264 () Unit!2982)

(assert (=> d!26767 (= lt!50277 lt!50264)))

(declare-fun lt!50251 () array!4237)

(assert (=> d!26767 (= (arrayCountValidKeys!0 lt!50251 (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (bvadd (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4237 (_ BitVec 32)) Unit!2982)

(assert (=> d!26767 (= lt!50264 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!50251 (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))))))

(assert (=> d!26767 (= lt!50251 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun lt!50270 () Unit!2982)

(declare-fun lt!50266 () Unit!2982)

(assert (=> d!26767 (= lt!50270 lt!50266)))

(declare-fun lt!50274 () array!4237)

(assert (=> d!26767 (arrayContainsKey!0 lt!50274 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!26767 (= lt!50266 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!50274 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))))))

(assert (=> d!26767 (= lt!50274 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun lt!50268 () Unit!2982)

(declare-fun lt!50276 () Unit!2982)

(assert (=> d!26767 (= lt!50268 lt!50276)))

(assert (=> d!26767 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!456 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!26 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) (_ BitVec 64) V!3161 Int) Unit!2982)

(assert (=> d!26767 (= lt!50276 (lemmaAddValidKeyToArrayThenAddPairToListMap!26 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50253 () Unit!2982)

(declare-fun lt!50255 () Unit!2982)

(assert (=> d!26767 (= lt!50253 lt!50255)))

(assert (=> d!26767 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (mask!6608 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4237 (_ BitVec 32) (_ BitVec 32)) Unit!2982)

(assert (=> d!26767 (= lt!50255 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (mask!6608 newMap!16)))))

(declare-fun lt!50257 () Unit!2982)

(declare-fun lt!50273 () Unit!2982)

(assert (=> d!26767 (= lt!50257 lt!50273)))

(assert (=> d!26767 (= (arrayCountValidKeys!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4195 newMap!16) #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4237 (_ BitVec 32) (_ BitVec 64)) Unit!2982)

(assert (=> d!26767 (= lt!50273 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4195 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun lt!50249 () Unit!2982)

(declare-fun lt!50263 () Unit!2982)

(assert (=> d!26767 (= lt!50249 lt!50263)))

(declare-fun lt!50258 () List!1569)

(declare-fun lt!50259 () (_ BitVec 32))

(assert (=> d!26767 (arrayNoDuplicates!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) lt!50259 lt!50258)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4237 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1569) Unit!2982)

(assert (=> d!26767 (= lt!50263 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) lt!50259 lt!50258))))

(assert (=> d!26767 (= lt!50258 Nil!1566)))

(assert (=> d!26767 (= lt!50259 #b00000000000000000000000000000000)))

(declare-fun lt!50267 () Unit!2982)

(assert (=> d!26767 (= lt!50267 e!64917)))

(declare-fun c!17025 () Bool)

(assert (=> d!26767 (= c!17025 (arrayContainsKey!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!50262 () Unit!2982)

(assert (=> d!26767 (= lt!50262 e!64924)))

(assert (=> d!26767 (= c!17027 (contains!792 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!26767 (valid!396 newMap!16)))

(assert (=> d!26767 (= (updateHelperNewKey!42 newMap!16 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))) lt!50250)))

(declare-fun b!99662 () Bool)

(assert (=> b!99662 (= e!64919 (not call!10242))))

(declare-fun b!99663 () Bool)

(declare-fun res!50047 () Bool)

(assert (=> b!99663 (= res!50047 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3139 lt!50265)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99663 (=> (not res!50047) (not e!64919))))

(declare-fun b!99664 () Bool)

(declare-fun c!17026 () Bool)

(assert (=> b!99664 (= c!17026 ((_ is MissingVacant!248) lt!50265))))

(assert (=> b!99664 (= e!64921 e!64918)))

(declare-fun b!99665 () Bool)

(assert (=> b!99665 (= e!64920 (= (map!1256 (_2!1164 lt!50250)) (+!131 (map!1256 newMap!16) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26767 c!17027) b!99652))

(assert (= (and d!26767 (not c!17027)) b!99651))

(assert (= (and b!99652 res!50041) b!99659))

(assert (= (and b!99659 res!50043) b!99660))

(assert (= (and b!99651 c!17028) b!99661))

(assert (= (and b!99651 (not c!17028)) b!99664))

(assert (= (and b!99661 res!50042) b!99655))

(assert (= (and b!99655 res!50039) b!99654))

(assert (= (and b!99664 c!17026) b!99658))

(assert (= (and b!99664 (not c!17026)) b!99650))

(assert (= (and b!99658 res!50044) b!99663))

(assert (= (and b!99663 res!50047) b!99662))

(assert (= (or b!99661 b!99658) bm!10242))

(assert (= (or b!99654 b!99662) bm!10240))

(assert (= (or b!99659 bm!10242) bm!10241))

(assert (= (or b!99652 b!99651) bm!10239))

(assert (= (and d!26767 c!17025) b!99656))

(assert (= (and d!26767 (not c!17025)) b!99649))

(assert (= (and d!26767 res!50040) b!99657))

(assert (= (and b!99657 res!50045) b!99653))

(assert (= (and b!99653 res!50046) b!99665))

(declare-fun m!109557 () Bool)

(assert (=> b!99657 m!109557))

(assert (=> b!99651 m!108735))

(assert (=> b!99651 m!108991))

(declare-fun m!109559 () Bool)

(assert (=> bm!10241 m!109559))

(declare-fun m!109561 () Bool)

(assert (=> b!99663 m!109561))

(assert (=> b!99656 m!108735))

(declare-fun m!109563 () Bool)

(assert (=> b!99656 m!109563))

(assert (=> b!99656 m!108863))

(assert (=> b!99656 m!108863))

(assert (=> b!99656 m!108735))

(declare-fun m!109565 () Bool)

(assert (=> b!99656 m!109565))

(assert (=> b!99652 m!108735))

(assert (=> b!99652 m!108993))

(declare-fun m!109567 () Bool)

(assert (=> b!99660 m!109567))

(declare-fun m!109569 () Bool)

(assert (=> b!99665 m!109569))

(assert (=> b!99665 m!108757))

(assert (=> b!99665 m!108757))

(declare-fun m!109571 () Bool)

(assert (=> b!99665 m!109571))

(declare-fun m!109573 () Bool)

(assert (=> d!26767 m!109573))

(assert (=> d!26767 m!108735))

(assert (=> d!26767 m!108749))

(declare-fun m!109575 () Bool)

(assert (=> d!26767 m!109575))

(declare-fun m!109577 () Bool)

(assert (=> d!26767 m!109577))

(declare-fun m!109579 () Bool)

(assert (=> d!26767 m!109579))

(declare-fun m!109581 () Bool)

(assert (=> d!26767 m!109581))

(assert (=> d!26767 m!108735))

(declare-fun m!109583 () Bool)

(assert (=> d!26767 m!109583))

(assert (=> d!26767 m!108863))

(assert (=> d!26767 m!109281))

(assert (=> d!26767 m!108773))

(declare-fun m!109585 () Bool)

(assert (=> d!26767 m!109585))

(assert (=> d!26767 m!108863))

(assert (=> d!26767 m!108735))

(assert (=> d!26767 m!109565))

(assert (=> d!26767 m!108735))

(assert (=> d!26767 m!108977))

(declare-fun m!109587 () Bool)

(assert (=> d!26767 m!109587))

(declare-fun m!109589 () Bool)

(assert (=> d!26767 m!109589))

(assert (=> d!26767 m!108735))

(declare-fun m!109591 () Bool)

(assert (=> d!26767 m!109591))

(declare-fun m!109593 () Bool)

(assert (=> d!26767 m!109593))

(assert (=> d!26767 m!108735))

(declare-fun m!109595 () Bool)

(assert (=> d!26767 m!109595))

(assert (=> d!26767 m!108735))

(declare-fun m!109597 () Bool)

(assert (=> d!26767 m!109597))

(assert (=> d!26767 m!108863))

(declare-fun m!109599 () Bool)

(assert (=> d!26767 m!109599))

(assert (=> d!26767 m!108735))

(declare-fun m!109601 () Bool)

(assert (=> d!26767 m!109601))

(assert (=> d!26767 m!108925))

(declare-fun m!109603 () Bool)

(assert (=> d!26767 m!109603))

(assert (=> d!26767 m!109581))

(assert (=> d!26767 m!109585))

(declare-fun m!109605 () Bool)

(assert (=> d!26767 m!109605))

(declare-fun m!109607 () Bool)

(assert (=> d!26767 m!109607))

(declare-fun m!109609 () Bool)

(assert (=> b!99655 m!109609))

(assert (=> bm!10239 m!108735))

(assert (=> bm!10239 m!108961))

(assert (=> b!99653 m!109569))

(assert (=> b!99653 m!109569))

(assert (=> b!99653 m!108735))

(declare-fun m!109611 () Bool)

(assert (=> b!99653 m!109611))

(assert (=> bm!10240 m!108735))

(assert (=> bm!10240 m!108977))

(assert (=> bm!10172 d!26767))

(declare-fun d!26769 () Bool)

(assert (=> d!26769 (= (get!1297 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2816 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> b!99272 d!26769))

(assert (=> b!99147 d!26719))

(assert (=> b!99147 d!26721))

(declare-fun d!26771 () Bool)

(declare-fun e!64926 () Bool)

(assert (=> d!26771 e!64926))

(declare-fun res!50048 () Bool)

(assert (=> d!26771 (=> res!50048 e!64926)))

(declare-fun lt!50281 () Bool)

(assert (=> d!26771 (= res!50048 (not lt!50281))))

(declare-fun lt!50280 () Bool)

(assert (=> d!26771 (= lt!50281 lt!50280)))

(declare-fun lt!50279 () Unit!2982)

(declare-fun e!64925 () Unit!2982)

(assert (=> d!26771 (= lt!50279 e!64925)))

(declare-fun c!17029 () Bool)

(assert (=> d!26771 (= c!17029 lt!50280)))

(assert (=> d!26771 (= lt!50280 (containsKey!155 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!26771 (= (contains!792 call!10174 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!50281)))

(declare-fun b!99666 () Bool)

(declare-fun lt!50282 () Unit!2982)

(assert (=> b!99666 (= e!64925 lt!50282)))

(assert (=> b!99666 (= lt!50282 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> b!99666 (isDefined!104 (getValueByKey!152 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99667 () Bool)

(declare-fun Unit!3005 () Unit!2982)

(assert (=> b!99667 (= e!64925 Unit!3005)))

(declare-fun b!99668 () Bool)

(assert (=> b!99668 (= e!64926 (isDefined!104 (getValueByKey!152 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (= (and d!26771 c!17029) b!99666))

(assert (= (and d!26771 (not c!17029)) b!99667))

(assert (= (and d!26771 (not res!50048)) b!99668))

(assert (=> d!26771 m!108735))

(declare-fun m!109613 () Bool)

(assert (=> d!26771 m!109613))

(assert (=> b!99666 m!108735))

(declare-fun m!109615 () Bool)

(assert (=> b!99666 m!109615))

(assert (=> b!99666 m!108735))

(declare-fun m!109617 () Bool)

(assert (=> b!99666 m!109617))

(assert (=> b!99666 m!109617))

(declare-fun m!109619 () Bool)

(assert (=> b!99666 m!109619))

(assert (=> b!99668 m!108735))

(assert (=> b!99668 m!109617))

(assert (=> b!99668 m!109617))

(assert (=> b!99668 m!109619))

(assert (=> b!99260 d!26771))

(declare-fun d!26773 () Bool)

(declare-fun e!64929 () Bool)

(assert (=> d!26773 e!64929))

(declare-fun c!17032 () Bool)

(assert (=> d!26773 (= c!17032 (and (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!26773 true))

(declare-fun _$29!129 () Unit!2982)

(assert (=> d!26773 (= (choose!608 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))) _$29!129)))

(declare-fun b!99673 () Bool)

(assert (=> b!99673 (= e!64929 (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!99674 () Bool)

(assert (=> b!99674 (= e!64929 (ite (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26773 c!17032) b!99673))

(assert (= (and d!26773 (not c!17032)) b!99674))

(assert (=> b!99673 m!108735))

(assert (=> b!99673 m!108739))

(assert (=> d!26641 d!26773))

(assert (=> d!26641 d!26623))

(declare-fun mapIsEmpty!3783 () Bool)

(declare-fun mapRes!3783 () Bool)

(assert (=> mapIsEmpty!3783 mapRes!3783))

(declare-fun b!99676 () Bool)

(declare-fun e!64930 () Bool)

(assert (=> b!99676 (= e!64930 tp_is_empty!2635)))

(declare-fun condMapEmpty!3783 () Bool)

(declare-fun mapDefault!3783 () ValueCell!974)

(assert (=> mapNonEmpty!3781 (= condMapEmpty!3783 (= mapRest!3781 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3783)))))

(assert (=> mapNonEmpty!3781 (= tp!9631 (and e!64930 mapRes!3783))))

(declare-fun b!99675 () Bool)

(declare-fun e!64931 () Bool)

(assert (=> b!99675 (= e!64931 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3783 () Bool)

(declare-fun tp!9633 () Bool)

(assert (=> mapNonEmpty!3783 (= mapRes!3783 (and tp!9633 e!64931))))

(declare-fun mapValue!3783 () ValueCell!974)

(declare-fun mapKey!3783 () (_ BitVec 32))

(declare-fun mapRest!3783 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3783 (= mapRest!3781 (store mapRest!3783 mapKey!3783 mapValue!3783))))

(assert (= (and mapNonEmpty!3781 condMapEmpty!3783) mapIsEmpty!3783))

(assert (= (and mapNonEmpty!3781 (not condMapEmpty!3783)) mapNonEmpty!3783))

(assert (= (and mapNonEmpty!3783 ((_ is ValueCellFull!974) mapValue!3783)) b!99675))

(assert (= (and mapNonEmpty!3781 ((_ is ValueCellFull!974) mapDefault!3783)) b!99676))

(declare-fun m!109621 () Bool)

(assert (=> mapNonEmpty!3783 m!109621))

(declare-fun mapIsEmpty!3784 () Bool)

(declare-fun mapRes!3784 () Bool)

(assert (=> mapIsEmpty!3784 mapRes!3784))

(declare-fun b!99678 () Bool)

(declare-fun e!64932 () Bool)

(assert (=> b!99678 (= e!64932 tp_is_empty!2635)))

(declare-fun condMapEmpty!3784 () Bool)

(declare-fun mapDefault!3784 () ValueCell!974)

(assert (=> mapNonEmpty!3782 (= condMapEmpty!3784 (= mapRest!3782 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3784)))))

(assert (=> mapNonEmpty!3782 (= tp!9632 (and e!64932 mapRes!3784))))

(declare-fun b!99677 () Bool)

(declare-fun e!64933 () Bool)

(assert (=> b!99677 (= e!64933 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3784 () Bool)

(declare-fun tp!9634 () Bool)

(assert (=> mapNonEmpty!3784 (= mapRes!3784 (and tp!9634 e!64933))))

(declare-fun mapValue!3784 () ValueCell!974)

(declare-fun mapKey!3784 () (_ BitVec 32))

(declare-fun mapRest!3784 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3784 (= mapRest!3782 (store mapRest!3784 mapKey!3784 mapValue!3784))))

(assert (= (and mapNonEmpty!3782 condMapEmpty!3784) mapIsEmpty!3784))

(assert (= (and mapNonEmpty!3782 (not condMapEmpty!3784)) mapNonEmpty!3784))

(assert (= (and mapNonEmpty!3784 ((_ is ValueCellFull!974) mapValue!3784)) b!99677))

(assert (= (and mapNonEmpty!3782 ((_ is ValueCellFull!974) mapDefault!3784)) b!99678))

(declare-fun m!109623 () Bool)

(assert (=> mapNonEmpty!3784 m!109623))

(declare-fun b_lambda!4439 () Bool)

(assert (= b_lambda!4433 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4439)))

(declare-fun b_lambda!4441 () Bool)

(assert (= b_lambda!4429 (or (and b!98943 b_free!2437) (and b!98935 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))))) b_lambda!4441)))

(declare-fun b_lambda!4443 () Bool)

(assert (= b_lambda!4431 (or (and b!98943 b_free!2437) (and b!98935 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))))) b_lambda!4443)))

(declare-fun b_lambda!4445 () Bool)

(assert (= b_lambda!4427 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4445)))

(declare-fun b_lambda!4447 () Bool)

(assert (= b_lambda!4435 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4447)))

(declare-fun b_lambda!4449 () Bool)

(assert (= b_lambda!4437 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4449)))

(check-sat (not b!99500) (not d!26677) (not mapNonEmpty!3783) (not b_lambda!4449) (not d!26751) (not b!99566) (not d!26757) (not b!99432) (not b!99521) (not d!26747) tp_is_empty!2635 (not b!99349) (not b!99571) (not b!99440) (not b!99435) (not d!26753) b_and!6121 (not d!26675) (not b!99436) (not b!99611) (not b!99653) (not b!99491) (not b!99545) (not d!26723) (not b!99343) (not b!99434) (not b!99561) (not b!99652) (not b!99600) (not b!99673) (not d!26659) (not d!26717) (not b_lambda!4443) (not bm!10190) (not b!99598) (not b!99459) (not b!99358) (not b!99355) (not d!26767) (not b!99589) (not mapNonEmpty!3784) (not b!99449) (not b_lambda!4425) (not b!99356) (not bm!10195) (not d!26759) (not b!99518) (not b!99473) (not b!99530) (not d!26749) (not b!99547) (not d!26691) (not b!99651) (not bm!10223) b_and!6123 (not b!99656) (not d!26741) (not d!26719) (not d!26709) (not b!99612) (not b!99374) (not b!99665) (not b!99348) (not bm!10194) (not b!99567) (not d!26683) (not bm!10222) (not b!99455) (not d!26651) (not b!99325) (not d!26663) (not b!99439) (not d!26701) (not b!99599) (not b!99441) (not b!99569) (not bm!10205) (not d!26699) (not bm!10209) (not d!26653) (not b!99338) (not d!26727) (not b!99489) (not b!99573) (not b!99487) (not b!99523) (not b_next!2437) (not bm!10200) (not bm!10225) (not d!26679) (not b!99456) (not bm!10216) (not d!26693) (not d!26739) (not b!99368) (not d!26671) (not b!99370) (not d!26669) (not b!99431) (not b!99657) (not d!26681) (not b!99606) (not b!99462) (not b!99513) (not bm!10241) (not b!99501) (not b!99341) (not b_lambda!4441) (not b!99556) (not bm!10215) (not b_lambda!4439) (not b_lambda!4421) (not b!99366) (not b!99549) (not b_next!2439) (not b!99457) (not d!26685) (not b_lambda!4447) (not b!99471) (not b!99525) (not b!99543) (not b!99497) (not bm!10227) (not b!99504) (not b!99507) (not bm!10201) (not bm!10212) (not d!26697) (not d!26737) (not bm!10218) (not b!99505) (not d!26761) (not b!99465) (not d!26661) (not b!99451) (not b!99498) (not b!99531) (not b!99557) (not b!99447) (not b!99604) (not bm!10240) (not d!26731) (not b!99428) (not bm!10204) (not b!99602) (not d!26705) (not b!99554) (not b!99519) (not d!26695) (not d!26765) (not d!26687) (not b!99448) (not b!99429) (not d!26703) (not b!99588) (not d!26689) (not b!99565) (not bm!10192) (not bm!10229) (not d!26713) (not b!99517) (not d!26645) (not d!26667) (not b!99532) (not b!99372) (not b!99468) (not b!99340) (not d!26725) (not bm!10230) (not b!99502) (not d!26771) (not b!99594) (not b!99379) (not b!99342) (not d!26729) (not d!26763) (not b!99578) (not b_lambda!4445) (not b!99466) (not bm!10207) (not b!99614) (not b!99668) (not b!99469) (not bm!10239) (not d!26673) (not bm!10220) (not b!99454) (not bm!10211) (not b!99613) (not b!99458) (not b!99476) (not b!99509) (not b!99362) (not b!99666) (not d!26707) (not bm!10188) (not b!99367))
(check-sat b_and!6121 b_and!6123 (not b_next!2437) (not b_next!2439))
(get-model)

(assert (=> bm!10201 d!26733))

(declare-fun d!26775 () Bool)

(assert (=> d!26775 (= (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99545 d!26775))

(declare-fun d!26777 () Bool)

(declare-fun e!64934 () Bool)

(assert (=> d!26777 e!64934))

(declare-fun res!50050 () Bool)

(assert (=> d!26777 (=> (not res!50050) (not e!64934))))

(declare-fun lt!50285 () ListLongMap!1503)

(assert (=> d!26777 (= res!50050 (contains!792 lt!50285 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50284 () List!1568)

(assert (=> d!26777 (= lt!50285 (ListLongMap!1504 lt!50284))))

(declare-fun lt!50283 () Unit!2982)

(declare-fun lt!50286 () Unit!2982)

(assert (=> d!26777 (= lt!50283 lt!50286)))

(assert (=> d!26777 (= (getValueByKey!152 lt!50284 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26777 (= lt!50286 (lemmaContainsTupThenGetReturnValue!68 lt!50284 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26777 (= lt!50284 (insertStrictlySorted!71 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26777 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50285)))

(declare-fun b!99679 () Bool)

(declare-fun res!50049 () Bool)

(assert (=> b!99679 (=> (not res!50049) (not e!64934))))

(assert (=> b!99679 (= res!50049 (= (getValueByKey!152 (toList!767 lt!50285) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99680 () Bool)

(assert (=> b!99680 (= e!64934 (contains!795 (toList!767 lt!50285) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26777 res!50050) b!99679))

(assert (= (and b!99679 res!50049) b!99680))

(declare-fun m!109625 () Bool)

(assert (=> d!26777 m!109625))

(declare-fun m!109627 () Bool)

(assert (=> d!26777 m!109627))

(declare-fun m!109629 () Bool)

(assert (=> d!26777 m!109629))

(declare-fun m!109631 () Bool)

(assert (=> d!26777 m!109631))

(declare-fun m!109633 () Bool)

(assert (=> b!99679 m!109633))

(declare-fun m!109635 () Bool)

(assert (=> b!99680 m!109635))

(assert (=> b!99465 d!26777))

(assert (=> b!99465 d!26661))

(declare-fun b!99681 () Bool)

(declare-fun e!64940 () ListLongMap!1503)

(declare-fun call!10250 () ListLongMap!1503)

(assert (=> b!99681 (= e!64940 call!10250)))

(declare-fun bm!10243 () Bool)

(declare-fun call!10249 () ListLongMap!1503)

(declare-fun call!10247 () ListLongMap!1503)

(assert (=> bm!10243 (= call!10249 call!10247)))

(declare-fun b!99682 () Bool)

(declare-fun res!50057 () Bool)

(declare-fun e!64943 () Bool)

(assert (=> b!99682 (=> (not res!50057) (not e!64943))))

(declare-fun e!64945 () Bool)

(assert (=> b!99682 (= res!50057 e!64945)))

(declare-fun c!17035 () Bool)

(assert (=> b!99682 (= c!17035 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99683 () Bool)

(declare-fun e!64941 () ListLongMap!1503)

(declare-fun e!64944 () ListLongMap!1503)

(assert (=> b!99683 (= e!64941 e!64944)))

(declare-fun c!17033 () Bool)

(assert (=> b!99683 (= c!17033 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99684 () Bool)

(declare-fun e!64946 () Bool)

(declare-fun lt!50292 () ListLongMap!1503)

(assert (=> b!99684 (= e!64946 (= (apply!93 lt!50292 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun b!99685 () Bool)

(declare-fun call!10246 () ListLongMap!1503)

(assert (=> b!99685 (= e!64940 call!10246)))

(declare-fun b!99686 () Bool)

(declare-fun res!50058 () Bool)

(assert (=> b!99686 (=> (not res!50058) (not e!64943))))

(declare-fun e!64947 () Bool)

(assert (=> b!99686 (= res!50058 e!64947)))

(declare-fun res!50055 () Bool)

(assert (=> b!99686 (=> res!50055 e!64947)))

(declare-fun e!64942 () Bool)

(assert (=> b!99686 (= res!50055 (not e!64942))))

(declare-fun res!50054 () Bool)

(assert (=> b!99686 (=> (not res!50054) (not e!64942))))

(assert (=> b!99686 (= res!50054 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99687 () Bool)

(declare-fun e!64938 () Unit!2982)

(declare-fun Unit!3006 () Unit!2982)

(assert (=> b!99687 (= e!64938 Unit!3006)))

(declare-fun b!99688 () Bool)

(declare-fun lt!50294 () Unit!2982)

(assert (=> b!99688 (= e!64938 lt!50294)))

(declare-fun lt!50298 () ListLongMap!1503)

(assert (=> b!99688 (= lt!50298 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50301 () (_ BitVec 64))

(assert (=> b!99688 (= lt!50301 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50307 () (_ BitVec 64))

(assert (=> b!99688 (= lt!50307 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50297 () Unit!2982)

(assert (=> b!99688 (= lt!50297 (addStillContains!69 lt!50298 lt!50301 (zeroValue!2382 newMap!16) lt!50307))))

(assert (=> b!99688 (contains!792 (+!131 lt!50298 (tuple2!2309 lt!50301 (zeroValue!2382 newMap!16))) lt!50307)))

(declare-fun lt!50305 () Unit!2982)

(assert (=> b!99688 (= lt!50305 lt!50297)))

(declare-fun lt!50287 () ListLongMap!1503)

(assert (=> b!99688 (= lt!50287 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50293 () (_ BitVec 64))

(assert (=> b!99688 (= lt!50293 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50290 () (_ BitVec 64))

(assert (=> b!99688 (= lt!50290 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50302 () Unit!2982)

(assert (=> b!99688 (= lt!50302 (addApplyDifferent!69 lt!50287 lt!50293 (minValue!2382 newMap!16) lt!50290))))

(assert (=> b!99688 (= (apply!93 (+!131 lt!50287 (tuple2!2309 lt!50293 (minValue!2382 newMap!16))) lt!50290) (apply!93 lt!50287 lt!50290))))

(declare-fun lt!50291 () Unit!2982)

(assert (=> b!99688 (= lt!50291 lt!50302)))

(declare-fun lt!50304 () ListLongMap!1503)

(assert (=> b!99688 (= lt!50304 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50308 () (_ BitVec 64))

(assert (=> b!99688 (= lt!50308 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50295 () (_ BitVec 64))

(assert (=> b!99688 (= lt!50295 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50289 () Unit!2982)

(assert (=> b!99688 (= lt!50289 (addApplyDifferent!69 lt!50304 lt!50308 (zeroValue!2382 newMap!16) lt!50295))))

(assert (=> b!99688 (= (apply!93 (+!131 lt!50304 (tuple2!2309 lt!50308 (zeroValue!2382 newMap!16))) lt!50295) (apply!93 lt!50304 lt!50295))))

(declare-fun lt!50299 () Unit!2982)

(assert (=> b!99688 (= lt!50299 lt!50289)))

(declare-fun lt!50303 () ListLongMap!1503)

(assert (=> b!99688 (= lt!50303 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50306 () (_ BitVec 64))

(assert (=> b!99688 (= lt!50306 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50288 () (_ BitVec 64))

(assert (=> b!99688 (= lt!50288 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99688 (= lt!50294 (addApplyDifferent!69 lt!50303 lt!50306 (minValue!2382 newMap!16) lt!50288))))

(assert (=> b!99688 (= (apply!93 (+!131 lt!50303 (tuple2!2309 lt!50306 (minValue!2382 newMap!16))) lt!50288) (apply!93 lt!50303 lt!50288))))

(declare-fun b!99689 () Bool)

(declare-fun e!64936 () Bool)

(assert (=> b!99689 (= e!64936 (= (apply!93 lt!50292 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99689 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))))))

(assert (=> b!99689 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99690 () Bool)

(assert (=> b!99690 (= e!64947 e!64936)))

(declare-fun res!50051 () Bool)

(assert (=> b!99690 (=> (not res!50051) (not e!64936))))

(assert (=> b!99690 (= res!50051 (contains!792 lt!50292 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99690 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99691 () Bool)

(declare-fun e!64935 () Bool)

(assert (=> b!99691 (= e!64935 e!64946)))

(declare-fun res!50059 () Bool)

(declare-fun call!10252 () Bool)

(assert (=> b!99691 (= res!50059 call!10252)))

(assert (=> b!99691 (=> (not res!50059) (not e!64946))))

(declare-fun b!99692 () Bool)

(assert (=> b!99692 (= e!64942 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99693 () Bool)

(assert (=> b!99693 (= e!64944 call!10250)))

(declare-fun b!99694 () Bool)

(declare-fun call!10248 () ListLongMap!1503)

(assert (=> b!99694 (= e!64941 (+!131 call!10248 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99695 () Bool)

(declare-fun call!10251 () Bool)

(assert (=> b!99695 (= e!64945 (not call!10251))))

(declare-fun b!99696 () Bool)

(declare-fun e!64937 () Bool)

(assert (=> b!99696 (= e!64937 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10244 () Bool)

(declare-fun c!17037 () Bool)

(assert (=> bm!10244 (= call!10248 (+!131 (ite c!17037 call!10247 (ite c!17033 call!10249 call!10246)) (ite (or c!17037 c!17033) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun bm!10245 () Bool)

(assert (=> bm!10245 (= call!10250 call!10248)))

(declare-fun b!99697 () Bool)

(declare-fun e!64939 () Bool)

(assert (=> b!99697 (= e!64945 e!64939)))

(declare-fun res!50053 () Bool)

(assert (=> b!99697 (= res!50053 call!10251)))

(assert (=> b!99697 (=> (not res!50053) (not e!64939))))

(declare-fun b!99698 () Bool)

(declare-fun c!17038 () Bool)

(assert (=> b!99698 (= c!17038 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99698 (= e!64944 e!64940)))

(declare-fun b!99699 () Bool)

(assert (=> b!99699 (= e!64943 e!64935)))

(declare-fun c!17034 () Bool)

(assert (=> b!99699 (= c!17034 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10246 () Bool)

(assert (=> bm!10246 (= call!10252 (contains!792 lt!50292 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10247 () Bool)

(assert (=> bm!10247 (= call!10246 call!10249)))

(declare-fun bm!10248 () Bool)

(assert (=> bm!10248 (= call!10251 (contains!792 lt!50292 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99700 () Bool)

(assert (=> b!99700 (= e!64935 (not call!10252))))

(declare-fun b!99701 () Bool)

(assert (=> b!99701 (= e!64939 (= (apply!93 lt!50292 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun d!26779 () Bool)

(assert (=> d!26779 e!64943))

(declare-fun res!50056 () Bool)

(assert (=> d!26779 (=> (not res!50056) (not e!64943))))

(assert (=> d!26779 (= res!50056 (or (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun lt!50296 () ListLongMap!1503)

(assert (=> d!26779 (= lt!50292 lt!50296)))

(declare-fun lt!50300 () Unit!2982)

(assert (=> d!26779 (= lt!50300 e!64938)))

(declare-fun c!17036 () Bool)

(assert (=> d!26779 (= c!17036 e!64937)))

(declare-fun res!50052 () Bool)

(assert (=> d!26779 (=> (not res!50052) (not e!64937))))

(assert (=> d!26779 (= res!50052 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26779 (= lt!50296 e!64941)))

(assert (=> d!26779 (= c!17037 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26779 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26779 (= (getCurrentListMap!456 (_keys!4195 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50292)))

(declare-fun bm!10249 () Bool)

(assert (=> bm!10249 (= call!10247 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (= (and d!26779 c!17037) b!99694))

(assert (= (and d!26779 (not c!17037)) b!99683))

(assert (= (and b!99683 c!17033) b!99693))

(assert (= (and b!99683 (not c!17033)) b!99698))

(assert (= (and b!99698 c!17038) b!99681))

(assert (= (and b!99698 (not c!17038)) b!99685))

(assert (= (or b!99681 b!99685) bm!10247))

(assert (= (or b!99693 bm!10247) bm!10243))

(assert (= (or b!99693 b!99681) bm!10245))

(assert (= (or b!99694 bm!10243) bm!10249))

(assert (= (or b!99694 bm!10245) bm!10244))

(assert (= (and d!26779 res!50052) b!99696))

(assert (= (and d!26779 c!17036) b!99688))

(assert (= (and d!26779 (not c!17036)) b!99687))

(assert (= (and d!26779 res!50056) b!99686))

(assert (= (and b!99686 res!50054) b!99692))

(assert (= (and b!99686 (not res!50055)) b!99690))

(assert (= (and b!99690 res!50051) b!99689))

(assert (= (and b!99686 res!50058) b!99682))

(assert (= (and b!99682 c!17035) b!99697))

(assert (= (and b!99682 (not c!17035)) b!99695))

(assert (= (and b!99697 res!50053) b!99701))

(assert (= (or b!99697 b!99695) bm!10248))

(assert (= (and b!99682 res!50057) b!99699))

(assert (= (and b!99699 c!17034) b!99691))

(assert (= (and b!99699 (not c!17034)) b!99700))

(assert (= (and b!99691 res!50059) b!99684))

(assert (= (or b!99691 b!99700) bm!10246))

(declare-fun b_lambda!4451 () Bool)

(assert (=> (not b_lambda!4451) (not b!99689)))

(assert (=> b!99689 t!5546))

(declare-fun b_and!6125 () Bool)

(assert (= b_and!6121 (and (=> t!5546 result!3299) b_and!6125)))

(assert (=> b!99689 t!5548))

(declare-fun b_and!6127 () Bool)

(assert (= b_and!6123 (and (=> t!5548 result!3301) b_and!6127)))

(declare-fun m!109637 () Bool)

(assert (=> b!99688 m!109637))

(declare-fun m!109639 () Bool)

(assert (=> b!99688 m!109639))

(declare-fun m!109641 () Bool)

(assert (=> b!99688 m!109641))

(declare-fun m!109643 () Bool)

(assert (=> b!99688 m!109643))

(declare-fun m!109645 () Bool)

(assert (=> b!99688 m!109645))

(assert (=> b!99688 m!109033))

(declare-fun m!109647 () Bool)

(assert (=> b!99688 m!109647))

(declare-fun m!109649 () Bool)

(assert (=> b!99688 m!109649))

(declare-fun m!109651 () Bool)

(assert (=> b!99688 m!109651))

(assert (=> b!99688 m!109637))

(declare-fun m!109653 () Bool)

(assert (=> b!99688 m!109653))

(declare-fun m!109655 () Bool)

(assert (=> b!99688 m!109655))

(declare-fun m!109657 () Bool)

(assert (=> b!99688 m!109657))

(assert (=> b!99688 m!109639))

(declare-fun m!109659 () Bool)

(assert (=> b!99688 m!109659))

(assert (=> b!99688 m!109643))

(assert (=> b!99688 m!109647))

(declare-fun m!109661 () Bool)

(assert (=> b!99688 m!109661))

(declare-fun m!109663 () Bool)

(assert (=> b!99688 m!109663))

(declare-fun m!109665 () Bool)

(assert (=> b!99688 m!109665))

(declare-fun m!109667 () Bool)

(assert (=> b!99688 m!109667))

(assert (=> d!26779 m!109025))

(assert (=> bm!10249 m!109655))

(declare-fun m!109669 () Bool)

(assert (=> bm!10246 m!109669))

(assert (=> b!99692 m!109033))

(assert (=> b!99692 m!109033))

(assert (=> b!99692 m!109041))

(declare-fun m!109671 () Bool)

(assert (=> b!99701 m!109671))

(declare-fun m!109673 () Bool)

(assert (=> bm!10244 m!109673))

(declare-fun m!109675 () Bool)

(assert (=> bm!10248 m!109675))

(declare-fun m!109677 () Bool)

(assert (=> b!99694 m!109677))

(assert (=> b!99696 m!109033))

(assert (=> b!99696 m!109033))

(assert (=> b!99696 m!109041))

(assert (=> b!99690 m!109033))

(assert (=> b!99690 m!109033))

(declare-fun m!109679 () Bool)

(assert (=> b!99690 m!109679))

(assert (=> b!99689 m!109033))

(declare-fun m!109681 () Bool)

(assert (=> b!99689 m!109681))

(declare-fun m!109683 () Bool)

(assert (=> b!99689 m!109683))

(assert (=> b!99689 m!109123))

(assert (=> b!99689 m!109683))

(assert (=> b!99689 m!109123))

(declare-fun m!109685 () Bool)

(assert (=> b!99689 m!109685))

(assert (=> b!99689 m!109033))

(declare-fun m!109687 () Bool)

(assert (=> b!99684 m!109687))

(assert (=> b!99465 d!26779))

(declare-fun d!26781 () Bool)

(declare-fun lt!50311 () Bool)

(declare-fun content!105 (List!1568) (InoxSet tuple2!2308))

(assert (=> d!26781 (= lt!50311 (select (content!105 (toList!767 lt!50108)) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!64953 () Bool)

(assert (=> d!26781 (= lt!50311 e!64953)))

(declare-fun res!50065 () Bool)

(assert (=> d!26781 (=> (not res!50065) (not e!64953))))

(assert (=> d!26781 (= res!50065 ((_ is Cons!1564) (toList!767 lt!50108)))))

(assert (=> d!26781 (= (contains!795 (toList!767 lt!50108) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50311)))

(declare-fun b!99706 () Bool)

(declare-fun e!64952 () Bool)

(assert (=> b!99706 (= e!64953 e!64952)))

(declare-fun res!50064 () Bool)

(assert (=> b!99706 (=> res!50064 e!64952)))

(assert (=> b!99706 (= res!50064 (= (h!2159 (toList!767 lt!50108)) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99707 () Bool)

(assert (=> b!99707 (= e!64952 (contains!795 (t!5534 (toList!767 lt!50108)) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26781 res!50065) b!99706))

(assert (= (and b!99706 (not res!50064)) b!99707))

(declare-fun m!109689 () Bool)

(assert (=> d!26781 m!109689))

(declare-fun m!109691 () Bool)

(assert (=> d!26781 m!109691))

(declare-fun m!109693 () Bool)

(assert (=> b!99707 m!109693))

(assert (=> b!99502 d!26781))

(declare-fun d!26783 () Bool)

(declare-fun e!64955 () Bool)

(assert (=> d!26783 e!64955))

(declare-fun res!50066 () Bool)

(assert (=> d!26783 (=> res!50066 e!64955)))

(declare-fun lt!50314 () Bool)

(assert (=> d!26783 (= res!50066 (not lt!50314))))

(declare-fun lt!50313 () Bool)

(assert (=> d!26783 (= lt!50314 lt!50313)))

(declare-fun lt!50312 () Unit!2982)

(declare-fun e!64954 () Unit!2982)

(assert (=> d!26783 (= lt!50312 e!64954)))

(declare-fun c!17039 () Bool)

(assert (=> d!26783 (= c!17039 lt!50313)))

(assert (=> d!26783 (= lt!50313 (containsKey!155 (toList!767 lt!50172) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26783 (= (contains!792 lt!50172 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50314)))

(declare-fun b!99708 () Bool)

(declare-fun lt!50315 () Unit!2982)

(assert (=> b!99708 (= e!64954 lt!50315)))

(assert (=> b!99708 (= lt!50315 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50172) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99708 (isDefined!104 (getValueByKey!152 (toList!767 lt!50172) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99709 () Bool)

(declare-fun Unit!3007 () Unit!2982)

(assert (=> b!99709 (= e!64954 Unit!3007)))

(declare-fun b!99710 () Bool)

(assert (=> b!99710 (= e!64955 (isDefined!104 (getValueByKey!152 (toList!767 lt!50172) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26783 c!17039) b!99708))

(assert (= (and d!26783 (not c!17039)) b!99709))

(assert (= (and d!26783 (not res!50066)) b!99710))

(declare-fun m!109695 () Bool)

(assert (=> d!26783 m!109695))

(declare-fun m!109697 () Bool)

(assert (=> b!99708 m!109697))

(declare-fun m!109699 () Bool)

(assert (=> b!99708 m!109699))

(assert (=> b!99708 m!109699))

(declare-fun m!109701 () Bool)

(assert (=> b!99708 m!109701))

(assert (=> b!99710 m!109699))

(assert (=> b!99710 m!109699))

(assert (=> b!99710 m!109701))

(assert (=> bm!10227 d!26783))

(declare-fun d!26785 () Bool)

(declare-fun e!64957 () Bool)

(assert (=> d!26785 e!64957))

(declare-fun res!50067 () Bool)

(assert (=> d!26785 (=> res!50067 e!64957)))

(declare-fun lt!50318 () Bool)

(assert (=> d!26785 (= res!50067 (not lt!50318))))

(declare-fun lt!50317 () Bool)

(assert (=> d!26785 (= lt!50318 lt!50317)))

(declare-fun lt!50316 () Unit!2982)

(declare-fun e!64956 () Unit!2982)

(assert (=> d!26785 (= lt!50316 e!64956)))

(declare-fun c!17040 () Bool)

(assert (=> d!26785 (= c!17040 lt!50317)))

(assert (=> d!26785 (= lt!50317 (containsKey!155 (toList!767 lt!49996) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26785 (= (contains!792 lt!49996 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) lt!50318)))

(declare-fun b!99711 () Bool)

(declare-fun lt!50319 () Unit!2982)

(assert (=> b!99711 (= e!64956 lt!50319)))

(assert (=> b!99711 (= lt!50319 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49996) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99711 (isDefined!104 (getValueByKey!152 (toList!767 lt!49996) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99712 () Bool)

(declare-fun Unit!3008 () Unit!2982)

(assert (=> b!99712 (= e!64956 Unit!3008)))

(declare-fun b!99713 () Bool)

(assert (=> b!99713 (= e!64957 (isDefined!104 (getValueByKey!152 (toList!767 lt!49996) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26785 c!17040) b!99711))

(assert (= (and d!26785 (not c!17040)) b!99712))

(assert (= (and d!26785 (not res!50067)) b!99713))

(assert (=> d!26785 m!109033))

(declare-fun m!109703 () Bool)

(assert (=> d!26785 m!109703))

(assert (=> b!99711 m!109033))

(declare-fun m!109705 () Bool)

(assert (=> b!99711 m!109705))

(assert (=> b!99711 m!109033))

(declare-fun m!109707 () Bool)

(assert (=> b!99711 m!109707))

(assert (=> b!99711 m!109707))

(declare-fun m!109709 () Bool)

(assert (=> b!99711 m!109709))

(assert (=> b!99713 m!109033))

(assert (=> b!99713 m!109707))

(assert (=> b!99713 m!109707))

(assert (=> b!99713 m!109709))

(assert (=> b!99368 d!26785))

(assert (=> b!99476 d!26657))

(declare-fun b!99726 () Bool)

(declare-fun e!64965 () SeekEntryResult!248)

(assert (=> b!99726 (= e!64965 (MissingVacant!248 (index!3138 lt!49963)))))

(declare-fun b!99727 () Bool)

(declare-fun e!64964 () SeekEntryResult!248)

(assert (=> b!99727 (= e!64964 (Found!248 (index!3138 lt!49963)))))

(declare-fun b!99728 () Bool)

(declare-fun e!64966 () SeekEntryResult!248)

(assert (=> b!99728 (= e!64966 Undefined!248)))

(declare-fun d!26787 () Bool)

(declare-fun lt!50324 () SeekEntryResult!248)

(assert (=> d!26787 (and (or ((_ is Undefined!248) lt!50324) (not ((_ is Found!248) lt!50324)) (and (bvsge (index!3137 lt!50324) #b00000000000000000000000000000000) (bvslt (index!3137 lt!50324) (size!2263 (_keys!4195 newMap!16))))) (or ((_ is Undefined!248) lt!50324) ((_ is Found!248) lt!50324) (not ((_ is MissingVacant!248) lt!50324)) (not (= (index!3139 lt!50324) (index!3138 lt!49963))) (and (bvsge (index!3139 lt!50324) #b00000000000000000000000000000000) (bvslt (index!3139 lt!50324) (size!2263 (_keys!4195 newMap!16))))) (or ((_ is Undefined!248) lt!50324) (ite ((_ is Found!248) lt!50324) (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!50324)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (and ((_ is MissingVacant!248) lt!50324) (= (index!3139 lt!50324) (index!3138 lt!49963)) (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3139 lt!50324)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!26787 (= lt!50324 e!64966)))

(declare-fun c!17047 () Bool)

(assert (=> d!26787 (= c!17047 (bvsge (x!13098 lt!49963) #b01111111111111111111111111111110))))

(declare-fun lt!50325 () (_ BitVec 64))

(assert (=> d!26787 (= lt!50325 (select (arr!2012 (_keys!4195 newMap!16)) (index!3138 lt!49963)))))

(assert (=> d!26787 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26787 (= (seekKeyOrZeroReturnVacant!0 (x!13098 lt!49963) (index!3138 lt!49963) (index!3138 lt!49963) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)) lt!50324)))

(declare-fun b!99729 () Bool)

(declare-fun c!17049 () Bool)

(assert (=> b!99729 (= c!17049 (= lt!50325 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99729 (= e!64964 e!64965)))

(declare-fun b!99730 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!99730 (= e!64965 (seekKeyOrZeroReturnVacant!0 (bvadd (x!13098 lt!49963) #b00000000000000000000000000000001) (nextIndex!0 (index!3138 lt!49963) (bvadd (x!13098 lt!49963) #b00000000000000000000000000000001) (mask!6608 newMap!16)) (index!3138 lt!49963) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(declare-fun b!99731 () Bool)

(assert (=> b!99731 (= e!64966 e!64964)))

(declare-fun c!17048 () Bool)

(assert (=> b!99731 (= c!17048 (= lt!50325 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26787 c!17047) b!99728))

(assert (= (and d!26787 (not c!17047)) b!99731))

(assert (= (and b!99731 c!17048) b!99727))

(assert (= (and b!99731 (not c!17048)) b!99729))

(assert (= (and b!99729 c!17049) b!99726))

(assert (= (and b!99729 (not c!17049)) b!99730))

(declare-fun m!109711 () Bool)

(assert (=> d!26787 m!109711))

(declare-fun m!109713 () Bool)

(assert (=> d!26787 m!109713))

(assert (=> d!26787 m!109031))

(assert (=> d!26787 m!109025))

(declare-fun m!109715 () Bool)

(assert (=> b!99730 m!109715))

(assert (=> b!99730 m!109715))

(assert (=> b!99730 m!108735))

(declare-fun m!109717 () Bool)

(assert (=> b!99730 m!109717))

(assert (=> b!99325 d!26787))

(declare-fun d!26789 () Bool)

(declare-fun e!64967 () Bool)

(assert (=> d!26789 e!64967))

(declare-fun res!50069 () Bool)

(assert (=> d!26789 (=> (not res!50069) (not e!64967))))

(declare-fun lt!50328 () ListLongMap!1503)

(assert (=> d!26789 (= res!50069 (contains!792 lt!50328 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun lt!50327 () List!1568)

(assert (=> d!26789 (= lt!50328 (ListLongMap!1504 lt!50327))))

(declare-fun lt!50326 () Unit!2982)

(declare-fun lt!50329 () Unit!2982)

(assert (=> d!26789 (= lt!50326 lt!50329)))

(assert (=> d!26789 (= (getValueByKey!152 lt!50327 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!26789 (= lt!50329 (lemmaContainsTupThenGetReturnValue!68 lt!50327 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!26789 (= lt!50327 (insertStrictlySorted!71 (toList!767 call!10194) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!26789 (= (+!131 call!10194 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) lt!50328)))

(declare-fun b!99732 () Bool)

(declare-fun res!50068 () Bool)

(assert (=> b!99732 (=> (not res!50068) (not e!64967))))

(assert (=> b!99732 (= res!50068 (= (getValueByKey!152 (toList!767 lt!50328) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun b!99733 () Bool)

(assert (=> b!99733 (= e!64967 (contains!795 (toList!767 lt!50328) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(assert (= (and d!26789 res!50069) b!99732))

(assert (= (and b!99732 res!50068) b!99733))

(declare-fun m!109719 () Bool)

(assert (=> d!26789 m!109719))

(declare-fun m!109721 () Bool)

(assert (=> d!26789 m!109721))

(declare-fun m!109723 () Bool)

(assert (=> d!26789 m!109723))

(declare-fun m!109725 () Bool)

(assert (=> d!26789 m!109725))

(declare-fun m!109727 () Bool)

(assert (=> b!99732 m!109727))

(declare-fun m!109729 () Bool)

(assert (=> b!99733 m!109729))

(assert (=> b!99372 d!26789))

(declare-fun d!26791 () Bool)

(assert (=> d!26791 (= (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49834)) (v!2823 (getValueByKey!152 (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49834)))))

(assert (=> d!26693 d!26791))

(declare-fun b!99737 () Bool)

(declare-fun e!64969 () Option!158)

(assert (=> b!99737 (= e!64969 None!156)))

(declare-fun b!99735 () Bool)

(declare-fun e!64968 () Option!158)

(assert (=> b!99735 (= e!64968 e!64969)))

(declare-fun c!17051 () Bool)

(assert (=> b!99735 (= c!17051 (and ((_ is Cons!1564) (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) (not (= (_1!1165 (h!2159 (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49834))))))

(declare-fun b!99734 () Bool)

(assert (=> b!99734 (= e!64968 (Some!157 (_2!1165 (h!2159 (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))))

(declare-fun d!26793 () Bool)

(declare-fun c!17050 () Bool)

(assert (=> d!26793 (= c!17050 (and ((_ is Cons!1564) (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) (= (_1!1165 (h!2159 (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49834)))))

(assert (=> d!26793 (= (getValueByKey!152 (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49834) e!64968)))

(declare-fun b!99736 () Bool)

(assert (=> b!99736 (= e!64969 (getValueByKey!152 (t!5534 (toList!767 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) lt!49834))))

(assert (= (and d!26793 c!17050) b!99734))

(assert (= (and d!26793 (not c!17050)) b!99735))

(assert (= (and b!99735 c!17051) b!99736))

(assert (= (and b!99735 (not c!17051)) b!99737))

(declare-fun m!109731 () Bool)

(assert (=> b!99736 m!109731))

(assert (=> d!26693 d!26793))

(declare-fun d!26795 () Bool)

(assert (=> d!26795 (= (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!366 (getValueByKey!152 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4115 () Bool)

(assert (= bs!4115 d!26795))

(assert (=> bs!4115 m!109297))

(declare-fun m!109733 () Bool)

(assert (=> bs!4115 m!109733))

(assert (=> b!99471 d!26795))

(declare-fun b!99741 () Bool)

(declare-fun e!64971 () Option!158)

(assert (=> b!99741 (= e!64971 None!156)))

(declare-fun b!99739 () Bool)

(declare-fun e!64970 () Option!158)

(assert (=> b!99739 (= e!64970 e!64971)))

(declare-fun c!17053 () Bool)

(assert (=> b!99739 (= c!17053 (and ((_ is Cons!1564) (toList!767 lt!49838)) (not (= (_1!1165 (h!2159 (toList!767 lt!49838))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!99738 () Bool)

(assert (=> b!99738 (= e!64970 (Some!157 (_2!1165 (h!2159 (toList!767 lt!49838)))))))

(declare-fun d!26797 () Bool)

(declare-fun c!17052 () Bool)

(assert (=> d!26797 (= c!17052 (and ((_ is Cons!1564) (toList!767 lt!49838)) (= (_1!1165 (h!2159 (toList!767 lt!49838))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26797 (= (getValueByKey!152 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000) e!64970)))

(declare-fun b!99740 () Bool)

(assert (=> b!99740 (= e!64971 (getValueByKey!152 (t!5534 (toList!767 lt!49838)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26797 c!17052) b!99738))

(assert (= (and d!26797 (not c!17052)) b!99739))

(assert (= (and b!99739 c!17053) b!99740))

(assert (= (and b!99739 (not c!17053)) b!99741))

(declare-fun m!109735 () Bool)

(assert (=> b!99740 m!109735))

(assert (=> b!99471 d!26797))

(declare-fun d!26799 () Bool)

(assert (=> d!26799 (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!50330 () Unit!2982)

(assert (=> d!26799 (= lt!50330 (choose!615 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64972 () Bool)

(assert (=> d!26799 e!64972))

(declare-fun res!50070 () Bool)

(assert (=> d!26799 (=> (not res!50070) (not e!64972))))

(assert (=> d!26799 (= res!50070 (isStrictlySorted!292 (toList!767 lt!49838)))))

(assert (=> d!26799 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000) lt!50330)))

(declare-fun b!99742 () Bool)

(assert (=> b!99742 (= e!64972 (containsKey!155 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26799 res!50070) b!99742))

(assert (=> d!26799 m!109169))

(assert (=> d!26799 m!109169))

(assert (=> d!26799 m!109331))

(declare-fun m!109737 () Bool)

(assert (=> d!26799 m!109737))

(declare-fun m!109739 () Bool)

(assert (=> d!26799 m!109739))

(assert (=> b!99742 m!109327))

(assert (=> b!99498 d!26799))

(declare-fun d!26801 () Bool)

(assert (=> d!26801 (= (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!366 (getValueByKey!152 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4116 () Bool)

(assert (= bs!4116 d!26801))

(assert (=> bs!4116 m!109169))

(declare-fun m!109741 () Bool)

(assert (=> bs!4116 m!109741))

(assert (=> b!99498 d!26801))

(declare-fun b!99746 () Bool)

(declare-fun e!64974 () Option!158)

(assert (=> b!99746 (= e!64974 None!156)))

(declare-fun b!99744 () Bool)

(declare-fun e!64973 () Option!158)

(assert (=> b!99744 (= e!64973 e!64974)))

(declare-fun c!17055 () Bool)

(assert (=> b!99744 (= c!17055 (and ((_ is Cons!1564) (toList!767 lt!49838)) (not (= (_1!1165 (h!2159 (toList!767 lt!49838))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!99743 () Bool)

(assert (=> b!99743 (= e!64973 (Some!157 (_2!1165 (h!2159 (toList!767 lt!49838)))))))

(declare-fun d!26803 () Bool)

(declare-fun c!17054 () Bool)

(assert (=> d!26803 (= c!17054 (and ((_ is Cons!1564) (toList!767 lt!49838)) (= (_1!1165 (h!2159 (toList!767 lt!49838))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26803 (= (getValueByKey!152 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000) e!64973)))

(declare-fun b!99745 () Bool)

(assert (=> b!99745 (= e!64974 (getValueByKey!152 (t!5534 (toList!767 lt!49838)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26803 c!17054) b!99743))

(assert (= (and d!26803 (not c!17054)) b!99744))

(assert (= (and b!99744 c!17055) b!99745))

(assert (= (and b!99744 (not c!17055)) b!99746))

(declare-fun m!109743 () Bool)

(assert (=> b!99745 m!109743))

(assert (=> b!99498 d!26803))

(declare-fun d!26805 () Bool)

(declare-fun e!64975 () Bool)

(assert (=> d!26805 e!64975))

(declare-fun res!50072 () Bool)

(assert (=> d!26805 (=> (not res!50072) (not e!64975))))

(declare-fun lt!50333 () ListLongMap!1503)

(assert (=> d!26805 (= res!50072 (contains!792 lt!50333 (_1!1165 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50332 () List!1568)

(assert (=> d!26805 (= lt!50333 (ListLongMap!1504 lt!50332))))

(declare-fun lt!50331 () Unit!2982)

(declare-fun lt!50334 () Unit!2982)

(assert (=> d!26805 (= lt!50331 lt!50334)))

(assert (=> d!26805 (= (getValueByKey!152 lt!50332 (_1!1165 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26805 (= lt!50334 (lemmaContainsTupThenGetReturnValue!68 lt!50332 (_1!1165 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26805 (= lt!50332 (insertStrictlySorted!71 (toList!767 lt!50156) (_1!1165 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26805 (= (+!131 lt!50156 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16))) lt!50333)))

(declare-fun b!99747 () Bool)

(declare-fun res!50071 () Bool)

(assert (=> b!99747 (=> (not res!50071) (not e!64975))))

(assert (=> b!99747 (= res!50071 (= (getValueByKey!152 (toList!767 lt!50333) (_1!1165 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16))))))))

(declare-fun b!99748 () Bool)

(assert (=> b!99748 (= e!64975 (contains!795 (toList!767 lt!50333) (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16))))))

(assert (= (and d!26805 res!50072) b!99747))

(assert (= (and b!99747 res!50071) b!99748))

(declare-fun m!109745 () Bool)

(assert (=> d!26805 m!109745))

(declare-fun m!109747 () Bool)

(assert (=> d!26805 m!109747))

(declare-fun m!109749 () Bool)

(assert (=> d!26805 m!109749))

(declare-fun m!109751 () Bool)

(assert (=> d!26805 m!109751))

(declare-fun m!109753 () Bool)

(assert (=> b!99747 m!109753))

(declare-fun m!109755 () Bool)

(assert (=> b!99748 m!109755))

(assert (=> b!99565 d!26805))

(declare-fun d!26807 () Bool)

(assert (=> d!26807 (= (apply!93 (+!131 lt!50145 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50148) (apply!93 lt!50145 lt!50148))))

(declare-fun lt!50335 () Unit!2982)

(assert (=> d!26807 (= lt!50335 (choose!610 lt!50145 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50148))))

(declare-fun e!64976 () Bool)

(assert (=> d!26807 e!64976))

(declare-fun res!50073 () Bool)

(assert (=> d!26807 (=> (not res!50073) (not e!64976))))

(assert (=> d!26807 (= res!50073 (contains!792 lt!50145 lt!50148))))

(assert (=> d!26807 (= (addApplyDifferent!69 lt!50145 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50148) lt!50335)))

(declare-fun b!99749 () Bool)

(assert (=> b!99749 (= e!64976 (not (= lt!50148 lt!50151)))))

(assert (= (and d!26807 res!50073) b!99749))

(assert (=> d!26807 m!109455))

(assert (=> d!26807 m!109465))

(declare-fun m!109757 () Bool)

(assert (=> d!26807 m!109757))

(declare-fun m!109759 () Bool)

(assert (=> d!26807 m!109759))

(assert (=> d!26807 m!109455))

(assert (=> d!26807 m!109469))

(assert (=> b!99565 d!26807))

(declare-fun d!26809 () Bool)

(assert (=> d!26809 (= (apply!93 (+!131 lt!50162 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16))) lt!50153) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50162 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16)))) lt!50153)))))

(declare-fun bs!4117 () Bool)

(assert (= bs!4117 d!26809))

(declare-fun m!109761 () Bool)

(assert (=> bs!4117 m!109761))

(assert (=> bs!4117 m!109761))

(declare-fun m!109763 () Bool)

(assert (=> bs!4117 m!109763))

(assert (=> b!99565 d!26809))

(declare-fun d!26811 () Bool)

(assert (=> d!26811 (= (apply!93 (+!131 lt!50161 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50146) (apply!93 lt!50161 lt!50146))))

(declare-fun lt!50336 () Unit!2982)

(assert (=> d!26811 (= lt!50336 (choose!610 lt!50161 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50146))))

(declare-fun e!64977 () Bool)

(assert (=> d!26811 e!64977))

(declare-fun res!50074 () Bool)

(assert (=> d!26811 (=> (not res!50074) (not e!64977))))

(assert (=> d!26811 (= res!50074 (contains!792 lt!50161 lt!50146))))

(assert (=> d!26811 (= (addApplyDifferent!69 lt!50161 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) lt!50146) lt!50336)))

(declare-fun b!99750 () Bool)

(assert (=> b!99750 (= e!64977 (not (= lt!50146 lt!50164)))))

(assert (= (and d!26811 res!50074) b!99750))

(assert (=> d!26811 m!109451))

(assert (=> d!26811 m!109457))

(declare-fun m!109765 () Bool)

(assert (=> d!26811 m!109765))

(declare-fun m!109767 () Bool)

(assert (=> d!26811 m!109767))

(assert (=> d!26811 m!109451))

(assert (=> d!26811 m!109453))

(assert (=> b!99565 d!26811))

(declare-fun b!99751 () Bool)

(declare-fun e!64980 () Bool)

(assert (=> b!99751 (= e!64980 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99751 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun lt!50340 () ListLongMap!1503)

(declare-fun e!64982 () Bool)

(declare-fun b!99752 () Bool)

(assert (=> b!99752 (= e!64982 (= lt!50340 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16))))))

(declare-fun b!99753 () Bool)

(declare-fun e!64984 () ListLongMap!1503)

(assert (=> b!99753 (= e!64984 (ListLongMap!1504 Nil!1565))))

(declare-fun b!99754 () Bool)

(assert (=> b!99754 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> b!99754 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_values!2484 newMap!16))))))

(declare-fun e!64979 () Bool)

(assert (=> b!99754 (= e!64979 (= (apply!93 lt!50340 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun call!10253 () ListLongMap!1503)

(declare-fun bm!10250 () Bool)

(assert (=> bm!10250 (= call!10253 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16)))))

(declare-fun d!26813 () Bool)

(declare-fun e!64978 () Bool)

(assert (=> d!26813 e!64978))

(declare-fun res!50076 () Bool)

(assert (=> d!26813 (=> (not res!50076) (not e!64978))))

(assert (=> d!26813 (= res!50076 (not (contains!792 lt!50340 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26813 (= lt!50340 e!64984)))

(declare-fun c!17056 () Bool)

(assert (=> d!26813 (= c!17056 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26813 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26813 (= (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (ite c!16932 (ite c!16926 (extraKeys!2318 newMap!16) lt!49923) (extraKeys!2318 newMap!16)) (zeroValue!2382 newMap!16) (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50340)))

(declare-fun b!99755 () Bool)

(declare-fun e!64983 () ListLongMap!1503)

(assert (=> b!99755 (= e!64984 e!64983)))

(declare-fun c!17059 () Bool)

(assert (=> b!99755 (= c!17059 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99756 () Bool)

(declare-fun e!64981 () Bool)

(assert (=> b!99756 (= e!64981 e!64982)))

(declare-fun c!17057 () Bool)

(assert (=> b!99756 (= c!17057 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99757 () Bool)

(declare-fun res!50077 () Bool)

(assert (=> b!99757 (=> (not res!50077) (not e!64978))))

(assert (=> b!99757 (= res!50077 (not (contains!792 lt!50340 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99758 () Bool)

(declare-fun lt!50341 () Unit!2982)

(declare-fun lt!50338 () Unit!2982)

(assert (=> b!99758 (= lt!50341 lt!50338)))

(declare-fun lt!50342 () ListLongMap!1503)

(declare-fun lt!50339 () (_ BitVec 64))

(declare-fun lt!50343 () (_ BitVec 64))

(declare-fun lt!50337 () V!3161)

(assert (=> b!99758 (not (contains!792 (+!131 lt!50342 (tuple2!2309 lt!50343 lt!50337)) lt!50339))))

(assert (=> b!99758 (= lt!50338 (addStillNotContains!43 lt!50342 lt!50343 lt!50337 lt!50339))))

(assert (=> b!99758 (= lt!50339 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99758 (= lt!50337 (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99758 (= lt!50343 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99758 (= lt!50342 call!10253)))

(assert (=> b!99758 (= e!64983 (+!131 call!10253 (tuple2!2309 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99759 () Bool)

(assert (=> b!99759 (= e!64981 e!64979)))

(assert (=> b!99759 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun res!50075 () Bool)

(assert (=> b!99759 (= res!50075 (contains!792 lt!50340 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99759 (=> (not res!50075) (not e!64979))))

(declare-fun b!99760 () Bool)

(assert (=> b!99760 (= e!64978 e!64981)))

(declare-fun c!17058 () Bool)

(assert (=> b!99760 (= c!17058 e!64980)))

(declare-fun res!50078 () Bool)

(assert (=> b!99760 (=> (not res!50078) (not e!64980))))

(assert (=> b!99760 (= res!50078 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99761 () Bool)

(assert (=> b!99761 (= e!64983 call!10253)))

(declare-fun b!99762 () Bool)

(assert (=> b!99762 (= e!64982 (isEmpty!365 lt!50340))))

(assert (= (and d!26813 c!17056) b!99753))

(assert (= (and d!26813 (not c!17056)) b!99755))

(assert (= (and b!99755 c!17059) b!99758))

(assert (= (and b!99755 (not c!17059)) b!99761))

(assert (= (or b!99758 b!99761) bm!10250))

(assert (= (and d!26813 res!50076) b!99757))

(assert (= (and b!99757 res!50077) b!99760))

(assert (= (and b!99760 res!50078) b!99751))

(assert (= (and b!99760 c!17058) b!99759))

(assert (= (and b!99760 (not c!17058)) b!99756))

(assert (= (and b!99759 res!50075) b!99754))

(assert (= (and b!99756 c!17057) b!99752))

(assert (= (and b!99756 (not c!17057)) b!99762))

(declare-fun b_lambda!4453 () Bool)

(assert (=> (not b_lambda!4453) (not b!99754)))

(assert (=> b!99754 t!5546))

(declare-fun b_and!6129 () Bool)

(assert (= b_and!6125 (and (=> t!5546 result!3299) b_and!6129)))

(assert (=> b!99754 t!5548))

(declare-fun b_and!6131 () Bool)

(assert (= b_and!6127 (and (=> t!5548 result!3301) b_and!6131)))

(declare-fun b_lambda!4455 () Bool)

(assert (=> (not b_lambda!4455) (not b!99758)))

(assert (=> b!99758 t!5546))

(declare-fun b_and!6133 () Bool)

(assert (= b_and!6129 (and (=> t!5546 result!3299) b_and!6133)))

(assert (=> b!99758 t!5548))

(declare-fun b_and!6135 () Bool)

(assert (= b_and!6131 (and (=> t!5548 result!3301) b_and!6135)))

(declare-fun m!109769 () Bool)

(assert (=> bm!10250 m!109769))

(declare-fun m!109771 () Bool)

(assert (=> b!99762 m!109771))

(declare-fun m!109773 () Bool)

(assert (=> b!99757 m!109773))

(assert (=> b!99755 m!109033))

(assert (=> b!99755 m!109033))

(assert (=> b!99755 m!109041))

(assert (=> b!99758 m!109121))

(declare-fun m!109775 () Bool)

(assert (=> b!99758 m!109775))

(declare-fun m!109777 () Bool)

(assert (=> b!99758 m!109777))

(declare-fun m!109779 () Bool)

(assert (=> b!99758 m!109779))

(assert (=> b!99758 m!109775))

(assert (=> b!99758 m!109123))

(assert (=> b!99758 m!109033))

(assert (=> b!99758 m!109121))

(assert (=> b!99758 m!109123))

(assert (=> b!99758 m!109125))

(declare-fun m!109781 () Bool)

(assert (=> b!99758 m!109781))

(assert (=> b!99751 m!109033))

(assert (=> b!99751 m!109033))

(assert (=> b!99751 m!109041))

(assert (=> b!99759 m!109033))

(assert (=> b!99759 m!109033))

(declare-fun m!109783 () Bool)

(assert (=> b!99759 m!109783))

(declare-fun m!109785 () Bool)

(assert (=> d!26813 m!109785))

(assert (=> d!26813 m!109025))

(assert (=> b!99752 m!109769))

(assert (=> b!99754 m!109121))

(assert (=> b!99754 m!109033))

(declare-fun m!109787 () Bool)

(assert (=> b!99754 m!109787))

(assert (=> b!99754 m!109123))

(assert (=> b!99754 m!109033))

(assert (=> b!99754 m!109121))

(assert (=> b!99754 m!109123))

(assert (=> b!99754 m!109125))

(assert (=> b!99565 d!26813))

(declare-fun d!26815 () Bool)

(assert (=> d!26815 (= (apply!93 lt!50145 lt!50148) (get!1299 (getValueByKey!152 (toList!767 lt!50145) lt!50148)))))

(declare-fun bs!4118 () Bool)

(assert (= bs!4118 d!26815))

(declare-fun m!109789 () Bool)

(assert (=> bs!4118 m!109789))

(assert (=> bs!4118 m!109789))

(declare-fun m!109791 () Bool)

(assert (=> bs!4118 m!109791))

(assert (=> b!99565 d!26815))

(declare-fun d!26817 () Bool)

(declare-fun e!64986 () Bool)

(assert (=> d!26817 e!64986))

(declare-fun res!50079 () Bool)

(assert (=> d!26817 (=> res!50079 e!64986)))

(declare-fun lt!50346 () Bool)

(assert (=> d!26817 (= res!50079 (not lt!50346))))

(declare-fun lt!50345 () Bool)

(assert (=> d!26817 (= lt!50346 lt!50345)))

(declare-fun lt!50344 () Unit!2982)

(declare-fun e!64985 () Unit!2982)

(assert (=> d!26817 (= lt!50344 e!64985)))

(declare-fun c!17060 () Bool)

(assert (=> d!26817 (= c!17060 lt!50345)))

(assert (=> d!26817 (= lt!50345 (containsKey!155 (toList!767 (+!131 lt!50156 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))) lt!50165))))

(assert (=> d!26817 (= (contains!792 (+!131 lt!50156 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16))) lt!50165) lt!50346)))

(declare-fun b!99763 () Bool)

(declare-fun lt!50347 () Unit!2982)

(assert (=> b!99763 (= e!64985 lt!50347)))

(assert (=> b!99763 (= lt!50347 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (+!131 lt!50156 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))) lt!50165))))

(assert (=> b!99763 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50156 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))) lt!50165))))

(declare-fun b!99764 () Bool)

(declare-fun Unit!3009 () Unit!2982)

(assert (=> b!99764 (= e!64985 Unit!3009)))

(declare-fun b!99765 () Bool)

(assert (=> b!99765 (= e!64986 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50156 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16)))) lt!50165)))))

(assert (= (and d!26817 c!17060) b!99763))

(assert (= (and d!26817 (not c!17060)) b!99764))

(assert (= (and d!26817 (not res!50079)) b!99765))

(declare-fun m!109793 () Bool)

(assert (=> d!26817 m!109793))

(declare-fun m!109795 () Bool)

(assert (=> b!99763 m!109795))

(declare-fun m!109797 () Bool)

(assert (=> b!99763 m!109797))

(assert (=> b!99763 m!109797))

(declare-fun m!109799 () Bool)

(assert (=> b!99763 m!109799))

(assert (=> b!99765 m!109797))

(assert (=> b!99765 m!109797))

(assert (=> b!99765 m!109799))

(assert (=> b!99565 d!26817))

(declare-fun d!26819 () Bool)

(assert (=> d!26819 (= (apply!93 lt!50162 lt!50153) (get!1299 (getValueByKey!152 (toList!767 lt!50162) lt!50153)))))

(declare-fun bs!4119 () Bool)

(assert (= bs!4119 d!26819))

(declare-fun m!109801 () Bool)

(assert (=> bs!4119 m!109801))

(assert (=> bs!4119 m!109801))

(declare-fun m!109803 () Bool)

(assert (=> bs!4119 m!109803))

(assert (=> b!99565 d!26819))

(declare-fun d!26821 () Bool)

(assert (=> d!26821 (= (apply!93 (+!131 lt!50162 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16))) lt!50153) (apply!93 lt!50162 lt!50153))))

(declare-fun lt!50348 () Unit!2982)

(assert (=> d!26821 (= lt!50348 (choose!610 lt!50162 lt!50166 (zeroValue!2382 newMap!16) lt!50153))))

(declare-fun e!64987 () Bool)

(assert (=> d!26821 e!64987))

(declare-fun res!50080 () Bool)

(assert (=> d!26821 (=> (not res!50080) (not e!64987))))

(assert (=> d!26821 (= res!50080 (contains!792 lt!50162 lt!50153))))

(assert (=> d!26821 (= (addApplyDifferent!69 lt!50162 lt!50166 (zeroValue!2382 newMap!16) lt!50153) lt!50348)))

(declare-fun b!99766 () Bool)

(assert (=> b!99766 (= e!64987 (not (= lt!50153 lt!50166)))))

(assert (= (and d!26821 res!50080) b!99766))

(assert (=> d!26821 m!109447))

(assert (=> d!26821 m!109449))

(declare-fun m!109805 () Bool)

(assert (=> d!26821 m!109805))

(declare-fun m!109807 () Bool)

(assert (=> d!26821 m!109807))

(assert (=> d!26821 m!109447))

(assert (=> d!26821 m!109467))

(assert (=> b!99565 d!26821))

(declare-fun d!26823 () Bool)

(assert (=> d!26823 (= (apply!93 (+!131 lt!50161 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50146) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50161 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) lt!50146)))))

(declare-fun bs!4120 () Bool)

(assert (= bs!4120 d!26823))

(declare-fun m!109809 () Bool)

(assert (=> bs!4120 m!109809))

(assert (=> bs!4120 m!109809))

(declare-fun m!109811 () Bool)

(assert (=> bs!4120 m!109811))

(assert (=> b!99565 d!26823))

(declare-fun d!26825 () Bool)

(assert (=> d!26825 (= (apply!93 lt!50161 lt!50146) (get!1299 (getValueByKey!152 (toList!767 lt!50161) lt!50146)))))

(declare-fun bs!4121 () Bool)

(assert (= bs!4121 d!26825))

(declare-fun m!109813 () Bool)

(assert (=> bs!4121 m!109813))

(assert (=> bs!4121 m!109813))

(declare-fun m!109815 () Bool)

(assert (=> bs!4121 m!109815))

(assert (=> b!99565 d!26825))

(declare-fun d!26827 () Bool)

(declare-fun e!64988 () Bool)

(assert (=> d!26827 e!64988))

(declare-fun res!50082 () Bool)

(assert (=> d!26827 (=> (not res!50082) (not e!64988))))

(declare-fun lt!50351 () ListLongMap!1503)

(assert (=> d!26827 (= res!50082 (contains!792 lt!50351 (_1!1165 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(declare-fun lt!50350 () List!1568)

(assert (=> d!26827 (= lt!50351 (ListLongMap!1504 lt!50350))))

(declare-fun lt!50349 () Unit!2982)

(declare-fun lt!50352 () Unit!2982)

(assert (=> d!26827 (= lt!50349 lt!50352)))

(assert (=> d!26827 (= (getValueByKey!152 lt!50350 (_1!1165 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26827 (= lt!50352 (lemmaContainsTupThenGetReturnValue!68 lt!50350 (_1!1165 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26827 (= lt!50350 (insertStrictlySorted!71 (toList!767 lt!50161) (_1!1165 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26827 (= (+!131 lt!50161 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50351)))

(declare-fun b!99767 () Bool)

(declare-fun res!50081 () Bool)

(assert (=> b!99767 (=> (not res!50081) (not e!64988))))

(assert (=> b!99767 (= res!50081 (= (getValueByKey!152 (toList!767 lt!50351) (_1!1165 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(declare-fun b!99768 () Bool)

(assert (=> b!99768 (= e!64988 (contains!795 (toList!767 lt!50351) (tuple2!2309 lt!50164 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))

(assert (= (and d!26827 res!50082) b!99767))

(assert (= (and b!99767 res!50081) b!99768))

(declare-fun m!109817 () Bool)

(assert (=> d!26827 m!109817))

(declare-fun m!109819 () Bool)

(assert (=> d!26827 m!109819))

(declare-fun m!109821 () Bool)

(assert (=> d!26827 m!109821))

(declare-fun m!109823 () Bool)

(assert (=> d!26827 m!109823))

(declare-fun m!109825 () Bool)

(assert (=> b!99767 m!109825))

(declare-fun m!109827 () Bool)

(assert (=> b!99768 m!109827))

(assert (=> b!99565 d!26827))

(declare-fun d!26829 () Bool)

(assert (=> d!26829 (contains!792 (+!131 lt!50156 (tuple2!2309 lt!50159 (zeroValue!2382 newMap!16))) lt!50165)))

(declare-fun lt!50353 () Unit!2982)

(assert (=> d!26829 (= lt!50353 (choose!611 lt!50156 lt!50159 (zeroValue!2382 newMap!16) lt!50165))))

(assert (=> d!26829 (contains!792 lt!50156 lt!50165)))

(assert (=> d!26829 (= (addStillContains!69 lt!50156 lt!50159 (zeroValue!2382 newMap!16) lt!50165) lt!50353)))

(declare-fun bs!4122 () Bool)

(assert (= bs!4122 d!26829))

(assert (=> bs!4122 m!109445))

(assert (=> bs!4122 m!109445))

(assert (=> bs!4122 m!109461))

(declare-fun m!109829 () Bool)

(assert (=> bs!4122 m!109829))

(declare-fun m!109831 () Bool)

(assert (=> bs!4122 m!109831))

(assert (=> b!99565 d!26829))

(declare-fun d!26831 () Bool)

(declare-fun e!64989 () Bool)

(assert (=> d!26831 e!64989))

(declare-fun res!50084 () Bool)

(assert (=> d!26831 (=> (not res!50084) (not e!64989))))

(declare-fun lt!50356 () ListLongMap!1503)

(assert (=> d!26831 (= res!50084 (contains!792 lt!50356 (_1!1165 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50355 () List!1568)

(assert (=> d!26831 (= lt!50356 (ListLongMap!1504 lt!50355))))

(declare-fun lt!50354 () Unit!2982)

(declare-fun lt!50357 () Unit!2982)

(assert (=> d!26831 (= lt!50354 lt!50357)))

(assert (=> d!26831 (= (getValueByKey!152 lt!50355 (_1!1165 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26831 (= lt!50357 (lemmaContainsTupThenGetReturnValue!68 lt!50355 (_1!1165 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26831 (= lt!50355 (insertStrictlySorted!71 (toList!767 lt!50162) (_1!1165 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16)))))))

(assert (=> d!26831 (= (+!131 lt!50162 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16))) lt!50356)))

(declare-fun b!99769 () Bool)

(declare-fun res!50083 () Bool)

(assert (=> b!99769 (=> (not res!50083) (not e!64989))))

(assert (=> b!99769 (= res!50083 (= (getValueByKey!152 (toList!767 lt!50356) (_1!1165 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16))))))))

(declare-fun b!99770 () Bool)

(assert (=> b!99770 (= e!64989 (contains!795 (toList!767 lt!50356) (tuple2!2309 lt!50166 (zeroValue!2382 newMap!16))))))

(assert (= (and d!26831 res!50084) b!99769))

(assert (= (and b!99769 res!50083) b!99770))

(declare-fun m!109833 () Bool)

(assert (=> d!26831 m!109833))

(declare-fun m!109835 () Bool)

(assert (=> d!26831 m!109835))

(declare-fun m!109837 () Bool)

(assert (=> d!26831 m!109837))

(declare-fun m!109839 () Bool)

(assert (=> d!26831 m!109839))

(declare-fun m!109841 () Bool)

(assert (=> b!99769 m!109841))

(declare-fun m!109843 () Bool)

(assert (=> b!99770 m!109843))

(assert (=> b!99565 d!26831))

(declare-fun d!26833 () Bool)

(assert (=> d!26833 (= (apply!93 (+!131 lt!50145 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50148) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50145 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) lt!50148)))))

(declare-fun bs!4123 () Bool)

(assert (= bs!4123 d!26833))

(declare-fun m!109845 () Bool)

(assert (=> bs!4123 m!109845))

(assert (=> bs!4123 m!109845))

(declare-fun m!109847 () Bool)

(assert (=> bs!4123 m!109847))

(assert (=> b!99565 d!26833))

(declare-fun d!26835 () Bool)

(declare-fun e!64990 () Bool)

(assert (=> d!26835 e!64990))

(declare-fun res!50086 () Bool)

(assert (=> d!26835 (=> (not res!50086) (not e!64990))))

(declare-fun lt!50360 () ListLongMap!1503)

(assert (=> d!26835 (= res!50086 (contains!792 lt!50360 (_1!1165 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(declare-fun lt!50359 () List!1568)

(assert (=> d!26835 (= lt!50360 (ListLongMap!1504 lt!50359))))

(declare-fun lt!50358 () Unit!2982)

(declare-fun lt!50361 () Unit!2982)

(assert (=> d!26835 (= lt!50358 lt!50361)))

(assert (=> d!26835 (= (getValueByKey!152 lt!50359 (_1!1165 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26835 (= lt!50361 (lemmaContainsTupThenGetReturnValue!68 lt!50359 (_1!1165 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26835 (= lt!50359 (insertStrictlySorted!71 (toList!767 lt!50145) (_1!1165 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!26835 (= (+!131 lt!50145 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50360)))

(declare-fun b!99771 () Bool)

(declare-fun res!50085 () Bool)

(assert (=> b!99771 (=> (not res!50085) (not e!64990))))

(assert (=> b!99771 (= res!50085 (= (getValueByKey!152 (toList!767 lt!50360) (_1!1165 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(declare-fun b!99772 () Bool)

(assert (=> b!99772 (= e!64990 (contains!795 (toList!767 lt!50360) (tuple2!2309 lt!50151 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))

(assert (= (and d!26835 res!50086) b!99771))

(assert (= (and b!99771 res!50085) b!99772))

(declare-fun m!109849 () Bool)

(assert (=> d!26835 m!109849))

(declare-fun m!109851 () Bool)

(assert (=> d!26835 m!109851))

(declare-fun m!109853 () Bool)

(assert (=> d!26835 m!109853))

(declare-fun m!109855 () Bool)

(assert (=> d!26835 m!109855))

(declare-fun m!109857 () Bool)

(assert (=> b!99771 m!109857))

(declare-fun m!109859 () Bool)

(assert (=> b!99772 m!109859))

(assert (=> b!99565 d!26835))

(declare-fun d!26837 () Bool)

(assert (=> d!26837 (= (content!104 Nil!1566) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!26725 d!26837))

(declare-fun d!26839 () Bool)

(assert (=> d!26839 (= (apply!93 lt!50172 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!50172) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4124 () Bool)

(assert (= bs!4124 d!26839))

(declare-fun m!109861 () Bool)

(assert (=> bs!4124 m!109861))

(assert (=> bs!4124 m!109861))

(declare-fun m!109863 () Bool)

(assert (=> bs!4124 m!109863))

(assert (=> b!99611 d!26839))

(declare-fun d!26841 () Bool)

(declare-fun res!50087 () Bool)

(declare-fun e!64991 () Bool)

(assert (=> d!26841 (=> res!50087 e!64991)))

(assert (=> d!26841 (= res!50087 (and ((_ is Cons!1564) (toList!767 e!64680)) (= (_1!1165 (h!2159 (toList!767 e!64680))) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))))))

(assert (=> d!26841 (= (containsKey!155 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))) e!64991)))

(declare-fun b!99773 () Bool)

(declare-fun e!64992 () Bool)

(assert (=> b!99773 (= e!64991 e!64992)))

(declare-fun res!50088 () Bool)

(assert (=> b!99773 (=> (not res!50088) (not e!64992))))

(assert (=> b!99773 (= res!50088 (and (or (not ((_ is Cons!1564) (toList!767 e!64680))) (bvsle (_1!1165 (h!2159 (toList!767 e!64680))) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))) ((_ is Cons!1564) (toList!767 e!64680)) (bvslt (_1!1165 (h!2159 (toList!767 e!64680))) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))))))

(declare-fun b!99774 () Bool)

(assert (=> b!99774 (= e!64992 (containsKey!155 (t!5534 (toList!767 e!64680)) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(assert (= (and d!26841 (not res!50087)) b!99773))

(assert (= (and b!99773 res!50088) b!99774))

(declare-fun m!109865 () Bool)

(assert (=> b!99774 m!109865))

(assert (=> d!26723 d!26841))

(declare-fun e!65007 () SeekEntryResult!248)

(declare-fun b!99793 () Bool)

(assert (=> b!99793 (= e!65007 (Intermediate!248 true (toIndex!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (mask!6608 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!99794 () Bool)

(declare-fun e!65005 () Bool)

(declare-fun e!65004 () Bool)

(assert (=> b!99794 (= e!65005 e!65004)))

(declare-fun res!50095 () Bool)

(declare-fun lt!50366 () SeekEntryResult!248)

(assert (=> b!99794 (= res!50095 (and ((_ is Intermediate!248) lt!50366) (not (undefined!1060 lt!50366)) (bvslt (x!13098 lt!50366) #b01111111111111111111111111111110) (bvsge (x!13098 lt!50366) #b00000000000000000000000000000000) (bvsge (x!13098 lt!50366) #b00000000000000000000000000000000)))))

(assert (=> b!99794 (=> (not res!50095) (not e!65004))))

(declare-fun b!99795 () Bool)

(declare-fun e!65003 () SeekEntryResult!248)

(assert (=> b!99795 (= e!65003 (Intermediate!248 false (toIndex!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (mask!6608 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!99796 () Bool)

(assert (=> b!99796 (= e!65005 (bvsge (x!13098 lt!50366) #b01111111111111111111111111111110))))

(declare-fun b!99797 () Bool)

(assert (=> b!99797 (and (bvsge (index!3138 lt!50366) #b00000000000000000000000000000000) (bvslt (index!3138 lt!50366) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun res!50097 () Bool)

(assert (=> b!99797 (= res!50097 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3138 lt!50366)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun e!65006 () Bool)

(assert (=> b!99797 (=> res!50097 e!65006)))

(assert (=> b!99797 (= e!65004 e!65006)))

(declare-fun d!26843 () Bool)

(assert (=> d!26843 e!65005))

(declare-fun c!17068 () Bool)

(assert (=> d!26843 (= c!17068 (and ((_ is Intermediate!248) lt!50366) (undefined!1060 lt!50366)))))

(assert (=> d!26843 (= lt!50366 e!65007)))

(declare-fun c!17069 () Bool)

(assert (=> d!26843 (= c!17069 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!50367 () (_ BitVec 64))

(assert (=> d!26843 (= lt!50367 (select (arr!2012 (_keys!4195 newMap!16)) (toIndex!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (mask!6608 newMap!16))))))

(assert (=> d!26843 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26843 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (mask!6608 newMap!16)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)) lt!50366)))

(declare-fun b!99798 () Bool)

(assert (=> b!99798 (and (bvsge (index!3138 lt!50366) #b00000000000000000000000000000000) (bvslt (index!3138 lt!50366) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun res!50096 () Bool)

(assert (=> b!99798 (= res!50096 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3138 lt!50366)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99798 (=> res!50096 e!65006)))

(declare-fun b!99799 () Bool)

(assert (=> b!99799 (= e!65007 e!65003)))

(declare-fun c!17067 () Bool)

(assert (=> b!99799 (= c!17067 (or (= lt!50367 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (= (bvadd lt!50367 lt!50367) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99800 () Bool)

(assert (=> b!99800 (= e!65003 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (mask!6608 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!6608 newMap!16)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(declare-fun b!99801 () Bool)

(assert (=> b!99801 (and (bvsge (index!3138 lt!50366) #b00000000000000000000000000000000) (bvslt (index!3138 lt!50366) (size!2263 (_keys!4195 newMap!16))))))

(assert (=> b!99801 (= e!65006 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3138 lt!50366)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26843 c!17069) b!99793))

(assert (= (and d!26843 (not c!17069)) b!99799))

(assert (= (and b!99799 c!17067) b!99795))

(assert (= (and b!99799 (not c!17067)) b!99800))

(assert (= (and d!26843 c!17068) b!99796))

(assert (= (and d!26843 (not c!17068)) b!99794))

(assert (= (and b!99794 res!50095) b!99797))

(assert (= (and b!99797 (not res!50097)) b!99798))

(assert (= (and b!99798 (not res!50096)) b!99801))

(assert (=> d!26843 m!109019))

(declare-fun m!109867 () Bool)

(assert (=> d!26843 m!109867))

(assert (=> d!26843 m!109025))

(declare-fun m!109869 () Bool)

(assert (=> b!99801 m!109869))

(assert (=> b!99798 m!109869))

(assert (=> b!99797 m!109869))

(assert (=> b!99800 m!109019))

(declare-fun m!109871 () Bool)

(assert (=> b!99800 m!109871))

(assert (=> b!99800 m!109871))

(assert (=> b!99800 m!108735))

(declare-fun m!109873 () Bool)

(assert (=> b!99800 m!109873))

(assert (=> d!26645 d!26843))

(declare-fun d!26845 () Bool)

(declare-fun lt!50373 () (_ BitVec 32))

(declare-fun lt!50372 () (_ BitVec 32))

(assert (=> d!26845 (= lt!50373 (bvmul (bvxor lt!50372 (bvlshr lt!50372 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!26845 (= lt!50372 ((_ extract 31 0) (bvand (bvxor (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvlshr (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!26845 (and (bvsge (mask!6608 newMap!16) #b00000000000000000000000000000000) (let ((res!50098 (let ((h!2162 ((_ extract 31 0) (bvand (bvxor (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvlshr (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!13202 (bvmul (bvxor h!2162 (bvlshr h!2162 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!13202 (bvlshr x!13202 #b00000000000000000000000000001101)) (mask!6608 newMap!16)))))) (and (bvslt res!50098 (bvadd (mask!6608 newMap!16) #b00000000000000000000000000000001)) (bvsge res!50098 #b00000000000000000000000000000000))))))

(assert (=> d!26845 (= (toIndex!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (mask!6608 newMap!16)) (bvand (bvxor lt!50373 (bvlshr lt!50373 #b00000000000000000000000000001101)) (mask!6608 newMap!16)))))

(assert (=> d!26645 d!26845))

(declare-fun d!26847 () Bool)

(assert (=> d!26847 (= (validMask!0 (mask!6608 newMap!16)) (and (or (= (mask!6608 newMap!16) #b00000000000000000000000000000111) (= (mask!6608 newMap!16) #b00000000000000000000000000001111) (= (mask!6608 newMap!16) #b00000000000000000000000000011111) (= (mask!6608 newMap!16) #b00000000000000000000000000111111) (= (mask!6608 newMap!16) #b00000000000000000000000001111111) (= (mask!6608 newMap!16) #b00000000000000000000000011111111) (= (mask!6608 newMap!16) #b00000000000000000000000111111111) (= (mask!6608 newMap!16) #b00000000000000000000001111111111) (= (mask!6608 newMap!16) #b00000000000000000000011111111111) (= (mask!6608 newMap!16) #b00000000000000000000111111111111) (= (mask!6608 newMap!16) #b00000000000000000001111111111111) (= (mask!6608 newMap!16) #b00000000000000000011111111111111) (= (mask!6608 newMap!16) #b00000000000000000111111111111111) (= (mask!6608 newMap!16) #b00000000000000001111111111111111) (= (mask!6608 newMap!16) #b00000000000000011111111111111111) (= (mask!6608 newMap!16) #b00000000000000111111111111111111) (= (mask!6608 newMap!16) #b00000000000001111111111111111111) (= (mask!6608 newMap!16) #b00000000000011111111111111111111) (= (mask!6608 newMap!16) #b00000000000111111111111111111111) (= (mask!6608 newMap!16) #b00000000001111111111111111111111) (= (mask!6608 newMap!16) #b00000000011111111111111111111111) (= (mask!6608 newMap!16) #b00000000111111111111111111111111) (= (mask!6608 newMap!16) #b00000001111111111111111111111111) (= (mask!6608 newMap!16) #b00000011111111111111111111111111) (= (mask!6608 newMap!16) #b00000111111111111111111111111111) (= (mask!6608 newMap!16) #b00001111111111111111111111111111) (= (mask!6608 newMap!16) #b00011111111111111111111111111111) (= (mask!6608 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6608 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!26645 d!26847))

(assert (=> d!26751 d!26643))

(declare-fun d!26849 () Bool)

(assert (=> d!26849 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853))))

(declare-fun lt!50374 () Unit!2982)

(assert (=> d!26849 (= lt!50374 (choose!615 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853))))

(declare-fun e!65008 () Bool)

(assert (=> d!26849 e!65008))

(declare-fun res!50099 () Bool)

(assert (=> d!26849 (=> (not res!50099) (not e!65008))))

(assert (=> d!26849 (= res!50099 (isStrictlySorted!292 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!26849 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853) lt!50374)))

(declare-fun b!99802 () Bool)

(assert (=> b!99802 (= e!65008 (containsKey!155 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853))))

(assert (= (and d!26849 res!50099) b!99802))

(assert (=> d!26849 m!109213))

(assert (=> d!26849 m!109213))

(assert (=> d!26849 m!109215))

(declare-fun m!109875 () Bool)

(assert (=> d!26849 m!109875))

(declare-fun m!109877 () Bool)

(assert (=> d!26849 m!109877))

(assert (=> b!99802 m!109209))

(assert (=> b!99449 d!26849))

(declare-fun d!26851 () Bool)

(assert (=> d!26851 (= (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853)) (not (isEmpty!366 (getValueByKey!152 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853))))))

(declare-fun bs!4125 () Bool)

(assert (= bs!4125 d!26851))

(assert (=> bs!4125 m!109213))

(declare-fun m!109879 () Bool)

(assert (=> bs!4125 m!109879))

(assert (=> b!99449 d!26851))

(declare-fun b!99806 () Bool)

(declare-fun e!65010 () Option!158)

(assert (=> b!99806 (= e!65010 None!156)))

(declare-fun b!99804 () Bool)

(declare-fun e!65009 () Option!158)

(assert (=> b!99804 (= e!65009 e!65010)))

(declare-fun c!17071 () Bool)

(assert (=> b!99804 (= c!17071 (and ((_ is Cons!1564) (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))) (not (= (_1!1165 (h!2159 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49853))))))

(declare-fun b!99803 () Bool)

(assert (=> b!99803 (= e!65009 (Some!157 (_2!1165 (h!2159 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))))

(declare-fun c!17070 () Bool)

(declare-fun d!26853 () Bool)

(assert (=> d!26853 (= c!17070 (and ((_ is Cons!1564) (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))) (= (_1!1165 (h!2159 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49853)))))

(assert (=> d!26853 (= (getValueByKey!152 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853) e!65009)))

(declare-fun b!99805 () Bool)

(assert (=> b!99805 (= e!65010 (getValueByKey!152 (t!5534 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))) lt!49853))))

(assert (= (and d!26853 c!17070) b!99803))

(assert (= (and d!26853 (not c!17070)) b!99804))

(assert (= (and b!99804 c!17071) b!99805))

(assert (= (and b!99804 (not c!17071)) b!99806))

(declare-fun m!109881 () Bool)

(assert (=> b!99805 m!109881))

(assert (=> b!99449 d!26853))

(declare-fun d!26855 () Bool)

(assert (=> d!26855 (= (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99340 d!26855))

(declare-fun b!99807 () Bool)

(declare-fun e!65013 () Bool)

(declare-fun call!10254 () Bool)

(assert (=> b!99807 (= e!65013 call!10254)))

(declare-fun b!99808 () Bool)

(declare-fun e!65012 () Bool)

(assert (=> b!99808 (= e!65012 e!65013)))

(declare-fun lt!50377 () (_ BitVec 64))

(assert (=> b!99808 (= lt!50377 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000))))

(declare-fun lt!50376 () Unit!2982)

(assert (=> b!99808 (= lt!50376 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4195 (_2!1164 lt!49941)) lt!50377 #b00000000000000000000000000000000))))

(assert (=> b!99808 (arrayContainsKey!0 (_keys!4195 (_2!1164 lt!49941)) lt!50377 #b00000000000000000000000000000000)))

(declare-fun lt!50375 () Unit!2982)

(assert (=> b!99808 (= lt!50375 lt!50376)))

(declare-fun res!50101 () Bool)

(assert (=> b!99808 (= res!50101 (= (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000) (_keys!4195 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941))) (Found!248 #b00000000000000000000000000000000)))))

(assert (=> b!99808 (=> (not res!50101) (not e!65013))))

(declare-fun d!26857 () Bool)

(declare-fun res!50100 () Bool)

(declare-fun e!65011 () Bool)

(assert (=> d!26857 (=> res!50100 e!65011)))

(assert (=> d!26857 (= res!50100 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))

(assert (=> d!26857 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4195 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941))) e!65011)))

(declare-fun b!99809 () Bool)

(assert (=> b!99809 (= e!65012 call!10254)))

(declare-fun b!99810 () Bool)

(assert (=> b!99810 (= e!65011 e!65012)))

(declare-fun c!17072 () Bool)

(assert (=> b!99810 (= c!17072 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)))))

(declare-fun bm!10251 () Bool)

(assert (=> bm!10251 (= call!10254 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4195 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941))))))

(assert (= (and d!26857 (not res!50100)) b!99810))

(assert (= (and b!99810 c!17072) b!99808))

(assert (= (and b!99810 (not c!17072)) b!99809))

(assert (= (and b!99808 res!50101) b!99807))

(assert (= (or b!99807 b!99809) bm!10251))

(declare-fun m!109883 () Bool)

(assert (=> b!99808 m!109883))

(declare-fun m!109885 () Bool)

(assert (=> b!99808 m!109885))

(declare-fun m!109887 () Bool)

(assert (=> b!99808 m!109887))

(assert (=> b!99808 m!109883))

(declare-fun m!109889 () Bool)

(assert (=> b!99808 m!109889))

(assert (=> b!99810 m!109883))

(assert (=> b!99810 m!109883))

(declare-fun m!109891 () Bool)

(assert (=> b!99810 m!109891))

(declare-fun m!109893 () Bool)

(assert (=> bm!10251 m!109893))

(assert (=> b!99342 d!26857))

(declare-fun b!99811 () Bool)

(declare-fun e!65016 () Bool)

(assert (=> b!99811 (= e!65016 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99811 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!99812 () Bool)

(declare-fun e!65018 () Bool)

(declare-fun lt!50381 () ListLongMap!1503)

(assert (=> b!99812 (= e!65018 (= lt!50381 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16))))))

(declare-fun b!99813 () Bool)

(declare-fun e!65020 () ListLongMap!1503)

(assert (=> b!99813 (= e!65020 (ListLongMap!1504 Nil!1565))))

(declare-fun b!99814 () Bool)

(assert (=> b!99814 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> b!99814 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_values!2484 newMap!16))))))

(declare-fun e!65015 () Bool)

(assert (=> b!99814 (= e!65015 (= (apply!93 lt!50381 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!10252 () Bool)

(declare-fun call!10255 () ListLongMap!1503)

(assert (=> bm!10252 (= call!10255 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16)))))

(declare-fun d!26859 () Bool)

(declare-fun e!65014 () Bool)

(assert (=> d!26859 e!65014))

(declare-fun res!50103 () Bool)

(assert (=> d!26859 (=> (not res!50103) (not e!65014))))

(assert (=> d!26859 (= res!50103 (not (contains!792 lt!50381 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26859 (= lt!50381 e!65020)))

(declare-fun c!17073 () Bool)

(assert (=> d!26859 (= c!17073 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26859 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26859 (= (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50381)))

(declare-fun b!99815 () Bool)

(declare-fun e!65019 () ListLongMap!1503)

(assert (=> b!99815 (= e!65020 e!65019)))

(declare-fun c!17076 () Bool)

(assert (=> b!99815 (= c!17076 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99816 () Bool)

(declare-fun e!65017 () Bool)

(assert (=> b!99816 (= e!65017 e!65018)))

(declare-fun c!17074 () Bool)

(assert (=> b!99816 (= c!17074 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99817 () Bool)

(declare-fun res!50104 () Bool)

(assert (=> b!99817 (=> (not res!50104) (not e!65014))))

(assert (=> b!99817 (= res!50104 (not (contains!792 lt!50381 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99818 () Bool)

(declare-fun lt!50382 () Unit!2982)

(declare-fun lt!50379 () Unit!2982)

(assert (=> b!99818 (= lt!50382 lt!50379)))

(declare-fun lt!50378 () V!3161)

(declare-fun lt!50380 () (_ BitVec 64))

(declare-fun lt!50383 () ListLongMap!1503)

(declare-fun lt!50384 () (_ BitVec 64))

(assert (=> b!99818 (not (contains!792 (+!131 lt!50383 (tuple2!2309 lt!50384 lt!50378)) lt!50380))))

(assert (=> b!99818 (= lt!50379 (addStillNotContains!43 lt!50383 lt!50384 lt!50378 lt!50380))))

(assert (=> b!99818 (= lt!50380 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99818 (= lt!50378 (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99818 (= lt!50384 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99818 (= lt!50383 call!10255)))

(assert (=> b!99818 (= e!65019 (+!131 call!10255 (tuple2!2309 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99819 () Bool)

(assert (=> b!99819 (= e!65017 e!65015)))

(assert (=> b!99819 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun res!50102 () Bool)

(assert (=> b!99819 (= res!50102 (contains!792 lt!50381 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99819 (=> (not res!50102) (not e!65015))))

(declare-fun b!99820 () Bool)

(assert (=> b!99820 (= e!65014 e!65017)))

(declare-fun c!17075 () Bool)

(assert (=> b!99820 (= c!17075 e!65016)))

(declare-fun res!50105 () Bool)

(assert (=> b!99820 (=> (not res!50105) (not e!65016))))

(assert (=> b!99820 (= res!50105 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99821 () Bool)

(assert (=> b!99821 (= e!65019 call!10255)))

(declare-fun b!99822 () Bool)

(assert (=> b!99822 (= e!65018 (isEmpty!365 lt!50381))))

(assert (= (and d!26859 c!17073) b!99813))

(assert (= (and d!26859 (not c!17073)) b!99815))

(assert (= (and b!99815 c!17076) b!99818))

(assert (= (and b!99815 (not c!17076)) b!99821))

(assert (= (or b!99818 b!99821) bm!10252))

(assert (= (and d!26859 res!50103) b!99817))

(assert (= (and b!99817 res!50104) b!99820))

(assert (= (and b!99820 res!50105) b!99811))

(assert (= (and b!99820 c!17075) b!99819))

(assert (= (and b!99820 (not c!17075)) b!99816))

(assert (= (and b!99819 res!50102) b!99814))

(assert (= (and b!99816 c!17074) b!99812))

(assert (= (and b!99816 (not c!17074)) b!99822))

(declare-fun b_lambda!4457 () Bool)

(assert (=> (not b_lambda!4457) (not b!99814)))

(assert (=> b!99814 t!5546))

(declare-fun b_and!6137 () Bool)

(assert (= b_and!6133 (and (=> t!5546 result!3299) b_and!6137)))

(assert (=> b!99814 t!5548))

(declare-fun b_and!6139 () Bool)

(assert (= b_and!6135 (and (=> t!5548 result!3301) b_and!6139)))

(declare-fun b_lambda!4459 () Bool)

(assert (=> (not b_lambda!4459) (not b!99818)))

(assert (=> b!99818 t!5546))

(declare-fun b_and!6141 () Bool)

(assert (= b_and!6137 (and (=> t!5546 result!3299) b_and!6141)))

(assert (=> b!99818 t!5548))

(declare-fun b_and!6143 () Bool)

(assert (= b_and!6139 (and (=> t!5548 result!3301) b_and!6143)))

(declare-fun m!109895 () Bool)

(assert (=> bm!10252 m!109895))

(declare-fun m!109897 () Bool)

(assert (=> b!99822 m!109897))

(declare-fun m!109899 () Bool)

(assert (=> b!99817 m!109899))

(assert (=> b!99815 m!109033))

(assert (=> b!99815 m!109033))

(assert (=> b!99815 m!109041))

(assert (=> b!99818 m!109121))

(declare-fun m!109901 () Bool)

(assert (=> b!99818 m!109901))

(declare-fun m!109903 () Bool)

(assert (=> b!99818 m!109903))

(declare-fun m!109905 () Bool)

(assert (=> b!99818 m!109905))

(assert (=> b!99818 m!109901))

(assert (=> b!99818 m!109123))

(assert (=> b!99818 m!109033))

(assert (=> b!99818 m!109121))

(assert (=> b!99818 m!109123))

(assert (=> b!99818 m!109125))

(declare-fun m!109907 () Bool)

(assert (=> b!99818 m!109907))

(assert (=> b!99811 m!109033))

(assert (=> b!99811 m!109033))

(assert (=> b!99811 m!109041))

(assert (=> b!99819 m!109033))

(assert (=> b!99819 m!109033))

(declare-fun m!109909 () Bool)

(assert (=> b!99819 m!109909))

(declare-fun m!109911 () Bool)

(assert (=> d!26859 m!109911))

(assert (=> d!26859 m!109025))

(assert (=> b!99812 m!109895))

(assert (=> b!99814 m!109121))

(assert (=> b!99814 m!109033))

(declare-fun m!109913 () Bool)

(assert (=> b!99814 m!109913))

(assert (=> b!99814 m!109123))

(assert (=> b!99814 m!109033))

(assert (=> b!99814 m!109121))

(assert (=> b!99814 m!109123))

(assert (=> b!99814 m!109125))

(assert (=> bm!10195 d!26859))

(declare-fun lt!50385 () Bool)

(declare-fun d!26861 () Bool)

(assert (=> d!26861 (= lt!50385 (select (content!105 (toList!767 lt!50066)) (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun e!65022 () Bool)

(assert (=> d!26861 (= lt!50385 e!65022)))

(declare-fun res!50107 () Bool)

(assert (=> d!26861 (=> (not res!50107) (not e!65022))))

(assert (=> d!26861 (= res!50107 ((_ is Cons!1564) (toList!767 lt!50066)))))

(assert (=> d!26861 (= (contains!795 (toList!767 lt!50066) (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50385)))

(declare-fun b!99823 () Bool)

(declare-fun e!65021 () Bool)

(assert (=> b!99823 (= e!65022 e!65021)))

(declare-fun res!50106 () Bool)

(assert (=> b!99823 (=> res!50106 e!65021)))

(assert (=> b!99823 (= res!50106 (= (h!2159 (toList!767 lt!50066)) (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99824 () Bool)

(assert (=> b!99824 (= e!65021 (contains!795 (t!5534 (toList!767 lt!50066)) (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!26861 res!50107) b!99823))

(assert (= (and b!99823 (not res!50106)) b!99824))

(declare-fun m!109915 () Bool)

(assert (=> d!26861 m!109915))

(declare-fun m!109917 () Bool)

(assert (=> d!26861 m!109917))

(declare-fun m!109919 () Bool)

(assert (=> b!99824 m!109919))

(assert (=> b!99457 d!26861))

(declare-fun b!99828 () Bool)

(declare-fun e!65024 () Option!158)

(assert (=> b!99828 (= e!65024 None!156)))

(declare-fun b!99826 () Bool)

(declare-fun e!65023 () Option!158)

(assert (=> b!99826 (= e!65023 e!65024)))

(declare-fun c!17078 () Bool)

(assert (=> b!99826 (= c!17078 (and ((_ is Cons!1564) (toList!767 lt!50134)) (not (= (_1!1165 (h!2159 (toList!767 lt!50134))) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!99825 () Bool)

(assert (=> b!99825 (= e!65023 (Some!157 (_2!1165 (h!2159 (toList!767 lt!50134)))))))

(declare-fun d!26863 () Bool)

(declare-fun c!17077 () Bool)

(assert (=> d!26863 (= c!17077 (and ((_ is Cons!1564) (toList!767 lt!50134)) (= (_1!1165 (h!2159 (toList!767 lt!50134))) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!26863 (= (getValueByKey!152 (toList!767 lt!50134) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65023)))

(declare-fun b!99827 () Bool)

(assert (=> b!99827 (= e!65024 (getValueByKey!152 (t!5534 (toList!767 lt!50134)) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!26863 c!17077) b!99825))

(assert (= (and d!26863 (not c!17077)) b!99826))

(assert (= (and b!99826 c!17078) b!99827))

(assert (= (and b!99826 (not c!17078)) b!99828))

(declare-fun m!109921 () Bool)

(assert (=> b!99827 m!109921))

(assert (=> b!99531 d!26863))

(declare-fun d!26865 () Bool)

(assert (=> d!26865 (= (apply!93 lt!50150 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!50150) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4126 () Bool)

(assert (= bs!4126 d!26865))

(declare-fun m!109923 () Bool)

(assert (=> bs!4126 m!109923))

(assert (=> bs!4126 m!109923))

(declare-fun m!109925 () Bool)

(assert (=> bs!4126 m!109925))

(assert (=> b!99561 d!26865))

(declare-fun d!26867 () Bool)

(assert (=> d!26867 (isDefined!104 (getValueByKey!152 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun lt!50386 () Unit!2982)

(assert (=> d!26867 (= lt!50386 (choose!615 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun e!65025 () Bool)

(assert (=> d!26867 e!65025))

(declare-fun res!50108 () Bool)

(assert (=> d!26867 (=> (not res!50108) (not e!65025))))

(assert (=> d!26867 (= res!50108 (isStrictlySorted!292 (toList!767 call!10166)))))

(assert (=> d!26867 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!50386)))

(declare-fun b!99829 () Bool)

(assert (=> b!99829 (= e!65025 (containsKey!155 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26867 res!50108) b!99829))

(assert (=> d!26867 m!108735))

(assert (=> d!26867 m!109289))

(assert (=> d!26867 m!109289))

(assert (=> d!26867 m!109291))

(assert (=> d!26867 m!108735))

(declare-fun m!109927 () Bool)

(assert (=> d!26867 m!109927))

(declare-fun m!109929 () Bool)

(assert (=> d!26867 m!109929))

(assert (=> b!99829 m!108735))

(assert (=> b!99829 m!109285))

(assert (=> b!99466 d!26867))

(declare-fun d!26869 () Bool)

(assert (=> d!26869 (= (isDefined!104 (getValueByKey!152 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))) (not (isEmpty!366 (getValueByKey!152 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))))

(declare-fun bs!4127 () Bool)

(assert (= bs!4127 d!26869))

(assert (=> bs!4127 m!109289))

(declare-fun m!109931 () Bool)

(assert (=> bs!4127 m!109931))

(assert (=> b!99466 d!26869))

(declare-fun b!99833 () Bool)

(declare-fun e!65027 () Option!158)

(assert (=> b!99833 (= e!65027 None!156)))

(declare-fun b!99831 () Bool)

(declare-fun e!65026 () Option!158)

(assert (=> b!99831 (= e!65026 e!65027)))

(declare-fun c!17080 () Bool)

(assert (=> b!99831 (= c!17080 (and ((_ is Cons!1564) (toList!767 call!10166)) (not (= (_1!1165 (h!2159 (toList!767 call!10166))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))))

(declare-fun b!99830 () Bool)

(assert (=> b!99830 (= e!65026 (Some!157 (_2!1165 (h!2159 (toList!767 call!10166)))))))

(declare-fun c!17079 () Bool)

(declare-fun d!26871 () Bool)

(assert (=> d!26871 (= c!17079 (and ((_ is Cons!1564) (toList!767 call!10166)) (= (_1!1165 (h!2159 (toList!767 call!10166))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (=> d!26871 (= (getValueByKey!152 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) e!65026)))

(declare-fun b!99832 () Bool)

(assert (=> b!99832 (= e!65027 (getValueByKey!152 (t!5534 (toList!767 call!10166)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26871 c!17079) b!99830))

(assert (= (and d!26871 (not c!17079)) b!99831))

(assert (= (and b!99831 c!17080) b!99832))

(assert (= (and b!99831 (not c!17080)) b!99833))

(assert (=> b!99832 m!108735))

(declare-fun m!109933 () Bool)

(assert (=> b!99832 m!109933))

(assert (=> b!99466 d!26871))

(assert (=> d!26677 d!26679))

(assert (=> d!26677 d!26691))

(declare-fun d!26873 () Bool)

(assert (=> d!26873 (= (apply!93 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49836) (apply!93 lt!49833 lt!49836))))

(assert (=> d!26873 true))

(declare-fun _$34!871 () Unit!2982)

(assert (=> d!26873 (= (choose!610 lt!49833 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49836) _$34!871)))

(declare-fun bs!4128 () Bool)

(assert (= bs!4128 d!26873))

(assert (=> bs!4128 m!108877))

(assert (=> bs!4128 m!108877))

(assert (=> bs!4128 m!108891))

(assert (=> bs!4128 m!108887))

(assert (=> d!26677 d!26873))

(assert (=> d!26677 d!26697))

(declare-fun d!26875 () Bool)

(declare-fun e!65029 () Bool)

(assert (=> d!26875 e!65029))

(declare-fun res!50109 () Bool)

(assert (=> d!26875 (=> res!50109 e!65029)))

(declare-fun lt!50389 () Bool)

(assert (=> d!26875 (= res!50109 (not lt!50389))))

(declare-fun lt!50388 () Bool)

(assert (=> d!26875 (= lt!50389 lt!50388)))

(declare-fun lt!50387 () Unit!2982)

(declare-fun e!65028 () Unit!2982)

(assert (=> d!26875 (= lt!50387 e!65028)))

(declare-fun c!17081 () Bool)

(assert (=> d!26875 (= c!17081 lt!50388)))

(assert (=> d!26875 (= lt!50388 (containsKey!155 (toList!767 lt!49833) lt!49836))))

(assert (=> d!26875 (= (contains!792 lt!49833 lt!49836) lt!50389)))

(declare-fun b!99835 () Bool)

(declare-fun lt!50390 () Unit!2982)

(assert (=> b!99835 (= e!65028 lt!50390)))

(assert (=> b!99835 (= lt!50390 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49833) lt!49836))))

(assert (=> b!99835 (isDefined!104 (getValueByKey!152 (toList!767 lt!49833) lt!49836))))

(declare-fun b!99836 () Bool)

(declare-fun Unit!3010 () Unit!2982)

(assert (=> b!99836 (= e!65028 Unit!3010)))

(declare-fun b!99837 () Bool)

(assert (=> b!99837 (= e!65029 (isDefined!104 (getValueByKey!152 (toList!767 lt!49833) lt!49836)))))

(assert (= (and d!26875 c!17081) b!99835))

(assert (= (and d!26875 (not c!17081)) b!99836))

(assert (= (and d!26875 (not res!50109)) b!99837))

(declare-fun m!109935 () Bool)

(assert (=> d!26875 m!109935))

(declare-fun m!109937 () Bool)

(assert (=> b!99835 m!109937))

(assert (=> b!99835 m!109221))

(assert (=> b!99835 m!109221))

(declare-fun m!109939 () Bool)

(assert (=> b!99835 m!109939))

(assert (=> b!99837 m!109221))

(assert (=> b!99837 m!109221))

(assert (=> b!99837 m!109939))

(assert (=> d!26677 d!26875))

(declare-fun d!26877 () Bool)

(assert (=> d!26877 (= (get!1299 (getValueByKey!152 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2823 (getValueByKey!152 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26671 d!26877))

(assert (=> d!26671 d!26803))

(declare-fun d!26879 () Bool)

(assert (=> d!26879 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!456 (_keys!4195 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> d!26879 true))

(declare-fun _$5!104 () Unit!2982)

(assert (=> d!26879 (= (choose!614 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3137 lt!49929) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) _$5!104)))

(declare-fun bs!4129 () Bool)

(assert (= bs!4129 d!26879))

(assert (=> bs!4129 m!108863))

(assert (=> bs!4129 m!108863))

(assert (=> bs!4129 m!109281))

(assert (=> bs!4129 m!108947))

(assert (=> bs!4129 m!109283))

(assert (=> d!26707 d!26879))

(assert (=> d!26707 d!26847))

(declare-fun d!26881 () Bool)

(assert (=> d!26881 (contains!792 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))

(declare-fun lt!50393 () Unit!2982)

(declare-fun choose!618 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 64) (_ BitVec 32) Int) Unit!2982)

(assert (=> d!26881 (= lt!50393 (choose!618 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> d!26881 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26881 (= (lemmaArrayContainsKeyThenInListMap!26 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50393)))

(declare-fun bs!4130 () Bool)

(assert (= bs!4130 d!26881))

(assert (=> bs!4130 m!108863))

(assert (=> bs!4130 m!108863))

(assert (=> bs!4130 m!108735))

(assert (=> bs!4130 m!109565))

(assert (=> bs!4130 m!108735))

(declare-fun m!109941 () Bool)

(assert (=> bs!4130 m!109941))

(assert (=> bs!4130 m!109025))

(assert (=> b!99656 d!26881))

(declare-fun d!26883 () Bool)

(declare-fun e!65031 () Bool)

(assert (=> d!26883 e!65031))

(declare-fun res!50110 () Bool)

(assert (=> d!26883 (=> res!50110 e!65031)))

(declare-fun lt!50396 () Bool)

(assert (=> d!26883 (= res!50110 (not lt!50396))))

(declare-fun lt!50395 () Bool)

(assert (=> d!26883 (= lt!50396 lt!50395)))

(declare-fun lt!50394 () Unit!2982)

(declare-fun e!65030 () Unit!2982)

(assert (=> d!26883 (= lt!50394 e!65030)))

(declare-fun c!17082 () Bool)

(assert (=> d!26883 (= c!17082 lt!50395)))

(assert (=> d!26883 (= lt!50395 (containsKey!155 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!26883 (= (contains!792 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!50396)))

(declare-fun b!99838 () Bool)

(declare-fun lt!50397 () Unit!2982)

(assert (=> b!99838 (= e!65030 lt!50397)))

(assert (=> b!99838 (= lt!50397 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> b!99838 (isDefined!104 (getValueByKey!152 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99839 () Bool)

(declare-fun Unit!3011 () Unit!2982)

(assert (=> b!99839 (= e!65030 Unit!3011)))

(declare-fun b!99840 () Bool)

(assert (=> b!99840 (= e!65031 (isDefined!104 (getValueByKey!152 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (= (and d!26883 c!17082) b!99838))

(assert (= (and d!26883 (not c!17082)) b!99839))

(assert (= (and d!26883 (not res!50110)) b!99840))

(assert (=> d!26883 m!108735))

(declare-fun m!109943 () Bool)

(assert (=> d!26883 m!109943))

(assert (=> b!99838 m!108735))

(declare-fun m!109945 () Bool)

(assert (=> b!99838 m!109945))

(assert (=> b!99838 m!108735))

(declare-fun m!109947 () Bool)

(assert (=> b!99838 m!109947))

(assert (=> b!99838 m!109947))

(declare-fun m!109949 () Bool)

(assert (=> b!99838 m!109949))

(assert (=> b!99840 m!108735))

(assert (=> b!99840 m!109947))

(assert (=> b!99840 m!109947))

(assert (=> b!99840 m!109949))

(assert (=> b!99656 d!26883))

(assert (=> b!99656 d!26661))

(declare-fun d!26885 () Bool)

(declare-fun e!65033 () Bool)

(assert (=> d!26885 e!65033))

(declare-fun res!50111 () Bool)

(assert (=> d!26885 (=> res!50111 e!65033)))

(declare-fun lt!50400 () Bool)

(assert (=> d!26885 (= res!50111 (not lt!50400))))

(declare-fun lt!50399 () Bool)

(assert (=> d!26885 (= lt!50400 lt!50399)))

(declare-fun lt!50398 () Unit!2982)

(declare-fun e!65032 () Unit!2982)

(assert (=> d!26885 (= lt!50398 e!65032)))

(declare-fun c!17083 () Bool)

(assert (=> d!26885 (= c!17083 lt!50399)))

(assert (=> d!26885 (= lt!50399 (containsKey!155 (toList!767 lt!49996) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26885 (= (contains!792 lt!49996 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50400)))

(declare-fun b!99841 () Bool)

(declare-fun lt!50401 () Unit!2982)

(assert (=> b!99841 (= e!65032 lt!50401)))

(assert (=> b!99841 (= lt!50401 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49996) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99841 (isDefined!104 (getValueByKey!152 (toList!767 lt!49996) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99842 () Bool)

(declare-fun Unit!3012 () Unit!2982)

(assert (=> b!99842 (= e!65032 Unit!3012)))

(declare-fun b!99843 () Bool)

(assert (=> b!99843 (= e!65033 (isDefined!104 (getValueByKey!152 (toList!767 lt!49996) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26885 c!17083) b!99841))

(assert (= (and d!26885 (not c!17083)) b!99842))

(assert (= (and d!26885 (not res!50111)) b!99843))

(declare-fun m!109951 () Bool)

(assert (=> d!26885 m!109951))

(declare-fun m!109953 () Bool)

(assert (=> b!99841 m!109953))

(declare-fun m!109955 () Bool)

(assert (=> b!99841 m!109955))

(assert (=> b!99841 m!109955))

(declare-fun m!109957 () Bool)

(assert (=> b!99841 m!109957))

(assert (=> b!99843 m!109955))

(assert (=> b!99843 m!109955))

(assert (=> b!99843 m!109957))

(assert (=> bm!10192 d!26885))

(declare-fun b!99844 () Bool)

(declare-fun e!65039 () ListLongMap!1503)

(declare-fun call!10260 () ListLongMap!1503)

(assert (=> b!99844 (= e!65039 call!10260)))

(declare-fun bm!10253 () Bool)

(declare-fun call!10259 () ListLongMap!1503)

(declare-fun call!10257 () ListLongMap!1503)

(assert (=> bm!10253 (= call!10259 call!10257)))

(declare-fun b!99845 () Bool)

(declare-fun res!50118 () Bool)

(declare-fun e!65042 () Bool)

(assert (=> b!99845 (=> (not res!50118) (not e!65042))))

(declare-fun e!65044 () Bool)

(assert (=> b!99845 (= res!50118 e!65044)))

(declare-fun c!17086 () Bool)

(assert (=> b!99845 (= c!17086 (not (= (bvand (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99846 () Bool)

(declare-fun e!65040 () ListLongMap!1503)

(declare-fun e!65043 () ListLongMap!1503)

(assert (=> b!99846 (= e!65040 e!65043)))

(declare-fun c!17084 () Bool)

(assert (=> b!99846 (= c!17084 (and (not (= (bvand (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99847 () Bool)

(declare-fun e!65045 () Bool)

(declare-fun lt!50407 () ListLongMap!1503)

(assert (=> b!99847 (= e!65045 (= (apply!93 lt!50407 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 (_2!1164 lt!49941))))))

(declare-fun b!99848 () Bool)

(declare-fun call!10256 () ListLongMap!1503)

(assert (=> b!99848 (= e!65039 call!10256)))

(declare-fun b!99849 () Bool)

(declare-fun res!50119 () Bool)

(assert (=> b!99849 (=> (not res!50119) (not e!65042))))

(declare-fun e!65046 () Bool)

(assert (=> b!99849 (= res!50119 e!65046)))

(declare-fun res!50116 () Bool)

(assert (=> b!99849 (=> res!50116 e!65046)))

(declare-fun e!65041 () Bool)

(assert (=> b!99849 (= res!50116 (not e!65041))))

(declare-fun res!50115 () Bool)

(assert (=> b!99849 (=> (not res!50115) (not e!65041))))

(assert (=> b!99849 (= res!50115 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))

(declare-fun b!99850 () Bool)

(declare-fun e!65037 () Unit!2982)

(declare-fun Unit!3013 () Unit!2982)

(assert (=> b!99850 (= e!65037 Unit!3013)))

(declare-fun b!99851 () Bool)

(declare-fun lt!50409 () Unit!2982)

(assert (=> b!99851 (= e!65037 lt!50409)))

(declare-fun lt!50413 () ListLongMap!1503)

(assert (=> b!99851 (= lt!50413 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (_2!1164 lt!49941)) (_values!2484 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941)) (extraKeys!2318 (_2!1164 lt!49941)) (zeroValue!2382 (_2!1164 lt!49941)) (minValue!2382 (_2!1164 lt!49941)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1164 lt!49941))))))

(declare-fun lt!50416 () (_ BitVec 64))

(assert (=> b!99851 (= lt!50416 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50422 () (_ BitVec 64))

(assert (=> b!99851 (= lt!50422 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000))))

(declare-fun lt!50412 () Unit!2982)

(assert (=> b!99851 (= lt!50412 (addStillContains!69 lt!50413 lt!50416 (zeroValue!2382 (_2!1164 lt!49941)) lt!50422))))

(assert (=> b!99851 (contains!792 (+!131 lt!50413 (tuple2!2309 lt!50416 (zeroValue!2382 (_2!1164 lt!49941)))) lt!50422)))

(declare-fun lt!50420 () Unit!2982)

(assert (=> b!99851 (= lt!50420 lt!50412)))

(declare-fun lt!50402 () ListLongMap!1503)

(assert (=> b!99851 (= lt!50402 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (_2!1164 lt!49941)) (_values!2484 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941)) (extraKeys!2318 (_2!1164 lt!49941)) (zeroValue!2382 (_2!1164 lt!49941)) (minValue!2382 (_2!1164 lt!49941)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1164 lt!49941))))))

(declare-fun lt!50408 () (_ BitVec 64))

(assert (=> b!99851 (= lt!50408 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50405 () (_ BitVec 64))

(assert (=> b!99851 (= lt!50405 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000))))

(declare-fun lt!50417 () Unit!2982)

(assert (=> b!99851 (= lt!50417 (addApplyDifferent!69 lt!50402 lt!50408 (minValue!2382 (_2!1164 lt!49941)) lt!50405))))

(assert (=> b!99851 (= (apply!93 (+!131 lt!50402 (tuple2!2309 lt!50408 (minValue!2382 (_2!1164 lt!49941)))) lt!50405) (apply!93 lt!50402 lt!50405))))

(declare-fun lt!50406 () Unit!2982)

(assert (=> b!99851 (= lt!50406 lt!50417)))

(declare-fun lt!50419 () ListLongMap!1503)

(assert (=> b!99851 (= lt!50419 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (_2!1164 lt!49941)) (_values!2484 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941)) (extraKeys!2318 (_2!1164 lt!49941)) (zeroValue!2382 (_2!1164 lt!49941)) (minValue!2382 (_2!1164 lt!49941)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1164 lt!49941))))))

(declare-fun lt!50423 () (_ BitVec 64))

(assert (=> b!99851 (= lt!50423 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50410 () (_ BitVec 64))

(assert (=> b!99851 (= lt!50410 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000))))

(declare-fun lt!50404 () Unit!2982)

(assert (=> b!99851 (= lt!50404 (addApplyDifferent!69 lt!50419 lt!50423 (zeroValue!2382 (_2!1164 lt!49941)) lt!50410))))

(assert (=> b!99851 (= (apply!93 (+!131 lt!50419 (tuple2!2309 lt!50423 (zeroValue!2382 (_2!1164 lt!49941)))) lt!50410) (apply!93 lt!50419 lt!50410))))

(declare-fun lt!50414 () Unit!2982)

(assert (=> b!99851 (= lt!50414 lt!50404)))

(declare-fun lt!50418 () ListLongMap!1503)

(assert (=> b!99851 (= lt!50418 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (_2!1164 lt!49941)) (_values!2484 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941)) (extraKeys!2318 (_2!1164 lt!49941)) (zeroValue!2382 (_2!1164 lt!49941)) (minValue!2382 (_2!1164 lt!49941)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1164 lt!49941))))))

(declare-fun lt!50421 () (_ BitVec 64))

(assert (=> b!99851 (= lt!50421 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50403 () (_ BitVec 64))

(assert (=> b!99851 (= lt!50403 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000))))

(assert (=> b!99851 (= lt!50409 (addApplyDifferent!69 lt!50418 lt!50421 (minValue!2382 (_2!1164 lt!49941)) lt!50403))))

(assert (=> b!99851 (= (apply!93 (+!131 lt!50418 (tuple2!2309 lt!50421 (minValue!2382 (_2!1164 lt!49941)))) lt!50403) (apply!93 lt!50418 lt!50403))))

(declare-fun b!99852 () Bool)

(declare-fun e!65035 () Bool)

(assert (=> b!99852 (= e!65035 (= (apply!93 lt!50407 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (_values!2484 (_2!1164 lt!49941))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 (_2!1164 lt!49941)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99852 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_values!2484 (_2!1164 lt!49941)))))))

(assert (=> b!99852 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))

(declare-fun b!99853 () Bool)

(assert (=> b!99853 (= e!65046 e!65035)))

(declare-fun res!50112 () Bool)

(assert (=> b!99853 (=> (not res!50112) (not e!65035))))

(assert (=> b!99853 (= res!50112 (contains!792 lt!50407 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)))))

(assert (=> b!99853 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))

(declare-fun b!99854 () Bool)

(declare-fun e!65034 () Bool)

(assert (=> b!99854 (= e!65034 e!65045)))

(declare-fun res!50120 () Bool)

(declare-fun call!10262 () Bool)

(assert (=> b!99854 (= res!50120 call!10262)))

(assert (=> b!99854 (=> (not res!50120) (not e!65045))))

(declare-fun b!99855 () Bool)

(assert (=> b!99855 (= e!65041 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)))))

(declare-fun b!99856 () Bool)

(assert (=> b!99856 (= e!65043 call!10260)))

(declare-fun b!99857 () Bool)

(declare-fun call!10258 () ListLongMap!1503)

(assert (=> b!99857 (= e!65040 (+!131 call!10258 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (_2!1164 lt!49941)))))))

(declare-fun b!99858 () Bool)

(declare-fun call!10261 () Bool)

(assert (=> b!99858 (= e!65044 (not call!10261))))

(declare-fun b!99859 () Bool)

(declare-fun e!65036 () Bool)

(assert (=> b!99859 (= e!65036 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)))))

(declare-fun bm!10254 () Bool)

(declare-fun c!17088 () Bool)

(assert (=> bm!10254 (= call!10258 (+!131 (ite c!17088 call!10257 (ite c!17084 call!10259 call!10256)) (ite (or c!17088 c!17084) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (_2!1164 lt!49941))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (_2!1164 lt!49941))))))))

(declare-fun bm!10255 () Bool)

(assert (=> bm!10255 (= call!10260 call!10258)))

(declare-fun b!99860 () Bool)

(declare-fun e!65038 () Bool)

(assert (=> b!99860 (= e!65044 e!65038)))

(declare-fun res!50114 () Bool)

(assert (=> b!99860 (= res!50114 call!10261)))

(assert (=> b!99860 (=> (not res!50114) (not e!65038))))

(declare-fun b!99861 () Bool)

(declare-fun c!17089 () Bool)

(assert (=> b!99861 (= c!17089 (and (not (= (bvand (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99861 (= e!65043 e!65039)))

(declare-fun b!99862 () Bool)

(assert (=> b!99862 (= e!65042 e!65034)))

(declare-fun c!17085 () Bool)

(assert (=> b!99862 (= c!17085 (not (= (bvand (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10256 () Bool)

(assert (=> bm!10256 (= call!10262 (contains!792 lt!50407 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10257 () Bool)

(assert (=> bm!10257 (= call!10256 call!10259)))

(declare-fun bm!10258 () Bool)

(assert (=> bm!10258 (= call!10261 (contains!792 lt!50407 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99863 () Bool)

(assert (=> b!99863 (= e!65034 (not call!10262))))

(declare-fun b!99864 () Bool)

(assert (=> b!99864 (= e!65038 (= (apply!93 lt!50407 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 (_2!1164 lt!49941))))))

(declare-fun d!26887 () Bool)

(assert (=> d!26887 e!65042))

(declare-fun res!50117 () Bool)

(assert (=> d!26887 (=> (not res!50117) (not e!65042))))

(assert (=> d!26887 (= res!50117 (or (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))))

(declare-fun lt!50411 () ListLongMap!1503)

(assert (=> d!26887 (= lt!50407 lt!50411)))

(declare-fun lt!50415 () Unit!2982)

(assert (=> d!26887 (= lt!50415 e!65037)))

(declare-fun c!17087 () Bool)

(assert (=> d!26887 (= c!17087 e!65036)))

(declare-fun res!50113 () Bool)

(assert (=> d!26887 (=> (not res!50113) (not e!65036))))

(assert (=> d!26887 (= res!50113 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))

(assert (=> d!26887 (= lt!50411 e!65040)))

(assert (=> d!26887 (= c!17088 (and (not (= (bvand (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26887 (validMask!0 (mask!6608 (_2!1164 lt!49941)))))

(assert (=> d!26887 (= (getCurrentListMap!456 (_keys!4195 (_2!1164 lt!49941)) (_values!2484 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941)) (extraKeys!2318 (_2!1164 lt!49941)) (zeroValue!2382 (_2!1164 lt!49941)) (minValue!2382 (_2!1164 lt!49941)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1164 lt!49941))) lt!50407)))

(declare-fun bm!10259 () Bool)

(assert (=> bm!10259 (= call!10257 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (_2!1164 lt!49941)) (_values!2484 (_2!1164 lt!49941)) (mask!6608 (_2!1164 lt!49941)) (extraKeys!2318 (_2!1164 lt!49941)) (zeroValue!2382 (_2!1164 lt!49941)) (minValue!2382 (_2!1164 lt!49941)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1164 lt!49941))))))

(assert (= (and d!26887 c!17088) b!99857))

(assert (= (and d!26887 (not c!17088)) b!99846))

(assert (= (and b!99846 c!17084) b!99856))

(assert (= (and b!99846 (not c!17084)) b!99861))

(assert (= (and b!99861 c!17089) b!99844))

(assert (= (and b!99861 (not c!17089)) b!99848))

(assert (= (or b!99844 b!99848) bm!10257))

(assert (= (or b!99856 bm!10257) bm!10253))

(assert (= (or b!99856 b!99844) bm!10255))

(assert (= (or b!99857 bm!10253) bm!10259))

(assert (= (or b!99857 bm!10255) bm!10254))

(assert (= (and d!26887 res!50113) b!99859))

(assert (= (and d!26887 c!17087) b!99851))

(assert (= (and d!26887 (not c!17087)) b!99850))

(assert (= (and d!26887 res!50117) b!99849))

(assert (= (and b!99849 res!50115) b!99855))

(assert (= (and b!99849 (not res!50116)) b!99853))

(assert (= (and b!99853 res!50112) b!99852))

(assert (= (and b!99849 res!50119) b!99845))

(assert (= (and b!99845 c!17086) b!99860))

(assert (= (and b!99845 (not c!17086)) b!99858))

(assert (= (and b!99860 res!50114) b!99864))

(assert (= (or b!99860 b!99858) bm!10258))

(assert (= (and b!99845 res!50118) b!99862))

(assert (= (and b!99862 c!17085) b!99854))

(assert (= (and b!99862 (not c!17085)) b!99863))

(assert (= (and b!99854 res!50120) b!99847))

(assert (= (or b!99854 b!99863) bm!10256))

(declare-fun b_lambda!4461 () Bool)

(assert (=> (not b_lambda!4461) (not b!99852)))

(declare-fun t!5550 () Bool)

(declare-fun tb!1949 () Bool)

(assert (=> (and b!98943 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 (_2!1164 lt!49941))) t!5550) tb!1949))

(declare-fun result!3303 () Bool)

(assert (=> tb!1949 (= result!3303 tp_is_empty!2635)))

(assert (=> b!99852 t!5550))

(declare-fun b_and!6145 () Bool)

(assert (= b_and!6141 (and (=> t!5550 result!3303) b_and!6145)))

(declare-fun t!5552 () Bool)

(declare-fun tb!1951 () Bool)

(assert (=> (and b!98935 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (_2!1164 lt!49941))) t!5552) tb!1951))

(declare-fun result!3305 () Bool)

(assert (= result!3305 result!3303))

(assert (=> b!99852 t!5552))

(declare-fun b_and!6147 () Bool)

(assert (= b_and!6143 (and (=> t!5552 result!3305) b_and!6147)))

(declare-fun m!109959 () Bool)

(assert (=> b!99851 m!109959))

(declare-fun m!109961 () Bool)

(assert (=> b!99851 m!109961))

(declare-fun m!109963 () Bool)

(assert (=> b!99851 m!109963))

(declare-fun m!109965 () Bool)

(assert (=> b!99851 m!109965))

(declare-fun m!109967 () Bool)

(assert (=> b!99851 m!109967))

(assert (=> b!99851 m!109883))

(declare-fun m!109969 () Bool)

(assert (=> b!99851 m!109969))

(declare-fun m!109971 () Bool)

(assert (=> b!99851 m!109971))

(declare-fun m!109973 () Bool)

(assert (=> b!99851 m!109973))

(assert (=> b!99851 m!109959))

(declare-fun m!109975 () Bool)

(assert (=> b!99851 m!109975))

(declare-fun m!109977 () Bool)

(assert (=> b!99851 m!109977))

(declare-fun m!109979 () Bool)

(assert (=> b!99851 m!109979))

(assert (=> b!99851 m!109961))

(declare-fun m!109981 () Bool)

(assert (=> b!99851 m!109981))

(assert (=> b!99851 m!109965))

(assert (=> b!99851 m!109969))

(declare-fun m!109983 () Bool)

(assert (=> b!99851 m!109983))

(declare-fun m!109985 () Bool)

(assert (=> b!99851 m!109985))

(declare-fun m!109987 () Bool)

(assert (=> b!99851 m!109987))

(declare-fun m!109989 () Bool)

(assert (=> b!99851 m!109989))

(declare-fun m!109991 () Bool)

(assert (=> d!26887 m!109991))

(assert (=> bm!10259 m!109977))

(declare-fun m!109993 () Bool)

(assert (=> bm!10256 m!109993))

(assert (=> b!99855 m!109883))

(assert (=> b!99855 m!109883))

(assert (=> b!99855 m!109891))

(declare-fun m!109995 () Bool)

(assert (=> b!99864 m!109995))

(declare-fun m!109997 () Bool)

(assert (=> bm!10254 m!109997))

(declare-fun m!109999 () Bool)

(assert (=> bm!10258 m!109999))

(declare-fun m!110001 () Bool)

(assert (=> b!99857 m!110001))

(assert (=> b!99859 m!109883))

(assert (=> b!99859 m!109883))

(assert (=> b!99859 m!109891))

(assert (=> b!99853 m!109883))

(assert (=> b!99853 m!109883))

(declare-fun m!110003 () Bool)

(assert (=> b!99853 m!110003))

(assert (=> b!99852 m!109883))

(declare-fun m!110005 () Bool)

(assert (=> b!99852 m!110005))

(declare-fun m!110007 () Bool)

(assert (=> b!99852 m!110007))

(declare-fun m!110009 () Bool)

(assert (=> b!99852 m!110009))

(assert (=> b!99852 m!110007))

(assert (=> b!99852 m!110009))

(declare-fun m!110011 () Bool)

(assert (=> b!99852 m!110011))

(assert (=> b!99852 m!109883))

(declare-fun m!110013 () Bool)

(assert (=> b!99847 m!110013))

(assert (=> d!26749 d!26887))

(declare-fun d!26889 () Bool)

(declare-fun e!65047 () Bool)

(assert (=> d!26889 e!65047))

(declare-fun res!50122 () Bool)

(assert (=> d!26889 (=> (not res!50122) (not e!65047))))

(declare-fun lt!50426 () ListLongMap!1503)

(assert (=> d!26889 (= res!50122 (contains!792 lt!50426 (_1!1165 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50425 () List!1568)

(assert (=> d!26889 (= lt!50426 (ListLongMap!1504 lt!50425))))

(declare-fun lt!50424 () Unit!2982)

(declare-fun lt!50427 () Unit!2982)

(assert (=> d!26889 (= lt!50424 lt!50427)))

(assert (=> d!26889 (= (getValueByKey!152 lt!50425 (_1!1165 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26889 (= lt!50427 (lemmaContainsTupThenGetReturnValue!68 lt!50425 (_1!1165 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26889 (= lt!50425 (insertStrictlySorted!71 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (_1!1165 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26889 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50426)))

(declare-fun b!99865 () Bool)

(declare-fun res!50121 () Bool)

(assert (=> b!99865 (=> (not res!50121) (not e!65047))))

(assert (=> b!99865 (= res!50121 (= (getValueByKey!152 (toList!767 lt!50426) (_1!1165 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99866 () Bool)

(assert (=> b!99866 (= e!65047 (contains!795 (toList!767 lt!50426) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26889 res!50122) b!99865))

(assert (= (and b!99865 res!50121) b!99866))

(declare-fun m!110015 () Bool)

(assert (=> d!26889 m!110015))

(declare-fun m!110017 () Bool)

(assert (=> d!26889 m!110017))

(declare-fun m!110019 () Bool)

(assert (=> d!26889 m!110019))

(declare-fun m!110021 () Bool)

(assert (=> d!26889 m!110021))

(declare-fun m!110023 () Bool)

(assert (=> b!99865 m!110023))

(declare-fun m!110025 () Bool)

(assert (=> b!99866 m!110025))

(assert (=> d!26703 d!26889))

(assert (=> d!26703 d!26661))

(assert (=> d!26703 d!26847))

(declare-fun b!99867 () Bool)

(declare-fun e!65053 () ListLongMap!1503)

(declare-fun call!10267 () ListLongMap!1503)

(assert (=> b!99867 (= e!65053 call!10267)))

(declare-fun bm!10260 () Bool)

(declare-fun call!10266 () ListLongMap!1503)

(declare-fun call!10264 () ListLongMap!1503)

(assert (=> bm!10260 (= call!10266 call!10264)))

(declare-fun b!99868 () Bool)

(declare-fun res!50129 () Bool)

(declare-fun e!65056 () Bool)

(assert (=> b!99868 (=> (not res!50129) (not e!65056))))

(declare-fun e!65058 () Bool)

(assert (=> b!99868 (= res!50129 e!65058)))

(declare-fun c!17092 () Bool)

(assert (=> b!99868 (= c!17092 (not (= (bvand lt!49942 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99869 () Bool)

(declare-fun e!65054 () ListLongMap!1503)

(declare-fun e!65057 () ListLongMap!1503)

(assert (=> b!99869 (= e!65054 e!65057)))

(declare-fun c!17090 () Bool)

(assert (=> b!99869 (= c!17090 (and (not (= (bvand lt!49942 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!49942 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99870 () Bool)

(declare-fun e!65059 () Bool)

(declare-fun lt!50433 () ListLongMap!1503)

(assert (=> b!99870 (= e!65059 (= (apply!93 lt!50433 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun b!99871 () Bool)

(declare-fun call!10263 () ListLongMap!1503)

(assert (=> b!99871 (= e!65053 call!10263)))

(declare-fun b!99872 () Bool)

(declare-fun res!50130 () Bool)

(assert (=> b!99872 (=> (not res!50130) (not e!65056))))

(declare-fun e!65060 () Bool)

(assert (=> b!99872 (= res!50130 e!65060)))

(declare-fun res!50127 () Bool)

(assert (=> b!99872 (=> res!50127 e!65060)))

(declare-fun e!65055 () Bool)

(assert (=> b!99872 (= res!50127 (not e!65055))))

(declare-fun res!50126 () Bool)

(assert (=> b!99872 (=> (not res!50126) (not e!65055))))

(assert (=> b!99872 (= res!50126 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99873 () Bool)

(declare-fun e!65051 () Unit!2982)

(declare-fun Unit!3014 () Unit!2982)

(assert (=> b!99873 (= e!65051 Unit!3014)))

(declare-fun b!99874 () Bool)

(declare-fun lt!50435 () Unit!2982)

(assert (=> b!99874 (= e!65051 lt!50435)))

(declare-fun lt!50439 () ListLongMap!1503)

(assert (=> b!99874 (= lt!50439 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49942 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50442 () (_ BitVec 64))

(assert (=> b!99874 (= lt!50442 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50448 () (_ BitVec 64))

(assert (=> b!99874 (= lt!50448 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50438 () Unit!2982)

(assert (=> b!99874 (= lt!50438 (addStillContains!69 lt!50439 lt!50442 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50448))))

(assert (=> b!99874 (contains!792 (+!131 lt!50439 (tuple2!2309 lt!50442 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50448)))

(declare-fun lt!50446 () Unit!2982)

(assert (=> b!99874 (= lt!50446 lt!50438)))

(declare-fun lt!50428 () ListLongMap!1503)

(assert (=> b!99874 (= lt!50428 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49942 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50434 () (_ BitVec 64))

(assert (=> b!99874 (= lt!50434 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50431 () (_ BitVec 64))

(assert (=> b!99874 (= lt!50431 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50443 () Unit!2982)

(assert (=> b!99874 (= lt!50443 (addApplyDifferent!69 lt!50428 lt!50434 (minValue!2382 newMap!16) lt!50431))))

(assert (=> b!99874 (= (apply!93 (+!131 lt!50428 (tuple2!2309 lt!50434 (minValue!2382 newMap!16))) lt!50431) (apply!93 lt!50428 lt!50431))))

(declare-fun lt!50432 () Unit!2982)

(assert (=> b!99874 (= lt!50432 lt!50443)))

(declare-fun lt!50445 () ListLongMap!1503)

(assert (=> b!99874 (= lt!50445 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49942 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50449 () (_ BitVec 64))

(assert (=> b!99874 (= lt!50449 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50436 () (_ BitVec 64))

(assert (=> b!99874 (= lt!50436 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50430 () Unit!2982)

(assert (=> b!99874 (= lt!50430 (addApplyDifferent!69 lt!50445 lt!50449 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50436))))

(assert (=> b!99874 (= (apply!93 (+!131 lt!50445 (tuple2!2309 lt!50449 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50436) (apply!93 lt!50445 lt!50436))))

(declare-fun lt!50440 () Unit!2982)

(assert (=> b!99874 (= lt!50440 lt!50430)))

(declare-fun lt!50444 () ListLongMap!1503)

(assert (=> b!99874 (= lt!50444 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49942 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50447 () (_ BitVec 64))

(assert (=> b!99874 (= lt!50447 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50429 () (_ BitVec 64))

(assert (=> b!99874 (= lt!50429 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99874 (= lt!50435 (addApplyDifferent!69 lt!50444 lt!50447 (minValue!2382 newMap!16) lt!50429))))

(assert (=> b!99874 (= (apply!93 (+!131 lt!50444 (tuple2!2309 lt!50447 (minValue!2382 newMap!16))) lt!50429) (apply!93 lt!50444 lt!50429))))

(declare-fun b!99875 () Bool)

(declare-fun e!65049 () Bool)

(assert (=> b!99875 (= e!65049 (= (apply!93 lt!50433 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99875 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_values!2484 newMap!16))))))

(assert (=> b!99875 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99876 () Bool)

(assert (=> b!99876 (= e!65060 e!65049)))

(declare-fun res!50123 () Bool)

(assert (=> b!99876 (=> (not res!50123) (not e!65049))))

(assert (=> b!99876 (= res!50123 (contains!792 lt!50433 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99876 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!99877 () Bool)

(declare-fun e!65048 () Bool)

(assert (=> b!99877 (= e!65048 e!65059)))

(declare-fun res!50131 () Bool)

(declare-fun call!10269 () Bool)

(assert (=> b!99877 (= res!50131 call!10269)))

(assert (=> b!99877 (=> (not res!50131) (not e!65059))))

(declare-fun b!99878 () Bool)

(assert (=> b!99878 (= e!65055 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99879 () Bool)

(assert (=> b!99879 (= e!65057 call!10267)))

(declare-fun b!99880 () Bool)

(declare-fun call!10265 () ListLongMap!1503)

(assert (=> b!99880 (= e!65054 (+!131 call!10265 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!99881 () Bool)

(declare-fun call!10268 () Bool)

(assert (=> b!99881 (= e!65058 (not call!10268))))

(declare-fun b!99882 () Bool)

(declare-fun e!65050 () Bool)

(assert (=> b!99882 (= e!65050 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10261 () Bool)

(declare-fun c!17094 () Bool)

(assert (=> bm!10261 (= call!10265 (+!131 (ite c!17094 call!10264 (ite c!17090 call!10266 call!10263)) (ite (or c!17094 c!17090) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun bm!10262 () Bool)

(assert (=> bm!10262 (= call!10267 call!10265)))

(declare-fun b!99883 () Bool)

(declare-fun e!65052 () Bool)

(assert (=> b!99883 (= e!65058 e!65052)))

(declare-fun res!50125 () Bool)

(assert (=> b!99883 (= res!50125 call!10268)))

(assert (=> b!99883 (=> (not res!50125) (not e!65052))))

(declare-fun b!99884 () Bool)

(declare-fun c!17095 () Bool)

(assert (=> b!99884 (= c!17095 (and (not (= (bvand lt!49942 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!49942 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!99884 (= e!65057 e!65053)))

(declare-fun b!99885 () Bool)

(assert (=> b!99885 (= e!65056 e!65048)))

(declare-fun c!17091 () Bool)

(assert (=> b!99885 (= c!17091 (not (= (bvand lt!49942 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10263 () Bool)

(assert (=> bm!10263 (= call!10269 (contains!792 lt!50433 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10264 () Bool)

(assert (=> bm!10264 (= call!10263 call!10266)))

(declare-fun bm!10265 () Bool)

(assert (=> bm!10265 (= call!10268 (contains!792 lt!50433 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99886 () Bool)

(assert (=> b!99886 (= e!65048 (not call!10269))))

(declare-fun b!99887 () Bool)

(assert (=> b!99887 (= e!65052 (= (apply!93 lt!50433 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!26891 () Bool)

(assert (=> d!26891 e!65056))

(declare-fun res!50128 () Bool)

(assert (=> d!26891 (=> (not res!50128) (not e!65056))))

(assert (=> d!26891 (= res!50128 (or (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun lt!50437 () ListLongMap!1503)

(assert (=> d!26891 (= lt!50433 lt!50437)))

(declare-fun lt!50441 () Unit!2982)

(assert (=> d!26891 (= lt!50441 e!65051)))

(declare-fun c!17093 () Bool)

(assert (=> d!26891 (= c!17093 e!65050)))

(declare-fun res!50124 () Bool)

(assert (=> d!26891 (=> (not res!50124) (not e!65050))))

(assert (=> d!26891 (= res!50124 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26891 (= lt!50437 e!65054)))

(assert (=> d!26891 (= c!17094 (and (not (= (bvand lt!49942 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!49942 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26891 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26891 (= (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49942 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50433)))

(declare-fun bm!10266 () Bool)

(assert (=> bm!10266 (= call!10264 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49942 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (= (and d!26891 c!17094) b!99880))

(assert (= (and d!26891 (not c!17094)) b!99869))

(assert (= (and b!99869 c!17090) b!99879))

(assert (= (and b!99869 (not c!17090)) b!99884))

(assert (= (and b!99884 c!17095) b!99867))

(assert (= (and b!99884 (not c!17095)) b!99871))

(assert (= (or b!99867 b!99871) bm!10264))

(assert (= (or b!99879 bm!10264) bm!10260))

(assert (= (or b!99879 b!99867) bm!10262))

(assert (= (or b!99880 bm!10260) bm!10266))

(assert (= (or b!99880 bm!10262) bm!10261))

(assert (= (and d!26891 res!50124) b!99882))

(assert (= (and d!26891 c!17093) b!99874))

(assert (= (and d!26891 (not c!17093)) b!99873))

(assert (= (and d!26891 res!50128) b!99872))

(assert (= (and b!99872 res!50126) b!99878))

(assert (= (and b!99872 (not res!50127)) b!99876))

(assert (= (and b!99876 res!50123) b!99875))

(assert (= (and b!99872 res!50130) b!99868))

(assert (= (and b!99868 c!17092) b!99883))

(assert (= (and b!99868 (not c!17092)) b!99881))

(assert (= (and b!99883 res!50125) b!99887))

(assert (= (or b!99883 b!99881) bm!10265))

(assert (= (and b!99868 res!50129) b!99885))

(assert (= (and b!99885 c!17091) b!99877))

(assert (= (and b!99885 (not c!17091)) b!99886))

(assert (= (and b!99877 res!50131) b!99870))

(assert (= (or b!99877 b!99886) bm!10263))

(declare-fun b_lambda!4463 () Bool)

(assert (=> (not b_lambda!4463) (not b!99875)))

(assert (=> b!99875 t!5546))

(declare-fun b_and!6149 () Bool)

(assert (= b_and!6145 (and (=> t!5546 result!3299) b_and!6149)))

(assert (=> b!99875 t!5548))

(declare-fun b_and!6151 () Bool)

(assert (= b_and!6147 (and (=> t!5548 result!3301) b_and!6151)))

(declare-fun m!110027 () Bool)

(assert (=> b!99874 m!110027))

(declare-fun m!110029 () Bool)

(assert (=> b!99874 m!110029))

(declare-fun m!110031 () Bool)

(assert (=> b!99874 m!110031))

(declare-fun m!110033 () Bool)

(assert (=> b!99874 m!110033))

(declare-fun m!110035 () Bool)

(assert (=> b!99874 m!110035))

(assert (=> b!99874 m!109033))

(declare-fun m!110037 () Bool)

(assert (=> b!99874 m!110037))

(declare-fun m!110039 () Bool)

(assert (=> b!99874 m!110039))

(declare-fun m!110041 () Bool)

(assert (=> b!99874 m!110041))

(assert (=> b!99874 m!110027))

(declare-fun m!110043 () Bool)

(assert (=> b!99874 m!110043))

(assert (=> b!99874 m!108749))

(declare-fun m!110045 () Bool)

(assert (=> b!99874 m!110045))

(declare-fun m!110047 () Bool)

(assert (=> b!99874 m!110047))

(assert (=> b!99874 m!110029))

(declare-fun m!110049 () Bool)

(assert (=> b!99874 m!110049))

(assert (=> b!99874 m!110033))

(assert (=> b!99874 m!110037))

(declare-fun m!110051 () Bool)

(assert (=> b!99874 m!110051))

(declare-fun m!110053 () Bool)

(assert (=> b!99874 m!110053))

(assert (=> b!99874 m!108749))

(declare-fun m!110055 () Bool)

(assert (=> b!99874 m!110055))

(assert (=> b!99874 m!108749))

(declare-fun m!110057 () Bool)

(assert (=> b!99874 m!110057))

(assert (=> d!26891 m!109025))

(assert (=> bm!10266 m!108749))

(assert (=> bm!10266 m!110045))

(declare-fun m!110059 () Bool)

(assert (=> bm!10263 m!110059))

(assert (=> b!99878 m!109033))

(assert (=> b!99878 m!109033))

(assert (=> b!99878 m!109041))

(declare-fun m!110061 () Bool)

(assert (=> b!99887 m!110061))

(declare-fun m!110063 () Bool)

(assert (=> bm!10261 m!110063))

(declare-fun m!110065 () Bool)

(assert (=> bm!10265 m!110065))

(declare-fun m!110067 () Bool)

(assert (=> b!99880 m!110067))

(assert (=> b!99882 m!109033))

(assert (=> b!99882 m!109033))

(assert (=> b!99882 m!109041))

(assert (=> b!99876 m!109033))

(assert (=> b!99876 m!109033))

(declare-fun m!110069 () Bool)

(assert (=> b!99876 m!110069))

(assert (=> b!99875 m!109033))

(declare-fun m!110071 () Bool)

(assert (=> b!99875 m!110071))

(assert (=> b!99875 m!109121))

(assert (=> b!99875 m!109123))

(assert (=> b!99875 m!109121))

(assert (=> b!99875 m!109123))

(assert (=> b!99875 m!109125))

(assert (=> b!99875 m!109033))

(declare-fun m!110073 () Bool)

(assert (=> b!99870 m!110073))

(assert (=> d!26703 d!26891))

(declare-fun d!26893 () Bool)

(assert (=> d!26893 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49942 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> d!26893 true))

(declare-fun _$7!86 () Unit!2982)

(assert (=> d!26893 (= (choose!612 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) lt!49942 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2382 newMap!16) (defaultEntry!2501 newMap!16)) _$7!86)))

(declare-fun bs!4131 () Bool)

(assert (= bs!4131 d!26893))

(assert (=> bs!4131 m!108863))

(assert (=> bs!4131 m!108863))

(assert (=> bs!4131 m!109269))

(assert (=> bs!4131 m!108749))

(assert (=> bs!4131 m!109271))

(assert (=> d!26703 d!26893))

(assert (=> b!99573 d!26855))

(declare-fun b!99888 () Bool)

(declare-fun e!65061 () (_ BitVec 32))

(declare-fun call!10270 () (_ BitVec 32))

(assert (=> b!99888 (= e!65061 (bvadd #b00000000000000000000000000000001 call!10270))))

(declare-fun d!26895 () Bool)

(declare-fun lt!50450 () (_ BitVec 32))

(assert (=> d!26895 (and (bvsge lt!50450 #b00000000000000000000000000000000) (bvsle lt!50450 (bvsub (size!2263 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)))))

(declare-fun e!65062 () (_ BitVec 32))

(assert (=> d!26895 (= lt!50450 e!65062)))

(declare-fun c!17096 () Bool)

(assert (=> d!26895 (= c!17096 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))

(assert (=> d!26895 (and (bvsle #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2263 (_keys!4195 (_2!1164 lt!49941))) (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))

(assert (=> d!26895 (= (arrayCountValidKeys!0 (_keys!4195 (_2!1164 lt!49941)) #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))) lt!50450)))

(declare-fun b!99889 () Bool)

(assert (=> b!99889 (= e!65062 #b00000000000000000000000000000000)))

(declare-fun b!99890 () Bool)

(assert (=> b!99890 (= e!65062 e!65061)))

(declare-fun c!17097 () Bool)

(assert (=> b!99890 (= c!17097 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)))))

(declare-fun bm!10267 () Bool)

(assert (=> bm!10267 (= call!10270 (arrayCountValidKeys!0 (_keys!4195 (_2!1164 lt!49941)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))

(declare-fun b!99891 () Bool)

(assert (=> b!99891 (= e!65061 call!10270)))

(assert (= (and d!26895 c!17096) b!99889))

(assert (= (and d!26895 (not c!17096)) b!99890))

(assert (= (and b!99890 c!17097) b!99888))

(assert (= (and b!99890 (not c!17097)) b!99891))

(assert (= (or b!99888 b!99891) bm!10267))

(assert (=> b!99890 m!109883))

(assert (=> b!99890 m!109883))

(assert (=> b!99890 m!109891))

(declare-fun m!110075 () Bool)

(assert (=> bm!10267 m!110075))

(assert (=> b!99341 d!26895))

(declare-fun d!26897 () Bool)

(declare-fun res!50132 () Bool)

(declare-fun e!65063 () Bool)

(assert (=> d!26897 (=> res!50132 e!65063)))

(assert (=> d!26897 (= res!50132 (and ((_ is Cons!1564) (toList!767 lt!49838)) (= (_1!1165 (h!2159 (toList!767 lt!49838))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26897 (= (containsKey!155 (toList!767 lt!49838) #b1000000000000000000000000000000000000000000000000000000000000000) e!65063)))

(declare-fun b!99892 () Bool)

(declare-fun e!65064 () Bool)

(assert (=> b!99892 (= e!65063 e!65064)))

(declare-fun res!50133 () Bool)

(assert (=> b!99892 (=> (not res!50133) (not e!65064))))

(assert (=> b!99892 (= res!50133 (and (or (not ((_ is Cons!1564) (toList!767 lt!49838))) (bvsle (_1!1165 (h!2159 (toList!767 lt!49838))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1564) (toList!767 lt!49838)) (bvslt (_1!1165 (h!2159 (toList!767 lt!49838))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99893 () Bool)

(assert (=> b!99893 (= e!65064 (containsKey!155 (t!5534 (toList!767 lt!49838)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26897 (not res!50132)) b!99892))

(assert (= (and b!99892 res!50133) b!99893))

(declare-fun m!110077 () Bool)

(assert (=> b!99893 m!110077))

(assert (=> d!26727 d!26897))

(declare-fun b!99894 () Bool)

(declare-fun e!65067 () Bool)

(assert (=> b!99894 (= e!65067 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!99894 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!99895 () Bool)

(declare-fun e!65069 () Bool)

(declare-fun lt!50454 () ListLongMap!1503)

(assert (=> b!99895 (= e!65069 (= lt!50454 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99896 () Bool)

(declare-fun e!65071 () ListLongMap!1503)

(assert (=> b!99896 (= e!65071 (ListLongMap!1504 Nil!1565))))

(declare-fun b!99897 () Bool)

(assert (=> b!99897 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> b!99897 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2264 (_values!2484 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun e!65066 () Bool)

(assert (=> b!99897 (= e!65066 (= (apply!93 lt!50454 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!10268 () Bool)

(declare-fun call!10271 () ListLongMap!1503)

(assert (=> bm!10268 (= call!10271 (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun d!26899 () Bool)

(declare-fun e!65065 () Bool)

(assert (=> d!26899 e!65065))

(declare-fun res!50135 () Bool)

(assert (=> d!26899 (=> (not res!50135) (not e!65065))))

(assert (=> d!26899 (= res!50135 (not (contains!792 lt!50454 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26899 (= lt!50454 e!65071)))

(declare-fun c!17098 () Bool)

(assert (=> d!26899 (= c!17098 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!26899 (validMask!0 (mask!6608 (v!2817 (underlying!341 thiss!992))))))

(assert (=> d!26899 (= (getCurrentListMapNoExtraKeys!96 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (_values!2484 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992))) (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) (minValue!2382 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992)))) lt!50454)))

(declare-fun b!99898 () Bool)

(declare-fun e!65070 () ListLongMap!1503)

(assert (=> b!99898 (= e!65071 e!65070)))

(declare-fun c!17101 () Bool)

(assert (=> b!99898 (= c!17101 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!99899 () Bool)

(declare-fun e!65068 () Bool)

(assert (=> b!99899 (= e!65068 e!65069)))

(declare-fun c!17099 () Bool)

(assert (=> b!99899 (= c!17099 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99900 () Bool)

(declare-fun res!50136 () Bool)

(assert (=> b!99900 (=> (not res!50136) (not e!65065))))

(assert (=> b!99900 (= res!50136 (not (contains!792 lt!50454 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99901 () Bool)

(declare-fun lt!50455 () Unit!2982)

(declare-fun lt!50452 () Unit!2982)

(assert (=> b!99901 (= lt!50455 lt!50452)))

(declare-fun lt!50451 () V!3161)

(declare-fun lt!50457 () (_ BitVec 64))

(declare-fun lt!50456 () ListLongMap!1503)

(declare-fun lt!50453 () (_ BitVec 64))

(assert (=> b!99901 (not (contains!792 (+!131 lt!50456 (tuple2!2309 lt!50457 lt!50451)) lt!50453))))

(assert (=> b!99901 (= lt!50452 (addStillNotContains!43 lt!50456 lt!50457 lt!50451 lt!50453))))

(assert (=> b!99901 (= lt!50453 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99901 (= lt!50451 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99901 (= lt!50457 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!99901 (= lt!50456 call!10271)))

(assert (=> b!99901 (= e!65070 (+!131 call!10271 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99902 () Bool)

(assert (=> b!99902 (= e!65068 e!65066)))

(assert (=> b!99902 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun res!50134 () Bool)

(assert (=> b!99902 (= res!50134 (contains!792 lt!50454 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!99902 (=> (not res!50134) (not e!65066))))

(declare-fun b!99903 () Bool)

(assert (=> b!99903 (= e!65065 e!65068)))

(declare-fun c!17100 () Bool)

(assert (=> b!99903 (= c!17100 e!65067)))

(declare-fun res!50137 () Bool)

(assert (=> b!99903 (=> (not res!50137) (not e!65067))))

(assert (=> b!99903 (= res!50137 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99904 () Bool)

(assert (=> b!99904 (= e!65070 call!10271)))

(declare-fun b!99905 () Bool)

(assert (=> b!99905 (= e!65069 (isEmpty!365 lt!50454))))

(assert (= (and d!26899 c!17098) b!99896))

(assert (= (and d!26899 (not c!17098)) b!99898))

(assert (= (and b!99898 c!17101) b!99901))

(assert (= (and b!99898 (not c!17101)) b!99904))

(assert (= (or b!99901 b!99904) bm!10268))

(assert (= (and d!26899 res!50135) b!99900))

(assert (= (and b!99900 res!50136) b!99903))

(assert (= (and b!99903 res!50137) b!99894))

(assert (= (and b!99903 c!17100) b!99902))

(assert (= (and b!99903 (not c!17100)) b!99899))

(assert (= (and b!99902 res!50134) b!99897))

(assert (= (and b!99899 c!17099) b!99895))

(assert (= (and b!99899 (not c!17099)) b!99905))

(declare-fun b_lambda!4465 () Bool)

(assert (=> (not b_lambda!4465) (not b!99897)))

(assert (=> b!99897 t!5531))

(declare-fun b_and!6153 () Bool)

(assert (= b_and!6149 (and (=> t!5531 result!3279) b_and!6153)))

(assert (=> b!99897 t!5533))

(declare-fun b_and!6155 () Bool)

(assert (= b_and!6151 (and (=> t!5533 result!3283) b_and!6155)))

(declare-fun b_lambda!4467 () Bool)

(assert (=> (not b_lambda!4467) (not b!99901)))

(assert (=> b!99901 t!5531))

(declare-fun b_and!6157 () Bool)

(assert (= b_and!6153 (and (=> t!5531 result!3279) b_and!6157)))

(assert (=> b!99901 t!5533))

(declare-fun b_and!6159 () Bool)

(assert (= b_and!6155 (and (=> t!5533 result!3283) b_and!6159)))

(declare-fun m!110079 () Bool)

(assert (=> bm!10268 m!110079))

(declare-fun m!110081 () Bool)

(assert (=> b!99905 m!110081))

(declare-fun m!110083 () Bool)

(assert (=> b!99900 m!110083))

(assert (=> b!99898 m!109301))

(assert (=> b!99898 m!109301))

(declare-fun m!110085 () Bool)

(assert (=> b!99898 m!110085))

(declare-fun m!110087 () Bool)

(assert (=> b!99901 m!110087))

(declare-fun m!110089 () Bool)

(assert (=> b!99901 m!110089))

(declare-fun m!110091 () Bool)

(assert (=> b!99901 m!110091))

(declare-fun m!110093 () Bool)

(assert (=> b!99901 m!110093))

(assert (=> b!99901 m!110089))

(assert (=> b!99901 m!108747))

(assert (=> b!99901 m!109301))

(assert (=> b!99901 m!110087))

(assert (=> b!99901 m!108747))

(declare-fun m!110095 () Bool)

(assert (=> b!99901 m!110095))

(declare-fun m!110097 () Bool)

(assert (=> b!99901 m!110097))

(assert (=> b!99894 m!109301))

(assert (=> b!99894 m!109301))

(assert (=> b!99894 m!110085))

(assert (=> b!99902 m!109301))

(assert (=> b!99902 m!109301))

(declare-fun m!110099 () Bool)

(assert (=> b!99902 m!110099))

(declare-fun m!110101 () Bool)

(assert (=> d!26899 m!110101))

(assert (=> d!26899 m!108767))

(assert (=> b!99895 m!110079))

(assert (=> b!99897 m!110087))

(assert (=> b!99897 m!109301))

(declare-fun m!110103 () Bool)

(assert (=> b!99897 m!110103))

(assert (=> b!99897 m!108747))

(assert (=> b!99897 m!109301))

(assert (=> b!99897 m!110087))

(assert (=> b!99897 m!108747))

(assert (=> b!99897 m!110095))

(assert (=> b!99429 d!26899))

(declare-fun b!99909 () Bool)

(declare-fun e!65073 () Option!158)

(assert (=> b!99909 (= e!65073 None!156)))

(declare-fun b!99907 () Bool)

(declare-fun e!65072 () Option!158)

(assert (=> b!99907 (= e!65072 e!65073)))

(declare-fun c!17103 () Bool)

(assert (=> b!99907 (= c!17103 (and ((_ is Cons!1564) (toList!767 lt!50066)) (not (= (_1!1165 (h!2159 (toList!767 lt!50066))) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!99906 () Bool)

(assert (=> b!99906 (= e!65072 (Some!157 (_2!1165 (h!2159 (toList!767 lt!50066)))))))

(declare-fun c!17102 () Bool)

(declare-fun d!26901 () Bool)

(assert (=> d!26901 (= c!17102 (and ((_ is Cons!1564) (toList!767 lt!50066)) (= (_1!1165 (h!2159 (toList!767 lt!50066))) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!26901 (= (getValueByKey!152 (toList!767 lt!50066) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65072)))

(declare-fun b!99908 () Bool)

(assert (=> b!99908 (= e!65073 (getValueByKey!152 (t!5534 (toList!767 lt!50066)) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!26901 c!17102) b!99906))

(assert (= (and d!26901 (not c!17102)) b!99907))

(assert (= (and b!99907 c!17103) b!99908))

(assert (= (and b!99907 (not c!17103)) b!99909))

(declare-fun m!110105 () Bool)

(assert (=> b!99908 m!110105))

(assert (=> b!99456 d!26901))

(declare-fun d!26903 () Bool)

(declare-fun res!50138 () Bool)

(declare-fun e!65074 () Bool)

(assert (=> d!26903 (=> res!50138 e!65074)))

(assert (=> d!26903 (= res!50138 (and ((_ is Cons!1564) (t!5534 (toList!767 lt!49742))) (= (_1!1165 (h!2159 (t!5534 (toList!767 lt!49742)))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (=> d!26903 (= (containsKey!155 (t!5534 (toList!767 lt!49742)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) e!65074)))

(declare-fun b!99910 () Bool)

(declare-fun e!65075 () Bool)

(assert (=> b!99910 (= e!65074 e!65075)))

(declare-fun res!50139 () Bool)

(assert (=> b!99910 (=> (not res!50139) (not e!65075))))

(assert (=> b!99910 (= res!50139 (and (or (not ((_ is Cons!1564) (t!5534 (toList!767 lt!49742)))) (bvsle (_1!1165 (h!2159 (t!5534 (toList!767 lt!49742)))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))) ((_ is Cons!1564) (t!5534 (toList!767 lt!49742))) (bvslt (_1!1165 (h!2159 (t!5534 (toList!767 lt!49742)))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(declare-fun b!99911 () Bool)

(assert (=> b!99911 (= e!65075 (containsKey!155 (t!5534 (t!5534 (toList!767 lt!49742))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26903 (not res!50138)) b!99910))

(assert (= (and b!99910 res!50139) b!99911))

(assert (=> b!99911 m!108735))

(declare-fun m!110107 () Bool)

(assert (=> b!99911 m!110107))

(assert (=> b!99355 d!26903))

(declare-fun d!26905 () Bool)

(assert (=> d!26905 (= (inRange!0 (ite c!17027 (index!3137 lt!50269) (ite c!17028 (index!3136 lt!50265) (index!3139 lt!50265))) (mask!6608 newMap!16)) (and (bvsge (ite c!17027 (index!3137 lt!50269) (ite c!17028 (index!3136 lt!50265) (index!3139 lt!50265))) #b00000000000000000000000000000000) (bvslt (ite c!17027 (index!3137 lt!50269) (ite c!17028 (index!3136 lt!50265) (index!3139 lt!50265))) (bvadd (mask!6608 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10241 d!26905))

(declare-fun b!99915 () Bool)

(declare-fun e!65077 () Option!158)

(assert (=> b!99915 (= e!65077 None!156)))

(declare-fun b!99913 () Bool)

(declare-fun e!65076 () Option!158)

(assert (=> b!99913 (= e!65076 e!65077)))

(declare-fun c!17105 () Bool)

(assert (=> b!99913 (= c!17105 (and ((_ is Cons!1564) (toList!767 lt!49985)) (not (= (_1!1165 (h!2159 (toList!767 lt!49985))) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))))

(declare-fun b!99912 () Bool)

(assert (=> b!99912 (= e!65076 (Some!157 (_2!1165 (h!2159 (toList!767 lt!49985)))))))

(declare-fun c!17104 () Bool)

(declare-fun d!26907 () Bool)

(assert (=> d!26907 (= c!17104 (and ((_ is Cons!1564) (toList!767 lt!49985)) (= (_1!1165 (h!2159 (toList!767 lt!49985))) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(assert (=> d!26907 (= (getValueByKey!152 (toList!767 lt!49985) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) e!65076)))

(declare-fun b!99914 () Bool)

(assert (=> b!99914 (= e!65077 (getValueByKey!152 (t!5534 (toList!767 lt!49985)) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!26907 c!17104) b!99912))

(assert (= (and d!26907 (not c!17104)) b!99913))

(assert (= (and b!99913 c!17105) b!99914))

(assert (= (and b!99913 (not c!17105)) b!99915))

(declare-fun m!110109 () Bool)

(assert (=> b!99914 m!110109))

(assert (=> b!99348 d!26907))

(assert (=> d!26759 d!26847))

(declare-fun d!26909 () Bool)

(declare-fun e!65079 () Bool)

(assert (=> d!26909 e!65079))

(declare-fun res!50140 () Bool)

(assert (=> d!26909 (=> res!50140 e!65079)))

(declare-fun lt!50460 () Bool)

(assert (=> d!26909 (= res!50140 (not lt!50460))))

(declare-fun lt!50459 () Bool)

(assert (=> d!26909 (= lt!50460 lt!50459)))

(declare-fun lt!50458 () Unit!2982)

(declare-fun e!65078 () Unit!2982)

(assert (=> d!26909 (= lt!50458 e!65078)))

(declare-fun c!17106 () Bool)

(assert (=> d!26909 (= c!17106 lt!50459)))

(assert (=> d!26909 (= lt!50459 (containsKey!155 (toList!767 lt!50108) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26909 (= (contains!792 lt!50108 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50460)))

(declare-fun b!99916 () Bool)

(declare-fun lt!50461 () Unit!2982)

(assert (=> b!99916 (= e!65078 lt!50461)))

(assert (=> b!99916 (= lt!50461 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50108) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!99916 (isDefined!104 (getValueByKey!152 (toList!767 lt!50108) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99917 () Bool)

(declare-fun Unit!3015 () Unit!2982)

(assert (=> b!99917 (= e!65078 Unit!3015)))

(declare-fun b!99918 () Bool)

(assert (=> b!99918 (= e!65079 (isDefined!104 (getValueByKey!152 (toList!767 lt!50108) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26909 c!17106) b!99916))

(assert (= (and d!26909 (not c!17106)) b!99917))

(assert (= (and d!26909 (not res!50140)) b!99918))

(declare-fun m!110111 () Bool)

(assert (=> d!26909 m!110111))

(declare-fun m!110113 () Bool)

(assert (=> b!99916 m!110113))

(assert (=> b!99916 m!109347))

(assert (=> b!99916 m!109347))

(declare-fun m!110115 () Bool)

(assert (=> b!99916 m!110115))

(assert (=> b!99918 m!109347))

(assert (=> b!99918 m!109347))

(assert (=> b!99918 m!110115))

(assert (=> d!26731 d!26909))

(declare-fun b!99922 () Bool)

(declare-fun e!65081 () Option!158)

(assert (=> b!99922 (= e!65081 None!156)))

(declare-fun b!99920 () Bool)

(declare-fun e!65080 () Option!158)

(assert (=> b!99920 (= e!65080 e!65081)))

(declare-fun c!17108 () Bool)

(assert (=> b!99920 (= c!17108 (and ((_ is Cons!1564) lt!50107) (not (= (_1!1165 (h!2159 lt!50107)) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!99919 () Bool)

(assert (=> b!99919 (= e!65080 (Some!157 (_2!1165 (h!2159 lt!50107))))))

(declare-fun c!17107 () Bool)

(declare-fun d!26911 () Bool)

(assert (=> d!26911 (= c!17107 (and ((_ is Cons!1564) lt!50107) (= (_1!1165 (h!2159 lt!50107)) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26911 (= (getValueByKey!152 lt!50107 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!65080)))

(declare-fun b!99921 () Bool)

(assert (=> b!99921 (= e!65081 (getValueByKey!152 (t!5534 lt!50107) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26911 c!17107) b!99919))

(assert (= (and d!26911 (not c!17107)) b!99920))

(assert (= (and b!99920 c!17108) b!99921))

(assert (= (and b!99920 (not c!17108)) b!99922))

(declare-fun m!110117 () Bool)

(assert (=> b!99921 m!110117))

(assert (=> d!26731 d!26911))

(declare-fun d!26913 () Bool)

(assert (=> d!26913 (= (getValueByKey!152 lt!50107 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50464 () Unit!2982)

(declare-fun choose!619 (List!1568 (_ BitVec 64) V!3161) Unit!2982)

(assert (=> d!26913 (= lt!50464 (choose!619 lt!50107 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!65084 () Bool)

(assert (=> d!26913 e!65084))

(declare-fun res!50145 () Bool)

(assert (=> d!26913 (=> (not res!50145) (not e!65084))))

(assert (=> d!26913 (= res!50145 (isStrictlySorted!292 lt!50107))))

(assert (=> d!26913 (= (lemmaContainsTupThenGetReturnValue!68 lt!50107 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50464)))

(declare-fun b!99927 () Bool)

(declare-fun res!50146 () Bool)

(assert (=> b!99927 (=> (not res!50146) (not e!65084))))

(assert (=> b!99927 (= res!50146 (containsKey!155 lt!50107 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99928 () Bool)

(assert (=> b!99928 (= e!65084 (contains!795 lt!50107 (tuple2!2309 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26913 res!50145) b!99927))

(assert (= (and b!99927 res!50146) b!99928))

(assert (=> d!26913 m!109341))

(declare-fun m!110119 () Bool)

(assert (=> d!26913 m!110119))

(declare-fun m!110121 () Bool)

(assert (=> d!26913 m!110121))

(declare-fun m!110123 () Bool)

(assert (=> b!99927 m!110123))

(declare-fun m!110125 () Bool)

(assert (=> b!99928 m!110125))

(assert (=> d!26731 d!26913))

(declare-fun b!99949 () Bool)

(declare-fun e!65097 () List!1568)

(assert (=> b!99949 (= e!65097 (insertStrictlySorted!71 (t!5534 (toList!767 call!10176)) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!10275 () Bool)

(declare-fun call!10278 () List!1568)

(declare-fun call!10280 () List!1568)

(assert (=> bm!10275 (= call!10278 call!10280)))

(declare-fun b!99950 () Bool)

(declare-fun e!65096 () List!1568)

(declare-fun e!65095 () List!1568)

(assert (=> b!99950 (= e!65096 e!65095)))

(declare-fun c!17119 () Bool)

(assert (=> b!99950 (= c!17119 (and ((_ is Cons!1564) (toList!767 call!10176)) (= (_1!1165 (h!2159 (toList!767 call!10176))) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!10276 () Bool)

(declare-fun c!17120 () Bool)

(declare-fun $colon$colon!78 (List!1568 tuple2!2308) List!1568)

(assert (=> bm!10276 (= call!10280 ($colon$colon!78 e!65097 (ite c!17120 (h!2159 (toList!767 call!10176)) (tuple2!2309 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!17117 () Bool)

(assert (=> bm!10276 (= c!17117 c!17120)))

(declare-fun c!17118 () Bool)

(declare-fun b!99951 () Bool)

(assert (=> b!99951 (= c!17118 (and ((_ is Cons!1564) (toList!767 call!10176)) (bvsgt (_1!1165 (h!2159 (toList!767 call!10176))) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!65098 () List!1568)

(assert (=> b!99951 (= e!65095 e!65098)))

(declare-fun d!26915 () Bool)

(declare-fun e!65099 () Bool)

(assert (=> d!26915 e!65099))

(declare-fun res!50151 () Bool)

(assert (=> d!26915 (=> (not res!50151) (not e!65099))))

(declare-fun lt!50467 () List!1568)

(assert (=> d!26915 (= res!50151 (isStrictlySorted!292 lt!50467))))

(assert (=> d!26915 (= lt!50467 e!65096)))

(assert (=> d!26915 (= c!17120 (and ((_ is Cons!1564) (toList!767 call!10176)) (bvslt (_1!1165 (h!2159 (toList!767 call!10176))) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26915 (isStrictlySorted!292 (toList!767 call!10176))))

(assert (=> d!26915 (= (insertStrictlySorted!71 (toList!767 call!10176) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50467)))

(declare-fun b!99952 () Bool)

(declare-fun res!50152 () Bool)

(assert (=> b!99952 (=> (not res!50152) (not e!65099))))

(assert (=> b!99952 (= res!50152 (containsKey!155 lt!50467 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99953 () Bool)

(assert (=> b!99953 (= e!65097 (ite c!17119 (t!5534 (toList!767 call!10176)) (ite c!17118 (Cons!1564 (h!2159 (toList!767 call!10176)) (t!5534 (toList!767 call!10176))) Nil!1565)))))

(declare-fun b!99954 () Bool)

(assert (=> b!99954 (= e!65095 call!10278)))

(declare-fun b!99955 () Bool)

(assert (=> b!99955 (= e!65099 (contains!795 lt!50467 (tuple2!2309 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99956 () Bool)

(declare-fun call!10279 () List!1568)

(assert (=> b!99956 (= e!65098 call!10279)))

(declare-fun b!99957 () Bool)

(assert (=> b!99957 (= e!65096 call!10280)))

(declare-fun bm!10277 () Bool)

(assert (=> bm!10277 (= call!10279 call!10278)))

(declare-fun b!99958 () Bool)

(assert (=> b!99958 (= e!65098 call!10279)))

(assert (= (and d!26915 c!17120) b!99957))

(assert (= (and d!26915 (not c!17120)) b!99950))

(assert (= (and b!99950 c!17119) b!99954))

(assert (= (and b!99950 (not c!17119)) b!99951))

(assert (= (and b!99951 c!17118) b!99958))

(assert (= (and b!99951 (not c!17118)) b!99956))

(assert (= (or b!99958 b!99956) bm!10277))

(assert (= (or b!99954 bm!10277) bm!10275))

(assert (= (or b!99957 bm!10275) bm!10276))

(assert (= (and bm!10276 c!17117) b!99949))

(assert (= (and bm!10276 (not c!17117)) b!99953))

(assert (= (and d!26915 res!50151) b!99952))

(assert (= (and b!99952 res!50152) b!99955))

(declare-fun m!110127 () Bool)

(assert (=> b!99952 m!110127))

(declare-fun m!110129 () Bool)

(assert (=> bm!10276 m!110129))

(declare-fun m!110131 () Bool)

(assert (=> d!26915 m!110131))

(declare-fun m!110133 () Bool)

(assert (=> d!26915 m!110133))

(declare-fun m!110135 () Bool)

(assert (=> b!99949 m!110135))

(declare-fun m!110137 () Bool)

(assert (=> b!99955 m!110137))

(assert (=> d!26731 d!26915))

(declare-fun d!26917 () Bool)

(assert (not d!26917))

(assert (=> b!99497 d!26917))

(assert (=> b!99569 d!26855))

(declare-fun d!26919 () Bool)

(declare-fun e!65101 () Bool)

(assert (=> d!26919 e!65101))

(declare-fun res!50153 () Bool)

(assert (=> d!26919 (=> res!50153 e!65101)))

(declare-fun lt!50470 () Bool)

(assert (=> d!26919 (= res!50153 (not lt!50470))))

(declare-fun lt!50469 () Bool)

(assert (=> d!26919 (= lt!50470 lt!50469)))

(declare-fun lt!50468 () Unit!2982)

(declare-fun e!65100 () Unit!2982)

(assert (=> d!26919 (= lt!50468 e!65100)))

(declare-fun c!17121 () Bool)

(assert (=> d!26919 (= c!17121 lt!50469)))

(assert (=> d!26919 (= lt!50469 (containsKey!155 (toList!767 lt!50066) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!26919 (= (contains!792 lt!50066 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50470)))

(declare-fun b!99959 () Bool)

(declare-fun lt!50471 () Unit!2982)

(assert (=> b!99959 (= e!65100 lt!50471)))

(assert (=> b!99959 (= lt!50471 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50066) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> b!99959 (isDefined!104 (getValueByKey!152 (toList!767 lt!50066) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!99960 () Bool)

(declare-fun Unit!3016 () Unit!2982)

(assert (=> b!99960 (= e!65100 Unit!3016)))

(declare-fun b!99961 () Bool)

(assert (=> b!99961 (= e!65101 (isDefined!104 (getValueByKey!152 (toList!767 lt!50066) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!26919 c!17121) b!99959))

(assert (= (and d!26919 (not c!17121)) b!99960))

(assert (= (and d!26919 (not res!50153)) b!99961))

(declare-fun m!110139 () Bool)

(assert (=> d!26919 m!110139))

(declare-fun m!110141 () Bool)

(assert (=> b!99959 m!110141))

(assert (=> b!99959 m!109253))

(assert (=> b!99959 m!109253))

(declare-fun m!110143 () Bool)

(assert (=> b!99959 m!110143))

(assert (=> b!99961 m!109253))

(assert (=> b!99961 m!109253))

(assert (=> b!99961 m!110143))

(assert (=> d!26699 d!26919))

(declare-fun b!99965 () Bool)

(declare-fun e!65103 () Option!158)

(assert (=> b!99965 (= e!65103 None!156)))

(declare-fun b!99963 () Bool)

(declare-fun e!65102 () Option!158)

(assert (=> b!99963 (= e!65102 e!65103)))

(declare-fun c!17123 () Bool)

(assert (=> b!99963 (= c!17123 (and ((_ is Cons!1564) lt!50065) (not (= (_1!1165 (h!2159 lt!50065)) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!99962 () Bool)

(assert (=> b!99962 (= e!65102 (Some!157 (_2!1165 (h!2159 lt!50065))))))

(declare-fun d!26921 () Bool)

(declare-fun c!17122 () Bool)

(assert (=> d!26921 (= c!17122 (and ((_ is Cons!1564) lt!50065) (= (_1!1165 (h!2159 lt!50065)) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!26921 (= (getValueByKey!152 lt!50065 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65102)))

(declare-fun b!99964 () Bool)

(assert (=> b!99964 (= e!65103 (getValueByKey!152 (t!5534 lt!50065) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!26921 c!17122) b!99962))

(assert (= (and d!26921 (not c!17122)) b!99963))

(assert (= (and b!99963 c!17123) b!99964))

(assert (= (and b!99963 (not c!17123)) b!99965))

(declare-fun m!110145 () Bool)

(assert (=> b!99964 m!110145))

(assert (=> d!26699 d!26921))

(declare-fun d!26923 () Bool)

(assert (=> d!26923 (= (getValueByKey!152 lt!50065 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50472 () Unit!2982)

(assert (=> d!26923 (= lt!50472 (choose!619 lt!50065 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun e!65104 () Bool)

(assert (=> d!26923 e!65104))

(declare-fun res!50154 () Bool)

(assert (=> d!26923 (=> (not res!50154) (not e!65104))))

(assert (=> d!26923 (= res!50154 (isStrictlySorted!292 lt!50065))))

(assert (=> d!26923 (= (lemmaContainsTupThenGetReturnValue!68 lt!50065 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50472)))

(declare-fun b!99966 () Bool)

(declare-fun res!50155 () Bool)

(assert (=> b!99966 (=> (not res!50155) (not e!65104))))

(assert (=> b!99966 (= res!50155 (containsKey!155 lt!50065 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!99967 () Bool)

(assert (=> b!99967 (= e!65104 (contains!795 lt!50065 (tuple2!2309 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!26923 res!50154) b!99966))

(assert (= (and b!99966 res!50155) b!99967))

(assert (=> d!26923 m!109247))

(declare-fun m!110147 () Bool)

(assert (=> d!26923 m!110147))

(declare-fun m!110149 () Bool)

(assert (=> d!26923 m!110149))

(declare-fun m!110151 () Bool)

(assert (=> b!99966 m!110151))

(declare-fun m!110153 () Bool)

(assert (=> b!99967 m!110153))

(assert (=> d!26699 d!26923))

(declare-fun e!65107 () List!1568)

(declare-fun b!99968 () Bool)

(assert (=> b!99968 (= e!65107 (insertStrictlySorted!71 (t!5534 (toList!767 lt!49849)) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun bm!10278 () Bool)

(declare-fun call!10281 () List!1568)

(declare-fun call!10283 () List!1568)

(assert (=> bm!10278 (= call!10281 call!10283)))

(declare-fun b!99969 () Bool)

(declare-fun e!65106 () List!1568)

(declare-fun e!65105 () List!1568)

(assert (=> b!99969 (= e!65106 e!65105)))

(declare-fun c!17126 () Bool)

(assert (=> b!99969 (= c!17126 (and ((_ is Cons!1564) (toList!767 lt!49849)) (= (_1!1165 (h!2159 (toList!767 lt!49849))) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun bm!10279 () Bool)

(declare-fun c!17127 () Bool)

(assert (=> bm!10279 (= call!10283 ($colon$colon!78 e!65107 (ite c!17127 (h!2159 (toList!767 lt!49849)) (tuple2!2309 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun c!17124 () Bool)

(assert (=> bm!10279 (= c!17124 c!17127)))

(declare-fun c!17125 () Bool)

(declare-fun b!99970 () Bool)

(assert (=> b!99970 (= c!17125 (and ((_ is Cons!1564) (toList!767 lt!49849)) (bvsgt (_1!1165 (h!2159 (toList!767 lt!49849))) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun e!65108 () List!1568)

(assert (=> b!99970 (= e!65105 e!65108)))

(declare-fun d!26925 () Bool)

(declare-fun e!65109 () Bool)

(assert (=> d!26925 e!65109))

(declare-fun res!50156 () Bool)

(assert (=> d!26925 (=> (not res!50156) (not e!65109))))

(declare-fun lt!50473 () List!1568)

(assert (=> d!26925 (= res!50156 (isStrictlySorted!292 lt!50473))))

(assert (=> d!26925 (= lt!50473 e!65106)))

(assert (=> d!26925 (= c!17127 (and ((_ is Cons!1564) (toList!767 lt!49849)) (bvslt (_1!1165 (h!2159 (toList!767 lt!49849))) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!26925 (isStrictlySorted!292 (toList!767 lt!49849))))

(assert (=> d!26925 (= (insertStrictlySorted!71 (toList!767 lt!49849) (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50473)))

(declare-fun b!99971 () Bool)

(declare-fun res!50157 () Bool)

(assert (=> b!99971 (=> (not res!50157) (not e!65109))))

(assert (=> b!99971 (= res!50157 (containsKey!155 lt!50473 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!99972 () Bool)

(assert (=> b!99972 (= e!65107 (ite c!17126 (t!5534 (toList!767 lt!49849)) (ite c!17125 (Cons!1564 (h!2159 (toList!767 lt!49849)) (t!5534 (toList!767 lt!49849))) Nil!1565)))))

(declare-fun b!99973 () Bool)

(assert (=> b!99973 (= e!65105 call!10281)))

(declare-fun b!99974 () Bool)

(assert (=> b!99974 (= e!65109 (contains!795 lt!50473 (tuple2!2309 (_1!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!99975 () Bool)

(declare-fun call!10282 () List!1568)

(assert (=> b!99975 (= e!65108 call!10282)))

(declare-fun b!99976 () Bool)

(assert (=> b!99976 (= e!65106 call!10283)))

(declare-fun bm!10280 () Bool)

(assert (=> bm!10280 (= call!10282 call!10281)))

(declare-fun b!99977 () Bool)

(assert (=> b!99977 (= e!65108 call!10282)))

(assert (= (and d!26925 c!17127) b!99976))

(assert (= (and d!26925 (not c!17127)) b!99969))

(assert (= (and b!99969 c!17126) b!99973))

(assert (= (and b!99969 (not c!17126)) b!99970))

(assert (= (and b!99970 c!17125) b!99977))

(assert (= (and b!99970 (not c!17125)) b!99975))

(assert (= (or b!99977 b!99975) bm!10280))

(assert (= (or b!99973 bm!10280) bm!10278))

(assert (= (or b!99976 bm!10278) bm!10279))

(assert (= (and bm!10279 c!17124) b!99968))

(assert (= (and bm!10279 (not c!17124)) b!99972))

(assert (= (and d!26925 res!50156) b!99971))

(assert (= (and b!99971 res!50157) b!99974))

(declare-fun m!110155 () Bool)

(assert (=> b!99971 m!110155))

(declare-fun m!110157 () Bool)

(assert (=> bm!10279 m!110157))

(declare-fun m!110159 () Bool)

(assert (=> d!26925 m!110159))

(declare-fun m!110161 () Bool)

(assert (=> d!26925 m!110161))

(declare-fun m!110163 () Bool)

(assert (=> b!99968 m!110163))

(declare-fun m!110165 () Bool)

(assert (=> b!99974 m!110165))

(assert (=> d!26699 d!26925))

(declare-fun d!26927 () Bool)

(declare-fun e!65111 () Bool)

(assert (=> d!26927 e!65111))

(declare-fun res!50158 () Bool)

(assert (=> d!26927 (=> res!50158 e!65111)))

(declare-fun lt!50476 () Bool)

(assert (=> d!26927 (= res!50158 (not lt!50476))))

(declare-fun lt!50475 () Bool)

(assert (=> d!26927 (= lt!50476 lt!50475)))

(declare-fun lt!50474 () Unit!2982)

(declare-fun e!65110 () Unit!2982)

(assert (=> d!26927 (= lt!50474 e!65110)))

(declare-fun c!17128 () Bool)

(assert (=> d!26927 (= c!17128 lt!50475)))

(assert (=> d!26927 (= lt!50475 (containsKey!155 (toList!767 (map!1256 (_2!1164 lt!50250))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!26927 (= (contains!792 (map!1256 (_2!1164 lt!50250)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!50476)))

(declare-fun b!99978 () Bool)

(declare-fun lt!50477 () Unit!2982)

(assert (=> b!99978 (= e!65110 lt!50477)))

(assert (=> b!99978 (= lt!50477 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (map!1256 (_2!1164 lt!50250))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> b!99978 (isDefined!104 (getValueByKey!152 (toList!767 (map!1256 (_2!1164 lt!50250))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!99979 () Bool)

(declare-fun Unit!3017 () Unit!2982)

(assert (=> b!99979 (= e!65110 Unit!3017)))

(declare-fun b!99980 () Bool)

(assert (=> b!99980 (= e!65111 (isDefined!104 (getValueByKey!152 (toList!767 (map!1256 (_2!1164 lt!50250))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (= (and d!26927 c!17128) b!99978))

(assert (= (and d!26927 (not c!17128)) b!99979))

(assert (= (and d!26927 (not res!50158)) b!99980))

(assert (=> d!26927 m!108735))

(declare-fun m!110167 () Bool)

(assert (=> d!26927 m!110167))

(assert (=> b!99978 m!108735))

(declare-fun m!110169 () Bool)

(assert (=> b!99978 m!110169))

(assert (=> b!99978 m!108735))

(declare-fun m!110171 () Bool)

(assert (=> b!99978 m!110171))

(assert (=> b!99978 m!110171))

(declare-fun m!110173 () Bool)

(assert (=> b!99978 m!110173))

(assert (=> b!99980 m!108735))

(assert (=> b!99980 m!110171))

(assert (=> b!99980 m!110171))

(assert (=> b!99980 m!110173))

(assert (=> b!99653 d!26927))

(declare-fun d!26929 () Bool)

(assert (=> d!26929 (= (map!1256 (_2!1164 lt!50250)) (getCurrentListMap!456 (_keys!4195 (_2!1164 lt!50250)) (_values!2484 (_2!1164 lt!50250)) (mask!6608 (_2!1164 lt!50250)) (extraKeys!2318 (_2!1164 lt!50250)) (zeroValue!2382 (_2!1164 lt!50250)) (minValue!2382 (_2!1164 lt!50250)) #b00000000000000000000000000000000 (defaultEntry!2501 (_2!1164 lt!50250))))))

(declare-fun bs!4132 () Bool)

(assert (= bs!4132 d!26929))

(declare-fun m!110175 () Bool)

(assert (=> bs!4132 m!110175))

(assert (=> b!99653 d!26929))

(declare-fun d!26931 () Bool)

(assert (=> d!26931 (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!50478 () Unit!2982)

(assert (=> d!26931 (= lt!50478 (choose!615 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!65112 () Bool)

(assert (=> d!26931 e!65112))

(declare-fun res!50159 () Bool)

(assert (=> d!26931 (=> (not res!50159) (not e!65112))))

(assert (=> d!26931 (= res!50159 (isStrictlySorted!292 (toList!767 lt!49838)))))

(assert (=> d!26931 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50478)))

(declare-fun b!99981 () Bool)

(assert (=> b!99981 (= e!65112 (containsKey!155 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26931 res!50159) b!99981))

(assert (=> d!26931 m!108875))

(assert (=> d!26931 m!109071))

(assert (=> d!26931 m!109071))

(assert (=> d!26931 m!109073))

(assert (=> d!26931 m!108875))

(declare-fun m!110177 () Bool)

(assert (=> d!26931 m!110177))

(assert (=> d!26931 m!109739))

(assert (=> b!99981 m!108875))

(assert (=> b!99981 m!109067))

(assert (=> b!99356 d!26931))

(declare-fun d!26933 () Bool)

(assert (=> d!26933 (= (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!366 (getValueByKey!152 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!4133 () Bool)

(assert (= bs!4133 d!26933))

(assert (=> bs!4133 m!109071))

(declare-fun m!110179 () Bool)

(assert (=> bs!4133 m!110179))

(assert (=> b!99356 d!26933))

(declare-fun b!99985 () Bool)

(declare-fun e!65114 () Option!158)

(assert (=> b!99985 (= e!65114 None!156)))

(declare-fun b!99983 () Bool)

(declare-fun e!65113 () Option!158)

(assert (=> b!99983 (= e!65113 e!65114)))

(declare-fun c!17130 () Bool)

(assert (=> b!99983 (= c!17130 (and ((_ is Cons!1564) (toList!767 lt!49838)) (not (= (_1!1165 (h!2159 (toList!767 lt!49838))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!99982 () Bool)

(assert (=> b!99982 (= e!65113 (Some!157 (_2!1165 (h!2159 (toList!767 lt!49838)))))))

(declare-fun d!26935 () Bool)

(declare-fun c!17129 () Bool)

(assert (=> d!26935 (= c!17129 (and ((_ is Cons!1564) (toList!767 lt!49838)) (= (_1!1165 (h!2159 (toList!767 lt!49838))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26935 (= (getValueByKey!152 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!65113)))

(declare-fun b!99984 () Bool)

(assert (=> b!99984 (= e!65114 (getValueByKey!152 (t!5534 (toList!767 lt!49838)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26935 c!17129) b!99982))

(assert (= (and d!26935 (not c!17129)) b!99983))

(assert (= (and b!99983 c!17130) b!99984))

(assert (= (and b!99983 (not c!17130)) b!99985))

(assert (=> b!99984 m!108875))

(declare-fun m!110181 () Bool)

(assert (=> b!99984 m!110181))

(assert (=> b!99356 d!26935))

(assert (=> d!26761 d!26847))

(declare-fun b!99986 () Bool)

(declare-fun e!65117 () Bool)

(declare-fun call!10284 () Bool)

(assert (=> b!99986 (= e!65117 call!10284)))

(declare-fun b!99987 () Bool)

(declare-fun e!65116 () Bool)

(assert (=> b!99987 (= e!65116 e!65117)))

(declare-fun lt!50481 () (_ BitVec 64))

(assert (=> b!99987 (= lt!50481 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!50480 () Unit!2982)

(assert (=> b!99987 (= lt!50480 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) lt!50481 #b00000000000000000000000000000000))))

(assert (=> b!99987 (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) lt!50481 #b00000000000000000000000000000000)))

(declare-fun lt!50479 () Unit!2982)

(assert (=> b!99987 (= lt!50479 lt!50480)))

(declare-fun res!50161 () Bool)

(assert (=> b!99987 (= res!50161 (= (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000) (_keys!4195 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992)))) (Found!248 #b00000000000000000000000000000000)))))

(assert (=> b!99987 (=> (not res!50161) (not e!65117))))

(declare-fun d!26937 () Bool)

(declare-fun res!50160 () Bool)

(declare-fun e!65115 () Bool)

(assert (=> d!26937 (=> res!50160 e!65115)))

(assert (=> d!26937 (= res!50160 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!26937 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992)))) e!65115)))

(declare-fun b!99988 () Bool)

(assert (=> b!99988 (= e!65116 call!10284)))

(declare-fun b!99989 () Bool)

(assert (=> b!99989 (= e!65115 e!65116)))

(declare-fun c!17131 () Bool)

(assert (=> b!99989 (= c!17131 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10281 () Bool)

(assert (=> bm!10281 (= call!10284 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4195 (v!2817 (underlying!341 thiss!992))) (mask!6608 (v!2817 (underlying!341 thiss!992)))))))

(assert (= (and d!26937 (not res!50160)) b!99989))

(assert (= (and b!99989 c!17131) b!99987))

(assert (= (and b!99989 (not c!17131)) b!99988))

(assert (= (and b!99987 res!50161) b!99986))

(assert (= (or b!99986 b!99988) bm!10281))

(declare-fun m!110183 () Bool)

(assert (=> b!99987 m!110183))

(declare-fun m!110185 () Bool)

(assert (=> b!99987 m!110185))

(declare-fun m!110187 () Bool)

(assert (=> b!99987 m!110187))

(assert (=> b!99987 m!110183))

(declare-fun m!110189 () Bool)

(assert (=> b!99987 m!110189))

(assert (=> b!99989 m!110183))

(assert (=> b!99989 m!110183))

(declare-fun m!110191 () Bool)

(assert (=> b!99989 m!110191))

(declare-fun m!110193 () Bool)

(assert (=> bm!10281 m!110193))

(assert (=> b!99613 d!26937))

(declare-fun d!26939 () Bool)

(declare-fun lt!50482 () Bool)

(assert (=> d!26939 (= lt!50482 (select (content!105 (toList!767 lt!50050)) (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun e!65119 () Bool)

(assert (=> d!26939 (= lt!50482 e!65119)))

(declare-fun res!50163 () Bool)

(assert (=> d!26939 (=> (not res!50163) (not e!65119))))

(assert (=> d!26939 (= res!50163 ((_ is Cons!1564) (toList!767 lt!50050)))))

(assert (=> d!26939 (= (contains!795 (toList!767 lt!50050) (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50482)))

(declare-fun b!99990 () Bool)

(declare-fun e!65118 () Bool)

(assert (=> b!99990 (= e!65119 e!65118)))

(declare-fun res!50162 () Bool)

(assert (=> b!99990 (=> res!50162 e!65118)))

(assert (=> b!99990 (= res!50162 (= (h!2159 (toList!767 lt!50050)) (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!99991 () Bool)

(assert (=> b!99991 (= e!65118 (contains!795 (t!5534 (toList!767 lt!50050)) (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!26939 res!50163) b!99990))

(assert (= (and b!99990 (not res!50162)) b!99991))

(declare-fun m!110195 () Bool)

(assert (=> d!26939 m!110195))

(declare-fun m!110197 () Bool)

(assert (=> d!26939 m!110197))

(declare-fun m!110199 () Bool)

(assert (=> b!99991 m!110199))

(assert (=> b!99448 d!26939))

(declare-fun d!26941 () Bool)

(declare-fun res!50164 () Bool)

(declare-fun e!65120 () Bool)

(assert (=> d!26941 (=> res!50164 e!65120)))

(assert (=> d!26941 (= res!50164 (and ((_ is Cons!1564) (toList!767 call!10166)) (= (_1!1165 (h!2159 (toList!767 call!10166))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (=> d!26941 (= (containsKey!155 (toList!767 call!10166) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) e!65120)))

(declare-fun b!99992 () Bool)

(declare-fun e!65121 () Bool)

(assert (=> b!99992 (= e!65120 e!65121)))

(declare-fun res!50165 () Bool)

(assert (=> b!99992 (=> (not res!50165) (not e!65121))))

(assert (=> b!99992 (= res!50165 (and (or (not ((_ is Cons!1564) (toList!767 call!10166))) (bvsle (_1!1165 (h!2159 (toList!767 call!10166))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))) ((_ is Cons!1564) (toList!767 call!10166)) (bvslt (_1!1165 (h!2159 (toList!767 call!10166))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(declare-fun b!99993 () Bool)

(assert (=> b!99993 (= e!65121 (containsKey!155 (t!5534 (toList!767 call!10166)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26941 (not res!50164)) b!99992))

(assert (= (and b!99992 res!50165) b!99993))

(assert (=> b!99993 m!108735))

(declare-fun m!110201 () Bool)

(assert (=> b!99993 m!110201))

(assert (=> d!26709 d!26941))

(declare-fun d!26943 () Bool)

(assert (=> d!26943 (= (apply!93 lt!50172 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1299 (getValueByKey!152 (toList!767 lt!50172) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4134 () Bool)

(assert (= bs!4134 d!26943))

(assert (=> bs!4134 m!109033))

(declare-fun m!110203 () Bool)

(assert (=> bs!4134 m!110203))

(assert (=> bs!4134 m!110203))

(declare-fun m!110205 () Bool)

(assert (=> bs!4134 m!110205))

(assert (=> b!99599 d!26943))

(declare-fun d!26945 () Bool)

(declare-fun c!17132 () Bool)

(assert (=> d!26945 (= c!17132 ((_ is ValueCellFull!974) (select (arr!2013 lt!49932) #b00000000000000000000000000000000)))))

(declare-fun e!65122 () V!3161)

(assert (=> d!26945 (= (get!1295 (select (arr!2013 lt!49932) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65122)))

(declare-fun b!99994 () Bool)

(assert (=> b!99994 (= e!65122 (get!1297 (select (arr!2013 lt!49932) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99995 () Bool)

(assert (=> b!99995 (= e!65122 (get!1298 (select (arr!2013 lt!49932) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26945 c!17132) b!99994))

(assert (= (and d!26945 (not c!17132)) b!99995))

(assert (=> b!99994 m!109541))

(assert (=> b!99994 m!109123))

(declare-fun m!110207 () Bool)

(assert (=> b!99994 m!110207))

(assert (=> b!99995 m!109541))

(assert (=> b!99995 m!109123))

(declare-fun m!110209 () Bool)

(assert (=> b!99995 m!110209))

(assert (=> b!99599 d!26945))

(declare-fun d!26947 () Bool)

(assert (=> d!26947 (isDefined!104 (getValueByKey!152 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun lt!50483 () Unit!2982)

(assert (=> d!26947 (= lt!50483 (choose!615 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun e!65123 () Bool)

(assert (=> d!26947 e!65123))

(declare-fun res!50166 () Bool)

(assert (=> d!26947 (=> (not res!50166) (not e!65123))))

(assert (=> d!26947 (= res!50166 (isStrictlySorted!292 (toList!767 call!10174)))))

(assert (=> d!26947 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!50483)))

(declare-fun b!99996 () Bool)

(assert (=> b!99996 (= e!65123 (containsKey!155 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26947 res!50166) b!99996))

(assert (=> d!26947 m!108735))

(assert (=> d!26947 m!109617))

(assert (=> d!26947 m!109617))

(assert (=> d!26947 m!109619))

(assert (=> d!26947 m!108735))

(declare-fun m!110211 () Bool)

(assert (=> d!26947 m!110211))

(declare-fun m!110213 () Bool)

(assert (=> d!26947 m!110213))

(assert (=> b!99996 m!108735))

(assert (=> b!99996 m!109613))

(assert (=> b!99666 d!26947))

(declare-fun d!26949 () Bool)

(assert (=> d!26949 (= (isDefined!104 (getValueByKey!152 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))) (not (isEmpty!366 (getValueByKey!152 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))))

(declare-fun bs!4135 () Bool)

(assert (= bs!4135 d!26949))

(assert (=> bs!4135 m!109617))

(declare-fun m!110215 () Bool)

(assert (=> bs!4135 m!110215))

(assert (=> b!99666 d!26949))

(declare-fun b!100000 () Bool)

(declare-fun e!65125 () Option!158)

(assert (=> b!100000 (= e!65125 None!156)))

(declare-fun b!99998 () Bool)

(declare-fun e!65124 () Option!158)

(assert (=> b!99998 (= e!65124 e!65125)))

(declare-fun c!17134 () Bool)

(assert (=> b!99998 (= c!17134 (and ((_ is Cons!1564) (toList!767 call!10174)) (not (= (_1!1165 (h!2159 (toList!767 call!10174))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))))

(declare-fun b!99997 () Bool)

(assert (=> b!99997 (= e!65124 (Some!157 (_2!1165 (h!2159 (toList!767 call!10174)))))))

(declare-fun d!26951 () Bool)

(declare-fun c!17133 () Bool)

(assert (=> d!26951 (= c!17133 (and ((_ is Cons!1564) (toList!767 call!10174)) (= (_1!1165 (h!2159 (toList!767 call!10174))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (=> d!26951 (= (getValueByKey!152 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) e!65124)))

(declare-fun b!99999 () Bool)

(assert (=> b!99999 (= e!65125 (getValueByKey!152 (t!5534 (toList!767 call!10174)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!26951 c!17133) b!99997))

(assert (= (and d!26951 (not c!17133)) b!99998))

(assert (= (and b!99998 c!17134) b!99999))

(assert (= (and b!99998 (not c!17134)) b!100000))

(assert (=> b!99999 m!108735))

(declare-fun m!110217 () Bool)

(assert (=> b!99999 m!110217))

(assert (=> b!99666 d!26951))

(assert (=> d!26689 d!26699))

(assert (=> d!26689 d!26693))

(declare-fun d!26953 () Bool)

(assert (=> d!26953 (= (apply!93 (+!131 lt!49849 (tuple2!2309 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49834) (apply!93 lt!49849 lt!49834))))

(assert (=> d!26953 true))

(declare-fun _$34!872 () Unit!2982)

(assert (=> d!26953 (= (choose!610 lt!49849 lt!49852 (minValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49834) _$34!872)))

(declare-fun bs!4136 () Bool)

(assert (= bs!4136 d!26953))

(assert (=> bs!4136 m!108871))

(assert (=> bs!4136 m!108871))

(assert (=> bs!4136 m!108873))

(assert (=> bs!4136 m!108879))

(assert (=> d!26689 d!26953))

(assert (=> d!26689 d!26681))

(declare-fun d!26955 () Bool)

(declare-fun e!65127 () Bool)

(assert (=> d!26955 e!65127))

(declare-fun res!50167 () Bool)

(assert (=> d!26955 (=> res!50167 e!65127)))

(declare-fun lt!50486 () Bool)

(assert (=> d!26955 (= res!50167 (not lt!50486))))

(declare-fun lt!50485 () Bool)

(assert (=> d!26955 (= lt!50486 lt!50485)))

(declare-fun lt!50484 () Unit!2982)

(declare-fun e!65126 () Unit!2982)

(assert (=> d!26955 (= lt!50484 e!65126)))

(declare-fun c!17135 () Bool)

(assert (=> d!26955 (= c!17135 lt!50485)))

(assert (=> d!26955 (= lt!50485 (containsKey!155 (toList!767 lt!49849) lt!49834))))

(assert (=> d!26955 (= (contains!792 lt!49849 lt!49834) lt!50486)))

(declare-fun b!100001 () Bool)

(declare-fun lt!50487 () Unit!2982)

(assert (=> b!100001 (= e!65126 lt!50487)))

(assert (=> b!100001 (= lt!50487 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49849) lt!49834))))

(assert (=> b!100001 (isDefined!104 (getValueByKey!152 (toList!767 lt!49849) lt!49834))))

(declare-fun b!100002 () Bool)

(declare-fun Unit!3018 () Unit!2982)

(assert (=> b!100002 (= e!65126 Unit!3018)))

(declare-fun b!100003 () Bool)

(assert (=> b!100003 (= e!65127 (isDefined!104 (getValueByKey!152 (toList!767 lt!49849) lt!49834)))))

(assert (= (and d!26955 c!17135) b!100001))

(assert (= (and d!26955 (not c!17135)) b!100002))

(assert (= (and d!26955 (not res!50167)) b!100003))

(declare-fun m!110219 () Bool)

(assert (=> d!26955 m!110219))

(declare-fun m!110221 () Bool)

(assert (=> b!100001 m!110221))

(assert (=> b!100001 m!109189))

(assert (=> b!100001 m!109189))

(declare-fun m!110223 () Bool)

(assert (=> b!100001 m!110223))

(assert (=> b!100003 m!109189))

(assert (=> b!100003 m!109189))

(assert (=> b!100003 m!110223))

(assert (=> d!26689 d!26955))

(declare-fun d!26957 () Bool)

(declare-fun res!50168 () Bool)

(declare-fun e!65128 () Bool)

(assert (=> d!26957 (=> res!50168 e!65128)))

(assert (=> d!26957 (= res!50168 (and ((_ is Cons!1564) (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))) (= (_1!1165 (h!2159 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49853)))))

(assert (=> d!26957 (= (containsKey!155 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49853) e!65128)))

(declare-fun b!100004 () Bool)

(declare-fun e!65129 () Bool)

(assert (=> b!100004 (= e!65128 e!65129)))

(declare-fun res!50169 () Bool)

(assert (=> b!100004 (=> (not res!50169) (not e!65129))))

(assert (=> b!100004 (= res!50169 (and (or (not ((_ is Cons!1564) (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))) (bvsle (_1!1165 (h!2159 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49853)) ((_ is Cons!1564) (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))) (bvslt (_1!1165 (h!2159 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49853)))))

(declare-fun b!100005 () Bool)

(assert (=> b!100005 (= e!65129 (containsKey!155 (t!5534 (toList!767 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))) lt!49853))))

(assert (= (and d!26957 (not res!50168)) b!100004))

(assert (= (and b!100004 res!50169) b!100005))

(declare-fun m!110225 () Bool)

(assert (=> b!100005 m!110225))

(assert (=> d!26687 d!26957))

(assert (=> d!26757 d!26847))

(declare-fun d!26959 () Bool)

(assert (=> d!26959 (= (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49841)) (v!2823 (getValueByKey!152 (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49841)))))

(assert (=> d!26685 d!26959))

(declare-fun b!100009 () Bool)

(declare-fun e!65131 () Option!158)

(assert (=> b!100009 (= e!65131 None!156)))

(declare-fun b!100007 () Bool)

(declare-fun e!65130 () Option!158)

(assert (=> b!100007 (= e!65130 e!65131)))

(declare-fun c!17137 () Bool)

(assert (=> b!100007 (= c!17137 (and ((_ is Cons!1564) (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))) (not (= (_1!1165 (h!2159 (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49841))))))

(declare-fun b!100006 () Bool)

(assert (=> b!100006 (= e!65130 (Some!157 (_2!1165 (h!2159 (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))))

(declare-fun c!17136 () Bool)

(declare-fun d!26961 () Bool)

(assert (=> d!26961 (= c!17136 (and ((_ is Cons!1564) (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))) (= (_1!1165 (h!2159 (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49841)))))

(assert (=> d!26961 (= (getValueByKey!152 (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49841) e!65130)))

(declare-fun b!100008 () Bool)

(assert (=> b!100008 (= e!65131 (getValueByKey!152 (t!5534 (toList!767 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))) lt!49841))))

(assert (= (and d!26961 c!17136) b!100006))

(assert (= (and d!26961 (not c!17136)) b!100007))

(assert (= (and b!100007 c!17137) b!100008))

(assert (= (and b!100007 (not c!17137)) b!100009))

(declare-fun m!110227 () Bool)

(assert (=> b!100008 m!110227))

(assert (=> d!26685 d!26961))

(declare-fun d!26963 () Bool)

(declare-fun e!65133 () Bool)

(assert (=> d!26963 e!65133))

(declare-fun res!50170 () Bool)

(assert (=> d!26963 (=> res!50170 e!65133)))

(declare-fun lt!50490 () Bool)

(assert (=> d!26963 (= res!50170 (not lt!50490))))

(declare-fun lt!50489 () Bool)

(assert (=> d!26963 (= lt!50490 lt!50489)))

(declare-fun lt!50488 () Unit!2982)

(declare-fun e!65132 () Unit!2982)

(assert (=> d!26963 (= lt!50488 e!65132)))

(declare-fun c!17138 () Bool)

(assert (=> d!26963 (= c!17138 lt!50489)))

(assert (=> d!26963 (= lt!50489 (containsKey!155 (toList!767 lt!50036) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26963 (= (contains!792 lt!50036 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50490)))

(declare-fun b!100010 () Bool)

(declare-fun lt!50491 () Unit!2982)

(assert (=> b!100010 (= e!65132 lt!50491)))

(assert (=> b!100010 (= lt!50491 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50036) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100010 (isDefined!104 (getValueByKey!152 (toList!767 lt!50036) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100011 () Bool)

(declare-fun Unit!3019 () Unit!2982)

(assert (=> b!100011 (= e!65132 Unit!3019)))

(declare-fun b!100012 () Bool)

(assert (=> b!100012 (= e!65133 (isDefined!104 (getValueByKey!152 (toList!767 lt!50036) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26963 c!17138) b!100010))

(assert (= (and d!26963 (not c!17138)) b!100011))

(assert (= (and d!26963 (not res!50170)) b!100012))

(declare-fun m!110229 () Bool)

(assert (=> d!26963 m!110229))

(declare-fun m!110231 () Bool)

(assert (=> b!100010 m!110231))

(declare-fun m!110233 () Bool)

(assert (=> b!100010 m!110233))

(assert (=> b!100010 m!110233))

(declare-fun m!110235 () Bool)

(assert (=> b!100010 m!110235))

(assert (=> b!100012 m!110233))

(assert (=> b!100012 m!110233))

(assert (=> b!100012 m!110235))

(assert (=> b!99434 d!26963))

(declare-fun d!26965 () Bool)

(assert (=> d!26965 (= (apply!93 lt!50150 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!50150) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4137 () Bool)

(assert (= bs!4137 d!26965))

(declare-fun m!110237 () Bool)

(assert (=> bs!4137 m!110237))

(assert (=> bs!4137 m!110237))

(declare-fun m!110239 () Bool)

(assert (=> bs!4137 m!110239))

(assert (=> b!99578 d!26965))

(assert (=> b!99521 d!26855))

(declare-fun d!26967 () Bool)

(assert (=> d!26967 (= (apply!93 lt!50150 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1299 (getValueByKey!152 (toList!767 lt!50150) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4138 () Bool)

(assert (= bs!4138 d!26967))

(assert (=> bs!4138 m!109033))

(declare-fun m!110241 () Bool)

(assert (=> bs!4138 m!110241))

(assert (=> bs!4138 m!110241))

(declare-fun m!110243 () Bool)

(assert (=> bs!4138 m!110243))

(assert (=> b!99566 d!26967))

(declare-fun d!26969 () Bool)

(declare-fun c!17139 () Bool)

(assert (=> d!26969 (= c!17139 ((_ is ValueCellFull!974) (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!65134 () V!3161)

(assert (=> d!26969 (= (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65134)))

(declare-fun b!100013 () Bool)

(assert (=> b!100013 (= e!65134 (get!1297 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100014 () Bool)

(assert (=> b!100014 (= e!65134 (get!1298 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26969 c!17139) b!100013))

(assert (= (and d!26969 (not c!17139)) b!100014))

(assert (=> b!100013 m!109121))

(assert (=> b!100013 m!109123))

(declare-fun m!110245 () Bool)

(assert (=> b!100013 m!110245))

(assert (=> b!100014 m!109121))

(assert (=> b!100014 m!109123))

(declare-fun m!110247 () Bool)

(assert (=> b!100014 m!110247))

(assert (=> b!99566 d!26969))

(assert (=> b!99525 d!26855))

(declare-fun b!100015 () Bool)

(declare-fun e!65135 () Bool)

(declare-fun e!65136 () Bool)

(assert (=> b!100015 (= e!65135 e!65136)))

(declare-fun c!17140 () Bool)

(assert (=> b!100015 (= c!17140 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!10282 () Bool)

(declare-fun call!10285 () Bool)

(assert (=> bm!10282 (= call!10285 (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17140 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!17003 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566))) (ite c!17003 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)))))))

(declare-fun d!26971 () Bool)

(declare-fun res!50173 () Bool)

(declare-fun e!65137 () Bool)

(assert (=> d!26971 (=> res!50173 e!65137)))

(assert (=> d!26971 (= res!50173 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!26971 (= (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17003 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566))) e!65137)))

(declare-fun b!100016 () Bool)

(assert (=> b!100016 (= e!65136 call!10285)))

(declare-fun b!100017 () Bool)

(assert (=> b!100017 (= e!65137 e!65135)))

(declare-fun res!50172 () Bool)

(assert (=> b!100017 (=> (not res!50172) (not e!65135))))

(declare-fun e!65138 () Bool)

(assert (=> b!100017 (= res!50172 (not e!65138))))

(declare-fun res!50171 () Bool)

(assert (=> b!100017 (=> (not res!50171) (not e!65138))))

(assert (=> b!100017 (= res!50171 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!100018 () Bool)

(assert (=> b!100018 (= e!65136 call!10285)))

(declare-fun b!100019 () Bool)

(assert (=> b!100019 (= e!65138 (contains!794 (ite c!17003 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!26971 (not res!50173)) b!100017))

(assert (= (and b!100017 res!50171) b!100019))

(assert (= (and b!100017 res!50172) b!100015))

(assert (= (and b!100015 c!17140) b!100018))

(assert (= (and b!100015 (not c!17140)) b!100016))

(assert (= (or b!100018 b!100016) bm!10282))

(declare-fun m!110249 () Bool)

(assert (=> b!100015 m!110249))

(assert (=> b!100015 m!110249))

(declare-fun m!110251 () Bool)

(assert (=> b!100015 m!110251))

(assert (=> bm!10282 m!110249))

(declare-fun m!110253 () Bool)

(assert (=> bm!10282 m!110253))

(assert (=> b!100017 m!110249))

(assert (=> b!100017 m!110249))

(assert (=> b!100017 m!110251))

(assert (=> b!100019 m!110249))

(assert (=> b!100019 m!110249))

(declare-fun m!110255 () Bool)

(assert (=> b!100019 m!110255))

(assert (=> bm!10216 d!26971))

(assert (=> b!99651 d!26663))

(declare-fun d!26973 () Bool)

(assert (=> d!26973 (= (apply!93 lt!50036 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1299 (getValueByKey!152 (toList!767 lt!50036) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4139 () Bool)

(assert (= bs!4139 d!26973))

(assert (=> bs!4139 m!108875))

(declare-fun m!110257 () Bool)

(assert (=> bs!4139 m!110257))

(assert (=> bs!4139 m!110257))

(declare-fun m!110259 () Bool)

(assert (=> bs!4139 m!110259))

(assert (=> b!99431 d!26973))

(assert (=> b!99431 d!26755))

(declare-fun d!26975 () Bool)

(declare-fun e!65140 () Bool)

(assert (=> d!26975 e!65140))

(declare-fun res!50174 () Bool)

(assert (=> d!26975 (=> res!50174 e!65140)))

(declare-fun lt!50494 () Bool)

(assert (=> d!26975 (= res!50174 (not lt!50494))))

(declare-fun lt!50493 () Bool)

(assert (=> d!26975 (= lt!50494 lt!50493)))

(declare-fun lt!50492 () Unit!2982)

(declare-fun e!65139 () Unit!2982)

(assert (=> d!26975 (= lt!50492 e!65139)))

(declare-fun c!17141 () Bool)

(assert (=> d!26975 (= c!17141 lt!50493)))

(assert (=> d!26975 (= lt!50493 (containsKey!155 (toList!767 lt!50150) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26975 (= (contains!792 lt!50150 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50494)))

(declare-fun b!100020 () Bool)

(declare-fun lt!50495 () Unit!2982)

(assert (=> b!100020 (= e!65139 lt!50495)))

(assert (=> b!100020 (= lt!50495 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50150) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100020 (isDefined!104 (getValueByKey!152 (toList!767 lt!50150) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100021 () Bool)

(declare-fun Unit!3020 () Unit!2982)

(assert (=> b!100021 (= e!65139 Unit!3020)))

(declare-fun b!100022 () Bool)

(assert (=> b!100022 (= e!65140 (isDefined!104 (getValueByKey!152 (toList!767 lt!50150) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26975 c!17141) b!100020))

(assert (= (and d!26975 (not c!17141)) b!100021))

(assert (= (and d!26975 (not res!50174)) b!100022))

(declare-fun m!110261 () Bool)

(assert (=> d!26975 m!110261))

(declare-fun m!110263 () Bool)

(assert (=> b!100020 m!110263))

(assert (=> b!100020 m!109923))

(assert (=> b!100020 m!109923))

(declare-fun m!110265 () Bool)

(assert (=> b!100020 m!110265))

(assert (=> b!100022 m!109923))

(assert (=> b!100022 m!109923))

(assert (=> b!100022 m!110265))

(assert (=> bm!10220 d!26975))

(declare-fun b!100026 () Bool)

(declare-fun e!65142 () Option!158)

(assert (=> b!100026 (= e!65142 None!156)))

(declare-fun b!100024 () Bool)

(declare-fun e!65141 () Option!158)

(assert (=> b!100024 (= e!65141 e!65142)))

(declare-fun c!17143 () Bool)

(assert (=> b!100024 (= c!17143 (and ((_ is Cons!1564) (toList!767 lt!50070)) (not (= (_1!1165 (h!2159 (toList!767 lt!50070))) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!100023 () Bool)

(assert (=> b!100023 (= e!65141 (Some!157 (_2!1165 (h!2159 (toList!767 lt!50070)))))))

(declare-fun d!26977 () Bool)

(declare-fun c!17142 () Bool)

(assert (=> d!26977 (= c!17142 (and ((_ is Cons!1564) (toList!767 lt!50070)) (= (_1!1165 (h!2159 (toList!767 lt!50070))) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!26977 (= (getValueByKey!152 (toList!767 lt!50070) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65141)))

(declare-fun b!100025 () Bool)

(assert (=> b!100025 (= e!65142 (getValueByKey!152 (t!5534 (toList!767 lt!50070)) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!26977 c!17142) b!100023))

(assert (= (and d!26977 (not c!17142)) b!100024))

(assert (= (and b!100024 c!17143) b!100025))

(assert (= (and b!100024 (not c!17143)) b!100026))

(declare-fun m!110267 () Bool)

(assert (=> b!100025 m!110267))

(assert (=> b!99458 d!26977))

(declare-fun b!100027 () Bool)

(declare-fun e!65145 () Bool)

(declare-fun call!10286 () Bool)

(assert (=> b!100027 (= e!65145 call!10286)))

(declare-fun b!100028 () Bool)

(declare-fun e!65144 () Bool)

(assert (=> b!100028 (= e!65144 e!65145)))

(declare-fun lt!50498 () (_ BitVec 64))

(assert (=> b!100028 (= lt!50498 (select (arr!2012 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!50497 () Unit!2982)

(assert (=> b!100028 (= lt!50497 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4195 newMap!16) lt!50498 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!100028 (arrayContainsKey!0 (_keys!4195 newMap!16) lt!50498 #b00000000000000000000000000000000)))

(declare-fun lt!50496 () Unit!2982)

(assert (=> b!100028 (= lt!50496 lt!50497)))

(declare-fun res!50176 () Bool)

(assert (=> b!100028 (= res!50176 (= (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4195 newMap!16) (mask!6608 newMap!16)) (Found!248 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!100028 (=> (not res!50176) (not e!65145))))

(declare-fun d!26979 () Bool)

(declare-fun res!50175 () Bool)

(declare-fun e!65143 () Bool)

(assert (=> d!26979 (=> res!50175 e!65143)))

(assert (=> d!26979 (= res!50175 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26979 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4195 newMap!16) (mask!6608 newMap!16)) e!65143)))

(declare-fun b!100029 () Bool)

(assert (=> b!100029 (= e!65144 call!10286)))

(declare-fun b!100030 () Bool)

(assert (=> b!100030 (= e!65143 e!65144)))

(declare-fun c!17144 () Bool)

(assert (=> b!100030 (= c!17144 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10283 () Bool)

(assert (=> bm!10283 (= call!10286 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(assert (= (and d!26979 (not res!50175)) b!100030))

(assert (= (and b!100030 c!17144) b!100028))

(assert (= (and b!100030 (not c!17144)) b!100029))

(assert (= (and b!100028 res!50176) b!100027))

(assert (= (or b!100027 b!100029) bm!10283))

(declare-fun m!110269 () Bool)

(assert (=> b!100028 m!110269))

(declare-fun m!110271 () Bool)

(assert (=> b!100028 m!110271))

(declare-fun m!110273 () Bool)

(assert (=> b!100028 m!110273))

(assert (=> b!100028 m!110269))

(declare-fun m!110275 () Bool)

(assert (=> b!100028 m!110275))

(assert (=> b!100030 m!110269))

(assert (=> b!100030 m!110269))

(declare-fun m!110277 () Bool)

(assert (=> b!100030 m!110277))

(declare-fun m!110279 () Bool)

(assert (=> bm!10283 m!110279))

(assert (=> bm!10188 d!26979))

(declare-fun d!26981 () Bool)

(assert (=> d!26981 (= (apply!93 lt!50126 lt!50111) (get!1299 (getValueByKey!152 (toList!767 lt!50126) lt!50111)))))

(declare-fun bs!4140 () Bool)

(assert (= bs!4140 d!26981))

(declare-fun m!110281 () Bool)

(assert (=> bs!4140 m!110281))

(assert (=> bs!4140 m!110281))

(declare-fun m!110283 () Bool)

(assert (=> bs!4140 m!110283))

(assert (=> b!99517 d!26981))

(declare-fun b!100031 () Bool)

(declare-fun e!65148 () Bool)

(assert (=> b!100031 (= e!65148 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100031 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun lt!50502 () ListLongMap!1503)

(declare-fun e!65150 () Bool)

(declare-fun b!100032 () Bool)

(assert (=> b!100032 (= e!65150 (= lt!50502 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16))))))

(declare-fun b!100033 () Bool)

(declare-fun e!65152 () ListLongMap!1503)

(assert (=> b!100033 (= e!65152 (ListLongMap!1504 Nil!1565))))

(declare-fun b!100034 () Bool)

(assert (=> b!100034 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> b!100034 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))))))))

(declare-fun e!65147 () Bool)

(assert (=> b!100034 (= e!65147 (= (apply!93 lt!50502 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!10284 () Bool)

(declare-fun call!10287 () ListLongMap!1503)

(assert (=> bm!10284 (= call!10287 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16)))))

(declare-fun d!26983 () Bool)

(declare-fun e!65146 () Bool)

(assert (=> d!26983 e!65146))

(declare-fun res!50178 () Bool)

(assert (=> d!26983 (=> (not res!50178) (not e!65146))))

(assert (=> d!26983 (= res!50178 (not (contains!792 lt!50502 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26983 (= lt!50502 e!65152)))

(declare-fun c!17145 () Bool)

(assert (=> d!26983 (= c!17145 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!26983 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!26983 (= (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) (mask!6608 newMap!16) (ite (and c!16932 c!16926) lt!49942 (extraKeys!2318 newMap!16)) (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50502)))

(declare-fun b!100035 () Bool)

(declare-fun e!65151 () ListLongMap!1503)

(assert (=> b!100035 (= e!65152 e!65151)))

(declare-fun c!17148 () Bool)

(assert (=> b!100035 (= c!17148 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100036 () Bool)

(declare-fun e!65149 () Bool)

(assert (=> b!100036 (= e!65149 e!65150)))

(declare-fun c!17146 () Bool)

(assert (=> b!100036 (= c!17146 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100037 () Bool)

(declare-fun res!50179 () Bool)

(assert (=> b!100037 (=> (not res!50179) (not e!65146))))

(assert (=> b!100037 (= res!50179 (not (contains!792 lt!50502 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100038 () Bool)

(declare-fun lt!50503 () Unit!2982)

(declare-fun lt!50500 () Unit!2982)

(assert (=> b!100038 (= lt!50503 lt!50500)))

(declare-fun lt!50504 () ListLongMap!1503)

(declare-fun lt!50499 () V!3161)

(declare-fun lt!50505 () (_ BitVec 64))

(declare-fun lt!50501 () (_ BitVec 64))

(assert (=> b!100038 (not (contains!792 (+!131 lt!50504 (tuple2!2309 lt!50505 lt!50499)) lt!50501))))

(assert (=> b!100038 (= lt!50500 (addStillNotContains!43 lt!50504 lt!50505 lt!50499 lt!50501))))

(assert (=> b!100038 (= lt!50501 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100038 (= lt!50499 (get!1295 (select (arr!2013 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100038 (= lt!50505 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100038 (= lt!50504 call!10287)))

(assert (=> b!100038 (= e!65151 (+!131 call!10287 (tuple2!2309 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (get!1295 (select (arr!2013 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100039 () Bool)

(assert (=> b!100039 (= e!65149 e!65147)))

(assert (=> b!100039 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun res!50177 () Bool)

(assert (=> b!100039 (= res!50177 (contains!792 lt!50502 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100039 (=> (not res!50177) (not e!65147))))

(declare-fun b!100040 () Bool)

(assert (=> b!100040 (= e!65146 e!65149)))

(declare-fun c!17147 () Bool)

(assert (=> b!100040 (= c!17147 e!65148)))

(declare-fun res!50180 () Bool)

(assert (=> b!100040 (=> (not res!50180) (not e!65148))))

(assert (=> b!100040 (= res!50180 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100041 () Bool)

(assert (=> b!100041 (= e!65151 call!10287)))

(declare-fun b!100042 () Bool)

(assert (=> b!100042 (= e!65150 (isEmpty!365 lt!50502))))

(assert (= (and d!26983 c!17145) b!100033))

(assert (= (and d!26983 (not c!17145)) b!100035))

(assert (= (and b!100035 c!17148) b!100038))

(assert (= (and b!100035 (not c!17148)) b!100041))

(assert (= (or b!100038 b!100041) bm!10284))

(assert (= (and d!26983 res!50178) b!100037))

(assert (= (and b!100037 res!50179) b!100040))

(assert (= (and b!100040 res!50180) b!100031))

(assert (= (and b!100040 c!17147) b!100039))

(assert (= (and b!100040 (not c!17147)) b!100036))

(assert (= (and b!100039 res!50177) b!100034))

(assert (= (and b!100036 c!17146) b!100032))

(assert (= (and b!100036 (not c!17146)) b!100042))

(declare-fun b_lambda!4469 () Bool)

(assert (=> (not b_lambda!4469) (not b!100034)))

(assert (=> b!100034 t!5546))

(declare-fun b_and!6161 () Bool)

(assert (= b_and!6157 (and (=> t!5546 result!3299) b_and!6161)))

(assert (=> b!100034 t!5548))

(declare-fun b_and!6163 () Bool)

(assert (= b_and!6159 (and (=> t!5548 result!3301) b_and!6163)))

(declare-fun b_lambda!4471 () Bool)

(assert (=> (not b_lambda!4471) (not b!100038)))

(assert (=> b!100038 t!5546))

(declare-fun b_and!6165 () Bool)

(assert (= b_and!6161 (and (=> t!5546 result!3299) b_and!6165)))

(assert (=> b!100038 t!5548))

(declare-fun b_and!6167 () Bool)

(assert (= b_and!6163 (and (=> t!5548 result!3301) b_and!6167)))

(declare-fun m!110285 () Bool)

(assert (=> bm!10284 m!110285))

(declare-fun m!110287 () Bool)

(assert (=> b!100042 m!110287))

(declare-fun m!110289 () Bool)

(assert (=> b!100037 m!110289))

(assert (=> b!100035 m!109033))

(assert (=> b!100035 m!109033))

(assert (=> b!100035 m!109041))

(assert (=> b!100038 m!109403))

(declare-fun m!110291 () Bool)

(assert (=> b!100038 m!110291))

(declare-fun m!110293 () Bool)

(assert (=> b!100038 m!110293))

(declare-fun m!110295 () Bool)

(assert (=> b!100038 m!110295))

(assert (=> b!100038 m!110291))

(assert (=> b!100038 m!109123))

(assert (=> b!100038 m!109033))

(assert (=> b!100038 m!109403))

(assert (=> b!100038 m!109123))

(assert (=> b!100038 m!109405))

(declare-fun m!110297 () Bool)

(assert (=> b!100038 m!110297))

(assert (=> b!100031 m!109033))

(assert (=> b!100031 m!109033))

(assert (=> b!100031 m!109041))

(assert (=> b!100039 m!109033))

(assert (=> b!100039 m!109033))

(declare-fun m!110299 () Bool)

(assert (=> b!100039 m!110299))

(declare-fun m!110301 () Bool)

(assert (=> d!26983 m!110301))

(assert (=> d!26983 m!109025))

(assert (=> b!100032 m!110285))

(assert (=> b!100034 m!109403))

(assert (=> b!100034 m!109033))

(declare-fun m!110303 () Bool)

(assert (=> b!100034 m!110303))

(assert (=> b!100034 m!109123))

(assert (=> b!100034 m!109033))

(assert (=> b!100034 m!109403))

(assert (=> b!100034 m!109123))

(assert (=> b!100034 m!109405))

(assert (=> b!99517 d!26983))

(declare-fun d!26985 () Bool)

(assert (=> d!26985 (= (apply!93 (+!131 lt!50126 (tuple2!2309 lt!50129 (minValue!2382 newMap!16))) lt!50111) (apply!93 lt!50126 lt!50111))))

(declare-fun lt!50506 () Unit!2982)

(assert (=> d!26985 (= lt!50506 (choose!610 lt!50126 lt!50129 (minValue!2382 newMap!16) lt!50111))))

(declare-fun e!65153 () Bool)

(assert (=> d!26985 e!65153))

(declare-fun res!50181 () Bool)

(assert (=> d!26985 (=> (not res!50181) (not e!65153))))

(assert (=> d!26985 (= res!50181 (contains!792 lt!50126 lt!50111))))

(assert (=> d!26985 (= (addApplyDifferent!69 lt!50126 lt!50129 (minValue!2382 newMap!16) lt!50111) lt!50506)))

(declare-fun b!100043 () Bool)

(assert (=> b!100043 (= e!65153 (not (= lt!50111 lt!50129)))))

(assert (= (and d!26985 res!50181) b!100043))

(assert (=> d!26985 m!109363))

(assert (=> d!26985 m!109369))

(declare-fun m!110305 () Bool)

(assert (=> d!26985 m!110305))

(declare-fun m!110307 () Bool)

(assert (=> d!26985 m!110307))

(assert (=> d!26985 m!109363))

(assert (=> d!26985 m!109365))

(assert (=> b!99517 d!26985))

(declare-fun d!26987 () Bool)

(assert (=> d!26987 (= (apply!93 (+!131 lt!50110 (tuple2!2309 lt!50116 (minValue!2382 newMap!16))) lt!50113) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50110 (tuple2!2309 lt!50116 (minValue!2382 newMap!16)))) lt!50113)))))

(declare-fun bs!4141 () Bool)

(assert (= bs!4141 d!26987))

(declare-fun m!110309 () Bool)

(assert (=> bs!4141 m!110309))

(assert (=> bs!4141 m!110309))

(declare-fun m!110311 () Bool)

(assert (=> bs!4141 m!110311))

(assert (=> b!99517 d!26987))

(declare-fun d!26989 () Bool)

(assert (=> d!26989 (contains!792 (+!131 lt!50121 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50130)))

(declare-fun lt!50507 () Unit!2982)

(assert (=> d!26989 (= lt!50507 (choose!611 lt!50121 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50130))))

(assert (=> d!26989 (contains!792 lt!50121 lt!50130)))

(assert (=> d!26989 (= (addStillContains!69 lt!50121 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50130) lt!50507)))

(declare-fun bs!4142 () Bool)

(assert (= bs!4142 d!26989))

(assert (=> bs!4142 m!109357))

(assert (=> bs!4142 m!109357))

(assert (=> bs!4142 m!109373))

(declare-fun m!110313 () Bool)

(assert (=> bs!4142 m!110313))

(declare-fun m!110315 () Bool)

(assert (=> bs!4142 m!110315))

(assert (=> b!99517 d!26989))

(declare-fun d!26991 () Bool)

(assert (=> d!26991 (= (apply!93 (+!131 lt!50127 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50118) (apply!93 lt!50127 lt!50118))))

(declare-fun lt!50508 () Unit!2982)

(assert (=> d!26991 (= lt!50508 (choose!610 lt!50127 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50118))))

(declare-fun e!65154 () Bool)

(assert (=> d!26991 e!65154))

(declare-fun res!50182 () Bool)

(assert (=> d!26991 (=> (not res!50182) (not e!65154))))

(assert (=> d!26991 (= res!50182 (contains!792 lt!50127 lt!50118))))

(assert (=> d!26991 (= (addApplyDifferent!69 lt!50127 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)) lt!50118) lt!50508)))

(declare-fun b!100044 () Bool)

(assert (=> b!100044 (= e!65154 (not (= lt!50118 lt!50131)))))

(assert (= (and d!26991 res!50182) b!100044))

(assert (=> d!26991 m!109359))

(assert (=> d!26991 m!109361))

(declare-fun m!110317 () Bool)

(assert (=> d!26991 m!110317))

(declare-fun m!110319 () Bool)

(assert (=> d!26991 m!110319))

(assert (=> d!26991 m!109359))

(assert (=> d!26991 m!109379))

(assert (=> b!99517 d!26991))

(declare-fun d!26993 () Bool)

(assert (=> d!26993 (= (apply!93 lt!50110 lt!50113) (get!1299 (getValueByKey!152 (toList!767 lt!50110) lt!50113)))))

(declare-fun bs!4143 () Bool)

(assert (= bs!4143 d!26993))

(declare-fun m!110321 () Bool)

(assert (=> bs!4143 m!110321))

(assert (=> bs!4143 m!110321))

(declare-fun m!110323 () Bool)

(assert (=> bs!4143 m!110323))

(assert (=> b!99517 d!26993))

(declare-fun d!26995 () Bool)

(assert (=> d!26995 (= (apply!93 (+!131 lt!50126 (tuple2!2309 lt!50129 (minValue!2382 newMap!16))) lt!50111) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50126 (tuple2!2309 lt!50129 (minValue!2382 newMap!16)))) lt!50111)))))

(declare-fun bs!4144 () Bool)

(assert (= bs!4144 d!26995))

(declare-fun m!110325 () Bool)

(assert (=> bs!4144 m!110325))

(assert (=> bs!4144 m!110325))

(declare-fun m!110327 () Bool)

(assert (=> bs!4144 m!110327))

(assert (=> b!99517 d!26995))

(declare-fun d!26997 () Bool)

(declare-fun e!65155 () Bool)

(assert (=> d!26997 e!65155))

(declare-fun res!50184 () Bool)

(assert (=> d!26997 (=> (not res!50184) (not e!65155))))

(declare-fun lt!50511 () ListLongMap!1503)

(assert (=> d!26997 (= res!50184 (contains!792 lt!50511 (_1!1165 (tuple2!2309 lt!50116 (minValue!2382 newMap!16)))))))

(declare-fun lt!50510 () List!1568)

(assert (=> d!26997 (= lt!50511 (ListLongMap!1504 lt!50510))))

(declare-fun lt!50509 () Unit!2982)

(declare-fun lt!50512 () Unit!2982)

(assert (=> d!26997 (= lt!50509 lt!50512)))

(assert (=> d!26997 (= (getValueByKey!152 lt!50510 (_1!1165 (tuple2!2309 lt!50116 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50116 (minValue!2382 newMap!16)))))))

(assert (=> d!26997 (= lt!50512 (lemmaContainsTupThenGetReturnValue!68 lt!50510 (_1!1165 (tuple2!2309 lt!50116 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50116 (minValue!2382 newMap!16)))))))

(assert (=> d!26997 (= lt!50510 (insertStrictlySorted!71 (toList!767 lt!50110) (_1!1165 (tuple2!2309 lt!50116 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50116 (minValue!2382 newMap!16)))))))

(assert (=> d!26997 (= (+!131 lt!50110 (tuple2!2309 lt!50116 (minValue!2382 newMap!16))) lt!50511)))

(declare-fun b!100045 () Bool)

(declare-fun res!50183 () Bool)

(assert (=> b!100045 (=> (not res!50183) (not e!65155))))

(assert (=> b!100045 (= res!50183 (= (getValueByKey!152 (toList!767 lt!50511) (_1!1165 (tuple2!2309 lt!50116 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50116 (minValue!2382 newMap!16))))))))

(declare-fun b!100046 () Bool)

(assert (=> b!100046 (= e!65155 (contains!795 (toList!767 lt!50511) (tuple2!2309 lt!50116 (minValue!2382 newMap!16))))))

(assert (= (and d!26997 res!50184) b!100045))

(assert (= (and b!100045 res!50183) b!100046))

(declare-fun m!110329 () Bool)

(assert (=> d!26997 m!110329))

(declare-fun m!110331 () Bool)

(assert (=> d!26997 m!110331))

(declare-fun m!110333 () Bool)

(assert (=> d!26997 m!110333))

(declare-fun m!110335 () Bool)

(assert (=> d!26997 m!110335))

(declare-fun m!110337 () Bool)

(assert (=> b!100045 m!110337))

(declare-fun m!110339 () Bool)

(assert (=> b!100046 m!110339))

(assert (=> b!99517 d!26997))

(declare-fun d!26999 () Bool)

(declare-fun e!65156 () Bool)

(assert (=> d!26999 e!65156))

(declare-fun res!50186 () Bool)

(assert (=> d!26999 (=> (not res!50186) (not e!65156))))

(declare-fun lt!50515 () ListLongMap!1503)

(assert (=> d!26999 (= res!50186 (contains!792 lt!50515 (_1!1165 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(declare-fun lt!50514 () List!1568)

(assert (=> d!26999 (= lt!50515 (ListLongMap!1504 lt!50514))))

(declare-fun lt!50513 () Unit!2982)

(declare-fun lt!50516 () Unit!2982)

(assert (=> d!26999 (= lt!50513 lt!50516)))

(assert (=> d!26999 (= (getValueByKey!152 lt!50514 (_1!1165 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!26999 (= lt!50516 (lemmaContainsTupThenGetReturnValue!68 lt!50514 (_1!1165 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!26999 (= lt!50514 (insertStrictlySorted!71 (toList!767 lt!50121) (_1!1165 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!26999 (= (+!131 lt!50121 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50515)))

(declare-fun b!100047 () Bool)

(declare-fun res!50185 () Bool)

(assert (=> b!100047 (=> (not res!50185) (not e!65156))))

(assert (=> b!100047 (= res!50185 (= (getValueByKey!152 (toList!767 lt!50515) (_1!1165 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))))))))

(declare-fun b!100048 () Bool)

(assert (=> b!100048 (= e!65156 (contains!795 (toList!767 lt!50515) (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))))))

(assert (= (and d!26999 res!50186) b!100047))

(assert (= (and b!100047 res!50185) b!100048))

(declare-fun m!110341 () Bool)

(assert (=> d!26999 m!110341))

(declare-fun m!110343 () Bool)

(assert (=> d!26999 m!110343))

(declare-fun m!110345 () Bool)

(assert (=> d!26999 m!110345))

(declare-fun m!110347 () Bool)

(assert (=> d!26999 m!110347))

(declare-fun m!110349 () Bool)

(assert (=> b!100047 m!110349))

(declare-fun m!110351 () Bool)

(assert (=> b!100048 m!110351))

(assert (=> b!99517 d!26999))

(declare-fun d!27001 () Bool)

(assert (=> d!27001 (= (apply!93 (+!131 lt!50127 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50118) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50127 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50118)))))

(declare-fun bs!4145 () Bool)

(assert (= bs!4145 d!27001))

(declare-fun m!110353 () Bool)

(assert (=> bs!4145 m!110353))

(assert (=> bs!4145 m!110353))

(declare-fun m!110355 () Bool)

(assert (=> bs!4145 m!110355))

(assert (=> b!99517 d!27001))

(declare-fun d!27003 () Bool)

(declare-fun e!65158 () Bool)

(assert (=> d!27003 e!65158))

(declare-fun res!50187 () Bool)

(assert (=> d!27003 (=> res!50187 e!65158)))

(declare-fun lt!50519 () Bool)

(assert (=> d!27003 (= res!50187 (not lt!50519))))

(declare-fun lt!50518 () Bool)

(assert (=> d!27003 (= lt!50519 lt!50518)))

(declare-fun lt!50517 () Unit!2982)

(declare-fun e!65157 () Unit!2982)

(assert (=> d!27003 (= lt!50517 e!65157)))

(declare-fun c!17149 () Bool)

(assert (=> d!27003 (= c!17149 lt!50518)))

(assert (=> d!27003 (= lt!50518 (containsKey!155 (toList!767 (+!131 lt!50121 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50130))))

(assert (=> d!27003 (= (contains!792 (+!131 lt!50121 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50130) lt!50519)))

(declare-fun b!100049 () Bool)

(declare-fun lt!50520 () Unit!2982)

(assert (=> b!100049 (= e!65157 lt!50520)))

(assert (=> b!100049 (= lt!50520 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (+!131 lt!50121 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50130))))

(assert (=> b!100049 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50121 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50130))))

(declare-fun b!100050 () Bool)

(declare-fun Unit!3021 () Unit!2982)

(assert (=> b!100050 (= e!65157 Unit!3021)))

(declare-fun b!100051 () Bool)

(assert (=> b!100051 (= e!65158 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50121 (tuple2!2309 lt!50124 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) lt!50130)))))

(assert (= (and d!27003 c!17149) b!100049))

(assert (= (and d!27003 (not c!17149)) b!100050))

(assert (= (and d!27003 (not res!50187)) b!100051))

(declare-fun m!110357 () Bool)

(assert (=> d!27003 m!110357))

(declare-fun m!110359 () Bool)

(assert (=> b!100049 m!110359))

(declare-fun m!110361 () Bool)

(assert (=> b!100049 m!110361))

(assert (=> b!100049 m!110361))

(declare-fun m!110363 () Bool)

(assert (=> b!100049 m!110363))

(assert (=> b!100051 m!110361))

(assert (=> b!100051 m!110361))

(assert (=> b!100051 m!110363))

(assert (=> b!99517 d!27003))

(declare-fun d!27005 () Bool)

(assert (=> d!27005 (= (apply!93 lt!50127 lt!50118) (get!1299 (getValueByKey!152 (toList!767 lt!50127) lt!50118)))))

(declare-fun bs!4146 () Bool)

(assert (= bs!4146 d!27005))

(declare-fun m!110365 () Bool)

(assert (=> bs!4146 m!110365))

(assert (=> bs!4146 m!110365))

(declare-fun m!110367 () Bool)

(assert (=> bs!4146 m!110367))

(assert (=> b!99517 d!27005))

(declare-fun d!27007 () Bool)

(declare-fun e!65159 () Bool)

(assert (=> d!27007 e!65159))

(declare-fun res!50189 () Bool)

(assert (=> d!27007 (=> (not res!50189) (not e!65159))))

(declare-fun lt!50523 () ListLongMap!1503)

(assert (=> d!27007 (= res!50189 (contains!792 lt!50523 (_1!1165 (tuple2!2309 lt!50129 (minValue!2382 newMap!16)))))))

(declare-fun lt!50522 () List!1568)

(assert (=> d!27007 (= lt!50523 (ListLongMap!1504 lt!50522))))

(declare-fun lt!50521 () Unit!2982)

(declare-fun lt!50524 () Unit!2982)

(assert (=> d!27007 (= lt!50521 lt!50524)))

(assert (=> d!27007 (= (getValueByKey!152 lt!50522 (_1!1165 (tuple2!2309 lt!50129 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50129 (minValue!2382 newMap!16)))))))

(assert (=> d!27007 (= lt!50524 (lemmaContainsTupThenGetReturnValue!68 lt!50522 (_1!1165 (tuple2!2309 lt!50129 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50129 (minValue!2382 newMap!16)))))))

(assert (=> d!27007 (= lt!50522 (insertStrictlySorted!71 (toList!767 lt!50126) (_1!1165 (tuple2!2309 lt!50129 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50129 (minValue!2382 newMap!16)))))))

(assert (=> d!27007 (= (+!131 lt!50126 (tuple2!2309 lt!50129 (minValue!2382 newMap!16))) lt!50523)))

(declare-fun b!100052 () Bool)

(declare-fun res!50188 () Bool)

(assert (=> b!100052 (=> (not res!50188) (not e!65159))))

(assert (=> b!100052 (= res!50188 (= (getValueByKey!152 (toList!767 lt!50523) (_1!1165 (tuple2!2309 lt!50129 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50129 (minValue!2382 newMap!16))))))))

(declare-fun b!100053 () Bool)

(assert (=> b!100053 (= e!65159 (contains!795 (toList!767 lt!50523) (tuple2!2309 lt!50129 (minValue!2382 newMap!16))))))

(assert (= (and d!27007 res!50189) b!100052))

(assert (= (and b!100052 res!50188) b!100053))

(declare-fun m!110369 () Bool)

(assert (=> d!27007 m!110369))

(declare-fun m!110371 () Bool)

(assert (=> d!27007 m!110371))

(declare-fun m!110373 () Bool)

(assert (=> d!27007 m!110373))

(declare-fun m!110375 () Bool)

(assert (=> d!27007 m!110375))

(declare-fun m!110377 () Bool)

(assert (=> b!100052 m!110377))

(declare-fun m!110379 () Bool)

(assert (=> b!100053 m!110379))

(assert (=> b!99517 d!27007))

(declare-fun d!27009 () Bool)

(declare-fun e!65160 () Bool)

(assert (=> d!27009 e!65160))

(declare-fun res!50191 () Bool)

(assert (=> d!27009 (=> (not res!50191) (not e!65160))))

(declare-fun lt!50527 () ListLongMap!1503)

(assert (=> d!27009 (= res!50191 (contains!792 lt!50527 (_1!1165 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(declare-fun lt!50526 () List!1568)

(assert (=> d!27009 (= lt!50527 (ListLongMap!1504 lt!50526))))

(declare-fun lt!50525 () Unit!2982)

(declare-fun lt!50528 () Unit!2982)

(assert (=> d!27009 (= lt!50525 lt!50528)))

(assert (=> d!27009 (= (getValueByKey!152 lt!50526 (_1!1165 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!27009 (= lt!50528 (lemmaContainsTupThenGetReturnValue!68 lt!50526 (_1!1165 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!27009 (= lt!50526 (insertStrictlySorted!71 (toList!767 lt!50127) (_1!1165 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))))))

(assert (=> d!27009 (= (+!131 lt!50127 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))) lt!50527)))

(declare-fun b!100054 () Bool)

(declare-fun res!50190 () Bool)

(assert (=> b!100054 (=> (not res!50190) (not e!65160))))

(assert (=> b!100054 (= res!50190 (= (getValueByKey!152 (toList!767 lt!50527) (_1!1165 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))))))))

(declare-fun b!100055 () Bool)

(assert (=> b!100055 (= e!65160 (contains!795 (toList!767 lt!50527) (tuple2!2309 lt!50131 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16)))))))

(assert (= (and d!27009 res!50191) b!100054))

(assert (= (and b!100054 res!50190) b!100055))

(declare-fun m!110381 () Bool)

(assert (=> d!27009 m!110381))

(declare-fun m!110383 () Bool)

(assert (=> d!27009 m!110383))

(declare-fun m!110385 () Bool)

(assert (=> d!27009 m!110385))

(declare-fun m!110387 () Bool)

(assert (=> d!27009 m!110387))

(declare-fun m!110389 () Bool)

(assert (=> b!100054 m!110389))

(declare-fun m!110391 () Bool)

(assert (=> b!100055 m!110391))

(assert (=> b!99517 d!27009))

(declare-fun d!27011 () Bool)

(assert (=> d!27011 (= (apply!93 (+!131 lt!50110 (tuple2!2309 lt!50116 (minValue!2382 newMap!16))) lt!50113) (apply!93 lt!50110 lt!50113))))

(declare-fun lt!50529 () Unit!2982)

(assert (=> d!27011 (= lt!50529 (choose!610 lt!50110 lt!50116 (minValue!2382 newMap!16) lt!50113))))

(declare-fun e!65161 () Bool)

(assert (=> d!27011 e!65161))

(declare-fun res!50192 () Bool)

(assert (=> d!27011 (=> (not res!50192) (not e!65161))))

(assert (=> d!27011 (= res!50192 (contains!792 lt!50110 lt!50113))))

(assert (=> d!27011 (= (addApplyDifferent!69 lt!50110 lt!50116 (minValue!2382 newMap!16) lt!50113) lt!50529)))

(declare-fun b!100056 () Bool)

(assert (=> b!100056 (= e!65161 (not (= lt!50113 lt!50116)))))

(assert (= (and d!27011 res!50192) b!100056))

(assert (=> d!27011 m!109367))

(assert (=> d!27011 m!109377))

(declare-fun m!110393 () Bool)

(assert (=> d!27011 m!110393))

(declare-fun m!110395 () Bool)

(assert (=> d!27011 m!110395))

(assert (=> d!27011 m!109367))

(assert (=> d!27011 m!109381))

(assert (=> b!99517 d!27011))

(assert (=> d!26675 d!26673))

(declare-fun d!27013 () Bool)

(declare-fun e!65163 () Bool)

(assert (=> d!27013 e!65163))

(declare-fun res!50193 () Bool)

(assert (=> d!27013 (=> res!50193 e!65163)))

(declare-fun lt!50532 () Bool)

(assert (=> d!27013 (= res!50193 (not lt!50532))))

(declare-fun lt!50531 () Bool)

(assert (=> d!27013 (= lt!50532 lt!50531)))

(declare-fun lt!50530 () Unit!2982)

(declare-fun e!65162 () Unit!2982)

(assert (=> d!27013 (= lt!50530 e!65162)))

(declare-fun c!17150 () Bool)

(assert (=> d!27013 (= c!17150 lt!50531)))

(assert (=> d!27013 (= lt!50531 (containsKey!155 (toList!767 lt!49850) lt!49841))))

(assert (=> d!27013 (= (contains!792 lt!49850 lt!49841) lt!50532)))

(declare-fun b!100057 () Bool)

(declare-fun lt!50533 () Unit!2982)

(assert (=> b!100057 (= e!65162 lt!50533)))

(assert (=> b!100057 (= lt!50533 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49850) lt!49841))))

(assert (=> b!100057 (isDefined!104 (getValueByKey!152 (toList!767 lt!49850) lt!49841))))

(declare-fun b!100058 () Bool)

(declare-fun Unit!3022 () Unit!2982)

(assert (=> b!100058 (= e!65162 Unit!3022)))

(declare-fun b!100059 () Bool)

(assert (=> b!100059 (= e!65163 (isDefined!104 (getValueByKey!152 (toList!767 lt!49850) lt!49841)))))

(assert (= (and d!27013 c!17150) b!100057))

(assert (= (and d!27013 (not c!17150)) b!100058))

(assert (= (and d!27013 (not res!50193)) b!100059))

(declare-fun m!110397 () Bool)

(assert (=> d!27013 m!110397))

(declare-fun m!110399 () Bool)

(assert (=> b!100057 m!110399))

(assert (=> b!100057 m!109173))

(assert (=> b!100057 m!109173))

(declare-fun m!110401 () Bool)

(assert (=> b!100057 m!110401))

(assert (=> b!100059 m!109173))

(assert (=> b!100059 m!109173))

(assert (=> b!100059 m!110401))

(assert (=> d!26675 d!27013))

(assert (=> d!26675 d!26701))

(assert (=> d!26675 d!26685))

(declare-fun d!27015 () Bool)

(assert (=> d!27015 (= (apply!93 (+!131 lt!49850 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49841) (apply!93 lt!49850 lt!49841))))

(assert (=> d!27015 true))

(declare-fun _$34!873 () Unit!2982)

(assert (=> d!27015 (= (choose!610 lt!49850 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49841) _$34!873)))

(declare-fun bs!4147 () Bool)

(assert (= bs!4147 d!27015))

(assert (=> bs!4147 m!108867))

(assert (=> bs!4147 m!108867))

(assert (=> bs!4147 m!108889))

(assert (=> bs!4147 m!108869))

(assert (=> d!26675 d!27015))

(declare-fun b!100060 () Bool)

(declare-fun e!65164 () Bool)

(declare-fun e!65165 () Bool)

(assert (=> b!100060 (= e!65164 e!65165)))

(declare-fun c!17151 () Bool)

(assert (=> b!100060 (= c!17151 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)))))

(declare-fun bm!10285 () Bool)

(declare-fun call!10288 () Bool)

(assert (=> bm!10285 (= call!10288 (arrayNoDuplicates!0 (_keys!4195 (_2!1164 lt!49941)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17151 (Cons!1565 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000) Nil!1566) Nil!1566)))))

(declare-fun d!27017 () Bool)

(declare-fun res!50196 () Bool)

(declare-fun e!65166 () Bool)

(assert (=> d!27017 (=> res!50196 e!65166)))

(assert (=> d!27017 (= res!50196 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!49941)))))))

(assert (=> d!27017 (= (arrayNoDuplicates!0 (_keys!4195 (_2!1164 lt!49941)) #b00000000000000000000000000000000 Nil!1566) e!65166)))

(declare-fun b!100061 () Bool)

(assert (=> b!100061 (= e!65165 call!10288)))

(declare-fun b!100062 () Bool)

(assert (=> b!100062 (= e!65166 e!65164)))

(declare-fun res!50195 () Bool)

(assert (=> b!100062 (=> (not res!50195) (not e!65164))))

(declare-fun e!65167 () Bool)

(assert (=> b!100062 (= res!50195 (not e!65167))))

(declare-fun res!50194 () Bool)

(assert (=> b!100062 (=> (not res!50194) (not e!65167))))

(assert (=> b!100062 (= res!50194 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)))))

(declare-fun b!100063 () Bool)

(assert (=> b!100063 (= e!65165 call!10288)))

(declare-fun b!100064 () Bool)

(assert (=> b!100064 (= e!65167 (contains!794 Nil!1566 (select (arr!2012 (_keys!4195 (_2!1164 lt!49941))) #b00000000000000000000000000000000)))))

(assert (= (and d!27017 (not res!50196)) b!100062))

(assert (= (and b!100062 res!50194) b!100064))

(assert (= (and b!100062 res!50195) b!100060))

(assert (= (and b!100060 c!17151) b!100063))

(assert (= (and b!100060 (not c!17151)) b!100061))

(assert (= (or b!100063 b!100061) bm!10285))

(assert (=> b!100060 m!109883))

(assert (=> b!100060 m!109883))

(assert (=> b!100060 m!109891))

(assert (=> bm!10285 m!109883))

(declare-fun m!110403 () Bool)

(assert (=> bm!10285 m!110403))

(assert (=> b!100062 m!109883))

(assert (=> b!100062 m!109883))

(assert (=> b!100062 m!109891))

(assert (=> b!100064 m!109883))

(assert (=> b!100064 m!109883))

(declare-fun m!110405 () Bool)

(assert (=> b!100064 m!110405))

(assert (=> b!99343 d!27017))

(declare-fun d!27019 () Bool)

(declare-fun lt!50534 () Bool)

(assert (=> d!27019 (= lt!50534 (select (content!105 (toList!767 lt!50134)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun e!65169 () Bool)

(assert (=> d!27019 (= lt!50534 e!65169)))

(declare-fun res!50198 () Bool)

(assert (=> d!27019 (=> (not res!50198) (not e!65169))))

(assert (=> d!27019 (= res!50198 ((_ is Cons!1564) (toList!767 lt!50134)))))

(assert (=> d!27019 (= (contains!795 (toList!767 lt!50134) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50534)))

(declare-fun b!100065 () Bool)

(declare-fun e!65168 () Bool)

(assert (=> b!100065 (= e!65169 e!65168)))

(declare-fun res!50197 () Bool)

(assert (=> b!100065 (=> res!50197 e!65168)))

(assert (=> b!100065 (= res!50197 (= (h!2159 (toList!767 lt!50134)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!100066 () Bool)

(assert (=> b!100066 (= e!65168 (contains!795 (t!5534 (toList!767 lt!50134)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!27019 res!50198) b!100065))

(assert (= (and b!100065 (not res!50197)) b!100066))

(declare-fun m!110407 () Bool)

(assert (=> d!27019 m!110407))

(declare-fun m!110409 () Bool)

(assert (=> d!27019 m!110409))

(declare-fun m!110411 () Bool)

(assert (=> b!100066 m!110411))

(assert (=> b!99532 d!27019))

(declare-fun d!27021 () Bool)

(assert (=> d!27021 (= (get!1299 (getValueByKey!152 (toList!767 lt!49833) lt!49836)) (v!2823 (getValueByKey!152 (toList!767 lt!49833) lt!49836)))))

(assert (=> d!26691 d!27021))

(declare-fun b!100070 () Bool)

(declare-fun e!65171 () Option!158)

(assert (=> b!100070 (= e!65171 None!156)))

(declare-fun b!100068 () Bool)

(declare-fun e!65170 () Option!158)

(assert (=> b!100068 (= e!65170 e!65171)))

(declare-fun c!17153 () Bool)

(assert (=> b!100068 (= c!17153 (and ((_ is Cons!1564) (toList!767 lt!49833)) (not (= (_1!1165 (h!2159 (toList!767 lt!49833))) lt!49836))))))

(declare-fun b!100067 () Bool)

(assert (=> b!100067 (= e!65170 (Some!157 (_2!1165 (h!2159 (toList!767 lt!49833)))))))

(declare-fun d!27023 () Bool)

(declare-fun c!17152 () Bool)

(assert (=> d!27023 (= c!17152 (and ((_ is Cons!1564) (toList!767 lt!49833)) (= (_1!1165 (h!2159 (toList!767 lt!49833))) lt!49836)))))

(assert (=> d!27023 (= (getValueByKey!152 (toList!767 lt!49833) lt!49836) e!65170)))

(declare-fun b!100069 () Bool)

(assert (=> b!100069 (= e!65171 (getValueByKey!152 (t!5534 (toList!767 lt!49833)) lt!49836))))

(assert (= (and d!27023 c!17152) b!100067))

(assert (= (and d!27023 (not c!17152)) b!100068))

(assert (= (and b!100068 c!17153) b!100069))

(assert (= (and b!100068 (not c!17153)) b!100070))

(declare-fun m!110413 () Bool)

(assert (=> b!100069 m!110413))

(assert (=> d!26691 d!27023))

(declare-fun d!27025 () Bool)

(declare-fun lt!50535 () Bool)

(assert (=> d!27025 (= lt!50535 (select (content!104 Nil!1566) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!65173 () Bool)

(assert (=> d!27025 (= lt!50535 e!65173)))

(declare-fun res!50199 () Bool)

(assert (=> d!27025 (=> (not res!50199) (not e!65173))))

(assert (=> d!27025 (= res!50199 ((_ is Cons!1565) Nil!1566))))

(assert (=> d!27025 (= (contains!794 Nil!1566 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) lt!50535)))

(declare-fun b!100071 () Bool)

(declare-fun e!65172 () Bool)

(assert (=> b!100071 (= e!65173 e!65172)))

(declare-fun res!50200 () Bool)

(assert (=> b!100071 (=> res!50200 e!65172)))

(assert (=> b!100071 (= res!50200 (= (h!2160 Nil!1566) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100072 () Bool)

(assert (=> b!100072 (= e!65172 (contains!794 (t!5535 Nil!1566) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!27025 res!50199) b!100071))

(assert (= (and b!100071 (not res!50200)) b!100072))

(assert (=> d!27025 m!109321))

(assert (=> d!27025 m!109033))

(declare-fun m!110415 () Bool)

(assert (=> d!27025 m!110415))

(assert (=> b!100072 m!109033))

(declare-fun m!110417 () Bool)

(assert (=> b!100072 m!110417))

(assert (=> b!99509 d!27025))

(declare-fun d!27027 () Bool)

(declare-fun e!65175 () Bool)

(assert (=> d!27027 e!65175))

(declare-fun res!50201 () Bool)

(assert (=> d!27027 (=> res!50201 e!65175)))

(declare-fun lt!50538 () Bool)

(assert (=> d!27027 (= res!50201 (not lt!50538))))

(declare-fun lt!50537 () Bool)

(assert (=> d!27027 (= lt!50538 lt!50537)))

(declare-fun lt!50536 () Unit!2982)

(declare-fun e!65174 () Unit!2982)

(assert (=> d!27027 (= lt!50536 e!65174)))

(declare-fun c!17154 () Bool)

(assert (=> d!27027 (= c!17154 lt!50537)))

(assert (=> d!27027 (= lt!50537 (containsKey!155 (toList!767 lt!50134) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!27027 (= (contains!792 lt!50134 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50538)))

(declare-fun b!100073 () Bool)

(declare-fun lt!50539 () Unit!2982)

(assert (=> b!100073 (= e!65174 lt!50539)))

(assert (=> b!100073 (= lt!50539 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50134) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> b!100073 (isDefined!104 (getValueByKey!152 (toList!767 lt!50134) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100074 () Bool)

(declare-fun Unit!3023 () Unit!2982)

(assert (=> b!100074 (= e!65174 Unit!3023)))

(declare-fun b!100075 () Bool)

(assert (=> b!100075 (= e!65175 (isDefined!104 (getValueByKey!152 (toList!767 lt!50134) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!27027 c!17154) b!100073))

(assert (= (and d!27027 (not c!17154)) b!100074))

(assert (= (and d!27027 (not res!50201)) b!100075))

(declare-fun m!110419 () Bool)

(assert (=> d!27027 m!110419))

(declare-fun m!110421 () Bool)

(assert (=> b!100073 m!110421))

(assert (=> b!100073 m!109417))

(assert (=> b!100073 m!109417))

(declare-fun m!110423 () Bool)

(assert (=> b!100073 m!110423))

(assert (=> b!100075 m!109417))

(assert (=> b!100075 m!109417))

(assert (=> b!100075 m!110423))

(assert (=> d!26741 d!27027))

(declare-fun b!100079 () Bool)

(declare-fun e!65177 () Option!158)

(assert (=> b!100079 (= e!65177 None!156)))

(declare-fun b!100077 () Bool)

(declare-fun e!65176 () Option!158)

(assert (=> b!100077 (= e!65176 e!65177)))

(declare-fun c!17156 () Bool)

(assert (=> b!100077 (= c!17156 (and ((_ is Cons!1564) lt!50133) (not (= (_1!1165 (h!2159 lt!50133)) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!100076 () Bool)

(assert (=> b!100076 (= e!65176 (Some!157 (_2!1165 (h!2159 lt!50133))))))

(declare-fun d!27029 () Bool)

(declare-fun c!17155 () Bool)

(assert (=> d!27029 (= c!17155 (and ((_ is Cons!1564) lt!50133) (= (_1!1165 (h!2159 lt!50133)) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27029 (= (getValueByKey!152 lt!50133 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65176)))

(declare-fun b!100078 () Bool)

(assert (=> b!100078 (= e!65177 (getValueByKey!152 (t!5534 lt!50133) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!27029 c!17155) b!100076))

(assert (= (and d!27029 (not c!17155)) b!100077))

(assert (= (and b!100077 c!17156) b!100078))

(assert (= (and b!100077 (not c!17156)) b!100079))

(declare-fun m!110425 () Bool)

(assert (=> b!100078 m!110425))

(assert (=> d!26741 d!27029))

(declare-fun d!27031 () Bool)

(assert (=> d!27031 (= (getValueByKey!152 lt!50133 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50540 () Unit!2982)

(assert (=> d!27031 (= lt!50540 (choose!619 lt!50133 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun e!65178 () Bool)

(assert (=> d!27031 e!65178))

(declare-fun res!50202 () Bool)

(assert (=> d!27031 (=> (not res!50202) (not e!65178))))

(assert (=> d!27031 (= res!50202 (isStrictlySorted!292 lt!50133))))

(assert (=> d!27031 (= (lemmaContainsTupThenGetReturnValue!68 lt!50133 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50540)))

(declare-fun b!100080 () Bool)

(declare-fun res!50203 () Bool)

(assert (=> b!100080 (=> (not res!50203) (not e!65178))))

(assert (=> b!100080 (= res!50203 (containsKey!155 lt!50133 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100081 () Bool)

(assert (=> b!100081 (= e!65178 (contains!795 lt!50133 (tuple2!2309 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!27031 res!50202) b!100080))

(assert (= (and b!100080 res!50203) b!100081))

(assert (=> d!27031 m!109411))

(declare-fun m!110427 () Bool)

(assert (=> d!27031 m!110427))

(declare-fun m!110429 () Bool)

(assert (=> d!27031 m!110429))

(declare-fun m!110431 () Bool)

(assert (=> b!100080 m!110431))

(declare-fun m!110433 () Bool)

(assert (=> b!100081 m!110433))

(assert (=> d!26741 d!27031))

(declare-fun b!100082 () Bool)

(declare-fun e!65181 () List!1568)

(assert (=> b!100082 (= e!65181 (insertStrictlySorted!71 (t!5534 (toList!767 call!10109)) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun bm!10286 () Bool)

(declare-fun call!10289 () List!1568)

(declare-fun call!10291 () List!1568)

(assert (=> bm!10286 (= call!10289 call!10291)))

(declare-fun b!100083 () Bool)

(declare-fun e!65180 () List!1568)

(declare-fun e!65179 () List!1568)

(assert (=> b!100083 (= e!65180 e!65179)))

(declare-fun c!17159 () Bool)

(assert (=> b!100083 (= c!17159 (and ((_ is Cons!1564) (toList!767 call!10109)) (= (_1!1165 (h!2159 (toList!767 call!10109))) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun c!17160 () Bool)

(declare-fun bm!10287 () Bool)

(assert (=> bm!10287 (= call!10291 ($colon$colon!78 e!65181 (ite c!17160 (h!2159 (toList!767 call!10109)) (tuple2!2309 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun c!17157 () Bool)

(assert (=> bm!10287 (= c!17157 c!17160)))

(declare-fun b!100084 () Bool)

(declare-fun c!17158 () Bool)

(assert (=> b!100084 (= c!17158 (and ((_ is Cons!1564) (toList!767 call!10109)) (bvsgt (_1!1165 (h!2159 (toList!767 call!10109))) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun e!65182 () List!1568)

(assert (=> b!100084 (= e!65179 e!65182)))

(declare-fun d!27033 () Bool)

(declare-fun e!65183 () Bool)

(assert (=> d!27033 e!65183))

(declare-fun res!50204 () Bool)

(assert (=> d!27033 (=> (not res!50204) (not e!65183))))

(declare-fun lt!50541 () List!1568)

(assert (=> d!27033 (= res!50204 (isStrictlySorted!292 lt!50541))))

(assert (=> d!27033 (= lt!50541 e!65180)))

(assert (=> d!27033 (= c!17160 (and ((_ is Cons!1564) (toList!767 call!10109)) (bvslt (_1!1165 (h!2159 (toList!767 call!10109))) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27033 (isStrictlySorted!292 (toList!767 call!10109))))

(assert (=> d!27033 (= (insertStrictlySorted!71 (toList!767 call!10109) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50541)))

(declare-fun b!100085 () Bool)

(declare-fun res!50205 () Bool)

(assert (=> b!100085 (=> (not res!50205) (not e!65183))))

(assert (=> b!100085 (= res!50205 (containsKey!155 lt!50541 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100086 () Bool)

(assert (=> b!100086 (= e!65181 (ite c!17159 (t!5534 (toList!767 call!10109)) (ite c!17158 (Cons!1564 (h!2159 (toList!767 call!10109)) (t!5534 (toList!767 call!10109))) Nil!1565)))))

(declare-fun b!100087 () Bool)

(assert (=> b!100087 (= e!65179 call!10289)))

(declare-fun b!100088 () Bool)

(assert (=> b!100088 (= e!65183 (contains!795 lt!50541 (tuple2!2309 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!100089 () Bool)

(declare-fun call!10290 () List!1568)

(assert (=> b!100089 (= e!65182 call!10290)))

(declare-fun b!100090 () Bool)

(assert (=> b!100090 (= e!65180 call!10291)))

(declare-fun bm!10288 () Bool)

(assert (=> bm!10288 (= call!10290 call!10289)))

(declare-fun b!100091 () Bool)

(assert (=> b!100091 (= e!65182 call!10290)))

(assert (= (and d!27033 c!17160) b!100090))

(assert (= (and d!27033 (not c!17160)) b!100083))

(assert (= (and b!100083 c!17159) b!100087))

(assert (= (and b!100083 (not c!17159)) b!100084))

(assert (= (and b!100084 c!17158) b!100091))

(assert (= (and b!100084 (not c!17158)) b!100089))

(assert (= (or b!100091 b!100089) bm!10288))

(assert (= (or b!100087 bm!10288) bm!10286))

(assert (= (or b!100090 bm!10286) bm!10287))

(assert (= (and bm!10287 c!17157) b!100082))

(assert (= (and bm!10287 (not c!17157)) b!100086))

(assert (= (and d!27033 res!50204) b!100085))

(assert (= (and b!100085 res!50205) b!100088))

(declare-fun m!110435 () Bool)

(assert (=> b!100085 m!110435))

(declare-fun m!110437 () Bool)

(assert (=> bm!10287 m!110437))

(declare-fun m!110439 () Bool)

(assert (=> d!27033 m!110439))

(declare-fun m!110441 () Bool)

(assert (=> d!27033 m!110441))

(declare-fun m!110443 () Bool)

(assert (=> b!100082 m!110443))

(declare-fun m!110445 () Bool)

(assert (=> b!100088 m!110445))

(assert (=> d!26741 d!27033))

(declare-fun d!27035 () Bool)

(declare-fun e!65184 () Bool)

(assert (=> d!27035 e!65184))

(declare-fun res!50207 () Bool)

(assert (=> d!27035 (=> (not res!50207) (not e!65184))))

(declare-fun lt!50544 () ListLongMap!1503)

(assert (=> d!27035 (= res!50207 (contains!792 lt!50544 (_1!1165 (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(declare-fun lt!50543 () List!1568)

(assert (=> d!27035 (= lt!50544 (ListLongMap!1504 lt!50543))))

(declare-fun lt!50542 () Unit!2982)

(declare-fun lt!50545 () Unit!2982)

(assert (=> d!27035 (= lt!50542 lt!50545)))

(assert (=> d!27035 (= (getValueByKey!152 lt!50543 (_1!1165 (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))) (Some!157 (_2!1165 (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(assert (=> d!27035 (= lt!50545 (lemmaContainsTupThenGetReturnValue!68 lt!50543 (_1!1165 (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (_2!1165 (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(assert (=> d!27035 (= lt!50543 (insertStrictlySorted!71 (toList!767 (ite c!17009 call!10221 (ite c!17005 call!10223 call!10220))) (_1!1165 (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (_2!1165 (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(assert (=> d!27035 (= (+!131 (ite c!17009 call!10221 (ite c!17005 call!10223 call!10220)) (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) lt!50544)))

(declare-fun b!100092 () Bool)

(declare-fun res!50206 () Bool)

(assert (=> b!100092 (=> (not res!50206) (not e!65184))))

(assert (=> b!100092 (= res!50206 (= (getValueByKey!152 (toList!767 lt!50544) (_1!1165 (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))) (Some!157 (_2!1165 (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))))

(declare-fun b!100093 () Bool)

(assert (=> b!100093 (= e!65184 (contains!795 (toList!767 lt!50544) (ite (or c!17009 c!17005) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (= (and d!27035 res!50207) b!100092))

(assert (= (and b!100092 res!50206) b!100093))

(declare-fun m!110447 () Bool)

(assert (=> d!27035 m!110447))

(declare-fun m!110449 () Bool)

(assert (=> d!27035 m!110449))

(declare-fun m!110451 () Bool)

(assert (=> d!27035 m!110451))

(declare-fun m!110453 () Bool)

(assert (=> d!27035 m!110453))

(declare-fun m!110455 () Bool)

(assert (=> b!100092 m!110455))

(declare-fun m!110457 () Bool)

(assert (=> b!100093 m!110457))

(assert (=> bm!10218 d!27035))

(declare-fun d!27037 () Bool)

(assert (=> d!27037 (isDefined!104 (getValueByKey!152 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(declare-fun lt!50546 () Unit!2982)

(assert (=> d!27037 (= lt!50546 (choose!615 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(declare-fun e!65185 () Bool)

(assert (=> d!27037 e!65185))

(declare-fun res!50208 () Bool)

(assert (=> d!27037 (=> (not res!50208) (not e!65185))))

(assert (=> d!27037 (= res!50208 (isStrictlySorted!292 (toList!767 e!64680)))))

(assert (=> d!27037 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))) lt!50546)))

(declare-fun b!100094 () Bool)

(assert (=> b!100094 (= e!65185 (containsKey!155 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(assert (= (and d!27037 res!50208) b!100094))

(assert (=> d!27037 m!109317))

(assert (=> d!27037 m!109317))

(assert (=> d!27037 m!109319))

(declare-fun m!110459 () Bool)

(assert (=> d!27037 m!110459))

(declare-fun m!110461 () Bool)

(assert (=> d!27037 m!110461))

(assert (=> b!100094 m!109313))

(assert (=> b!99489 d!27037))

(declare-fun d!27039 () Bool)

(assert (=> d!27039 (= (isDefined!104 (getValueByKey!152 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))) (not (isEmpty!366 (getValueByKey!152 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))))

(declare-fun bs!4148 () Bool)

(assert (= bs!4148 d!27039))

(assert (=> bs!4148 m!109317))

(declare-fun m!110463 () Bool)

(assert (=> bs!4148 m!110463))

(assert (=> b!99489 d!27039))

(declare-fun b!100098 () Bool)

(declare-fun e!65187 () Option!158)

(assert (=> b!100098 (= e!65187 None!156)))

(declare-fun b!100096 () Bool)

(declare-fun e!65186 () Option!158)

(assert (=> b!100096 (= e!65186 e!65187)))

(declare-fun c!17162 () Bool)

(assert (=> b!100096 (= c!17162 (and ((_ is Cons!1564) (toList!767 e!64680)) (not (= (_1!1165 (h!2159 (toList!767 e!64680))) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))))

(declare-fun b!100095 () Bool)

(assert (=> b!100095 (= e!65186 (Some!157 (_2!1165 (h!2159 (toList!767 e!64680)))))))

(declare-fun d!27041 () Bool)

(declare-fun c!17161 () Bool)

(assert (=> d!27041 (= c!17161 (and ((_ is Cons!1564) (toList!767 e!64680)) (= (_1!1165 (h!2159 (toList!767 e!64680))) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))))))

(assert (=> d!27041 (= (getValueByKey!152 (toList!767 e!64680) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))) e!65186)))

(declare-fun b!100097 () Bool)

(assert (=> b!100097 (= e!65187 (getValueByKey!152 (t!5534 (toList!767 e!64680)) (ite c!16925 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(assert (= (and d!27041 c!17161) b!100095))

(assert (= (and d!27041 (not c!17161)) b!100096))

(assert (= (and b!100096 c!17162) b!100097))

(assert (= (and b!100096 (not c!17162)) b!100098))

(declare-fun m!110465 () Bool)

(assert (=> b!100097 m!110465))

(assert (=> b!99489 d!27041))

(declare-fun d!27043 () Bool)

(declare-fun e!65189 () Bool)

(assert (=> d!27043 e!65189))

(declare-fun res!50209 () Bool)

(assert (=> d!27043 (=> res!50209 e!65189)))

(declare-fun lt!50549 () Bool)

(assert (=> d!27043 (= res!50209 (not lt!50549))))

(declare-fun lt!50548 () Bool)

(assert (=> d!27043 (= lt!50549 lt!50548)))

(declare-fun lt!50547 () Unit!2982)

(declare-fun e!65188 () Unit!2982)

(assert (=> d!27043 (= lt!50547 e!65188)))

(declare-fun c!17163 () Bool)

(assert (=> d!27043 (= c!17163 lt!50548)))

(assert (=> d!27043 (= lt!50548 (containsKey!155 (toList!767 lt!50115) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27043 (= (contains!792 lt!50115 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50549)))

(declare-fun b!100099 () Bool)

(declare-fun lt!50550 () Unit!2982)

(assert (=> b!100099 (= e!65188 lt!50550)))

(assert (=> b!100099 (= lt!50550 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50115) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100099 (isDefined!104 (getValueByKey!152 (toList!767 lt!50115) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100100 () Bool)

(declare-fun Unit!3024 () Unit!2982)

(assert (=> b!100100 (= e!65188 Unit!3024)))

(declare-fun b!100101 () Bool)

(assert (=> b!100101 (= e!65189 (isDefined!104 (getValueByKey!152 (toList!767 lt!50115) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27043 c!17163) b!100099))

(assert (= (and d!27043 (not c!17163)) b!100100))

(assert (= (and d!27043 (not res!50209)) b!100101))

(declare-fun m!110467 () Bool)

(assert (=> d!27043 m!110467))

(declare-fun m!110469 () Bool)

(assert (=> b!100099 m!110469))

(declare-fun m!110471 () Bool)

(assert (=> b!100099 m!110471))

(assert (=> b!100099 m!110471))

(declare-fun m!110473 () Bool)

(assert (=> b!100099 m!110473))

(assert (=> b!100101 m!110471))

(assert (=> b!100101 m!110471))

(assert (=> b!100101 m!110473))

(assert (=> bm!10211 d!27043))

(declare-fun d!27045 () Bool)

(declare-fun res!50210 () Bool)

(declare-fun e!65190 () Bool)

(assert (=> d!27045 (=> (not res!50210) (not e!65190))))

(assert (=> d!27045 (= res!50210 (simpleValid!69 (_2!1164 lt!50250)))))

(assert (=> d!27045 (= (valid!396 (_2!1164 lt!50250)) e!65190)))

(declare-fun b!100102 () Bool)

(declare-fun res!50211 () Bool)

(assert (=> b!100102 (=> (not res!50211) (not e!65190))))

(assert (=> b!100102 (= res!50211 (= (arrayCountValidKeys!0 (_keys!4195 (_2!1164 lt!50250)) #b00000000000000000000000000000000 (size!2263 (_keys!4195 (_2!1164 lt!50250)))) (_size!477 (_2!1164 lt!50250))))))

(declare-fun b!100103 () Bool)

(declare-fun res!50212 () Bool)

(assert (=> b!100103 (=> (not res!50212) (not e!65190))))

(assert (=> b!100103 (= res!50212 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4195 (_2!1164 lt!50250)) (mask!6608 (_2!1164 lt!50250))))))

(declare-fun b!100104 () Bool)

(assert (=> b!100104 (= e!65190 (arrayNoDuplicates!0 (_keys!4195 (_2!1164 lt!50250)) #b00000000000000000000000000000000 Nil!1566))))

(assert (= (and d!27045 res!50210) b!100102))

(assert (= (and b!100102 res!50211) b!100103))

(assert (= (and b!100103 res!50212) b!100104))

(declare-fun m!110475 () Bool)

(assert (=> d!27045 m!110475))

(declare-fun m!110477 () Bool)

(assert (=> b!100102 m!110477))

(declare-fun m!110479 () Bool)

(assert (=> b!100103 m!110479))

(declare-fun m!110481 () Bool)

(assert (=> b!100104 m!110481))

(assert (=> b!99657 d!27045))

(assert (=> b!99505 d!26855))

(declare-fun d!27047 () Bool)

(assert (=> d!27047 (= (get!1299 (getValueByKey!152 (toList!767 lt!49849) lt!49834)) (v!2823 (getValueByKey!152 (toList!767 lt!49849) lt!49834)))))

(assert (=> d!26681 d!27047))

(declare-fun b!100108 () Bool)

(declare-fun e!65192 () Option!158)

(assert (=> b!100108 (= e!65192 None!156)))

(declare-fun b!100106 () Bool)

(declare-fun e!65191 () Option!158)

(assert (=> b!100106 (= e!65191 e!65192)))

(declare-fun c!17165 () Bool)

(assert (=> b!100106 (= c!17165 (and ((_ is Cons!1564) (toList!767 lt!49849)) (not (= (_1!1165 (h!2159 (toList!767 lt!49849))) lt!49834))))))

(declare-fun b!100105 () Bool)

(assert (=> b!100105 (= e!65191 (Some!157 (_2!1165 (h!2159 (toList!767 lt!49849)))))))

(declare-fun d!27049 () Bool)

(declare-fun c!17164 () Bool)

(assert (=> d!27049 (= c!17164 (and ((_ is Cons!1564) (toList!767 lt!49849)) (= (_1!1165 (h!2159 (toList!767 lt!49849))) lt!49834)))))

(assert (=> d!27049 (= (getValueByKey!152 (toList!767 lt!49849) lt!49834) e!65191)))

(declare-fun b!100107 () Bool)

(assert (=> b!100107 (= e!65192 (getValueByKey!152 (t!5534 (toList!767 lt!49849)) lt!49834))))

(assert (= (and d!27049 c!17164) b!100105))

(assert (= (and d!27049 (not c!17164)) b!100106))

(assert (= (and b!100106 c!17165) b!100107))

(assert (= (and b!100106 (not c!17165)) b!100108))

(declare-fun m!110483 () Bool)

(assert (=> b!100107 m!110483))

(assert (=> d!26681 d!27049))

(declare-fun d!27051 () Bool)

(declare-fun e!65193 () Bool)

(assert (=> d!27051 e!65193))

(declare-fun res!50214 () Bool)

(assert (=> d!27051 (=> (not res!50214) (not e!65193))))

(declare-fun lt!50553 () ListLongMap!1503)

(assert (=> d!27051 (= res!50214 (contains!792 lt!50553 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun lt!50552 () List!1568)

(assert (=> d!27051 (= lt!50553 (ListLongMap!1504 lt!50552))))

(declare-fun lt!50551 () Unit!2982)

(declare-fun lt!50554 () Unit!2982)

(assert (=> d!27051 (= lt!50551 lt!50554)))

(assert (=> d!27051 (= (getValueByKey!152 lt!50552 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27051 (= lt!50554 (lemmaContainsTupThenGetReturnValue!68 lt!50552 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27051 (= lt!50552 (insertStrictlySorted!71 (toList!767 call!10229) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27051 (= (+!131 call!10229 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) lt!50553)))

(declare-fun b!100109 () Bool)

(declare-fun res!50213 () Bool)

(assert (=> b!100109 (=> (not res!50213) (not e!65193))))

(assert (=> b!100109 (= res!50213 (= (getValueByKey!152 (toList!767 lt!50553) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun b!100110 () Bool)

(assert (=> b!100110 (= e!65193 (contains!795 (toList!767 lt!50553) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(assert (= (and d!27051 res!50214) b!100109))

(assert (= (and b!100109 res!50213) b!100110))

(declare-fun m!110485 () Bool)

(assert (=> d!27051 m!110485))

(declare-fun m!110487 () Bool)

(assert (=> d!27051 m!110487))

(declare-fun m!110489 () Bool)

(assert (=> d!27051 m!110489))

(declare-fun m!110491 () Bool)

(assert (=> d!27051 m!110491))

(declare-fun m!110493 () Bool)

(assert (=> b!100109 m!110493))

(declare-fun m!110495 () Bool)

(assert (=> b!100110 m!110495))

(assert (=> b!99604 d!27051))

(declare-fun d!27053 () Bool)

(declare-fun lt!50555 () Bool)

(assert (=> d!27053 (= lt!50555 (select (content!105 (toList!767 lt!49985)) (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun e!65195 () Bool)

(assert (=> d!27053 (= lt!50555 e!65195)))

(declare-fun res!50216 () Bool)

(assert (=> d!27053 (=> (not res!50216) (not e!65195))))

(assert (=> d!27053 (= res!50216 ((_ is Cons!1564) (toList!767 lt!49985)))))

(assert (=> d!27053 (= (contains!795 (toList!767 lt!49985) (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50555)))

(declare-fun b!100111 () Bool)

(declare-fun e!65194 () Bool)

(assert (=> b!100111 (= e!65195 e!65194)))

(declare-fun res!50215 () Bool)

(assert (=> b!100111 (=> res!50215 e!65194)))

(assert (=> b!100111 (= res!50215 (= (h!2159 (toList!767 lt!49985)) (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100112 () Bool)

(assert (=> b!100112 (= e!65194 (contains!795 (t!5534 (toList!767 lt!49985)) (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!27053 res!50216) b!100111))

(assert (= (and b!100111 (not res!50215)) b!100112))

(declare-fun m!110497 () Bool)

(assert (=> d!27053 m!110497))

(declare-fun m!110499 () Bool)

(assert (=> d!27053 m!110499))

(declare-fun m!110501 () Bool)

(assert (=> b!100112 m!110501))

(assert (=> b!99349 d!27053))

(declare-fun d!27055 () Bool)

(declare-fun e!65197 () Bool)

(assert (=> d!27055 e!65197))

(declare-fun res!50217 () Bool)

(assert (=> d!27055 (=> res!50217 e!65197)))

(declare-fun lt!50558 () Bool)

(assert (=> d!27055 (= res!50217 (not lt!50558))))

(declare-fun lt!50557 () Bool)

(assert (=> d!27055 (= lt!50558 lt!50557)))

(declare-fun lt!50556 () Unit!2982)

(declare-fun e!65196 () Unit!2982)

(assert (=> d!27055 (= lt!50556 e!65196)))

(declare-fun c!17166 () Bool)

(assert (=> d!27055 (= c!17166 lt!50557)))

(assert (=> d!27055 (= lt!50557 (containsKey!155 (toList!767 lt!50036) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27055 (= (contains!792 lt!50036 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50558)))

(declare-fun b!100113 () Bool)

(declare-fun lt!50559 () Unit!2982)

(assert (=> b!100113 (= e!65196 lt!50559)))

(assert (=> b!100113 (= lt!50559 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50036) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100113 (isDefined!104 (getValueByKey!152 (toList!767 lt!50036) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100114 () Bool)

(declare-fun Unit!3025 () Unit!2982)

(assert (=> b!100114 (= e!65196 Unit!3025)))

(declare-fun b!100115 () Bool)

(assert (=> b!100115 (= e!65197 (isDefined!104 (getValueByKey!152 (toList!767 lt!50036) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27055 c!17166) b!100113))

(assert (= (and d!27055 (not c!17166)) b!100114))

(assert (= (and d!27055 (not res!50217)) b!100115))

(declare-fun m!110503 () Bool)

(assert (=> d!27055 m!110503))

(declare-fun m!110505 () Bool)

(assert (=> b!100113 m!110505))

(declare-fun m!110507 () Bool)

(assert (=> b!100113 m!110507))

(assert (=> b!100113 m!110507))

(declare-fun m!110509 () Bool)

(assert (=> b!100113 m!110509))

(assert (=> b!100115 m!110507))

(assert (=> b!100115 m!110507))

(assert (=> b!100115 m!110509))

(assert (=> d!26667 d!27055))

(assert (=> d!26667 d!26623))

(declare-fun lt!50560 () Bool)

(declare-fun d!27057 () Bool)

(assert (=> d!27057 (= lt!50560 (select (content!104 (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!65199 () Bool)

(assert (=> d!27057 (= lt!50560 e!65199)))

(declare-fun res!50218 () Bool)

(assert (=> d!27057 (=> (not res!50218) (not e!65199))))

(assert (=> d!27057 (= res!50218 ((_ is Cons!1565) (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)))))

(assert (=> d!27057 (= (contains!794 (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!50560)))

(declare-fun b!100116 () Bool)

(declare-fun e!65198 () Bool)

(assert (=> b!100116 (= e!65199 e!65198)))

(declare-fun res!50219 () Bool)

(assert (=> b!100116 (=> res!50219 e!65198)))

(assert (=> b!100116 (= res!50219 (= (h!2160 (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!100117 () Bool)

(assert (=> b!100117 (= e!65198 (contains!794 (t!5535 (ite c!16941 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) Nil!1566) Nil!1566)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!27057 res!50218) b!100116))

(assert (= (and b!100116 (not res!50219)) b!100117))

(declare-fun m!110511 () Bool)

(assert (=> d!27057 m!110511))

(assert (=> d!27057 m!109423))

(declare-fun m!110513 () Bool)

(assert (=> d!27057 m!110513))

(assert (=> b!100117 m!109423))

(declare-fun m!110515 () Bool)

(assert (=> b!100117 m!110515))

(assert (=> b!99549 d!27057))

(assert (=> b!99543 d!26855))

(declare-fun b!100118 () Bool)

(declare-fun e!65202 () Bool)

(assert (=> b!100118 (= e!65202 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100118 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun e!65204 () Bool)

(declare-fun b!100119 () Bool)

(declare-fun lt!50564 () ListLongMap!1503)

(assert (=> b!100119 (= e!65204 (= lt!50564 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16))))))

(declare-fun b!100120 () Bool)

(declare-fun e!65206 () ListLongMap!1503)

(assert (=> b!100120 (= e!65206 (ListLongMap!1504 Nil!1565))))

(declare-fun b!100121 () Bool)

(assert (=> b!100121 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> b!100121 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 lt!49932)))))

(declare-fun e!65201 () Bool)

(assert (=> b!100121 (= e!65201 (= (apply!93 lt!50564 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 lt!49932) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!10289 () Bool)

(declare-fun call!10292 () ListLongMap!1503)

(assert (=> bm!10289 (= call!10292 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2501 newMap!16)))))

(declare-fun d!27059 () Bool)

(declare-fun e!65200 () Bool)

(assert (=> d!27059 e!65200))

(declare-fun res!50221 () Bool)

(assert (=> d!27059 (=> (not res!50221) (not e!65200))))

(assert (=> d!27059 (= res!50221 (not (contains!792 lt!50564 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27059 (= lt!50564 e!65206)))

(declare-fun c!17167 () Bool)

(assert (=> d!27059 (= c!17167 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!27059 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!27059 (= (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50564)))

(declare-fun b!100122 () Bool)

(declare-fun e!65205 () ListLongMap!1503)

(assert (=> b!100122 (= e!65206 e!65205)))

(declare-fun c!17170 () Bool)

(assert (=> b!100122 (= c!17170 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100123 () Bool)

(declare-fun e!65203 () Bool)

(assert (=> b!100123 (= e!65203 e!65204)))

(declare-fun c!17168 () Bool)

(assert (=> b!100123 (= c!17168 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100124 () Bool)

(declare-fun res!50222 () Bool)

(assert (=> b!100124 (=> (not res!50222) (not e!65200))))

(assert (=> b!100124 (= res!50222 (not (contains!792 lt!50564 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100125 () Bool)

(declare-fun lt!50565 () Unit!2982)

(declare-fun lt!50562 () Unit!2982)

(assert (=> b!100125 (= lt!50565 lt!50562)))

(declare-fun lt!50561 () V!3161)

(declare-fun lt!50563 () (_ BitVec 64))

(declare-fun lt!50567 () (_ BitVec 64))

(declare-fun lt!50566 () ListLongMap!1503)

(assert (=> b!100125 (not (contains!792 (+!131 lt!50566 (tuple2!2309 lt!50567 lt!50561)) lt!50563))))

(assert (=> b!100125 (= lt!50562 (addStillNotContains!43 lt!50566 lt!50567 lt!50561 lt!50563))))

(assert (=> b!100125 (= lt!50563 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100125 (= lt!50561 (get!1295 (select (arr!2013 lt!49932) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100125 (= lt!50567 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100125 (= lt!50566 call!10292)))

(assert (=> b!100125 (= e!65205 (+!131 call!10292 (tuple2!2309 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (get!1295 (select (arr!2013 lt!49932) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100126 () Bool)

(assert (=> b!100126 (= e!65203 e!65201)))

(assert (=> b!100126 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun res!50220 () Bool)

(assert (=> b!100126 (= res!50220 (contains!792 lt!50564 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100126 (=> (not res!50220) (not e!65201))))

(declare-fun b!100127 () Bool)

(assert (=> b!100127 (= e!65200 e!65203)))

(declare-fun c!17169 () Bool)

(assert (=> b!100127 (= c!17169 e!65202)))

(declare-fun res!50223 () Bool)

(assert (=> b!100127 (=> (not res!50223) (not e!65202))))

(assert (=> b!100127 (= res!50223 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100128 () Bool)

(assert (=> b!100128 (= e!65205 call!10292)))

(declare-fun b!100129 () Bool)

(assert (=> b!100129 (= e!65204 (isEmpty!365 lt!50564))))

(assert (= (and d!27059 c!17167) b!100120))

(assert (= (and d!27059 (not c!17167)) b!100122))

(assert (= (and b!100122 c!17170) b!100125))

(assert (= (and b!100122 (not c!17170)) b!100128))

(assert (= (or b!100125 b!100128) bm!10289))

(assert (= (and d!27059 res!50221) b!100124))

(assert (= (and b!100124 res!50222) b!100127))

(assert (= (and b!100127 res!50223) b!100118))

(assert (= (and b!100127 c!17169) b!100126))

(assert (= (and b!100127 (not c!17169)) b!100123))

(assert (= (and b!100126 res!50220) b!100121))

(assert (= (and b!100123 c!17168) b!100119))

(assert (= (and b!100123 (not c!17168)) b!100129))

(declare-fun b_lambda!4473 () Bool)

(assert (=> (not b_lambda!4473) (not b!100121)))

(assert (=> b!100121 t!5546))

(declare-fun b_and!6169 () Bool)

(assert (= b_and!6165 (and (=> t!5546 result!3299) b_and!6169)))

(assert (=> b!100121 t!5548))

(declare-fun b_and!6171 () Bool)

(assert (= b_and!6167 (and (=> t!5548 result!3301) b_and!6171)))

(declare-fun b_lambda!4475 () Bool)

(assert (=> (not b_lambda!4475) (not b!100125)))

(assert (=> b!100125 t!5546))

(declare-fun b_and!6173 () Bool)

(assert (= b_and!6169 (and (=> t!5546 result!3299) b_and!6173)))

(assert (=> b!100125 t!5548))

(declare-fun b_and!6175 () Bool)

(assert (= b_and!6171 (and (=> t!5548 result!3301) b_and!6175)))

(declare-fun m!110517 () Bool)

(assert (=> bm!10289 m!110517))

(declare-fun m!110519 () Bool)

(assert (=> b!100129 m!110519))

(declare-fun m!110521 () Bool)

(assert (=> b!100124 m!110521))

(assert (=> b!100122 m!109033))

(assert (=> b!100122 m!109033))

(assert (=> b!100122 m!109041))

(assert (=> b!100125 m!109541))

(declare-fun m!110523 () Bool)

(assert (=> b!100125 m!110523))

(declare-fun m!110525 () Bool)

(assert (=> b!100125 m!110525))

(declare-fun m!110527 () Bool)

(assert (=> b!100125 m!110527))

(assert (=> b!100125 m!110523))

(assert (=> b!100125 m!109123))

(assert (=> b!100125 m!109033))

(assert (=> b!100125 m!109541))

(assert (=> b!100125 m!109123))

(assert (=> b!100125 m!109543))

(declare-fun m!110529 () Bool)

(assert (=> b!100125 m!110529))

(assert (=> b!100118 m!109033))

(assert (=> b!100118 m!109033))

(assert (=> b!100118 m!109041))

(assert (=> b!100126 m!109033))

(assert (=> b!100126 m!109033))

(declare-fun m!110531 () Bool)

(assert (=> b!100126 m!110531))

(declare-fun m!110533 () Bool)

(assert (=> d!27059 m!110533))

(assert (=> d!27059 m!109025))

(assert (=> b!100119 m!110517))

(assert (=> b!100121 m!109541))

(assert (=> b!100121 m!109033))

(declare-fun m!110535 () Bool)

(assert (=> b!100121 m!110535))

(assert (=> b!100121 m!109123))

(assert (=> b!100121 m!109033))

(assert (=> b!100121 m!109541))

(assert (=> b!100121 m!109123))

(assert (=> b!100121 m!109543))

(assert (=> bm!10230 d!27059))

(assert (=> d!26717 d!26719))

(assert (=> d!26717 d!26721))

(declare-fun d!27061 () Bool)

(assert (=> d!27061 (isDefined!104 (getValueByKey!152 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!27061 true))

(declare-fun _$12!347 () Unit!2982)

(assert (=> d!27061 (= (choose!615 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) _$12!347)))

(declare-fun bs!4149 () Bool)

(assert (= bs!4149 d!27061))

(assert (=> bs!4149 m!108735))

(assert (=> bs!4149 m!108935))

(assert (=> bs!4149 m!108935))

(assert (=> bs!4149 m!108937))

(assert (=> d!26717 d!27061))

(declare-fun d!27063 () Bool)

(declare-fun res!50228 () Bool)

(declare-fun e!65211 () Bool)

(assert (=> d!27063 (=> res!50228 e!65211)))

(assert (=> d!27063 (= res!50228 (or ((_ is Nil!1565) (toList!767 lt!49742)) ((_ is Nil!1565) (t!5534 (toList!767 lt!49742)))))))

(assert (=> d!27063 (= (isStrictlySorted!292 (toList!767 lt!49742)) e!65211)))

(declare-fun b!100134 () Bool)

(declare-fun e!65212 () Bool)

(assert (=> b!100134 (= e!65211 e!65212)))

(declare-fun res!50229 () Bool)

(assert (=> b!100134 (=> (not res!50229) (not e!65212))))

(assert (=> b!100134 (= res!50229 (bvslt (_1!1165 (h!2159 (toList!767 lt!49742))) (_1!1165 (h!2159 (t!5534 (toList!767 lt!49742))))))))

(declare-fun b!100135 () Bool)

(assert (=> b!100135 (= e!65212 (isStrictlySorted!292 (t!5534 (toList!767 lt!49742))))))

(assert (= (and d!27063 (not res!50228)) b!100134))

(assert (= (and b!100134 res!50229) b!100135))

(declare-fun m!110537 () Bool)

(assert (=> b!100135 m!110537))

(assert (=> d!26717 d!27063))

(assert (=> bm!10240 d!26733))

(declare-fun b!100136 () Bool)

(declare-fun e!65213 () Bool)

(declare-fun e!65214 () Bool)

(assert (=> b!100136 (= e!65213 e!65214)))

(declare-fun c!17171 () Bool)

(assert (=> b!100136 (= c!17171 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10290 () Bool)

(declare-fun call!10293 () Bool)

(assert (=> bm!10290 (= call!10293 (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17171 (Cons!1565 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000) Nil!1566) Nil!1566)))))

(declare-fun d!27065 () Bool)

(declare-fun res!50232 () Bool)

(declare-fun e!65215 () Bool)

(assert (=> d!27065 (=> res!50232 e!65215)))

(assert (=> d!27065 (= res!50232 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!27065 (= (arrayNoDuplicates!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000 Nil!1566) e!65215)))

(declare-fun b!100137 () Bool)

(assert (=> b!100137 (= e!65214 call!10293)))

(declare-fun b!100138 () Bool)

(assert (=> b!100138 (= e!65215 e!65213)))

(declare-fun res!50231 () Bool)

(assert (=> b!100138 (=> (not res!50231) (not e!65213))))

(declare-fun e!65216 () Bool)

(assert (=> b!100138 (= res!50231 (not e!65216))))

(declare-fun res!50230 () Bool)

(assert (=> b!100138 (=> (not res!50230) (not e!65216))))

(assert (=> b!100138 (= res!50230 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!100139 () Bool)

(assert (=> b!100139 (= e!65214 call!10293)))

(declare-fun b!100140 () Bool)

(assert (=> b!100140 (= e!65216 (contains!794 Nil!1566 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!27065 (not res!50232)) b!100138))

(assert (= (and b!100138 res!50230) b!100140))

(assert (= (and b!100138 res!50231) b!100136))

(assert (= (and b!100136 c!17171) b!100139))

(assert (= (and b!100136 (not c!17171)) b!100137))

(assert (= (or b!100139 b!100137) bm!10290))

(assert (=> b!100136 m!110183))

(assert (=> b!100136 m!110183))

(assert (=> b!100136 m!110191))

(assert (=> bm!10290 m!110183))

(declare-fun m!110539 () Bool)

(assert (=> bm!10290 m!110539))

(assert (=> b!100138 m!110183))

(assert (=> b!100138 m!110183))

(assert (=> b!100138 m!110191))

(assert (=> b!100140 m!110183))

(assert (=> b!100140 m!110183))

(declare-fun m!110541 () Bool)

(assert (=> b!100140 m!110541))

(assert (=> b!99614 d!27065))

(declare-fun d!27067 () Bool)

(declare-fun e!65218 () Bool)

(assert (=> d!27067 e!65218))

(declare-fun res!50233 () Bool)

(assert (=> d!27067 (=> res!50233 e!65218)))

(declare-fun lt!50570 () Bool)

(assert (=> d!27067 (= res!50233 (not lt!50570))))

(declare-fun lt!50569 () Bool)

(assert (=> d!27067 (= lt!50570 lt!50569)))

(declare-fun lt!50568 () Unit!2982)

(declare-fun e!65217 () Unit!2982)

(assert (=> d!27067 (= lt!50568 e!65217)))

(declare-fun c!17172 () Bool)

(assert (=> d!27067 (= c!17172 lt!50569)))

(assert (=> d!27067 (= lt!50569 (containsKey!155 (toList!767 lt!50172) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!27067 (= (contains!792 lt!50172 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) lt!50570)))

(declare-fun b!100141 () Bool)

(declare-fun lt!50571 () Unit!2982)

(assert (=> b!100141 (= e!65217 lt!50571)))

(assert (=> b!100141 (= lt!50571 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50172) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100141 (isDefined!104 (getValueByKey!152 (toList!767 lt!50172) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100142 () Bool)

(declare-fun Unit!3026 () Unit!2982)

(assert (=> b!100142 (= e!65217 Unit!3026)))

(declare-fun b!100143 () Bool)

(assert (=> b!100143 (= e!65218 (isDefined!104 (getValueByKey!152 (toList!767 lt!50172) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!27067 c!17172) b!100141))

(assert (= (and d!27067 (not c!17172)) b!100142))

(assert (= (and d!27067 (not res!50233)) b!100143))

(assert (=> d!27067 m!109033))

(declare-fun m!110543 () Bool)

(assert (=> d!27067 m!110543))

(assert (=> b!100141 m!109033))

(declare-fun m!110545 () Bool)

(assert (=> b!100141 m!110545))

(assert (=> b!100141 m!109033))

(assert (=> b!100141 m!110203))

(assert (=> b!100141 m!110203))

(declare-fun m!110547 () Bool)

(assert (=> b!100141 m!110547))

(assert (=> b!100143 m!109033))

(assert (=> b!100143 m!110203))

(assert (=> b!100143 m!110203))

(assert (=> b!100143 m!110547))

(assert (=> b!99600 d!27067))

(assert (=> b!99435 d!26755))

(declare-fun d!27069 () Bool)

(declare-fun e!65220 () Bool)

(assert (=> d!27069 e!65220))

(declare-fun res!50234 () Bool)

(assert (=> d!27069 (=> res!50234 e!65220)))

(declare-fun lt!50574 () Bool)

(assert (=> d!27069 (= res!50234 (not lt!50574))))

(declare-fun lt!50573 () Bool)

(assert (=> d!27069 (= lt!50574 lt!50573)))

(declare-fun lt!50572 () Unit!2982)

(declare-fun e!65219 () Unit!2982)

(assert (=> d!27069 (= lt!50572 e!65219)))

(declare-fun c!17173 () Bool)

(assert (=> d!27069 (= c!17173 lt!50573)))

(assert (=> d!27069 (= lt!50573 (containsKey!155 (toList!767 (+!131 lt!50038 (tuple2!2309 lt!50039 lt!50033))) lt!50035))))

(assert (=> d!27069 (= (contains!792 (+!131 lt!50038 (tuple2!2309 lt!50039 lt!50033)) lt!50035) lt!50574)))

(declare-fun b!100144 () Bool)

(declare-fun lt!50575 () Unit!2982)

(assert (=> b!100144 (= e!65219 lt!50575)))

(assert (=> b!100144 (= lt!50575 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (+!131 lt!50038 (tuple2!2309 lt!50039 lt!50033))) lt!50035))))

(assert (=> b!100144 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50038 (tuple2!2309 lt!50039 lt!50033))) lt!50035))))

(declare-fun b!100145 () Bool)

(declare-fun Unit!3027 () Unit!2982)

(assert (=> b!100145 (= e!65219 Unit!3027)))

(declare-fun b!100146 () Bool)

(assert (=> b!100146 (= e!65220 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50038 (tuple2!2309 lt!50039 lt!50033))) lt!50035)))))

(assert (= (and d!27069 c!17173) b!100144))

(assert (= (and d!27069 (not c!17173)) b!100145))

(assert (= (and d!27069 (not res!50234)) b!100146))

(declare-fun m!110549 () Bool)

(assert (=> d!27069 m!110549))

(declare-fun m!110551 () Bool)

(assert (=> b!100144 m!110551))

(declare-fun m!110553 () Bool)

(assert (=> b!100144 m!110553))

(assert (=> b!100144 m!110553))

(declare-fun m!110555 () Bool)

(assert (=> b!100144 m!110555))

(assert (=> b!100146 m!110553))

(assert (=> b!100146 m!110553))

(assert (=> b!100146 m!110555))

(assert (=> b!99435 d!27069))

(declare-fun d!27071 () Bool)

(declare-fun e!65221 () Bool)

(assert (=> d!27071 e!65221))

(declare-fun res!50236 () Bool)

(assert (=> d!27071 (=> (not res!50236) (not e!65221))))

(declare-fun lt!50578 () ListLongMap!1503)

(assert (=> d!27071 (= res!50236 (contains!792 lt!50578 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50577 () List!1568)

(assert (=> d!27071 (= lt!50578 (ListLongMap!1504 lt!50577))))

(declare-fun lt!50576 () Unit!2982)

(declare-fun lt!50579 () Unit!2982)

(assert (=> d!27071 (= lt!50576 lt!50579)))

(assert (=> d!27071 (= (getValueByKey!152 lt!50577 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27071 (= lt!50579 (lemmaContainsTupThenGetReturnValue!68 lt!50577 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27071 (= lt!50577 (insertStrictlySorted!71 (toList!767 call!10207) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27071 (= (+!131 call!10207 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50578)))

(declare-fun b!100147 () Bool)

(declare-fun res!50235 () Bool)

(assert (=> b!100147 (=> (not res!50235) (not e!65221))))

(assert (=> b!100147 (= res!50235 (= (getValueByKey!152 (toList!767 lt!50578) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100148 () Bool)

(assert (=> b!100148 (= e!65221 (contains!795 (toList!767 lt!50578) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27071 res!50236) b!100147))

(assert (= (and b!100147 res!50235) b!100148))

(declare-fun m!110557 () Bool)

(assert (=> d!27071 m!110557))

(declare-fun m!110559 () Bool)

(assert (=> d!27071 m!110559))

(declare-fun m!110561 () Bool)

(assert (=> d!27071 m!110561))

(declare-fun m!110563 () Bool)

(assert (=> d!27071 m!110563))

(declare-fun m!110565 () Bool)

(assert (=> b!100147 m!110565))

(declare-fun m!110567 () Bool)

(assert (=> b!100148 m!110567))

(assert (=> b!99435 d!27071))

(declare-fun d!27073 () Bool)

(assert (=> d!27073 (not (contains!792 (+!131 lt!50038 (tuple2!2309 lt!50039 lt!50033)) lt!50035))))

(declare-fun lt!50582 () Unit!2982)

(declare-fun choose!620 (ListLongMap!1503 (_ BitVec 64) V!3161 (_ BitVec 64)) Unit!2982)

(assert (=> d!27073 (= lt!50582 (choose!620 lt!50038 lt!50039 lt!50033 lt!50035))))

(declare-fun e!65224 () Bool)

(assert (=> d!27073 e!65224))

(declare-fun res!50239 () Bool)

(assert (=> d!27073 (=> (not res!50239) (not e!65224))))

(assert (=> d!27073 (= res!50239 (not (contains!792 lt!50038 lt!50035)))))

(assert (=> d!27073 (= (addStillNotContains!43 lt!50038 lt!50039 lt!50033 lt!50035) lt!50582)))

(declare-fun b!100152 () Bool)

(assert (=> b!100152 (= e!65224 (not (= lt!50039 lt!50035)))))

(assert (= (and d!27073 res!50239) b!100152))

(assert (=> d!27073 m!109143))

(assert (=> d!27073 m!109143))

(assert (=> d!27073 m!109145))

(declare-fun m!110569 () Bool)

(assert (=> d!27073 m!110569))

(declare-fun m!110571 () Bool)

(assert (=> d!27073 m!110571))

(assert (=> b!99435 d!27073))

(declare-fun d!27075 () Bool)

(declare-fun e!65225 () Bool)

(assert (=> d!27075 e!65225))

(declare-fun res!50241 () Bool)

(assert (=> d!27075 (=> (not res!50241) (not e!65225))))

(declare-fun lt!50585 () ListLongMap!1503)

(assert (=> d!27075 (= res!50241 (contains!792 lt!50585 (_1!1165 (tuple2!2309 lt!50039 lt!50033))))))

(declare-fun lt!50584 () List!1568)

(assert (=> d!27075 (= lt!50585 (ListLongMap!1504 lt!50584))))

(declare-fun lt!50583 () Unit!2982)

(declare-fun lt!50586 () Unit!2982)

(assert (=> d!27075 (= lt!50583 lt!50586)))

(assert (=> d!27075 (= (getValueByKey!152 lt!50584 (_1!1165 (tuple2!2309 lt!50039 lt!50033))) (Some!157 (_2!1165 (tuple2!2309 lt!50039 lt!50033))))))

(assert (=> d!27075 (= lt!50586 (lemmaContainsTupThenGetReturnValue!68 lt!50584 (_1!1165 (tuple2!2309 lt!50039 lt!50033)) (_2!1165 (tuple2!2309 lt!50039 lt!50033))))))

(assert (=> d!27075 (= lt!50584 (insertStrictlySorted!71 (toList!767 lt!50038) (_1!1165 (tuple2!2309 lt!50039 lt!50033)) (_2!1165 (tuple2!2309 lt!50039 lt!50033))))))

(assert (=> d!27075 (= (+!131 lt!50038 (tuple2!2309 lt!50039 lt!50033)) lt!50585)))

(declare-fun b!100153 () Bool)

(declare-fun res!50240 () Bool)

(assert (=> b!100153 (=> (not res!50240) (not e!65225))))

(assert (=> b!100153 (= res!50240 (= (getValueByKey!152 (toList!767 lt!50585) (_1!1165 (tuple2!2309 lt!50039 lt!50033))) (Some!157 (_2!1165 (tuple2!2309 lt!50039 lt!50033)))))))

(declare-fun b!100154 () Bool)

(assert (=> b!100154 (= e!65225 (contains!795 (toList!767 lt!50585) (tuple2!2309 lt!50039 lt!50033)))))

(assert (= (and d!27075 res!50241) b!100153))

(assert (= (and b!100153 res!50240) b!100154))

(declare-fun m!110573 () Bool)

(assert (=> d!27075 m!110573))

(declare-fun m!110575 () Bool)

(assert (=> d!27075 m!110575))

(declare-fun m!110577 () Bool)

(assert (=> d!27075 m!110577))

(declare-fun m!110579 () Bool)

(assert (=> d!27075 m!110579))

(declare-fun m!110581 () Bool)

(assert (=> b!100153 m!110581))

(declare-fun m!110583 () Bool)

(assert (=> b!100154 m!110583))

(assert (=> b!99435 d!27075))

(assert (=> b!99370 d!26855))

(declare-fun d!27077 () Bool)

(declare-fun e!65227 () Bool)

(assert (=> d!27077 e!65227))

(declare-fun res!50242 () Bool)

(assert (=> d!27077 (=> res!50242 e!65227)))

(declare-fun lt!50589 () Bool)

(assert (=> d!27077 (= res!50242 (not lt!50589))))

(declare-fun lt!50588 () Bool)

(assert (=> d!27077 (= lt!50589 lt!50588)))

(declare-fun lt!50587 () Unit!2982)

(declare-fun e!65226 () Unit!2982)

(assert (=> d!27077 (= lt!50587 e!65226)))

(declare-fun c!17174 () Bool)

(assert (=> d!27077 (= c!17174 lt!50588)))

(assert (=> d!27077 (= lt!50588 (containsKey!155 (toList!767 lt!50172) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27077 (= (contains!792 lt!50172 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50589)))

(declare-fun b!100155 () Bool)

(declare-fun lt!50590 () Unit!2982)

(assert (=> b!100155 (= e!65226 lt!50590)))

(assert (=> b!100155 (= lt!50590 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50172) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100155 (isDefined!104 (getValueByKey!152 (toList!767 lt!50172) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100156 () Bool)

(declare-fun Unit!3028 () Unit!2982)

(assert (=> b!100156 (= e!65226 Unit!3028)))

(declare-fun b!100157 () Bool)

(assert (=> b!100157 (= e!65227 (isDefined!104 (getValueByKey!152 (toList!767 lt!50172) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27077 c!17174) b!100155))

(assert (= (and d!27077 (not c!17174)) b!100156))

(assert (= (and d!27077 (not res!50242)) b!100157))

(declare-fun m!110585 () Bool)

(assert (=> d!27077 m!110585))

(declare-fun m!110587 () Bool)

(assert (=> b!100155 m!110587))

(assert (=> b!100155 m!109861))

(assert (=> b!100155 m!109861))

(declare-fun m!110589 () Bool)

(assert (=> b!100155 m!110589))

(assert (=> b!100157 m!109861))

(assert (=> b!100157 m!109861))

(assert (=> b!100157 m!110589))

(assert (=> bm!10229 d!27077))

(assert (=> bm!10223 d!26813))

(assert (=> b!99665 d!26929))

(declare-fun d!27079 () Bool)

(declare-fun e!65228 () Bool)

(assert (=> d!27079 e!65228))

(declare-fun res!50244 () Bool)

(assert (=> d!27079 (=> (not res!50244) (not e!65228))))

(declare-fun lt!50593 () ListLongMap!1503)

(assert (=> d!27079 (= res!50244 (contains!792 lt!50593 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50592 () List!1568)

(assert (=> d!27079 (= lt!50593 (ListLongMap!1504 lt!50592))))

(declare-fun lt!50591 () Unit!2982)

(declare-fun lt!50594 () Unit!2982)

(assert (=> d!27079 (= lt!50591 lt!50594)))

(assert (=> d!27079 (= (getValueByKey!152 lt!50592 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27079 (= lt!50594 (lemmaContainsTupThenGetReturnValue!68 lt!50592 (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27079 (= lt!50592 (insertStrictlySorted!71 (toList!767 (map!1256 newMap!16)) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27079 (= (+!131 (map!1256 newMap!16) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50593)))

(declare-fun b!100158 () Bool)

(declare-fun res!50243 () Bool)

(assert (=> b!100158 (=> (not res!50243) (not e!65228))))

(assert (=> b!100158 (= res!50243 (= (getValueByKey!152 (toList!767 lt!50593) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100159 () Bool)

(assert (=> b!100159 (= e!65228 (contains!795 (toList!767 lt!50593) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27079 res!50244) b!100158))

(assert (= (and b!100158 res!50243) b!100159))

(declare-fun m!110591 () Bool)

(assert (=> d!27079 m!110591))

(declare-fun m!110593 () Bool)

(assert (=> d!27079 m!110593))

(declare-fun m!110595 () Bool)

(assert (=> d!27079 m!110595))

(declare-fun m!110597 () Bool)

(assert (=> d!27079 m!110597))

(declare-fun m!110599 () Bool)

(assert (=> b!100158 m!110599))

(declare-fun m!110601 () Bool)

(assert (=> b!100159 m!110601))

(assert (=> b!99665 d!27079))

(assert (=> b!99665 d!26615))

(declare-fun b!100162 () Bool)

(declare-fun res!50247 () Bool)

(declare-fun e!65229 () Bool)

(assert (=> b!100162 (=> (not res!50247) (not e!65229))))

(assert (=> b!100162 (= res!50247 (= (size!2269 (v!2817 (underlying!341 thiss!992))) (bvadd (_size!477 (v!2817 (underlying!341 thiss!992))) (bvsdiv (bvadd (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!100161 () Bool)

(declare-fun res!50245 () Bool)

(assert (=> b!100161 (=> (not res!50245) (not e!65229))))

(assert (=> b!100161 (= res!50245 (bvsge (size!2269 (v!2817 (underlying!341 thiss!992))) (_size!477 (v!2817 (underlying!341 thiss!992)))))))

(declare-fun b!100163 () Bool)

(assert (=> b!100163 (= e!65229 (and (bvsge (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2318 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!477 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun d!27081 () Bool)

(declare-fun res!50246 () Bool)

(assert (=> d!27081 (=> (not res!50246) (not e!65229))))

(assert (=> d!27081 (= res!50246 (validMask!0 (mask!6608 (v!2817 (underlying!341 thiss!992)))))))

(assert (=> d!27081 (= (simpleValid!69 (v!2817 (underlying!341 thiss!992))) e!65229)))

(declare-fun b!100160 () Bool)

(declare-fun res!50248 () Bool)

(assert (=> b!100160 (=> (not res!50248) (not e!65229))))

(assert (=> b!100160 (= res!50248 (and (= (size!2264 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000001)) (= (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (size!2264 (_values!2484 (v!2817 (underlying!341 thiss!992))))) (bvsge (_size!477 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!477 (v!2817 (underlying!341 thiss!992))) (bvadd (mask!6608 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000001))))))

(assert (= (and d!27081 res!50246) b!100160))

(assert (= (and b!100160 res!50248) b!100161))

(assert (= (and b!100161 res!50245) b!100162))

(assert (= (and b!100162 res!50247) b!100163))

(declare-fun m!110603 () Bool)

(assert (=> b!100162 m!110603))

(assert (=> b!100161 m!110603))

(assert (=> d!27081 m!108767))

(assert (=> d!26763 d!27081))

(assert (=> b!99500 d!26801))

(assert (=> b!99500 d!26803))

(declare-fun b!100167 () Bool)

(declare-fun e!65231 () Option!158)

(assert (=> b!100167 (= e!65231 None!156)))

(declare-fun b!100165 () Bool)

(declare-fun e!65230 () Option!158)

(assert (=> b!100165 (= e!65230 e!65231)))

(declare-fun c!17176 () Bool)

(assert (=> b!100165 (= c!17176 (and ((_ is Cons!1564) (toList!767 lt!50042)) (not (= (_1!1165 (h!2159 (toList!767 lt!50042))) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!100164 () Bool)

(assert (=> b!100164 (= e!65230 (Some!157 (_2!1165 (h!2159 (toList!767 lt!50042)))))))

(declare-fun c!17175 () Bool)

(declare-fun d!27083 () Bool)

(assert (=> d!27083 (= c!17175 (and ((_ is Cons!1564) (toList!767 lt!50042)) (= (_1!1165 (h!2159 (toList!767 lt!50042))) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27083 (= (getValueByKey!152 (toList!767 lt!50042) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!65230)))

(declare-fun b!100166 () Bool)

(assert (=> b!100166 (= e!65231 (getValueByKey!152 (t!5534 (toList!767 lt!50042)) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!27083 c!17175) b!100164))

(assert (= (and d!27083 (not c!17175)) b!100165))

(assert (= (and b!100165 c!17176) b!100166))

(assert (= (and b!100165 (not c!17176)) b!100167))

(declare-fun m!110605 () Bool)

(assert (=> b!100166 m!110605))

(assert (=> b!99440 d!27083))

(declare-fun d!27085 () Bool)

(assert (=> d!27085 (isDefined!104 (getValueByKey!152 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!50595 () Unit!2982)

(assert (=> d!27085 (= lt!50595 (choose!615 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65232 () Bool)

(assert (=> d!27085 e!65232))

(declare-fun res!50249 () Bool)

(assert (=> d!27085 (=> (not res!50249) (not e!65232))))

(assert (=> d!27085 (= res!50249 (isStrictlySorted!292 (toList!767 lt!49838)))))

(assert (=> d!27085 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000) lt!50595)))

(declare-fun b!100168 () Bool)

(assert (=> b!100168 (= e!65232 (containsKey!155 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27085 res!50249) b!100168))

(assert (=> d!27085 m!109297))

(assert (=> d!27085 m!109297))

(assert (=> d!27085 m!109299))

(declare-fun m!110607 () Bool)

(assert (=> d!27085 m!110607))

(assert (=> d!27085 m!109739))

(assert (=> b!100168 m!109293))

(assert (=> b!99469 d!27085))

(assert (=> b!99469 d!26795))

(assert (=> b!99469 d!26797))

(declare-fun d!27087 () Bool)

(declare-fun e!65234 () Bool)

(assert (=> d!27087 e!65234))

(declare-fun res!50250 () Bool)

(assert (=> d!27087 (=> res!50250 e!65234)))

(declare-fun lt!50598 () Bool)

(assert (=> d!27087 (= res!50250 (not lt!50598))))

(declare-fun lt!50597 () Bool)

(assert (=> d!27087 (= lt!50598 lt!50597)))

(declare-fun lt!50596 () Unit!2982)

(declare-fun e!65233 () Unit!2982)

(assert (=> d!27087 (= lt!50596 e!65233)))

(declare-fun c!17177 () Bool)

(assert (=> d!27087 (= c!17177 lt!50597)))

(assert (=> d!27087 (= lt!50597 (containsKey!155 (toList!767 lt!50042) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!27087 (= (contains!792 lt!50042 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50598)))

(declare-fun b!100169 () Bool)

(declare-fun lt!50599 () Unit!2982)

(assert (=> b!100169 (= e!65233 lt!50599)))

(assert (=> b!100169 (= lt!50599 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50042) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!100169 (isDefined!104 (getValueByKey!152 (toList!767 lt!50042) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100170 () Bool)

(declare-fun Unit!3029 () Unit!2982)

(assert (=> b!100170 (= e!65233 Unit!3029)))

(declare-fun b!100171 () Bool)

(assert (=> b!100171 (= e!65234 (isDefined!104 (getValueByKey!152 (toList!767 lt!50042) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!27087 c!17177) b!100169))

(assert (= (and d!27087 (not c!17177)) b!100170))

(assert (= (and d!27087 (not res!50250)) b!100171))

(declare-fun m!110609 () Bool)

(assert (=> d!27087 m!110609))

(declare-fun m!110611 () Bool)

(assert (=> b!100169 m!110611))

(assert (=> b!100169 m!109165))

(assert (=> b!100169 m!109165))

(declare-fun m!110613 () Bool)

(assert (=> b!100169 m!110613))

(assert (=> b!100171 m!109165))

(assert (=> b!100171 m!109165))

(assert (=> b!100171 m!110613))

(assert (=> d!26669 d!27087))

(declare-fun b!100175 () Bool)

(declare-fun e!65236 () Option!158)

(assert (=> b!100175 (= e!65236 None!156)))

(declare-fun b!100173 () Bool)

(declare-fun e!65235 () Option!158)

(assert (=> b!100173 (= e!65235 e!65236)))

(declare-fun c!17179 () Bool)

(assert (=> b!100173 (= c!17179 (and ((_ is Cons!1564) lt!50041) (not (= (_1!1165 (h!2159 lt!50041)) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!100172 () Bool)

(assert (=> b!100172 (= e!65235 (Some!157 (_2!1165 (h!2159 lt!50041))))))

(declare-fun d!27089 () Bool)

(declare-fun c!17178 () Bool)

(assert (=> d!27089 (= c!17178 (and ((_ is Cons!1564) lt!50041) (= (_1!1165 (h!2159 lt!50041)) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27089 (= (getValueByKey!152 lt!50041 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!65235)))

(declare-fun b!100174 () Bool)

(assert (=> b!100174 (= e!65236 (getValueByKey!152 (t!5534 lt!50041) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!27089 c!17178) b!100172))

(assert (= (and d!27089 (not c!17178)) b!100173))

(assert (= (and b!100173 c!17179) b!100174))

(assert (= (and b!100173 (not c!17179)) b!100175))

(declare-fun m!110615 () Bool)

(assert (=> b!100174 m!110615))

(assert (=> d!26669 d!27089))

(declare-fun d!27091 () Bool)

(assert (=> d!27091 (= (getValueByKey!152 lt!50041 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!157 (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!50600 () Unit!2982)

(assert (=> d!27091 (= lt!50600 (choose!619 lt!50041 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!65237 () Bool)

(assert (=> d!27091 e!65237))

(declare-fun res!50251 () Bool)

(assert (=> d!27091 (=> (not res!50251) (not e!65237))))

(assert (=> d!27091 (= res!50251 (isStrictlySorted!292 lt!50041))))

(assert (=> d!27091 (= (lemmaContainsTupThenGetReturnValue!68 lt!50041 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50600)))

(declare-fun b!100176 () Bool)

(declare-fun res!50252 () Bool)

(assert (=> b!100176 (=> (not res!50252) (not e!65237))))

(assert (=> b!100176 (= res!50252 (containsKey!155 lt!50041 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100177 () Bool)

(assert (=> b!100177 (= e!65237 (contains!795 lt!50041 (tuple2!2309 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!27091 res!50251) b!100176))

(assert (= (and b!100176 res!50252) b!100177))

(assert (=> d!27091 m!109159))

(declare-fun m!110617 () Bool)

(assert (=> d!27091 m!110617))

(declare-fun m!110619 () Bool)

(assert (=> d!27091 m!110619))

(declare-fun m!110621 () Bool)

(assert (=> b!100176 m!110621))

(declare-fun m!110623 () Bool)

(assert (=> b!100177 m!110623))

(assert (=> d!26669 d!27091))

(declare-fun b!100178 () Bool)

(declare-fun e!65240 () List!1568)

(assert (=> b!100178 (= e!65240 (insertStrictlySorted!71 (t!5534 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166))) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!10291 () Bool)

(declare-fun call!10294 () List!1568)

(declare-fun call!10296 () List!1568)

(assert (=> bm!10291 (= call!10294 call!10296)))

(declare-fun b!100179 () Bool)

(declare-fun e!65239 () List!1568)

(declare-fun e!65238 () List!1568)

(assert (=> b!100179 (= e!65239 e!65238)))

(declare-fun c!17182 () Bool)

(assert (=> b!100179 (= c!17182 (and ((_ is Cons!1564) (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166))) (= (_1!1165 (h!2159 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166)))) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!17183 () Bool)

(declare-fun bm!10292 () Bool)

(assert (=> bm!10292 (= call!10296 ($colon$colon!78 e!65240 (ite c!17183 (h!2159 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166))) (tuple2!2309 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!17180 () Bool)

(assert (=> bm!10292 (= c!17180 c!17183)))

(declare-fun c!17181 () Bool)

(declare-fun b!100180 () Bool)

(assert (=> b!100180 (= c!17181 (and ((_ is Cons!1564) (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166))) (bvsgt (_1!1165 (h!2159 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166)))) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!65241 () List!1568)

(assert (=> b!100180 (= e!65238 e!65241)))

(declare-fun d!27093 () Bool)

(declare-fun e!65242 () Bool)

(assert (=> d!27093 e!65242))

(declare-fun res!50253 () Bool)

(assert (=> d!27093 (=> (not res!50253) (not e!65242))))

(declare-fun lt!50601 () List!1568)

(assert (=> d!27093 (= res!50253 (isStrictlySorted!292 lt!50601))))

(assert (=> d!27093 (= lt!50601 e!65239)))

(assert (=> d!27093 (= c!17183 (and ((_ is Cons!1564) (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166))) (bvslt (_1!1165 (h!2159 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166)))) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27093 (isStrictlySorted!292 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166)))))

(assert (=> d!27093 (= (insertStrictlySorted!71 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166)) (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50601)))

(declare-fun b!100181 () Bool)

(declare-fun res!50254 () Bool)

(assert (=> b!100181 (=> (not res!50254) (not e!65242))))

(assert (=> b!100181 (= res!50254 (containsKey!155 lt!50601 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100182 () Bool)

(assert (=> b!100182 (= e!65240 (ite c!17182 (t!5534 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166))) (ite c!17181 (Cons!1564 (h!2159 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166))) (t!5534 (toList!767 (ite c!16932 (ite c!16926 call!10162 call!10179) call!10166)))) Nil!1565)))))

(declare-fun b!100183 () Bool)

(assert (=> b!100183 (= e!65238 call!10294)))

(declare-fun b!100184 () Bool)

(assert (=> b!100184 (= e!65242 (contains!795 lt!50601 (tuple2!2309 (_1!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1165 (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!100185 () Bool)

(declare-fun call!10295 () List!1568)

(assert (=> b!100185 (= e!65241 call!10295)))

(declare-fun b!100186 () Bool)

(assert (=> b!100186 (= e!65239 call!10296)))

(declare-fun bm!10293 () Bool)

(assert (=> bm!10293 (= call!10295 call!10294)))

(declare-fun b!100187 () Bool)

(assert (=> b!100187 (= e!65241 call!10295)))

(assert (= (and d!27093 c!17183) b!100186))

(assert (= (and d!27093 (not c!17183)) b!100179))

(assert (= (and b!100179 c!17182) b!100183))

(assert (= (and b!100179 (not c!17182)) b!100180))

(assert (= (and b!100180 c!17181) b!100187))

(assert (= (and b!100180 (not c!17181)) b!100185))

(assert (= (or b!100187 b!100185) bm!10293))

(assert (= (or b!100183 bm!10293) bm!10291))

(assert (= (or b!100186 bm!10291) bm!10292))

(assert (= (and bm!10292 c!17180) b!100178))

(assert (= (and bm!10292 (not c!17180)) b!100182))

(assert (= (and d!27093 res!50253) b!100181))

(assert (= (and b!100181 res!50254) b!100184))

(declare-fun m!110625 () Bool)

(assert (=> b!100181 m!110625))

(declare-fun m!110627 () Bool)

(assert (=> bm!10292 m!110627))

(declare-fun m!110629 () Bool)

(assert (=> d!27093 m!110629))

(declare-fun m!110631 () Bool)

(assert (=> d!27093 m!110631))

(declare-fun m!110633 () Bool)

(assert (=> b!100178 m!110633))

(declare-fun m!110635 () Bool)

(assert (=> b!100184 m!110635))

(assert (=> d!26669 d!27093))

(declare-fun lt!50602 () Bool)

(declare-fun d!27095 () Bool)

(assert (=> d!27095 (= lt!50602 (select (content!105 (toList!767 lt!50070)) (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun e!65244 () Bool)

(assert (=> d!27095 (= lt!50602 e!65244)))

(declare-fun res!50256 () Bool)

(assert (=> d!27095 (=> (not res!50256) (not e!65244))))

(assert (=> d!27095 (= res!50256 ((_ is Cons!1564) (toList!767 lt!50070)))))

(assert (=> d!27095 (= (contains!795 (toList!767 lt!50070) (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50602)))

(declare-fun b!100188 () Bool)

(declare-fun e!65243 () Bool)

(assert (=> b!100188 (= e!65244 e!65243)))

(declare-fun res!50255 () Bool)

(assert (=> b!100188 (=> res!50255 e!65243)))

(assert (=> b!100188 (= res!50255 (= (h!2159 (toList!767 lt!50070)) (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!100189 () Bool)

(assert (=> b!100189 (= e!65243 (contains!795 (t!5534 (toList!767 lt!50070)) (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!27095 res!50256) b!100188))

(assert (= (and b!100188 (not res!50255)) b!100189))

(declare-fun m!110637 () Bool)

(assert (=> d!27095 m!110637))

(declare-fun m!110639 () Bool)

(assert (=> d!27095 m!110639))

(declare-fun m!110641 () Bool)

(assert (=> b!100189 m!110641))

(assert (=> b!99459 d!27095))

(declare-fun d!27097 () Bool)

(assert (=> d!27097 (= (get!1299 (getValueByKey!152 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2823 (getValueByKey!152 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26765 d!27097))

(assert (=> d!26765 d!26797))

(assert (=> d!26739 d!26847))

(assert (=> d!26747 d!26645))

(declare-fun d!27099 () Bool)

(declare-fun e!65247 () Bool)

(assert (=> d!27099 e!65247))

(declare-fun res!50261 () Bool)

(assert (=> d!27099 (=> (not res!50261) (not e!65247))))

(declare-fun lt!50605 () SeekEntryResult!248)

(assert (=> d!27099 (= res!50261 ((_ is Found!248) lt!50605))))

(assert (=> d!27099 (= lt!50605 (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(assert (=> d!27099 true))

(declare-fun _$33!84 () Unit!2982)

(assert (=> d!27099 (= (choose!617 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)) _$33!84)))

(declare-fun b!100194 () Bool)

(declare-fun res!50262 () Bool)

(assert (=> b!100194 (=> (not res!50262) (not e!65247))))

(assert (=> b!100194 (= res!50262 (inRange!0 (index!3137 lt!50605) (mask!6608 newMap!16)))))

(declare-fun b!100195 () Bool)

(assert (=> b!100195 (= e!65247 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!50605)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!27099 res!50261) b!100194))

(assert (= (and b!100194 res!50262) b!100195))

(assert (=> d!27099 m!108735))

(assert (=> d!27099 m!108961))

(declare-fun m!110643 () Bool)

(assert (=> b!100194 m!110643))

(declare-fun m!110645 () Bool)

(assert (=> b!100195 m!110645))

(assert (=> d!26747 d!27099))

(assert (=> d!26747 d!26847))

(assert (=> b!99451 d!26851))

(assert (=> b!99451 d!26853))

(assert (=> b!99468 d!26869))

(assert (=> b!99468 d!26871))

(declare-fun d!27101 () Bool)

(assert (=> d!27101 (= (size!2269 newMap!16) (bvadd (_size!477 newMap!16) (bvsdiv (bvadd (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!99588 d!27101))

(assert (=> bm!10204 d!26899))

(declare-fun d!27103 () Bool)

(assert (=> d!27103 (= (apply!93 lt!50115 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1299 (getValueByKey!152 (toList!767 lt!50115) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4150 () Bool)

(assert (= bs!4150 d!27103))

(assert (=> bs!4150 m!109033))

(declare-fun m!110647 () Bool)

(assert (=> bs!4150 m!110647))

(assert (=> bs!4150 m!110647))

(declare-fun m!110649 () Bool)

(assert (=> bs!4150 m!110649))

(assert (=> b!99518 d!27103))

(declare-fun d!27105 () Bool)

(declare-fun c!17184 () Bool)

(assert (=> d!27105 (= c!17184 ((_ is ValueCellFull!974) (select (arr!2013 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!65248 () V!3161)

(assert (=> d!27105 (= (get!1295 (select (arr!2013 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65248)))

(declare-fun b!100196 () Bool)

(assert (=> b!100196 (= e!65248 (get!1297 (select (arr!2013 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100197 () Bool)

(assert (=> b!100197 (= e!65248 (get!1298 (select (arr!2013 (ite (or c!16932 c!16925) (_values!2484 newMap!16) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (index!3137 lt!49929) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27105 c!17184) b!100196))

(assert (= (and d!27105 (not c!17184)) b!100197))

(assert (=> b!100196 m!109403))

(assert (=> b!100196 m!109123))

(declare-fun m!110651 () Bool)

(assert (=> b!100196 m!110651))

(assert (=> b!100197 m!109403))

(assert (=> b!100197 m!109123))

(declare-fun m!110653 () Bool)

(assert (=> b!100197 m!110653))

(assert (=> b!99518 d!27105))

(declare-fun d!27107 () Bool)

(assert (=> d!27107 (= (apply!93 (+!131 lt!50007 (tuple2!2309 lt!50010 (minValue!2382 newMap!16))) lt!49992) (apply!93 lt!50007 lt!49992))))

(declare-fun lt!50606 () Unit!2982)

(assert (=> d!27107 (= lt!50606 (choose!610 lt!50007 lt!50010 (minValue!2382 newMap!16) lt!49992))))

(declare-fun e!65249 () Bool)

(assert (=> d!27107 e!65249))

(declare-fun res!50263 () Bool)

(assert (=> d!27107 (=> (not res!50263) (not e!65249))))

(assert (=> d!27107 (= res!50263 (contains!792 lt!50007 lt!49992))))

(assert (=> d!27107 (= (addApplyDifferent!69 lt!50007 lt!50010 (minValue!2382 newMap!16) lt!49992) lt!50606)))

(declare-fun b!100198 () Bool)

(assert (=> b!100198 (= e!65249 (not (= lt!49992 lt!50010)))))

(assert (= (and d!27107 res!50263) b!100198))

(assert (=> d!27107 m!109081))

(assert (=> d!27107 m!109087))

(declare-fun m!110655 () Bool)

(assert (=> d!27107 m!110655))

(declare-fun m!110657 () Bool)

(assert (=> d!27107 m!110657))

(assert (=> d!27107 m!109081))

(assert (=> d!27107 m!109083))

(assert (=> b!99366 d!27107))

(declare-fun d!27109 () Bool)

(declare-fun e!65250 () Bool)

(assert (=> d!27109 e!65250))

(declare-fun res!50265 () Bool)

(assert (=> d!27109 (=> (not res!50265) (not e!65250))))

(declare-fun lt!50609 () ListLongMap!1503)

(assert (=> d!27109 (= res!50265 (contains!792 lt!50609 (_1!1165 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50608 () List!1568)

(assert (=> d!27109 (= lt!50609 (ListLongMap!1504 lt!50608))))

(declare-fun lt!50607 () Unit!2982)

(declare-fun lt!50610 () Unit!2982)

(assert (=> d!27109 (= lt!50607 lt!50610)))

(assert (=> d!27109 (= (getValueByKey!152 lt!50608 (_1!1165 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27109 (= lt!50610 (lemmaContainsTupThenGetReturnValue!68 lt!50608 (_1!1165 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27109 (= lt!50608 (insertStrictlySorted!71 (toList!767 lt!50002) (_1!1165 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27109 (= (+!131 lt!50002 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16))) lt!50609)))

(declare-fun b!100199 () Bool)

(declare-fun res!50264 () Bool)

(assert (=> b!100199 (=> (not res!50264) (not e!65250))))

(assert (=> b!100199 (= res!50264 (= (getValueByKey!152 (toList!767 lt!50609) (_1!1165 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16))))))))

(declare-fun b!100200 () Bool)

(assert (=> b!100200 (= e!65250 (contains!795 (toList!767 lt!50609) (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16))))))

(assert (= (and d!27109 res!50265) b!100199))

(assert (= (and b!100199 res!50264) b!100200))

(declare-fun m!110659 () Bool)

(assert (=> d!27109 m!110659))

(declare-fun m!110661 () Bool)

(assert (=> d!27109 m!110661))

(declare-fun m!110663 () Bool)

(assert (=> d!27109 m!110663))

(declare-fun m!110665 () Bool)

(assert (=> d!27109 m!110665))

(declare-fun m!110667 () Bool)

(assert (=> b!100199 m!110667))

(declare-fun m!110669 () Bool)

(assert (=> b!100200 m!110669))

(assert (=> b!99366 d!27109))

(declare-fun d!27111 () Bool)

(assert (=> d!27111 (= (apply!93 lt!50008 lt!49999) (get!1299 (getValueByKey!152 (toList!767 lt!50008) lt!49999)))))

(declare-fun bs!4151 () Bool)

(assert (= bs!4151 d!27111))

(declare-fun m!110671 () Bool)

(assert (=> bs!4151 m!110671))

(assert (=> bs!4151 m!110671))

(declare-fun m!110673 () Bool)

(assert (=> bs!4151 m!110673))

(assert (=> b!99366 d!27111))

(declare-fun d!27113 () Bool)

(declare-fun e!65251 () Bool)

(assert (=> d!27113 e!65251))

(declare-fun res!50267 () Bool)

(assert (=> d!27113 (=> (not res!50267) (not e!65251))))

(declare-fun lt!50613 () ListLongMap!1503)

(assert (=> d!27113 (= res!50267 (contains!792 lt!50613 (_1!1165 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50612 () List!1568)

(assert (=> d!27113 (= lt!50613 (ListLongMap!1504 lt!50612))))

(declare-fun lt!50611 () Unit!2982)

(declare-fun lt!50614 () Unit!2982)

(assert (=> d!27113 (= lt!50611 lt!50614)))

(assert (=> d!27113 (= (getValueByKey!152 lt!50612 (_1!1165 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27113 (= lt!50614 (lemmaContainsTupThenGetReturnValue!68 lt!50612 (_1!1165 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27113 (= lt!50612 (insertStrictlySorted!71 (toList!767 lt!50008) (_1!1165 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27113 (= (+!131 lt!50008 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16))) lt!50613)))

(declare-fun b!100201 () Bool)

(declare-fun res!50266 () Bool)

(assert (=> b!100201 (=> (not res!50266) (not e!65251))))

(assert (=> b!100201 (= res!50266 (= (getValueByKey!152 (toList!767 lt!50613) (_1!1165 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16))))))))

(declare-fun b!100202 () Bool)

(assert (=> b!100202 (= e!65251 (contains!795 (toList!767 lt!50613) (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16))))))

(assert (= (and d!27113 res!50267) b!100201))

(assert (= (and b!100201 res!50266) b!100202))

(declare-fun m!110675 () Bool)

(assert (=> d!27113 m!110675))

(declare-fun m!110677 () Bool)

(assert (=> d!27113 m!110677))

(declare-fun m!110679 () Bool)

(assert (=> d!27113 m!110679))

(declare-fun m!110681 () Bool)

(assert (=> d!27113 m!110681))

(declare-fun m!110683 () Bool)

(assert (=> b!100201 m!110683))

(declare-fun m!110685 () Bool)

(assert (=> b!100202 m!110685))

(assert (=> b!99366 d!27113))

(declare-fun d!27115 () Bool)

(assert (=> d!27115 (= (apply!93 (+!131 lt!49991 (tuple2!2309 lt!49997 (minValue!2382 newMap!16))) lt!49994) (apply!93 lt!49991 lt!49994))))

(declare-fun lt!50615 () Unit!2982)

(assert (=> d!27115 (= lt!50615 (choose!610 lt!49991 lt!49997 (minValue!2382 newMap!16) lt!49994))))

(declare-fun e!65252 () Bool)

(assert (=> d!27115 e!65252))

(declare-fun res!50268 () Bool)

(assert (=> d!27115 (=> (not res!50268) (not e!65252))))

(assert (=> d!27115 (= res!50268 (contains!792 lt!49991 lt!49994))))

(assert (=> d!27115 (= (addApplyDifferent!69 lt!49991 lt!49997 (minValue!2382 newMap!16) lt!49994) lt!50615)))

(declare-fun b!100203 () Bool)

(assert (=> b!100203 (= e!65252 (not (= lt!49994 lt!49997)))))

(assert (= (and d!27115 res!50268) b!100203))

(assert (=> d!27115 m!109085))

(assert (=> d!27115 m!109095))

(declare-fun m!110687 () Bool)

(assert (=> d!27115 m!110687))

(declare-fun m!110689 () Bool)

(assert (=> d!27115 m!110689))

(assert (=> d!27115 m!109085))

(assert (=> d!27115 m!109099))

(assert (=> b!99366 d!27115))

(declare-fun d!27117 () Bool)

(assert (=> d!27117 (= (apply!93 (+!131 lt!50008 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16))) lt!49999) (apply!93 lt!50008 lt!49999))))

(declare-fun lt!50616 () Unit!2982)

(assert (=> d!27117 (= lt!50616 (choose!610 lt!50008 lt!50012 (zeroValue!2382 newMap!16) lt!49999))))

(declare-fun e!65253 () Bool)

(assert (=> d!27117 e!65253))

(declare-fun res!50269 () Bool)

(assert (=> d!27117 (=> (not res!50269) (not e!65253))))

(assert (=> d!27117 (= res!50269 (contains!792 lt!50008 lt!49999))))

(assert (=> d!27117 (= (addApplyDifferent!69 lt!50008 lt!50012 (zeroValue!2382 newMap!16) lt!49999) lt!50616)))

(declare-fun b!100204 () Bool)

(assert (=> b!100204 (= e!65253 (not (= lt!49999 lt!50012)))))

(assert (= (and d!27117 res!50269) b!100204))

(assert (=> d!27117 m!109077))

(assert (=> d!27117 m!109079))

(declare-fun m!110691 () Bool)

(assert (=> d!27117 m!110691))

(declare-fun m!110693 () Bool)

(assert (=> d!27117 m!110693))

(assert (=> d!27117 m!109077))

(assert (=> d!27117 m!109097))

(assert (=> b!99366 d!27117))

(declare-fun d!27119 () Bool)

(assert (=> d!27119 (= (apply!93 lt!50007 lt!49992) (get!1299 (getValueByKey!152 (toList!767 lt!50007) lt!49992)))))

(declare-fun bs!4152 () Bool)

(assert (= bs!4152 d!27119))

(declare-fun m!110695 () Bool)

(assert (=> bs!4152 m!110695))

(assert (=> bs!4152 m!110695))

(declare-fun m!110697 () Bool)

(assert (=> bs!4152 m!110697))

(assert (=> b!99366 d!27119))

(declare-fun d!27121 () Bool)

(assert (=> d!27121 (= (apply!93 lt!49991 lt!49994) (get!1299 (getValueByKey!152 (toList!767 lt!49991) lt!49994)))))

(declare-fun bs!4153 () Bool)

(assert (= bs!4153 d!27121))

(declare-fun m!110699 () Bool)

(assert (=> bs!4153 m!110699))

(assert (=> bs!4153 m!110699))

(declare-fun m!110701 () Bool)

(assert (=> bs!4153 m!110701))

(assert (=> b!99366 d!27121))

(declare-fun d!27123 () Bool)

(declare-fun e!65254 () Bool)

(assert (=> d!27123 e!65254))

(declare-fun res!50271 () Bool)

(assert (=> d!27123 (=> (not res!50271) (not e!65254))))

(declare-fun lt!50619 () ListLongMap!1503)

(assert (=> d!27123 (= res!50271 (contains!792 lt!50619 (_1!1165 (tuple2!2309 lt!50010 (minValue!2382 newMap!16)))))))

(declare-fun lt!50618 () List!1568)

(assert (=> d!27123 (= lt!50619 (ListLongMap!1504 lt!50618))))

(declare-fun lt!50617 () Unit!2982)

(declare-fun lt!50620 () Unit!2982)

(assert (=> d!27123 (= lt!50617 lt!50620)))

(assert (=> d!27123 (= (getValueByKey!152 lt!50618 (_1!1165 (tuple2!2309 lt!50010 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50010 (minValue!2382 newMap!16)))))))

(assert (=> d!27123 (= lt!50620 (lemmaContainsTupThenGetReturnValue!68 lt!50618 (_1!1165 (tuple2!2309 lt!50010 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50010 (minValue!2382 newMap!16)))))))

(assert (=> d!27123 (= lt!50618 (insertStrictlySorted!71 (toList!767 lt!50007) (_1!1165 (tuple2!2309 lt!50010 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50010 (minValue!2382 newMap!16)))))))

(assert (=> d!27123 (= (+!131 lt!50007 (tuple2!2309 lt!50010 (minValue!2382 newMap!16))) lt!50619)))

(declare-fun b!100205 () Bool)

(declare-fun res!50270 () Bool)

(assert (=> b!100205 (=> (not res!50270) (not e!65254))))

(assert (=> b!100205 (= res!50270 (= (getValueByKey!152 (toList!767 lt!50619) (_1!1165 (tuple2!2309 lt!50010 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50010 (minValue!2382 newMap!16))))))))

(declare-fun b!100206 () Bool)

(assert (=> b!100206 (= e!65254 (contains!795 (toList!767 lt!50619) (tuple2!2309 lt!50010 (minValue!2382 newMap!16))))))

(assert (= (and d!27123 res!50271) b!100205))

(assert (= (and b!100205 res!50270) b!100206))

(declare-fun m!110703 () Bool)

(assert (=> d!27123 m!110703))

(declare-fun m!110705 () Bool)

(assert (=> d!27123 m!110705))

(declare-fun m!110707 () Bool)

(assert (=> d!27123 m!110707))

(declare-fun m!110709 () Bool)

(assert (=> d!27123 m!110709))

(declare-fun m!110711 () Bool)

(assert (=> b!100205 m!110711))

(declare-fun m!110713 () Bool)

(assert (=> b!100206 m!110713))

(assert (=> b!99366 d!27123))

(declare-fun d!27125 () Bool)

(assert (=> d!27125 (= (apply!93 (+!131 lt!50007 (tuple2!2309 lt!50010 (minValue!2382 newMap!16))) lt!49992) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50007 (tuple2!2309 lt!50010 (minValue!2382 newMap!16)))) lt!49992)))))

(declare-fun bs!4154 () Bool)

(assert (= bs!4154 d!27125))

(declare-fun m!110715 () Bool)

(assert (=> bs!4154 m!110715))

(assert (=> bs!4154 m!110715))

(declare-fun m!110717 () Bool)

(assert (=> bs!4154 m!110717))

(assert (=> b!99366 d!27125))

(declare-fun d!27127 () Bool)

(declare-fun e!65256 () Bool)

(assert (=> d!27127 e!65256))

(declare-fun res!50272 () Bool)

(assert (=> d!27127 (=> res!50272 e!65256)))

(declare-fun lt!50623 () Bool)

(assert (=> d!27127 (= res!50272 (not lt!50623))))

(declare-fun lt!50622 () Bool)

(assert (=> d!27127 (= lt!50623 lt!50622)))

(declare-fun lt!50621 () Unit!2982)

(declare-fun e!65255 () Unit!2982)

(assert (=> d!27127 (= lt!50621 e!65255)))

(declare-fun c!17185 () Bool)

(assert (=> d!27127 (= c!17185 lt!50622)))

(assert (=> d!27127 (= lt!50622 (containsKey!155 (toList!767 (+!131 lt!50002 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))) lt!50011))))

(assert (=> d!27127 (= (contains!792 (+!131 lt!50002 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16))) lt!50011) lt!50623)))

(declare-fun b!100207 () Bool)

(declare-fun lt!50624 () Unit!2982)

(assert (=> b!100207 (= e!65255 lt!50624)))

(assert (=> b!100207 (= lt!50624 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (+!131 lt!50002 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))) lt!50011))))

(assert (=> b!100207 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50002 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))) lt!50011))))

(declare-fun b!100208 () Bool)

(declare-fun Unit!3030 () Unit!2982)

(assert (=> b!100208 (= e!65255 Unit!3030)))

(declare-fun b!100209 () Bool)

(assert (=> b!100209 (= e!65256 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50002 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16)))) lt!50011)))))

(assert (= (and d!27127 c!17185) b!100207))

(assert (= (and d!27127 (not c!17185)) b!100208))

(assert (= (and d!27127 (not res!50272)) b!100209))

(declare-fun m!110719 () Bool)

(assert (=> d!27127 m!110719))

(declare-fun m!110721 () Bool)

(assert (=> b!100207 m!110721))

(declare-fun m!110723 () Bool)

(assert (=> b!100207 m!110723))

(assert (=> b!100207 m!110723))

(declare-fun m!110725 () Bool)

(assert (=> b!100207 m!110725))

(assert (=> b!100209 m!110723))

(assert (=> b!100209 m!110723))

(assert (=> b!100209 m!110725))

(assert (=> b!99366 d!27127))

(declare-fun d!27129 () Bool)

(declare-fun e!65257 () Bool)

(assert (=> d!27129 e!65257))

(declare-fun res!50274 () Bool)

(assert (=> d!27129 (=> (not res!50274) (not e!65257))))

(declare-fun lt!50627 () ListLongMap!1503)

(assert (=> d!27129 (= res!50274 (contains!792 lt!50627 (_1!1165 (tuple2!2309 lt!49997 (minValue!2382 newMap!16)))))))

(declare-fun lt!50626 () List!1568)

(assert (=> d!27129 (= lt!50627 (ListLongMap!1504 lt!50626))))

(declare-fun lt!50625 () Unit!2982)

(declare-fun lt!50628 () Unit!2982)

(assert (=> d!27129 (= lt!50625 lt!50628)))

(assert (=> d!27129 (= (getValueByKey!152 lt!50626 (_1!1165 (tuple2!2309 lt!49997 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!49997 (minValue!2382 newMap!16)))))))

(assert (=> d!27129 (= lt!50628 (lemmaContainsTupThenGetReturnValue!68 lt!50626 (_1!1165 (tuple2!2309 lt!49997 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!49997 (minValue!2382 newMap!16)))))))

(assert (=> d!27129 (= lt!50626 (insertStrictlySorted!71 (toList!767 lt!49991) (_1!1165 (tuple2!2309 lt!49997 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!49997 (minValue!2382 newMap!16)))))))

(assert (=> d!27129 (= (+!131 lt!49991 (tuple2!2309 lt!49997 (minValue!2382 newMap!16))) lt!50627)))

(declare-fun b!100210 () Bool)

(declare-fun res!50273 () Bool)

(assert (=> b!100210 (=> (not res!50273) (not e!65257))))

(assert (=> b!100210 (= res!50273 (= (getValueByKey!152 (toList!767 lt!50627) (_1!1165 (tuple2!2309 lt!49997 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!49997 (minValue!2382 newMap!16))))))))

(declare-fun b!100211 () Bool)

(assert (=> b!100211 (= e!65257 (contains!795 (toList!767 lt!50627) (tuple2!2309 lt!49997 (minValue!2382 newMap!16))))))

(assert (= (and d!27129 res!50274) b!100210))

(assert (= (and b!100210 res!50273) b!100211))

(declare-fun m!110727 () Bool)

(assert (=> d!27129 m!110727))

(declare-fun m!110729 () Bool)

(assert (=> d!27129 m!110729))

(declare-fun m!110731 () Bool)

(assert (=> d!27129 m!110731))

(declare-fun m!110733 () Bool)

(assert (=> d!27129 m!110733))

(declare-fun m!110735 () Bool)

(assert (=> b!100210 m!110735))

(declare-fun m!110737 () Bool)

(assert (=> b!100211 m!110737))

(assert (=> b!99366 d!27129))

(declare-fun d!27131 () Bool)

(assert (=> d!27131 (= (apply!93 (+!131 lt!50008 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16))) lt!49999) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50008 (tuple2!2309 lt!50012 (zeroValue!2382 newMap!16)))) lt!49999)))))

(declare-fun bs!4155 () Bool)

(assert (= bs!4155 d!27131))

(declare-fun m!110739 () Bool)

(assert (=> bs!4155 m!110739))

(assert (=> bs!4155 m!110739))

(declare-fun m!110741 () Bool)

(assert (=> bs!4155 m!110741))

(assert (=> b!99366 d!27131))

(declare-fun d!27133 () Bool)

(assert (=> d!27133 (= (apply!93 (+!131 lt!49991 (tuple2!2309 lt!49997 (minValue!2382 newMap!16))) lt!49994) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!49991 (tuple2!2309 lt!49997 (minValue!2382 newMap!16)))) lt!49994)))))

(declare-fun bs!4156 () Bool)

(assert (= bs!4156 d!27133))

(declare-fun m!110743 () Bool)

(assert (=> bs!4156 m!110743))

(assert (=> bs!4156 m!110743))

(declare-fun m!110745 () Bool)

(assert (=> bs!4156 m!110745))

(assert (=> b!99366 d!27133))

(declare-fun d!27135 () Bool)

(assert (=> d!27135 (contains!792 (+!131 lt!50002 (tuple2!2309 lt!50005 (zeroValue!2382 newMap!16))) lt!50011)))

(declare-fun lt!50629 () Unit!2982)

(assert (=> d!27135 (= lt!50629 (choose!611 lt!50002 lt!50005 (zeroValue!2382 newMap!16) lt!50011))))

(assert (=> d!27135 (contains!792 lt!50002 lt!50011)))

(assert (=> d!27135 (= (addStillContains!69 lt!50002 lt!50005 (zeroValue!2382 newMap!16) lt!50011) lt!50629)))

(declare-fun bs!4157 () Bool)

(assert (= bs!4157 d!27135))

(assert (=> bs!4157 m!109075))

(assert (=> bs!4157 m!109075))

(assert (=> bs!4157 m!109091))

(declare-fun m!110747 () Bool)

(assert (=> bs!4157 m!110747))

(declare-fun m!110749 () Bool)

(assert (=> bs!4157 m!110749))

(assert (=> b!99366 d!27135))

(assert (=> b!99366 d!26859))

(declare-fun d!27137 () Bool)

(declare-fun e!65258 () Bool)

(assert (=> d!27137 e!65258))

(declare-fun res!50276 () Bool)

(assert (=> d!27137 (=> (not res!50276) (not e!65258))))

(declare-fun lt!50632 () ListLongMap!1503)

(assert (=> d!27137 (= res!50276 (contains!792 lt!50632 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50631 () List!1568)

(assert (=> d!27137 (= lt!50632 (ListLongMap!1504 lt!50631))))

(declare-fun lt!50630 () Unit!2982)

(declare-fun lt!50633 () Unit!2982)

(assert (=> d!27137 (= lt!50630 lt!50633)))

(assert (=> d!27137 (= (getValueByKey!152 lt!50631 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27137 (= lt!50633 (lemmaContainsTupThenGetReturnValue!68 lt!50631 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27137 (= lt!50631 (insertStrictlySorted!71 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27137 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50632)))

(declare-fun b!100212 () Bool)

(declare-fun res!50275 () Bool)

(assert (=> b!100212 (=> (not res!50275) (not e!65258))))

(assert (=> b!100212 (= res!50275 (= (getValueByKey!152 (toList!767 lt!50632) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100213 () Bool)

(assert (=> b!100213 (= e!65258 (contains!795 (toList!767 lt!50632) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27137 res!50276) b!100212))

(assert (= (and b!100212 res!50275) b!100213))

(declare-fun m!110751 () Bool)

(assert (=> d!27137 m!110751))

(declare-fun m!110753 () Bool)

(assert (=> d!27137 m!110753))

(declare-fun m!110755 () Bool)

(assert (=> d!27137 m!110755))

(declare-fun m!110757 () Bool)

(assert (=> d!27137 m!110757))

(declare-fun m!110759 () Bool)

(assert (=> b!100212 m!110759))

(declare-fun m!110761 () Bool)

(assert (=> b!100213 m!110761))

(assert (=> d!26729 d!27137))

(declare-fun d!27139 () Bool)

(assert (=> d!27139 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (=> d!27139 true))

(declare-fun _$8!88 () Unit!2982)

(assert (=> d!27139 (= (choose!616 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) _$8!88)))

(declare-fun bs!4158 () Bool)

(assert (= bs!4158 d!27139))

(assert (=> bs!4158 m!108863))

(assert (=> bs!4158 m!108863))

(assert (=> bs!4158 m!109337))

(assert (=> bs!4158 m!108749))

(assert (=> bs!4158 m!109335))

(assert (=> d!26729 d!27139))

(assert (=> d!26729 d!26661))

(declare-fun b!100214 () Bool)

(declare-fun e!65264 () ListLongMap!1503)

(declare-fun call!10301 () ListLongMap!1503)

(assert (=> b!100214 (= e!65264 call!10301)))

(declare-fun bm!10294 () Bool)

(declare-fun call!10300 () ListLongMap!1503)

(declare-fun call!10298 () ListLongMap!1503)

(assert (=> bm!10294 (= call!10300 call!10298)))

(declare-fun b!100215 () Bool)

(declare-fun res!50283 () Bool)

(declare-fun e!65267 () Bool)

(assert (=> b!100215 (=> (not res!50283) (not e!65267))))

(declare-fun e!65269 () Bool)

(assert (=> b!100215 (= res!50283 e!65269)))

(declare-fun c!17188 () Bool)

(assert (=> b!100215 (= c!17188 (not (= (bvand lt!49923 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100216 () Bool)

(declare-fun e!65265 () ListLongMap!1503)

(declare-fun e!65268 () ListLongMap!1503)

(assert (=> b!100216 (= e!65265 e!65268)))

(declare-fun c!17186 () Bool)

(assert (=> b!100216 (= c!17186 (and (not (= (bvand lt!49923 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!49923 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun lt!50639 () ListLongMap!1503)

(declare-fun e!65270 () Bool)

(declare-fun b!100217 () Bool)

(assert (=> b!100217 (= e!65270 (= (apply!93 lt!50639 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100218 () Bool)

(declare-fun call!10297 () ListLongMap!1503)

(assert (=> b!100218 (= e!65264 call!10297)))

(declare-fun b!100219 () Bool)

(declare-fun res!50284 () Bool)

(assert (=> b!100219 (=> (not res!50284) (not e!65267))))

(declare-fun e!65271 () Bool)

(assert (=> b!100219 (= res!50284 e!65271)))

(declare-fun res!50281 () Bool)

(assert (=> b!100219 (=> res!50281 e!65271)))

(declare-fun e!65266 () Bool)

(assert (=> b!100219 (= res!50281 (not e!65266))))

(declare-fun res!50280 () Bool)

(assert (=> b!100219 (=> (not res!50280) (not e!65266))))

(assert (=> b!100219 (= res!50280 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100220 () Bool)

(declare-fun e!65262 () Unit!2982)

(declare-fun Unit!3031 () Unit!2982)

(assert (=> b!100220 (= e!65262 Unit!3031)))

(declare-fun b!100221 () Bool)

(declare-fun lt!50641 () Unit!2982)

(assert (=> b!100221 (= e!65262 lt!50641)))

(declare-fun lt!50645 () ListLongMap!1503)

(assert (=> b!100221 (= lt!50645 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50648 () (_ BitVec 64))

(assert (=> b!100221 (= lt!50648 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50654 () (_ BitVec 64))

(assert (=> b!100221 (= lt!50654 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50644 () Unit!2982)

(assert (=> b!100221 (= lt!50644 (addStillContains!69 lt!50645 lt!50648 (zeroValue!2382 newMap!16) lt!50654))))

(assert (=> b!100221 (contains!792 (+!131 lt!50645 (tuple2!2309 lt!50648 (zeroValue!2382 newMap!16))) lt!50654)))

(declare-fun lt!50652 () Unit!2982)

(assert (=> b!100221 (= lt!50652 lt!50644)))

(declare-fun lt!50634 () ListLongMap!1503)

(assert (=> b!100221 (= lt!50634 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50640 () (_ BitVec 64))

(assert (=> b!100221 (= lt!50640 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50637 () (_ BitVec 64))

(assert (=> b!100221 (= lt!50637 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50649 () Unit!2982)

(assert (=> b!100221 (= lt!50649 (addApplyDifferent!69 lt!50634 lt!50640 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50637))))

(assert (=> b!100221 (= (apply!93 (+!131 lt!50634 (tuple2!2309 lt!50640 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50637) (apply!93 lt!50634 lt!50637))))

(declare-fun lt!50638 () Unit!2982)

(assert (=> b!100221 (= lt!50638 lt!50649)))

(declare-fun lt!50651 () ListLongMap!1503)

(assert (=> b!100221 (= lt!50651 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50655 () (_ BitVec 64))

(assert (=> b!100221 (= lt!50655 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50642 () (_ BitVec 64))

(assert (=> b!100221 (= lt!50642 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50636 () Unit!2982)

(assert (=> b!100221 (= lt!50636 (addApplyDifferent!69 lt!50651 lt!50655 (zeroValue!2382 newMap!16) lt!50642))))

(assert (=> b!100221 (= (apply!93 (+!131 lt!50651 (tuple2!2309 lt!50655 (zeroValue!2382 newMap!16))) lt!50642) (apply!93 lt!50651 lt!50642))))

(declare-fun lt!50646 () Unit!2982)

(assert (=> b!100221 (= lt!50646 lt!50636)))

(declare-fun lt!50650 () ListLongMap!1503)

(assert (=> b!100221 (= lt!50650 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50653 () (_ BitVec 64))

(assert (=> b!100221 (= lt!50653 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50635 () (_ BitVec 64))

(assert (=> b!100221 (= lt!50635 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100221 (= lt!50641 (addApplyDifferent!69 lt!50650 lt!50653 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50635))))

(assert (=> b!100221 (= (apply!93 (+!131 lt!50650 (tuple2!2309 lt!50653 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50635) (apply!93 lt!50650 lt!50635))))

(declare-fun b!100222 () Bool)

(declare-fun e!65260 () Bool)

(assert (=> b!100222 (= e!65260 (= (apply!93 lt!50639 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (_values!2484 newMap!16)) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100222 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_values!2484 newMap!16))))))

(assert (=> b!100222 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100223 () Bool)

(assert (=> b!100223 (= e!65271 e!65260)))

(declare-fun res!50277 () Bool)

(assert (=> b!100223 (=> (not res!50277) (not e!65260))))

(assert (=> b!100223 (= res!50277 (contains!792 lt!50639 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100223 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100224 () Bool)

(declare-fun e!65259 () Bool)

(assert (=> b!100224 (= e!65259 e!65270)))

(declare-fun res!50285 () Bool)

(declare-fun call!10303 () Bool)

(assert (=> b!100224 (= res!50285 call!10303)))

(assert (=> b!100224 (=> (not res!50285) (not e!65270))))

(declare-fun b!100225 () Bool)

(assert (=> b!100225 (= e!65266 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100226 () Bool)

(assert (=> b!100226 (= e!65268 call!10301)))

(declare-fun call!10299 () ListLongMap!1503)

(declare-fun b!100227 () Bool)

(assert (=> b!100227 (= e!65265 (+!131 call!10299 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100228 () Bool)

(declare-fun call!10302 () Bool)

(assert (=> b!100228 (= e!65269 (not call!10302))))

(declare-fun b!100229 () Bool)

(declare-fun e!65261 () Bool)

(assert (=> b!100229 (= e!65261 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10295 () Bool)

(declare-fun c!17190 () Bool)

(assert (=> bm!10295 (= call!10299 (+!131 (ite c!17190 call!10298 (ite c!17186 call!10300 call!10297)) (ite (or c!17190 c!17186) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!10296 () Bool)

(assert (=> bm!10296 (= call!10301 call!10299)))

(declare-fun b!100230 () Bool)

(declare-fun e!65263 () Bool)

(assert (=> b!100230 (= e!65269 e!65263)))

(declare-fun res!50279 () Bool)

(assert (=> b!100230 (= res!50279 call!10302)))

(assert (=> b!100230 (=> (not res!50279) (not e!65263))))

(declare-fun b!100231 () Bool)

(declare-fun c!17191 () Bool)

(assert (=> b!100231 (= c!17191 (and (not (= (bvand lt!49923 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!49923 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!100231 (= e!65268 e!65264)))

(declare-fun b!100232 () Bool)

(assert (=> b!100232 (= e!65267 e!65259)))

(declare-fun c!17187 () Bool)

(assert (=> b!100232 (= c!17187 (not (= (bvand lt!49923 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10297 () Bool)

(assert (=> bm!10297 (= call!10303 (contains!792 lt!50639 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10298 () Bool)

(assert (=> bm!10298 (= call!10297 call!10300)))

(declare-fun bm!10299 () Bool)

(assert (=> bm!10299 (= call!10302 (contains!792 lt!50639 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100233 () Bool)

(assert (=> b!100233 (= e!65259 (not call!10303))))

(declare-fun b!100234 () Bool)

(assert (=> b!100234 (= e!65263 (= (apply!93 lt!50639 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun d!27141 () Bool)

(assert (=> d!27141 e!65267))

(declare-fun res!50282 () Bool)

(assert (=> d!27141 (=> (not res!50282) (not e!65267))))

(assert (=> d!27141 (= res!50282 (or (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun lt!50643 () ListLongMap!1503)

(assert (=> d!27141 (= lt!50639 lt!50643)))

(declare-fun lt!50647 () Unit!2982)

(assert (=> d!27141 (= lt!50647 e!65262)))

(declare-fun c!17189 () Bool)

(assert (=> d!27141 (= c!17189 e!65261)))

(declare-fun res!50278 () Bool)

(assert (=> d!27141 (=> (not res!50278) (not e!65261))))

(assert (=> d!27141 (= res!50278 (bvslt #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!27141 (= lt!50643 e!65265)))

(assert (=> d!27141 (= c!17190 (and (not (= (bvand lt!49923 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!49923 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27141 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!27141 (= (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50639)))

(declare-fun bm!10300 () Bool)

(assert (=> bm!10300 (= call!10298 (getCurrentListMapNoExtraKeys!96 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) lt!49923 (zeroValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (= (and d!27141 c!17190) b!100227))

(assert (= (and d!27141 (not c!17190)) b!100216))

(assert (= (and b!100216 c!17186) b!100226))

(assert (= (and b!100216 (not c!17186)) b!100231))

(assert (= (and b!100231 c!17191) b!100214))

(assert (= (and b!100231 (not c!17191)) b!100218))

(assert (= (or b!100214 b!100218) bm!10298))

(assert (= (or b!100226 bm!10298) bm!10294))

(assert (= (or b!100226 b!100214) bm!10296))

(assert (= (or b!100227 bm!10294) bm!10300))

(assert (= (or b!100227 bm!10296) bm!10295))

(assert (= (and d!27141 res!50278) b!100229))

(assert (= (and d!27141 c!17189) b!100221))

(assert (= (and d!27141 (not c!17189)) b!100220))

(assert (= (and d!27141 res!50282) b!100219))

(assert (= (and b!100219 res!50280) b!100225))

(assert (= (and b!100219 (not res!50281)) b!100223))

(assert (= (and b!100223 res!50277) b!100222))

(assert (= (and b!100219 res!50284) b!100215))

(assert (= (and b!100215 c!17188) b!100230))

(assert (= (and b!100215 (not c!17188)) b!100228))

(assert (= (and b!100230 res!50279) b!100234))

(assert (= (or b!100230 b!100228) bm!10299))

(assert (= (and b!100215 res!50283) b!100232))

(assert (= (and b!100232 c!17187) b!100224))

(assert (= (and b!100232 (not c!17187)) b!100233))

(assert (= (and b!100224 res!50285) b!100217))

(assert (= (or b!100224 b!100233) bm!10297))

(declare-fun b_lambda!4477 () Bool)

(assert (=> (not b_lambda!4477) (not b!100222)))

(assert (=> b!100222 t!5546))

(declare-fun b_and!6177 () Bool)

(assert (= b_and!6173 (and (=> t!5546 result!3299) b_and!6177)))

(assert (=> b!100222 t!5548))

(declare-fun b_and!6179 () Bool)

(assert (= b_and!6175 (and (=> t!5548 result!3301) b_and!6179)))

(declare-fun m!110763 () Bool)

(assert (=> b!100221 m!110763))

(declare-fun m!110765 () Bool)

(assert (=> b!100221 m!110765))

(declare-fun m!110767 () Bool)

(assert (=> b!100221 m!110767))

(declare-fun m!110769 () Bool)

(assert (=> b!100221 m!110769))

(declare-fun m!110771 () Bool)

(assert (=> b!100221 m!110771))

(assert (=> b!100221 m!109033))

(declare-fun m!110773 () Bool)

(assert (=> b!100221 m!110773))

(declare-fun m!110775 () Bool)

(assert (=> b!100221 m!110775))

(assert (=> b!100221 m!108749))

(declare-fun m!110777 () Bool)

(assert (=> b!100221 m!110777))

(assert (=> b!100221 m!110763))

(declare-fun m!110779 () Bool)

(assert (=> b!100221 m!110779))

(assert (=> b!100221 m!108749))

(declare-fun m!110781 () Bool)

(assert (=> b!100221 m!110781))

(declare-fun m!110783 () Bool)

(assert (=> b!100221 m!110783))

(assert (=> b!100221 m!110765))

(declare-fun m!110785 () Bool)

(assert (=> b!100221 m!110785))

(assert (=> b!100221 m!110769))

(assert (=> b!100221 m!110773))

(declare-fun m!110787 () Bool)

(assert (=> b!100221 m!110787))

(assert (=> b!100221 m!108749))

(declare-fun m!110789 () Bool)

(assert (=> b!100221 m!110789))

(declare-fun m!110791 () Bool)

(assert (=> b!100221 m!110791))

(declare-fun m!110793 () Bool)

(assert (=> b!100221 m!110793))

(assert (=> d!27141 m!109025))

(assert (=> bm!10300 m!108749))

(assert (=> bm!10300 m!110781))

(declare-fun m!110795 () Bool)

(assert (=> bm!10297 m!110795))

(assert (=> b!100225 m!109033))

(assert (=> b!100225 m!109033))

(assert (=> b!100225 m!109041))

(declare-fun m!110797 () Bool)

(assert (=> b!100234 m!110797))

(declare-fun m!110799 () Bool)

(assert (=> bm!10295 m!110799))

(declare-fun m!110801 () Bool)

(assert (=> bm!10299 m!110801))

(declare-fun m!110803 () Bool)

(assert (=> b!100227 m!110803))

(assert (=> b!100229 m!109033))

(assert (=> b!100229 m!109033))

(assert (=> b!100229 m!109041))

(assert (=> b!100223 m!109033))

(assert (=> b!100223 m!109033))

(declare-fun m!110805 () Bool)

(assert (=> b!100223 m!110805))

(assert (=> b!100222 m!109033))

(declare-fun m!110807 () Bool)

(assert (=> b!100222 m!110807))

(assert (=> b!100222 m!109121))

(assert (=> b!100222 m!109123))

(assert (=> b!100222 m!109121))

(assert (=> b!100222 m!109123))

(assert (=> b!100222 m!109125))

(assert (=> b!100222 m!109033))

(declare-fun m!110809 () Bool)

(assert (=> b!100217 m!110809))

(assert (=> d!26729 d!27141))

(assert (=> d!26729 d!26847))

(declare-fun d!27143 () Bool)

(assert (=> d!27143 (contains!792 (getCurrentListMap!456 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))

(assert (=> d!27143 true))

(declare-fun _$16!120 () Unit!2982)

(assert (=> d!27143 (= (choose!613 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (index!3137 lt!49929) (defaultEntry!2501 newMap!16)) _$16!120)))

(declare-fun bs!4159 () Bool)

(assert (= bs!4159 d!27143))

(assert (=> bs!4159 m!108989))

(assert (=> bs!4159 m!108939))

(assert (=> bs!4159 m!108989))

(assert (=> bs!4159 m!108939))

(assert (=> bs!4159 m!109277))

(assert (=> d!26705 d!27143))

(assert (=> d!26705 d!26847))

(assert (=> b!99668 d!26949))

(assert (=> b!99668 d!26951))

(declare-fun d!27145 () Bool)

(assert (=> d!27145 (= (inRange!0 (ite c!16965 (index!3136 lt!50018) (index!3139 lt!50018)) (mask!6608 newMap!16)) (and (bvsge (ite c!16965 (index!3136 lt!50018) (index!3139 lt!50018)) #b00000000000000000000000000000000) (bvslt (ite c!16965 (index!3136 lt!50018) (index!3139 lt!50018)) (bvadd (mask!6608 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10200 d!27145))

(declare-fun d!27147 () Bool)

(declare-fun res!50286 () Bool)

(declare-fun e!65272 () Bool)

(assert (=> d!27147 (=> res!50286 e!65272)))

(assert (=> d!27147 (= res!50286 (and ((_ is Cons!1564) (toList!767 lt!49838)) (= (_1!1165 (h!2159 (toList!767 lt!49838))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27147 (= (containsKey!155 (toList!767 lt!49838) #b0000000000000000000000000000000000000000000000000000000000000000) e!65272)))

(declare-fun b!100235 () Bool)

(declare-fun e!65273 () Bool)

(assert (=> b!100235 (= e!65272 e!65273)))

(declare-fun res!50287 () Bool)

(assert (=> b!100235 (=> (not res!50287) (not e!65273))))

(assert (=> b!100235 (= res!50287 (and (or (not ((_ is Cons!1564) (toList!767 lt!49838))) (bvsle (_1!1165 (h!2159 (toList!767 lt!49838))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1564) (toList!767 lt!49838)) (bvslt (_1!1165 (h!2159 (toList!767 lt!49838))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100236 () Bool)

(assert (=> b!100236 (= e!65273 (containsKey!155 (t!5534 (toList!767 lt!49838)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27147 (not res!50286)) b!100235))

(assert (= (and b!100235 res!50287) b!100236))

(declare-fun m!110811 () Bool)

(assert (=> b!100236 m!110811))

(assert (=> d!26713 d!27147))

(declare-fun b!100237 () Bool)

(declare-fun e!65274 () Bool)

(declare-fun e!65275 () Bool)

(assert (=> b!100237 (= e!65274 e!65275)))

(declare-fun c!17192 () Bool)

(assert (=> b!100237 (= c!17192 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10301 () Bool)

(declare-fun call!10304 () Bool)

(assert (=> bm!10301 (= call!10304 (arrayNoDuplicates!0 (_keys!4195 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17192 (Cons!1565 (select (arr!2012 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!16990 (Cons!1565 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) Nil!1566) Nil!1566)) (ite c!16990 (Cons!1565 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) Nil!1566) Nil!1566))))))

(declare-fun d!27149 () Bool)

(declare-fun res!50290 () Bool)

(declare-fun e!65276 () Bool)

(assert (=> d!27149 (=> res!50290 e!65276)))

(assert (=> d!27149 (= res!50290 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!27149 (= (arrayNoDuplicates!0 (_keys!4195 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16990 (Cons!1565 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) Nil!1566) Nil!1566)) e!65276)))

(declare-fun b!100238 () Bool)

(assert (=> b!100238 (= e!65275 call!10304)))

(declare-fun b!100239 () Bool)

(assert (=> b!100239 (= e!65276 e!65274)))

(declare-fun res!50289 () Bool)

(assert (=> b!100239 (=> (not res!50289) (not e!65274))))

(declare-fun e!65277 () Bool)

(assert (=> b!100239 (= res!50289 (not e!65277))))

(declare-fun res!50288 () Bool)

(assert (=> b!100239 (=> (not res!50288) (not e!65277))))

(assert (=> b!100239 (= res!50288 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!100240 () Bool)

(assert (=> b!100240 (= e!65275 call!10304)))

(declare-fun b!100241 () Bool)

(assert (=> b!100241 (= e!65277 (contains!794 (ite c!16990 (Cons!1565 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) Nil!1566) Nil!1566) (select (arr!2012 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!27149 (not res!50290)) b!100239))

(assert (= (and b!100239 res!50288) b!100241))

(assert (= (and b!100239 res!50289) b!100237))

(assert (= (and b!100237 c!17192) b!100240))

(assert (= (and b!100237 (not c!17192)) b!100238))

(assert (= (or b!100240 b!100238) bm!10301))

(assert (=> b!100237 m!110269))

(assert (=> b!100237 m!110269))

(assert (=> b!100237 m!110277))

(assert (=> bm!10301 m!110269))

(declare-fun m!110813 () Bool)

(assert (=> bm!10301 m!110813))

(assert (=> b!100239 m!110269))

(assert (=> b!100239 m!110269))

(assert (=> b!100239 m!110277))

(assert (=> b!100241 m!110269))

(assert (=> b!100241 m!110269))

(declare-fun m!110815 () Bool)

(assert (=> b!100241 m!110815))

(assert (=> bm!10205 d!27149))

(declare-fun b!100245 () Bool)

(declare-fun e!65279 () Option!158)

(assert (=> b!100245 (= e!65279 None!156)))

(declare-fun b!100243 () Bool)

(declare-fun e!65278 () Option!158)

(assert (=> b!100243 (= e!65278 e!65279)))

(declare-fun c!17194 () Bool)

(assert (=> b!100243 (= c!17194 (and ((_ is Cons!1564) (toList!767 lt!50062)) (not (= (_1!1165 (h!2159 (toList!767 lt!50062))) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!100242 () Bool)

(assert (=> b!100242 (= e!65278 (Some!157 (_2!1165 (h!2159 (toList!767 lt!50062)))))))

(declare-fun d!27151 () Bool)

(declare-fun c!17193 () Bool)

(assert (=> d!27151 (= c!17193 (and ((_ is Cons!1564) (toList!767 lt!50062)) (= (_1!1165 (h!2159 (toList!767 lt!50062))) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27151 (= (getValueByKey!152 (toList!767 lt!50062) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65278)))

(declare-fun b!100244 () Bool)

(assert (=> b!100244 (= e!65279 (getValueByKey!152 (t!5534 (toList!767 lt!50062)) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!27151 c!17193) b!100242))

(assert (= (and d!27151 (not c!17193)) b!100243))

(assert (= (and b!100243 c!17194) b!100244))

(assert (= (and b!100243 (not c!17194)) b!100245))

(declare-fun m!110817 () Bool)

(assert (=> b!100244 m!110817))

(assert (=> b!99454 d!27151))

(declare-fun d!27153 () Bool)

(declare-fun e!65281 () Bool)

(assert (=> d!27153 e!65281))

(declare-fun res!50291 () Bool)

(assert (=> d!27153 (=> res!50291 e!65281)))

(declare-fun lt!50658 () Bool)

(assert (=> d!27153 (= res!50291 (not lt!50658))))

(declare-fun lt!50657 () Bool)

(assert (=> d!27153 (= lt!50658 lt!50657)))

(declare-fun lt!50656 () Unit!2982)

(declare-fun e!65280 () Unit!2982)

(assert (=> d!27153 (= lt!50656 e!65280)))

(declare-fun c!17195 () Bool)

(assert (=> d!27153 (= c!17195 lt!50657)))

(assert (=> d!27153 (= lt!50657 (containsKey!155 (toList!767 lt!49996) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27153 (= (contains!792 lt!49996 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50658)))

(declare-fun b!100246 () Bool)

(declare-fun lt!50659 () Unit!2982)

(assert (=> b!100246 (= e!65280 lt!50659)))

(assert (=> b!100246 (= lt!50659 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49996) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100246 (isDefined!104 (getValueByKey!152 (toList!767 lt!49996) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100247 () Bool)

(declare-fun Unit!3032 () Unit!2982)

(assert (=> b!100247 (= e!65280 Unit!3032)))

(declare-fun b!100248 () Bool)

(assert (=> b!100248 (= e!65281 (isDefined!104 (getValueByKey!152 (toList!767 lt!49996) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27153 c!17195) b!100246))

(assert (= (and d!27153 (not c!17195)) b!100247))

(assert (= (and d!27153 (not res!50291)) b!100248))

(declare-fun m!110819 () Bool)

(assert (=> d!27153 m!110819))

(declare-fun m!110821 () Bool)

(assert (=> b!100246 m!110821))

(declare-fun m!110823 () Bool)

(assert (=> b!100246 m!110823))

(assert (=> b!100246 m!110823))

(declare-fun m!110825 () Bool)

(assert (=> b!100246 m!110825))

(assert (=> b!100248 m!110823))

(assert (=> b!100248 m!110823))

(assert (=> b!100248 m!110825))

(assert (=> bm!10194 d!27153))

(declare-fun d!27155 () Bool)

(assert (=> d!27155 (= (apply!93 lt!50115 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!50115) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4160 () Bool)

(assert (= bs!4160 d!27155))

(declare-fun m!110827 () Bool)

(assert (=> bs!4160 m!110827))

(assert (=> bs!4160 m!110827))

(declare-fun m!110829 () Bool)

(assert (=> bs!4160 m!110829))

(assert (=> b!99513 d!27155))

(assert (=> b!99652 d!26747))

(assert (=> b!99358 d!26933))

(assert (=> b!99358 d!26935))

(declare-fun d!27157 () Bool)

(assert (=> d!27157 (= (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49836)) (v!2823 (getValueByKey!152 (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49836)))))

(assert (=> d!26679 d!27157))

(declare-fun b!100252 () Bool)

(declare-fun e!65283 () Option!158)

(assert (=> b!100252 (= e!65283 None!156)))

(declare-fun b!100250 () Bool)

(declare-fun e!65282 () Option!158)

(assert (=> b!100250 (= e!65282 e!65283)))

(declare-fun c!17197 () Bool)

(assert (=> b!100250 (= c!17197 (and ((_ is Cons!1564) (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) (not (= (_1!1165 (h!2159 (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49836))))))

(declare-fun b!100249 () Bool)

(assert (=> b!100249 (= e!65282 (Some!157 (_2!1165 (h!2159 (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))))

(declare-fun c!17196 () Bool)

(declare-fun d!27159 () Bool)

(assert (=> d!27159 (= c!17196 (and ((_ is Cons!1564) (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) (= (_1!1165 (h!2159 (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))) lt!49836)))))

(assert (=> d!27159 (= (getValueByKey!152 (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!49836) e!65282)))

(declare-fun b!100251 () Bool)

(assert (=> b!100251 (= e!65283 (getValueByKey!152 (t!5534 (toList!767 (+!131 lt!49833 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) lt!49836))))

(assert (= (and d!27159 c!17196) b!100249))

(assert (= (and d!27159 (not c!17196)) b!100250))

(assert (= (and b!100250 c!17197) b!100251))

(assert (= (and b!100250 (not c!17197)) b!100252))

(declare-fun m!110831 () Bool)

(assert (=> b!100251 m!110831))

(assert (=> d!26679 d!27159))

(declare-fun d!27161 () Bool)

(declare-fun e!65285 () Bool)

(assert (=> d!27161 e!65285))

(declare-fun res!50292 () Bool)

(assert (=> d!27161 (=> res!50292 e!65285)))

(declare-fun lt!50662 () Bool)

(assert (=> d!27161 (= res!50292 (not lt!50662))))

(declare-fun lt!50661 () Bool)

(assert (=> d!27161 (= lt!50662 lt!50661)))

(declare-fun lt!50660 () Unit!2982)

(declare-fun e!65284 () Unit!2982)

(assert (=> d!27161 (= lt!50660 e!65284)))

(declare-fun c!17198 () Bool)

(assert (=> d!27161 (= c!17198 lt!50661)))

(assert (=> d!27161 (= lt!50661 (containsKey!155 (toList!767 lt!50150) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!27161 (= (contains!792 lt!50150 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) lt!50662)))

(declare-fun b!100253 () Bool)

(declare-fun lt!50663 () Unit!2982)

(assert (=> b!100253 (= e!65284 lt!50663)))

(assert (=> b!100253 (= lt!50663 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50150) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100253 (isDefined!104 (getValueByKey!152 (toList!767 lt!50150) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100254 () Bool)

(declare-fun Unit!3033 () Unit!2982)

(assert (=> b!100254 (= e!65284 Unit!3033)))

(declare-fun b!100255 () Bool)

(assert (=> b!100255 (= e!65285 (isDefined!104 (getValueByKey!152 (toList!767 lt!50150) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!27161 c!17198) b!100253))

(assert (= (and d!27161 (not c!17198)) b!100254))

(assert (= (and d!27161 (not res!50292)) b!100255))

(assert (=> d!27161 m!109033))

(declare-fun m!110833 () Bool)

(assert (=> d!27161 m!110833))

(assert (=> b!100253 m!109033))

(declare-fun m!110835 () Bool)

(assert (=> b!100253 m!110835))

(assert (=> b!100253 m!109033))

(assert (=> b!100253 m!110241))

(assert (=> b!100253 m!110241))

(declare-fun m!110837 () Bool)

(assert (=> b!100253 m!110837))

(assert (=> b!100255 m!109033))

(assert (=> b!100255 m!110241))

(assert (=> b!100255 m!110241))

(assert (=> b!100255 m!110837))

(assert (=> b!99567 d!27161))

(declare-fun d!27163 () Bool)

(declare-fun isEmpty!367 (List!1568) Bool)

(assert (=> d!27163 (= (isEmpty!365 lt!50036) (isEmpty!367 (toList!767 lt!50036)))))

(declare-fun bs!4161 () Bool)

(assert (= bs!4161 d!27163))

(declare-fun m!110839 () Bool)

(assert (=> bs!4161 m!110839))

(assert (=> b!99439 d!27163))

(declare-fun d!27165 () Bool)

(declare-fun e!65286 () Bool)

(assert (=> d!27165 e!65286))

(declare-fun res!50294 () Bool)

(assert (=> d!27165 (=> (not res!50294) (not e!65286))))

(declare-fun lt!50666 () ListLongMap!1503)

(assert (=> d!27165 (= res!50294 (contains!792 lt!50666 (_1!1165 (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun lt!50665 () List!1568)

(assert (=> d!27165 (= lt!50666 (ListLongMap!1504 lt!50665))))

(declare-fun lt!50664 () Unit!2982)

(declare-fun lt!50667 () Unit!2982)

(assert (=> d!27165 (= lt!50664 lt!50667)))

(assert (=> d!27165 (= (getValueByKey!152 lt!50665 (_1!1165 (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27165 (= lt!50667 (lemmaContainsTupThenGetReturnValue!68 lt!50665 (_1!1165 (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1165 (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27165 (= lt!50665 (insertStrictlySorted!71 (toList!767 (ite c!16995 call!10210 (ite c!16991 call!10212 call!10209))) (_1!1165 (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1165 (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27165 (= (+!131 (ite c!16995 call!10210 (ite c!16991 call!10212 call!10209)) (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) lt!50666)))

(declare-fun b!100256 () Bool)

(declare-fun res!50293 () Bool)

(assert (=> b!100256 (=> (not res!50293) (not e!65286))))

(assert (=> b!100256 (= res!50293 (= (getValueByKey!152 (toList!767 lt!50666) (_1!1165 (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))))

(declare-fun b!100257 () Bool)

(assert (=> b!100257 (= e!65286 (contains!795 (toList!767 lt!50666) (ite (or c!16995 c!16991) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16932 c!16926) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2382 newMap!16))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (= (and d!27165 res!50294) b!100256))

(assert (= (and b!100256 res!50293) b!100257))

(declare-fun m!110841 () Bool)

(assert (=> d!27165 m!110841))

(declare-fun m!110843 () Bool)

(assert (=> d!27165 m!110843))

(declare-fun m!110845 () Bool)

(assert (=> d!27165 m!110845))

(declare-fun m!110847 () Bool)

(assert (=> d!27165 m!110847))

(declare-fun m!110849 () Bool)

(assert (=> b!100256 m!110849))

(declare-fun m!110851 () Bool)

(assert (=> b!100257 m!110851))

(assert (=> bm!10207 d!27165))

(declare-fun d!27167 () Bool)

(declare-fun e!65288 () Bool)

(assert (=> d!27167 e!65288))

(declare-fun res!50295 () Bool)

(assert (=> d!27167 (=> res!50295 e!65288)))

(declare-fun lt!50670 () Bool)

(assert (=> d!27167 (= res!50295 (not lt!50670))))

(declare-fun lt!50669 () Bool)

(assert (=> d!27167 (= lt!50670 lt!50669)))

(declare-fun lt!50668 () Unit!2982)

(declare-fun e!65287 () Unit!2982)

(assert (=> d!27167 (= lt!50668 e!65287)))

(declare-fun c!17199 () Bool)

(assert (=> d!27167 (= c!17199 lt!50669)))

(assert (=> d!27167 (= lt!50669 (containsKey!155 (toList!767 lt!50062) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!27167 (= (contains!792 lt!50062 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50670)))

(declare-fun b!100258 () Bool)

(declare-fun lt!50671 () Unit!2982)

(assert (=> b!100258 (= e!65287 lt!50671)))

(assert (=> b!100258 (= lt!50671 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50062) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> b!100258 (isDefined!104 (getValueByKey!152 (toList!767 lt!50062) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100259 () Bool)

(declare-fun Unit!3034 () Unit!2982)

(assert (=> b!100259 (= e!65287 Unit!3034)))

(declare-fun b!100260 () Bool)

(assert (=> b!100260 (= e!65288 (isDefined!104 (getValueByKey!152 (toList!767 lt!50062) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!27167 c!17199) b!100258))

(assert (= (and d!27167 (not c!17199)) b!100259))

(assert (= (and d!27167 (not res!50295)) b!100260))

(declare-fun m!110853 () Bool)

(assert (=> d!27167 m!110853))

(declare-fun m!110855 () Bool)

(assert (=> b!100258 m!110855))

(assert (=> b!100258 m!109241))

(assert (=> b!100258 m!109241))

(declare-fun m!110857 () Bool)

(assert (=> b!100258 m!110857))

(assert (=> b!100260 m!109241))

(assert (=> b!100260 m!109241))

(assert (=> b!100260 m!110857))

(assert (=> d!26697 d!27167))

(declare-fun b!100264 () Bool)

(declare-fun e!65290 () Option!158)

(assert (=> b!100264 (= e!65290 None!156)))

(declare-fun b!100262 () Bool)

(declare-fun e!65289 () Option!158)

(assert (=> b!100262 (= e!65289 e!65290)))

(declare-fun c!17201 () Bool)

(assert (=> b!100262 (= c!17201 (and ((_ is Cons!1564) lt!50061) (not (= (_1!1165 (h!2159 lt!50061)) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!100261 () Bool)

(assert (=> b!100261 (= e!65289 (Some!157 (_2!1165 (h!2159 lt!50061))))))

(declare-fun c!17200 () Bool)

(declare-fun d!27169 () Bool)

(assert (=> d!27169 (= c!17200 (and ((_ is Cons!1564) lt!50061) (= (_1!1165 (h!2159 lt!50061)) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27169 (= (getValueByKey!152 lt!50061 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65289)))

(declare-fun b!100263 () Bool)

(assert (=> b!100263 (= e!65290 (getValueByKey!152 (t!5534 lt!50061) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!27169 c!17200) b!100261))

(assert (= (and d!27169 (not c!17200)) b!100262))

(assert (= (and b!100262 c!17201) b!100263))

(assert (= (and b!100262 (not c!17201)) b!100264))

(declare-fun m!110859 () Bool)

(assert (=> b!100263 m!110859))

(assert (=> d!26697 d!27169))

(declare-fun d!27171 () Bool)

(assert (=> d!27171 (= (getValueByKey!152 lt!50061 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50672 () Unit!2982)

(assert (=> d!27171 (= lt!50672 (choose!619 lt!50061 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun e!65291 () Bool)

(assert (=> d!27171 e!65291))

(declare-fun res!50296 () Bool)

(assert (=> d!27171 (=> (not res!50296) (not e!65291))))

(assert (=> d!27171 (= res!50296 (isStrictlySorted!292 lt!50061))))

(assert (=> d!27171 (= (lemmaContainsTupThenGetReturnValue!68 lt!50061 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50672)))

(declare-fun b!100265 () Bool)

(declare-fun res!50297 () Bool)

(assert (=> b!100265 (=> (not res!50297) (not e!65291))))

(assert (=> b!100265 (= res!50297 (containsKey!155 lt!50061 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100266 () Bool)

(assert (=> b!100266 (= e!65291 (contains!795 lt!50061 (tuple2!2309 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!27171 res!50296) b!100265))

(assert (= (and b!100265 res!50297) b!100266))

(assert (=> d!27171 m!109235))

(declare-fun m!110861 () Bool)

(assert (=> d!27171 m!110861))

(declare-fun m!110863 () Bool)

(assert (=> d!27171 m!110863))

(declare-fun m!110865 () Bool)

(assert (=> b!100265 m!110865))

(declare-fun m!110867 () Bool)

(assert (=> b!100266 m!110867))

(assert (=> d!26697 d!27171))

(declare-fun e!65294 () List!1568)

(declare-fun b!100267 () Bool)

(assert (=> b!100267 (= e!65294 (insertStrictlySorted!71 (t!5534 (toList!767 lt!49833)) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun bm!10302 () Bool)

(declare-fun call!10305 () List!1568)

(declare-fun call!10307 () List!1568)

(assert (=> bm!10302 (= call!10305 call!10307)))

(declare-fun b!100268 () Bool)

(declare-fun e!65293 () List!1568)

(declare-fun e!65292 () List!1568)

(assert (=> b!100268 (= e!65293 e!65292)))

(declare-fun c!17204 () Bool)

(assert (=> b!100268 (= c!17204 (and ((_ is Cons!1564) (toList!767 lt!49833)) (= (_1!1165 (h!2159 (toList!767 lt!49833))) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun bm!10303 () Bool)

(declare-fun c!17205 () Bool)

(assert (=> bm!10303 (= call!10307 ($colon$colon!78 e!65294 (ite c!17205 (h!2159 (toList!767 lt!49833)) (tuple2!2309 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun c!17202 () Bool)

(assert (=> bm!10303 (= c!17202 c!17205)))

(declare-fun c!17203 () Bool)

(declare-fun b!100269 () Bool)

(assert (=> b!100269 (= c!17203 (and ((_ is Cons!1564) (toList!767 lt!49833)) (bvsgt (_1!1165 (h!2159 (toList!767 lt!49833))) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun e!65295 () List!1568)

(assert (=> b!100269 (= e!65292 e!65295)))

(declare-fun d!27173 () Bool)

(declare-fun e!65296 () Bool)

(assert (=> d!27173 e!65296))

(declare-fun res!50298 () Bool)

(assert (=> d!27173 (=> (not res!50298) (not e!65296))))

(declare-fun lt!50673 () List!1568)

(assert (=> d!27173 (= res!50298 (isStrictlySorted!292 lt!50673))))

(assert (=> d!27173 (= lt!50673 e!65293)))

(assert (=> d!27173 (= c!17205 (and ((_ is Cons!1564) (toList!767 lt!49833)) (bvslt (_1!1165 (h!2159 (toList!767 lt!49833))) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27173 (isStrictlySorted!292 (toList!767 lt!49833))))

(assert (=> d!27173 (= (insertStrictlySorted!71 (toList!767 lt!49833) (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50673)))

(declare-fun b!100270 () Bool)

(declare-fun res!50299 () Bool)

(assert (=> b!100270 (=> (not res!50299) (not e!65296))))

(assert (=> b!100270 (= res!50299 (containsKey!155 lt!50673 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100271 () Bool)

(assert (=> b!100271 (= e!65294 (ite c!17204 (t!5534 (toList!767 lt!49833)) (ite c!17203 (Cons!1564 (h!2159 (toList!767 lt!49833)) (t!5534 (toList!767 lt!49833))) Nil!1565)))))

(declare-fun b!100272 () Bool)

(assert (=> b!100272 (= e!65292 call!10305)))

(declare-fun b!100273 () Bool)

(assert (=> b!100273 (= e!65296 (contains!795 lt!50673 (tuple2!2309 (_1!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!100274 () Bool)

(declare-fun call!10306 () List!1568)

(assert (=> b!100274 (= e!65295 call!10306)))

(declare-fun b!100275 () Bool)

(assert (=> b!100275 (= e!65293 call!10307)))

(declare-fun bm!10304 () Bool)

(assert (=> bm!10304 (= call!10306 call!10305)))

(declare-fun b!100276 () Bool)

(assert (=> b!100276 (= e!65295 call!10306)))

(assert (= (and d!27173 c!17205) b!100275))

(assert (= (and d!27173 (not c!17205)) b!100268))

(assert (= (and b!100268 c!17204) b!100272))

(assert (= (and b!100268 (not c!17204)) b!100269))

(assert (= (and b!100269 c!17203) b!100276))

(assert (= (and b!100269 (not c!17203)) b!100274))

(assert (= (or b!100276 b!100274) bm!10304))

(assert (= (or b!100272 bm!10304) bm!10302))

(assert (= (or b!100275 bm!10302) bm!10303))

(assert (= (and bm!10303 c!17202) b!100267))

(assert (= (and bm!10303 (not c!17202)) b!100271))

(assert (= (and d!27173 res!50298) b!100270))

(assert (= (and b!100270 res!50299) b!100273))

(declare-fun m!110869 () Bool)

(assert (=> b!100270 m!110869))

(declare-fun m!110871 () Bool)

(assert (=> bm!10303 m!110871))

(declare-fun m!110873 () Bool)

(assert (=> d!27173 m!110873))

(declare-fun m!110875 () Bool)

(assert (=> d!27173 m!110875))

(declare-fun m!110877 () Bool)

(assert (=> b!100267 m!110877))

(declare-fun m!110879 () Bool)

(assert (=> b!100273 m!110879))

(assert (=> d!26697 d!27173))

(assert (=> b!99374 d!26855))

(declare-fun d!27175 () Bool)

(assert (=> d!27175 (= (isEmpty!366 (getValueByKey!152 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))) (not ((_ is Some!157) (getValueByKey!152 (toList!767 lt!49742) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))))

(assert (=> d!26719 d!27175))

(declare-fun d!27177 () Bool)

(declare-fun e!65297 () Bool)

(assert (=> d!27177 e!65297))

(declare-fun res!50301 () Bool)

(assert (=> d!27177 (=> (not res!50301) (not e!65297))))

(declare-fun lt!50676 () ListLongMap!1503)

(assert (=> d!27177 (= res!50301 (contains!792 lt!50676 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(declare-fun lt!50675 () List!1568)

(assert (=> d!27177 (= lt!50676 (ListLongMap!1504 lt!50675))))

(declare-fun lt!50674 () Unit!2982)

(declare-fun lt!50677 () Unit!2982)

(assert (=> d!27177 (= lt!50674 lt!50677)))

(assert (=> d!27177 (= (getValueByKey!152 lt!50675 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!27177 (= lt!50677 (lemmaContainsTupThenGetReturnValue!68 lt!50675 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!27177 (= lt!50675 (insertStrictlySorted!71 (toList!767 call!10222) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))))))

(assert (=> d!27177 (= (+!131 call!10222 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))) lt!50676)))

(declare-fun b!100277 () Bool)

(declare-fun res!50300 () Bool)

(assert (=> b!100277 (=> (not res!50300) (not e!65297))))

(assert (=> b!100277 (= res!50300 (= (getValueByKey!152 (toList!767 lt!50676) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))))

(declare-fun b!100278 () Bool)

(assert (=> b!100278 (= e!65297 (contains!795 (toList!767 lt!50676) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16932 (ite c!16926 (minValue!2382 newMap!16) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2382 newMap!16)))))))

(assert (= (and d!27177 res!50301) b!100277))

(assert (= (and b!100277 res!50300) b!100278))

(declare-fun m!110881 () Bool)

(assert (=> d!27177 m!110881))

(declare-fun m!110883 () Bool)

(assert (=> d!27177 m!110883))

(declare-fun m!110885 () Bool)

(assert (=> d!27177 m!110885))

(declare-fun m!110887 () Bool)

(assert (=> d!27177 m!110887))

(declare-fun m!110889 () Bool)

(assert (=> b!100277 m!110889))

(declare-fun m!110891 () Bool)

(assert (=> b!100278 m!110891))

(assert (=> b!99571 d!27177))

(declare-fun d!27179 () Bool)

(declare-fun e!65299 () Bool)

(assert (=> d!27179 e!65299))

(declare-fun res!50302 () Bool)

(assert (=> d!27179 (=> res!50302 e!65299)))

(declare-fun lt!50680 () Bool)

(assert (=> d!27179 (= res!50302 (not lt!50680))))

(declare-fun lt!50679 () Bool)

(assert (=> d!27179 (= lt!50680 lt!50679)))

(declare-fun lt!50678 () Unit!2982)

(declare-fun e!65298 () Unit!2982)

(assert (=> d!27179 (= lt!50678 e!65298)))

(declare-fun c!17206 () Bool)

(assert (=> d!27179 (= c!17206 lt!50679)))

(assert (=> d!27179 (= lt!50679 (containsKey!155 (toList!767 lt!50070) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!27179 (= (contains!792 lt!50070 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50680)))

(declare-fun b!100279 () Bool)

(declare-fun lt!50681 () Unit!2982)

(assert (=> b!100279 (= e!65298 lt!50681)))

(assert (=> b!100279 (= lt!50681 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50070) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> b!100279 (isDefined!104 (getValueByKey!152 (toList!767 lt!50070) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100280 () Bool)

(declare-fun Unit!3035 () Unit!2982)

(assert (=> b!100280 (= e!65298 Unit!3035)))

(declare-fun b!100281 () Bool)

(assert (=> b!100281 (= e!65299 (isDefined!104 (getValueByKey!152 (toList!767 lt!50070) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!27179 c!17206) b!100279))

(assert (= (and d!27179 (not c!17206)) b!100280))

(assert (= (and d!27179 (not res!50302)) b!100281))

(declare-fun m!110893 () Bool)

(assert (=> d!27179 m!110893))

(declare-fun m!110895 () Bool)

(assert (=> b!100279 m!110895))

(assert (=> b!100279 m!109265))

(assert (=> b!100279 m!109265))

(declare-fun m!110897 () Bool)

(assert (=> b!100279 m!110897))

(assert (=> b!100281 m!109265))

(assert (=> b!100281 m!109265))

(assert (=> b!100281 m!110897))

(assert (=> d!26701 d!27179))

(declare-fun b!100285 () Bool)

(declare-fun e!65301 () Option!158)

(assert (=> b!100285 (= e!65301 None!156)))

(declare-fun b!100283 () Bool)

(declare-fun e!65300 () Option!158)

(assert (=> b!100283 (= e!65300 e!65301)))

(declare-fun c!17208 () Bool)

(assert (=> b!100283 (= c!17208 (and ((_ is Cons!1564) lt!50069) (not (= (_1!1165 (h!2159 lt!50069)) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!100282 () Bool)

(assert (=> b!100282 (= e!65300 (Some!157 (_2!1165 (h!2159 lt!50069))))))

(declare-fun d!27181 () Bool)

(declare-fun c!17207 () Bool)

(assert (=> d!27181 (= c!17207 (and ((_ is Cons!1564) lt!50069) (= (_1!1165 (h!2159 lt!50069)) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27181 (= (getValueByKey!152 lt!50069 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65300)))

(declare-fun b!100284 () Bool)

(assert (=> b!100284 (= e!65301 (getValueByKey!152 (t!5534 lt!50069) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!27181 c!17207) b!100282))

(assert (= (and d!27181 (not c!17207)) b!100283))

(assert (= (and b!100283 c!17208) b!100284))

(assert (= (and b!100283 (not c!17208)) b!100285))

(declare-fun m!110899 () Bool)

(assert (=> b!100284 m!110899))

(assert (=> d!26701 d!27181))

(declare-fun d!27183 () Bool)

(assert (=> d!27183 (= (getValueByKey!152 lt!50069 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50682 () Unit!2982)

(assert (=> d!27183 (= lt!50682 (choose!619 lt!50069 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun e!65302 () Bool)

(assert (=> d!27183 e!65302))

(declare-fun res!50303 () Bool)

(assert (=> d!27183 (=> (not res!50303) (not e!65302))))

(assert (=> d!27183 (= res!50303 (isStrictlySorted!292 lt!50069))))

(assert (=> d!27183 (= (lemmaContainsTupThenGetReturnValue!68 lt!50069 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50682)))

(declare-fun b!100286 () Bool)

(declare-fun res!50304 () Bool)

(assert (=> b!100286 (=> (not res!50304) (not e!65302))))

(assert (=> b!100286 (= res!50304 (containsKey!155 lt!50069 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100287 () Bool)

(assert (=> b!100287 (= e!65302 (contains!795 lt!50069 (tuple2!2309 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!27183 res!50303) b!100286))

(assert (= (and b!100286 res!50304) b!100287))

(assert (=> d!27183 m!109259))

(declare-fun m!110901 () Bool)

(assert (=> d!27183 m!110901))

(declare-fun m!110903 () Bool)

(assert (=> d!27183 m!110903))

(declare-fun m!110905 () Bool)

(assert (=> b!100286 m!110905))

(declare-fun m!110907 () Bool)

(assert (=> b!100287 m!110907))

(assert (=> d!26701 d!27183))

(declare-fun b!100288 () Bool)

(declare-fun e!65305 () List!1568)

(assert (=> b!100288 (= e!65305 (insertStrictlySorted!71 (t!5534 (toList!767 lt!49850)) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun bm!10305 () Bool)

(declare-fun call!10308 () List!1568)

(declare-fun call!10310 () List!1568)

(assert (=> bm!10305 (= call!10308 call!10310)))

(declare-fun b!100289 () Bool)

(declare-fun e!65304 () List!1568)

(declare-fun e!65303 () List!1568)

(assert (=> b!100289 (= e!65304 e!65303)))

(declare-fun c!17211 () Bool)

(assert (=> b!100289 (= c!17211 (and ((_ is Cons!1564) (toList!767 lt!49850)) (= (_1!1165 (h!2159 (toList!767 lt!49850))) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun c!17212 () Bool)

(declare-fun bm!10306 () Bool)

(assert (=> bm!10306 (= call!10310 ($colon$colon!78 e!65305 (ite c!17212 (h!2159 (toList!767 lt!49850)) (tuple2!2309 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun c!17209 () Bool)

(assert (=> bm!10306 (= c!17209 c!17212)))

(declare-fun b!100290 () Bool)

(declare-fun c!17210 () Bool)

(assert (=> b!100290 (= c!17210 (and ((_ is Cons!1564) (toList!767 lt!49850)) (bvsgt (_1!1165 (h!2159 (toList!767 lt!49850))) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun e!65306 () List!1568)

(assert (=> b!100290 (= e!65303 e!65306)))

(declare-fun d!27185 () Bool)

(declare-fun e!65307 () Bool)

(assert (=> d!27185 e!65307))

(declare-fun res!50305 () Bool)

(assert (=> d!27185 (=> (not res!50305) (not e!65307))))

(declare-fun lt!50683 () List!1568)

(assert (=> d!27185 (= res!50305 (isStrictlySorted!292 lt!50683))))

(assert (=> d!27185 (= lt!50683 e!65304)))

(assert (=> d!27185 (= c!17212 (and ((_ is Cons!1564) (toList!767 lt!49850)) (bvslt (_1!1165 (h!2159 (toList!767 lt!49850))) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27185 (isStrictlySorted!292 (toList!767 lt!49850))))

(assert (=> d!27185 (= (insertStrictlySorted!71 (toList!767 lt!49850) (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50683)))

(declare-fun b!100291 () Bool)

(declare-fun res!50306 () Bool)

(assert (=> b!100291 (=> (not res!50306) (not e!65307))))

(assert (=> b!100291 (= res!50306 (containsKey!155 lt!50683 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100292 () Bool)

(assert (=> b!100292 (= e!65305 (ite c!17211 (t!5534 (toList!767 lt!49850)) (ite c!17210 (Cons!1564 (h!2159 (toList!767 lt!49850)) (t!5534 (toList!767 lt!49850))) Nil!1565)))))

(declare-fun b!100293 () Bool)

(assert (=> b!100293 (= e!65303 call!10308)))

(declare-fun b!100294 () Bool)

(assert (=> b!100294 (= e!65307 (contains!795 lt!50683 (tuple2!2309 (_1!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49854 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!100295 () Bool)

(declare-fun call!10309 () List!1568)

(assert (=> b!100295 (= e!65306 call!10309)))

(declare-fun b!100296 () Bool)

(assert (=> b!100296 (= e!65304 call!10310)))

(declare-fun bm!10307 () Bool)

(assert (=> bm!10307 (= call!10309 call!10308)))

(declare-fun b!100297 () Bool)

(assert (=> b!100297 (= e!65306 call!10309)))

(assert (= (and d!27185 c!17212) b!100296))

(assert (= (and d!27185 (not c!17212)) b!100289))

(assert (= (and b!100289 c!17211) b!100293))

(assert (= (and b!100289 (not c!17211)) b!100290))

(assert (= (and b!100290 c!17210) b!100297))

(assert (= (and b!100290 (not c!17210)) b!100295))

(assert (= (or b!100297 b!100295) bm!10307))

(assert (= (or b!100293 bm!10307) bm!10305))

(assert (= (or b!100296 bm!10305) bm!10306))

(assert (= (and bm!10306 c!17209) b!100288))

(assert (= (and bm!10306 (not c!17209)) b!100292))

(assert (= (and d!27185 res!50305) b!100291))

(assert (= (and b!100291 res!50306) b!100294))

(declare-fun m!110909 () Bool)

(assert (=> b!100291 m!110909))

(declare-fun m!110911 () Bool)

(assert (=> bm!10306 m!110911))

(declare-fun m!110913 () Bool)

(assert (=> d!27185 m!110913))

(declare-fun m!110915 () Bool)

(assert (=> d!27185 m!110915))

(declare-fun m!110917 () Bool)

(assert (=> b!100288 m!110917))

(declare-fun m!110919 () Bool)

(assert (=> b!100294 m!110919))

(assert (=> d!26701 d!27185))

(declare-fun b!100298 () Bool)

(declare-fun e!65308 () (_ BitVec 32))

(declare-fun call!10311 () (_ BitVec 32))

(assert (=> b!100298 (= e!65308 (bvadd #b00000000000000000000000000000001 call!10311))))

(declare-fun d!27187 () Bool)

(declare-fun lt!50684 () (_ BitVec 32))

(assert (=> d!27187 (and (bvsge lt!50684 #b00000000000000000000000000000000) (bvsle lt!50684 (bvsub (size!2263 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun e!65309 () (_ BitVec 32))

(assert (=> d!27187 (= lt!50684 e!65309)))

(declare-fun c!17213 () Bool)

(assert (=> d!27187 (= c!17213 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!27187 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2263 (_keys!4195 newMap!16)) (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!27187 (= (arrayCountValidKeys!0 (_keys!4195 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))) lt!50684)))

(declare-fun b!100299 () Bool)

(assert (=> b!100299 (= e!65309 #b00000000000000000000000000000000)))

(declare-fun b!100300 () Bool)

(assert (=> b!100300 (= e!65309 e!65308)))

(declare-fun c!17214 () Bool)

(assert (=> b!100300 (= c!17214 (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10308 () Bool)

(assert (=> bm!10308 (= call!10311 (arrayCountValidKeys!0 (_keys!4195 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100301 () Bool)

(assert (=> b!100301 (= e!65308 call!10311)))

(assert (= (and d!27187 c!17213) b!100299))

(assert (= (and d!27187 (not c!17213)) b!100300))

(assert (= (and b!100300 c!17214) b!100298))

(assert (= (and b!100300 (not c!17214)) b!100301))

(assert (= (or b!100298 b!100301) bm!10308))

(assert (=> b!100300 m!110269))

(assert (=> b!100300 m!110269))

(assert (=> b!100300 m!110277))

(declare-fun m!110921 () Bool)

(assert (=> bm!10308 m!110921))

(assert (=> bm!10215 d!27187))

(declare-fun d!27189 () Bool)

(declare-fun e!65311 () Bool)

(assert (=> d!27189 e!65311))

(declare-fun res!50307 () Bool)

(assert (=> d!27189 (=> res!50307 e!65311)))

(declare-fun lt!50687 () Bool)

(assert (=> d!27189 (= res!50307 (not lt!50687))))

(declare-fun lt!50686 () Bool)

(assert (=> d!27189 (= lt!50687 lt!50686)))

(declare-fun lt!50685 () Unit!2982)

(declare-fun e!65310 () Unit!2982)

(assert (=> d!27189 (= lt!50685 e!65310)))

(declare-fun c!17215 () Bool)

(assert (=> d!27189 (= c!17215 lt!50686)))

(assert (=> d!27189 (= lt!50686 (containsKey!155 (toList!767 lt!50036) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!27189 (= (contains!792 lt!50036 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50687)))

(declare-fun b!100302 () Bool)

(declare-fun lt!50688 () Unit!2982)

(assert (=> b!100302 (= e!65310 lt!50688)))

(assert (=> b!100302 (= lt!50688 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50036) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!100302 (isDefined!104 (getValueByKey!152 (toList!767 lt!50036) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!100303 () Bool)

(declare-fun Unit!3036 () Unit!2982)

(assert (=> b!100303 (= e!65310 Unit!3036)))

(declare-fun b!100304 () Bool)

(assert (=> b!100304 (= e!65311 (isDefined!104 (getValueByKey!152 (toList!767 lt!50036) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!27189 c!17215) b!100302))

(assert (= (and d!27189 (not c!17215)) b!100303))

(assert (= (and d!27189 (not res!50307)) b!100304))

(assert (=> d!27189 m!108875))

(declare-fun m!110923 () Bool)

(assert (=> d!27189 m!110923))

(assert (=> b!100302 m!108875))

(declare-fun m!110925 () Bool)

(assert (=> b!100302 m!110925))

(assert (=> b!100302 m!108875))

(assert (=> b!100302 m!110257))

(assert (=> b!100302 m!110257))

(declare-fun m!110927 () Bool)

(assert (=> b!100302 m!110927))

(assert (=> b!100304 m!108875))

(assert (=> b!100304 m!110257))

(assert (=> b!100304 m!110257))

(assert (=> b!100304 m!110927))

(assert (=> b!99436 d!27189))

(declare-fun d!27191 () Bool)

(declare-fun e!65313 () Bool)

(assert (=> d!27191 e!65313))

(declare-fun res!50308 () Bool)

(assert (=> d!27191 (=> res!50308 e!65313)))

(declare-fun lt!50691 () Bool)

(assert (=> d!27191 (= res!50308 (not lt!50691))))

(declare-fun lt!50690 () Bool)

(assert (=> d!27191 (= lt!50691 lt!50690)))

(declare-fun lt!50689 () Unit!2982)

(declare-fun e!65312 () Unit!2982)

(assert (=> d!27191 (= lt!50689 e!65312)))

(declare-fun c!17216 () Bool)

(assert (=> d!27191 (= c!17216 lt!50690)))

(assert (=> d!27191 (= lt!50690 (containsKey!155 (toList!767 lt!50050) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> d!27191 (= (contains!792 lt!50050 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50691)))

(declare-fun b!100305 () Bool)

(declare-fun lt!50692 () Unit!2982)

(assert (=> b!100305 (= e!65312 lt!50692)))

(assert (=> b!100305 (= lt!50692 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50050) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (=> b!100305 (isDefined!104 (getValueByKey!152 (toList!767 lt!50050) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100306 () Bool)

(declare-fun Unit!3037 () Unit!2982)

(assert (=> b!100306 (= e!65312 Unit!3037)))

(declare-fun b!100307 () Bool)

(assert (=> b!100307 (= e!65313 (isDefined!104 (getValueByKey!152 (toList!767 lt!50050) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!27191 c!17216) b!100305))

(assert (= (and d!27191 (not c!17216)) b!100306))

(assert (= (and d!27191 (not res!50308)) b!100307))

(declare-fun m!110929 () Bool)

(assert (=> d!27191 m!110929))

(declare-fun m!110931 () Bool)

(assert (=> b!100305 m!110931))

(assert (=> b!100305 m!109201))

(assert (=> b!100305 m!109201))

(declare-fun m!110933 () Bool)

(assert (=> b!100305 m!110933))

(assert (=> b!100307 m!109201))

(assert (=> b!100307 m!109201))

(assert (=> b!100307 m!110933))

(assert (=> d!26683 d!27191))

(declare-fun b!100311 () Bool)

(declare-fun e!65315 () Option!158)

(assert (=> b!100311 (= e!65315 None!156)))

(declare-fun b!100309 () Bool)

(declare-fun e!65314 () Option!158)

(assert (=> b!100309 (= e!65314 e!65315)))

(declare-fun c!17218 () Bool)

(assert (=> b!100309 (= c!17218 (and ((_ is Cons!1564) lt!50049) (not (= (_1!1165 (h!2159 lt!50049)) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!100308 () Bool)

(assert (=> b!100308 (= e!65314 (Some!157 (_2!1165 (h!2159 lt!50049))))))

(declare-fun c!17217 () Bool)

(declare-fun d!27193 () Bool)

(assert (=> d!27193 (= c!17217 (and ((_ is Cons!1564) lt!50049) (= (_1!1165 (h!2159 lt!50049)) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27193 (= (getValueByKey!152 lt!50049 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65314)))

(declare-fun b!100310 () Bool)

(assert (=> b!100310 (= e!65315 (getValueByKey!152 (t!5534 lt!50049) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!27193 c!17217) b!100308))

(assert (= (and d!27193 (not c!17217)) b!100309))

(assert (= (and b!100309 c!17218) b!100310))

(assert (= (and b!100309 (not c!17218)) b!100311))

(declare-fun m!110935 () Bool)

(assert (=> b!100310 m!110935))

(assert (=> d!26683 d!27193))

(declare-fun d!27195 () Bool)

(assert (=> d!27195 (= (getValueByKey!152 lt!50049 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) (Some!157 (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun lt!50693 () Unit!2982)

(assert (=> d!27195 (= lt!50693 (choose!619 lt!50049 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun e!65316 () Bool)

(assert (=> d!27195 e!65316))

(declare-fun res!50309 () Bool)

(assert (=> d!27195 (=> (not res!50309) (not e!65316))))

(assert (=> d!27195 (= res!50309 (isStrictlySorted!292 lt!50049))))

(assert (=> d!27195 (= (lemmaContainsTupThenGetReturnValue!68 lt!50049 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50693)))

(declare-fun b!100312 () Bool)

(declare-fun res!50310 () Bool)

(assert (=> b!100312 (=> (not res!50310) (not e!65316))))

(assert (=> b!100312 (= res!50310 (containsKey!155 lt!50049 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100313 () Bool)

(assert (=> b!100313 (= e!65316 (contains!795 lt!50049 (tuple2!2309 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!27195 res!50309) b!100312))

(assert (= (and b!100312 res!50310) b!100313))

(assert (=> d!27195 m!109195))

(declare-fun m!110937 () Bool)

(assert (=> d!27195 m!110937))

(declare-fun m!110939 () Bool)

(assert (=> d!27195 m!110939))

(declare-fun m!110941 () Bool)

(assert (=> b!100312 m!110941))

(declare-fun m!110943 () Bool)

(assert (=> b!100313 m!110943))

(assert (=> d!26683 d!27195))

(declare-fun b!100314 () Bool)

(declare-fun e!65319 () List!1568)

(assert (=> b!100314 (= e!65319 (insertStrictlySorted!71 (t!5534 (toList!767 lt!49844)) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun bm!10309 () Bool)

(declare-fun call!10312 () List!1568)

(declare-fun call!10314 () List!1568)

(assert (=> bm!10309 (= call!10312 call!10314)))

(declare-fun b!100315 () Bool)

(declare-fun e!65318 () List!1568)

(declare-fun e!65317 () List!1568)

(assert (=> b!100315 (= e!65318 e!65317)))

(declare-fun c!17221 () Bool)

(assert (=> b!100315 (= c!17221 (and ((_ is Cons!1564) (toList!767 lt!49844)) (= (_1!1165 (h!2159 (toList!767 lt!49844))) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun bm!10310 () Bool)

(declare-fun c!17222 () Bool)

(assert (=> bm!10310 (= call!10314 ($colon$colon!78 e!65319 (ite c!17222 (h!2159 (toList!767 lt!49844)) (tuple2!2309 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun c!17219 () Bool)

(assert (=> bm!10310 (= c!17219 c!17222)))

(declare-fun b!100316 () Bool)

(declare-fun c!17220 () Bool)

(assert (=> b!100316 (= c!17220 (and ((_ is Cons!1564) (toList!767 lt!49844)) (bvsgt (_1!1165 (h!2159 (toList!767 lt!49844))) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun e!65320 () List!1568)

(assert (=> b!100316 (= e!65317 e!65320)))

(declare-fun d!27197 () Bool)

(declare-fun e!65321 () Bool)

(assert (=> d!27197 e!65321))

(declare-fun res!50311 () Bool)

(assert (=> d!27197 (=> (not res!50311) (not e!65321))))

(declare-fun lt!50694 () List!1568)

(assert (=> d!27197 (= res!50311 (isStrictlySorted!292 lt!50694))))

(assert (=> d!27197 (= lt!50694 e!65318)))

(assert (=> d!27197 (= c!17222 (and ((_ is Cons!1564) (toList!767 lt!49844)) (bvslt (_1!1165 (h!2159 (toList!767 lt!49844))) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27197 (isStrictlySorted!292 (toList!767 lt!49844))))

(assert (=> d!27197 (= (insertStrictlySorted!71 (toList!767 lt!49844) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) lt!50694)))

(declare-fun b!100317 () Bool)

(declare-fun res!50312 () Bool)

(assert (=> b!100317 (=> (not res!50312) (not e!65321))))

(assert (=> b!100317 (= res!50312 (containsKey!155 lt!50694 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(declare-fun b!100318 () Bool)

(assert (=> b!100318 (= e!65319 (ite c!17221 (t!5534 (toList!767 lt!49844)) (ite c!17220 (Cons!1564 (h!2159 (toList!767 lt!49844)) (t!5534 (toList!767 lt!49844))) Nil!1565)))))

(declare-fun b!100319 () Bool)

(assert (=> b!100319 (= e!65317 call!10312)))

(declare-fun b!100320 () Bool)

(assert (=> b!100320 (= e!65321 (contains!795 lt!50694 (tuple2!2309 (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) (_2!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!100321 () Bool)

(declare-fun call!10313 () List!1568)

(assert (=> b!100321 (= e!65320 call!10313)))

(declare-fun b!100322 () Bool)

(assert (=> b!100322 (= e!65318 call!10314)))

(declare-fun bm!10311 () Bool)

(assert (=> bm!10311 (= call!10313 call!10312)))

(declare-fun b!100323 () Bool)

(assert (=> b!100323 (= e!65320 call!10313)))

(assert (= (and d!27197 c!17222) b!100322))

(assert (= (and d!27197 (not c!17222)) b!100315))

(assert (= (and b!100315 c!17221) b!100319))

(assert (= (and b!100315 (not c!17221)) b!100316))

(assert (= (and b!100316 c!17220) b!100323))

(assert (= (and b!100316 (not c!17220)) b!100321))

(assert (= (or b!100323 b!100321) bm!10311))

(assert (= (or b!100319 bm!10311) bm!10309))

(assert (= (or b!100322 bm!10309) bm!10310))

(assert (= (and bm!10310 c!17219) b!100314))

(assert (= (and bm!10310 (not c!17219)) b!100318))

(assert (= (and d!27197 res!50311) b!100317))

(assert (= (and b!100317 res!50312) b!100320))

(declare-fun m!110945 () Bool)

(assert (=> b!100317 m!110945))

(declare-fun m!110947 () Bool)

(assert (=> bm!10310 m!110947))

(declare-fun m!110949 () Bool)

(assert (=> d!27197 m!110949))

(declare-fun m!110951 () Bool)

(assert (=> d!27197 m!110951))

(declare-fun m!110953 () Bool)

(assert (=> b!100314 m!110953))

(declare-fun m!110955 () Bool)

(assert (=> b!100320 m!110955))

(assert (=> d!26683 d!27197))

(declare-fun d!27199 () Bool)

(declare-fun e!65324 () Bool)

(assert (=> d!27199 e!65324))

(declare-fun res!50315 () Bool)

(assert (=> d!27199 (=> (not res!50315) (not e!65324))))

(assert (=> d!27199 (= res!50315 (and (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000000) (bvslt (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (size!2263 (_keys!4195 newMap!16)))))))

(declare-fun lt!50697 () Unit!2982)

(declare-fun choose!102 ((_ BitVec 64) array!4237 (_ BitVec 32) (_ BitVec 32)) Unit!2982)

(assert (=> d!27199 (= lt!50697 (choose!102 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (mask!6608 newMap!16)))))

(assert (=> d!27199 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!27199 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (mask!6608 newMap!16)) lt!50697)))

(declare-fun b!100326 () Bool)

(assert (=> b!100326 (= e!65324 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (mask!6608 newMap!16)))))

(assert (= (and d!27199 res!50315) b!100326))

(assert (=> d!27199 m!108735))

(declare-fun m!110957 () Bool)

(assert (=> d!27199 m!110957))

(assert (=> d!27199 m!109025))

(assert (=> b!100326 m!109577))

(assert (=> b!100326 m!109587))

(assert (=> d!26767 d!27199))

(declare-fun d!27201 () Bool)

(assert (=> d!27201 (= (arrayCountValidKeys!0 lt!50251 (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (bvadd (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!50700 () Unit!2982)

(declare-fun choose!2 (array!4237 (_ BitVec 32)) Unit!2982)

(assert (=> d!27201 (= lt!50700 (choose!2 lt!50251 (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))))))

(declare-fun e!65327 () Bool)

(assert (=> d!27201 e!65327))

(declare-fun res!50320 () Bool)

(assert (=> d!27201 (=> (not res!50320) (not e!65327))))

(assert (=> d!27201 (= res!50320 (and (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000000) (bvslt (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (size!2263 lt!50251))))))

(assert (=> d!27201 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!50251 (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))) lt!50700)))

(declare-fun b!100331 () Bool)

(declare-fun res!50321 () Bool)

(assert (=> b!100331 (=> (not res!50321) (not e!65327))))

(assert (=> b!100331 (= res!50321 (validKeyInArray!0 (select (arr!2012 lt!50251) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)))))))

(declare-fun b!100332 () Bool)

(assert (=> b!100332 (= e!65327 (bvslt (size!2263 lt!50251) #b01111111111111111111111111111111))))

(assert (= (and d!27201 res!50320) b!100331))

(assert (= (and b!100331 res!50321) b!100332))

(assert (=> d!27201 m!109589))

(declare-fun m!110959 () Bool)

(assert (=> d!27201 m!110959))

(declare-fun m!110961 () Bool)

(assert (=> b!100331 m!110961))

(assert (=> b!100331 m!110961))

(declare-fun m!110963 () Bool)

(assert (=> b!100331 m!110963))

(assert (=> d!26767 d!27201))

(declare-fun d!27203 () Bool)

(declare-fun e!65332 () Bool)

(assert (=> d!27203 e!65332))

(declare-fun res!50332 () Bool)

(assert (=> d!27203 (=> (not res!50332) (not e!65332))))

(assert (=> d!27203 (= res!50332 (and (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000000) (bvslt (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (size!2263 (_keys!4195 newMap!16)))))))

(declare-fun lt!50703 () Unit!2982)

(declare-fun choose!1 (array!4237 (_ BitVec 32) (_ BitVec 64)) Unit!2982)

(assert (=> d!27203 (= lt!50703 (choose!1 (_keys!4195 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun e!65333 () Bool)

(assert (=> d!27203 e!65333))

(declare-fun res!50333 () Bool)

(assert (=> d!27203 (=> (not res!50333) (not e!65333))))

(assert (=> d!27203 (= res!50333 (and (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000000) (bvslt (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (size!2263 (_keys!4195 newMap!16)))))))

(assert (=> d!27203 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4195 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) lt!50703)))

(declare-fun b!100343 () Bool)

(assert (=> b!100343 (= e!65333 (bvslt (size!2263 (_keys!4195 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!100341 () Bool)

(declare-fun res!50330 () Bool)

(assert (=> b!100341 (=> (not res!50330) (not e!65333))))

(assert (=> b!100341 (= res!50330 (not (validKeyInArray!0 (select (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))))))))

(declare-fun b!100342 () Bool)

(declare-fun res!50331 () Bool)

(assert (=> b!100342 (=> (not res!50331) (not e!65333))))

(assert (=> b!100342 (= res!50331 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(declare-fun b!100344 () Bool)

(assert (=> b!100344 (= e!65332 (= (arrayCountValidKeys!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4195 newMap!16) #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) #b00000000000000000000000000000001)))))

(assert (= (and d!27203 res!50333) b!100341))

(assert (= (and b!100341 res!50330) b!100342))

(assert (= (and b!100342 res!50331) b!100343))

(assert (= (and d!27203 res!50332) b!100344))

(assert (=> d!27203 m!108735))

(declare-fun m!110965 () Bool)

(assert (=> d!27203 m!110965))

(declare-fun m!110967 () Bool)

(assert (=> b!100341 m!110967))

(assert (=> b!100341 m!110967))

(declare-fun m!110969 () Bool)

(assert (=> b!100341 m!110969))

(assert (=> b!100342 m!108735))

(assert (=> b!100342 m!109007))

(assert (=> b!100344 m!109577))

(assert (=> b!100344 m!109593))

(assert (=> b!100344 m!108925))

(assert (=> d!26767 d!27203))

(assert (=> d!26767 d!26883))

(assert (=> d!26767 d!26661))

(assert (=> d!26767 d!26733))

(declare-fun d!27205 () Bool)

(declare-fun e!65334 () Bool)

(assert (=> d!27205 e!65334))

(declare-fun res!50334 () Bool)

(assert (=> d!27205 (=> (not res!50334) (not e!65334))))

(assert (=> d!27205 (= res!50334 (and (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000000) (bvslt (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (size!2263 lt!50252))))))

(declare-fun lt!50704 () Unit!2982)

(assert (=> d!27205 (= lt!50704 (choose!613 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!27205 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!27205 (= (lemmaValidKeyInArrayIsInListMap!102 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (defaultEntry!2501 newMap!16)) lt!50704)))

(declare-fun b!100345 () Bool)

(assert (=> b!100345 (= e!65334 (contains!792 (getCurrentListMap!456 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2012 lt!50252) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)))))))

(assert (= (and d!27205 res!50334) b!100345))

(declare-fun m!110971 () Bool)

(assert (=> d!27205 m!110971))

(assert (=> d!27205 m!109025))

(assert (=> b!100345 m!109581))

(declare-fun m!110973 () Bool)

(assert (=> b!100345 m!110973))

(assert (=> b!100345 m!109581))

(assert (=> b!100345 m!110973))

(declare-fun m!110975 () Bool)

(assert (=> b!100345 m!110975))

(assert (=> d!26767 d!27205))

(assert (=> d!26767 d!26743))

(declare-fun d!27207 () Bool)

(declare-fun e!65337 () Bool)

(assert (=> d!27207 e!65337))

(declare-fun res!50337 () Bool)

(assert (=> d!27207 (=> (not res!50337) (not e!65337))))

(assert (=> d!27207 (= res!50337 (and (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000000) (bvslt (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (size!2263 (_keys!4195 newMap!16)))))))

(declare-fun lt!50707 () Unit!2982)

(declare-fun choose!41 (array!4237 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1569) Unit!2982)

(assert (=> d!27207 (= lt!50707 (choose!41 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) lt!50259 lt!50258))))

(assert (=> d!27207 (bvslt (size!2263 (_keys!4195 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!27207 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) lt!50259 lt!50258) lt!50707)))

(declare-fun b!100348 () Bool)

(assert (=> b!100348 (= e!65337 (arrayNoDuplicates!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) lt!50259 lt!50258))))

(assert (= (and d!27207 res!50337) b!100348))

(assert (=> d!27207 m!108735))

(declare-fun m!110977 () Bool)

(assert (=> d!27207 m!110977))

(assert (=> b!100348 m!109577))

(assert (=> b!100348 m!109573))

(assert (=> d!26767 d!27207))

(declare-fun d!27209 () Bool)

(declare-fun e!65339 () Bool)

(assert (=> d!27209 e!65339))

(declare-fun res!50338 () Bool)

(assert (=> d!27209 (=> res!50338 e!65339)))

(declare-fun lt!50710 () Bool)

(assert (=> d!27209 (= res!50338 (not lt!50710))))

(declare-fun lt!50709 () Bool)

(assert (=> d!27209 (= lt!50710 lt!50709)))

(declare-fun lt!50708 () Unit!2982)

(declare-fun e!65338 () Unit!2982)

(assert (=> d!27209 (= lt!50708 e!65338)))

(declare-fun c!17223 () Bool)

(assert (=> d!27209 (= c!17223 lt!50709)))

(assert (=> d!27209 (= lt!50709 (containsKey!155 (toList!767 (getCurrentListMap!456 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)))))))

(assert (=> d!27209 (= (contains!792 (getCurrentListMap!456 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)))) lt!50710)))

(declare-fun b!100349 () Bool)

(declare-fun lt!50711 () Unit!2982)

(assert (=> b!100349 (= e!65338 lt!50711)))

(assert (=> b!100349 (= lt!50711 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (getCurrentListMap!456 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)))))))

(assert (=> b!100349 (isDefined!104 (getValueByKey!152 (toList!767 (getCurrentListMap!456 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)))))))

(declare-fun b!100350 () Bool)

(declare-fun Unit!3038 () Unit!2982)

(assert (=> b!100350 (= e!65338 Unit!3038)))

(declare-fun b!100351 () Bool)

(assert (=> b!100351 (= e!65339 (isDefined!104 (getValueByKey!152 (toList!767 (getCurrentListMap!456 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))))))))

(assert (= (and d!27209 c!17223) b!100349))

(assert (= (and d!27209 (not c!17223)) b!100350))

(assert (= (and d!27209 (not res!50338)) b!100351))

(assert (=> d!27209 m!109585))

(declare-fun m!110979 () Bool)

(assert (=> d!27209 m!110979))

(assert (=> b!100349 m!109585))

(declare-fun m!110981 () Bool)

(assert (=> b!100349 m!110981))

(assert (=> b!100349 m!109585))

(declare-fun m!110983 () Bool)

(assert (=> b!100349 m!110983))

(assert (=> b!100349 m!110983))

(declare-fun m!110985 () Bool)

(assert (=> b!100349 m!110985))

(assert (=> b!100351 m!109585))

(assert (=> b!100351 m!110983))

(assert (=> b!100351 m!110983))

(assert (=> b!100351 m!110985))

(assert (=> d!26767 d!27209))

(declare-fun d!27211 () Bool)

(assert (=> d!27211 (arrayContainsKey!0 lt!50274 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!50714 () Unit!2982)

(declare-fun choose!13 (array!4237 (_ BitVec 64) (_ BitVec 32)) Unit!2982)

(assert (=> d!27211 (= lt!50714 (choose!13 lt!50274 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))))))

(assert (=> d!27211 (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000000)))

(assert (=> d!27211 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!50274 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929))) lt!50714)))

(declare-fun bs!4162 () Bool)

(assert (= bs!4162 d!27211))

(assert (=> bs!4162 m!108735))

(assert (=> bs!4162 m!109583))

(assert (=> bs!4162 m!108735))

(declare-fun m!110987 () Bool)

(assert (=> bs!4162 m!110987))

(assert (=> d!26767 d!27211))

(declare-fun b!100352 () Bool)

(declare-fun e!65340 () (_ BitVec 32))

(declare-fun call!10315 () (_ BitVec 32))

(assert (=> b!100352 (= e!65340 (bvadd #b00000000000000000000000000000001 call!10315))))

(declare-fun d!27213 () Bool)

(declare-fun lt!50715 () (_ BitVec 32))

(assert (=> d!27213 (and (bvsge lt!50715 #b00000000000000000000000000000000) (bvsle lt!50715 (bvsub (size!2263 lt!50251) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)))))))

(declare-fun e!65341 () (_ BitVec 32))

(assert (=> d!27213 (= lt!50715 e!65341)))

(declare-fun c!17224 () Bool)

(assert (=> d!27213 (= c!17224 (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (bvadd (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000001)))))

(assert (=> d!27213 (and (bvsle (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (bvadd (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000001)) (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000001) (size!2263 lt!50251)))))

(assert (=> d!27213 (= (arrayCountValidKeys!0 lt!50251 (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (bvadd (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000001)) lt!50715)))

(declare-fun b!100353 () Bool)

(assert (=> b!100353 (= e!65341 #b00000000000000000000000000000000)))

(declare-fun b!100354 () Bool)

(assert (=> b!100354 (= e!65341 e!65340)))

(declare-fun c!17225 () Bool)

(assert (=> b!100354 (= c!17225 (validKeyInArray!0 (select (arr!2012 lt!50251) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)))))))

(declare-fun bm!10312 () Bool)

(assert (=> bm!10312 (= call!10315 (arrayCountValidKeys!0 lt!50251 (bvadd (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000001) (bvadd (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000001)))))

(declare-fun b!100355 () Bool)

(assert (=> b!100355 (= e!65340 call!10315)))

(assert (= (and d!27213 c!17224) b!100353))

(assert (= (and d!27213 (not c!17224)) b!100354))

(assert (= (and b!100354 c!17225) b!100352))

(assert (= (and b!100354 (not c!17225)) b!100355))

(assert (= (or b!100352 b!100355) bm!10312))

(assert (=> b!100354 m!110961))

(assert (=> b!100354 m!110961))

(assert (=> b!100354 m!110963))

(declare-fun m!110989 () Bool)

(assert (=> bm!10312 m!110989))

(assert (=> d!26767 d!27213))

(declare-fun d!27215 () Bool)

(declare-fun res!50339 () Bool)

(declare-fun e!65342 () Bool)

(assert (=> d!27215 (=> res!50339 e!65342)))

(assert (=> d!27215 (= res!50339 (= (select (arr!2012 lt!50274) #b00000000000000000000000000000000) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!27215 (= (arrayContainsKey!0 lt!50274 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000) e!65342)))

(declare-fun b!100356 () Bool)

(declare-fun e!65343 () Bool)

(assert (=> b!100356 (= e!65342 e!65343)))

(declare-fun res!50340 () Bool)

(assert (=> b!100356 (=> (not res!50340) (not e!65343))))

(assert (=> b!100356 (= res!50340 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 lt!50274)))))

(declare-fun b!100357 () Bool)

(assert (=> b!100357 (= e!65343 (arrayContainsKey!0 lt!50274 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!27215 (not res!50339)) b!100356))

(assert (= (and b!100356 res!50340) b!100357))

(declare-fun m!110991 () Bool)

(assert (=> d!27215 m!110991))

(assert (=> b!100357 m!108735))

(declare-fun m!110993 () Bool)

(assert (=> b!100357 m!110993))

(assert (=> d!26767 d!27215))

(assert (=> d!26767 d!26777))

(declare-fun d!27217 () Bool)

(declare-fun e!65346 () Bool)

(assert (=> d!27217 e!65346))

(declare-fun res!50343 () Bool)

(assert (=> d!27217 (=> (not res!50343) (not e!65346))))

(assert (=> d!27217 (= res!50343 (and (bvsge (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) #b00000000000000000000000000000000) (bvslt (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (size!2263 (_keys!4195 newMap!16))) (bvslt (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (size!2264 (_values!2484 newMap!16)))))))

(declare-fun lt!50718 () Unit!2982)

(declare-fun choose!621 (array!4237 array!4239 (_ BitVec 32) (_ BitVec 32) V!3161 V!3161 (_ BitVec 32) (_ BitVec 64) V!3161 Int) Unit!2982)

(assert (=> d!27217 (= lt!50718 (choose!621 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)))))

(assert (=> d!27217 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!27217 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!26 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2501 newMap!16)) lt!50718)))

(declare-fun b!100360 () Bool)

(assert (=> b!100360 (= e!65346 (= (+!131 (getCurrentListMap!456 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!456 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))))))

(assert (= (and d!27217 res!50343) b!100360))

(assert (=> d!27217 m!108735))

(assert (=> d!27217 m!108749))

(declare-fun m!110995 () Bool)

(assert (=> d!27217 m!110995))

(assert (=> d!27217 m!109025))

(assert (=> b!100360 m!108863))

(assert (=> b!100360 m!109281))

(assert (=> b!100360 m!109599))

(assert (=> b!100360 m!108863))

(assert (=> b!100360 m!109577))

(assert (=> b!100360 m!109603))

(assert (=> d!26767 d!27217))

(declare-fun b!100361 () Bool)

(declare-fun e!65352 () ListLongMap!1503)

(declare-fun call!10320 () ListLongMap!1503)

(assert (=> b!100361 (= e!65352 call!10320)))

(declare-fun bm!10313 () Bool)

(declare-fun call!10319 () ListLongMap!1503)

(declare-fun call!10317 () ListLongMap!1503)

(assert (=> bm!10313 (= call!10319 call!10317)))

(declare-fun b!100362 () Bool)

(declare-fun res!50350 () Bool)

(declare-fun e!65355 () Bool)

(assert (=> b!100362 (=> (not res!50350) (not e!65355))))

(declare-fun e!65357 () Bool)

(assert (=> b!100362 (= res!50350 e!65357)))

(declare-fun c!17228 () Bool)

(assert (=> b!100362 (= c!17228 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100363 () Bool)

(declare-fun e!65353 () ListLongMap!1503)

(declare-fun e!65356 () ListLongMap!1503)

(assert (=> b!100363 (= e!65353 e!65356)))

(declare-fun c!17226 () Bool)

(assert (=> b!100363 (= c!17226 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100364 () Bool)

(declare-fun e!65358 () Bool)

(declare-fun lt!50724 () ListLongMap!1503)

(assert (=> b!100364 (= e!65358 (= (apply!93 lt!50724 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun b!100365 () Bool)

(declare-fun call!10316 () ListLongMap!1503)

(assert (=> b!100365 (= e!65352 call!10316)))

(declare-fun b!100366 () Bool)

(declare-fun res!50351 () Bool)

(assert (=> b!100366 (=> (not res!50351) (not e!65355))))

(declare-fun e!65359 () Bool)

(assert (=> b!100366 (= res!50351 e!65359)))

(declare-fun res!50348 () Bool)

(assert (=> b!100366 (=> res!50348 e!65359)))

(declare-fun e!65354 () Bool)

(assert (=> b!100366 (= res!50348 (not e!65354))))

(declare-fun res!50347 () Bool)

(assert (=> b!100366 (=> (not res!50347) (not e!65354))))

(assert (=> b!100366 (= res!50347 (bvslt #b00000000000000000000000000000000 (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun b!100367 () Bool)

(declare-fun e!65350 () Unit!2982)

(declare-fun Unit!3039 () Unit!2982)

(assert (=> b!100367 (= e!65350 Unit!3039)))

(declare-fun b!100368 () Bool)

(declare-fun lt!50726 () Unit!2982)

(assert (=> b!100368 (= e!65350 lt!50726)))

(declare-fun lt!50730 () ListLongMap!1503)

(assert (=> b!100368 (= lt!50730 (getCurrentListMapNoExtraKeys!96 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50733 () (_ BitVec 64))

(assert (=> b!100368 (= lt!50733 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50739 () (_ BitVec 64))

(assert (=> b!100368 (= lt!50739 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50729 () Unit!2982)

(assert (=> b!100368 (= lt!50729 (addStillContains!69 lt!50730 lt!50733 (zeroValue!2382 newMap!16) lt!50739))))

(assert (=> b!100368 (contains!792 (+!131 lt!50730 (tuple2!2309 lt!50733 (zeroValue!2382 newMap!16))) lt!50739)))

(declare-fun lt!50737 () Unit!2982)

(assert (=> b!100368 (= lt!50737 lt!50729)))

(declare-fun lt!50719 () ListLongMap!1503)

(assert (=> b!100368 (= lt!50719 (getCurrentListMapNoExtraKeys!96 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50725 () (_ BitVec 64))

(assert (=> b!100368 (= lt!50725 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50722 () (_ BitVec 64))

(assert (=> b!100368 (= lt!50722 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50734 () Unit!2982)

(assert (=> b!100368 (= lt!50734 (addApplyDifferent!69 lt!50719 lt!50725 (minValue!2382 newMap!16) lt!50722))))

(assert (=> b!100368 (= (apply!93 (+!131 lt!50719 (tuple2!2309 lt!50725 (minValue!2382 newMap!16))) lt!50722) (apply!93 lt!50719 lt!50722))))

(declare-fun lt!50723 () Unit!2982)

(assert (=> b!100368 (= lt!50723 lt!50734)))

(declare-fun lt!50736 () ListLongMap!1503)

(assert (=> b!100368 (= lt!50736 (getCurrentListMapNoExtraKeys!96 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50740 () (_ BitVec 64))

(assert (=> b!100368 (= lt!50740 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50727 () (_ BitVec 64))

(assert (=> b!100368 (= lt!50727 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50721 () Unit!2982)

(assert (=> b!100368 (= lt!50721 (addApplyDifferent!69 lt!50736 lt!50740 (zeroValue!2382 newMap!16) lt!50727))))

(assert (=> b!100368 (= (apply!93 (+!131 lt!50736 (tuple2!2309 lt!50740 (zeroValue!2382 newMap!16))) lt!50727) (apply!93 lt!50736 lt!50727))))

(declare-fun lt!50731 () Unit!2982)

(assert (=> b!100368 (= lt!50731 lt!50721)))

(declare-fun lt!50735 () ListLongMap!1503)

(assert (=> b!100368 (= lt!50735 (getCurrentListMapNoExtraKeys!96 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50738 () (_ BitVec 64))

(assert (=> b!100368 (= lt!50738 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50720 () (_ BitVec 64))

(assert (=> b!100368 (= lt!50720 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!100368 (= lt!50726 (addApplyDifferent!69 lt!50735 lt!50738 (minValue!2382 newMap!16) lt!50720))))

(assert (=> b!100368 (= (apply!93 (+!131 lt!50735 (tuple2!2309 lt!50738 (minValue!2382 newMap!16))) lt!50720) (apply!93 lt!50735 lt!50720))))

(declare-fun b!100369 () Bool)

(declare-fun e!65348 () Bool)

(assert (=> b!100369 (= e!65348 (= (apply!93 lt!50724 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100369 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))))))))

(assert (=> b!100369 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun b!100370 () Bool)

(assert (=> b!100370 (= e!65359 e!65348)))

(declare-fun res!50344 () Bool)

(assert (=> b!100370 (=> (not res!50344) (not e!65348))))

(assert (=> b!100370 (= res!50344 (contains!792 lt!50724 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!100370 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))))

(declare-fun b!100371 () Bool)

(declare-fun e!65347 () Bool)

(assert (=> b!100371 (= e!65347 e!65358)))

(declare-fun res!50352 () Bool)

(declare-fun call!10322 () Bool)

(assert (=> b!100371 (= res!50352 call!10322)))

(assert (=> b!100371 (=> (not res!50352) (not e!65358))))

(declare-fun b!100372 () Bool)

(assert (=> b!100372 (= e!65354 (validKeyInArray!0 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!100373 () Bool)

(assert (=> b!100373 (= e!65356 call!10320)))

(declare-fun b!100374 () Bool)

(declare-fun call!10318 () ListLongMap!1503)

(assert (=> b!100374 (= e!65353 (+!131 call!10318 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!100375 () Bool)

(declare-fun call!10321 () Bool)

(assert (=> b!100375 (= e!65357 (not call!10321))))

(declare-fun b!100376 () Bool)

(declare-fun e!65349 () Bool)

(assert (=> b!100376 (= e!65349 (validKeyInArray!0 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10314 () Bool)

(declare-fun c!17230 () Bool)

(assert (=> bm!10314 (= call!10318 (+!131 (ite c!17230 call!10317 (ite c!17226 call!10319 call!10316)) (ite (or c!17230 c!17226) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun bm!10315 () Bool)

(assert (=> bm!10315 (= call!10320 call!10318)))

(declare-fun b!100377 () Bool)

(declare-fun e!65351 () Bool)

(assert (=> b!100377 (= e!65357 e!65351)))

(declare-fun res!50346 () Bool)

(assert (=> b!100377 (= res!50346 call!10321)))

(assert (=> b!100377 (=> (not res!50346) (not e!65351))))

(declare-fun b!100378 () Bool)

(declare-fun c!17231 () Bool)

(assert (=> b!100378 (= c!17231 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!100378 (= e!65356 e!65352)))

(declare-fun b!100379 () Bool)

(assert (=> b!100379 (= e!65355 e!65347)))

(declare-fun c!17227 () Bool)

(assert (=> b!100379 (= c!17227 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10316 () Bool)

(assert (=> bm!10316 (= call!10322 (contains!792 lt!50724 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10317 () Bool)

(assert (=> bm!10317 (= call!10316 call!10319)))

(declare-fun bm!10318 () Bool)

(assert (=> bm!10318 (= call!10321 (contains!792 lt!50724 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100380 () Bool)

(assert (=> b!100380 (= e!65347 (not call!10322))))

(declare-fun b!100381 () Bool)

(assert (=> b!100381 (= e!65351 (= (apply!93 lt!50724 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun d!27219 () Bool)

(assert (=> d!27219 e!65355))

(declare-fun res!50349 () Bool)

(assert (=> d!27219 (=> (not res!50349) (not e!65355))))

(assert (=> d!27219 (= res!50349 (or (bvsge #b00000000000000000000000000000000 (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))))))

(declare-fun lt!50728 () ListLongMap!1503)

(assert (=> d!27219 (= lt!50724 lt!50728)))

(declare-fun lt!50732 () Unit!2982)

(assert (=> d!27219 (= lt!50732 e!65350)))

(declare-fun c!17229 () Bool)

(assert (=> d!27219 (= c!17229 e!65349)))

(declare-fun res!50345 () Bool)

(assert (=> d!27219 (=> (not res!50345) (not e!65349))))

(assert (=> d!27219 (= res!50345 (bvslt #b00000000000000000000000000000000 (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))))

(assert (=> d!27219 (= lt!50728 e!65353)))

(assert (=> d!27219 (= c!17230 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27219 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!27219 (= (getCurrentListMap!456 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50724)))

(declare-fun bm!10319 () Bool)

(assert (=> bm!10319 (= call!10317 (getCurrentListMapNoExtraKeys!96 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (array!4240 (store (arr!2013 (_values!2484 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (ValueCellFull!974 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2264 (_values!2484 newMap!16))) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (= (and d!27219 c!17230) b!100374))

(assert (= (and d!27219 (not c!17230)) b!100363))

(assert (= (and b!100363 c!17226) b!100373))

(assert (= (and b!100363 (not c!17226)) b!100378))

(assert (= (and b!100378 c!17231) b!100361))

(assert (= (and b!100378 (not c!17231)) b!100365))

(assert (= (or b!100361 b!100365) bm!10317))

(assert (= (or b!100373 bm!10317) bm!10313))

(assert (= (or b!100373 b!100361) bm!10315))

(assert (= (or b!100374 bm!10313) bm!10319))

(assert (= (or b!100374 bm!10315) bm!10314))

(assert (= (and d!27219 res!50345) b!100376))

(assert (= (and d!27219 c!17229) b!100368))

(assert (= (and d!27219 (not c!17229)) b!100367))

(assert (= (and d!27219 res!50349) b!100366))

(assert (= (and b!100366 res!50347) b!100372))

(assert (= (and b!100366 (not res!50348)) b!100370))

(assert (= (and b!100370 res!50344) b!100369))

(assert (= (and b!100366 res!50351) b!100362))

(assert (= (and b!100362 c!17228) b!100377))

(assert (= (and b!100362 (not c!17228)) b!100375))

(assert (= (and b!100377 res!50346) b!100381))

(assert (= (or b!100377 b!100375) bm!10318))

(assert (= (and b!100362 res!50350) b!100379))

(assert (= (and b!100379 c!17227) b!100371))

(assert (= (and b!100379 (not c!17227)) b!100380))

(assert (= (and b!100371 res!50352) b!100364))

(assert (= (or b!100371 b!100380) bm!10316))

(declare-fun b_lambda!4479 () Bool)

(assert (=> (not b_lambda!4479) (not b!100369)))

(assert (=> b!100369 t!5546))

(declare-fun b_and!6181 () Bool)

(assert (= b_and!6177 (and (=> t!5546 result!3299) b_and!6181)))

(assert (=> b!100369 t!5548))

(declare-fun b_and!6183 () Bool)

(assert (= b_and!6179 (and (=> t!5548 result!3301) b_and!6183)))

(declare-fun m!110997 () Bool)

(assert (=> b!100368 m!110997))

(declare-fun m!110999 () Bool)

(assert (=> b!100368 m!110999))

(declare-fun m!111001 () Bool)

(assert (=> b!100368 m!111001))

(declare-fun m!111003 () Bool)

(assert (=> b!100368 m!111003))

(declare-fun m!111005 () Bool)

(assert (=> b!100368 m!111005))

(declare-fun m!111007 () Bool)

(assert (=> b!100368 m!111007))

(declare-fun m!111009 () Bool)

(assert (=> b!100368 m!111009))

(declare-fun m!111011 () Bool)

(assert (=> b!100368 m!111011))

(declare-fun m!111013 () Bool)

(assert (=> b!100368 m!111013))

(assert (=> b!100368 m!110997))

(declare-fun m!111015 () Bool)

(assert (=> b!100368 m!111015))

(declare-fun m!111017 () Bool)

(assert (=> b!100368 m!111017))

(declare-fun m!111019 () Bool)

(assert (=> b!100368 m!111019))

(assert (=> b!100368 m!110999))

(declare-fun m!111021 () Bool)

(assert (=> b!100368 m!111021))

(assert (=> b!100368 m!111003))

(assert (=> b!100368 m!111009))

(declare-fun m!111023 () Bool)

(assert (=> b!100368 m!111023))

(declare-fun m!111025 () Bool)

(assert (=> b!100368 m!111025))

(declare-fun m!111027 () Bool)

(assert (=> b!100368 m!111027))

(declare-fun m!111029 () Bool)

(assert (=> b!100368 m!111029))

(assert (=> d!27219 m!109025))

(assert (=> bm!10319 m!111017))

(declare-fun m!111031 () Bool)

(assert (=> bm!10316 m!111031))

(assert (=> b!100372 m!111007))

(assert (=> b!100372 m!111007))

(declare-fun m!111033 () Bool)

(assert (=> b!100372 m!111033))

(declare-fun m!111035 () Bool)

(assert (=> b!100381 m!111035))

(declare-fun m!111037 () Bool)

(assert (=> bm!10314 m!111037))

(declare-fun m!111039 () Bool)

(assert (=> bm!10318 m!111039))

(declare-fun m!111041 () Bool)

(assert (=> b!100374 m!111041))

(assert (=> b!100376 m!111007))

(assert (=> b!100376 m!111007))

(assert (=> b!100376 m!111033))

(assert (=> b!100370 m!111007))

(assert (=> b!100370 m!111007))

(declare-fun m!111043 () Bool)

(assert (=> b!100370 m!111043))

(assert (=> b!100369 m!111007))

(declare-fun m!111045 () Bool)

(assert (=> b!100369 m!111045))

(declare-fun m!111047 () Bool)

(assert (=> b!100369 m!111047))

(assert (=> b!100369 m!109123))

(assert (=> b!100369 m!111047))

(assert (=> b!100369 m!109123))

(declare-fun m!111049 () Bool)

(assert (=> b!100369 m!111049))

(assert (=> b!100369 m!111007))

(declare-fun m!111051 () Bool)

(assert (=> b!100364 m!111051))

(assert (=> d!26767 d!27219))

(declare-fun b!100382 () Bool)

(declare-fun e!65360 () Bool)

(declare-fun e!65361 () Bool)

(assert (=> b!100382 (= e!65360 e!65361)))

(declare-fun c!17232 () Bool)

(assert (=> b!100382 (= c!17232 (validKeyInArray!0 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) lt!50259)))))

(declare-fun call!10323 () Bool)

(declare-fun bm!10320 () Bool)

(assert (=> bm!10320 (= call!10323 (arrayNoDuplicates!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (bvadd lt!50259 #b00000000000000000000000000000001) (ite c!17232 (Cons!1565 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) lt!50259) lt!50258) lt!50258)))))

(declare-fun d!27221 () Bool)

(declare-fun res!50355 () Bool)

(declare-fun e!65362 () Bool)

(assert (=> d!27221 (=> res!50355 e!65362)))

(assert (=> d!27221 (= res!50355 (bvsge lt!50259 (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))))

(assert (=> d!27221 (= (arrayNoDuplicates!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) lt!50259 lt!50258) e!65362)))

(declare-fun b!100383 () Bool)

(assert (=> b!100383 (= e!65361 call!10323)))

(declare-fun b!100384 () Bool)

(assert (=> b!100384 (= e!65362 e!65360)))

(declare-fun res!50354 () Bool)

(assert (=> b!100384 (=> (not res!50354) (not e!65360))))

(declare-fun e!65363 () Bool)

(assert (=> b!100384 (= res!50354 (not e!65363))))

(declare-fun res!50353 () Bool)

(assert (=> b!100384 (=> (not res!50353) (not e!65363))))

(assert (=> b!100384 (= res!50353 (validKeyInArray!0 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) lt!50259)))))

(declare-fun b!100385 () Bool)

(assert (=> b!100385 (= e!65361 call!10323)))

(declare-fun b!100386 () Bool)

(assert (=> b!100386 (= e!65363 (contains!794 lt!50258 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) lt!50259)))))

(assert (= (and d!27221 (not res!50355)) b!100384))

(assert (= (and b!100384 res!50353) b!100386))

(assert (= (and b!100384 res!50354) b!100382))

(assert (= (and b!100382 c!17232) b!100385))

(assert (= (and b!100382 (not c!17232)) b!100383))

(assert (= (or b!100385 b!100383) bm!10320))

(declare-fun m!111053 () Bool)

(assert (=> b!100382 m!111053))

(assert (=> b!100382 m!111053))

(declare-fun m!111055 () Bool)

(assert (=> b!100382 m!111055))

(assert (=> bm!10320 m!111053))

(declare-fun m!111057 () Bool)

(assert (=> bm!10320 m!111057))

(assert (=> b!100384 m!111053))

(assert (=> b!100384 m!111053))

(assert (=> b!100384 m!111055))

(assert (=> b!100386 m!111053))

(assert (=> b!100386 m!111053))

(declare-fun m!111059 () Bool)

(assert (=> b!100386 m!111059))

(assert (=> d!26767 d!27221))

(declare-fun b!100387 () Bool)

(declare-fun e!65369 () ListLongMap!1503)

(declare-fun call!10328 () ListLongMap!1503)

(assert (=> b!100387 (= e!65369 call!10328)))

(declare-fun bm!10321 () Bool)

(declare-fun call!10327 () ListLongMap!1503)

(declare-fun call!10325 () ListLongMap!1503)

(assert (=> bm!10321 (= call!10327 call!10325)))

(declare-fun b!100388 () Bool)

(declare-fun res!50362 () Bool)

(declare-fun e!65372 () Bool)

(assert (=> b!100388 (=> (not res!50362) (not e!65372))))

(declare-fun e!65374 () Bool)

(assert (=> b!100388 (= res!50362 e!65374)))

(declare-fun c!17235 () Bool)

(assert (=> b!100388 (= c!17235 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100389 () Bool)

(declare-fun e!65370 () ListLongMap!1503)

(declare-fun e!65373 () ListLongMap!1503)

(assert (=> b!100389 (= e!65370 e!65373)))

(declare-fun c!17233 () Bool)

(assert (=> b!100389 (= c!17233 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100390 () Bool)

(declare-fun e!65375 () Bool)

(declare-fun lt!50746 () ListLongMap!1503)

(assert (=> b!100390 (= e!65375 (= (apply!93 lt!50746 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2382 newMap!16)))))

(declare-fun b!100391 () Bool)

(declare-fun call!10324 () ListLongMap!1503)

(assert (=> b!100391 (= e!65369 call!10324)))

(declare-fun b!100392 () Bool)

(declare-fun res!50363 () Bool)

(assert (=> b!100392 (=> (not res!50363) (not e!65372))))

(declare-fun e!65376 () Bool)

(assert (=> b!100392 (= res!50363 e!65376)))

(declare-fun res!50360 () Bool)

(assert (=> b!100392 (=> res!50360 e!65376)))

(declare-fun e!65371 () Bool)

(assert (=> b!100392 (= res!50360 (not e!65371))))

(declare-fun res!50359 () Bool)

(assert (=> b!100392 (=> (not res!50359) (not e!65371))))

(assert (=> b!100392 (= res!50359 (bvslt #b00000000000000000000000000000000 (size!2263 lt!50252)))))

(declare-fun b!100393 () Bool)

(declare-fun e!65367 () Unit!2982)

(declare-fun Unit!3040 () Unit!2982)

(assert (=> b!100393 (= e!65367 Unit!3040)))

(declare-fun b!100394 () Bool)

(declare-fun lt!50748 () Unit!2982)

(assert (=> b!100394 (= e!65367 lt!50748)))

(declare-fun lt!50752 () ListLongMap!1503)

(assert (=> b!100394 (= lt!50752 (getCurrentListMapNoExtraKeys!96 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50755 () (_ BitVec 64))

(assert (=> b!100394 (= lt!50755 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50761 () (_ BitVec 64))

(assert (=> b!100394 (= lt!50761 (select (arr!2012 lt!50252) #b00000000000000000000000000000000))))

(declare-fun lt!50751 () Unit!2982)

(assert (=> b!100394 (= lt!50751 (addStillContains!69 lt!50752 lt!50755 (zeroValue!2382 newMap!16) lt!50761))))

(assert (=> b!100394 (contains!792 (+!131 lt!50752 (tuple2!2309 lt!50755 (zeroValue!2382 newMap!16))) lt!50761)))

(declare-fun lt!50759 () Unit!2982)

(assert (=> b!100394 (= lt!50759 lt!50751)))

(declare-fun lt!50741 () ListLongMap!1503)

(assert (=> b!100394 (= lt!50741 (getCurrentListMapNoExtraKeys!96 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50747 () (_ BitVec 64))

(assert (=> b!100394 (= lt!50747 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50744 () (_ BitVec 64))

(assert (=> b!100394 (= lt!50744 (select (arr!2012 lt!50252) #b00000000000000000000000000000000))))

(declare-fun lt!50756 () Unit!2982)

(assert (=> b!100394 (= lt!50756 (addApplyDifferent!69 lt!50741 lt!50747 (minValue!2382 newMap!16) lt!50744))))

(assert (=> b!100394 (= (apply!93 (+!131 lt!50741 (tuple2!2309 lt!50747 (minValue!2382 newMap!16))) lt!50744) (apply!93 lt!50741 lt!50744))))

(declare-fun lt!50745 () Unit!2982)

(assert (=> b!100394 (= lt!50745 lt!50756)))

(declare-fun lt!50758 () ListLongMap!1503)

(assert (=> b!100394 (= lt!50758 (getCurrentListMapNoExtraKeys!96 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50762 () (_ BitVec 64))

(assert (=> b!100394 (= lt!50762 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50749 () (_ BitVec 64))

(assert (=> b!100394 (= lt!50749 (select (arr!2012 lt!50252) #b00000000000000000000000000000000))))

(declare-fun lt!50743 () Unit!2982)

(assert (=> b!100394 (= lt!50743 (addApplyDifferent!69 lt!50758 lt!50762 (zeroValue!2382 newMap!16) lt!50749))))

(assert (=> b!100394 (= (apply!93 (+!131 lt!50758 (tuple2!2309 lt!50762 (zeroValue!2382 newMap!16))) lt!50749) (apply!93 lt!50758 lt!50749))))

(declare-fun lt!50753 () Unit!2982)

(assert (=> b!100394 (= lt!50753 lt!50743)))

(declare-fun lt!50757 () ListLongMap!1503)

(assert (=> b!100394 (= lt!50757 (getCurrentListMapNoExtraKeys!96 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(declare-fun lt!50760 () (_ BitVec 64))

(assert (=> b!100394 (= lt!50760 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50742 () (_ BitVec 64))

(assert (=> b!100394 (= lt!50742 (select (arr!2012 lt!50252) #b00000000000000000000000000000000))))

(assert (=> b!100394 (= lt!50748 (addApplyDifferent!69 lt!50757 lt!50760 (minValue!2382 newMap!16) lt!50742))))

(assert (=> b!100394 (= (apply!93 (+!131 lt!50757 (tuple2!2309 lt!50760 (minValue!2382 newMap!16))) lt!50742) (apply!93 lt!50757 lt!50742))))

(declare-fun b!100395 () Bool)

(declare-fun e!65365 () Bool)

(assert (=> b!100395 (= e!65365 (= (apply!93 lt!50746 (select (arr!2012 lt!50252) #b00000000000000000000000000000000)) (get!1295 (select (arr!2013 lt!50275) #b00000000000000000000000000000000) (dynLambda!372 (defaultEntry!2501 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100395 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 lt!50275)))))

(assert (=> b!100395 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 lt!50252)))))

(declare-fun b!100396 () Bool)

(assert (=> b!100396 (= e!65376 e!65365)))

(declare-fun res!50356 () Bool)

(assert (=> b!100396 (=> (not res!50356) (not e!65365))))

(assert (=> b!100396 (= res!50356 (contains!792 lt!50746 (select (arr!2012 lt!50252) #b00000000000000000000000000000000)))))

(assert (=> b!100396 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 lt!50252)))))

(declare-fun b!100397 () Bool)

(declare-fun e!65364 () Bool)

(assert (=> b!100397 (= e!65364 e!65375)))

(declare-fun res!50364 () Bool)

(declare-fun call!10330 () Bool)

(assert (=> b!100397 (= res!50364 call!10330)))

(assert (=> b!100397 (=> (not res!50364) (not e!65375))))

(declare-fun b!100398 () Bool)

(assert (=> b!100398 (= e!65371 (validKeyInArray!0 (select (arr!2012 lt!50252) #b00000000000000000000000000000000)))))

(declare-fun b!100399 () Bool)

(assert (=> b!100399 (= e!65373 call!10328)))

(declare-fun b!100400 () Bool)

(declare-fun call!10326 () ListLongMap!1503)

(assert (=> b!100400 (= e!65370 (+!131 call!10326 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(declare-fun b!100401 () Bool)

(declare-fun call!10329 () Bool)

(assert (=> b!100401 (= e!65374 (not call!10329))))

(declare-fun b!100402 () Bool)

(declare-fun e!65366 () Bool)

(assert (=> b!100402 (= e!65366 (validKeyInArray!0 (select (arr!2012 lt!50252) #b00000000000000000000000000000000)))))

(declare-fun c!17237 () Bool)

(declare-fun bm!10322 () Bool)

(assert (=> bm!10322 (= call!10326 (+!131 (ite c!17237 call!10325 (ite c!17233 call!10327 call!10324)) (ite (or c!17237 c!17233) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun bm!10323 () Bool)

(assert (=> bm!10323 (= call!10328 call!10326)))

(declare-fun b!100403 () Bool)

(declare-fun e!65368 () Bool)

(assert (=> b!100403 (= e!65374 e!65368)))

(declare-fun res!50358 () Bool)

(assert (=> b!100403 (= res!50358 call!10329)))

(assert (=> b!100403 (=> (not res!50358) (not e!65368))))

(declare-fun b!100404 () Bool)

(declare-fun c!17238 () Bool)

(assert (=> b!100404 (= c!17238 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!100404 (= e!65373 e!65369)))

(declare-fun b!100405 () Bool)

(assert (=> b!100405 (= e!65372 e!65364)))

(declare-fun c!17234 () Bool)

(assert (=> b!100405 (= c!17234 (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10324 () Bool)

(assert (=> bm!10324 (= call!10330 (contains!792 lt!50746 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10325 () Bool)

(assert (=> bm!10325 (= call!10324 call!10327)))

(declare-fun bm!10326 () Bool)

(assert (=> bm!10326 (= call!10329 (contains!792 lt!50746 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100406 () Bool)

(assert (=> b!100406 (= e!65364 (not call!10330))))

(declare-fun b!100407 () Bool)

(assert (=> b!100407 (= e!65368 (= (apply!93 lt!50746 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2382 newMap!16)))))

(declare-fun d!27223 () Bool)

(assert (=> d!27223 e!65372))

(declare-fun res!50361 () Bool)

(assert (=> d!27223 (=> (not res!50361) (not e!65372))))

(assert (=> d!27223 (= res!50361 (or (bvsge #b00000000000000000000000000000000 (size!2263 lt!50252)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2263 lt!50252)))))))

(declare-fun lt!50750 () ListLongMap!1503)

(assert (=> d!27223 (= lt!50746 lt!50750)))

(declare-fun lt!50754 () Unit!2982)

(assert (=> d!27223 (= lt!50754 e!65367)))

(declare-fun c!17236 () Bool)

(assert (=> d!27223 (= c!17236 e!65366)))

(declare-fun res!50357 () Bool)

(assert (=> d!27223 (=> (not res!50357) (not e!65366))))

(assert (=> d!27223 (= res!50357 (bvslt #b00000000000000000000000000000000 (size!2263 lt!50252)))))

(assert (=> d!27223 (= lt!50750 e!65370)))

(assert (=> d!27223 (= c!17237 (and (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2318 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27223 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!27223 (= (getCurrentListMap!456 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) lt!50746)))

(declare-fun bm!10327 () Bool)

(assert (=> bm!10327 (= call!10325 (getCurrentListMapNoExtraKeys!96 lt!50252 lt!50275 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)))))

(assert (= (and d!27223 c!17237) b!100400))

(assert (= (and d!27223 (not c!17237)) b!100389))

(assert (= (and b!100389 c!17233) b!100399))

(assert (= (and b!100389 (not c!17233)) b!100404))

(assert (= (and b!100404 c!17238) b!100387))

(assert (= (and b!100404 (not c!17238)) b!100391))

(assert (= (or b!100387 b!100391) bm!10325))

(assert (= (or b!100399 bm!10325) bm!10321))

(assert (= (or b!100399 b!100387) bm!10323))

(assert (= (or b!100400 bm!10321) bm!10327))

(assert (= (or b!100400 bm!10323) bm!10322))

(assert (= (and d!27223 res!50357) b!100402))

(assert (= (and d!27223 c!17236) b!100394))

(assert (= (and d!27223 (not c!17236)) b!100393))

(assert (= (and d!27223 res!50361) b!100392))

(assert (= (and b!100392 res!50359) b!100398))

(assert (= (and b!100392 (not res!50360)) b!100396))

(assert (= (and b!100396 res!50356) b!100395))

(assert (= (and b!100392 res!50363) b!100388))

(assert (= (and b!100388 c!17235) b!100403))

(assert (= (and b!100388 (not c!17235)) b!100401))

(assert (= (and b!100403 res!50358) b!100407))

(assert (= (or b!100403 b!100401) bm!10326))

(assert (= (and b!100388 res!50362) b!100405))

(assert (= (and b!100405 c!17234) b!100397))

(assert (= (and b!100405 (not c!17234)) b!100406))

(assert (= (and b!100397 res!50364) b!100390))

(assert (= (or b!100397 b!100406) bm!10324))

(declare-fun b_lambda!4481 () Bool)

(assert (=> (not b_lambda!4481) (not b!100395)))

(assert (=> b!100395 t!5546))

(declare-fun b_and!6185 () Bool)

(assert (= b_and!6181 (and (=> t!5546 result!3299) b_and!6185)))

(assert (=> b!100395 t!5548))

(declare-fun b_and!6187 () Bool)

(assert (= b_and!6183 (and (=> t!5548 result!3301) b_and!6187)))

(declare-fun m!111061 () Bool)

(assert (=> b!100394 m!111061))

(declare-fun m!111063 () Bool)

(assert (=> b!100394 m!111063))

(declare-fun m!111065 () Bool)

(assert (=> b!100394 m!111065))

(declare-fun m!111067 () Bool)

(assert (=> b!100394 m!111067))

(declare-fun m!111069 () Bool)

(assert (=> b!100394 m!111069))

(declare-fun m!111071 () Bool)

(assert (=> b!100394 m!111071))

(declare-fun m!111073 () Bool)

(assert (=> b!100394 m!111073))

(declare-fun m!111075 () Bool)

(assert (=> b!100394 m!111075))

(declare-fun m!111077 () Bool)

(assert (=> b!100394 m!111077))

(assert (=> b!100394 m!111061))

(declare-fun m!111079 () Bool)

(assert (=> b!100394 m!111079))

(declare-fun m!111081 () Bool)

(assert (=> b!100394 m!111081))

(declare-fun m!111083 () Bool)

(assert (=> b!100394 m!111083))

(assert (=> b!100394 m!111063))

(declare-fun m!111085 () Bool)

(assert (=> b!100394 m!111085))

(assert (=> b!100394 m!111067))

(assert (=> b!100394 m!111073))

(declare-fun m!111087 () Bool)

(assert (=> b!100394 m!111087))

(declare-fun m!111089 () Bool)

(assert (=> b!100394 m!111089))

(declare-fun m!111091 () Bool)

(assert (=> b!100394 m!111091))

(declare-fun m!111093 () Bool)

(assert (=> b!100394 m!111093))

(assert (=> d!27223 m!109025))

(assert (=> bm!10327 m!111081))

(declare-fun m!111095 () Bool)

(assert (=> bm!10324 m!111095))

(assert (=> b!100398 m!111071))

(assert (=> b!100398 m!111071))

(declare-fun m!111097 () Bool)

(assert (=> b!100398 m!111097))

(declare-fun m!111099 () Bool)

(assert (=> b!100407 m!111099))

(declare-fun m!111101 () Bool)

(assert (=> bm!10322 m!111101))

(declare-fun m!111103 () Bool)

(assert (=> bm!10326 m!111103))

(declare-fun m!111105 () Bool)

(assert (=> b!100400 m!111105))

(assert (=> b!100402 m!111071))

(assert (=> b!100402 m!111071))

(assert (=> b!100402 m!111097))

(assert (=> b!100396 m!111071))

(assert (=> b!100396 m!111071))

(declare-fun m!111107 () Bool)

(assert (=> b!100396 m!111107))

(assert (=> b!100395 m!111071))

(declare-fun m!111109 () Bool)

(assert (=> b!100395 m!111109))

(declare-fun m!111111 () Bool)

(assert (=> b!100395 m!111111))

(assert (=> b!100395 m!109123))

(assert (=> b!100395 m!111111))

(assert (=> b!100395 m!109123))

(declare-fun m!111113 () Bool)

(assert (=> b!100395 m!111113))

(assert (=> b!100395 m!111071))

(declare-fun m!111115 () Bool)

(assert (=> b!100390 m!111115))

(assert (=> d!26767 d!27223))

(assert (=> d!26767 d!26621))

(declare-fun b!100408 () Bool)

(declare-fun e!65377 () (_ BitVec 32))

(declare-fun call!10331 () (_ BitVec 32))

(assert (=> b!100408 (= e!65377 (bvadd #b00000000000000000000000000000001 call!10331))))

(declare-fun lt!50763 () (_ BitVec 32))

(declare-fun d!27225 () Bool)

(assert (=> d!27225 (and (bvsge lt!50763 #b00000000000000000000000000000000) (bvsle lt!50763 (bvsub (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!65378 () (_ BitVec 32))

(assert (=> d!27225 (= lt!50763 e!65378)))

(declare-fun c!17239 () Bool)

(assert (=> d!27225 (= c!17239 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))))))

(assert (=> d!27225 (and (bvsle #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2263 (_keys!4195 newMap!16)) (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))))

(assert (=> d!27225 (= (arrayCountValidKeys!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) #b00000000000000000000000000000000 (size!2263 (_keys!4195 newMap!16))) lt!50763)))

(declare-fun b!100409 () Bool)

(assert (=> b!100409 (= e!65378 #b00000000000000000000000000000000)))

(declare-fun b!100410 () Bool)

(assert (=> b!100410 (= e!65378 e!65377)))

(declare-fun c!17240 () Bool)

(assert (=> b!100410 (= c!17240 (validKeyInArray!0 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10328 () Bool)

(assert (=> bm!10328 (= call!10331 (arrayCountValidKeys!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100411 () Bool)

(assert (=> b!100411 (= e!65377 call!10331)))

(assert (= (and d!27225 c!17239) b!100409))

(assert (= (and d!27225 (not c!17239)) b!100410))

(assert (= (and b!100410 c!17240) b!100408))

(assert (= (and b!100410 (not c!17240)) b!100411))

(assert (= (or b!100408 b!100411) bm!10328))

(assert (=> b!100410 m!111007))

(assert (=> b!100410 m!111007))

(assert (=> b!100410 m!111033))

(declare-fun m!111117 () Bool)

(assert (=> bm!10328 m!111117))

(assert (=> d!26767 d!27225))

(declare-fun b!100412 () Bool)

(declare-fun e!65381 () Bool)

(declare-fun call!10332 () Bool)

(assert (=> b!100412 (= e!65381 call!10332)))

(declare-fun b!100413 () Bool)

(declare-fun e!65380 () Bool)

(assert (=> b!100413 (= e!65380 e!65381)))

(declare-fun lt!50766 () (_ BitVec 64))

(assert (=> b!100413 (= lt!50766 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50765 () Unit!2982)

(assert (=> b!100413 (= lt!50765 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) lt!50766 #b00000000000000000000000000000000))))

(assert (=> b!100413 (arrayContainsKey!0 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) lt!50766 #b00000000000000000000000000000000)))

(declare-fun lt!50764 () Unit!2982)

(assert (=> b!100413 (= lt!50764 lt!50765)))

(declare-fun res!50366 () Bool)

(assert (=> b!100413 (= res!50366 (= (seekEntryOrOpen!0 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000) (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (mask!6608 newMap!16)) (Found!248 #b00000000000000000000000000000000)))))

(assert (=> b!100413 (=> (not res!50366) (not e!65381))))

(declare-fun d!27227 () Bool)

(declare-fun res!50365 () Bool)

(declare-fun e!65379 () Bool)

(assert (=> d!27227 (=> res!50365 e!65379)))

(assert (=> d!27227 (= res!50365 (bvsge #b00000000000000000000000000000000 (size!2263 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))))))))

(assert (=> d!27227 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (mask!6608 newMap!16)) e!65379)))

(declare-fun b!100414 () Bool)

(assert (=> b!100414 (= e!65380 call!10332)))

(declare-fun b!100415 () Bool)

(assert (=> b!100415 (= e!65379 e!65380)))

(declare-fun c!17241 () Bool)

(assert (=> b!100415 (= c!17241 (validKeyInArray!0 (select (arr!2012 (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10329 () Bool)

(assert (=> bm!10329 (= call!10332 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4238 (store (arr!2012 (_keys!4195 newMap!16)) (ite c!16923 (index!3139 lt!49929) (index!3136 lt!49929)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) (size!2263 (_keys!4195 newMap!16))) (mask!6608 newMap!16)))))

(assert (= (and d!27227 (not res!50365)) b!100415))

(assert (= (and b!100415 c!17241) b!100413))

(assert (= (and b!100415 (not c!17241)) b!100414))

(assert (= (and b!100413 res!50366) b!100412))

(assert (= (or b!100412 b!100414) bm!10329))

(assert (=> b!100413 m!111007))

(declare-fun m!111119 () Bool)

(assert (=> b!100413 m!111119))

(declare-fun m!111121 () Bool)

(assert (=> b!100413 m!111121))

(assert (=> b!100413 m!111007))

(declare-fun m!111123 () Bool)

(assert (=> b!100413 m!111123))

(assert (=> b!100415 m!111007))

(assert (=> b!100415 m!111007))

(assert (=> b!100415 m!111033))

(declare-fun m!111125 () Bool)

(assert (=> bm!10329 m!111125))

(assert (=> d!26767 d!27227))

(assert (=> b!99589 d!27101))

(declare-fun d!27229 () Bool)

(declare-fun res!50367 () Bool)

(declare-fun e!65382 () Bool)

(assert (=> d!27229 (=> res!50367 e!65382)))

(assert (=> d!27229 (= res!50367 (= (select (arr!2012 (_keys!4195 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!27229 (= (arrayContainsKey!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!65382)))

(declare-fun b!100416 () Bool)

(declare-fun e!65383 () Bool)

(assert (=> b!100416 (= e!65382 e!65383)))

(declare-fun res!50368 () Bool)

(assert (=> b!100416 (=> (not res!50368) (not e!65383))))

(assert (=> b!100416 (= res!50368 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100417 () Bool)

(assert (=> b!100417 (= e!65383 (arrayContainsKey!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!27229 (not res!50367)) b!100416))

(assert (= (and b!100416 res!50368) b!100417))

(assert (=> d!27229 m!110269))

(assert (=> b!100417 m!108735))

(declare-fun m!111127 () Bool)

(assert (=> b!100417 m!111127))

(assert (=> b!99504 d!27229))

(declare-fun b!100421 () Bool)

(declare-fun e!65385 () Option!158)

(assert (=> b!100421 (= e!65385 None!156)))

(declare-fun b!100419 () Bool)

(declare-fun e!65384 () Option!158)

(assert (=> b!100419 (= e!65384 e!65385)))

(declare-fun c!17243 () Bool)

(assert (=> b!100419 (= c!17243 (and ((_ is Cons!1564) (toList!767 lt!50108)) (not (= (_1!1165 (h!2159 (toList!767 lt!50108))) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!100418 () Bool)

(assert (=> b!100418 (= e!65384 (Some!157 (_2!1165 (h!2159 (toList!767 lt!50108)))))))

(declare-fun c!17242 () Bool)

(declare-fun d!27231 () Bool)

(assert (=> d!27231 (= c!17242 (and ((_ is Cons!1564) (toList!767 lt!50108)) (= (_1!1165 (h!2159 (toList!767 lt!50108))) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!27231 (= (getValueByKey!152 (toList!767 lt!50108) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!65384)))

(declare-fun b!100420 () Bool)

(assert (=> b!100420 (= e!65385 (getValueByKey!152 (t!5534 (toList!767 lt!50108)) (_1!1165 (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!27231 c!17242) b!100418))

(assert (= (and d!27231 (not c!17242)) b!100419))

(assert (= (and b!100419 c!17243) b!100420))

(assert (= (and b!100419 (not c!17243)) b!100421))

(declare-fun m!111129 () Bool)

(assert (=> b!100420 m!111129))

(assert (=> b!99501 d!27231))

(declare-fun d!27233 () Bool)

(declare-fun res!50369 () Bool)

(declare-fun e!65386 () Bool)

(assert (=> d!27233 (=> res!50369 e!65386)))

(assert (=> d!27233 (= res!50369 (and ((_ is Cons!1564) (toList!767 call!10174)) (= (_1!1165 (h!2159 (toList!767 call!10174))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (=> d!27233 (= (containsKey!155 (toList!767 call!10174) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) e!65386)))

(declare-fun b!100422 () Bool)

(declare-fun e!65387 () Bool)

(assert (=> b!100422 (= e!65386 e!65387)))

(declare-fun res!50370 () Bool)

(assert (=> b!100422 (=> (not res!50370) (not e!65387))))

(assert (=> b!100422 (= res!50370 (and (or (not ((_ is Cons!1564) (toList!767 call!10174))) (bvsle (_1!1165 (h!2159 (toList!767 call!10174))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))) ((_ is Cons!1564) (toList!767 call!10174)) (bvslt (_1!1165 (h!2159 (toList!767 call!10174))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(declare-fun b!100423 () Bool)

(assert (=> b!100423 (= e!65387 (containsKey!155 (t!5534 (toList!767 call!10174)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!27233 (not res!50369)) b!100422))

(assert (= (and b!100422 res!50370) b!100423))

(assert (=> b!100423 m!108735))

(declare-fun m!111131 () Bool)

(assert (=> b!100423 m!111131))

(assert (=> d!26771 d!27233))

(declare-fun d!27235 () Bool)

(assert (=> d!27235 (= (inRange!0 (index!3137 lt!50143) (mask!6608 newMap!16)) (and (bvsge (index!3137 lt!50143) #b00000000000000000000000000000000) (bvslt (index!3137 lt!50143) (bvadd (mask!6608 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!99554 d!27235))

(declare-fun d!27237 () Bool)

(assert (=> d!27237 (= (apply!93 lt!50172 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!50172) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4163 () Bool)

(assert (= bs!4163 d!27237))

(assert (=> bs!4163 m!109699))

(assert (=> bs!4163 m!109699))

(declare-fun m!111133 () Bool)

(assert (=> bs!4163 m!111133))

(assert (=> b!99594 d!27237))

(assert (=> d!26737 d!26639))

(assert (=> b!99547 d!26775))

(declare-fun d!27239 () Bool)

(declare-fun e!65388 () Bool)

(assert (=> d!27239 e!65388))

(declare-fun res!50372 () Bool)

(assert (=> d!27239 (=> (not res!50372) (not e!65388))))

(declare-fun lt!50769 () ListLongMap!1503)

(assert (=> d!27239 (= res!50372 (contains!792 lt!50769 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(declare-fun lt!50768 () List!1568)

(assert (=> d!27239 (= lt!50769 (ListLongMap!1504 lt!50768))))

(declare-fun lt!50767 () Unit!2982)

(declare-fun lt!50770 () Unit!2982)

(assert (=> d!27239 (= lt!50767 lt!50770)))

(assert (=> d!27239 (= (getValueByKey!152 lt!50768 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27239 (= lt!50770 (lemmaContainsTupThenGetReturnValue!68 lt!50768 (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27239 (= lt!50768 (insertStrictlySorted!71 (toList!767 call!10211) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (=> d!27239 (= (+!131 call!10211 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))) lt!50769)))

(declare-fun b!100424 () Bool)

(declare-fun res!50371 () Bool)

(assert (=> b!100424 (=> (not res!50371) (not e!65388))))

(assert (=> b!100424 (= res!50371 (= (getValueByKey!152 (toList!767 lt!50769) (_1!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun b!100425 () Bool)

(assert (=> b!100425 (= e!65388 (contains!795 (toList!767 lt!50769) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))

(assert (= (and d!27239 res!50372) b!100424))

(assert (= (and b!100424 res!50371) b!100425))

(declare-fun m!111135 () Bool)

(assert (=> d!27239 m!111135))

(declare-fun m!111137 () Bool)

(assert (=> d!27239 m!111137))

(declare-fun m!111139 () Bool)

(assert (=> d!27239 m!111139))

(declare-fun m!111141 () Bool)

(assert (=> d!27239 m!111141))

(declare-fun m!111143 () Bool)

(assert (=> b!100424 m!111143))

(declare-fun m!111145 () Bool)

(assert (=> b!100425 m!111145))

(assert (=> b!99523 d!27239))

(assert (=> b!99673 d!26639))

(declare-fun d!27241 () Bool)

(declare-fun res!50373 () Bool)

(declare-fun e!65389 () Bool)

(assert (=> d!27241 (=> res!50373 e!65389)))

(assert (=> d!27241 (= res!50373 (and ((_ is Cons!1564) (toList!767 lt!49838)) (= (_1!1165 (h!2159 (toList!767 lt!49838))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!27241 (= (containsKey!155 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!65389)))

(declare-fun b!100426 () Bool)

(declare-fun e!65390 () Bool)

(assert (=> b!100426 (= e!65389 e!65390)))

(declare-fun res!50374 () Bool)

(assert (=> b!100426 (=> (not res!50374) (not e!65390))))

(assert (=> b!100426 (= res!50374 (and (or (not ((_ is Cons!1564) (toList!767 lt!49838))) (bvsle (_1!1165 (h!2159 (toList!767 lt!49838))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1564) (toList!767 lt!49838)) (bvslt (_1!1165 (h!2159 (toList!767 lt!49838))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!100427 () Bool)

(assert (=> b!100427 (= e!65390 (containsKey!155 (t!5534 (toList!767 lt!49838)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!27241 (not res!50373)) b!100426))

(assert (= (and b!100426 res!50374) b!100427))

(assert (=> b!100427 m!108875))

(declare-fun m!111147 () Bool)

(assert (=> b!100427 m!111147))

(assert (=> d!26659 d!27241))

(assert (=> d!26661 d!26847))

(assert (=> b!99507 d!26855))

(declare-fun d!27243 () Bool)

(declare-fun e!65391 () Bool)

(assert (=> d!27243 e!65391))

(declare-fun res!50376 () Bool)

(assert (=> d!27243 (=> (not res!50376) (not e!65391))))

(declare-fun lt!50773 () ListLongMap!1503)

(assert (=> d!27243 (= res!50376 (contains!792 lt!50773 (_1!1165 (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun lt!50772 () List!1568)

(assert (=> d!27243 (= lt!50773 (ListLongMap!1504 lt!50772))))

(declare-fun lt!50771 () Unit!2982)

(declare-fun lt!50774 () Unit!2982)

(assert (=> d!27243 (= lt!50771 lt!50774)))

(assert (=> d!27243 (= (getValueByKey!152 lt!50772 (_1!1165 (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27243 (= lt!50774 (lemmaContainsTupThenGetReturnValue!68 lt!50772 (_1!1165 (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1165 (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27243 (= lt!50772 (insertStrictlySorted!71 (toList!767 (ite c!17015 call!10228 (ite c!17011 call!10230 call!10227))) (_1!1165 (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1165 (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27243 (= (+!131 (ite c!17015 call!10228 (ite c!17011 call!10230 call!10227)) (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) lt!50773)))

(declare-fun b!100428 () Bool)

(declare-fun res!50375 () Bool)

(assert (=> b!100428 (=> (not res!50375) (not e!65391))))

(assert (=> b!100428 (= res!50375 (= (getValueByKey!152 (toList!767 lt!50773) (_1!1165 (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))))

(declare-fun b!100429 () Bool)

(assert (=> b!100429 (= e!65391 (contains!795 (toList!767 lt!50773) (ite (or c!17015 c!17011) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (= (and d!27243 res!50376) b!100428))

(assert (= (and b!100428 res!50375) b!100429))

(declare-fun m!111149 () Bool)

(assert (=> d!27243 m!111149))

(declare-fun m!111151 () Bool)

(assert (=> d!27243 m!111151))

(declare-fun m!111153 () Bool)

(assert (=> d!27243 m!111153))

(declare-fun m!111155 () Bool)

(assert (=> d!27243 m!111155))

(declare-fun m!111157 () Bool)

(assert (=> b!100428 m!111157))

(declare-fun m!111159 () Bool)

(assert (=> b!100429 m!111159))

(assert (=> bm!10225 d!27243))

(assert (=> bm!10212 d!26983))

(declare-fun d!27245 () Bool)

(assert (=> d!27245 (= (apply!93 lt!49996 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!49996) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4164 () Bool)

(assert (= bs!4164 d!27245))

(assert (=> bs!4164 m!110823))

(assert (=> bs!4164 m!110823))

(declare-fun m!111161 () Bool)

(assert (=> bs!4164 m!111161))

(assert (=> b!99379 d!27245))

(declare-fun d!27247 () Bool)

(assert (=> d!27247 (= (get!1298 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99557 d!27247))

(declare-fun d!27249 () Bool)

(assert (=> d!27249 (= (apply!93 lt!49996 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (get!1299 (getValueByKey!152 (toList!767 lt!49996) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4165 () Bool)

(assert (= bs!4165 d!27249))

(assert (=> bs!4165 m!109033))

(assert (=> bs!4165 m!109707))

(assert (=> bs!4165 m!109707))

(declare-fun m!111163 () Bool)

(assert (=> bs!4165 m!111163))

(assert (=> b!99367 d!27249))

(assert (=> b!99367 d!26969))

(declare-fun b!100433 () Bool)

(declare-fun e!65393 () Option!158)

(assert (=> b!100433 (= e!65393 None!156)))

(declare-fun b!100431 () Bool)

(declare-fun e!65392 () Option!158)

(assert (=> b!100431 (= e!65392 e!65393)))

(declare-fun c!17245 () Bool)

(assert (=> b!100431 (= c!17245 (and ((_ is Cons!1564) (t!5534 (toList!767 lt!49742))) (not (= (_1!1165 (h!2159 (t!5534 (toList!767 lt!49742)))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))))

(declare-fun b!100430 () Bool)

(assert (=> b!100430 (= e!65392 (Some!157 (_2!1165 (h!2159 (t!5534 (toList!767 lt!49742))))))))

(declare-fun c!17244 () Bool)

(declare-fun d!27251 () Bool)

(assert (=> d!27251 (= c!17244 (and ((_ is Cons!1564) (t!5534 (toList!767 lt!49742))) (= (_1!1165 (h!2159 (t!5534 (toList!767 lt!49742)))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355))))))

(assert (=> d!27251 (= (getValueByKey!152 (t!5534 (toList!767 lt!49742)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)) e!65392)))

(declare-fun b!100432 () Bool)

(assert (=> b!100432 (= e!65393 (getValueByKey!152 (t!5534 (t!5534 (toList!767 lt!49742))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (= (and d!27251 c!17244) b!100430))

(assert (= (and d!27251 (not c!17244)) b!100431))

(assert (= (and b!100431 c!17245) b!100432))

(assert (= (and b!100431 (not c!17245)) b!100433))

(assert (=> b!100432 m!108735))

(declare-fun m!111165 () Bool)

(assert (=> b!100432 m!111165))

(assert (=> b!99487 d!27251))

(declare-fun d!27253 () Bool)

(declare-fun e!65395 () Bool)

(assert (=> d!27253 e!65395))

(declare-fun res!50377 () Bool)

(assert (=> d!27253 (=> res!50377 e!65395)))

(declare-fun lt!50777 () Bool)

(assert (=> d!27253 (= res!50377 (not lt!50777))))

(declare-fun lt!50776 () Bool)

(assert (=> d!27253 (= lt!50777 lt!50776)))

(declare-fun lt!50775 () Unit!2982)

(declare-fun e!65394 () Unit!2982)

(assert (=> d!27253 (= lt!50775 e!65394)))

(declare-fun c!17246 () Bool)

(assert (=> d!27253 (= c!17246 lt!50776)))

(assert (=> d!27253 (= lt!50776 (containsKey!155 (toList!767 lt!50115) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!27253 (= (contains!792 lt!50115 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) lt!50777)))

(declare-fun b!100434 () Bool)

(declare-fun lt!50778 () Unit!2982)

(assert (=> b!100434 (= e!65394 lt!50778)))

(assert (=> b!100434 (= lt!50778 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50115) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100434 (isDefined!104 (getValueByKey!152 (toList!767 lt!50115) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100435 () Bool)

(declare-fun Unit!3041 () Unit!2982)

(assert (=> b!100435 (= e!65394 Unit!3041)))

(declare-fun b!100436 () Bool)

(assert (=> b!100436 (= e!65395 (isDefined!104 (getValueByKey!152 (toList!767 lt!50115) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!27253 c!17246) b!100434))

(assert (= (and d!27253 (not c!17246)) b!100435))

(assert (= (and d!27253 (not res!50377)) b!100436))

(assert (=> d!27253 m!109033))

(declare-fun m!111167 () Bool)

(assert (=> d!27253 m!111167))

(assert (=> b!100434 m!109033))

(declare-fun m!111169 () Bool)

(assert (=> b!100434 m!111169))

(assert (=> b!100434 m!109033))

(assert (=> b!100434 m!110647))

(assert (=> b!100434 m!110647))

(declare-fun m!111171 () Bool)

(assert (=> b!100434 m!111171))

(assert (=> b!100436 m!109033))

(assert (=> b!100436 m!110647))

(assert (=> b!100436 m!110647))

(assert (=> b!100436 m!111171))

(assert (=> b!99519 d!27253))

(declare-fun d!27255 () Bool)

(declare-fun res!50378 () Bool)

(declare-fun e!65396 () Bool)

(assert (=> d!27255 (=> res!50378 e!65396)))

(assert (=> d!27255 (= res!50378 (= (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355)))))

(assert (=> d!27255 (= (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!65396)))

(declare-fun b!100437 () Bool)

(declare-fun e!65397 () Bool)

(assert (=> b!100437 (= e!65396 e!65397)))

(declare-fun res!50379 () Bool)

(assert (=> b!100437 (=> (not res!50379) (not e!65397))))

(assert (=> b!100437 (= res!50379 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!100438 () Bool)

(assert (=> b!100438 (= e!65397 (arrayContainsKey!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!27255 (not res!50378)) b!100437))

(assert (= (and b!100437 res!50379) b!100438))

(declare-fun m!111173 () Bool)

(assert (=> d!27255 m!111173))

(assert (=> b!100438 m!108735))

(declare-fun m!111175 () Bool)

(assert (=> b!100438 m!111175))

(assert (=> b!99473 d!27255))

(assert (=> b!99432 d!26665))

(declare-fun d!27257 () Bool)

(declare-fun e!65399 () Bool)

(assert (=> d!27257 e!65399))

(declare-fun res!50380 () Bool)

(assert (=> d!27257 (=> res!50380 e!65399)))

(declare-fun lt!50781 () Bool)

(assert (=> d!27257 (= res!50380 (not lt!50781))))

(declare-fun lt!50780 () Bool)

(assert (=> d!27257 (= lt!50781 lt!50780)))

(declare-fun lt!50779 () Unit!2982)

(declare-fun e!65398 () Unit!2982)

(assert (=> d!27257 (= lt!50779 e!65398)))

(declare-fun c!17247 () Bool)

(assert (=> d!27257 (= c!17247 lt!50780)))

(assert (=> d!27257 (= lt!50780 (containsKey!155 (toList!767 lt!50150) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27257 (= (contains!792 lt!50150 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50781)))

(declare-fun b!100439 () Bool)

(declare-fun lt!50782 () Unit!2982)

(assert (=> b!100439 (= e!65398 lt!50782)))

(assert (=> b!100439 (= lt!50782 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50150) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100439 (isDefined!104 (getValueByKey!152 (toList!767 lt!50150) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100440 () Bool)

(declare-fun Unit!3042 () Unit!2982)

(assert (=> b!100440 (= e!65398 Unit!3042)))

(declare-fun b!100441 () Bool)

(assert (=> b!100441 (= e!65399 (isDefined!104 (getValueByKey!152 (toList!767 lt!50150) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27257 c!17247) b!100439))

(assert (= (and d!27257 (not c!17247)) b!100440))

(assert (= (and d!27257 (not res!50380)) b!100441))

(declare-fun m!111177 () Bool)

(assert (=> d!27257 m!111177))

(declare-fun m!111179 () Bool)

(assert (=> b!100439 m!111179))

(assert (=> b!100439 m!110237))

(assert (=> b!100439 m!110237))

(declare-fun m!111181 () Bool)

(assert (=> b!100439 m!111181))

(assert (=> b!100441 m!110237))

(assert (=> b!100441 m!110237))

(assert (=> b!100441 m!111181))

(assert (=> bm!10222 d!27257))

(assert (=> b!99602 d!26855))

(declare-fun d!27259 () Bool)

(declare-fun e!65401 () Bool)

(assert (=> d!27259 e!65401))

(declare-fun res!50381 () Bool)

(assert (=> d!27259 (=> res!50381 e!65401)))

(declare-fun lt!50785 () Bool)

(assert (=> d!27259 (= res!50381 (not lt!50785))))

(declare-fun lt!50784 () Bool)

(assert (=> d!27259 (= lt!50785 lt!50784)))

(declare-fun lt!50783 () Unit!2982)

(declare-fun e!65400 () Unit!2982)

(assert (=> d!27259 (= lt!50783 e!65400)))

(declare-fun c!17248 () Bool)

(assert (=> d!27259 (= c!17248 lt!50784)))

(assert (=> d!27259 (= lt!50784 (containsKey!155 (toList!767 lt!50115) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27259 (= (contains!792 lt!50115 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50785)))

(declare-fun b!100442 () Bool)

(declare-fun lt!50786 () Unit!2982)

(assert (=> b!100442 (= e!65400 lt!50786)))

(assert (=> b!100442 (= lt!50786 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!50115) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100442 (isDefined!104 (getValueByKey!152 (toList!767 lt!50115) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100443 () Bool)

(declare-fun Unit!3043 () Unit!2982)

(assert (=> b!100443 (= e!65400 Unit!3043)))

(declare-fun b!100444 () Bool)

(assert (=> b!100444 (= e!65401 (isDefined!104 (getValueByKey!152 (toList!767 lt!50115) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27259 c!17248) b!100442))

(assert (= (and d!27259 (not c!17248)) b!100443))

(assert (= (and d!27259 (not res!50381)) b!100444))

(declare-fun m!111183 () Bool)

(assert (=> d!27259 m!111183))

(declare-fun m!111185 () Bool)

(assert (=> b!100442 m!111185))

(assert (=> b!100442 m!110827))

(assert (=> b!100442 m!110827))

(declare-fun m!111187 () Bool)

(assert (=> b!100442 m!111187))

(assert (=> b!100444 m!110827))

(assert (=> b!100444 m!110827))

(assert (=> b!100444 m!111187))

(assert (=> bm!10209 d!27259))

(assert (=> d!26695 d!26687))

(assert (=> d!26695 d!26683))

(declare-fun d!27261 () Bool)

(assert (=> d!27261 (contains!792 (+!131 lt!49844 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!49853)))

(assert (=> d!27261 true))

(declare-fun _$35!342 () Unit!2982)

(assert (=> d!27261 (= (choose!611 lt!49844 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))) lt!49853) _$35!342)))

(declare-fun bs!4166 () Bool)

(assert (= bs!4166 d!27261))

(assert (=> bs!4166 m!108865))

(assert (=> bs!4166 m!108865))

(assert (=> bs!4166 m!108883))

(assert (=> d!26695 d!27261))

(declare-fun d!27263 () Bool)

(declare-fun e!65403 () Bool)

(assert (=> d!27263 e!65403))

(declare-fun res!50382 () Bool)

(assert (=> d!27263 (=> res!50382 e!65403)))

(declare-fun lt!50789 () Bool)

(assert (=> d!27263 (= res!50382 (not lt!50789))))

(declare-fun lt!50788 () Bool)

(assert (=> d!27263 (= lt!50789 lt!50788)))

(declare-fun lt!50787 () Unit!2982)

(declare-fun e!65402 () Unit!2982)

(assert (=> d!27263 (= lt!50787 e!65402)))

(declare-fun c!17249 () Bool)

(assert (=> d!27263 (= c!17249 lt!50788)))

(assert (=> d!27263 (= lt!50788 (containsKey!155 (toList!767 lt!49844) lt!49853))))

(assert (=> d!27263 (= (contains!792 lt!49844 lt!49853) lt!50789)))

(declare-fun b!100446 () Bool)

(declare-fun lt!50790 () Unit!2982)

(assert (=> b!100446 (= e!65402 lt!50790)))

(assert (=> b!100446 (= lt!50790 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49844) lt!49853))))

(assert (=> b!100446 (isDefined!104 (getValueByKey!152 (toList!767 lt!49844) lt!49853))))

(declare-fun b!100447 () Bool)

(declare-fun Unit!3044 () Unit!2982)

(assert (=> b!100447 (= e!65402 Unit!3044)))

(declare-fun b!100448 () Bool)

(assert (=> b!100448 (= e!65403 (isDefined!104 (getValueByKey!152 (toList!767 lt!49844) lt!49853)))))

(assert (= (and d!27263 c!17249) b!100446))

(assert (= (and d!27263 (not c!17249)) b!100447))

(assert (= (and d!27263 (not res!50382)) b!100448))

(declare-fun m!111189 () Bool)

(assert (=> d!27263 m!111189))

(declare-fun m!111191 () Bool)

(assert (=> b!100446 m!111191))

(declare-fun m!111193 () Bool)

(assert (=> b!100446 m!111193))

(assert (=> b!100446 m!111193))

(declare-fun m!111195 () Bool)

(assert (=> b!100446 m!111195))

(assert (=> b!100448 m!111193))

(assert (=> b!100448 m!111193))

(assert (=> b!100448 m!111195))

(assert (=> d!26695 d!27263))

(assert (=> b!99491 d!27039))

(assert (=> b!99491 d!27041))

(assert (=> b!99428 d!26665))

(declare-fun d!27265 () Bool)

(assert (=> d!27265 (= (apply!93 lt!50115 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!50115) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4167 () Bool)

(assert (= bs!4167 d!27265))

(assert (=> bs!4167 m!110471))

(assert (=> bs!4167 m!110471))

(declare-fun m!111197 () Bool)

(assert (=> bs!4167 m!111197))

(assert (=> b!99530 d!27265))

(declare-fun d!27267 () Bool)

(declare-fun lt!50791 () Bool)

(assert (=> d!27267 (= lt!50791 (select (content!105 (toList!767 lt!50062)) (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun e!65405 () Bool)

(assert (=> d!27267 (= lt!50791 e!65405)))

(declare-fun res!50384 () Bool)

(assert (=> d!27267 (=> (not res!50384) (not e!65405))))

(assert (=> d!27267 (= res!50384 ((_ is Cons!1564) (toList!767 lt!50062)))))

(assert (=> d!27267 (= (contains!795 (toList!767 lt!50062) (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))) lt!50791)))

(declare-fun b!100449 () Bool)

(declare-fun e!65404 () Bool)

(assert (=> b!100449 (= e!65405 e!65404)))

(declare-fun res!50383 () Bool)

(assert (=> b!100449 (=> res!50383 e!65404)))

(assert (=> b!100449 (= res!50383 (= (h!2159 (toList!767 lt!50062)) (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!100450 () Bool)

(assert (=> b!100450 (= e!65404 (contains!795 (t!5534 (toList!767 lt!50062)) (tuple2!2309 lt!49839 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))

(assert (= (and d!27267 res!50384) b!100449))

(assert (= (and b!100449 (not res!50383)) b!100450))

(declare-fun m!111199 () Bool)

(assert (=> d!27267 m!111199))

(declare-fun m!111201 () Bool)

(assert (=> d!27267 m!111201))

(declare-fun m!111203 () Bool)

(assert (=> b!100450 m!111203))

(assert (=> b!99455 d!27267))

(declare-fun d!27269 () Bool)

(assert (=> d!27269 (= (apply!93 lt!49996 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1299 (getValueByKey!152 (toList!767 lt!49996) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4168 () Bool)

(assert (= bs!4168 d!27269))

(assert (=> bs!4168 m!109955))

(assert (=> bs!4168 m!109955))

(declare-fun m!111205 () Bool)

(assert (=> bs!4168 m!111205))

(assert (=> b!99362 d!27269))

(declare-fun d!27271 () Bool)

(assert (=> d!27271 (= (get!1297 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2816 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99556 d!27271))

(declare-fun d!27273 () Bool)

(declare-fun e!65407 () Bool)

(assert (=> d!27273 e!65407))

(declare-fun res!50385 () Bool)

(assert (=> d!27273 (=> res!50385 e!65407)))

(declare-fun lt!50794 () Bool)

(assert (=> d!27273 (= res!50385 (not lt!50794))))

(declare-fun lt!50793 () Bool)

(assert (=> d!27273 (= lt!50794 lt!50793)))

(declare-fun lt!50792 () Unit!2982)

(declare-fun e!65406 () Unit!2982)

(assert (=> d!27273 (= lt!50792 e!65406)))

(declare-fun c!17250 () Bool)

(assert (=> d!27273 (= c!17250 lt!50793)))

(assert (=> d!27273 (= lt!50793 (containsKey!155 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))))

(assert (=> d!27273 (= (contains!792 (getCurrentListMap!456 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16)) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))) lt!50794)))

(declare-fun b!100451 () Bool)

(declare-fun lt!50795 () Unit!2982)

(assert (=> b!100451 (= e!65406 lt!50795)))

(assert (=> b!100451 (= lt!50795 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))))

(assert (=> b!100451 (isDefined!104 (getValueByKey!152 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929))))))

(declare-fun b!100452 () Bool)

(declare-fun Unit!3045 () Unit!2982)

(assert (=> b!100452 (= e!65406 Unit!3045)))

(declare-fun b!100453 () Bool)

(assert (=> b!100453 (= e!65407 (isDefined!104 (getValueByKey!152 (toList!767 (getCurrentListMap!456 (_keys!4195 newMap!16) lt!49932 (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2501 newMap!16))) (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!49929)))))))

(assert (= (and d!27273 c!17250) b!100451))

(assert (= (and d!27273 (not c!17250)) b!100452))

(assert (= (and d!27273 (not res!50385)) b!100453))

(assert (=> d!27273 m!108939))

(declare-fun m!111207 () Bool)

(assert (=> d!27273 m!111207))

(assert (=> b!100451 m!108939))

(declare-fun m!111209 () Bool)

(assert (=> b!100451 m!111209))

(assert (=> b!100451 m!108939))

(declare-fun m!111211 () Bool)

(assert (=> b!100451 m!111211))

(assert (=> b!100451 m!111211))

(declare-fun m!111213 () Bool)

(assert (=> b!100451 m!111213))

(assert (=> b!100453 m!108939))

(assert (=> b!100453 m!111211))

(assert (=> b!100453 m!111211))

(assert (=> b!100453 m!111213))

(assert (=> b!99462 d!27273))

(assert (=> b!99462 d!26761))

(assert (=> b!99606 d!26855))

(declare-fun d!27275 () Bool)

(assert (=> d!27275 (arrayContainsKey!0 (_keys!4195 newMap!16) lt!49974 #b00000000000000000000000000000000)))

(declare-fun lt!50796 () Unit!2982)

(assert (=> d!27275 (= lt!50796 (choose!13 (_keys!4195 newMap!16) lt!49974 #b00000000000000000000000000000000))))

(assert (=> d!27275 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!27275 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4195 newMap!16) lt!49974 #b00000000000000000000000000000000) lt!50796)))

(declare-fun bs!4169 () Bool)

(assert (= bs!4169 d!27275))

(assert (=> bs!4169 m!109037))

(declare-fun m!111215 () Bool)

(assert (=> bs!4169 m!111215))

(assert (=> b!99338 d!27275))

(declare-fun d!27277 () Bool)

(declare-fun res!50386 () Bool)

(declare-fun e!65408 () Bool)

(assert (=> d!27277 (=> res!50386 e!65408)))

(assert (=> d!27277 (= res!50386 (= (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) lt!49974))))

(assert (=> d!27277 (= (arrayContainsKey!0 (_keys!4195 newMap!16) lt!49974 #b00000000000000000000000000000000) e!65408)))

(declare-fun b!100454 () Bool)

(declare-fun e!65409 () Bool)

(assert (=> b!100454 (= e!65408 e!65409)))

(declare-fun res!50387 () Bool)

(assert (=> b!100454 (=> (not res!50387) (not e!65409))))

(assert (=> b!100454 (= res!50387 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 newMap!16))))))

(declare-fun b!100455 () Bool)

(assert (=> b!100455 (= e!65409 (arrayContainsKey!0 (_keys!4195 newMap!16) lt!49974 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!27277 (not res!50386)) b!100454))

(assert (= (and b!100454 res!50387) b!100455))

(assert (=> d!27277 m!109033))

(declare-fun m!111217 () Bool)

(assert (=> b!100455 m!111217))

(assert (=> b!99338 d!27277))

(declare-fun b!100456 () Bool)

(declare-fun e!65411 () SeekEntryResult!248)

(declare-fun lt!50797 () SeekEntryResult!248)

(assert (=> b!100456 (= e!65411 (MissingZero!248 (index!3138 lt!50797)))))

(declare-fun b!100457 () Bool)

(declare-fun e!65412 () SeekEntryResult!248)

(assert (=> b!100457 (= e!65412 Undefined!248)))

(declare-fun b!100458 () Bool)

(assert (=> b!100458 (= e!65411 (seekKeyOrZeroReturnVacant!0 (x!13098 lt!50797) (index!3138 lt!50797) (index!3138 lt!50797) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(declare-fun d!27279 () Bool)

(declare-fun lt!50799 () SeekEntryResult!248)

(assert (=> d!27279 (and (or ((_ is Undefined!248) lt!50799) (not ((_ is Found!248) lt!50799)) (and (bvsge (index!3137 lt!50799) #b00000000000000000000000000000000) (bvslt (index!3137 lt!50799) (size!2263 (_keys!4195 newMap!16))))) (or ((_ is Undefined!248) lt!50799) ((_ is Found!248) lt!50799) (not ((_ is MissingZero!248) lt!50799)) (and (bvsge (index!3136 lt!50799) #b00000000000000000000000000000000) (bvslt (index!3136 lt!50799) (size!2263 (_keys!4195 newMap!16))))) (or ((_ is Undefined!248) lt!50799) ((_ is Found!248) lt!50799) ((_ is MissingZero!248) lt!50799) (not ((_ is MissingVacant!248) lt!50799)) (and (bvsge (index!3139 lt!50799) #b00000000000000000000000000000000) (bvslt (index!3139 lt!50799) (size!2263 (_keys!4195 newMap!16))))) (or ((_ is Undefined!248) lt!50799) (ite ((_ is Found!248) lt!50799) (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3137 lt!50799)) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!248) lt!50799) (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3136 lt!50799)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!248) lt!50799) (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3139 lt!50799)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27279 (= lt!50799 e!65412)))

(declare-fun c!17253 () Bool)

(assert (=> d!27279 (= c!17253 (and ((_ is Intermediate!248) lt!50797) (undefined!1060 lt!50797)))))

(assert (=> d!27279 (= lt!50797 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (mask!6608 newMap!16)) (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(assert (=> d!27279 (validMask!0 (mask!6608 newMap!16))))

(assert (=> d!27279 (= (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000) (_keys!4195 newMap!16) (mask!6608 newMap!16)) lt!50799)))

(declare-fun b!100459 () Bool)

(declare-fun e!65410 () SeekEntryResult!248)

(assert (=> b!100459 (= e!65410 (Found!248 (index!3138 lt!50797)))))

(declare-fun b!100460 () Bool)

(assert (=> b!100460 (= e!65412 e!65410)))

(declare-fun lt!50798 () (_ BitVec 64))

(assert (=> b!100460 (= lt!50798 (select (arr!2012 (_keys!4195 newMap!16)) (index!3138 lt!50797)))))

(declare-fun c!17251 () Bool)

(assert (=> b!100460 (= c!17251 (= lt!50798 (select (arr!2012 (_keys!4195 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100461 () Bool)

(declare-fun c!17252 () Bool)

(assert (=> b!100461 (= c!17252 (= lt!50798 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100461 (= e!65410 e!65411)))

(assert (= (and d!27279 c!17253) b!100457))

(assert (= (and d!27279 (not c!17253)) b!100460))

(assert (= (and b!100460 c!17251) b!100459))

(assert (= (and b!100460 (not c!17251)) b!100461))

(assert (= (and b!100461 c!17252) b!100456))

(assert (= (and b!100461 (not c!17252)) b!100458))

(assert (=> b!100458 m!109033))

(declare-fun m!111219 () Bool)

(assert (=> b!100458 m!111219))

(declare-fun m!111221 () Bool)

(assert (=> d!27279 m!111221))

(assert (=> d!27279 m!109033))

(declare-fun m!111223 () Bool)

(assert (=> d!27279 m!111223))

(declare-fun m!111225 () Bool)

(assert (=> d!27279 m!111225))

(assert (=> d!27279 m!109033))

(assert (=> d!27279 m!111221))

(assert (=> d!27279 m!109025))

(declare-fun m!111227 () Bool)

(assert (=> d!27279 m!111227))

(declare-fun m!111229 () Bool)

(assert (=> d!27279 m!111229))

(declare-fun m!111231 () Bool)

(assert (=> b!100460 m!111231))

(assert (=> b!99338 d!27279))

(declare-fun d!27281 () Bool)

(declare-fun e!65413 () Bool)

(assert (=> d!27281 e!65413))

(declare-fun res!50389 () Bool)

(assert (=> d!27281 (=> (not res!50389) (not e!65413))))

(declare-fun lt!50802 () ListLongMap!1503)

(assert (=> d!27281 (= res!50389 (contains!792 lt!50802 (_1!1165 (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(declare-fun lt!50801 () List!1568)

(assert (=> d!27281 (= lt!50802 (ListLongMap!1504 lt!50801))))

(declare-fun lt!50800 () Unit!2982)

(declare-fun lt!50803 () Unit!2982)

(assert (=> d!27281 (= lt!50800 lt!50803)))

(assert (=> d!27281 (= (getValueByKey!152 lt!50801 (_1!1165 (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27281 (= lt!50803 (lemmaContainsTupThenGetReturnValue!68 lt!50801 (_1!1165 (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1165 (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27281 (= lt!50801 (insertStrictlySorted!71 (toList!767 (ite c!16959 call!10193 (ite c!16955 call!10195 call!10192))) (_1!1165 (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) (_2!1165 (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))))))

(assert (=> d!27281 (= (+!131 (ite c!16959 call!10193 (ite c!16955 call!10195 call!10192)) (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))) lt!50802)))

(declare-fun b!100462 () Bool)

(declare-fun res!50388 () Bool)

(assert (=> b!100462 (=> (not res!50388) (not e!65413))))

(assert (=> b!100462 (= res!50388 (= (getValueByKey!152 (toList!767 lt!50802) (_1!1165 (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16))))) (Some!157 (_2!1165 (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))))

(declare-fun b!100463 () Bool)

(assert (=> b!100463 (= e!65413 (contains!795 (toList!767 lt!50802) (ite (or c!16959 c!16955) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 newMap!16)) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 newMap!16)))))))

(assert (= (and d!27281 res!50389) b!100462))

(assert (= (and b!100462 res!50388) b!100463))

(declare-fun m!111233 () Bool)

(assert (=> d!27281 m!111233))

(declare-fun m!111235 () Bool)

(assert (=> d!27281 m!111235))

(declare-fun m!111237 () Bool)

(assert (=> d!27281 m!111237))

(declare-fun m!111239 () Bool)

(assert (=> d!27281 m!111239))

(declare-fun m!111241 () Bool)

(assert (=> b!100462 m!111241))

(declare-fun m!111243 () Bool)

(assert (=> b!100463 m!111243))

(assert (=> bm!10190 d!27281))

(declare-fun b!100464 () Bool)

(declare-fun e!65414 () (_ BitVec 32))

(declare-fun call!10333 () (_ BitVec 32))

(assert (=> b!100464 (= e!65414 (bvadd #b00000000000000000000000000000001 call!10333))))

(declare-fun d!27283 () Bool)

(declare-fun lt!50804 () (_ BitVec 32))

(assert (=> d!27283 (and (bvsge lt!50804 #b00000000000000000000000000000000) (bvsle lt!50804 (bvsub (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun e!65415 () (_ BitVec 32))

(assert (=> d!27283 (= lt!50804 e!65415)))

(declare-fun c!17254 () Bool)

(assert (=> d!27283 (= c!17254 (bvsge #b00000000000000000000000000000000 (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!27283 (and (bvsle #b00000000000000000000000000000000 (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(assert (=> d!27283 (= (arrayCountValidKeys!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) #b00000000000000000000000000000000 (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))) lt!50804)))

(declare-fun b!100465 () Bool)

(assert (=> b!100465 (= e!65415 #b00000000000000000000000000000000)))

(declare-fun b!100466 () Bool)

(assert (=> b!100466 (= e!65415 e!65414)))

(declare-fun c!17255 () Bool)

(assert (=> b!100466 (= c!17255 (validKeyInArray!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10330 () Bool)

(assert (=> bm!10330 (= call!10333 (arrayCountValidKeys!0 (_keys!4195 (v!2817 (underlying!341 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2263 (_keys!4195 (v!2817 (underlying!341 thiss!992))))))))

(declare-fun b!100467 () Bool)

(assert (=> b!100467 (= e!65414 call!10333)))

(assert (= (and d!27283 c!17254) b!100465))

(assert (= (and d!27283 (not c!17254)) b!100466))

(assert (= (and b!100466 c!17255) b!100464))

(assert (= (and b!100466 (not c!17255)) b!100467))

(assert (= (or b!100464 b!100467) bm!10330))

(assert (=> b!100466 m!110183))

(assert (=> b!100466 m!110183))

(assert (=> b!100466 m!110191))

(declare-fun m!111245 () Bool)

(assert (=> bm!10330 m!111245))

(assert (=> b!99612 d!27283))

(declare-fun d!27285 () Bool)

(assert (=> d!27285 (= (get!1299 (getValueByKey!152 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2823 (getValueByKey!152 (toList!767 lt!49838) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26753 d!27285))

(assert (=> d!26753 d!26935))

(declare-fun lt!50805 () Bool)

(declare-fun d!27287 () Bool)

(assert (=> d!27287 (= lt!50805 (select (content!105 (toList!767 lt!50042)) (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!65417 () Bool)

(assert (=> d!27287 (= lt!50805 e!65417)))

(declare-fun res!50391 () Bool)

(assert (=> d!27287 (=> (not res!50391) (not e!65417))))

(assert (=> d!27287 (= res!50391 ((_ is Cons!1564) (toList!767 lt!50042)))))

(assert (=> d!27287 (= (contains!795 (toList!767 lt!50042) (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50805)))

(declare-fun b!100468 () Bool)

(declare-fun e!65416 () Bool)

(assert (=> b!100468 (= e!65417 e!65416)))

(declare-fun res!50390 () Bool)

(assert (=> b!100468 (=> res!50390 e!65416)))

(assert (=> b!100468 (= res!50390 (= (h!2159 (toList!767 lt!50042)) (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100469 () Bool)

(assert (=> b!100469 (= e!65416 (contains!795 (t!5534 (toList!767 lt!50042)) (ite c!16932 (ite c!16926 (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2309 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (get!1295 (select (arr!2013 (_values!2484 (v!2817 (underlying!341 thiss!992)))) from!355) (dynLambda!372 (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!27287 res!50391) b!100468))

(assert (= (and b!100468 (not res!50390)) b!100469))

(declare-fun m!111247 () Bool)

(assert (=> d!27287 m!111247))

(declare-fun m!111249 () Bool)

(assert (=> d!27287 m!111249))

(declare-fun m!111251 () Bool)

(assert (=> b!100469 m!111251))

(assert (=> b!99441 d!27287))

(assert (=> d!26663 d!26645))

(declare-fun b!100486 () Bool)

(declare-fun e!65429 () Bool)

(declare-fun lt!50808 () SeekEntryResult!248)

(assert (=> b!100486 (= e!65429 ((_ is Undefined!248) lt!50808))))

(declare-fun b!100487 () Bool)

(declare-fun e!65426 () Bool)

(assert (=> b!100487 (= e!65426 e!65429)))

(declare-fun c!17261 () Bool)

(assert (=> b!100487 (= c!17261 ((_ is MissingVacant!248) lt!50808))))

(declare-fun bm!10335 () Bool)

(declare-fun call!10339 () Bool)

(assert (=> bm!10335 (= call!10339 (arrayContainsKey!0 (_keys!4195 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!100489 () Bool)

(declare-fun res!50402 () Bool)

(declare-fun e!65428 () Bool)

(assert (=> b!100489 (=> (not res!50402) (not e!65428))))

(assert (=> b!100489 (= res!50402 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3139 lt!50808)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100490 () Bool)

(declare-fun e!65427 () Bool)

(assert (=> b!100490 (= e!65427 (not call!10339))))

(declare-fun bm!10336 () Bool)

(declare-fun c!17260 () Bool)

(declare-fun call!10338 () Bool)

(assert (=> bm!10336 (= call!10338 (inRange!0 (ite c!17260 (index!3136 lt!50808) (index!3139 lt!50808)) (mask!6608 newMap!16)))))

(declare-fun b!100491 () Bool)

(declare-fun res!50401 () Bool)

(assert (=> b!100491 (=> (not res!50401) (not e!65428))))

(assert (=> b!100491 (= res!50401 call!10338)))

(assert (=> b!100491 (= e!65429 e!65428)))

(declare-fun b!100492 () Bool)

(declare-fun res!50403 () Bool)

(assert (=> b!100492 (= res!50403 (= (select (arr!2012 (_keys!4195 newMap!16)) (index!3136 lt!50808)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100492 (=> (not res!50403) (not e!65427))))

(declare-fun b!100493 () Bool)

(assert (=> b!100493 (= e!65428 (not call!10339))))

(declare-fun d!27289 () Bool)

(assert (=> d!27289 e!65426))

(assert (=> d!27289 (= c!17260 ((_ is MissingZero!248) lt!50808))))

(assert (=> d!27289 (= lt!50808 (seekEntryOrOpen!0 (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (_keys!4195 newMap!16) (mask!6608 newMap!16)))))

(assert (=> d!27289 true))

(declare-fun _$34!876 () Unit!2982)

(assert (=> d!27289 (= (choose!609 (_keys!4195 newMap!16) (_values!2484 newMap!16) (mask!6608 newMap!16) (extraKeys!2318 newMap!16) (zeroValue!2382 newMap!16) (minValue!2382 newMap!16) (select (arr!2012 (_keys!4195 (v!2817 (underlying!341 thiss!992)))) from!355) (defaultEntry!2501 newMap!16)) _$34!876)))

(declare-fun b!100488 () Bool)

(assert (=> b!100488 (= e!65426 e!65427)))

(declare-fun res!50400 () Bool)

(assert (=> b!100488 (= res!50400 call!10338)))

(assert (=> b!100488 (=> (not res!50400) (not e!65427))))

(assert (= (and d!27289 c!17260) b!100488))

(assert (= (and d!27289 (not c!17260)) b!100487))

(assert (= (and b!100488 res!50400) b!100492))

(assert (= (and b!100492 res!50403) b!100490))

(assert (= (and b!100487 c!17261) b!100491))

(assert (= (and b!100487 (not c!17261)) b!100486))

(assert (= (and b!100491 res!50401) b!100489))

(assert (= (and b!100489 res!50402) b!100493))

(assert (= (or b!100488 b!100491) bm!10336))

(assert (= (or b!100490 b!100493) bm!10335))

(declare-fun m!111253 () Bool)

(assert (=> b!100489 m!111253))

(declare-fun m!111255 () Bool)

(assert (=> b!100492 m!111255))

(assert (=> d!27289 m!108735))

(assert (=> d!27289 m!108961))

(assert (=> bm!10335 m!108735))

(assert (=> bm!10335 m!108977))

(declare-fun m!111257 () Bool)

(assert (=> bm!10336 m!111257))

(assert (=> d!26663 d!27289))

(assert (=> d!26663 d!26847))

(declare-fun d!27291 () Bool)

(declare-fun e!65431 () Bool)

(assert (=> d!27291 e!65431))

(declare-fun res!50404 () Bool)

(assert (=> d!27291 (=> res!50404 e!65431)))

(declare-fun lt!50811 () Bool)

(assert (=> d!27291 (= res!50404 (not lt!50811))))

(declare-fun lt!50810 () Bool)

(assert (=> d!27291 (= lt!50811 lt!50810)))

(declare-fun lt!50809 () Unit!2982)

(declare-fun e!65430 () Unit!2982)

(assert (=> d!27291 (= lt!50809 e!65430)))

(declare-fun c!17262 () Bool)

(assert (=> d!27291 (= c!17262 lt!50810)))

(assert (=> d!27291 (= lt!50810 (containsKey!155 (toList!767 lt!49985) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27291 (= (contains!792 lt!49985 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) lt!50811)))

(declare-fun b!100494 () Bool)

(declare-fun lt!50812 () Unit!2982)

(assert (=> b!100494 (= e!65430 lt!50812)))

(assert (=> b!100494 (= lt!50812 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 lt!49985) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> b!100494 (isDefined!104 (getValueByKey!152 (toList!767 lt!49985) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!100495 () Bool)

(declare-fun Unit!3046 () Unit!2982)

(assert (=> b!100495 (= e!65430 Unit!3046)))

(declare-fun b!100496 () Bool)

(assert (=> b!100496 (= e!65431 (isDefined!104 (getValueByKey!152 (toList!767 lt!49985) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(assert (= (and d!27291 c!17262) b!100494))

(assert (= (and d!27291 (not c!17262)) b!100495))

(assert (= (and d!27291 (not res!50404)) b!100496))

(declare-fun m!111259 () Bool)

(assert (=> d!27291 m!111259))

(declare-fun m!111261 () Bool)

(assert (=> b!100494 m!111261))

(assert (=> b!100494 m!109061))

(assert (=> b!100494 m!109061))

(declare-fun m!111263 () Bool)

(assert (=> b!100494 m!111263))

(assert (=> b!100496 m!109061))

(assert (=> b!100496 m!109061))

(assert (=> b!100496 m!111263))

(assert (=> d!26653 d!27291))

(declare-fun b!100500 () Bool)

(declare-fun e!65433 () Option!158)

(assert (=> b!100500 (= e!65433 None!156)))

(declare-fun b!100498 () Bool)

(declare-fun e!65432 () Option!158)

(assert (=> b!100498 (= e!65432 e!65433)))

(declare-fun c!17264 () Bool)

(assert (=> b!100498 (= c!17264 (and ((_ is Cons!1564) lt!49984) (not (= (_1!1165 (h!2159 lt!49984)) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))))

(declare-fun b!100497 () Bool)

(assert (=> b!100497 (= e!65432 (Some!157 (_2!1165 (h!2159 lt!49984))))))

(declare-fun c!17263 () Bool)

(declare-fun d!27293 () Bool)

(assert (=> d!27293 (= c!17263 (and ((_ is Cons!1564) lt!49984) (= (_1!1165 (h!2159 lt!49984)) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(assert (=> d!27293 (= (getValueByKey!152 lt!49984 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) e!65432)))

(declare-fun b!100499 () Bool)

(assert (=> b!100499 (= e!65433 (getValueByKey!152 (t!5534 lt!49984) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (= (and d!27293 c!17263) b!100497))

(assert (= (and d!27293 (not c!17263)) b!100498))

(assert (= (and b!100498 c!17264) b!100499))

(assert (= (and b!100498 (not c!17264)) b!100500))

(declare-fun m!111265 () Bool)

(assert (=> b!100499 m!111265))

(assert (=> d!26653 d!27293))

(declare-fun d!27295 () Bool)

(assert (=> d!27295 (= (getValueByKey!152 lt!49984 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) (Some!157 (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun lt!50813 () Unit!2982)

(assert (=> d!27295 (= lt!50813 (choose!619 lt!49984 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun e!65434 () Bool)

(assert (=> d!27295 e!65434))

(declare-fun res!50405 () Bool)

(assert (=> d!27295 (=> (not res!50405) (not e!65434))))

(assert (=> d!27295 (= res!50405 (isStrictlySorted!292 lt!49984))))

(assert (=> d!27295 (= (lemmaContainsTupThenGetReturnValue!68 lt!49984 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) lt!50813)))

(declare-fun b!100501 () Bool)

(declare-fun res!50406 () Bool)

(assert (=> b!100501 (=> (not res!50406) (not e!65434))))

(assert (=> b!100501 (= res!50406 (containsKey!155 lt!49984 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!100502 () Bool)

(assert (=> b!100502 (= e!65434 (contains!795 lt!49984 (tuple2!2309 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(assert (= (and d!27295 res!50405) b!100501))

(assert (= (and b!100501 res!50406) b!100502))

(assert (=> d!27295 m!109055))

(declare-fun m!111267 () Bool)

(assert (=> d!27295 m!111267))

(declare-fun m!111269 () Bool)

(assert (=> d!27295 m!111269))

(declare-fun m!111271 () Bool)

(assert (=> b!100501 m!111271))

(declare-fun m!111273 () Bool)

(assert (=> b!100502 m!111273))

(assert (=> d!26653 d!27295))

(declare-fun b!100503 () Bool)

(declare-fun e!65437 () List!1568)

(assert (=> b!100503 (= e!65437 (insertStrictlySorted!71 (t!5534 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107)))) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun bm!10337 () Bool)

(declare-fun call!10340 () List!1568)

(declare-fun call!10342 () List!1568)

(assert (=> bm!10337 (= call!10340 call!10342)))

(declare-fun b!100504 () Bool)

(declare-fun e!65436 () List!1568)

(declare-fun e!65435 () List!1568)

(assert (=> b!100504 (= e!65436 e!65435)))

(declare-fun c!17267 () Bool)

(assert (=> b!100504 (= c!17267 (and ((_ is Cons!1564) (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107)))) (= (_1!1165 (h!2159 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107))))) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun bm!10338 () Bool)

(declare-fun c!17268 () Bool)

(assert (=> bm!10338 (= call!10342 ($colon$colon!78 e!65437 (ite c!17268 (h!2159 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107)))) (tuple2!2309 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))))

(declare-fun c!17265 () Bool)

(assert (=> bm!10338 (= c!17265 c!17268)))

(declare-fun b!100505 () Bool)

(declare-fun c!17266 () Bool)

(assert (=> b!100505 (= c!17266 (and ((_ is Cons!1564) (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107)))) (bvsgt (_1!1165 (h!2159 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107))))) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun e!65438 () List!1568)

(assert (=> b!100505 (= e!65435 e!65438)))

(declare-fun d!27297 () Bool)

(declare-fun e!65439 () Bool)

(assert (=> d!27297 e!65439))

(declare-fun res!50407 () Bool)

(assert (=> d!27297 (=> (not res!50407) (not e!65439))))

(declare-fun lt!50814 () List!1568)

(assert (=> d!27297 (= res!50407 (isStrictlySorted!292 lt!50814))))

(assert (=> d!27297 (= lt!50814 e!65436)))

(assert (=> d!27297 (= c!17268 (and ((_ is Cons!1564) (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107)))) (bvslt (_1!1165 (h!2159 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107))))) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(assert (=> d!27297 (isStrictlySorted!292 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107))))))

(assert (=> d!27297 (= (insertStrictlySorted!71 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107))) (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))) lt!50814)))

(declare-fun b!100506 () Bool)

(declare-fun res!50408 () Bool)

(assert (=> b!100506 (=> (not res!50408) (not e!65439))))

(assert (=> b!100506 (= res!50408 (containsKey!155 lt!50814 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(declare-fun b!100507 () Bool)

(assert (=> b!100507 (= e!65437 (ite c!17267 (t!5534 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107)))) (ite c!17266 (Cons!1564 (h!2159 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107)))) (t!5534 (toList!767 (ite c!16889 call!10108 (ite c!16885 call!10110 call!10107))))) Nil!1565)))))

(declare-fun b!100508 () Bool)

(assert (=> b!100508 (= e!65435 call!10340)))

(declare-fun b!100509 () Bool)

(assert (=> b!100509 (= e!65439 (contains!795 lt!50814 (tuple2!2309 (_1!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))) (_2!1165 (ite (or c!16889 c!16885) (tuple2!2309 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))) (tuple2!2309 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!100510 () Bool)

(declare-fun call!10341 () List!1568)

(assert (=> b!100510 (= e!65438 call!10341)))

(declare-fun b!100511 () Bool)

(assert (=> b!100511 (= e!65436 call!10342)))

(declare-fun bm!10339 () Bool)

(assert (=> bm!10339 (= call!10341 call!10340)))

(declare-fun b!100512 () Bool)

(assert (=> b!100512 (= e!65438 call!10341)))

(assert (= (and d!27297 c!17268) b!100511))

(assert (= (and d!27297 (not c!17268)) b!100504))

(assert (= (and b!100504 c!17267) b!100508))

(assert (= (and b!100504 (not c!17267)) b!100505))

(assert (= (and b!100505 c!17266) b!100512))

(assert (= (and b!100505 (not c!17266)) b!100510))

(assert (= (or b!100512 b!100510) bm!10339))

(assert (= (or b!100508 bm!10339) bm!10337))

(assert (= (or b!100511 bm!10337) bm!10338))

(assert (= (and bm!10338 c!17265) b!100503))

(assert (= (and bm!10338 (not c!17265)) b!100507))

(assert (= (and d!27297 res!50407) b!100506))

(assert (= (and b!100506 res!50408) b!100509))

(declare-fun m!111275 () Bool)

(assert (=> b!100506 m!111275))

(declare-fun m!111277 () Bool)

(assert (=> bm!10338 m!111277))

(declare-fun m!111279 () Bool)

(assert (=> d!27297 m!111279))

(declare-fun m!111281 () Bool)

(assert (=> d!27297 m!111281))

(declare-fun m!111283 () Bool)

(assert (=> b!100503 m!111283))

(declare-fun m!111285 () Bool)

(assert (=> b!100509 m!111285))

(assert (=> d!26653 d!27297))

(declare-fun d!27299 () Bool)

(assert (=> d!27299 (= (apply!93 (+!131 lt!50167 (tuple2!2309 lt!50173 (minValue!2382 newMap!16))) lt!50170) (apply!93 lt!50167 lt!50170))))

(declare-fun lt!50815 () Unit!2982)

(assert (=> d!27299 (= lt!50815 (choose!610 lt!50167 lt!50173 (minValue!2382 newMap!16) lt!50170))))

(declare-fun e!65440 () Bool)

(assert (=> d!27299 e!65440))

(declare-fun res!50409 () Bool)

(assert (=> d!27299 (=> (not res!50409) (not e!65440))))

(assert (=> d!27299 (= res!50409 (contains!792 lt!50167 lt!50170))))

(assert (=> d!27299 (= (addApplyDifferent!69 lt!50167 lt!50173 (minValue!2382 newMap!16) lt!50170) lt!50815)))

(declare-fun b!100513 () Bool)

(assert (=> b!100513 (= e!65440 (not (= lt!50170 lt!50173)))))

(assert (= (and d!27299 res!50409) b!100513))

(assert (=> d!27299 m!109505))

(assert (=> d!27299 m!109515))

(declare-fun m!111287 () Bool)

(assert (=> d!27299 m!111287))

(declare-fun m!111289 () Bool)

(assert (=> d!27299 m!111289))

(assert (=> d!27299 m!109505))

(assert (=> d!27299 m!109519))

(assert (=> b!99598 d!27299))

(declare-fun d!27301 () Bool)

(assert (=> d!27301 (= (apply!93 (+!131 lt!50183 (tuple2!2309 lt!50186 (minValue!2382 newMap!16))) lt!50168) (apply!93 lt!50183 lt!50168))))

(declare-fun lt!50816 () Unit!2982)

(assert (=> d!27301 (= lt!50816 (choose!610 lt!50183 lt!50186 (minValue!2382 newMap!16) lt!50168))))

(declare-fun e!65441 () Bool)

(assert (=> d!27301 e!65441))

(declare-fun res!50410 () Bool)

(assert (=> d!27301 (=> (not res!50410) (not e!65441))))

(assert (=> d!27301 (= res!50410 (contains!792 lt!50183 lt!50168))))

(assert (=> d!27301 (= (addApplyDifferent!69 lt!50183 lt!50186 (minValue!2382 newMap!16) lt!50168) lt!50816)))

(declare-fun b!100514 () Bool)

(assert (=> b!100514 (= e!65441 (not (= lt!50168 lt!50186)))))

(assert (= (and d!27301 res!50410) b!100514))

(assert (=> d!27301 m!109501))

(assert (=> d!27301 m!109507))

(declare-fun m!111291 () Bool)

(assert (=> d!27301 m!111291))

(declare-fun m!111293 () Bool)

(assert (=> d!27301 m!111293))

(assert (=> d!27301 m!109501))

(assert (=> d!27301 m!109503))

(assert (=> b!99598 d!27301))

(declare-fun d!27303 () Bool)

(assert (=> d!27303 (= (apply!93 lt!50183 lt!50168) (get!1299 (getValueByKey!152 (toList!767 lt!50183) lt!50168)))))

(declare-fun bs!4170 () Bool)

(assert (= bs!4170 d!27303))

(declare-fun m!111295 () Bool)

(assert (=> bs!4170 m!111295))

(assert (=> bs!4170 m!111295))

(declare-fun m!111297 () Bool)

(assert (=> bs!4170 m!111297))

(assert (=> b!99598 d!27303))

(assert (=> b!99598 d!27059))

(declare-fun d!27305 () Bool)

(declare-fun e!65442 () Bool)

(assert (=> d!27305 e!65442))

(declare-fun res!50412 () Bool)

(assert (=> d!27305 (=> (not res!50412) (not e!65442))))

(declare-fun lt!50819 () ListLongMap!1503)

(assert (=> d!27305 (= res!50412 (contains!792 lt!50819 (_1!1165 (tuple2!2309 lt!50173 (minValue!2382 newMap!16)))))))

(declare-fun lt!50818 () List!1568)

(assert (=> d!27305 (= lt!50819 (ListLongMap!1504 lt!50818))))

(declare-fun lt!50817 () Unit!2982)

(declare-fun lt!50820 () Unit!2982)

(assert (=> d!27305 (= lt!50817 lt!50820)))

(assert (=> d!27305 (= (getValueByKey!152 lt!50818 (_1!1165 (tuple2!2309 lt!50173 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50173 (minValue!2382 newMap!16)))))))

(assert (=> d!27305 (= lt!50820 (lemmaContainsTupThenGetReturnValue!68 lt!50818 (_1!1165 (tuple2!2309 lt!50173 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50173 (minValue!2382 newMap!16)))))))

(assert (=> d!27305 (= lt!50818 (insertStrictlySorted!71 (toList!767 lt!50167) (_1!1165 (tuple2!2309 lt!50173 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50173 (minValue!2382 newMap!16)))))))

(assert (=> d!27305 (= (+!131 lt!50167 (tuple2!2309 lt!50173 (minValue!2382 newMap!16))) lt!50819)))

(declare-fun b!100515 () Bool)

(declare-fun res!50411 () Bool)

(assert (=> b!100515 (=> (not res!50411) (not e!65442))))

(assert (=> b!100515 (= res!50411 (= (getValueByKey!152 (toList!767 lt!50819) (_1!1165 (tuple2!2309 lt!50173 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50173 (minValue!2382 newMap!16))))))))

(declare-fun b!100516 () Bool)

(assert (=> b!100516 (= e!65442 (contains!795 (toList!767 lt!50819) (tuple2!2309 lt!50173 (minValue!2382 newMap!16))))))

(assert (= (and d!27305 res!50412) b!100515))

(assert (= (and b!100515 res!50411) b!100516))

(declare-fun m!111299 () Bool)

(assert (=> d!27305 m!111299))

(declare-fun m!111301 () Bool)

(assert (=> d!27305 m!111301))

(declare-fun m!111303 () Bool)

(assert (=> d!27305 m!111303))

(declare-fun m!111305 () Bool)

(assert (=> d!27305 m!111305))

(declare-fun m!111307 () Bool)

(assert (=> b!100515 m!111307))

(declare-fun m!111309 () Bool)

(assert (=> b!100516 m!111309))

(assert (=> b!99598 d!27305))

(declare-fun d!27307 () Bool)

(assert (=> d!27307 (= (apply!93 (+!131 lt!50167 (tuple2!2309 lt!50173 (minValue!2382 newMap!16))) lt!50170) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50167 (tuple2!2309 lt!50173 (minValue!2382 newMap!16)))) lt!50170)))))

(declare-fun bs!4171 () Bool)

(assert (= bs!4171 d!27307))

(declare-fun m!111311 () Bool)

(assert (=> bs!4171 m!111311))

(assert (=> bs!4171 m!111311))

(declare-fun m!111313 () Bool)

(assert (=> bs!4171 m!111313))

(assert (=> b!99598 d!27307))

(declare-fun d!27309 () Bool)

(assert (=> d!27309 (contains!792 (+!131 lt!50178 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16))) lt!50187)))

(declare-fun lt!50821 () Unit!2982)

(assert (=> d!27309 (= lt!50821 (choose!611 lt!50178 lt!50181 (zeroValue!2382 newMap!16) lt!50187))))

(assert (=> d!27309 (contains!792 lt!50178 lt!50187)))

(assert (=> d!27309 (= (addStillContains!69 lt!50178 lt!50181 (zeroValue!2382 newMap!16) lt!50187) lt!50821)))

(declare-fun bs!4172 () Bool)

(assert (= bs!4172 d!27309))

(assert (=> bs!4172 m!109495))

(assert (=> bs!4172 m!109495))

(assert (=> bs!4172 m!109511))

(declare-fun m!111315 () Bool)

(assert (=> bs!4172 m!111315))

(declare-fun m!111317 () Bool)

(assert (=> bs!4172 m!111317))

(assert (=> b!99598 d!27309))

(declare-fun d!27311 () Bool)

(assert (=> d!27311 (= (apply!93 (+!131 lt!50184 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16))) lt!50175) (apply!93 lt!50184 lt!50175))))

(declare-fun lt!50822 () Unit!2982)

(assert (=> d!27311 (= lt!50822 (choose!610 lt!50184 lt!50188 (zeroValue!2382 newMap!16) lt!50175))))

(declare-fun e!65443 () Bool)

(assert (=> d!27311 e!65443))

(declare-fun res!50413 () Bool)

(assert (=> d!27311 (=> (not res!50413) (not e!65443))))

(assert (=> d!27311 (= res!50413 (contains!792 lt!50184 lt!50175))))

(assert (=> d!27311 (= (addApplyDifferent!69 lt!50184 lt!50188 (zeroValue!2382 newMap!16) lt!50175) lt!50822)))

(declare-fun b!100517 () Bool)

(assert (=> b!100517 (= e!65443 (not (= lt!50175 lt!50188)))))

(assert (= (and d!27311 res!50413) b!100517))

(assert (=> d!27311 m!109497))

(assert (=> d!27311 m!109499))

(declare-fun m!111319 () Bool)

(assert (=> d!27311 m!111319))

(declare-fun m!111321 () Bool)

(assert (=> d!27311 m!111321))

(assert (=> d!27311 m!109497))

(assert (=> d!27311 m!109517))

(assert (=> b!99598 d!27311))

(declare-fun d!27313 () Bool)

(assert (=> d!27313 (= (apply!93 lt!50184 lt!50175) (get!1299 (getValueByKey!152 (toList!767 lt!50184) lt!50175)))))

(declare-fun bs!4173 () Bool)

(assert (= bs!4173 d!27313))

(declare-fun m!111323 () Bool)

(assert (=> bs!4173 m!111323))

(assert (=> bs!4173 m!111323))

(declare-fun m!111325 () Bool)

(assert (=> bs!4173 m!111325))

(assert (=> b!99598 d!27313))

(declare-fun d!27315 () Bool)

(declare-fun e!65444 () Bool)

(assert (=> d!27315 e!65444))

(declare-fun res!50415 () Bool)

(assert (=> d!27315 (=> (not res!50415) (not e!65444))))

(declare-fun lt!50825 () ListLongMap!1503)

(assert (=> d!27315 (= res!50415 (contains!792 lt!50825 (_1!1165 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50824 () List!1568)

(assert (=> d!27315 (= lt!50825 (ListLongMap!1504 lt!50824))))

(declare-fun lt!50823 () Unit!2982)

(declare-fun lt!50826 () Unit!2982)

(assert (=> d!27315 (= lt!50823 lt!50826)))

(assert (=> d!27315 (= (getValueByKey!152 lt!50824 (_1!1165 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27315 (= lt!50826 (lemmaContainsTupThenGetReturnValue!68 lt!50824 (_1!1165 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27315 (= lt!50824 (insertStrictlySorted!71 (toList!767 lt!50178) (_1!1165 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27315 (= (+!131 lt!50178 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16))) lt!50825)))

(declare-fun b!100518 () Bool)

(declare-fun res!50414 () Bool)

(assert (=> b!100518 (=> (not res!50414) (not e!65444))))

(assert (=> b!100518 (= res!50414 (= (getValueByKey!152 (toList!767 lt!50825) (_1!1165 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16))))))))

(declare-fun b!100519 () Bool)

(assert (=> b!100519 (= e!65444 (contains!795 (toList!767 lt!50825) (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16))))))

(assert (= (and d!27315 res!50415) b!100518))

(assert (= (and b!100518 res!50414) b!100519))

(declare-fun m!111327 () Bool)

(assert (=> d!27315 m!111327))

(declare-fun m!111329 () Bool)

(assert (=> d!27315 m!111329))

(declare-fun m!111331 () Bool)

(assert (=> d!27315 m!111331))

(declare-fun m!111333 () Bool)

(assert (=> d!27315 m!111333))

(declare-fun m!111335 () Bool)

(assert (=> b!100518 m!111335))

(declare-fun m!111337 () Bool)

(assert (=> b!100519 m!111337))

(assert (=> b!99598 d!27315))

(declare-fun d!27317 () Bool)

(assert (=> d!27317 (= (apply!93 lt!50167 lt!50170) (get!1299 (getValueByKey!152 (toList!767 lt!50167) lt!50170)))))

(declare-fun bs!4174 () Bool)

(assert (= bs!4174 d!27317))

(declare-fun m!111339 () Bool)

(assert (=> bs!4174 m!111339))

(assert (=> bs!4174 m!111339))

(declare-fun m!111341 () Bool)

(assert (=> bs!4174 m!111341))

(assert (=> b!99598 d!27317))

(declare-fun d!27319 () Bool)

(declare-fun e!65445 () Bool)

(assert (=> d!27319 e!65445))

(declare-fun res!50417 () Bool)

(assert (=> d!27319 (=> (not res!50417) (not e!65445))))

(declare-fun lt!50829 () ListLongMap!1503)

(assert (=> d!27319 (= res!50417 (contains!792 lt!50829 (_1!1165 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16)))))))

(declare-fun lt!50828 () List!1568)

(assert (=> d!27319 (= lt!50829 (ListLongMap!1504 lt!50828))))

(declare-fun lt!50827 () Unit!2982)

(declare-fun lt!50830 () Unit!2982)

(assert (=> d!27319 (= lt!50827 lt!50830)))

(assert (=> d!27319 (= (getValueByKey!152 lt!50828 (_1!1165 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27319 (= lt!50830 (lemmaContainsTupThenGetReturnValue!68 lt!50828 (_1!1165 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27319 (= lt!50828 (insertStrictlySorted!71 (toList!767 lt!50184) (_1!1165 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16)))))))

(assert (=> d!27319 (= (+!131 lt!50184 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16))) lt!50829)))

(declare-fun b!100520 () Bool)

(declare-fun res!50416 () Bool)

(assert (=> b!100520 (=> (not res!50416) (not e!65445))))

(assert (=> b!100520 (= res!50416 (= (getValueByKey!152 (toList!767 lt!50829) (_1!1165 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16))))))))

(declare-fun b!100521 () Bool)

(assert (=> b!100521 (= e!65445 (contains!795 (toList!767 lt!50829) (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16))))))

(assert (= (and d!27319 res!50417) b!100520))

(assert (= (and b!100520 res!50416) b!100521))

(declare-fun m!111343 () Bool)

(assert (=> d!27319 m!111343))

(declare-fun m!111345 () Bool)

(assert (=> d!27319 m!111345))

(declare-fun m!111347 () Bool)

(assert (=> d!27319 m!111347))

(declare-fun m!111349 () Bool)

(assert (=> d!27319 m!111349))

(declare-fun m!111351 () Bool)

(assert (=> b!100520 m!111351))

(declare-fun m!111353 () Bool)

(assert (=> b!100521 m!111353))

(assert (=> b!99598 d!27319))

(declare-fun d!27321 () Bool)

(assert (=> d!27321 (= (apply!93 (+!131 lt!50183 (tuple2!2309 lt!50186 (minValue!2382 newMap!16))) lt!50168) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50183 (tuple2!2309 lt!50186 (minValue!2382 newMap!16)))) lt!50168)))))

(declare-fun bs!4175 () Bool)

(assert (= bs!4175 d!27321))

(declare-fun m!111355 () Bool)

(assert (=> bs!4175 m!111355))

(assert (=> bs!4175 m!111355))

(declare-fun m!111357 () Bool)

(assert (=> bs!4175 m!111357))

(assert (=> b!99598 d!27321))

(declare-fun d!27323 () Bool)

(assert (=> d!27323 (= (apply!93 (+!131 lt!50184 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16))) lt!50175) (get!1299 (getValueByKey!152 (toList!767 (+!131 lt!50184 (tuple2!2309 lt!50188 (zeroValue!2382 newMap!16)))) lt!50175)))))

(declare-fun bs!4176 () Bool)

(assert (= bs!4176 d!27323))

(declare-fun m!111359 () Bool)

(assert (=> bs!4176 m!111359))

(assert (=> bs!4176 m!111359))

(declare-fun m!111361 () Bool)

(assert (=> bs!4176 m!111361))

(assert (=> b!99598 d!27323))

(declare-fun d!27325 () Bool)

(declare-fun e!65447 () Bool)

(assert (=> d!27325 e!65447))

(declare-fun res!50418 () Bool)

(assert (=> d!27325 (=> res!50418 e!65447)))

(declare-fun lt!50833 () Bool)

(assert (=> d!27325 (= res!50418 (not lt!50833))))

(declare-fun lt!50832 () Bool)

(assert (=> d!27325 (= lt!50833 lt!50832)))

(declare-fun lt!50831 () Unit!2982)

(declare-fun e!65446 () Unit!2982)

(assert (=> d!27325 (= lt!50831 e!65446)))

(declare-fun c!17269 () Bool)

(assert (=> d!27325 (= c!17269 lt!50832)))

(assert (=> d!27325 (= lt!50832 (containsKey!155 (toList!767 (+!131 lt!50178 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))) lt!50187))))

(assert (=> d!27325 (= (contains!792 (+!131 lt!50178 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16))) lt!50187) lt!50833)))

(declare-fun b!100522 () Bool)

(declare-fun lt!50834 () Unit!2982)

(assert (=> b!100522 (= e!65446 lt!50834)))

(assert (=> b!100522 (= lt!50834 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!767 (+!131 lt!50178 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))) lt!50187))))

(assert (=> b!100522 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50178 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))) lt!50187))))

(declare-fun b!100523 () Bool)

(declare-fun Unit!3047 () Unit!2982)

(assert (=> b!100523 (= e!65446 Unit!3047)))

(declare-fun b!100524 () Bool)

(assert (=> b!100524 (= e!65447 (isDefined!104 (getValueByKey!152 (toList!767 (+!131 lt!50178 (tuple2!2309 lt!50181 (zeroValue!2382 newMap!16)))) lt!50187)))))

(assert (= (and d!27325 c!17269) b!100522))

(assert (= (and d!27325 (not c!17269)) b!100523))

(assert (= (and d!27325 (not res!50418)) b!100524))

(declare-fun m!111363 () Bool)

(assert (=> d!27325 m!111363))

(declare-fun m!111365 () Bool)

(assert (=> b!100522 m!111365))

(declare-fun m!111367 () Bool)

(assert (=> b!100522 m!111367))

(assert (=> b!100522 m!111367))

(declare-fun m!111369 () Bool)

(assert (=> b!100522 m!111369))

(assert (=> b!100524 m!111367))

(assert (=> b!100524 m!111367))

(assert (=> b!100524 m!111369))

(assert (=> b!99598 d!27325))

(declare-fun d!27327 () Bool)

(declare-fun e!65448 () Bool)

(assert (=> d!27327 e!65448))

(declare-fun res!50420 () Bool)

(assert (=> d!27327 (=> (not res!50420) (not e!65448))))

(declare-fun lt!50837 () ListLongMap!1503)

(assert (=> d!27327 (= res!50420 (contains!792 lt!50837 (_1!1165 (tuple2!2309 lt!50186 (minValue!2382 newMap!16)))))))

(declare-fun lt!50836 () List!1568)

(assert (=> d!27327 (= lt!50837 (ListLongMap!1504 lt!50836))))

(declare-fun lt!50835 () Unit!2982)

(declare-fun lt!50838 () Unit!2982)

(assert (=> d!27327 (= lt!50835 lt!50838)))

(assert (=> d!27327 (= (getValueByKey!152 lt!50836 (_1!1165 (tuple2!2309 lt!50186 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50186 (minValue!2382 newMap!16)))))))

(assert (=> d!27327 (= lt!50838 (lemmaContainsTupThenGetReturnValue!68 lt!50836 (_1!1165 (tuple2!2309 lt!50186 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50186 (minValue!2382 newMap!16)))))))

(assert (=> d!27327 (= lt!50836 (insertStrictlySorted!71 (toList!767 lt!50183) (_1!1165 (tuple2!2309 lt!50186 (minValue!2382 newMap!16))) (_2!1165 (tuple2!2309 lt!50186 (minValue!2382 newMap!16)))))))

(assert (=> d!27327 (= (+!131 lt!50183 (tuple2!2309 lt!50186 (minValue!2382 newMap!16))) lt!50837)))

(declare-fun b!100525 () Bool)

(declare-fun res!50419 () Bool)

(assert (=> b!100525 (=> (not res!50419) (not e!65448))))

(assert (=> b!100525 (= res!50419 (= (getValueByKey!152 (toList!767 lt!50837) (_1!1165 (tuple2!2309 lt!50186 (minValue!2382 newMap!16)))) (Some!157 (_2!1165 (tuple2!2309 lt!50186 (minValue!2382 newMap!16))))))))

(declare-fun b!100526 () Bool)

(assert (=> b!100526 (= e!65448 (contains!795 (toList!767 lt!50837) (tuple2!2309 lt!50186 (minValue!2382 newMap!16))))))

(assert (= (and d!27327 res!50420) b!100525))

(assert (= (and b!100525 res!50419) b!100526))

(declare-fun m!111371 () Bool)

(assert (=> d!27327 m!111371))

(declare-fun m!111373 () Bool)

(assert (=> d!27327 m!111373))

(declare-fun m!111375 () Bool)

(assert (=> d!27327 m!111375))

(declare-fun m!111377 () Bool)

(assert (=> d!27327 m!111377))

(declare-fun m!111379 () Bool)

(assert (=> b!100525 m!111379))

(declare-fun m!111381 () Bool)

(assert (=> b!100526 m!111381))

(assert (=> b!99598 d!27327))

(assert (=> bm!10239 d!26645))

(declare-fun d!27329 () Bool)

(assert (=> d!27329 (= (get!1299 (getValueByKey!152 (toList!767 lt!49850) lt!49841)) (v!2823 (getValueByKey!152 (toList!767 lt!49850) lt!49841)))))

(assert (=> d!26673 d!27329))

(declare-fun b!100530 () Bool)

(declare-fun e!65450 () Option!158)

(assert (=> b!100530 (= e!65450 None!156)))

(declare-fun b!100528 () Bool)

(declare-fun e!65449 () Option!158)

(assert (=> b!100528 (= e!65449 e!65450)))

(declare-fun c!17271 () Bool)

(assert (=> b!100528 (= c!17271 (and ((_ is Cons!1564) (toList!767 lt!49850)) (not (= (_1!1165 (h!2159 (toList!767 lt!49850))) lt!49841))))))

(declare-fun b!100527 () Bool)

(assert (=> b!100527 (= e!65449 (Some!157 (_2!1165 (h!2159 (toList!767 lt!49850)))))))

(declare-fun d!27331 () Bool)

(declare-fun c!17270 () Bool)

(assert (=> d!27331 (= c!17270 (and ((_ is Cons!1564) (toList!767 lt!49850)) (= (_1!1165 (h!2159 (toList!767 lt!49850))) lt!49841)))))

(assert (=> d!27331 (= (getValueByKey!152 (toList!767 lt!49850) lt!49841) e!65449)))

(declare-fun b!100529 () Bool)

(assert (=> b!100529 (= e!65450 (getValueByKey!152 (t!5534 (toList!767 lt!49850)) lt!49841))))

(assert (= (and d!27331 c!17270) b!100527))

(assert (= (and d!27331 (not c!17270)) b!100528))

(assert (= (and b!100528 c!17271) b!100529))

(assert (= (and b!100528 (not c!17271)) b!100530))

(declare-fun m!111383 () Bool)

(assert (=> b!100529 m!111383))

(assert (=> d!26673 d!27331))

(declare-fun b!100533 () Bool)

(declare-fun res!50423 () Bool)

(declare-fun e!65451 () Bool)

(assert (=> b!100533 (=> (not res!50423) (not e!65451))))

(assert (=> b!100533 (= res!50423 (= (size!2269 (_2!1164 lt!49941)) (bvadd (_size!477 (_2!1164 lt!49941)) (bvsdiv (bvadd (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!100532 () Bool)

(declare-fun res!50421 () Bool)

(assert (=> b!100532 (=> (not res!50421) (not e!65451))))

(assert (=> b!100532 (= res!50421 (bvsge (size!2269 (_2!1164 lt!49941)) (_size!477 (_2!1164 lt!49941))))))

(declare-fun b!100534 () Bool)

(assert (=> b!100534 (= e!65451 (and (bvsge (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000000) (bvsle (extraKeys!2318 (_2!1164 lt!49941)) #b00000000000000000000000000000011) (bvsge (_vacant!477 (_2!1164 lt!49941)) #b00000000000000000000000000000000)))))

(declare-fun d!27333 () Bool)

(declare-fun res!50422 () Bool)

(assert (=> d!27333 (=> (not res!50422) (not e!65451))))

(assert (=> d!27333 (= res!50422 (validMask!0 (mask!6608 (_2!1164 lt!49941))))))

(assert (=> d!27333 (= (simpleValid!69 (_2!1164 lt!49941)) e!65451)))

(declare-fun b!100531 () Bool)

(declare-fun res!50424 () Bool)

(assert (=> b!100531 (=> (not res!50424) (not e!65451))))

(assert (=> b!100531 (= res!50424 (and (= (size!2264 (_values!2484 (_2!1164 lt!49941))) (bvadd (mask!6608 (_2!1164 lt!49941)) #b00000000000000000000000000000001)) (= (size!2263 (_keys!4195 (_2!1164 lt!49941))) (size!2264 (_values!2484 (_2!1164 lt!49941)))) (bvsge (_size!477 (_2!1164 lt!49941)) #b00000000000000000000000000000000) (bvsle (_size!477 (_2!1164 lt!49941)) (bvadd (mask!6608 (_2!1164 lt!49941)) #b00000000000000000000000000000001))))))

(assert (= (and d!27333 res!50422) b!100531))

(assert (= (and b!100531 res!50424) b!100532))

(assert (= (and b!100532 res!50421) b!100533))

(assert (= (and b!100533 res!50423) b!100534))

(declare-fun m!111385 () Bool)

(assert (=> b!100533 m!111385))

(assert (=> b!100532 m!111385))

(assert (=> d!27333 m!109991))

(assert (=> d!26651 d!27333))

(declare-fun b!100538 () Bool)

(declare-fun e!65453 () Option!158)

(assert (=> b!100538 (= e!65453 None!156)))

(declare-fun b!100536 () Bool)

(declare-fun e!65452 () Option!158)

(assert (=> b!100536 (= e!65452 e!65453)))

(declare-fun c!17273 () Bool)

(assert (=> b!100536 (= c!17273 (and ((_ is Cons!1564) (toList!767 lt!50050)) (not (= (_1!1165 (h!2159 (toList!767 lt!50050))) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))))

(declare-fun b!100535 () Bool)

(assert (=> b!100535 (= e!65452 (Some!157 (_2!1165 (h!2159 (toList!767 lt!50050)))))))

(declare-fun c!17272 () Bool)

(declare-fun d!27335 () Bool)

(assert (=> d!27335 (= c!17272 (and ((_ is Cons!1564) (toList!767 lt!50050)) (= (_1!1165 (h!2159 (toList!767 lt!50050))) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992))))))))))

(assert (=> d!27335 (= (getValueByKey!152 (toList!767 lt!50050) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))) e!65452)))

(declare-fun b!100537 () Bool)

(assert (=> b!100537 (= e!65453 (getValueByKey!152 (t!5534 (toList!767 lt!50050)) (_1!1165 (tuple2!2309 lt!49847 (zeroValue!2382 (v!2817 (underlying!341 thiss!992)))))))))

(assert (= (and d!27335 c!17272) b!100535))

(assert (= (and d!27335 (not c!17272)) b!100536))

(assert (= (and b!100536 c!17273) b!100537))

(assert (= (and b!100536 (not c!17273)) b!100538))

(declare-fun m!111387 () Bool)

(assert (=> b!100537 m!111387))

(assert (=> b!99447 d!27335))

(declare-fun mapIsEmpty!3785 () Bool)

(declare-fun mapRes!3785 () Bool)

(assert (=> mapIsEmpty!3785 mapRes!3785))

(declare-fun b!100540 () Bool)

(declare-fun e!65454 () Bool)

(assert (=> b!100540 (= e!65454 tp_is_empty!2635)))

(declare-fun condMapEmpty!3785 () Bool)

(declare-fun mapDefault!3785 () ValueCell!974)

(assert (=> mapNonEmpty!3783 (= condMapEmpty!3785 (= mapRest!3783 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3785)))))

(assert (=> mapNonEmpty!3783 (= tp!9633 (and e!65454 mapRes!3785))))

(declare-fun b!100539 () Bool)

(declare-fun e!65455 () Bool)

(assert (=> b!100539 (= e!65455 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3785 () Bool)

(declare-fun tp!9635 () Bool)

(assert (=> mapNonEmpty!3785 (= mapRes!3785 (and tp!9635 e!65455))))

(declare-fun mapValue!3785 () ValueCell!974)

(declare-fun mapKey!3785 () (_ BitVec 32))

(declare-fun mapRest!3785 () (Array (_ BitVec 32) ValueCell!974))

(assert (=> mapNonEmpty!3785 (= mapRest!3783 (store mapRest!3785 mapKey!3785 mapValue!3785))))

(assert (= (and mapNonEmpty!3783 condMapEmpty!3785) mapIsEmpty!3785))

(assert (= (and mapNonEmpty!3783 (not condMapEmpty!3785)) mapNonEmpty!3785))

(assert (= (and mapNonEmpty!3785 ((_ is ValueCellFull!974) mapValue!3785)) b!100539))

(assert (= (and mapNonEmpty!3783 ((_ is ValueCellFull!974) mapDefault!3785)) b!100540))

(declare-fun m!111389 () Bool)

(assert (=> mapNonEmpty!3785 m!111389))

(declare-fun mapIsEmpty!3786 () Bool)

(declare-fun mapRes!3786 () Bool)

(assert (=> mapIsEmpty!3786 mapRes!3786))

(declare-fun b!100542 () Bool)

(declare-fun e!65456 () Bool)

(assert (=> b!100542 (= e!65456 tp_is_empty!2635)))

(declare-fun condMapEmpty!3786 () Bool)

(declare-fun mapDefault!3786 () ValueCell!974)

(assert (=> mapNonEmpty!3784 (= condMapEmpty!3786 (= mapRest!3784 ((as const (Array (_ BitVec 32) ValueCell!974)) mapDefault!3786)))))

(assert (=> mapNonEmpty!3784 (= tp!9634 (and e!65456 mapRes!3786))))

(declare-fun b!100541 () Bool)

(declare-fun e!65457 () Bool)

(assert (=> b!100541 (= e!65457 tp_is_empty!2635)))

(declare-fun mapNonEmpty!3786 () Bool)

(declare-fun tp!9636 () Bool)

(assert (=> mapNonEmpty!3786 (= mapRes!3786 (and tp!9636 e!65457))))

(declare-fun mapRest!3786 () (Array (_ BitVec 32) ValueCell!974))

(declare-fun mapValue!3786 () ValueCell!974)

(declare-fun mapKey!3786 () (_ BitVec 32))

(assert (=> mapNonEmpty!3786 (= mapRest!3784 (store mapRest!3786 mapKey!3786 mapValue!3786))))

(assert (= (and mapNonEmpty!3784 condMapEmpty!3786) mapIsEmpty!3786))

(assert (= (and mapNonEmpty!3784 (not condMapEmpty!3786)) mapNonEmpty!3786))

(assert (= (and mapNonEmpty!3786 ((_ is ValueCellFull!974) mapValue!3786)) b!100541))

(assert (= (and mapNonEmpty!3784 ((_ is ValueCellFull!974) mapDefault!3786)) b!100542))

(declare-fun m!111391 () Bool)

(assert (=> mapNonEmpty!3786 m!111391))

(declare-fun b_lambda!4483 () Bool)

(assert (= b_lambda!4477 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4483)))

(declare-fun b_lambda!4485 () Bool)

(assert (= b_lambda!4463 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4485)))

(declare-fun b_lambda!4487 () Bool)

(assert (= b_lambda!4459 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4487)))

(declare-fun b_lambda!4489 () Bool)

(assert (= b_lambda!4481 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4489)))

(declare-fun b_lambda!4491 () Bool)

(assert (= b_lambda!4467 (or (and b!98943 b_free!2437) (and b!98935 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))))) b_lambda!4491)))

(declare-fun b_lambda!4493 () Bool)

(assert (= b_lambda!4453 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4493)))

(declare-fun b_lambda!4495 () Bool)

(assert (= b_lambda!4465 (or (and b!98943 b_free!2437) (and b!98935 b_free!2439 (= (defaultEntry!2501 newMap!16) (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))))) b_lambda!4495)))

(declare-fun b_lambda!4497 () Bool)

(assert (= b_lambda!4473 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4497)))

(declare-fun b_lambda!4499 () Bool)

(assert (= b_lambda!4469 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4499)))

(declare-fun b_lambda!4501 () Bool)

(assert (= b_lambda!4475 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4501)))

(declare-fun b_lambda!4503 () Bool)

(assert (= b_lambda!4455 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4503)))

(declare-fun b_lambda!4505 () Bool)

(assert (= b_lambda!4457 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4505)))

(declare-fun b_lambda!4507 () Bool)

(assert (= b_lambda!4471 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4507)))

(declare-fun b_lambda!4509 () Bool)

(assert (= b_lambda!4479 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4509)))

(declare-fun b_lambda!4511 () Bool)

(assert (= b_lambda!4451 (or (and b!98943 b_free!2437 (= (defaultEntry!2501 (v!2817 (underlying!341 thiss!992))) (defaultEntry!2501 newMap!16))) (and b!98935 b_free!2439) b_lambda!4511)))

(check-sat (not b!100210) (not d!27033) (not bm!10251) (not bm!10318) (not b!99765) (not b!100222) (not b!100178) (not d!27005) (not b_lambda!4491) (not b!100217) (not b!99768) (not d!26833) (not b!100537) (not bm!10282) (not b!99837) (not b!99680) (not b_lambda!4449) (not b!100168) (not b!99774) (not b!100201) (not d!26983) (not b!100273) (not d!27207) (not b!99770) (not d!27303) (not bm!10292) (not d!27123) (not d!27305) (not d!26835) (not bm!10254) (not b!100093) (not d!27257) (not b!100402) (not d!27243) (not b!100038) (not b!100154) (not b!100501) (not b!100310) (not b!100197) (not b!99711) (not d!26823) tp_is_empty!2635 (not b_lambda!4485) (not bm!10261) (not b!99745) (not d!26849) (not b!100037) (not b!99995) (not b!100444) (not b!99897) (not bm!10308) (not b!100370) (not d!27107) (not b!99696) (not b!100284) (not d!27189) (not b!99887) (not d!27239) b_and!6185 (not b!100017) (not b!100503) (not b!100312) (not b!100413) (not b!100057) (not b!100496) (not b!100255) (not d!27131) (not d!27075) (not b!100277) (not b!100260) (not b!100135) (not mapNonEmpty!3786) (not b!100155) (not b!100429) (not b!100248) (not bm!10330) (not d!26963) (not b!100189) (not b!99989) (not b!99870) (not b!99694) (not b!100509) (not d!26987) (not b!100494) (not b!100005) (not d!26989) (not b!100014) (not b!99752) (not b!100126) (not b!100064) (not b!100396) (not b!100003) (not d!27325) (not b!99822) (not b!100256) (not b_lambda!4443) (not d!27043) (not d!26815) (not b!100122) (not b!100146) (not bm!10268) (not d!27093) (not b!100320) b_and!6187 (not bm!10319) (not b!100117) (not b!100166) (not b!99964) (not d!26973) (not b!100351) (not d!27119) (not b!99759) (not b!100097) (not b_lambda!4425) (not b!99981) (not d!26925) (not b!100386) (not b!100118) (not b!100161) (not b!100278) (not d!27059) (not bm!10326) (not d!27275) (not d!26991) (not b!99980) (not b!99802) (not d!26915) (not b!100448) (not b!100212) (not b!100291) (not b!100390) (not d!27027) (not b!100423) (not b!99763) (not b!100209) (not d!26807) (not d!27165) (not d!27211) (not b!100206) (not b!99994) (not d!27025) (not b!100360) (not b!100237) (not d!27317) (not b!100202) (not b!100522) (not b!100085) (not d!26965) (not d!27217) (not b!99996) (not b!99971) (not d!26777) (not b!100031) (not d!27161) (not d!27127) (not d!26869) (not b!100521) (not b!100317) (not mapNonEmpty!3785) (not b!99851) (not b!99978) (not d!27007) (not b!99840) (not b!100441) (not d!26893) (not b!100368) (not b!100013) (not b!100001) (not b!99928) (not d!26881) (not b!100313) (not d!26939) (not b!99955) (not bm!10336) (not d!27051) (not b!100349) (not d!27177) (not b!99742) (not b!100344) (not d!26817) (not b!99819) (not d!27191) (not b!100469) (not b!99730) (not d!27259) (not b!100434) (not b!100158) (not b!99874) (not d!27219) (not b!100453) (not d!26913) (not bm!10276) (not b!100109) (not b!99757) (not d!26953) (not bm!10306) (not b!99893) (not d!26933) (not b!100177) (not bm!10289) (not b!100129) (not b!100381) (not b!99847) (not b!100407) (not b!100529) (not b!100251) (not b!100466) (not b!99900) (not b!100103) (not b!99882) (not b!100112) (not b!100398) (not b!99966) (not bm!10283) (not b!99984) (not bm!10297) (not b!99855) (not b_lambda!4497) (not b!100420) (not b!99857) (not b!99916) (not b!100046) (not d!26883) (not d!26799) (not d!26805) (not d!27327) (not d!27009) (not d!27115) (not d!26829) (not b!100394) (not d!26783) (not d!27237) (not b!100499) (not b!100357) (not d!26867) (not b!99771) (not d!27137) (not bm!10258) (not bm!10244) (not d!26865) (not d!27167) (not b!99690) (not d!27223) (not b!100119) (not bm!10281) (not b!100267) (not b!99808) (not b!100081) (not b!99689) (not bm!10259) (not d!26819) (not bm!10285) (not bm!10267) (not d!27077) (not b!100207) (not b!100525) (not bm!10329) (not d!27011) (not d!26899) (not d!27319) (not d!27085) (not d!27069) (not b!99952) (not b!99864) (not b!99762) (not b!100032) (not b!99968) (not d!26975) (not b!100025) (not b_next!2437) (not d!27087) (not b!99999) (not b!100288) (not b!100516) (not b!100104) (not b_lambda!4503) (not b!100257) (not b_lambda!4483) (not d!27263) (not d!27323) (not b!100060) (not b!99824) (not d!27099) (not d!26929) (not b!100138) (not d!26879) (not d!27109) (not d!27261) (not d!26875) (not b!100369) (not b!99949) (not b!100062) (not d!27103) (not b!99876) (not b!99974) (not b!99710) (not d!27143) (not b!100049) (not bm!10312) (not b!100181) (not d!27133) (not b!100159) (not d!27081) (not b!100194) (not b!99747) (not b!99967) (not b!100428) (not b!99817) (not b!100417) (not b!100446) (not b!99810) (not b!100244) (not d!27071) (not bm!10316) (not b!100196) (not b!100305) (not d!26997) (not d!26947) (not b!99875) (not b!99921) (not b!100080) (not d!27269) (not d!27333) (not b!100051) (not b!99733) (not b!100094) (not d!27135) (not b!99818) (not b!100140) (not b!100241) (not b!99740) (not b!100034) (not b!100354) (not b_lambda!4499) (not d!26949) (not b_lambda!4495) (not b_lambda!4489) (not b!100053) (not b!100221) (not b!100115) (not b!99835) (not b!100110) (not d!26931) (not b!99898) (not bm!10300) (not b!100125) (not d!26831) (not d!26995) (not b!100246) (not b!100436) (not b_lambda!4509) (not b!100258) (not b_lambda!4421) (not d!27079) (not d!26967) (not d!27073) (not b!100157) (not d!27031) (not b_lambda!4441) (not b!99908) (not b!99800) (not b_lambda!4439) (not b_next!2439) (not b_lambda!4507) (not b!99880) (not b!100342) (not b!100263) (not d!27279) (not b!100520) (not b!100045) (not b!100526) (not b_lambda!4487) (not b!100341) (not d!26985) (not d!26789) (not b!99736) (not d!26891) (not b_lambda!4447) (not d!26923) (not d!27195) (not b!100047) (not d!27199) (not b!99758) (not b!99959) (not b!100424) (not b!100223) (not bm!10284) (not d!27301) (not b!100286) (not d!27111) (not b!100225) (not bm!10265) (not d!26785) (not d!27321) (not d!26859) (not d!27173) (not d!26787) (not b!100092) (not b!99838) (not b!100515) (not bm!10301) (not b!100148) (not bm!10290) (not bm!10328) (not bm!10314) (not b!100030) (not b!99751) (not b!100425) (not b!99853) (not b!100022) (not d!27299) (not d!27141) (not b!100176) (not b!100144) (not b!100213) (not b!99684) (not b!100171) (not d!27055) (not b!100019) (not b!100073) (not b!100439) (not d!27001) (not b!99905) (not b!100075) (not b!100432) (not d!27307) (not d!27019) (not d!27249) (not b!100236) (not b!100455) (not d!27185) (not d!26955) (not d!26909) (not b!100048) (not d!26811) (not d!27179) (not b!99827) (not b!100314) (not d!27205) (not b!100099) (not b!100042) (not bm!10299) (not d!26779) (not b!100374) (not b!100078) (not b!100384) (not b!99755) (not d!26889) (not d!26981) (not d!27139) (not b!99832) (not b!100266) (not d!26927) (not b!100415) (not b!100059) (not b!100239) (not d!27311) (not b!99865) (not b!100052) (not bm!10279) (not d!27155) (not b!100169) (not b!100300) (not b!99961) (not b!100035) (not b!100012) (not d!27273) (not b!100400) (not b!100101) (not b!100524) (not b!99692) (not b!99679) (not b!100302) (not b!100234) (not d!27039) (not d!27203) (not b!99708) (not b!100506) (not b!99767) (not bm!10303) (not d!26843) (not d!27095) (not d!26885) (not b!99987) (not b!100533) (not b_lambda!4505) (not d!26887) (not b!100121) (not b!99895) (not b!100113) (not b!100442) (not b!99769) (not b!100372) (not d!27183) (not d!27053) (not bm!10335) (not d!27281) (not b!100307) (not d!26861) (not bm!10250) (not b!100069) (not d!27197) (not d!27309) (not d!26873) (not d!27057) (not d!27091) (not b!100020) (not b!100376) (not b!99829) (not d!26919) (not d!27265) (not d!27117) (not b!100010) (not d!27129) (not b!100304) (not b!99991) (not b!99894) (not b!100532) (not bm!10295) (not b!99852) (not b!100326) (not b_lambda!4461) (not d!26839) (not b!100028) (not d!27037) (not b!99707) (not b_lambda!4511) (not b!100462) (not b!99815) (not b!100463) (not d!27291) (not b!100124) (not bm!10327) (not bm!10266) (not b!100519) (not d!26827) (not b!100015) (not d!27313) (not b!99772) (not bm!10320) (not b!99688) (not d!27171) (not bm!10252) (not b!100147) (not b_lambda!4445) (not bm!10248) (not b!100199) (not b!99843) (not b!100364) (not b!100141) (not bm!10324) (not d!27287) (not d!26999) (not b!100200) (not b!100279) (not b!99901) (not b!100427) (not d!27253) (not d!26993) (not bm!10287) (not d!27245) (not b!99911) (not b!99748) (not b!100039) (not bm!10263) (not b!99701) (not b!100162) (not b!100395) (not d!27015) (not b!100102) (not b!100153) (not b!99754) (not d!26943) (not d!27153) (not b!99918) (not d!27061) (not b!100294) (not b!100072) (not b!100008) (not b!99812) (not b!100458) (not b!100518) (not b!100438) (not d!27163) (not b!100227) (not b!100502) (not d!27295) (not b!99713) (not d!27003) (not b!100287) (not b!100348) (not bm!10246) (not d!27315) (not d!26851) (not bm!10256) (not b!99814) (not d!27201) (not b!100174) (not d!26795) (not b!100066) (not d!26813) (not b!100265) (not b!100331) (not d!26801) (not b!99914) (not b!99805) (not b!100382) (not b!100229) (not d!27067) (not b!100143) (not d!27045) (not d!26821) (not b!99902) (not b!100055) (not d!27013) (not b!100054) (not b!99890) (not d!27209) (not d!26825) (not b!100281) (not b!100450) (not b!100205) (not b!100107) (not d!27267) (not b!99732) (not bm!10338) (not d!27035) (not b!100136) (not b!100451) (not d!27121) (not d!27113) (not b!100410) (not b!100270) (not b!99811) (not b!99878) (not b_lambda!4493) (not b!99927) (not b!99841) (not d!27125) (not b!100253) (not b!100211) (not b!99993) (not b!99859) (not b!100345) (not d!27289) (not bm!10249) (not b!100184) (not b_lambda!4501) (not b!100082) (not bm!10310) (not bm!10322) (not d!26781) (not d!27297) (not d!26809) (not b!100088) (not b!99866))
(check-sat b_and!6185 b_and!6187 (not b_next!2437) (not b_next!2439))
