; Options: -q --produce-models --incremental --print-success --lang smt2.6
(declare-fun start!135576 () Bool)

(assert start!135576)

(declare-fun res!1075755 () Bool)

(declare-fun e!878078 () Bool)

(assert (=> start!135576 (=> (not res!1075755) (not e!878078))))

(declare-fun mask!898 () (_ BitVec 32))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> start!135576 (= res!1075755 (validMask!0 mask!898))))

(assert (=> start!135576 e!878078))

(assert (=> start!135576 true))

(declare-datatypes ((array!105264 0))(
  ( (array!105265 (arr!50779 (Array (_ BitVec 32) (_ BitVec 64))) (size!51329 (_ BitVec 32))) )
))
(declare-fun _keys!605 () array!105264)

(declare-fun array_inv!39506 (array!105264) Bool)

(assert (=> start!135576 (array_inv!39506 _keys!605)))

(declare-fun b!1574461 () Bool)

(declare-fun res!1075754 () Bool)

(assert (=> b!1574461 (=> (not res!1075754) (not e!878078))))

(assert (=> b!1574461 (= res!1075754 (and (bvsge mask!898 #b00000000000000000000000000000000) (= (size!51329 _keys!605) (bvadd #b00000000000000000000000000000001 mask!898))))))

(declare-fun b!1574462 () Bool)

(declare-fun res!1075753 () Bool)

(assert (=> b!1574462 (=> (not res!1075753) (not e!878078))))

(declare-fun k!761 () (_ BitVec 64))

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!1574462 (= res!1075753 (validKeyInArray!0 k!761))))

(declare-fun b!1574463 () Bool)

(declare-fun lt!674806 () (_ BitVec 32))

(assert (=> b!1574463 (= e!878078 (or (bvslt lt!674806 #b00000000000000000000000000000000) (bvsge lt!674806 (bvadd #b00000000000000000000000000000001 mask!898))))))

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!1574463 (= lt!674806 (toIndex!0 k!761 mask!898))))

(assert (= (and start!135576 res!1075755) b!1574461))

(assert (= (and b!1574461 res!1075754) b!1574462))

(assert (= (and b!1574462 res!1075753) b!1574463))

(declare-fun m!1447693 () Bool)

(assert (=> start!135576 m!1447693))

(declare-fun m!1447695 () Bool)

(assert (=> start!135576 m!1447695))

(declare-fun m!1447697 () Bool)

(assert (=> b!1574462 m!1447697))

(declare-fun m!1447699 () Bool)

(assert (=> b!1574463 m!1447699))

(push 1)

(assert (not b!1574463))

(assert (not start!135576))

(assert (not b!1574462))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!165221 () Bool)

(declare-fun lt!674824 () (_ BitVec 32))

(declare-fun lt!674823 () (_ BitVec 32))

(assert (=> d!165221 (= lt!674824 (bvmul (bvxor lt!674823 (bvlshr lt!674823 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!165221 (= lt!674823 ((_ extract 31 0) (bvand (bvxor k!761 (bvlshr k!761 #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!165221 (and (bvsge mask!898 #b00000000000000000000000000000000) (let ((res!1075775 (let ((h!38250 ((_ extract 31 0) (bvand (bvxor k!761 (bvlshr k!761 #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!141937 (bvmul (bvxor h!38250 (bvlshr h!38250 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!141937 (bvlshr x!141937 #b00000000000000000000000000001101)) mask!898))))) (and (bvslt res!1075775 (bvadd mask!898 #b00000000000000000000000000000001)) (bvsge res!1075775 #b00000000000000000000000000000000))))))

(assert (=> d!165221 (= (toIndex!0 k!761 mask!898) (bvand (bvxor lt!674824 (bvlshr lt!674824 #b00000000000000000000000000001101)) mask!898))))

(assert (=> b!1574463 d!165221))

(declare-fun d!165227 () Bool)

(assert (=> d!165227 (= (validMask!0 mask!898) (and (or (= mask!898 #b00000000000000000000000000000111) (= mask!898 #b00000000000000000000000000001111) (= mask!898 #b00000000000000000000000000011111) (= mask!898 #b00000000000000000000000000111111) (= mask!898 #b00000000000000000000000001111111) (= mask!898 #b00000000000000000000000011111111) (= mask!898 #b00000000000000000000000111111111) (= mask!898 #b00000000000000000000001111111111) (= mask!898 #b00000000000000000000011111111111) (= mask!898 #b00000000000000000000111111111111) (= mask!898 #b00000000000000000001111111111111) (= mask!898 #b00000000000000000011111111111111) (= mask!898 #b00000000000000000111111111111111) (= mask!898 #b00000000000000001111111111111111) (= mask!898 #b00000000000000011111111111111111) (= mask!898 #b00000000000000111111111111111111) (= mask!898 #b00000000000001111111111111111111) (= mask!898 #b00000000000011111111111111111111) (= mask!898 #b00000000000111111111111111111111) (= mask!898 #b00000000001111111111111111111111) (= mask!898 #b00000000011111111111111111111111) (= mask!898 #b00000000111111111111111111111111) (= mask!898 #b00000001111111111111111111111111) (= mask!898 #b00000011111111111111111111111111) (= mask!898 #b00000111111111111111111111111111) (= mask!898 #b00001111111111111111111111111111) (= mask!898 #b00011111111111111111111111111111) (= mask!898 #b00111111111111111111111111111111)) (bvsle mask!898 #b00111111111111111111111111111111)))))

(assert (=> start!135576 d!165227))

(declare-fun d!165237 () Bool)

(assert (=> d!165237 (= (array_inv!39506 _keys!605) (bvsge (size!51329 _keys!605) #b00000000000000000000000000000000))))

(assert (=> start!135576 d!165237))

(declare-fun d!165239 () Bool)

(assert (=> d!165239 (= (validKeyInArray!0 k!761) (and (not (= k!761 #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= k!761 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!1574462 d!165239))

(push 1)

(check-sat)

