; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!3488 () Bool)

(assert start!3488)

(declare-fun b!23087 () Bool)

(declare-fun b_free!757 () Bool)

(declare-fun b_next!757 () Bool)

(assert (=> b!23087 (= b_free!757 (not b_next!757))))

(declare-fun tp!3517 () Bool)

(declare-fun b_and!1473 () Bool)

(assert (=> b!23087 (= tp!3517 b_and!1473)))

(declare-fun b!23085 () Bool)

(declare-fun e!14996 () Bool)

(declare-datatypes ((V!1187 0))(
  ( (V!1188 (val!537 Int)) )
))
(declare-datatypes ((ValueCell!311 0))(
  ( (ValueCellFull!311 (v!1601 V!1187)) (EmptyCell!311) )
))
(declare-datatypes ((array!1261 0))(
  ( (array!1262 (arr!596 (Array (_ BitVec 32) ValueCell!311)) (size!692 (_ BitVec 32))) )
))
(declare-datatypes ((array!1263 0))(
  ( (array!1264 (arr!597 (Array (_ BitVec 32) (_ BitVec 64))) (size!693 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!208 0))(
  ( (LongMapFixedSize!209 (defaultEntry!1742 Int) (mask!4729 (_ BitVec 32)) (extraKeys!1640 (_ BitVec 32)) (zeroValue!1665 V!1187) (minValue!1665 V!1187) (_size!149 (_ BitVec 32)) (_keys!3163 array!1263) (_values!1728 array!1261) (_vacant!149 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!208 0))(
  ( (Cell!209 (v!1602 LongMapFixedSize!208)) )
))
(declare-datatypes ((LongMap!208 0))(
  ( (LongMap!209 (underlying!115 Cell!208)) )
))
(declare-fun thiss!938 () LongMap!208)

(assert (=> b!23085 (= e!14996 (not (= (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) (bvadd #b00000000000000000000000000000001 (mask!4729 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!23086 () Bool)

(declare-fun c!2932 () Bool)

(declare-fun lt!8144 () Bool)

(assert (=> b!23086 (= c!2932 (and (not (= (bvand (extraKeys!1640 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) lt!8144))))

(declare-datatypes ((tuple2!960 0))(
  ( (tuple2!961 (_1!489 Bool) (_2!489 Cell!208)) )
))
(declare-fun e!14998 () tuple2!960)

(declare-fun e!15002 () tuple2!960)

(assert (=> b!23086 (= e!14998 e!15002)))

(declare-fun res!14300 () Bool)

(declare-fun e!15004 () Bool)

(assert (=> start!3488 (=> (not res!14300) (not e!15004))))

(declare-fun valid!119 (LongMap!208) Bool)

(assert (=> start!3488 (= res!14300 (valid!119 thiss!938))))

(assert (=> start!3488 e!15004))

(declare-fun e!14994 () Bool)

(assert (=> start!3488 e!14994))

(declare-fun tp_is_empty!1021 () Bool)

(declare-fun e!14999 () Bool)

(declare-fun e!15005 () Bool)

(declare-fun array_inv!421 (array!1263) Bool)

(declare-fun array_inv!422 (array!1261) Bool)

(assert (=> b!23087 (= e!14999 (and tp!3517 tp_is_empty!1021 (array_inv!421 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) (array_inv!422 (_values!1728 (v!1602 (underlying!115 thiss!938)))) e!15005))))

(declare-fun b!23088 () Bool)

(declare-fun e!15003 () tuple2!960)

(assert (=> b!23088 (= e!15003 e!14998)))

(declare-fun c!2931 () Bool)

(assert (=> b!23088 (= c!2931 (and (not lt!8144) (= (bvand (extraKeys!1640 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23089 () Bool)

(declare-datatypes ((tuple2!962 0))(
  ( (tuple2!963 (_1!490 Bool) (_2!490 LongMapFixedSize!208)) )
))
(declare-fun lt!8140 () tuple2!962)

(declare-fun call!1850 () tuple2!962)

(assert (=> b!23089 (= lt!8140 call!1850)))

(assert (=> b!23089 (= e!14998 (tuple2!961 (_1!490 lt!8140) (Cell!209 (_2!490 lt!8140))))))

(declare-fun b!23090 () Bool)

(declare-fun lt!8142 () tuple2!962)

(declare-fun lt!8145 () tuple2!962)

(assert (=> b!23090 (= e!15003 (tuple2!961 (and (_1!490 lt!8142) (_1!490 lt!8145)) (Cell!209 (_2!490 lt!8145))))))

(declare-fun call!1849 () tuple2!962)

(assert (=> b!23090 (= lt!8142 call!1849)))

(declare-fun update!41 (LongMapFixedSize!208 (_ BitVec 64) V!1187) tuple2!962)

(assert (=> b!23090 (= lt!8145 (update!41 (_2!490 lt!8142) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun bm!1846 () Bool)

(assert (=> bm!1846 (= call!1850 call!1849)))

(declare-fun mapIsEmpty!1022 () Bool)

(declare-fun mapRes!1022 () Bool)

(assert (=> mapIsEmpty!1022 mapRes!1022))

(declare-fun b!23091 () Bool)

(declare-fun e!14997 () Bool)

(assert (=> b!23091 (= e!14997 e!14999)))

(declare-fun b!23092 () Bool)

(declare-fun lt!8141 () LongMapFixedSize!208)

(assert (=> b!23092 (= e!15002 (tuple2!961 true (Cell!209 lt!8141)))))

(declare-fun b!23093 () Bool)

(declare-fun e!15000 () Bool)

(assert (=> b!23093 (= e!15000 tp_is_empty!1021)))

(declare-fun c!2933 () Bool)

(declare-fun bm!1847 () Bool)

(assert (=> bm!1847 (= call!1849 (update!41 lt!8141 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun b!23094 () Bool)

(declare-fun res!14301 () Bool)

(assert (=> b!23094 (=> (not res!14301) (not e!14996))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!23094 (= res!14301 (validMask!0 (mask!4729 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun b!23095 () Bool)

(assert (=> b!23095 (= e!15004 e!14996)))

(declare-fun res!14302 () Bool)

(assert (=> b!23095 (=> (not res!14302) (not e!14996))))

(assert (=> b!23095 (= res!14302 (_1!489 e!15003))))

(assert (=> b!23095 (= c!2933 (and (not lt!8144) (not (= (bvand (extraKeys!1640 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> b!23095 (= lt!8144 (= (bvand (extraKeys!1640 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000001) #b00000000000000000000000000000000))))

(declare-fun getNewLongMapFixedSize!37 ((_ BitVec 32) Int) LongMapFixedSize!208)

(declare-fun computeNewMask!32 (LongMap!208 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!23095 (= lt!8141 (getNewLongMapFixedSize!37 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun b!23096 () Bool)

(declare-fun lt!8143 () tuple2!962)

(assert (=> b!23096 (= e!15002 (tuple2!961 (_1!490 lt!8143) (Cell!209 (_2!490 lt!8143))))))

(assert (=> b!23096 (= lt!8143 call!1850)))

(declare-fun mapNonEmpty!1022 () Bool)

(declare-fun tp!3518 () Bool)

(assert (=> mapNonEmpty!1022 (= mapRes!1022 (and tp!3518 e!15000))))

(declare-fun mapValue!1022 () ValueCell!311)

(declare-fun mapKey!1022 () (_ BitVec 32))

(declare-fun mapRest!1022 () (Array (_ BitVec 32) ValueCell!311))

(assert (=> mapNonEmpty!1022 (= (arr!596 (_values!1728 (v!1602 (underlying!115 thiss!938)))) (store mapRest!1022 mapKey!1022 mapValue!1022))))

(declare-fun b!23097 () Bool)

(declare-fun e!14995 () Bool)

(assert (=> b!23097 (= e!14995 tp_is_empty!1021)))

(declare-fun b!23098 () Bool)

(assert (=> b!23098 (= e!15005 (and e!14995 mapRes!1022))))

(declare-fun condMapEmpty!1022 () Bool)

(declare-fun mapDefault!1022 () ValueCell!311)

(assert (=> b!23098 (= condMapEmpty!1022 (= (arr!596 (_values!1728 (v!1602 (underlying!115 thiss!938)))) ((as const (Array (_ BitVec 32) ValueCell!311)) mapDefault!1022)))))

(declare-fun b!23099 () Bool)

(assert (=> b!23099 (= e!14994 e!14997)))

(assert (= (and start!3488 res!14300) b!23095))

(assert (= (and b!23095 c!2933) b!23090))

(assert (= (and b!23095 (not c!2933)) b!23088))

(assert (= (and b!23088 c!2931) b!23089))

(assert (= (and b!23088 (not c!2931)) b!23086))

(assert (= (and b!23086 c!2932) b!23096))

(assert (= (and b!23086 (not c!2932)) b!23092))

(assert (= (or b!23089 b!23096) bm!1846))

(assert (= (or b!23090 bm!1846) bm!1847))

(assert (= (and b!23095 res!14302) b!23094))

(assert (= (and b!23094 res!14301) b!23085))

(assert (= (and b!23098 condMapEmpty!1022) mapIsEmpty!1022))

(assert (= (and b!23098 (not condMapEmpty!1022)) mapNonEmpty!1022))

(get-info :version)

(assert (= (and mapNonEmpty!1022 ((_ is ValueCellFull!311) mapValue!1022)) b!23093))

(assert (= (and b!23098 ((_ is ValueCellFull!311) mapDefault!1022)) b!23097))

(assert (= b!23087 b!23098))

(assert (= b!23091 b!23087))

(assert (= b!23099 b!23091))

(assert (= start!3488 b!23099))

(declare-fun m!16680 () Bool)

(assert (=> b!23095 m!16680))

(assert (=> b!23095 m!16680))

(declare-fun m!16682 () Bool)

(assert (=> b!23095 m!16682))

(declare-fun m!16684 () Bool)

(assert (=> b!23090 m!16684))

(declare-fun m!16686 () Bool)

(assert (=> b!23087 m!16686))

(declare-fun m!16688 () Bool)

(assert (=> b!23087 m!16688))

(declare-fun m!16690 () Bool)

(assert (=> mapNonEmpty!1022 m!16690))

(declare-fun m!16692 () Bool)

(assert (=> bm!1847 m!16692))

(declare-fun m!16694 () Bool)

(assert (=> start!3488 m!16694))

(declare-fun m!16696 () Bool)

(assert (=> b!23094 m!16696))

(check-sat b_and!1473 (not b_next!757) (not bm!1847) (not b!23095) (not b!23090) (not mapNonEmpty!1022) (not b!23087) tp_is_empty!1021 (not b!23094) (not start!3488))
(check-sat b_and!1473 (not b_next!757))
(get-model)

(declare-fun d!3953 () Bool)

(assert (=> d!3953 (= (validMask!0 (mask!4729 (v!1602 (underlying!115 thiss!938)))) (and (or (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000001111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000011111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000001111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000011111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000001111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000011111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000001111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000011111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000001111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000011111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000001111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000011111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000111111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000001111111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000011111111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000111111111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000001111111111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000011111111111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000111111111111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00001111111111111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00011111111111111111111111111111) (= (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00111111111111111111111111111111)) (bvsle (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00111111111111111111111111111111)))))

(assert (=> b!23094 d!3953))

(declare-fun d!3955 () Bool)

(declare-fun valid!121 (LongMapFixedSize!208) Bool)

(assert (=> d!3955 (= (valid!119 thiss!938) (valid!121 (v!1602 (underlying!115 thiss!938))))))

(declare-fun bs!947 () Bool)

(assert (= bs!947 d!3955))

(declare-fun m!16734 () Bool)

(assert (=> bs!947 m!16734))

(assert (=> start!3488 d!3955))

(declare-fun b!23202 () Bool)

(declare-datatypes ((Unit!522 0))(
  ( (Unit!523) )
))
(declare-fun e!15084 () Unit!522)

(declare-fun Unit!524 () Unit!522)

(assert (=> b!23202 (= e!15084 Unit!524)))

(declare-datatypes ((tuple2!972 0))(
  ( (tuple2!973 (_1!495 (_ BitVec 64)) (_2!495 V!1187)) )
))
(declare-fun lt!8244 () tuple2!972)

(declare-fun lt!8245 () LongMapFixedSize!208)

(declare-datatypes ((List!564 0))(
  ( (Nil!561) (Cons!560 (h!1126 tuple2!972) (t!3229 List!564)) )
))
(declare-fun head!828 (List!564) tuple2!972)

(declare-datatypes ((ListLongMap!563 0))(
  ( (ListLongMap!564 (toList!297 List!564)) )
))
(declare-fun map!408 (LongMapFixedSize!208) ListLongMap!563)

(assert (=> b!23202 (= lt!8244 (head!828 (toList!297 (map!408 lt!8245))))))

(declare-fun lt!8235 () array!1263)

(assert (=> b!23202 (= lt!8235 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))

(declare-fun lt!8232 () (_ BitVec 32))

(assert (=> b!23202 (= lt!8232 #b00000000000000000000000000000000)))

(declare-fun lt!8236 () Unit!522)

(declare-fun lemmaKeyInListMapIsInArray!97 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!522)

(declare-fun dynLambda!140 (Int (_ BitVec 64)) V!1187)

(assert (=> b!23202 (= lt!8236 (lemmaKeyInListMapIsInArray!97 lt!8235 (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8232 (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (_1!495 lt!8244) (defaultEntry!1742 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun c!2957 () Bool)

(assert (=> b!23202 (= c!2957 (and (not (= (_1!495 lt!8244) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (_1!495 lt!8244) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun e!15086 () Bool)

(assert (=> b!23202 e!15086))

(declare-fun lt!8231 () Unit!522)

(assert (=> b!23202 (= lt!8231 lt!8236)))

(declare-fun lt!8230 () (_ BitVec 32))

(declare-fun arrayScanForKey!0 (array!1263 (_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!23202 (= lt!8230 (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!495 lt!8244) #b00000000000000000000000000000000))))

(assert (=> b!23202 false))

(declare-fun d!3957 () Bool)

(declare-fun e!15085 () Bool)

(assert (=> d!3957 e!15085))

(declare-fun res!14325 () Bool)

(assert (=> d!3957 (=> (not res!14325) (not e!15085))))

(declare-fun lt!8243 () LongMapFixedSize!208)

(assert (=> d!3957 (= res!14325 (valid!121 lt!8243))))

(assert (=> d!3957 (= lt!8243 lt!8245)))

(declare-fun lt!8229 () Unit!522)

(assert (=> d!3957 (= lt!8229 e!15084)))

(declare-fun c!2956 () Bool)

(assert (=> d!3957 (= c!2956 (not (= (map!408 lt!8245) (ListLongMap!564 Nil!561))))))

(declare-fun lt!8237 () Unit!522)

(declare-fun lt!8250 () Unit!522)

(assert (=> d!3957 (= lt!8237 lt!8250)))

(declare-fun lt!8241 () array!1263)

(declare-fun lt!8240 () (_ BitVec 32))

(declare-datatypes ((List!565 0))(
  ( (Nil!562) (Cons!561 (h!1127 (_ BitVec 64)) (t!3230 List!565)) )
))
(declare-fun lt!8233 () List!565)

(declare-fun arrayNoDuplicates!0 (array!1263 (_ BitVec 32) List!565) Bool)

(assert (=> d!3957 (arrayNoDuplicates!0 lt!8241 lt!8240 lt!8233)))

(declare-fun lemmaArrayNoDuplicatesInAll0Array!0 (array!1263 (_ BitVec 32) (_ BitVec 32) List!565) Unit!522)

(assert (=> d!3957 (= lt!8250 (lemmaArrayNoDuplicatesInAll0Array!0 lt!8241 lt!8240 (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001) lt!8233))))

(assert (=> d!3957 (= lt!8233 Nil!562)))

(assert (=> d!3957 (= lt!8240 #b00000000000000000000000000000000)))

(assert (=> d!3957 (= lt!8241 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))

(declare-fun lt!8234 () Unit!522)

(declare-fun lt!8247 () Unit!522)

(assert (=> d!3957 (= lt!8234 lt!8247)))

(declare-fun lt!8248 () (_ BitVec 32))

(declare-fun lt!8238 () array!1263)

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!1263 (_ BitVec 32)) Bool)

(assert (=> d!3957 (arrayForallSeekEntryOrOpenFound!0 lt!8248 lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun lemmaArrayForallSeekEntryOrOpenFoundAlwaysTrueFor0Array!0 (array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!522)

(assert (=> d!3957 (= lt!8247 (lemmaArrayForallSeekEntryOrOpenFoundAlwaysTrueFor0Array!0 lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8248))))

(assert (=> d!3957 (= lt!8248 #b00000000000000000000000000000000)))

(assert (=> d!3957 (= lt!8238 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))

(declare-fun lt!8246 () Unit!522)

(declare-fun lt!8239 () Unit!522)

(assert (=> d!3957 (= lt!8246 lt!8239)))

(declare-fun lt!8242 () array!1263)

(declare-fun lt!8249 () (_ BitVec 32))

(declare-fun lt!8228 () (_ BitVec 32))

(declare-fun arrayCountValidKeys!0 (array!1263 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!3957 (= (arrayCountValidKeys!0 lt!8242 lt!8249 lt!8228) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayCountValidKeysOfFilled0ArrayIs0!0 (array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!522)

(assert (=> d!3957 (= lt!8239 (lemmaArrayCountValidKeysOfFilled0ArrayIs0!0 lt!8242 lt!8249 lt!8228))))

(assert (=> d!3957 (= lt!8228 (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))))

(assert (=> d!3957 (= lt!8249 #b00000000000000000000000000000000)))

(assert (=> d!3957 (= lt!8242 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))

(assert (=> d!3957 (= lt!8245 (LongMapFixedSize!209 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) #b00000000000000000000000000000000))))

(assert (=> d!3957 (validMask!0 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(assert (=> d!3957 (= (getNewLongMapFixedSize!37 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 (v!1602 (underlying!115 thiss!938)))) lt!8243)))

(declare-fun b!23203 () Bool)

(declare-fun res!14326 () Bool)

(assert (=> b!23203 (=> (not res!14326) (not e!15085))))

(assert (=> b!23203 (= res!14326 (= (mask!4729 lt!8243) (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun b!23204 () Bool)

(assert (=> b!23204 (= e!15085 (= (map!408 lt!8243) (ListLongMap!564 Nil!561)))))

(declare-fun b!23205 () Bool)

(declare-fun Unit!525 () Unit!522)

(assert (=> b!23205 (= e!15084 Unit!525)))

(declare-fun b!23206 () Bool)

(declare-fun arrayContainsKey!0 (array!1263 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!23206 (= e!15086 (arrayContainsKey!0 lt!8235 (_1!495 lt!8244) #b00000000000000000000000000000000))))

(declare-fun b!23207 () Bool)

(assert (=> b!23207 (= e!15086 (ite (= (_1!495 lt!8244) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand lt!8232 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8232 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!3957 c!2956) b!23202))

(assert (= (and d!3957 (not c!2956)) b!23205))

(assert (= (and b!23202 c!2957) b!23206))

(assert (= (and b!23202 (not c!2957)) b!23207))

(assert (= (and d!3957 res!14325) b!23203))

(assert (= (and b!23203 res!14326) b!23204))

(declare-fun b_lambda!1563 () Bool)

(assert (=> (not b_lambda!1563) (not b!23202)))

(declare-fun t!3228 () Bool)

(declare-fun tb!651 () Bool)

(assert (=> (and b!23087 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (v!1602 (underlying!115 thiss!938)))) t!3228) tb!651))

(declare-fun result!1087 () Bool)

(assert (=> tb!651 (= result!1087 tp_is_empty!1021)))

(assert (=> b!23202 t!3228))

(declare-fun b_and!1479 () Bool)

(assert (= b_and!1473 (and (=> t!3228 result!1087) b_and!1479)))

(declare-fun b_lambda!1565 () Bool)

(assert (=> (not b_lambda!1565) (not d!3957)))

(assert (=> d!3957 t!3228))

(declare-fun b_and!1481 () Bool)

(assert (= b_and!1479 (and (=> t!3228 result!1087) b_and!1481)))

(declare-fun m!16736 () Bool)

(assert (=> b!23202 m!16736))

(assert (=> b!23202 m!16680))

(declare-fun m!16738 () Bool)

(assert (=> b!23202 m!16738))

(assert (=> b!23202 m!16738))

(declare-fun m!16740 () Bool)

(assert (=> b!23202 m!16740))

(declare-fun m!16742 () Bool)

(assert (=> b!23202 m!16742))

(assert (=> b!23202 m!16738))

(declare-fun m!16744 () Bool)

(assert (=> b!23202 m!16744))

(assert (=> d!3957 m!16680))

(declare-fun m!16746 () Bool)

(assert (=> d!3957 m!16746))

(declare-fun m!16748 () Bool)

(assert (=> d!3957 m!16748))

(declare-fun m!16750 () Bool)

(assert (=> d!3957 m!16750))

(assert (=> d!3957 m!16680))

(declare-fun m!16752 () Bool)

(assert (=> d!3957 m!16752))

(assert (=> d!3957 m!16742))

(declare-fun m!16754 () Bool)

(assert (=> d!3957 m!16754))

(assert (=> d!3957 m!16738))

(declare-fun m!16756 () Bool)

(assert (=> d!3957 m!16756))

(declare-fun m!16758 () Bool)

(assert (=> d!3957 m!16758))

(assert (=> d!3957 m!16680))

(declare-fun m!16760 () Bool)

(assert (=> d!3957 m!16760))

(declare-fun m!16762 () Bool)

(assert (=> b!23204 m!16762))

(declare-fun m!16764 () Bool)

(assert (=> b!23206 m!16764))

(assert (=> b!23095 d!3957))

(declare-fun d!3959 () Bool)

(declare-fun e!15092 () Bool)

(assert (=> d!3959 e!15092))

(declare-fun res!14329 () Bool)

(assert (=> d!3959 (=> (not res!14329) (not e!15092))))

(declare-fun lt!8255 () (_ BitVec 32))

(assert (=> d!3959 (= res!14329 (validMask!0 lt!8255))))

(declare-datatypes ((tuple2!974 0))(
  ( (tuple2!975 (_1!496 Unit!522) (_2!496 (_ BitVec 32))) )
))
(declare-fun e!15091 () tuple2!974)

(assert (=> d!3959 (= lt!8255 (_2!496 e!15091))))

(declare-fun c!2960 () Bool)

(declare-fun lt!8256 () tuple2!974)

(assert (=> d!3959 (= c!2960 (and (bvsgt (_2!496 lt!8256) #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1602 (underlying!115 thiss!938)))) (_2!496 lt!8256)) (bvsge (bvadd (bvand (bvashr (_2!496 lt!8256) #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun Unit!526 () Unit!522)

(declare-fun Unit!527 () Unit!522)

(assert (=> d!3959 (= lt!8256 (ite (and (bvsge (bvmul #b00000000000000000000000000000010 (bvadd (_size!149 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))))) (mask!4729 (v!1602 (underlying!115 thiss!938)))) (bvsle (bvmul #b00000000000000000000000000000101 (_vacant!149 (v!1602 (underlying!115 thiss!938)))) (mask!4729 (v!1602 (underlying!115 thiss!938))))) (tuple2!975 Unit!526 (bvand (bvadd (bvshl (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000001) #b00000000000000000000000000000001) #b00111111111111111111111111111111)) (tuple2!975 Unit!527 (mask!4729 (v!1602 (underlying!115 thiss!938))))))))

(assert (=> d!3959 (validMask!0 (mask!4729 (v!1602 (underlying!115 thiss!938))))))

(assert (=> d!3959 (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8255)))

(declare-fun b!23216 () Bool)

(declare-fun computeNewMaskWhile!14 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) tuple2!974)

(assert (=> b!23216 (= e!15091 (computeNewMaskWhile!14 (_size!149 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (mask!4729 (v!1602 (underlying!115 thiss!938))) (_2!496 lt!8256)))))

(declare-fun b!23217 () Bool)

(declare-fun Unit!528 () Unit!522)

(assert (=> b!23217 (= e!15091 (tuple2!975 Unit!528 (_2!496 lt!8256)))))

(declare-fun b!23218 () Bool)

(assert (=> b!23218 (= e!15092 (bvsle (_size!149 (v!1602 (underlying!115 thiss!938))) (bvadd lt!8255 #b00000000000000000000000000000001)))))

(assert (= (and d!3959 c!2960) b!23216))

(assert (= (and d!3959 (not c!2960)) b!23217))

(assert (= (and d!3959 res!14329) b!23218))

(declare-fun m!16766 () Bool)

(assert (=> d!3959 m!16766))

(assert (=> d!3959 m!16696))

(declare-fun m!16768 () Bool)

(assert (=> b!23216 m!16768))

(assert (=> b!23095 d!3959))

(declare-fun d!3961 () Bool)

(assert (=> d!3961 (= (array_inv!421 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) (bvsge (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000))))

(assert (=> b!23087 d!3961))

(declare-fun d!3963 () Bool)

(assert (=> d!3963 (= (array_inv!422 (_values!1728 (v!1602 (underlying!115 thiss!938)))) (bvsge (size!692 (_values!1728 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000))))

(assert (=> b!23087 d!3963))

(declare-fun b!23299 () Bool)

(declare-fun c!2997 () Bool)

(declare-datatypes ((SeekEntryResult!54 0))(
  ( (MissingZero!54 (index!2337 (_ BitVec 32))) (Found!54 (index!2338 (_ BitVec 32))) (Intermediate!54 (undefined!866 Bool) (index!2339 (_ BitVec 32)) (x!5576 (_ BitVec 32))) (Undefined!54) (MissingVacant!54 (index!2340 (_ BitVec 32))) )
))
(declare-fun lt!8329 () SeekEntryResult!54)

(assert (=> b!23299 (= c!2997 ((_ is MissingVacant!54) lt!8329))))

(declare-fun e!15154 () tuple2!962)

(declare-fun e!15143 () tuple2!962)

(assert (=> b!23299 (= e!15154 e!15143)))

(declare-fun bm!1908 () Bool)

(declare-fun call!1922 () ListLongMap!563)

(declare-fun call!1928 () ListLongMap!563)

(declare-fun c!2995 () Bool)

(declare-fun call!1927 () ListLongMap!563)

(declare-fun c!2996 () Bool)

(declare-fun +!44 (ListLongMap!563 tuple2!972) ListLongMap!563)

(assert (=> bm!1908 (= call!1922 (+!44 (ite c!2996 call!1927 call!1928) (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!23300 () Bool)

(declare-fun c!2988 () Bool)

(declare-fun lt!8326 () SeekEntryResult!54)

(assert (=> b!23300 (= c!2988 ((_ is MissingVacant!54) lt!8326))))

(declare-fun e!15149 () Bool)

(declare-fun e!15142 () Bool)

(assert (=> b!23300 (= e!15149 e!15142)))

(declare-fun bm!1909 () Bool)

(declare-fun call!1920 () ListLongMap!563)

(declare-fun lt!8334 () tuple2!962)

(assert (=> bm!1909 (= call!1920 (map!408 (_2!490 lt!8334)))))

(declare-fun e!15150 () Bool)

(declare-fun b!23301 () Bool)

(declare-fun lt!8319 () SeekEntryResult!54)

(assert (=> b!23301 (= e!15150 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8319)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23302 () Bool)

(declare-fun lt!8312 () Unit!522)

(declare-fun lt!8311 () Unit!522)

(assert (=> b!23302 (= lt!8312 lt!8311)))

(declare-fun lt!8315 () array!1261)

(declare-fun contains!229 (ListLongMap!563 (_ BitVec 64)) Bool)

(declare-fun getCurrentListMap!127 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) Int) ListLongMap!563)

(assert (=> b!23302 (contains!229 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) Int) Unit!522)

(assert (=> b!23302 (= lt!8311 (lemmaValidKeyInArrayIsInListMap!10 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2338 lt!8329) (defaultEntry!1742 lt!8141)))))

(assert (=> b!23302 (= lt!8315 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))))

(declare-fun lt!8332 () Unit!522)

(declare-fun lt!8327 () Unit!522)

(assert (=> b!23302 (= lt!8332 lt!8327)))

(declare-fun call!1913 () ListLongMap!563)

(assert (=> b!23302 (= call!1922 call!1913)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) (_ BitVec 64) V!1187 Int) Unit!522)

(assert (=> b!23302 (= lt!8327 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2338 lt!8329) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8317 () Unit!522)

(declare-fun e!15144 () Unit!522)

(assert (=> b!23302 (= lt!8317 e!15144)))

(declare-fun c!2992 () Bool)

(declare-fun call!1916 () Bool)

(assert (=> b!23302 (= c!2992 call!1916)))

(declare-fun e!15141 () tuple2!962)

(assert (=> b!23302 (= e!15141 (tuple2!963 true (LongMapFixedSize!209 (defaultEntry!1742 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (_size!149 lt!8141) (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (_vacant!149 lt!8141))))))

(declare-fun b!23303 () Bool)

(declare-fun c!2991 () Bool)

(declare-fun lt!8321 () SeekEntryResult!54)

(assert (=> b!23303 (= c!2991 ((_ is MissingVacant!54) lt!8321))))

(declare-fun e!15153 () Bool)

(declare-fun e!15135 () Bool)

(assert (=> b!23303 (= e!15153 e!15135)))

(declare-fun b!23304 () Bool)

(declare-fun e!15138 () Bool)

(declare-fun call!1933 () ListLongMap!563)

(assert (=> b!23304 (= e!15138 (= call!1920 call!1933))))

(declare-fun b!23305 () Bool)

(assert (=> b!23305 (= e!15143 e!15141)))

(declare-fun c!2989 () Bool)

(assert (=> b!23305 (= c!2989 ((_ is MissingZero!54) lt!8329))))

(declare-fun b!23306 () Bool)

(declare-fun e!15137 () Unit!522)

(declare-fun Unit!529 () Unit!522)

(assert (=> b!23306 (= e!15137 Unit!529)))

(declare-fun lt!8316 () Unit!522)

(declare-fun call!1929 () Unit!522)

(assert (=> b!23306 (= lt!8316 call!1929)))

(declare-fun call!1931 () SeekEntryResult!54)

(assert (=> b!23306 (= lt!8319 call!1931)))

(declare-fun res!14363 () Bool)

(assert (=> b!23306 (= res!14363 ((_ is Found!54) lt!8319))))

(assert (=> b!23306 (=> (not res!14363) (not e!15150))))

(assert (=> b!23306 e!15150))

(declare-fun lt!8318 () Unit!522)

(assert (=> b!23306 (= lt!8318 lt!8316)))

(assert (=> b!23306 false))

(declare-fun b!23307 () Bool)

(declare-fun e!15148 () tuple2!962)

(assert (=> b!23307 (= e!15148 e!15154)))

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!1263 (_ BitVec 32)) SeekEntryResult!54)

(assert (=> b!23307 (= lt!8329 (seekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun c!2994 () Bool)

(assert (=> b!23307 (= c!2994 ((_ is Undefined!54) lt!8329))))

(declare-fun b!23308 () Bool)

(declare-fun res!14359 () Bool)

(declare-fun call!1911 () Bool)

(assert (=> b!23308 (= res!14359 call!1911)))

(assert (=> b!23308 (=> (not res!14359) (not e!15150))))

(declare-fun b!23309 () Bool)

(declare-fun lt!8322 () Unit!522)

(assert (=> b!23309 (= e!15137 lt!8322)))

(declare-fun call!1932 () Unit!522)

(assert (=> b!23309 (= lt!8322 call!1932)))

(assert (=> b!23309 (= lt!8321 call!1931)))

(declare-fun c!2999 () Bool)

(assert (=> b!23309 (= c!2999 ((_ is MissingZero!54) lt!8321))))

(assert (=> b!23309 e!15153))

(declare-fun bm!1910 () Bool)

(declare-fun call!1930 () Bool)

(assert (=> bm!1910 (= call!1930 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun b!23310 () Bool)

(declare-fun Unit!530 () Unit!522)

(assert (=> b!23310 (= e!15144 Unit!530)))

(declare-fun lt!8333 () Unit!522)

(assert (=> b!23310 (= lt!8333 call!1932)))

(declare-fun call!1934 () SeekEntryResult!54)

(assert (=> b!23310 (= lt!8326 call!1934)))

(declare-fun c!2990 () Bool)

(assert (=> b!23310 (= c!2990 ((_ is MissingZero!54) lt!8326))))

(assert (=> b!23310 e!15149))

(declare-fun lt!8336 () Unit!522)

(assert (=> b!23310 (= lt!8336 lt!8333)))

(assert (=> b!23310 false))

(declare-fun bm!1911 () Bool)

(assert (=> bm!1911 (= call!1933 (map!408 lt!8141))))

(declare-fun b!23311 () Bool)

(declare-fun e!15155 () Bool)

(declare-fun call!1921 () Bool)

(assert (=> b!23311 (= e!15155 (not call!1921))))

(declare-fun b!23312 () Bool)

(declare-fun lt!8320 () tuple2!962)

(declare-fun call!1915 () tuple2!962)

(assert (=> b!23312 (= lt!8320 call!1915)))

(assert (=> b!23312 (= e!15141 (tuple2!963 (_1!490 lt!8320) (_2!490 lt!8320)))))

(declare-fun lt!8331 () SeekEntryResult!54)

(declare-fun e!15147 () Bool)

(declare-fun b!23313 () Bool)

(assert (=> b!23313 (= e!15147 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8331)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bm!1912 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!522)

(assert (=> bm!1912 (= call!1929 (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(declare-fun b!23314 () Bool)

(declare-fun res!14367 () Bool)

(declare-fun e!15139 () Bool)

(assert (=> b!23314 (=> (not res!14367) (not e!15139))))

(assert (=> b!23314 (= res!14367 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2337 lt!8326)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23315 () Bool)

(declare-fun e!15136 () ListLongMap!563)

(assert (=> b!23315 (= e!15136 call!1913)))

(declare-fun b!23316 () Bool)

(declare-fun e!15146 () Bool)

(assert (=> b!23316 (= e!15138 e!15146)))

(declare-fun res!14371 () Bool)

(assert (=> b!23316 (= res!14371 (contains!229 call!1920 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23316 (=> (not res!14371) (not e!15146))))

(declare-fun bm!1913 () Bool)

(declare-fun call!1917 () ListLongMap!563)

(declare-fun call!1918 () ListLongMap!563)

(assert (=> bm!1913 (= call!1917 call!1918)))

(declare-fun bm!1914 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!522)

(assert (=> bm!1914 (= call!1932 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(declare-fun b!23317 () Bool)

(declare-fun res!14360 () Bool)

(declare-fun call!1926 () Bool)

(assert (=> b!23317 (= res!14360 call!1926)))

(assert (=> b!23317 (=> (not res!14360) (not e!15147))))

(declare-fun b!23318 () Bool)

(assert (=> b!23318 (= e!15146 (= call!1920 (+!44 call!1933 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun bm!1915 () Bool)

(declare-fun call!1914 () Bool)

(assert (=> bm!1915 (= call!1914 call!1926)))

(declare-fun bm!1916 () Bool)

(declare-fun updateHelperNewKey!10 (LongMapFixedSize!208 (_ BitVec 64) V!1187 (_ BitVec 32)) tuple2!962)

(assert (=> bm!1916 (= call!1915 (updateHelperNewKey!10 lt!8141 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))))))

(declare-fun b!23319 () Bool)

(declare-fun res!14369 () Bool)

(declare-fun e!15152 () Bool)

(assert (=> b!23319 (=> (not res!14369) (not e!15152))))

(declare-fun call!1919 () Bool)

(assert (=> b!23319 (= res!14369 call!1919)))

(assert (=> b!23319 (= e!15153 e!15152)))

(declare-fun b!23320 () Bool)

(assert (=> b!23320 (= e!15142 ((_ is Undefined!54) lt!8326))))

(declare-fun b!23321 () Bool)

(declare-fun res!14370 () Bool)

(assert (=> b!23321 (=> (not res!14370) (not e!15139))))

(assert (=> b!23321 (= res!14370 call!1914)))

(assert (=> b!23321 (= e!15149 e!15139)))

(declare-fun b!23322 () Bool)

(declare-fun res!14365 () Bool)

(assert (=> b!23322 (= res!14365 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2340 lt!8321)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15140 () Bool)

(assert (=> b!23322 (=> (not res!14365) (not e!15140))))

(declare-fun bm!1917 () Bool)

(declare-fun call!1923 () ListLongMap!563)

(assert (=> bm!1917 (= call!1923 call!1922)))

(declare-fun b!23323 () Bool)

(declare-fun lt!8324 () tuple2!962)

(assert (=> b!23323 (= e!15143 (tuple2!963 (_1!490 lt!8324) (_2!490 lt!8324)))))

(assert (=> b!23323 (= lt!8324 call!1915)))

(declare-fun b!23324 () Bool)

(assert (=> b!23324 (= e!15135 e!15140)))

(declare-fun res!14358 () Bool)

(assert (=> b!23324 (= res!14358 call!1919)))

(assert (=> b!23324 (=> (not res!14358) (not e!15140))))

(declare-fun bm!1918 () Bool)

(assert (=> bm!1918 (= call!1919 call!1911)))

(declare-fun b!23325 () Bool)

(declare-fun call!1925 () Bool)

(assert (=> b!23325 (= e!15152 (not call!1925))))

(declare-fun c!2993 () Bool)

(declare-fun call!1912 () Bool)

(declare-fun bm!1919 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!1919 (= call!1912 (inRange!0 (ite c!2994 (ite c!2993 (index!2338 lt!8319) (ite c!2999 (index!2337 lt!8321) (index!2340 lt!8321))) (ite c!2992 (index!2338 lt!8331) (ite c!2990 (index!2337 lt!8326) (index!2340 lt!8326)))) (mask!4729 lt!8141)))))

(declare-fun call!1924 () SeekEntryResult!54)

(declare-fun bm!1920 () Bool)

(assert (=> bm!1920 (= call!1924 (seekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!23326 () Bool)

(declare-fun lt!8330 () Unit!522)

(assert (=> b!23326 (= e!15144 lt!8330)))

(assert (=> b!23326 (= lt!8330 call!1929)))

(assert (=> b!23326 (= lt!8331 call!1934)))

(declare-fun res!14362 () Bool)

(assert (=> b!23326 (= res!14362 ((_ is Found!54) lt!8331))))

(assert (=> b!23326 (=> (not res!14362) (not e!15147))))

(assert (=> b!23326 e!15147))

(declare-fun b!23327 () Bool)

(declare-fun e!15151 () Bool)

(assert (=> b!23327 (= e!15151 e!15138)))

(declare-fun c!2998 () Bool)

(assert (=> b!23327 (= c!2998 (_1!490 lt!8334))))

(declare-fun b!23328 () Bool)

(assert (=> b!23328 (= e!15136 call!1928)))

(declare-fun bm!1921 () Bool)

(assert (=> bm!1921 (= call!1911 call!1912)))

(declare-fun b!23329 () Bool)

(declare-fun lt!8328 () Unit!522)

(assert (=> b!23329 (= lt!8328 e!15137)))

(assert (=> b!23329 (= c!2993 call!1916)))

(assert (=> b!23329 (= e!15154 (tuple2!963 false lt!8141))))

(declare-fun b!23330 () Bool)

(declare-fun res!14366 () Bool)

(assert (=> b!23330 (= res!14366 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2340 lt!8326)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23330 (=> (not res!14366) (not e!15155))))

(declare-fun b!23331 () Bool)

(assert (=> b!23331 (= e!15139 (not call!1921))))

(declare-fun b!23332 () Bool)

(assert (=> b!23332 (= e!15135 ((_ is Undefined!54) lt!8321))))

(declare-fun bm!1922 () Bool)

(assert (=> bm!1922 (= call!1921 call!1930)))

(declare-fun bm!1923 () Bool)

(assert (=> bm!1923 (= call!1928 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23333 () Bool)

(declare-fun lt!8323 () Unit!522)

(declare-fun lt!8325 () Unit!522)

(assert (=> b!23333 (= lt!8323 lt!8325)))

(assert (=> b!23333 (= call!1923 call!1917)))

(declare-fun lt!8337 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 V!1187 Int) Unit!522)

(assert (=> b!23333 (= lt!8325 (lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(assert (=> b!23333 (= lt!8337 (bvor (extraKeys!1640 lt!8141) #b00000000000000000000000000000010))))

(declare-fun e!15145 () tuple2!962)

(assert (=> b!23333 (= e!15145 (tuple2!963 true (LongMapFixedSize!209 (defaultEntry!1742 lt!8141) (mask!4729 lt!8141) (bvor (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (_size!149 lt!8141) (_keys!3163 lt!8141) (_values!1728 lt!8141) (_vacant!149 lt!8141))))))

(declare-fun bm!1924 () Bool)

(assert (=> bm!1924 (= call!1925 call!1930)))

(declare-fun b!23334 () Bool)

(assert (=> b!23334 (= e!15148 e!15145)))

(assert (=> b!23334 (= c!2995 (= (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!1925 () Bool)

(assert (=> bm!1925 (= call!1927 call!1928)))

(declare-fun b!23335 () Bool)

(declare-fun res!14368 () Bool)

(assert (=> b!23335 (=> (not res!14368) (not e!15152))))

(assert (=> b!23335 (= res!14368 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2337 lt!8321)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!1926 () Bool)

(assert (=> bm!1926 (= call!1913 call!1918)))

(declare-fun bm!1927 () Bool)

(assert (=> bm!1927 (= call!1934 call!1924)))

(declare-fun b!23336 () Bool)

(declare-fun lt!8314 () Unit!522)

(declare-fun lt!8335 () Unit!522)

(assert (=> b!23336 (= lt!8314 lt!8335)))

(assert (=> b!23336 (= call!1923 call!1917)))

(declare-fun lt!8313 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 V!1187 Int) Unit!522)

(assert (=> b!23336 (= lt!8335 (lemmaChangeZeroKeyThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8313 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (defaultEntry!1742 lt!8141)))))

(assert (=> b!23336 (= lt!8313 (bvor (extraKeys!1640 lt!8141) #b00000000000000000000000000000001))))

(assert (=> b!23336 (= e!15145 (tuple2!963 true (LongMapFixedSize!209 (defaultEntry!1742 lt!8141) (mask!4729 lt!8141) (bvor (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (_size!149 lt!8141) (_keys!3163 lt!8141) (_values!1728 lt!8141) (_vacant!149 lt!8141))))))

(declare-fun bm!1929 () Bool)

(assert (=> bm!1929 (= call!1931 call!1924)))

(declare-fun bm!1930 () Bool)

(assert (=> bm!1930 (= call!1918 (getCurrentListMap!127 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun d!3965 () Bool)

(assert (=> d!3965 e!15151))

(declare-fun res!14361 () Bool)

(assert (=> d!3965 (=> (not res!14361) (not e!15151))))

(assert (=> d!3965 (= res!14361 (valid!121 (_2!490 lt!8334)))))

(assert (=> d!3965 (= lt!8334 e!15148)))

(assert (=> d!3965 (= c!2996 (= (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvneg (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!3965 (valid!121 lt!8141)))

(assert (=> d!3965 (= (update!41 lt!8141 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!8334)))

(declare-fun bm!1928 () Bool)

(assert (=> bm!1928 (= call!1926 call!1912)))

(declare-fun bm!1931 () Bool)

(declare-fun c!2987 () Bool)

(assert (=> bm!1931 (= c!2987 c!2994)))

(assert (=> bm!1931 (= call!1916 (contains!229 e!15136 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23337 () Bool)

(assert (=> b!23337 (= e!15140 (not call!1925))))

(declare-fun b!23338 () Bool)

(assert (=> b!23338 (= e!15142 e!15155)))

(declare-fun res!14364 () Bool)

(assert (=> b!23338 (= res!14364 call!1914)))

(assert (=> b!23338 (=> (not res!14364) (not e!15155))))

(assert (= (and d!3965 c!2996) b!23334))

(assert (= (and d!3965 (not c!2996)) b!23307))

(assert (= (and b!23334 c!2995) b!23336))

(assert (= (and b!23334 (not c!2995)) b!23333))

(assert (= (or b!23336 b!23333) bm!1913))

(assert (= (or b!23336 b!23333) bm!1925))

(assert (= (or b!23336 b!23333) bm!1917))

(assert (= (and b!23307 c!2994) b!23329))

(assert (= (and b!23307 (not c!2994)) b!23299))

(assert (= (and b!23329 c!2993) b!23306))

(assert (= (and b!23329 (not c!2993)) b!23309))

(assert (= (and b!23306 res!14363) b!23308))

(assert (= (and b!23308 res!14359) b!23301))

(assert (= (and b!23309 c!2999) b!23319))

(assert (= (and b!23309 (not c!2999)) b!23303))

(assert (= (and b!23319 res!14369) b!23335))

(assert (= (and b!23335 res!14368) b!23325))

(assert (= (and b!23303 c!2991) b!23324))

(assert (= (and b!23303 (not c!2991)) b!23332))

(assert (= (and b!23324 res!14358) b!23322))

(assert (= (and b!23322 res!14365) b!23337))

(assert (= (or b!23319 b!23324) bm!1918))

(assert (= (or b!23325 b!23337) bm!1924))

(assert (= (or b!23308 bm!1918) bm!1921))

(assert (= (or b!23306 b!23309) bm!1929))

(assert (= (and b!23299 c!2997) b!23323))

(assert (= (and b!23299 (not c!2997)) b!23305))

(assert (= (and b!23305 c!2989) b!23312))

(assert (= (and b!23305 (not c!2989)) b!23302))

(assert (= (and b!23302 c!2992) b!23326))

(assert (= (and b!23302 (not c!2992)) b!23310))

(assert (= (and b!23326 res!14362) b!23317))

(assert (= (and b!23317 res!14360) b!23313))

(assert (= (and b!23310 c!2990) b!23321))

(assert (= (and b!23310 (not c!2990)) b!23300))

(assert (= (and b!23321 res!14370) b!23314))

(assert (= (and b!23314 res!14367) b!23331))

(assert (= (and b!23300 c!2988) b!23338))

(assert (= (and b!23300 (not c!2988)) b!23320))

(assert (= (and b!23338 res!14364) b!23330))

(assert (= (and b!23330 res!14366) b!23311))

(assert (= (or b!23321 b!23338) bm!1915))

(assert (= (or b!23331 b!23311) bm!1922))

(assert (= (or b!23317 bm!1915) bm!1928))

(assert (= (or b!23326 b!23310) bm!1927))

(assert (= (or b!23323 b!23312) bm!1916))

(assert (= (or bm!1924 bm!1922) bm!1910))

(assert (= (or bm!1921 bm!1928) bm!1919))

(assert (= (or bm!1929 bm!1927) bm!1920))

(assert (= (or b!23306 b!23326) bm!1912))

(assert (= (or b!23329 b!23302) bm!1926))

(assert (= (or b!23309 b!23310) bm!1914))

(assert (= (or b!23329 b!23302) bm!1931))

(assert (= (and bm!1931 c!2987) b!23315))

(assert (= (and bm!1931 (not c!2987)) b!23328))

(assert (= (or bm!1913 bm!1926) bm!1930))

(assert (= (or bm!1925 b!23302 b!23328) bm!1923))

(assert (= (or bm!1917 b!23302) bm!1908))

(assert (= (and d!3965 res!14361) b!23327))

(assert (= (and b!23327 c!2998) b!23316))

(assert (= (and b!23327 (not c!2998)) b!23304))

(assert (= (and b!23316 res!14371) b!23318))

(assert (= (or b!23316 b!23318 b!23304) bm!1909))

(assert (= (or b!23318 b!23304) bm!1911))

(declare-fun m!16770 () Bool)

(assert (=> b!23316 m!16770))

(declare-fun m!16772 () Bool)

(assert (=> bm!1911 m!16772))

(declare-fun m!16774 () Bool)

(assert (=> b!23307 m!16774))

(declare-fun m!16776 () Bool)

(assert (=> bm!1914 m!16776))

(declare-fun m!16778 () Bool)

(assert (=> bm!1908 m!16778))

(declare-fun m!16780 () Bool)

(assert (=> bm!1916 m!16780))

(declare-fun m!16782 () Bool)

(assert (=> bm!1910 m!16782))

(declare-fun m!16784 () Bool)

(assert (=> bm!1923 m!16784))

(declare-fun m!16786 () Bool)

(assert (=> b!23314 m!16786))

(declare-fun m!16788 () Bool)

(assert (=> bm!1919 m!16788))

(declare-fun m!16790 () Bool)

(assert (=> b!23302 m!16790))

(declare-fun m!16792 () Bool)

(assert (=> b!23302 m!16792))

(assert (=> b!23302 m!16792))

(declare-fun m!16794 () Bool)

(assert (=> b!23302 m!16794))

(declare-fun m!16796 () Bool)

(assert (=> b!23302 m!16796))

(assert (=> b!23302 m!16794))

(declare-fun m!16798 () Bool)

(assert (=> b!23302 m!16798))

(declare-fun m!16800 () Bool)

(assert (=> b!23302 m!16800))

(assert (=> bm!1930 m!16790))

(declare-fun m!16802 () Bool)

(assert (=> bm!1930 m!16802))

(declare-fun m!16804 () Bool)

(assert (=> b!23330 m!16804))

(declare-fun m!16806 () Bool)

(assert (=> b!23322 m!16806))

(declare-fun m!16808 () Bool)

(assert (=> b!23335 m!16808))

(declare-fun m!16810 () Bool)

(assert (=> b!23313 m!16810))

(declare-fun m!16812 () Bool)

(assert (=> b!23333 m!16812))

(declare-fun m!16814 () Bool)

(assert (=> bm!1909 m!16814))

(declare-fun m!16816 () Bool)

(assert (=> b!23336 m!16816))

(declare-fun m!16818 () Bool)

(assert (=> b!23318 m!16818))

(assert (=> bm!1920 m!16774))

(declare-fun m!16820 () Bool)

(assert (=> bm!1912 m!16820))

(declare-fun m!16822 () Bool)

(assert (=> d!3965 m!16822))

(declare-fun m!16824 () Bool)

(assert (=> d!3965 m!16824))

(declare-fun m!16826 () Bool)

(assert (=> bm!1931 m!16826))

(declare-fun m!16828 () Bool)

(assert (=> b!23301 m!16828))

(assert (=> bm!1847 d!3965))

(declare-fun b!23339 () Bool)

(declare-fun c!3010 () Bool)

(declare-fun lt!8356 () SeekEntryResult!54)

(assert (=> b!23339 (= c!3010 ((_ is MissingVacant!54) lt!8356))))

(declare-fun e!15175 () tuple2!962)

(declare-fun e!15164 () tuple2!962)

(assert (=> b!23339 (= e!15175 e!15164)))

(declare-fun call!1946 () ListLongMap!563)

(declare-fun call!1951 () ListLongMap!563)

(declare-fun bm!1932 () Bool)

(declare-fun call!1952 () ListLongMap!563)

(declare-fun c!3008 () Bool)

(declare-fun c!3009 () Bool)

(assert (=> bm!1932 (= call!1946 (+!44 (ite c!3009 call!1951 call!1952) (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!23340 () Bool)

(declare-fun c!3001 () Bool)

(declare-fun lt!8353 () SeekEntryResult!54)

(assert (=> b!23340 (= c!3001 ((_ is MissingVacant!54) lt!8353))))

(declare-fun e!15170 () Bool)

(declare-fun e!15163 () Bool)

(assert (=> b!23340 (= e!15170 e!15163)))

(declare-fun bm!1933 () Bool)

(declare-fun call!1944 () ListLongMap!563)

(declare-fun lt!8361 () tuple2!962)

(assert (=> bm!1933 (= call!1944 (map!408 (_2!490 lt!8361)))))

(declare-fun b!23341 () Bool)

(declare-fun e!15171 () Bool)

(declare-fun lt!8346 () SeekEntryResult!54)

(assert (=> b!23341 (= e!15171 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8346)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23342 () Bool)

(declare-fun lt!8339 () Unit!522)

(declare-fun lt!8338 () Unit!522)

(assert (=> b!23342 (= lt!8339 lt!8338)))

(declare-fun lt!8342 () array!1261)

(assert (=> b!23342 (contains!229 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356)))))

(assert (=> b!23342 (= lt!8338 (lemmaValidKeyInArrayIsInListMap!10 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (index!2338 lt!8356) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> b!23342 (= lt!8342 (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))))

(declare-fun lt!8359 () Unit!522)

(declare-fun lt!8354 () Unit!522)

(assert (=> b!23342 (= lt!8359 lt!8354)))

(declare-fun call!1937 () ListLongMap!563)

(assert (=> b!23342 (= call!1946 call!1937)))

(assert (=> b!23342 (= lt!8354 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (index!2338 lt!8356) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8344 () Unit!522)

(declare-fun e!15165 () Unit!522)

(assert (=> b!23342 (= lt!8344 e!15165)))

(declare-fun c!3005 () Bool)

(declare-fun call!1940 () Bool)

(assert (=> b!23342 (= c!3005 call!1940)))

(declare-fun e!15162 () tuple2!962)

(assert (=> b!23342 (= e!15162 (tuple2!963 true (LongMapFixedSize!209 (defaultEntry!1742 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (_size!149 (_2!490 lt!8142)) (_keys!3163 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (_vacant!149 (_2!490 lt!8142)))))))

(declare-fun b!23343 () Bool)

(declare-fun c!3004 () Bool)

(declare-fun lt!8348 () SeekEntryResult!54)

(assert (=> b!23343 (= c!3004 ((_ is MissingVacant!54) lt!8348))))

(declare-fun e!15174 () Bool)

(declare-fun e!15156 () Bool)

(assert (=> b!23343 (= e!15174 e!15156)))

(declare-fun b!23344 () Bool)

(declare-fun e!15159 () Bool)

(declare-fun call!1957 () ListLongMap!563)

(assert (=> b!23344 (= e!15159 (= call!1944 call!1957))))

(declare-fun b!23345 () Bool)

(assert (=> b!23345 (= e!15164 e!15162)))

(declare-fun c!3002 () Bool)

(assert (=> b!23345 (= c!3002 ((_ is MissingZero!54) lt!8356))))

(declare-fun b!23346 () Bool)

(declare-fun e!15158 () Unit!522)

(declare-fun Unit!531 () Unit!522)

(assert (=> b!23346 (= e!15158 Unit!531)))

(declare-fun lt!8343 () Unit!522)

(declare-fun call!1953 () Unit!522)

(assert (=> b!23346 (= lt!8343 call!1953)))

(declare-fun call!1955 () SeekEntryResult!54)

(assert (=> b!23346 (= lt!8346 call!1955)))

(declare-fun res!14377 () Bool)

(assert (=> b!23346 (= res!14377 ((_ is Found!54) lt!8346))))

(assert (=> b!23346 (=> (not res!14377) (not e!15171))))

(assert (=> b!23346 e!15171))

(declare-fun lt!8345 () Unit!522)

(assert (=> b!23346 (= lt!8345 lt!8343)))

(assert (=> b!23346 false))

(declare-fun b!23347 () Bool)

(declare-fun e!15169 () tuple2!962)

(assert (=> b!23347 (= e!15169 e!15175)))

(assert (=> b!23347 (= lt!8356 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun c!3007 () Bool)

(assert (=> b!23347 (= c!3007 ((_ is Undefined!54) lt!8356))))

(declare-fun b!23348 () Bool)

(declare-fun res!14373 () Bool)

(declare-fun call!1935 () Bool)

(assert (=> b!23348 (= res!14373 call!1935)))

(assert (=> b!23348 (=> (not res!14373) (not e!15171))))

(declare-fun b!23349 () Bool)

(declare-fun lt!8349 () Unit!522)

(assert (=> b!23349 (= e!15158 lt!8349)))

(declare-fun call!1956 () Unit!522)

(assert (=> b!23349 (= lt!8349 call!1956)))

(assert (=> b!23349 (= lt!8348 call!1955)))

(declare-fun c!3012 () Bool)

(assert (=> b!23349 (= c!3012 ((_ is MissingZero!54) lt!8348))))

(assert (=> b!23349 e!15174))

(declare-fun bm!1934 () Bool)

(declare-fun call!1954 () Bool)

(assert (=> bm!1934 (= call!1954 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun b!23350 () Bool)

(declare-fun Unit!532 () Unit!522)

(assert (=> b!23350 (= e!15165 Unit!532)))

(declare-fun lt!8360 () Unit!522)

(assert (=> b!23350 (= lt!8360 call!1956)))

(declare-fun call!1958 () SeekEntryResult!54)

(assert (=> b!23350 (= lt!8353 call!1958)))

(declare-fun c!3003 () Bool)

(assert (=> b!23350 (= c!3003 ((_ is MissingZero!54) lt!8353))))

(assert (=> b!23350 e!15170))

(declare-fun lt!8363 () Unit!522)

(assert (=> b!23350 (= lt!8363 lt!8360)))

(assert (=> b!23350 false))

(declare-fun bm!1935 () Bool)

(assert (=> bm!1935 (= call!1957 (map!408 (_2!490 lt!8142)))))

(declare-fun b!23351 () Bool)

(declare-fun e!15176 () Bool)

(declare-fun call!1945 () Bool)

(assert (=> b!23351 (= e!15176 (not call!1945))))

(declare-fun b!23352 () Bool)

(declare-fun lt!8347 () tuple2!962)

(declare-fun call!1939 () tuple2!962)

(assert (=> b!23352 (= lt!8347 call!1939)))

(assert (=> b!23352 (= e!15162 (tuple2!963 (_1!490 lt!8347) (_2!490 lt!8347)))))

(declare-fun b!23353 () Bool)

(declare-fun e!15168 () Bool)

(declare-fun lt!8358 () SeekEntryResult!54)

(assert (=> b!23353 (= e!15168 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8358)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!1936 () Bool)

(assert (=> bm!1936 (= call!1953 (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!23354 () Bool)

(declare-fun res!14381 () Bool)

(declare-fun e!15160 () Bool)

(assert (=> b!23354 (=> (not res!14381) (not e!15160))))

(assert (=> b!23354 (= res!14381 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2337 lt!8353)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23355 () Bool)

(declare-fun e!15157 () ListLongMap!563)

(assert (=> b!23355 (= e!15157 call!1937)))

(declare-fun b!23356 () Bool)

(declare-fun e!15167 () Bool)

(assert (=> b!23356 (= e!15159 e!15167)))

(declare-fun res!14385 () Bool)

(assert (=> b!23356 (= res!14385 (contains!229 call!1944 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23356 (=> (not res!14385) (not e!15167))))

(declare-fun bm!1937 () Bool)

(declare-fun call!1941 () ListLongMap!563)

(declare-fun call!1942 () ListLongMap!563)

(assert (=> bm!1937 (= call!1941 call!1942)))

(declare-fun bm!1938 () Bool)

(assert (=> bm!1938 (= call!1956 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!23357 () Bool)

(declare-fun res!14374 () Bool)

(declare-fun call!1950 () Bool)

(assert (=> b!23357 (= res!14374 call!1950)))

(assert (=> b!23357 (=> (not res!14374) (not e!15168))))

(declare-fun b!23358 () Bool)

(assert (=> b!23358 (= e!15167 (= call!1944 (+!44 call!1957 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun bm!1939 () Bool)

(declare-fun call!1938 () Bool)

(assert (=> bm!1939 (= call!1938 call!1950)))

(declare-fun bm!1940 () Bool)

(assert (=> bm!1940 (= call!1939 (updateHelperNewKey!10 (_2!490 lt!8142) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))))))

(declare-fun b!23359 () Bool)

(declare-fun res!14383 () Bool)

(declare-fun e!15173 () Bool)

(assert (=> b!23359 (=> (not res!14383) (not e!15173))))

(declare-fun call!1943 () Bool)

(assert (=> b!23359 (= res!14383 call!1943)))

(assert (=> b!23359 (= e!15174 e!15173)))

(declare-fun b!23360 () Bool)

(assert (=> b!23360 (= e!15163 ((_ is Undefined!54) lt!8353))))

(declare-fun b!23361 () Bool)

(declare-fun res!14384 () Bool)

(assert (=> b!23361 (=> (not res!14384) (not e!15160))))

(assert (=> b!23361 (= res!14384 call!1938)))

(assert (=> b!23361 (= e!15170 e!15160)))

(declare-fun b!23362 () Bool)

(declare-fun res!14379 () Bool)

(assert (=> b!23362 (= res!14379 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2340 lt!8348)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15161 () Bool)

(assert (=> b!23362 (=> (not res!14379) (not e!15161))))

(declare-fun bm!1941 () Bool)

(declare-fun call!1947 () ListLongMap!563)

(assert (=> bm!1941 (= call!1947 call!1946)))

(declare-fun b!23363 () Bool)

(declare-fun lt!8351 () tuple2!962)

(assert (=> b!23363 (= e!15164 (tuple2!963 (_1!490 lt!8351) (_2!490 lt!8351)))))

(assert (=> b!23363 (= lt!8351 call!1939)))

(declare-fun b!23364 () Bool)

(assert (=> b!23364 (= e!15156 e!15161)))

(declare-fun res!14372 () Bool)

(assert (=> b!23364 (= res!14372 call!1943)))

(assert (=> b!23364 (=> (not res!14372) (not e!15161))))

(declare-fun bm!1942 () Bool)

(assert (=> bm!1942 (= call!1943 call!1935)))

(declare-fun b!23365 () Bool)

(declare-fun call!1949 () Bool)

(assert (=> b!23365 (= e!15173 (not call!1949))))

(declare-fun c!3006 () Bool)

(declare-fun bm!1943 () Bool)

(declare-fun call!1936 () Bool)

(assert (=> bm!1943 (= call!1936 (inRange!0 (ite c!3007 (ite c!3006 (index!2338 lt!8346) (ite c!3012 (index!2337 lt!8348) (index!2340 lt!8348))) (ite c!3005 (index!2338 lt!8358) (ite c!3003 (index!2337 lt!8353) (index!2340 lt!8353)))) (mask!4729 (_2!490 lt!8142))))))

(declare-fun bm!1944 () Bool)

(declare-fun call!1948 () SeekEntryResult!54)

(assert (=> bm!1944 (= call!1948 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!23366 () Bool)

(declare-fun lt!8357 () Unit!522)

(assert (=> b!23366 (= e!15165 lt!8357)))

(assert (=> b!23366 (= lt!8357 call!1953)))

(assert (=> b!23366 (= lt!8358 call!1958)))

(declare-fun res!14376 () Bool)

(assert (=> b!23366 (= res!14376 ((_ is Found!54) lt!8358))))

(assert (=> b!23366 (=> (not res!14376) (not e!15168))))

(assert (=> b!23366 e!15168))

(declare-fun b!23367 () Bool)

(declare-fun e!15172 () Bool)

(assert (=> b!23367 (= e!15172 e!15159)))

(declare-fun c!3011 () Bool)

(assert (=> b!23367 (= c!3011 (_1!490 lt!8361))))

(declare-fun b!23368 () Bool)

(assert (=> b!23368 (= e!15157 call!1952)))

(declare-fun bm!1945 () Bool)

(assert (=> bm!1945 (= call!1935 call!1936)))

(declare-fun b!23369 () Bool)

(declare-fun lt!8355 () Unit!522)

(assert (=> b!23369 (= lt!8355 e!15158)))

(assert (=> b!23369 (= c!3006 call!1940)))

(assert (=> b!23369 (= e!15175 (tuple2!963 false (_2!490 lt!8142)))))

(declare-fun b!23370 () Bool)

(declare-fun res!14380 () Bool)

(assert (=> b!23370 (= res!14380 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2340 lt!8353)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23370 (=> (not res!14380) (not e!15176))))

(declare-fun b!23371 () Bool)

(assert (=> b!23371 (= e!15160 (not call!1945))))

(declare-fun b!23372 () Bool)

(assert (=> b!23372 (= e!15156 ((_ is Undefined!54) lt!8348))))

(declare-fun bm!1946 () Bool)

(assert (=> bm!1946 (= call!1945 call!1954)))

(declare-fun bm!1947 () Bool)

(assert (=> bm!1947 (= call!1952 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!23373 () Bool)

(declare-fun lt!8350 () Unit!522)

(declare-fun lt!8352 () Unit!522)

(assert (=> b!23373 (= lt!8350 lt!8352)))

(assert (=> b!23373 (= call!1947 call!1941)))

(declare-fun lt!8364 () (_ BitVec 32))

(assert (=> b!23373 (= lt!8352 (lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> b!23373 (= lt!8364 (bvor (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010))))

(declare-fun e!15166 () tuple2!962)

(assert (=> b!23373 (= e!15166 (tuple2!963 true (LongMapFixedSize!209 (defaultEntry!1742 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (bvor (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (_size!149 (_2!490 lt!8142)) (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (_vacant!149 (_2!490 lt!8142)))))))

(declare-fun bm!1948 () Bool)

(assert (=> bm!1948 (= call!1949 call!1954)))

(declare-fun b!23374 () Bool)

(assert (=> b!23374 (= e!15169 e!15166)))

(assert (=> b!23374 (= c!3008 (= #b1000000000000000000000000000000000000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!1949 () Bool)

(assert (=> bm!1949 (= call!1951 call!1952)))

(declare-fun b!23375 () Bool)

(declare-fun res!14382 () Bool)

(assert (=> b!23375 (=> (not res!14382) (not e!15173))))

(assert (=> b!23375 (= res!14382 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2337 lt!8348)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!1950 () Bool)

(assert (=> bm!1950 (= call!1937 call!1942)))

(declare-fun bm!1951 () Bool)

(assert (=> bm!1951 (= call!1958 call!1948)))

(declare-fun b!23376 () Bool)

(declare-fun lt!8341 () Unit!522)

(declare-fun lt!8362 () Unit!522)

(assert (=> b!23376 (= lt!8341 lt!8362)))

(assert (=> b!23376 (= call!1947 call!1941)))

(declare-fun lt!8340 () (_ BitVec 32))

(assert (=> b!23376 (= lt!8362 (lemmaChangeZeroKeyThenAddPairToListMap!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) lt!8340 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> b!23376 (= lt!8340 (bvor (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001))))

(assert (=> b!23376 (= e!15166 (tuple2!963 true (LongMapFixedSize!209 (defaultEntry!1742 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (bvor (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) (_size!149 (_2!490 lt!8142)) (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (_vacant!149 (_2!490 lt!8142)))))))

(declare-fun bm!1953 () Bool)

(assert (=> bm!1953 (= call!1955 call!1948)))

(declare-fun bm!1954 () Bool)

(assert (=> bm!1954 (= call!1942 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun d!3967 () Bool)

(assert (=> d!3967 e!15172))

(declare-fun res!14375 () Bool)

(assert (=> d!3967 (=> (not res!14375) (not e!15172))))

(assert (=> d!3967 (= res!14375 (valid!121 (_2!490 lt!8361)))))

(assert (=> d!3967 (= lt!8361 e!15169)))

(assert (=> d!3967 (= c!3009 (= #b1000000000000000000000000000000000000000000000000000000000000000 (bvneg #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!3967 (valid!121 (_2!490 lt!8142))))

(assert (=> d!3967 (= (update!41 (_2!490 lt!8142) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) lt!8361)))

(declare-fun bm!1952 () Bool)

(assert (=> bm!1952 (= call!1950 call!1936)))

(declare-fun bm!1955 () Bool)

(declare-fun c!3000 () Bool)

(assert (=> bm!1955 (= c!3000 c!3007)))

(assert (=> bm!1955 (= call!1940 (contains!229 e!15157 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23377 () Bool)

(assert (=> b!23377 (= e!15161 (not call!1949))))

(declare-fun b!23378 () Bool)

(assert (=> b!23378 (= e!15163 e!15176)))

(declare-fun res!14378 () Bool)

(assert (=> b!23378 (= res!14378 call!1938)))

(assert (=> b!23378 (=> (not res!14378) (not e!15176))))

(assert (= (and d!3967 c!3009) b!23374))

(assert (= (and d!3967 (not c!3009)) b!23347))

(assert (= (and b!23374 c!3008) b!23376))

(assert (= (and b!23374 (not c!3008)) b!23373))

(assert (= (or b!23376 b!23373) bm!1937))

(assert (= (or b!23376 b!23373) bm!1949))

(assert (= (or b!23376 b!23373) bm!1941))

(assert (= (and b!23347 c!3007) b!23369))

(assert (= (and b!23347 (not c!3007)) b!23339))

(assert (= (and b!23369 c!3006) b!23346))

(assert (= (and b!23369 (not c!3006)) b!23349))

(assert (= (and b!23346 res!14377) b!23348))

(assert (= (and b!23348 res!14373) b!23341))

(assert (= (and b!23349 c!3012) b!23359))

(assert (= (and b!23349 (not c!3012)) b!23343))

(assert (= (and b!23359 res!14383) b!23375))

(assert (= (and b!23375 res!14382) b!23365))

(assert (= (and b!23343 c!3004) b!23364))

(assert (= (and b!23343 (not c!3004)) b!23372))

(assert (= (and b!23364 res!14372) b!23362))

(assert (= (and b!23362 res!14379) b!23377))

(assert (= (or b!23359 b!23364) bm!1942))

(assert (= (or b!23365 b!23377) bm!1948))

(assert (= (or b!23348 bm!1942) bm!1945))

(assert (= (or b!23346 b!23349) bm!1953))

(assert (= (and b!23339 c!3010) b!23363))

(assert (= (and b!23339 (not c!3010)) b!23345))

(assert (= (and b!23345 c!3002) b!23352))

(assert (= (and b!23345 (not c!3002)) b!23342))

(assert (= (and b!23342 c!3005) b!23366))

(assert (= (and b!23342 (not c!3005)) b!23350))

(assert (= (and b!23366 res!14376) b!23357))

(assert (= (and b!23357 res!14374) b!23353))

(assert (= (and b!23350 c!3003) b!23361))

(assert (= (and b!23350 (not c!3003)) b!23340))

(assert (= (and b!23361 res!14384) b!23354))

(assert (= (and b!23354 res!14381) b!23371))

(assert (= (and b!23340 c!3001) b!23378))

(assert (= (and b!23340 (not c!3001)) b!23360))

(assert (= (and b!23378 res!14378) b!23370))

(assert (= (and b!23370 res!14380) b!23351))

(assert (= (or b!23361 b!23378) bm!1939))

(assert (= (or b!23371 b!23351) bm!1946))

(assert (= (or b!23357 bm!1939) bm!1952))

(assert (= (or b!23366 b!23350) bm!1951))

(assert (= (or b!23363 b!23352) bm!1940))

(assert (= (or bm!1948 bm!1946) bm!1934))

(assert (= (or bm!1945 bm!1952) bm!1943))

(assert (= (or bm!1953 bm!1951) bm!1944))

(assert (= (or b!23346 b!23366) bm!1936))

(assert (= (or b!23369 b!23342) bm!1950))

(assert (= (or b!23349 b!23350) bm!1938))

(assert (= (or b!23369 b!23342) bm!1955))

(assert (= (and bm!1955 c!3000) b!23355))

(assert (= (and bm!1955 (not c!3000)) b!23368))

(assert (= (or bm!1937 bm!1950) bm!1954))

(assert (= (or bm!1949 b!23342 b!23368) bm!1947))

(assert (= (or bm!1941 b!23342) bm!1932))

(assert (= (and d!3967 res!14375) b!23367))

(assert (= (and b!23367 c!3011) b!23356))

(assert (= (and b!23367 (not c!3011)) b!23344))

(assert (= (and b!23356 res!14385) b!23358))

(assert (= (or b!23356 b!23358 b!23344) bm!1933))

(assert (= (or b!23358 b!23344) bm!1935))

(declare-fun m!16830 () Bool)

(assert (=> b!23356 m!16830))

(declare-fun m!16832 () Bool)

(assert (=> bm!1935 m!16832))

(declare-fun m!16834 () Bool)

(assert (=> b!23347 m!16834))

(declare-fun m!16836 () Bool)

(assert (=> bm!1938 m!16836))

(declare-fun m!16838 () Bool)

(assert (=> bm!1932 m!16838))

(declare-fun m!16840 () Bool)

(assert (=> bm!1940 m!16840))

(declare-fun m!16842 () Bool)

(assert (=> bm!1934 m!16842))

(declare-fun m!16844 () Bool)

(assert (=> bm!1947 m!16844))

(declare-fun m!16846 () Bool)

(assert (=> b!23354 m!16846))

(declare-fun m!16848 () Bool)

(assert (=> bm!1943 m!16848))

(declare-fun m!16850 () Bool)

(assert (=> b!23342 m!16850))

(declare-fun m!16852 () Bool)

(assert (=> b!23342 m!16852))

(assert (=> b!23342 m!16852))

(declare-fun m!16854 () Bool)

(assert (=> b!23342 m!16854))

(declare-fun m!16856 () Bool)

(assert (=> b!23342 m!16856))

(assert (=> b!23342 m!16854))

(declare-fun m!16858 () Bool)

(assert (=> b!23342 m!16858))

(declare-fun m!16860 () Bool)

(assert (=> b!23342 m!16860))

(assert (=> bm!1954 m!16850))

(declare-fun m!16862 () Bool)

(assert (=> bm!1954 m!16862))

(declare-fun m!16864 () Bool)

(assert (=> b!23370 m!16864))

(declare-fun m!16866 () Bool)

(assert (=> b!23362 m!16866))

(declare-fun m!16868 () Bool)

(assert (=> b!23375 m!16868))

(declare-fun m!16870 () Bool)

(assert (=> b!23353 m!16870))

(declare-fun m!16872 () Bool)

(assert (=> b!23373 m!16872))

(declare-fun m!16874 () Bool)

(assert (=> bm!1933 m!16874))

(declare-fun m!16876 () Bool)

(assert (=> b!23376 m!16876))

(declare-fun m!16878 () Bool)

(assert (=> b!23358 m!16878))

(assert (=> bm!1944 m!16834))

(declare-fun m!16880 () Bool)

(assert (=> bm!1936 m!16880))

(declare-fun m!16882 () Bool)

(assert (=> d!3967 m!16882))

(declare-fun m!16884 () Bool)

(assert (=> d!3967 m!16884))

(declare-fun m!16886 () Bool)

(assert (=> bm!1955 m!16886))

(declare-fun m!16888 () Bool)

(assert (=> b!23341 m!16888))

(assert (=> b!23090 d!3967))

(declare-fun b!23385 () Bool)

(declare-fun e!15181 () Bool)

(assert (=> b!23385 (= e!15181 tp_is_empty!1021)))

(declare-fun mapIsEmpty!1031 () Bool)

(declare-fun mapRes!1031 () Bool)

(assert (=> mapIsEmpty!1031 mapRes!1031))

(declare-fun mapNonEmpty!1031 () Bool)

(declare-fun tp!3533 () Bool)

(assert (=> mapNonEmpty!1031 (= mapRes!1031 (and tp!3533 e!15181))))

(declare-fun mapValue!1031 () ValueCell!311)

(declare-fun mapRest!1031 () (Array (_ BitVec 32) ValueCell!311))

(declare-fun mapKey!1031 () (_ BitVec 32))

(assert (=> mapNonEmpty!1031 (= mapRest!1022 (store mapRest!1031 mapKey!1031 mapValue!1031))))

(declare-fun b!23386 () Bool)

(declare-fun e!15182 () Bool)

(assert (=> b!23386 (= e!15182 tp_is_empty!1021)))

(declare-fun condMapEmpty!1031 () Bool)

(declare-fun mapDefault!1031 () ValueCell!311)

(assert (=> mapNonEmpty!1022 (= condMapEmpty!1031 (= mapRest!1022 ((as const (Array (_ BitVec 32) ValueCell!311)) mapDefault!1031)))))

(assert (=> mapNonEmpty!1022 (= tp!3518 (and e!15182 mapRes!1031))))

(assert (= (and mapNonEmpty!1022 condMapEmpty!1031) mapIsEmpty!1031))

(assert (= (and mapNonEmpty!1022 (not condMapEmpty!1031)) mapNonEmpty!1031))

(assert (= (and mapNonEmpty!1031 ((_ is ValueCellFull!311) mapValue!1031)) b!23385))

(assert (= (and mapNonEmpty!1022 ((_ is ValueCellFull!311) mapDefault!1031)) b!23386))

(declare-fun m!16890 () Bool)

(assert (=> mapNonEmpty!1031 m!16890))

(declare-fun b_lambda!1567 () Bool)

(assert (= b_lambda!1563 (or (and b!23087 b_free!757) b_lambda!1567)))

(declare-fun b_lambda!1569 () Bool)

(assert (= b_lambda!1565 (or (and b!23087 b_free!757) b_lambda!1569)))

(check-sat (not b!23202) (not bm!1943) (not bm!1923) (not b!23318) (not bm!1908) (not d!3967) (not bm!1935) (not b!23307) (not bm!1947) (not b!23356) tp_is_empty!1021 (not bm!1912) (not bm!1944) (not bm!1954) (not b!23216) (not bm!1936) (not b_next!757) (not b!23316) (not d!3957) (not b!23206) (not bm!1938) (not b!23376) (not b!23336) (not b!23333) (not bm!1911) (not b!23373) (not d!3959) (not b!23204) (not bm!1909) (not b_lambda!1567) (not bm!1910) (not mapNonEmpty!1031) (not bm!1916) (not bm!1932) (not bm!1931) (not bm!1920) (not b!23302) (not bm!1919) (not bm!1914) (not b!23358) (not bm!1955) (not b!23347) (not bm!1934) (not d!3955) (not bm!1933) b_and!1481 (not b_lambda!1569) (not bm!1940) (not d!3965) (not b!23342) (not bm!1930))
(check-sat b_and!1481 (not b_next!757))
(get-model)

(declare-fun d!3969 () Bool)

(declare-fun e!15188 () Bool)

(assert (=> d!3969 e!15188))

(declare-fun res!14388 () Bool)

(assert (=> d!3969 (=> res!14388 e!15188)))

(declare-fun lt!8374 () Bool)

(assert (=> d!3969 (= res!14388 (not lt!8374))))

(declare-fun lt!8375 () Bool)

(assert (=> d!3969 (= lt!8374 lt!8375)))

(declare-fun lt!8373 () Unit!522)

(declare-fun e!15187 () Unit!522)

(assert (=> d!3969 (= lt!8373 e!15187)))

(declare-fun c!3015 () Bool)

(assert (=> d!3969 (= c!3015 lt!8375)))

(declare-fun containsKey!25 (List!564 (_ BitVec 64)) Bool)

(assert (=> d!3969 (= lt!8375 (containsKey!25 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!3969 (= (contains!229 e!15157 #b1000000000000000000000000000000000000000000000000000000000000000) lt!8374)))

(declare-fun b!23393 () Bool)

(declare-fun lt!8376 () Unit!522)

(assert (=> b!23393 (= e!15187 lt!8376)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!22 (List!564 (_ BitVec 64)) Unit!522)

(assert (=> b!23393 (= lt!8376 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-datatypes ((Option!67 0))(
  ( (Some!66 (v!1611 V!1187)) (None!65) )
))
(declare-fun isDefined!23 (Option!67) Bool)

(declare-fun getValueByKey!61 (List!564 (_ BitVec 64)) Option!67)

(assert (=> b!23393 (isDefined!23 (getValueByKey!61 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23394 () Bool)

(declare-fun Unit!533 () Unit!522)

(assert (=> b!23394 (= e!15187 Unit!533)))

(declare-fun b!23395 () Bool)

(assert (=> b!23395 (= e!15188 (isDefined!23 (getValueByKey!61 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!3969 c!3015) b!23393))

(assert (= (and d!3969 (not c!3015)) b!23394))

(assert (= (and d!3969 (not res!14388)) b!23395))

(declare-fun m!16892 () Bool)

(assert (=> d!3969 m!16892))

(declare-fun m!16894 () Bool)

(assert (=> b!23393 m!16894))

(declare-fun m!16896 () Bool)

(assert (=> b!23393 m!16896))

(assert (=> b!23393 m!16896))

(declare-fun m!16898 () Bool)

(assert (=> b!23393 m!16898))

(assert (=> b!23395 m!16896))

(assert (=> b!23395 m!16896))

(assert (=> b!23395 m!16898))

(assert (=> bm!1955 d!3969))

(declare-fun d!3971 () Bool)

(declare-fun e!15191 () Bool)

(assert (=> d!3971 e!15191))

(declare-fun res!14393 () Bool)

(assert (=> d!3971 (=> (not res!14393) (not e!15191))))

(declare-fun lt!8381 () SeekEntryResult!54)

(assert (=> d!3971 (= res!14393 ((_ is Found!54) lt!8381))))

(assert (=> d!3971 (= lt!8381 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun lt!8382 () Unit!522)

(declare-fun choose!204 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!522)

(assert (=> d!3971 (= lt!8382 (choose!204 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!3971 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!3971 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!8382)))

(declare-fun b!23400 () Bool)

(declare-fun res!14394 () Bool)

(assert (=> b!23400 (=> (not res!14394) (not e!15191))))

(assert (=> b!23400 (= res!14394 (inRange!0 (index!2338 lt!8381) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!23401 () Bool)

(assert (=> b!23401 (= e!15191 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8381)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23401 (and (bvsge (index!2338 lt!8381) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8381) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (= (and d!3971 res!14393) b!23400))

(assert (= (and b!23400 res!14394) b!23401))

(assert (=> d!3971 m!16834))

(declare-fun m!16900 () Bool)

(assert (=> d!3971 m!16900))

(declare-fun m!16902 () Bool)

(assert (=> d!3971 m!16902))

(declare-fun m!16904 () Bool)

(assert (=> b!23400 m!16904))

(declare-fun m!16906 () Bool)

(assert (=> b!23401 m!16906))

(assert (=> bm!1936 d!3971))

(declare-fun d!3973 () Bool)

(assert (=> d!3973 (= (validMask!0 lt!8255) (and (or (= lt!8255 #b00000000000000000000000000000111) (= lt!8255 #b00000000000000000000000000001111) (= lt!8255 #b00000000000000000000000000011111) (= lt!8255 #b00000000000000000000000000111111) (= lt!8255 #b00000000000000000000000001111111) (= lt!8255 #b00000000000000000000000011111111) (= lt!8255 #b00000000000000000000000111111111) (= lt!8255 #b00000000000000000000001111111111) (= lt!8255 #b00000000000000000000011111111111) (= lt!8255 #b00000000000000000000111111111111) (= lt!8255 #b00000000000000000001111111111111) (= lt!8255 #b00000000000000000011111111111111) (= lt!8255 #b00000000000000000111111111111111) (= lt!8255 #b00000000000000001111111111111111) (= lt!8255 #b00000000000000011111111111111111) (= lt!8255 #b00000000000000111111111111111111) (= lt!8255 #b00000000000001111111111111111111) (= lt!8255 #b00000000000011111111111111111111) (= lt!8255 #b00000000000111111111111111111111) (= lt!8255 #b00000000001111111111111111111111) (= lt!8255 #b00000000011111111111111111111111) (= lt!8255 #b00000000111111111111111111111111) (= lt!8255 #b00000001111111111111111111111111) (= lt!8255 #b00000011111111111111111111111111) (= lt!8255 #b00000111111111111111111111111111) (= lt!8255 #b00001111111111111111111111111111) (= lt!8255 #b00011111111111111111111111111111) (= lt!8255 #b00111111111111111111111111111111)) (bvsle lt!8255 #b00111111111111111111111111111111)))))

(assert (=> d!3959 d!3973))

(assert (=> d!3959 d!3953))

(declare-fun b!23414 () Bool)

(declare-fun e!15200 () SeekEntryResult!54)

(assert (=> b!23414 (= e!15200 Undefined!54)))

(declare-fun lt!8391 () SeekEntryResult!54)

(declare-fun d!3975 () Bool)

(assert (=> d!3975 (and (or ((_ is Undefined!54) lt!8391) (not ((_ is Found!54) lt!8391)) (and (bvsge (index!2338 lt!8391) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8391) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!54) lt!8391) ((_ is Found!54) lt!8391) (not ((_ is MissingZero!54) lt!8391)) (and (bvsge (index!2337 lt!8391) #b00000000000000000000000000000000) (bvslt (index!2337 lt!8391) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!54) lt!8391) ((_ is Found!54) lt!8391) ((_ is MissingZero!54) lt!8391) (not ((_ is MissingVacant!54) lt!8391)) (and (bvsge (index!2340 lt!8391) #b00000000000000000000000000000000) (bvslt (index!2340 lt!8391) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!54) lt!8391) (ite ((_ is Found!54) lt!8391) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8391)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite ((_ is MissingZero!54) lt!8391) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2337 lt!8391)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!54) lt!8391) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2340 lt!8391)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!3975 (= lt!8391 e!15200)))

(declare-fun c!3022 () Bool)

(declare-fun lt!8389 () SeekEntryResult!54)

(assert (=> d!3975 (= c!3022 (and ((_ is Intermediate!54) lt!8389) (undefined!866 lt!8389)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!1263 (_ BitVec 32)) SeekEntryResult!54)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!3975 (= lt!8389 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(assert (=> d!3975 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!3975 (= (seekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)) lt!8391)))

(declare-fun b!23415 () Bool)

(declare-fun c!3023 () Bool)

(declare-fun lt!8390 () (_ BitVec 64))

(assert (=> b!23415 (= c!3023 (= lt!8390 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15199 () SeekEntryResult!54)

(declare-fun e!15198 () SeekEntryResult!54)

(assert (=> b!23415 (= e!15199 e!15198)))

(declare-fun b!23416 () Bool)

(assert (=> b!23416 (= e!15200 e!15199)))

(assert (=> b!23416 (= lt!8390 (select (arr!597 (_keys!3163 lt!8141)) (index!2339 lt!8389)))))

(declare-fun c!3024 () Bool)

(assert (=> b!23416 (= c!3024 (= lt!8390 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23417 () Bool)

(assert (=> b!23417 (= e!15198 (MissingZero!54 (index!2339 lt!8389)))))

(declare-fun b!23418 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!1263 (_ BitVec 32)) SeekEntryResult!54)

(assert (=> b!23418 (= e!15198 (seekKeyOrZeroReturnVacant!0 (x!5576 lt!8389) (index!2339 lt!8389) (index!2339 lt!8389) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!23419 () Bool)

(assert (=> b!23419 (= e!15199 (Found!54 (index!2339 lt!8389)))))

(assert (= (and d!3975 c!3022) b!23414))

(assert (= (and d!3975 (not c!3022)) b!23416))

(assert (= (and b!23416 c!3024) b!23419))

(assert (= (and b!23416 (not c!3024)) b!23415))

(assert (= (and b!23415 c!3023) b!23417))

(assert (= (and b!23415 (not c!3023)) b!23418))

(declare-fun m!16908 () Bool)

(assert (=> d!3975 m!16908))

(declare-fun m!16910 () Bool)

(assert (=> d!3975 m!16910))

(declare-fun m!16912 () Bool)

(assert (=> d!3975 m!16912))

(declare-fun m!16914 () Bool)

(assert (=> d!3975 m!16914))

(declare-fun m!16916 () Bool)

(assert (=> d!3975 m!16916))

(declare-fun m!16918 () Bool)

(assert (=> d!3975 m!16918))

(assert (=> d!3975 m!16910))

(declare-fun m!16920 () Bool)

(assert (=> b!23416 m!16920))

(declare-fun m!16922 () Bool)

(assert (=> b!23418 m!16922))

(assert (=> b!23307 d!3975))

(declare-fun b!23462 () Bool)

(declare-fun e!15235 () ListLongMap!563)

(declare-fun call!1975 () ListLongMap!563)

(assert (=> b!23462 (= e!15235 call!1975)))

(declare-fun b!23463 () Bool)

(declare-fun e!15238 () Bool)

(declare-fun lt!8447 () ListLongMap!563)

(declare-fun apply!29 (ListLongMap!563 (_ BitVec 64)) V!1187)

(assert (=> b!23463 (= e!15238 (= (apply!29 lt!8447 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!23464 () Bool)

(declare-fun e!15227 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!23464 (= e!15227 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!1970 () Bool)

(declare-fun call!1978 () ListLongMap!563)

(declare-fun getCurrentListMapNoExtraKeys!15 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) Int) ListLongMap!563)

(assert (=> bm!1970 (= call!1978 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23465 () Bool)

(declare-fun e!15232 () ListLongMap!563)

(assert (=> b!23465 (= e!15232 e!15235)))

(declare-fun c!3041 () Bool)

(assert (=> b!23465 (= c!3041 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23466 () Bool)

(declare-fun e!15237 () Bool)

(declare-fun call!1974 () Bool)

(assert (=> b!23466 (= e!15237 (not call!1974))))

(declare-fun b!23467 () Bool)

(declare-fun e!15234 () Bool)

(assert (=> b!23467 (= e!15234 e!15238)))

(declare-fun res!14418 () Bool)

(declare-fun call!1976 () Bool)

(assert (=> b!23467 (= res!14418 call!1976)))

(assert (=> b!23467 (=> (not res!14418) (not e!15238))))

(declare-fun bm!1971 () Bool)

(declare-fun call!1977 () ListLongMap!563)

(assert (=> bm!1971 (= call!1975 call!1977)))

(declare-fun b!23469 () Bool)

(assert (=> b!23469 (= e!15234 (not call!1976))))

(declare-fun bm!1972 () Bool)

(declare-fun call!1973 () ListLongMap!563)

(assert (=> bm!1972 (= call!1973 call!1978)))

(declare-fun b!23470 () Bool)

(declare-fun e!15233 () Bool)

(assert (=> b!23470 (= e!15233 e!15234)))

(declare-fun c!3042 () Bool)

(assert (=> b!23470 (= c!3042 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23471 () Bool)

(declare-fun e!15228 () Unit!522)

(declare-fun lt!8436 () Unit!522)

(assert (=> b!23471 (= e!15228 lt!8436)))

(declare-fun lt!8452 () ListLongMap!563)

(assert (=> b!23471 (= lt!8452 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8455 () (_ BitVec 64))

(assert (=> b!23471 (= lt!8455 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8450 () (_ BitVec 64))

(assert (=> b!23471 (= lt!8450 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8440 () Unit!522)

(declare-fun addStillContains!14 (ListLongMap!563 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!522)

(assert (=> b!23471 (= lt!8440 (addStillContains!14 lt!8452 lt!8455 (zeroValue!1665 lt!8141) lt!8450))))

(assert (=> b!23471 (contains!229 (+!44 lt!8452 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141))) lt!8450)))

(declare-fun lt!8441 () Unit!522)

(assert (=> b!23471 (= lt!8441 lt!8440)))

(declare-fun lt!8453 () ListLongMap!563)

(assert (=> b!23471 (= lt!8453 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8439 () (_ BitVec 64))

(assert (=> b!23471 (= lt!8439 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8437 () (_ BitVec 64))

(assert (=> b!23471 (= lt!8437 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8446 () Unit!522)

(declare-fun addApplyDifferent!14 (ListLongMap!563 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!522)

(assert (=> b!23471 (= lt!8446 (addApplyDifferent!14 lt!8453 lt!8439 (minValue!1665 lt!8141) lt!8437))))

(assert (=> b!23471 (= (apply!29 (+!44 lt!8453 (tuple2!973 lt!8439 (minValue!1665 lt!8141))) lt!8437) (apply!29 lt!8453 lt!8437))))

(declare-fun lt!8444 () Unit!522)

(assert (=> b!23471 (= lt!8444 lt!8446)))

(declare-fun lt!8442 () ListLongMap!563)

(assert (=> b!23471 (= lt!8442 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8457 () (_ BitVec 64))

(assert (=> b!23471 (= lt!8457 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8449 () (_ BitVec 64))

(assert (=> b!23471 (= lt!8449 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8438 () Unit!522)

(assert (=> b!23471 (= lt!8438 (addApplyDifferent!14 lt!8442 lt!8457 (zeroValue!1665 lt!8141) lt!8449))))

(assert (=> b!23471 (= (apply!29 (+!44 lt!8442 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141))) lt!8449) (apply!29 lt!8442 lt!8449))))

(declare-fun lt!8451 () Unit!522)

(assert (=> b!23471 (= lt!8451 lt!8438)))

(declare-fun lt!8456 () ListLongMap!563)

(assert (=> b!23471 (= lt!8456 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8454 () (_ BitVec 64))

(assert (=> b!23471 (= lt!8454 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8448 () (_ BitVec 64))

(assert (=> b!23471 (= lt!8448 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!23471 (= lt!8436 (addApplyDifferent!14 lt!8456 lt!8454 (minValue!1665 lt!8141) lt!8448))))

(assert (=> b!23471 (= (apply!29 (+!44 lt!8456 (tuple2!973 lt!8454 (minValue!1665 lt!8141))) lt!8448) (apply!29 lt!8456 lt!8448))))

(declare-fun call!1979 () ListLongMap!563)

(declare-fun bm!1973 () Bool)

(declare-fun c!3040 () Bool)

(assert (=> bm!1973 (= call!1977 (+!44 (ite c!3040 call!1978 (ite c!3041 call!1973 call!1979)) (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!23472 () Bool)

(declare-fun Unit!534 () Unit!522)

(assert (=> b!23472 (= e!15228 Unit!534)))

(declare-fun b!23473 () Bool)

(declare-fun e!15230 () Bool)

(assert (=> b!23473 (= e!15237 e!15230)))

(declare-fun res!14416 () Bool)

(assert (=> b!23473 (= res!14416 call!1974)))

(assert (=> b!23473 (=> (not res!14416) (not e!15230))))

(declare-fun bm!1974 () Bool)

(assert (=> bm!1974 (= call!1979 call!1973)))

(declare-fun b!23474 () Bool)

(declare-fun res!14417 () Bool)

(assert (=> b!23474 (=> (not res!14417) (not e!15233))))

(declare-fun e!15231 () Bool)

(assert (=> b!23474 (= res!14417 e!15231)))

(declare-fun res!14413 () Bool)

(assert (=> b!23474 (=> res!14413 e!15231)))

(declare-fun e!15236 () Bool)

(assert (=> b!23474 (= res!14413 (not e!15236))))

(declare-fun res!14420 () Bool)

(assert (=> b!23474 (=> (not res!14420) (not e!15236))))

(assert (=> b!23474 (= res!14420 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23475 () Bool)

(declare-fun e!15229 () Bool)

(assert (=> b!23475 (= e!15231 e!15229)))

(declare-fun res!14414 () Bool)

(assert (=> b!23475 (=> (not res!14414) (not e!15229))))

(assert (=> b!23475 (= res!14414 (contains!229 lt!8447 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23475 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23476 () Bool)

(assert (=> b!23476 (= e!15236 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!23477 () Bool)

(declare-fun e!15239 () ListLongMap!563)

(assert (=> b!23477 (= e!15239 call!1975)))

(declare-fun b!23478 () Bool)

(assert (=> b!23478 (= e!15232 (+!44 call!1977 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun d!3977 () Bool)

(assert (=> d!3977 e!15233))

(declare-fun res!14419 () Bool)

(assert (=> d!3977 (=> (not res!14419) (not e!15233))))

(assert (=> d!3977 (= res!14419 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!8445 () ListLongMap!563)

(assert (=> d!3977 (= lt!8447 lt!8445)))

(declare-fun lt!8443 () Unit!522)

(assert (=> d!3977 (= lt!8443 e!15228)))

(declare-fun c!3038 () Bool)

(assert (=> d!3977 (= c!3038 e!15227)))

(declare-fun res!14421 () Bool)

(assert (=> d!3977 (=> (not res!14421) (not e!15227))))

(assert (=> d!3977 (= res!14421 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!3977 (= lt!8445 e!15232)))

(assert (=> d!3977 (= c!3040 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!3977 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!3977 (= (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8447)))

(declare-fun b!23468 () Bool)

(declare-fun get!390 (ValueCell!311 V!1187) V!1187)

(assert (=> b!23468 (= e!15229 (= (apply!29 lt!8447 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23468 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8141))))))

(assert (=> b!23468 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!1975 () Bool)

(assert (=> bm!1975 (= call!1976 (contains!229 lt!8447 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23479 () Bool)

(declare-fun res!14415 () Bool)

(assert (=> b!23479 (=> (not res!14415) (not e!15233))))

(assert (=> b!23479 (= res!14415 e!15237)))

(declare-fun c!3037 () Bool)

(assert (=> b!23479 (= c!3037 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!23480 () Bool)

(assert (=> b!23480 (= e!15230 (= (apply!29 lt!8447 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun b!23481 () Bool)

(assert (=> b!23481 (= e!15239 call!1979)))

(declare-fun b!23482 () Bool)

(declare-fun c!3039 () Bool)

(assert (=> b!23482 (= c!3039 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23482 (= e!15235 e!15239)))

(declare-fun bm!1976 () Bool)

(assert (=> bm!1976 (= call!1974 (contains!229 lt!8447 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!3977 c!3040) b!23478))

(assert (= (and d!3977 (not c!3040)) b!23465))

(assert (= (and b!23465 c!3041) b!23462))

(assert (= (and b!23465 (not c!3041)) b!23482))

(assert (= (and b!23482 c!3039) b!23477))

(assert (= (and b!23482 (not c!3039)) b!23481))

(assert (= (or b!23477 b!23481) bm!1974))

(assert (= (or b!23462 bm!1974) bm!1972))

(assert (= (or b!23462 b!23477) bm!1971))

(assert (= (or b!23478 bm!1972) bm!1970))

(assert (= (or b!23478 bm!1971) bm!1973))

(assert (= (and d!3977 res!14421) b!23464))

(assert (= (and d!3977 c!3038) b!23471))

(assert (= (and d!3977 (not c!3038)) b!23472))

(assert (= (and d!3977 res!14419) b!23474))

(assert (= (and b!23474 res!14420) b!23476))

(assert (= (and b!23474 (not res!14413)) b!23475))

(assert (= (and b!23475 res!14414) b!23468))

(assert (= (and b!23474 res!14417) b!23479))

(assert (= (and b!23479 c!3037) b!23473))

(assert (= (and b!23479 (not c!3037)) b!23466))

(assert (= (and b!23473 res!14416) b!23480))

(assert (= (or b!23473 b!23466) bm!1976))

(assert (= (and b!23479 res!14415) b!23470))

(assert (= (and b!23470 c!3042) b!23467))

(assert (= (and b!23470 (not c!3042)) b!23469))

(assert (= (and b!23467 res!14418) b!23463))

(assert (= (or b!23467 b!23469) bm!1975))

(declare-fun b_lambda!1571 () Bool)

(assert (=> (not b_lambda!1571) (not b!23468)))

(declare-fun t!3232 () Bool)

(declare-fun tb!653 () Bool)

(assert (=> (and b!23087 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8141)) t!3232) tb!653))

(declare-fun result!1093 () Bool)

(assert (=> tb!653 (= result!1093 tp_is_empty!1021)))

(assert (=> b!23468 t!3232))

(declare-fun b_and!1483 () Bool)

(assert (= b_and!1481 (and (=> t!3232 result!1093) b_and!1483)))

(declare-fun m!16924 () Bool)

(assert (=> b!23480 m!16924))

(declare-fun m!16926 () Bool)

(assert (=> bm!1973 m!16926))

(declare-fun m!16928 () Bool)

(assert (=> b!23468 m!16928))

(assert (=> b!23468 m!16928))

(declare-fun m!16930 () Bool)

(assert (=> b!23468 m!16930))

(declare-fun m!16932 () Bool)

(assert (=> b!23468 m!16932))

(declare-fun m!16934 () Bool)

(assert (=> b!23468 m!16934))

(assert (=> b!23468 m!16930))

(assert (=> b!23468 m!16934))

(declare-fun m!16936 () Bool)

(assert (=> b!23468 m!16936))

(declare-fun m!16938 () Bool)

(assert (=> bm!1975 m!16938))

(assert (=> b!23476 m!16934))

(assert (=> b!23476 m!16934))

(declare-fun m!16940 () Bool)

(assert (=> b!23476 m!16940))

(declare-fun m!16942 () Bool)

(assert (=> bm!1970 m!16942))

(declare-fun m!16944 () Bool)

(assert (=> b!23471 m!16944))

(declare-fun m!16946 () Bool)

(assert (=> b!23471 m!16946))

(declare-fun m!16948 () Bool)

(assert (=> b!23471 m!16948))

(declare-fun m!16950 () Bool)

(assert (=> b!23471 m!16950))

(declare-fun m!16952 () Bool)

(assert (=> b!23471 m!16952))

(declare-fun m!16954 () Bool)

(assert (=> b!23471 m!16954))

(assert (=> b!23471 m!16944))

(declare-fun m!16956 () Bool)

(assert (=> b!23471 m!16956))

(declare-fun m!16958 () Bool)

(assert (=> b!23471 m!16958))

(declare-fun m!16960 () Bool)

(assert (=> b!23471 m!16960))

(declare-fun m!16962 () Bool)

(assert (=> b!23471 m!16962))

(declare-fun m!16964 () Bool)

(assert (=> b!23471 m!16964))

(assert (=> b!23471 m!16942))

(assert (=> b!23471 m!16934))

(declare-fun m!16966 () Bool)

(assert (=> b!23471 m!16966))

(assert (=> b!23471 m!16958))

(declare-fun m!16968 () Bool)

(assert (=> b!23471 m!16968))

(declare-fun m!16970 () Bool)

(assert (=> b!23471 m!16970))

(assert (=> b!23471 m!16948))

(assert (=> b!23471 m!16954))

(declare-fun m!16972 () Bool)

(assert (=> b!23471 m!16972))

(assert (=> b!23475 m!16934))

(assert (=> b!23475 m!16934))

(declare-fun m!16974 () Bool)

(assert (=> b!23475 m!16974))

(declare-fun m!16976 () Bool)

(assert (=> b!23463 m!16976))

(declare-fun m!16978 () Bool)

(assert (=> b!23478 m!16978))

(declare-fun m!16980 () Bool)

(assert (=> bm!1976 m!16980))

(assert (=> d!3977 m!16908))

(assert (=> b!23464 m!16934))

(assert (=> b!23464 m!16934))

(assert (=> b!23464 m!16940))

(assert (=> bm!1923 d!3977))

(declare-fun b!23517 () Bool)

(declare-fun e!15263 () Unit!522)

(declare-fun lt!8539 () Unit!522)

(assert (=> b!23517 (= e!15263 lt!8539)))

(assert (=> b!23517 (= lt!8539 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8519 () SeekEntryResult!54)

(declare-fun call!1988 () SeekEntryResult!54)

(assert (=> b!23517 (= lt!8519 call!1988)))

(declare-fun c!3054 () Bool)

(assert (=> b!23517 (= c!3054 ((_ is MissingZero!54) lt!8519))))

(declare-fun e!15259 () Bool)

(assert (=> b!23517 e!15259))

(declare-fun b!23518 () Bool)

(declare-fun res!14443 () Bool)

(assert (=> b!23518 (= res!14443 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2340 lt!8519)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15258 () Bool)

(assert (=> b!23518 (=> (not res!14443) (not e!15258))))

(declare-fun b!23519 () Bool)

(declare-fun e!15260 () Bool)

(assert (=> b!23519 (= e!15260 e!15258)))

(declare-fun res!14440 () Bool)

(declare-fun call!1989 () Bool)

(assert (=> b!23519 (= res!14440 call!1989)))

(assert (=> b!23519 (=> (not res!14440) (not e!15258))))

(declare-fun lt!8532 () SeekEntryResult!54)

(declare-fun bm!1985 () Bool)

(declare-fun c!3052 () Bool)

(declare-fun call!1990 () Bool)

(assert (=> bm!1985 (= call!1990 (inRange!0 (ite c!3052 (index!2338 lt!8532) (ite c!3054 (index!2337 lt!8519) (index!2340 lt!8519))) (mask!4729 lt!8141)))))

(declare-fun d!3979 () Bool)

(declare-fun e!15257 () Bool)

(assert (=> d!3979 e!15257))

(declare-fun res!14444 () Bool)

(assert (=> d!3979 (=> (not res!14444) (not e!15257))))

(declare-fun lt!8533 () tuple2!962)

(assert (=> d!3979 (= res!14444 (_1!490 lt!8533))))

(assert (=> d!3979 (= lt!8533 (tuple2!963 true (LongMapFixedSize!209 (defaultEntry!1742 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd (_size!149 lt!8141) #b00000000000000000000000000000001) (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (_vacant!149 lt!8141))))))

(declare-fun lt!8531 () Unit!522)

(declare-fun lt!8520 () Unit!522)

(assert (=> d!3979 (= lt!8531 lt!8520)))

(declare-fun lt!8536 () array!1263)

(declare-fun lt!8521 () array!1261)

(assert (=> d!3979 (contains!229 (getCurrentListMap!127 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))))))

(assert (=> d!3979 (= lt!8520 (lemmaValidKeyInArrayIsInListMap!10 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (defaultEntry!1742 lt!8141)))))

(assert (=> d!3979 (= lt!8521 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))))

(assert (=> d!3979 (= lt!8536 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))

(declare-fun lt!8538 () Unit!522)

(declare-fun lt!8527 () Unit!522)

(assert (=> d!3979 (= lt!8538 lt!8527)))

(declare-fun lt!8545 () array!1263)

(assert (=> d!3979 (= (arrayCountValidKeys!0 lt!8545 (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (bvadd (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!1263 (_ BitVec 32)) Unit!522)

(assert (=> d!3979 (= lt!8527 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!8545 (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))))))

(assert (=> d!3979 (= lt!8545 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))

(declare-fun lt!8537 () Unit!522)

(declare-fun lt!8530 () Unit!522)

(assert (=> d!3979 (= lt!8537 lt!8530)))

(declare-fun lt!8526 () array!1263)

(assert (=> d!3979 (arrayContainsKey!0 lt!8526 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!1263 (_ BitVec 64) (_ BitVec 32)) Unit!522)

(assert (=> d!3979 (= lt!8530 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8526 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))))))

(assert (=> d!3979 (= lt!8526 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))

(declare-fun lt!8540 () Unit!522)

(declare-fun lt!8525 () Unit!522)

(assert (=> d!3979 (= lt!8540 lt!8525)))

(assert (=> d!3979 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (getCurrentListMap!127 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!3 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) (_ BitVec 64) V!1187 Int) Unit!522)

(assert (=> d!3979 (= lt!8525 (lemmaAddValidKeyToArrayThenAddPairToListMap!3 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8518 () Unit!522)

(declare-fun lt!8529 () Unit!522)

(assert (=> d!3979 (= lt!8518 lt!8529)))

(assert (=> d!3979 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!522)

(assert (=> d!3979 (= lt!8529 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (mask!4729 lt!8141)))))

(declare-fun lt!8546 () Unit!522)

(declare-fun lt!8524 () Unit!522)

(assert (=> d!3979 (= lt!8546 lt!8524)))

(assert (=> d!3979 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (bvadd (arrayCountValidKeys!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!1263 (_ BitVec 32) (_ BitVec 64)) Unit!522)

(assert (=> d!3979 (= lt!8524 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3163 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun lt!8534 () Unit!522)

(declare-fun lt!8543 () Unit!522)

(assert (=> d!3979 (= lt!8534 lt!8543)))

(declare-fun lt!8541 () List!565)

(declare-fun lt!8522 () (_ BitVec 32))

(assert (=> d!3979 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!8522 lt!8541)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!1263 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!565) Unit!522)

(assert (=> d!3979 (= lt!8543 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) lt!8522 lt!8541))))

(assert (=> d!3979 (= lt!8541 Nil!562)))

(assert (=> d!3979 (= lt!8522 #b00000000000000000000000000000000)))

(declare-fun lt!8523 () Unit!522)

(declare-fun e!15256 () Unit!522)

(assert (=> d!3979 (= lt!8523 e!15256)))

(declare-fun c!3053 () Bool)

(assert (=> d!3979 (= c!3053 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun lt!8547 () Unit!522)

(assert (=> d!3979 (= lt!8547 e!15263)))

(assert (=> d!3979 (= c!3052 (contains!229 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!3979 (valid!121 lt!8141)))

(assert (=> d!3979 (= (updateHelperNewKey!10 lt!8141 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))) lt!8533)))

(declare-fun e!15262 () Bool)

(declare-fun b!23520 () Bool)

(assert (=> b!23520 (= e!15262 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8532)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23521 () Bool)

(declare-fun Unit!535 () Unit!522)

(assert (=> b!23521 (= e!15256 Unit!535)))

(declare-fun b!23522 () Bool)

(declare-fun res!14441 () Bool)

(assert (=> b!23522 (=> (not res!14441) (not e!15257))))

(assert (=> b!23522 (= res!14441 (contains!229 (map!408 (_2!490 lt!8533)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23523 () Bool)

(assert (=> b!23523 (= e!15260 ((_ is Undefined!54) lt!8519))))

(declare-fun b!23524 () Bool)

(declare-fun res!14445 () Bool)

(declare-fun e!15261 () Bool)

(assert (=> b!23524 (=> (not res!14445) (not e!15261))))

(assert (=> b!23524 (= res!14445 call!1989)))

(assert (=> b!23524 (= e!15259 e!15261)))

(declare-fun b!23525 () Bool)

(declare-fun c!3051 () Bool)

(assert (=> b!23525 (= c!3051 ((_ is MissingVacant!54) lt!8519))))

(assert (=> b!23525 (= e!15259 e!15260)))

(declare-fun b!23526 () Bool)

(declare-fun Unit!536 () Unit!522)

(assert (=> b!23526 (= e!15256 Unit!536)))

(declare-fun lt!8542 () Unit!522)

(declare-fun lemmaArrayContainsKeyThenInListMap!3 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) (_ BitVec 32) Int) Unit!522)

(assert (=> b!23526 (= lt!8542 (lemmaArrayContainsKeyThenInListMap!3 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> b!23526 (contains!229 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!8528 () Unit!522)

(assert (=> b!23526 (= lt!8528 lt!8542)))

(assert (=> b!23526 false))

(declare-fun b!23527 () Bool)

(declare-fun Unit!537 () Unit!522)

(assert (=> b!23527 (= e!15263 Unit!537)))

(declare-fun lt!8535 () Unit!522)

(assert (=> b!23527 (= lt!8535 (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(assert (=> b!23527 (= lt!8532 call!1988)))

(declare-fun res!14448 () Bool)

(assert (=> b!23527 (= res!14448 ((_ is Found!54) lt!8532))))

(assert (=> b!23527 (=> (not res!14448) (not e!15262))))

(assert (=> b!23527 e!15262))

(declare-fun lt!8544 () Unit!522)

(assert (=> b!23527 (= lt!8544 lt!8535)))

(assert (=> b!23527 false))

(declare-fun bm!1986 () Bool)

(declare-fun call!1991 () Bool)

(assert (=> bm!1986 (= call!1991 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun b!23528 () Bool)

(assert (=> b!23528 (= e!15258 (not call!1991))))

(declare-fun bm!1987 () Bool)

(assert (=> bm!1987 (= call!1989 call!1990)))

(declare-fun bm!1988 () Bool)

(assert (=> bm!1988 (= call!1988 (seekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!23529 () Bool)

(declare-fun res!14446 () Bool)

(assert (=> b!23529 (= res!14446 call!1990)))

(assert (=> b!23529 (=> (not res!14446) (not e!15262))))

(declare-fun b!23530 () Bool)

(declare-fun res!14447 () Bool)

(assert (=> b!23530 (=> (not res!14447) (not e!15261))))

(assert (=> b!23530 (= res!14447 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2337 lt!8519)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23531 () Bool)

(assert (=> b!23531 (= e!15257 (= (map!408 (_2!490 lt!8533)) (+!44 (map!408 lt!8141) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!23532 () Bool)

(declare-fun res!14442 () Bool)

(assert (=> b!23532 (=> (not res!14442) (not e!15257))))

(assert (=> b!23532 (= res!14442 (valid!121 (_2!490 lt!8533)))))

(declare-fun b!23533 () Bool)

(assert (=> b!23533 (= e!15261 (not call!1991))))

(assert (= (and d!3979 c!3052) b!23527))

(assert (= (and d!3979 (not c!3052)) b!23517))

(assert (= (and b!23527 res!14448) b!23529))

(assert (= (and b!23529 res!14446) b!23520))

(assert (= (and b!23517 c!3054) b!23524))

(assert (= (and b!23517 (not c!3054)) b!23525))

(assert (= (and b!23524 res!14445) b!23530))

(assert (= (and b!23530 res!14447) b!23533))

(assert (= (and b!23525 c!3051) b!23519))

(assert (= (and b!23525 (not c!3051)) b!23523))

(assert (= (and b!23519 res!14440) b!23518))

(assert (= (and b!23518 res!14443) b!23528))

(assert (= (or b!23524 b!23519) bm!1987))

(assert (= (or b!23533 b!23528) bm!1986))

(assert (= (or b!23529 bm!1987) bm!1985))

(assert (= (or b!23527 b!23517) bm!1988))

(assert (= (and d!3979 c!3053) b!23526))

(assert (= (and d!3979 (not c!3053)) b!23521))

(assert (= (and d!3979 res!14444) b!23532))

(assert (= (and b!23532 res!14442) b!23522))

(assert (= (and b!23522 res!14441) b!23531))

(assert (=> b!23527 m!16820))

(assert (=> bm!1988 m!16774))

(declare-fun m!16982 () Bool)

(assert (=> b!23531 m!16982))

(assert (=> b!23531 m!16772))

(assert (=> b!23531 m!16772))

(declare-fun m!16984 () Bool)

(assert (=> b!23531 m!16984))

(assert (=> b!23517 m!16776))

(assert (=> b!23522 m!16982))

(assert (=> b!23522 m!16982))

(declare-fun m!16986 () Bool)

(assert (=> b!23522 m!16986))

(declare-fun m!16988 () Bool)

(assert (=> b!23520 m!16988))

(declare-fun m!16990 () Bool)

(assert (=> b!23518 m!16990))

(declare-fun m!16992 () Bool)

(assert (=> b!23526 m!16992))

(assert (=> b!23526 m!16784))

(assert (=> b!23526 m!16784))

(declare-fun m!16994 () Bool)

(assert (=> b!23526 m!16994))

(declare-fun m!16996 () Bool)

(assert (=> d!3979 m!16996))

(assert (=> d!3979 m!16782))

(declare-fun m!16998 () Bool)

(assert (=> d!3979 m!16998))

(declare-fun m!17000 () Bool)

(assert (=> d!3979 m!17000))

(declare-fun m!17002 () Bool)

(assert (=> d!3979 m!17002))

(assert (=> d!3979 m!16784))

(declare-fun m!17004 () Bool)

(assert (=> d!3979 m!17004))

(declare-fun m!17006 () Bool)

(assert (=> d!3979 m!17006))

(declare-fun m!17008 () Bool)

(assert (=> d!3979 m!17008))

(declare-fun m!17010 () Bool)

(assert (=> d!3979 m!17010))

(declare-fun m!17012 () Bool)

(assert (=> d!3979 m!17012))

(declare-fun m!17014 () Bool)

(assert (=> d!3979 m!17014))

(declare-fun m!17016 () Bool)

(assert (=> d!3979 m!17016))

(assert (=> d!3979 m!16824))

(declare-fun m!17018 () Bool)

(assert (=> d!3979 m!17018))

(declare-fun m!17020 () Bool)

(assert (=> d!3979 m!17020))

(declare-fun m!17022 () Bool)

(assert (=> d!3979 m!17022))

(declare-fun m!17024 () Bool)

(assert (=> d!3979 m!17024))

(declare-fun m!17026 () Bool)

(assert (=> d!3979 m!17026))

(assert (=> d!3979 m!16784))

(assert (=> d!3979 m!16784))

(assert (=> d!3979 m!16994))

(declare-fun m!17028 () Bool)

(assert (=> d!3979 m!17028))

(declare-fun m!17030 () Bool)

(assert (=> d!3979 m!17030))

(declare-fun m!17032 () Bool)

(assert (=> d!3979 m!17032))

(assert (=> d!3979 m!16996))

(assert (=> d!3979 m!17024))

(declare-fun m!17034 () Bool)

(assert (=> d!3979 m!17034))

(declare-fun m!17036 () Bool)

(assert (=> b!23530 m!17036))

(declare-fun m!17038 () Bool)

(assert (=> bm!1985 m!17038))

(declare-fun m!17040 () Bool)

(assert (=> b!23532 m!17040))

(assert (=> bm!1986 m!16782))

(assert (=> bm!1916 d!3979))

(declare-fun d!3981 () Bool)

(assert (=> d!3981 (= (inRange!0 (ite c!3007 (ite c!3006 (index!2338 lt!8346) (ite c!3012 (index!2337 lt!8348) (index!2340 lt!8348))) (ite c!3005 (index!2338 lt!8358) (ite c!3003 (index!2337 lt!8353) (index!2340 lt!8353)))) (mask!4729 (_2!490 lt!8142))) (and (bvsge (ite c!3007 (ite c!3006 (index!2338 lt!8346) (ite c!3012 (index!2337 lt!8348) (index!2340 lt!8348))) (ite c!3005 (index!2338 lt!8358) (ite c!3003 (index!2337 lt!8353) (index!2340 lt!8353)))) #b00000000000000000000000000000000) (bvslt (ite c!3007 (ite c!3006 (index!2338 lt!8346) (ite c!3012 (index!2337 lt!8348) (index!2340 lt!8348))) (ite c!3005 (index!2338 lt!8358) (ite c!3003 (index!2337 lt!8353) (index!2340 lt!8353)))) (bvadd (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000000001))))))

(assert (=> bm!1943 d!3981))

(declare-fun b!23534 () Bool)

(declare-fun e!15266 () SeekEntryResult!54)

(assert (=> b!23534 (= e!15266 Undefined!54)))

(declare-fun d!3983 () Bool)

(declare-fun lt!8550 () SeekEntryResult!54)

(assert (=> d!3983 (and (or ((_ is Undefined!54) lt!8550) (not ((_ is Found!54) lt!8550)) (and (bvsge (index!2338 lt!8550) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8550) (size!693 (_keys!3163 (_2!490 lt!8142)))))) (or ((_ is Undefined!54) lt!8550) ((_ is Found!54) lt!8550) (not ((_ is MissingZero!54) lt!8550)) (and (bvsge (index!2337 lt!8550) #b00000000000000000000000000000000) (bvslt (index!2337 lt!8550) (size!693 (_keys!3163 (_2!490 lt!8142)))))) (or ((_ is Undefined!54) lt!8550) ((_ is Found!54) lt!8550) ((_ is MissingZero!54) lt!8550) (not ((_ is MissingVacant!54) lt!8550)) (and (bvsge (index!2340 lt!8550) #b00000000000000000000000000000000) (bvslt (index!2340 lt!8550) (size!693 (_keys!3163 (_2!490 lt!8142)))))) (or ((_ is Undefined!54) lt!8550) (ite ((_ is Found!54) lt!8550) (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8550)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite ((_ is MissingZero!54) lt!8550) (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2337 lt!8550)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!54) lt!8550) (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2340 lt!8550)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!3983 (= lt!8550 e!15266)))

(declare-fun c!3055 () Bool)

(declare-fun lt!8548 () SeekEntryResult!54)

(assert (=> d!3983 (= c!3055 (and ((_ is Intermediate!54) lt!8548) (undefined!866 lt!8548)))))

(assert (=> d!3983 (= lt!8548 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!490 lt!8142))) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(assert (=> d!3983 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!3983 (= (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))) lt!8550)))

(declare-fun b!23535 () Bool)

(declare-fun c!3056 () Bool)

(declare-fun lt!8549 () (_ BitVec 64))

(assert (=> b!23535 (= c!3056 (= lt!8549 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15265 () SeekEntryResult!54)

(declare-fun e!15264 () SeekEntryResult!54)

(assert (=> b!23535 (= e!15265 e!15264)))

(declare-fun b!23536 () Bool)

(assert (=> b!23536 (= e!15266 e!15265)))

(assert (=> b!23536 (= lt!8549 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2339 lt!8548)))))

(declare-fun c!3057 () Bool)

(assert (=> b!23536 (= c!3057 (= lt!8549 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23537 () Bool)

(assert (=> b!23537 (= e!15264 (MissingZero!54 (index!2339 lt!8548)))))

(declare-fun b!23538 () Bool)

(assert (=> b!23538 (= e!15264 (seekKeyOrZeroReturnVacant!0 (x!5576 lt!8548) (index!2339 lt!8548) (index!2339 lt!8548) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!23539 () Bool)

(assert (=> b!23539 (= e!15265 (Found!54 (index!2339 lt!8548)))))

(assert (= (and d!3983 c!3055) b!23534))

(assert (= (and d!3983 (not c!3055)) b!23536))

(assert (= (and b!23536 c!3057) b!23539))

(assert (= (and b!23536 (not c!3057)) b!23535))

(assert (= (and b!23535 c!3056) b!23537))

(assert (= (and b!23535 (not c!3056)) b!23538))

(assert (=> d!3983 m!16902))

(declare-fun m!17042 () Bool)

(assert (=> d!3983 m!17042))

(declare-fun m!17044 () Bool)

(assert (=> d!3983 m!17044))

(declare-fun m!17046 () Bool)

(assert (=> d!3983 m!17046))

(declare-fun m!17048 () Bool)

(assert (=> d!3983 m!17048))

(declare-fun m!17050 () Bool)

(assert (=> d!3983 m!17050))

(assert (=> d!3983 m!17042))

(declare-fun m!17052 () Bool)

(assert (=> b!23536 m!17052))

(declare-fun m!17054 () Bool)

(assert (=> b!23538 m!17054))

(assert (=> bm!1944 d!3983))

(declare-fun d!3985 () Bool)

(assert (=> d!3985 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8553 () Unit!522)

(declare-fun choose!205 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 V!1187 Int) Unit!522)

(assert (=> d!3985 (= lt!8553 (choose!205 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(assert (=> d!3985 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!3985 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) lt!8553)))

(declare-fun bs!948 () Bool)

(assert (= bs!948 d!3985))

(declare-fun m!17056 () Bool)

(assert (=> bs!948 m!17056))

(assert (=> bs!948 m!16784))

(assert (=> bs!948 m!16784))

(declare-fun m!17058 () Bool)

(assert (=> bs!948 m!17058))

(declare-fun m!17060 () Bool)

(assert (=> bs!948 m!17060))

(assert (=> bs!948 m!16908))

(assert (=> b!23333 d!3985))

(declare-fun d!3987 () Bool)

(declare-fun res!14455 () Bool)

(declare-fun e!15269 () Bool)

(assert (=> d!3987 (=> (not res!14455) (not e!15269))))

(declare-fun simpleValid!20 (LongMapFixedSize!208) Bool)

(assert (=> d!3987 (= res!14455 (simpleValid!20 (v!1602 (underlying!115 thiss!938))))))

(assert (=> d!3987 (= (valid!121 (v!1602 (underlying!115 thiss!938))) e!15269)))

(declare-fun b!23546 () Bool)

(declare-fun res!14456 () Bool)

(assert (=> b!23546 (=> (not res!14456) (not e!15269))))

(assert (=> b!23546 (= res!14456 (= (arrayCountValidKeys!0 (_keys!3163 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938))))) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun b!23547 () Bool)

(declare-fun res!14457 () Bool)

(assert (=> b!23547 (=> (not res!14457) (not e!15269))))

(assert (=> b!23547 (= res!14457 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (v!1602 (underlying!115 thiss!938))) (mask!4729 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun b!23548 () Bool)

(assert (=> b!23548 (= e!15269 (arrayNoDuplicates!0 (_keys!3163 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 Nil!562))))

(assert (= (and d!3987 res!14455) b!23546))

(assert (= (and b!23546 res!14456) b!23547))

(assert (= (and b!23547 res!14457) b!23548))

(declare-fun m!17062 () Bool)

(assert (=> d!3987 m!17062))

(declare-fun m!17064 () Bool)

(assert (=> b!23546 m!17064))

(declare-fun m!17066 () Bool)

(assert (=> b!23547 m!17066))

(declare-fun m!17068 () Bool)

(assert (=> b!23548 m!17068))

(assert (=> d!3955 d!3987))

(declare-fun b!23549 () Bool)

(declare-fun e!15278 () ListLongMap!563)

(declare-fun call!1994 () ListLongMap!563)

(assert (=> b!23549 (= e!15278 call!1994)))

(declare-fun e!15281 () Bool)

(declare-fun b!23550 () Bool)

(declare-fun lt!8565 () ListLongMap!563)

(assert (=> b!23550 (= e!15281 (= (apply!29 lt!8565 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))

(declare-fun b!23551 () Bool)

(declare-fun e!15270 () Bool)

(assert (=> b!23551 (= e!15270 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun call!1997 () ListLongMap!563)

(declare-fun bm!1989 () Bool)

(assert (=> bm!1989 (= call!1997 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!23552 () Bool)

(declare-fun e!15275 () ListLongMap!563)

(assert (=> b!23552 (= e!15275 e!15278)))

(declare-fun c!3062 () Bool)

(assert (=> b!23552 (= c!3062 (and (not (= (bvand (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23553 () Bool)

(declare-fun e!15280 () Bool)

(declare-fun call!1993 () Bool)

(assert (=> b!23553 (= e!15280 (not call!1993))))

(declare-fun b!23554 () Bool)

(declare-fun e!15277 () Bool)

(assert (=> b!23554 (= e!15277 e!15281)))

(declare-fun res!14463 () Bool)

(declare-fun call!1995 () Bool)

(assert (=> b!23554 (= res!14463 call!1995)))

(assert (=> b!23554 (=> (not res!14463) (not e!15281))))

(declare-fun bm!1990 () Bool)

(declare-fun call!1996 () ListLongMap!563)

(assert (=> bm!1990 (= call!1994 call!1996)))

(declare-fun b!23556 () Bool)

(assert (=> b!23556 (= e!15277 (not call!1995))))

(declare-fun bm!1991 () Bool)

(declare-fun call!1992 () ListLongMap!563)

(assert (=> bm!1991 (= call!1992 call!1997)))

(declare-fun b!23557 () Bool)

(declare-fun e!15276 () Bool)

(assert (=> b!23557 (= e!15276 e!15277)))

(declare-fun c!3063 () Bool)

(assert (=> b!23557 (= c!3063 (not (= (bvand (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23558 () Bool)

(declare-fun e!15271 () Unit!522)

(declare-fun lt!8554 () Unit!522)

(assert (=> b!23558 (= e!15271 lt!8554)))

(declare-fun lt!8570 () ListLongMap!563)

(assert (=> b!23558 (= lt!8570 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8573 () (_ BitVec 64))

(assert (=> b!23558 (= lt!8573 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8568 () (_ BitVec 64))

(assert (=> b!23558 (= lt!8568 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8558 () Unit!522)

(assert (=> b!23558 (= lt!8558 (addStillContains!14 lt!8570 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) lt!8568))))

(assert (=> b!23558 (contains!229 (+!44 lt!8570 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) lt!8568)))

(declare-fun lt!8559 () Unit!522)

(assert (=> b!23558 (= lt!8559 lt!8558)))

(declare-fun lt!8571 () ListLongMap!563)

(assert (=> b!23558 (= lt!8571 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8557 () (_ BitVec 64))

(assert (=> b!23558 (= lt!8557 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8555 () (_ BitVec 64))

(assert (=> b!23558 (= lt!8555 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8564 () Unit!522)

(assert (=> b!23558 (= lt!8564 (addApplyDifferent!14 lt!8571 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) lt!8555))))

(assert (=> b!23558 (= (apply!29 (+!44 lt!8571 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) lt!8555) (apply!29 lt!8571 lt!8555))))

(declare-fun lt!8562 () Unit!522)

(assert (=> b!23558 (= lt!8562 lt!8564)))

(declare-fun lt!8560 () ListLongMap!563)

(assert (=> b!23558 (= lt!8560 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8575 () (_ BitVec 64))

(assert (=> b!23558 (= lt!8575 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8567 () (_ BitVec 64))

(assert (=> b!23558 (= lt!8567 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8556 () Unit!522)

(assert (=> b!23558 (= lt!8556 (addApplyDifferent!14 lt!8560 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) lt!8567))))

(assert (=> b!23558 (= (apply!29 (+!44 lt!8560 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) lt!8567) (apply!29 lt!8560 lt!8567))))

(declare-fun lt!8569 () Unit!522)

(assert (=> b!23558 (= lt!8569 lt!8556)))

(declare-fun lt!8574 () ListLongMap!563)

(assert (=> b!23558 (= lt!8574 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8572 () (_ BitVec 64))

(assert (=> b!23558 (= lt!8572 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8566 () (_ BitVec 64))

(assert (=> b!23558 (= lt!8566 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(assert (=> b!23558 (= lt!8554 (addApplyDifferent!14 lt!8574 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) lt!8566))))

(assert (=> b!23558 (= (apply!29 (+!44 lt!8574 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) lt!8566) (apply!29 lt!8574 lt!8566))))

(declare-fun call!1998 () ListLongMap!563)

(declare-fun c!3061 () Bool)

(declare-fun bm!1992 () Bool)

(assert (=> bm!1992 (= call!1996 (+!44 (ite c!3061 call!1997 (ite c!3062 call!1992 call!1998)) (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!23559 () Bool)

(declare-fun Unit!538 () Unit!522)

(assert (=> b!23559 (= e!15271 Unit!538)))

(declare-fun b!23560 () Bool)

(declare-fun e!15273 () Bool)

(assert (=> b!23560 (= e!15280 e!15273)))

(declare-fun res!14461 () Bool)

(assert (=> b!23560 (= res!14461 call!1993)))

(assert (=> b!23560 (=> (not res!14461) (not e!15273))))

(declare-fun bm!1993 () Bool)

(assert (=> bm!1993 (= call!1998 call!1992)))

(declare-fun b!23561 () Bool)

(declare-fun res!14462 () Bool)

(assert (=> b!23561 (=> (not res!14462) (not e!15276))))

(declare-fun e!15274 () Bool)

(assert (=> b!23561 (= res!14462 e!15274)))

(declare-fun res!14458 () Bool)

(assert (=> b!23561 (=> res!14458 e!15274)))

(declare-fun e!15279 () Bool)

(assert (=> b!23561 (= res!14458 (not e!15279))))

(declare-fun res!14465 () Bool)

(assert (=> b!23561 (=> (not res!14465) (not e!15279))))

(assert (=> b!23561 (= res!14465 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23562 () Bool)

(declare-fun e!15272 () Bool)

(assert (=> b!23562 (= e!15274 e!15272)))

(declare-fun res!14459 () Bool)

(assert (=> b!23562 (=> (not res!14459) (not e!15272))))

(assert (=> b!23562 (= res!14459 (contains!229 lt!8565 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!23562 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23563 () Bool)

(assert (=> b!23563 (= e!15279 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!23564 () Bool)

(declare-fun e!15282 () ListLongMap!563)

(assert (=> b!23564 (= e!15282 call!1994)))

(declare-fun b!23565 () Bool)

(assert (=> b!23565 (= e!15275 (+!44 call!1996 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun d!3989 () Bool)

(assert (=> d!3989 e!15276))

(declare-fun res!14464 () Bool)

(assert (=> d!3989 (=> (not res!14464) (not e!15276))))

(assert (=> d!3989 (= res!14464 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(declare-fun lt!8563 () ListLongMap!563)

(assert (=> d!3989 (= lt!8565 lt!8563)))

(declare-fun lt!8561 () Unit!522)

(assert (=> d!3989 (= lt!8561 e!15271)))

(declare-fun c!3059 () Bool)

(assert (=> d!3989 (= c!3059 e!15270)))

(declare-fun res!14466 () Bool)

(assert (=> d!3989 (=> (not res!14466) (not e!15270))))

(assert (=> d!3989 (= res!14466 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!3989 (= lt!8563 e!15275)))

(assert (=> d!3989 (= c!3061 (and (not (= (bvand (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!3989 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!3989 (= (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!8565)))

(declare-fun b!23555 () Bool)

(assert (=> b!23555 (= e!15272 (= (apply!29 lt!8565 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23555 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))))))))

(assert (=> b!23555 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun bm!1994 () Bool)

(assert (=> bm!1994 (= call!1995 (contains!229 lt!8565 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23566 () Bool)

(declare-fun res!14460 () Bool)

(assert (=> b!23566 (=> (not res!14460) (not e!15276))))

(assert (=> b!23566 (= res!14460 e!15280)))

(declare-fun c!3058 () Bool)

(assert (=> b!23566 (= c!3058 (not (= (bvand (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!23567 () Bool)

(assert (=> b!23567 (= e!15273 (= (apply!29 lt!8565 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))))

(declare-fun b!23568 () Bool)

(assert (=> b!23568 (= e!15282 call!1998)))

(declare-fun b!23569 () Bool)

(declare-fun c!3060 () Bool)

(assert (=> b!23569 (= c!3060 (and (not (= (bvand (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23569 (= e!15278 e!15282)))

(declare-fun bm!1995 () Bool)

(assert (=> bm!1995 (= call!1993 (contains!229 lt!8565 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!3989 c!3061) b!23565))

(assert (= (and d!3989 (not c!3061)) b!23552))

(assert (= (and b!23552 c!3062) b!23549))

(assert (= (and b!23552 (not c!3062)) b!23569))

(assert (= (and b!23569 c!3060) b!23564))

(assert (= (and b!23569 (not c!3060)) b!23568))

(assert (= (or b!23564 b!23568) bm!1993))

(assert (= (or b!23549 bm!1993) bm!1991))

(assert (= (or b!23549 b!23564) bm!1990))

(assert (= (or b!23565 bm!1991) bm!1989))

(assert (= (or b!23565 bm!1990) bm!1992))

(assert (= (and d!3989 res!14466) b!23551))

(assert (= (and d!3989 c!3059) b!23558))

(assert (= (and d!3989 (not c!3059)) b!23559))

(assert (= (and d!3989 res!14464) b!23561))

(assert (= (and b!23561 res!14465) b!23563))

(assert (= (and b!23561 (not res!14458)) b!23562))

(assert (= (and b!23562 res!14459) b!23555))

(assert (= (and b!23561 res!14462) b!23566))

(assert (= (and b!23566 c!3058) b!23560))

(assert (= (and b!23566 (not c!3058)) b!23553))

(assert (= (and b!23560 res!14461) b!23567))

(assert (= (or b!23560 b!23553) bm!1995))

(assert (= (and b!23566 res!14460) b!23557))

(assert (= (and b!23557 c!3063) b!23554))

(assert (= (and b!23557 (not c!3063)) b!23556))

(assert (= (and b!23554 res!14463) b!23550))

(assert (= (or b!23554 b!23556) bm!1994))

(declare-fun b_lambda!1573 () Bool)

(assert (=> (not b_lambda!1573) (not b!23555)))

(declare-fun t!3234 () Bool)

(declare-fun tb!655 () Bool)

(assert (=> (and b!23087 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))) t!3234) tb!655))

(declare-fun result!1095 () Bool)

(assert (=> tb!655 (= result!1095 tp_is_empty!1021)))

(assert (=> b!23555 t!3234))

(declare-fun b_and!1485 () Bool)

(assert (= b_and!1483 (and (=> t!3234 result!1095) b_and!1485)))

(declare-fun m!17070 () Bool)

(assert (=> b!23567 m!17070))

(declare-fun m!17072 () Bool)

(assert (=> bm!1992 m!17072))

(declare-fun m!17074 () Bool)

(assert (=> b!23555 m!17074))

(assert (=> b!23555 m!17074))

(declare-fun m!17076 () Bool)

(assert (=> b!23555 m!17076))

(declare-fun m!17078 () Bool)

(assert (=> b!23555 m!17078))

(declare-fun m!17080 () Bool)

(assert (=> b!23555 m!17080))

(assert (=> b!23555 m!17076))

(assert (=> b!23555 m!17080))

(declare-fun m!17082 () Bool)

(assert (=> b!23555 m!17082))

(declare-fun m!17084 () Bool)

(assert (=> bm!1994 m!17084))

(assert (=> b!23563 m!17080))

(assert (=> b!23563 m!17080))

(declare-fun m!17086 () Bool)

(assert (=> b!23563 m!17086))

(declare-fun m!17088 () Bool)

(assert (=> bm!1989 m!17088))

(declare-fun m!17090 () Bool)

(assert (=> b!23558 m!17090))

(declare-fun m!17092 () Bool)

(assert (=> b!23558 m!17092))

(declare-fun m!17094 () Bool)

(assert (=> b!23558 m!17094))

(declare-fun m!17096 () Bool)

(assert (=> b!23558 m!17096))

(declare-fun m!17098 () Bool)

(assert (=> b!23558 m!17098))

(declare-fun m!17100 () Bool)

(assert (=> b!23558 m!17100))

(assert (=> b!23558 m!17090))

(declare-fun m!17102 () Bool)

(assert (=> b!23558 m!17102))

(declare-fun m!17104 () Bool)

(assert (=> b!23558 m!17104))

(declare-fun m!17106 () Bool)

(assert (=> b!23558 m!17106))

(declare-fun m!17108 () Bool)

(assert (=> b!23558 m!17108))

(declare-fun m!17110 () Bool)

(assert (=> b!23558 m!17110))

(assert (=> b!23558 m!17088))

(assert (=> b!23558 m!17080))

(declare-fun m!17112 () Bool)

(assert (=> b!23558 m!17112))

(assert (=> b!23558 m!17104))

(declare-fun m!17114 () Bool)

(assert (=> b!23558 m!17114))

(declare-fun m!17116 () Bool)

(assert (=> b!23558 m!17116))

(assert (=> b!23558 m!17094))

(assert (=> b!23558 m!17100))

(declare-fun m!17118 () Bool)

(assert (=> b!23558 m!17118))

(assert (=> b!23562 m!17080))

(assert (=> b!23562 m!17080))

(declare-fun m!17120 () Bool)

(assert (=> b!23562 m!17120))

(declare-fun m!17122 () Bool)

(assert (=> b!23550 m!17122))

(declare-fun m!17124 () Bool)

(assert (=> b!23565 m!17124))

(declare-fun m!17126 () Bool)

(assert (=> bm!1995 m!17126))

(assert (=> d!3989 m!16902))

(assert (=> b!23551 m!17080))

(assert (=> b!23551 m!17080))

(assert (=> b!23551 m!17086))

(assert (=> bm!1954 d!3989))

(declare-fun d!3991 () Bool)

(assert (=> d!3991 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8313 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8578 () Unit!522)

(declare-fun choose!206 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 V!1187 Int) Unit!522)

(assert (=> d!3991 (= lt!8578 (choose!206 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8313 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (defaultEntry!1742 lt!8141)))))

(assert (=> d!3991 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!3991 (= (lemmaChangeZeroKeyThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8313 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (defaultEntry!1742 lt!8141)) lt!8578)))

(declare-fun bs!949 () Bool)

(assert (= bs!949 d!3991))

(assert (=> bs!949 m!16784))

(declare-fun m!17128 () Bool)

(assert (=> bs!949 m!17128))

(assert (=> bs!949 m!16784))

(declare-fun m!17130 () Bool)

(assert (=> bs!949 m!17130))

(declare-fun m!17132 () Bool)

(assert (=> bs!949 m!17132))

(assert (=> bs!949 m!16908))

(assert (=> b!23336 d!3991))

(declare-fun d!3993 () Bool)

(assert (=> d!3993 (= (map!408 (_2!490 lt!8361)) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8361)) (_values!1728 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361)) (extraKeys!1640 (_2!490 lt!8361)) (zeroValue!1665 (_2!490 lt!8361)) (minValue!1665 (_2!490 lt!8361)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8361))))))

(declare-fun bs!950 () Bool)

(assert (= bs!950 d!3993))

(declare-fun m!17134 () Bool)

(assert (=> bs!950 m!17134))

(assert (=> bm!1933 d!3993))

(declare-fun b!23586 () Bool)

(declare-fun res!14476 () Bool)

(declare-fun e!15293 () Bool)

(assert (=> b!23586 (=> (not res!14476) (not e!15293))))

(declare-fun lt!8583 () SeekEntryResult!54)

(assert (=> b!23586 (= res!14476 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2340 lt!8583)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23586 (and (bvsge (index!2340 lt!8583) #b00000000000000000000000000000000) (bvslt (index!2340 lt!8583) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23587 () Bool)

(declare-fun e!15291 () Bool)

(declare-fun e!15292 () Bool)

(assert (=> b!23587 (= e!15291 e!15292)))

(declare-fun c!3068 () Bool)

(assert (=> b!23587 (= c!3068 ((_ is MissingVacant!54) lt!8583))))

(declare-fun b!23588 () Bool)

(assert (=> b!23588 (and (bvsge (index!2337 lt!8583) #b00000000000000000000000000000000) (bvslt (index!2337 lt!8583) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun res!14475 () Bool)

(assert (=> b!23588 (= res!14475 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2337 lt!8583)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15294 () Bool)

(assert (=> b!23588 (=> (not res!14475) (not e!15294))))

(declare-fun b!23589 () Bool)

(declare-fun res!14477 () Bool)

(assert (=> b!23589 (=> (not res!14477) (not e!15293))))

(declare-fun call!2004 () Bool)

(assert (=> b!23589 (= res!14477 call!2004)))

(assert (=> b!23589 (= e!15292 e!15293)))

(declare-fun d!3995 () Bool)

(assert (=> d!3995 e!15291))

(declare-fun c!3069 () Bool)

(assert (=> d!3995 (= c!3069 ((_ is MissingZero!54) lt!8583))))

(assert (=> d!3995 (= lt!8583 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun lt!8584 () Unit!522)

(declare-fun choose!207 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!522)

(assert (=> d!3995 (= lt!8584 (choose!207 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!3995 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!3995 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!8584)))

(declare-fun bm!2000 () Bool)

(declare-fun call!2003 () Bool)

(assert (=> bm!2000 (= call!2003 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun b!23590 () Bool)

(assert (=> b!23590 (= e!15291 e!15294)))

(declare-fun res!14478 () Bool)

(assert (=> b!23590 (= res!14478 call!2004)))

(assert (=> b!23590 (=> (not res!14478) (not e!15294))))

(declare-fun bm!2001 () Bool)

(assert (=> bm!2001 (= call!2004 (inRange!0 (ite c!3069 (index!2337 lt!8583) (index!2340 lt!8583)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!23591 () Bool)

(assert (=> b!23591 (= e!15293 (not call!2003))))

(declare-fun b!23592 () Bool)

(assert (=> b!23592 (= e!15292 ((_ is Undefined!54) lt!8583))))

(declare-fun b!23593 () Bool)

(assert (=> b!23593 (= e!15294 (not call!2003))))

(assert (= (and d!3995 c!3069) b!23590))

(assert (= (and d!3995 (not c!3069)) b!23587))

(assert (= (and b!23590 res!14478) b!23588))

(assert (= (and b!23588 res!14475) b!23593))

(assert (= (and b!23587 c!3068) b!23589))

(assert (= (and b!23587 (not c!3068)) b!23592))

(assert (= (and b!23589 res!14477) b!23586))

(assert (= (and b!23586 res!14476) b!23591))

(assert (= (or b!23590 b!23589) bm!2001))

(assert (= (or b!23593 b!23591) bm!2000))

(assert (=> d!3995 m!16834))

(declare-fun m!17136 () Bool)

(assert (=> d!3995 m!17136))

(assert (=> d!3995 m!16902))

(declare-fun m!17138 () Bool)

(assert (=> b!23586 m!17138))

(declare-fun m!17140 () Bool)

(assert (=> bm!2001 m!17140))

(assert (=> bm!2000 m!16842))

(declare-fun m!17142 () Bool)

(assert (=> b!23588 m!17142))

(assert (=> bm!1938 d!3995))

(declare-fun d!3997 () Bool)

(assert (=> d!3997 (= (map!408 lt!8141) (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun bs!951 () Bool)

(assert (= bs!951 d!3997))

(assert (=> bs!951 m!16784))

(assert (=> bm!1911 d!3997))

(declare-fun b!23602 () Bool)

(declare-fun e!15300 () (_ BitVec 32))

(assert (=> b!23602 (= e!15300 #b00000000000000000000000000000000)))

(declare-fun b!23603 () Bool)

(declare-fun e!15299 () (_ BitVec 32))

(assert (=> b!23603 (= e!15300 e!15299)))

(declare-fun c!3075 () Bool)

(assert (=> b!23603 (= c!3075 (validKeyInArray!0 (select (arr!597 lt!8242) lt!8249)))))

(declare-fun call!2007 () (_ BitVec 32))

(declare-fun bm!2004 () Bool)

(assert (=> bm!2004 (= call!2007 (arrayCountValidKeys!0 lt!8242 (bvadd lt!8249 #b00000000000000000000000000000001) lt!8228))))

(declare-fun d!3999 () Bool)

(declare-fun lt!8587 () (_ BitVec 32))

(assert (=> d!3999 (and (bvsge lt!8587 #b00000000000000000000000000000000) (bvsle lt!8587 (bvsub (size!693 lt!8242) lt!8249)))))

(assert (=> d!3999 (= lt!8587 e!15300)))

(declare-fun c!3074 () Bool)

(assert (=> d!3999 (= c!3074 (bvsge lt!8249 lt!8228))))

(assert (=> d!3999 (and (bvsle lt!8249 lt!8228) (bvsge lt!8249 #b00000000000000000000000000000000) (bvsle lt!8228 (size!693 lt!8242)))))

(assert (=> d!3999 (= (arrayCountValidKeys!0 lt!8242 lt!8249 lt!8228) lt!8587)))

(declare-fun b!23604 () Bool)

(assert (=> b!23604 (= e!15299 (bvadd #b00000000000000000000000000000001 call!2007))))

(declare-fun b!23605 () Bool)

(assert (=> b!23605 (= e!15299 call!2007)))

(assert (= (and d!3999 c!3074) b!23602))

(assert (= (and d!3999 (not c!3074)) b!23603))

(assert (= (and b!23603 c!3075) b!23604))

(assert (= (and b!23603 (not c!3075)) b!23605))

(assert (= (or b!23604 b!23605) bm!2004))

(declare-fun m!17144 () Bool)

(assert (=> b!23603 m!17144))

(assert (=> b!23603 m!17144))

(declare-fun m!17146 () Bool)

(assert (=> b!23603 m!17146))

(declare-fun m!17148 () Bool)

(assert (=> bm!2004 m!17148))

(assert (=> d!3957 d!3999))

(declare-fun d!4001 () Bool)

(assert (=> d!4001 (arrayNoDuplicates!0 lt!8241 lt!8240 lt!8233)))

(declare-fun lt!8590 () Unit!522)

(declare-fun choose!111 (array!1263 (_ BitVec 32) (_ BitVec 32) List!565) Unit!522)

(assert (=> d!4001 (= lt!8590 (choose!111 lt!8241 lt!8240 (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001) lt!8233))))

(assert (=> d!4001 (= (size!693 lt!8241) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))))

(assert (=> d!4001 (= (lemmaArrayNoDuplicatesInAll0Array!0 lt!8241 lt!8240 (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001) lt!8233) lt!8590)))

(declare-fun bs!952 () Bool)

(assert (= bs!952 d!4001))

(assert (=> bs!952 m!16748))

(declare-fun m!17150 () Bool)

(assert (=> bs!952 m!17150))

(assert (=> d!3957 d!4001))

(declare-fun d!4003 () Bool)

(assert (=> d!4003 (= (arrayCountValidKeys!0 lt!8242 lt!8249 lt!8228) #b00000000000000000000000000000000)))

(declare-fun lt!8593 () Unit!522)

(declare-fun choose!59 (array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!522)

(assert (=> d!4003 (= lt!8593 (choose!59 lt!8242 lt!8249 lt!8228))))

(assert (=> d!4003 (bvslt (size!693 lt!8242) #b01111111111111111111111111111111)))

(assert (=> d!4003 (= (lemmaArrayCountValidKeysOfFilled0ArrayIs0!0 lt!8242 lt!8249 lt!8228) lt!8593)))

(declare-fun bs!953 () Bool)

(assert (= bs!953 d!4003))

(assert (=> bs!953 m!16750))

(declare-fun m!17152 () Bool)

(assert (=> bs!953 m!17152))

(assert (=> d!3957 d!4003))

(declare-fun b!23614 () Bool)

(declare-fun e!15307 () Bool)

(declare-fun e!15308 () Bool)

(assert (=> b!23614 (= e!15307 e!15308)))

(declare-fun lt!8602 () (_ BitVec 64))

(assert (=> b!23614 (= lt!8602 (select (arr!597 lt!8238) lt!8248))))

(declare-fun lt!8600 () Unit!522)

(assert (=> b!23614 (= lt!8600 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8238 lt!8602 lt!8248))))

(assert (=> b!23614 (arrayContainsKey!0 lt!8238 lt!8602 #b00000000000000000000000000000000)))

(declare-fun lt!8601 () Unit!522)

(assert (=> b!23614 (= lt!8601 lt!8600)))

(declare-fun res!14483 () Bool)

(assert (=> b!23614 (= res!14483 (= (seekEntryOrOpen!0 (select (arr!597 lt!8238) lt!8248) lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))) (Found!54 lt!8248)))))

(assert (=> b!23614 (=> (not res!14483) (not e!15308))))

(declare-fun b!23615 () Bool)

(declare-fun call!2010 () Bool)

(assert (=> b!23615 (= e!15308 call!2010)))

(declare-fun bm!2007 () Bool)

(assert (=> bm!2007 (= call!2010 (arrayForallSeekEntryOrOpenFound!0 (bvadd lt!8248 #b00000000000000000000000000000001) lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun d!4005 () Bool)

(declare-fun res!14484 () Bool)

(declare-fun e!15309 () Bool)

(assert (=> d!4005 (=> res!14484 e!15309)))

(assert (=> d!4005 (= res!14484 (bvsge lt!8248 (size!693 lt!8238)))))

(assert (=> d!4005 (= (arrayForallSeekEntryOrOpenFound!0 lt!8248 lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))) e!15309)))

(declare-fun b!23616 () Bool)

(assert (=> b!23616 (= e!15307 call!2010)))

(declare-fun b!23617 () Bool)

(assert (=> b!23617 (= e!15309 e!15307)))

(declare-fun c!3078 () Bool)

(assert (=> b!23617 (= c!3078 (validKeyInArray!0 (select (arr!597 lt!8238) lt!8248)))))

(assert (= (and d!4005 (not res!14484)) b!23617))

(assert (= (and b!23617 c!3078) b!23614))

(assert (= (and b!23617 (not c!3078)) b!23616))

(assert (= (and b!23614 res!14483) b!23615))

(assert (= (or b!23615 b!23616) bm!2007))

(declare-fun m!17154 () Bool)

(assert (=> b!23614 m!17154))

(declare-fun m!17156 () Bool)

(assert (=> b!23614 m!17156))

(declare-fun m!17158 () Bool)

(assert (=> b!23614 m!17158))

(assert (=> b!23614 m!17154))

(assert (=> b!23614 m!16680))

(declare-fun m!17160 () Bool)

(assert (=> b!23614 m!17160))

(assert (=> bm!2007 m!16680))

(declare-fun m!17162 () Bool)

(assert (=> bm!2007 m!17162))

(assert (=> b!23617 m!17154))

(assert (=> b!23617 m!17154))

(declare-fun m!17164 () Bool)

(assert (=> b!23617 m!17164))

(assert (=> d!3957 d!4005))

(declare-fun e!15321 () Bool)

(declare-fun b!23628 () Bool)

(declare-fun contains!230 (List!565 (_ BitVec 64)) Bool)

(assert (=> b!23628 (= e!15321 (contains!230 lt!8233 (select (arr!597 lt!8241) lt!8240)))))

(declare-fun bm!2010 () Bool)

(declare-fun c!3081 () Bool)

(declare-fun call!2013 () Bool)

(assert (=> bm!2010 (= call!2013 (arrayNoDuplicates!0 lt!8241 (bvadd lt!8240 #b00000000000000000000000000000001) (ite c!3081 (Cons!561 (select (arr!597 lt!8241) lt!8240) lt!8233) lt!8233)))))

(declare-fun b!23629 () Bool)

(declare-fun e!15320 () Bool)

(assert (=> b!23629 (= e!15320 call!2013)))

(declare-fun d!4007 () Bool)

(declare-fun res!14493 () Bool)

(declare-fun e!15319 () Bool)

(assert (=> d!4007 (=> res!14493 e!15319)))

(assert (=> d!4007 (= res!14493 (bvsge lt!8240 (size!693 lt!8241)))))

(assert (=> d!4007 (= (arrayNoDuplicates!0 lt!8241 lt!8240 lt!8233) e!15319)))

(declare-fun b!23630 () Bool)

(declare-fun e!15318 () Bool)

(assert (=> b!23630 (= e!15319 e!15318)))

(declare-fun res!14492 () Bool)

(assert (=> b!23630 (=> (not res!14492) (not e!15318))))

(assert (=> b!23630 (= res!14492 (not e!15321))))

(declare-fun res!14491 () Bool)

(assert (=> b!23630 (=> (not res!14491) (not e!15321))))

(assert (=> b!23630 (= res!14491 (validKeyInArray!0 (select (arr!597 lt!8241) lt!8240)))))

(declare-fun b!23631 () Bool)

(assert (=> b!23631 (= e!15318 e!15320)))

(assert (=> b!23631 (= c!3081 (validKeyInArray!0 (select (arr!597 lt!8241) lt!8240)))))

(declare-fun b!23632 () Bool)

(assert (=> b!23632 (= e!15320 call!2013)))

(assert (= (and d!4007 (not res!14493)) b!23630))

(assert (= (and b!23630 res!14491) b!23628))

(assert (= (and b!23630 res!14492) b!23631))

(assert (= (and b!23631 c!3081) b!23629))

(assert (= (and b!23631 (not c!3081)) b!23632))

(assert (= (or b!23629 b!23632) bm!2010))

(declare-fun m!17166 () Bool)

(assert (=> b!23628 m!17166))

(assert (=> b!23628 m!17166))

(declare-fun m!17168 () Bool)

(assert (=> b!23628 m!17168))

(assert (=> bm!2010 m!17166))

(declare-fun m!17170 () Bool)

(assert (=> bm!2010 m!17170))

(assert (=> b!23630 m!17166))

(assert (=> b!23630 m!17166))

(declare-fun m!17172 () Bool)

(assert (=> b!23630 m!17172))

(assert (=> b!23631 m!17166))

(assert (=> b!23631 m!17166))

(assert (=> b!23631 m!17172))

(assert (=> d!3957 d!4007))

(declare-fun d!4009 () Bool)

(declare-fun res!14494 () Bool)

(declare-fun e!15322 () Bool)

(assert (=> d!4009 (=> (not res!14494) (not e!15322))))

(assert (=> d!4009 (= res!14494 (simpleValid!20 lt!8243))))

(assert (=> d!4009 (= (valid!121 lt!8243) e!15322)))

(declare-fun b!23633 () Bool)

(declare-fun res!14495 () Bool)

(assert (=> b!23633 (=> (not res!14495) (not e!15322))))

(assert (=> b!23633 (= res!14495 (= (arrayCountValidKeys!0 (_keys!3163 lt!8243) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))) (_size!149 lt!8243)))))

(declare-fun b!23634 () Bool)

(declare-fun res!14496 () Bool)

(assert (=> b!23634 (=> (not res!14496) (not e!15322))))

(assert (=> b!23634 (= res!14496 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 lt!8243) (mask!4729 lt!8243)))))

(declare-fun b!23635 () Bool)

(assert (=> b!23635 (= e!15322 (arrayNoDuplicates!0 (_keys!3163 lt!8243) #b00000000000000000000000000000000 Nil!562))))

(assert (= (and d!4009 res!14494) b!23633))

(assert (= (and b!23633 res!14495) b!23634))

(assert (= (and b!23634 res!14496) b!23635))

(declare-fun m!17174 () Bool)

(assert (=> d!4009 m!17174))

(declare-fun m!17176 () Bool)

(assert (=> b!23633 m!17176))

(declare-fun m!17178 () Bool)

(assert (=> b!23634 m!17178))

(declare-fun m!17180 () Bool)

(assert (=> b!23635 m!17180))

(assert (=> d!3957 d!4009))

(declare-fun d!4011 () Bool)

(assert (=> d!4011 (arrayForallSeekEntryOrOpenFound!0 lt!8248 lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun lt!8605 () Unit!522)

(declare-fun choose!34 (array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!522)

(assert (=> d!4011 (= lt!8605 (choose!34 lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8248))))

(assert (=> d!4011 (validMask!0 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(assert (=> d!4011 (= (lemmaArrayForallSeekEntryOrOpenFoundAlwaysTrueFor0Array!0 lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8248) lt!8605)))

(declare-fun bs!954 () Bool)

(assert (= bs!954 d!4011))

(assert (=> bs!954 m!16680))

(assert (=> bs!954 m!16746))

(assert (=> bs!954 m!16680))

(declare-fun m!17182 () Bool)

(assert (=> bs!954 m!17182))

(assert (=> bs!954 m!16680))

(assert (=> bs!954 m!16752))

(assert (=> d!3957 d!4011))

(declare-fun d!4013 () Bool)

(assert (=> d!4013 (= (map!408 lt!8245) (getCurrentListMap!127 (_keys!3163 lt!8245) (_values!1728 lt!8245) (mask!4729 lt!8245) (extraKeys!1640 lt!8245) (zeroValue!1665 lt!8245) (minValue!1665 lt!8245) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8245)))))

(declare-fun bs!955 () Bool)

(assert (= bs!955 d!4013))

(declare-fun m!17184 () Bool)

(assert (=> bs!955 m!17184))

(assert (=> d!3957 d!4013))

(declare-fun d!4015 () Bool)

(assert (=> d!4015 (= (validMask!0 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))) (and (or (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000001111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000011111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000001111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000011111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000001111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000011111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000001111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000011111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000001111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000011111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000001111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000011111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000111111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000001111111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000011111111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000111111111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000001111111111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000011111111111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000111111111111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00001111111111111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00011111111111111111111111111111) (= (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00111111111111111111111111111111)) (bvsle (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00111111111111111111111111111111)))))

(assert (=> d!3957 d!4015))

(declare-fun d!4017 () Bool)

(declare-fun res!14501 () Bool)

(declare-fun e!15327 () Bool)

(assert (=> d!4017 (=> res!14501 e!15327)))

(assert (=> d!4017 (= res!14501 (= (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4017 (= (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000) e!15327)))

(declare-fun b!23640 () Bool)

(declare-fun e!15328 () Bool)

(assert (=> b!23640 (= e!15327 e!15328)))

(declare-fun res!14502 () Bool)

(assert (=> b!23640 (=> (not res!14502) (not e!15328))))

(assert (=> b!23640 (= res!14502 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23641 () Bool)

(assert (=> b!23641 (= e!15328 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4017 (not res!14501)) b!23640))

(assert (= (and b!23640 res!14502) b!23641))

(assert (=> d!4017 m!16934))

(declare-fun m!17186 () Bool)

(assert (=> b!23641 m!17186))

(assert (=> bm!1910 d!4017))

(declare-fun d!4019 () Bool)

(declare-fun e!15330 () Bool)

(assert (=> d!4019 e!15330))

(declare-fun res!14503 () Bool)

(assert (=> d!4019 (=> res!14503 e!15330)))

(declare-fun lt!8607 () Bool)

(assert (=> d!4019 (= res!14503 (not lt!8607))))

(declare-fun lt!8608 () Bool)

(assert (=> d!4019 (= lt!8607 lt!8608)))

(declare-fun lt!8606 () Unit!522)

(declare-fun e!15329 () Unit!522)

(assert (=> d!4019 (= lt!8606 e!15329)))

(declare-fun c!3082 () Bool)

(assert (=> d!4019 (= c!3082 lt!8608)))

(assert (=> d!4019 (= lt!8608 (containsKey!25 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4019 (= (contains!229 call!1944 #b1000000000000000000000000000000000000000000000000000000000000000) lt!8607)))

(declare-fun b!23642 () Bool)

(declare-fun lt!8609 () Unit!522)

(assert (=> b!23642 (= e!15329 lt!8609)))

(assert (=> b!23642 (= lt!8609 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23642 (isDefined!23 (getValueByKey!61 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23643 () Bool)

(declare-fun Unit!539 () Unit!522)

(assert (=> b!23643 (= e!15329 Unit!539)))

(declare-fun b!23644 () Bool)

(assert (=> b!23644 (= e!15330 (isDefined!23 (getValueByKey!61 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4019 c!3082) b!23642))

(assert (= (and d!4019 (not c!3082)) b!23643))

(assert (= (and d!4019 (not res!14503)) b!23644))

(declare-fun m!17188 () Bool)

(assert (=> d!4019 m!17188))

(declare-fun m!17190 () Bool)

(assert (=> b!23642 m!17190))

(declare-fun m!17192 () Bool)

(assert (=> b!23642 m!17192))

(assert (=> b!23642 m!17192))

(declare-fun m!17194 () Bool)

(assert (=> b!23642 m!17194))

(assert (=> b!23644 m!17192))

(assert (=> b!23644 m!17192))

(assert (=> b!23644 m!17194))

(assert (=> b!23356 d!4019))

(declare-fun d!4021 () Bool)

(declare-fun e!15333 () Bool)

(assert (=> d!4021 e!15333))

(declare-fun res!14509 () Bool)

(assert (=> d!4021 (=> (not res!14509) (not e!15333))))

(declare-fun lt!8621 () ListLongMap!563)

(assert (=> d!4021 (= res!14509 (contains!229 lt!8621 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun lt!8619 () List!564)

(assert (=> d!4021 (= lt!8621 (ListLongMap!564 lt!8619))))

(declare-fun lt!8618 () Unit!522)

(declare-fun lt!8620 () Unit!522)

(assert (=> d!4021 (= lt!8618 lt!8620)))

(assert (=> d!4021 (= (getValueByKey!61 lt!8619 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!18 (List!564 (_ BitVec 64) V!1187) Unit!522)

(assert (=> d!4021 (= lt!8620 (lemmaContainsTupThenGetReturnValue!18 lt!8619 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun insertStrictlySorted!18 (List!564 (_ BitVec 64) V!1187) List!564)

(assert (=> d!4021 (= lt!8619 (insertStrictlySorted!18 (toList!297 (ite c!3009 call!1951 call!1952)) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4021 (= (+!44 (ite c!3009 call!1951 call!1952) (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!8621)))

(declare-fun b!23649 () Bool)

(declare-fun res!14508 () Bool)

(assert (=> b!23649 (=> (not res!14508) (not e!15333))))

(assert (=> b!23649 (= res!14508 (= (getValueByKey!61 (toList!297 lt!8621) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!23650 () Bool)

(declare-fun contains!231 (List!564 tuple2!972) Bool)

(assert (=> b!23650 (= e!15333 (contains!231 (toList!297 lt!8621) (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (= (and d!4021 res!14509) b!23649))

(assert (= (and b!23649 res!14508) b!23650))

(declare-fun m!17196 () Bool)

(assert (=> d!4021 m!17196))

(declare-fun m!17198 () Bool)

(assert (=> d!4021 m!17198))

(declare-fun m!17200 () Bool)

(assert (=> d!4021 m!17200))

(declare-fun m!17202 () Bool)

(assert (=> d!4021 m!17202))

(declare-fun m!17204 () Bool)

(assert (=> b!23649 m!17204))

(declare-fun m!17206 () Bool)

(assert (=> b!23650 m!17206))

(assert (=> bm!1932 d!4021))

(declare-fun d!4023 () Bool)

(assert (=> d!4023 (= (map!408 lt!8243) (getCurrentListMap!127 (_keys!3163 lt!8243) (_values!1728 lt!8243) (mask!4729 lt!8243) (extraKeys!1640 lt!8243) (zeroValue!1665 lt!8243) (minValue!1665 lt!8243) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8243)))))

(declare-fun bs!956 () Bool)

(assert (= bs!956 d!4023))

(declare-fun m!17208 () Bool)

(assert (=> bs!956 m!17208))

(assert (=> b!23204 d!4023))

(declare-fun d!4025 () Bool)

(assert (=> d!4025 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8622 () Unit!522)

(assert (=> d!4025 (= lt!8622 (choose!205 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4025 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4025 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))) lt!8622)))

(declare-fun bs!957 () Bool)

(assert (= bs!957 d!4025))

(declare-fun m!17210 () Bool)

(assert (=> bs!957 m!17210))

(assert (=> bs!957 m!16844))

(assert (=> bs!957 m!16844))

(declare-fun m!17212 () Bool)

(assert (=> bs!957 m!17212))

(declare-fun m!17214 () Bool)

(assert (=> bs!957 m!17214))

(assert (=> bs!957 m!16902))

(assert (=> b!23373 d!4025))

(declare-fun d!4027 () Bool)

(declare-fun e!15334 () Bool)

(assert (=> d!4027 e!15334))

(declare-fun res!14510 () Bool)

(assert (=> d!4027 (=> (not res!14510) (not e!15334))))

(declare-fun lt!8623 () SeekEntryResult!54)

(assert (=> d!4027 (= res!14510 ((_ is Found!54) lt!8623))))

(assert (=> d!4027 (= lt!8623 (seekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun lt!8624 () Unit!522)

(assert (=> d!4027 (= lt!8624 (choose!204 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4027 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4027 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)) lt!8624)))

(declare-fun b!23651 () Bool)

(declare-fun res!14511 () Bool)

(assert (=> b!23651 (=> (not res!14511) (not e!15334))))

(assert (=> b!23651 (= res!14511 (inRange!0 (index!2338 lt!8623) (mask!4729 lt!8141)))))

(declare-fun b!23652 () Bool)

(assert (=> b!23652 (= e!15334 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8623)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23652 (and (bvsge (index!2338 lt!8623) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8623) (size!693 (_keys!3163 lt!8141))))))

(assert (= (and d!4027 res!14510) b!23651))

(assert (= (and b!23651 res!14511) b!23652))

(assert (=> d!4027 m!16774))

(declare-fun m!17216 () Bool)

(assert (=> d!4027 m!17216))

(assert (=> d!4027 m!16908))

(declare-fun m!17218 () Bool)

(assert (=> b!23651 m!17218))

(declare-fun m!17220 () Bool)

(assert (=> b!23652 m!17220))

(assert (=> bm!1912 d!4027))

(declare-fun d!4029 () Bool)

(declare-fun lt!8629 () tuple2!974)

(assert (=> d!4029 (or (bvsle (_2!496 lt!8629) #b00000000000000000000000000001000) (bvsge (bvmul #b00000000000000000000000000001000 (_size!149 (v!1602 (underlying!115 thiss!938)))) (_2!496 lt!8629)) (bvslt (bvadd (bvand (bvashr (_2!496 lt!8629) #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun e!15337 () tuple2!974)

(assert (=> d!4029 (= lt!8629 e!15337)))

(declare-fun c!3085 () Bool)

(declare-fun lt!8630 () (_ BitVec 32))

(assert (=> d!4029 (= c!3085 (and (bvsgt lt!8630 #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8630) (bvsge (bvadd (bvand (bvashr lt!8630 #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1602 (underlying!115 thiss!938))))))))

(assert (=> d!4029 (= lt!8630 (bvlshr (_2!496 lt!8256) #b00000000000000000000000000000001))))

(assert (=> d!4029 (and (bvsgt (_2!496 lt!8256) #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1602 (underlying!115 thiss!938)))) (_2!496 lt!8256)) (bvsge (bvadd (bvand (bvashr (_2!496 lt!8256) #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(assert (=> d!4029 (= (computeNewMaskWhile!14 (_size!149 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (mask!4729 (v!1602 (underlying!115 thiss!938))) (_2!496 lt!8256)) lt!8629)))

(declare-fun b!23657 () Bool)

(assert (=> b!23657 (= e!15337 (computeNewMaskWhile!14 (_size!149 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (mask!4729 (v!1602 (underlying!115 thiss!938))) lt!8630))))

(declare-fun b!23658 () Bool)

(declare-fun Unit!540 () Unit!522)

(assert (=> b!23658 (= e!15337 (tuple2!975 Unit!540 lt!8630))))

(assert (= (and d!4029 c!3085) b!23657))

(assert (= (and d!4029 (not c!3085)) b!23658))

(declare-fun m!17223 () Bool)

(assert (=> b!23657 m!17223))

(assert (=> b!23216 d!4029))

(declare-fun d!4031 () Bool)

(declare-fun res!14512 () Bool)

(declare-fun e!15338 () Bool)

(assert (=> d!4031 (=> (not res!14512) (not e!15338))))

(assert (=> d!4031 (= res!14512 (simpleValid!20 (_2!490 lt!8334)))))

(assert (=> d!4031 (= (valid!121 (_2!490 lt!8334)) e!15338)))

(declare-fun b!23659 () Bool)

(declare-fun res!14513 () Bool)

(assert (=> b!23659 (=> (not res!14513) (not e!15338))))

(assert (=> b!23659 (= res!14513 (= (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8334)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))) (_size!149 (_2!490 lt!8334))))))

(declare-fun b!23660 () Bool)

(declare-fun res!14514 () Bool)

(assert (=> b!23660 (=> (not res!14514) (not e!15338))))

(assert (=> b!23660 (= res!14514 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334))))))

(declare-fun b!23661 () Bool)

(assert (=> b!23661 (= e!15338 (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8334)) #b00000000000000000000000000000000 Nil!562))))

(assert (= (and d!4031 res!14512) b!23659))

(assert (= (and b!23659 res!14513) b!23660))

(assert (= (and b!23660 res!14514) b!23661))

(declare-fun m!17225 () Bool)

(assert (=> d!4031 m!17225))

(declare-fun m!17227 () Bool)

(assert (=> b!23659 m!17227))

(declare-fun m!17229 () Bool)

(assert (=> b!23660 m!17229))

(declare-fun m!17231 () Bool)

(assert (=> b!23661 m!17231))

(assert (=> d!3965 d!4031))

(declare-fun d!4033 () Bool)

(declare-fun res!14515 () Bool)

(declare-fun e!15339 () Bool)

(assert (=> d!4033 (=> (not res!14515) (not e!15339))))

(assert (=> d!4033 (= res!14515 (simpleValid!20 lt!8141))))

(assert (=> d!4033 (= (valid!121 lt!8141) e!15339)))

(declare-fun b!23662 () Bool)

(declare-fun res!14516 () Bool)

(assert (=> b!23662 (=> (not res!14516) (not e!15339))))

(assert (=> b!23662 (= res!14516 (= (arrayCountValidKeys!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (_size!149 lt!8141)))))

(declare-fun b!23663 () Bool)

(declare-fun res!14517 () Bool)

(assert (=> b!23663 (=> (not res!14517) (not e!15339))))

(assert (=> b!23663 (= res!14517 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!23664 () Bool)

(assert (=> b!23664 (= e!15339 (arrayNoDuplicates!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 Nil!562))))

(assert (= (and d!4033 res!14515) b!23662))

(assert (= (and b!23662 res!14516) b!23663))

(assert (= (and b!23663 res!14517) b!23664))

(declare-fun m!17233 () Bool)

(assert (=> d!4033 m!17233))

(assert (=> b!23662 m!17030))

(declare-fun m!17235 () Bool)

(assert (=> b!23663 m!17235))

(declare-fun m!17237 () Bool)

(assert (=> b!23664 m!17237))

(assert (=> d!3965 d!4033))

(declare-fun b!23665 () Bool)

(declare-fun e!15348 () ListLongMap!563)

(declare-fun call!2016 () ListLongMap!563)

(assert (=> b!23665 (= e!15348 call!2016)))

(declare-fun e!15351 () Bool)

(declare-fun lt!8642 () ListLongMap!563)

(declare-fun b!23666 () Bool)

(assert (=> b!23666 (= e!15351 (= (apply!29 lt!8642 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))

(declare-fun b!23667 () Bool)

(declare-fun e!15340 () Bool)

(assert (=> b!23667 (= e!15340 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2011 () Bool)

(declare-fun call!2019 () ListLongMap!563)

(assert (=> bm!2011 (= call!2019 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23668 () Bool)

(declare-fun e!15345 () ListLongMap!563)

(assert (=> b!23668 (= e!15345 e!15348)))

(declare-fun c!3090 () Bool)

(assert (=> b!23668 (= c!3090 (and (not (= (bvand (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23669 () Bool)

(declare-fun e!15350 () Bool)

(declare-fun call!2015 () Bool)

(assert (=> b!23669 (= e!15350 (not call!2015))))

(declare-fun b!23670 () Bool)

(declare-fun e!15347 () Bool)

(assert (=> b!23670 (= e!15347 e!15351)))

(declare-fun res!14523 () Bool)

(declare-fun call!2017 () Bool)

(assert (=> b!23670 (= res!14523 call!2017)))

(assert (=> b!23670 (=> (not res!14523) (not e!15351))))

(declare-fun bm!2012 () Bool)

(declare-fun call!2018 () ListLongMap!563)

(assert (=> bm!2012 (= call!2016 call!2018)))

(declare-fun b!23672 () Bool)

(assert (=> b!23672 (= e!15347 (not call!2017))))

(declare-fun bm!2013 () Bool)

(declare-fun call!2014 () ListLongMap!563)

(assert (=> bm!2013 (= call!2014 call!2019)))

(declare-fun b!23673 () Bool)

(declare-fun e!15346 () Bool)

(assert (=> b!23673 (= e!15346 e!15347)))

(declare-fun c!3091 () Bool)

(assert (=> b!23673 (= c!3091 (not (= (bvand (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23674 () Bool)

(declare-fun e!15341 () Unit!522)

(declare-fun lt!8631 () Unit!522)

(assert (=> b!23674 (= e!15341 lt!8631)))

(declare-fun lt!8647 () ListLongMap!563)

(assert (=> b!23674 (= lt!8647 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8650 () (_ BitVec 64))

(assert (=> b!23674 (= lt!8650 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8645 () (_ BitVec 64))

(assert (=> b!23674 (= lt!8645 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8635 () Unit!522)

(assert (=> b!23674 (= lt!8635 (addStillContains!14 lt!8647 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8645))))

(assert (=> b!23674 (contains!229 (+!44 lt!8647 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8645)))

(declare-fun lt!8636 () Unit!522)

(assert (=> b!23674 (= lt!8636 lt!8635)))

(declare-fun lt!8648 () ListLongMap!563)

(assert (=> b!23674 (= lt!8648 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8634 () (_ BitVec 64))

(assert (=> b!23674 (= lt!8634 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8632 () (_ BitVec 64))

(assert (=> b!23674 (= lt!8632 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8641 () Unit!522)

(assert (=> b!23674 (= lt!8641 (addApplyDifferent!14 lt!8648 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8632))))

(assert (=> b!23674 (= (apply!29 (+!44 lt!8648 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8632) (apply!29 lt!8648 lt!8632))))

(declare-fun lt!8639 () Unit!522)

(assert (=> b!23674 (= lt!8639 lt!8641)))

(declare-fun lt!8637 () ListLongMap!563)

(assert (=> b!23674 (= lt!8637 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8652 () (_ BitVec 64))

(assert (=> b!23674 (= lt!8652 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8644 () (_ BitVec 64))

(assert (=> b!23674 (= lt!8644 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8633 () Unit!522)

(assert (=> b!23674 (= lt!8633 (addApplyDifferent!14 lt!8637 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8644))))

(assert (=> b!23674 (= (apply!29 (+!44 lt!8637 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8644) (apply!29 lt!8637 lt!8644))))

(declare-fun lt!8646 () Unit!522)

(assert (=> b!23674 (= lt!8646 lt!8633)))

(declare-fun lt!8651 () ListLongMap!563)

(assert (=> b!23674 (= lt!8651 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8649 () (_ BitVec 64))

(assert (=> b!23674 (= lt!8649 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8643 () (_ BitVec 64))

(assert (=> b!23674 (= lt!8643 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!23674 (= lt!8631 (addApplyDifferent!14 lt!8651 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8643))))

(assert (=> b!23674 (= (apply!29 (+!44 lt!8651 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8643) (apply!29 lt!8651 lt!8643))))

(declare-fun call!2020 () ListLongMap!563)

(declare-fun c!3089 () Bool)

(declare-fun bm!2014 () Bool)

(assert (=> bm!2014 (= call!2018 (+!44 (ite c!3089 call!2019 (ite c!3090 call!2014 call!2020)) (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(declare-fun b!23675 () Bool)

(declare-fun Unit!541 () Unit!522)

(assert (=> b!23675 (= e!15341 Unit!541)))

(declare-fun b!23676 () Bool)

(declare-fun e!15343 () Bool)

(assert (=> b!23676 (= e!15350 e!15343)))

(declare-fun res!14521 () Bool)

(assert (=> b!23676 (= res!14521 call!2015)))

(assert (=> b!23676 (=> (not res!14521) (not e!15343))))

(declare-fun bm!2015 () Bool)

(assert (=> bm!2015 (= call!2020 call!2014)))

(declare-fun b!23677 () Bool)

(declare-fun res!14522 () Bool)

(assert (=> b!23677 (=> (not res!14522) (not e!15346))))

(declare-fun e!15344 () Bool)

(assert (=> b!23677 (= res!14522 e!15344)))

(declare-fun res!14518 () Bool)

(assert (=> b!23677 (=> res!14518 e!15344)))

(declare-fun e!15349 () Bool)

(assert (=> b!23677 (= res!14518 (not e!15349))))

(declare-fun res!14525 () Bool)

(assert (=> b!23677 (=> (not res!14525) (not e!15349))))

(assert (=> b!23677 (= res!14525 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23678 () Bool)

(declare-fun e!15342 () Bool)

(assert (=> b!23678 (= e!15344 e!15342)))

(declare-fun res!14519 () Bool)

(assert (=> b!23678 (=> (not res!14519) (not e!15342))))

(assert (=> b!23678 (= res!14519 (contains!229 lt!8642 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23678 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23679 () Bool)

(assert (=> b!23679 (= e!15349 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!23680 () Bool)

(declare-fun e!15352 () ListLongMap!563)

(assert (=> b!23680 (= e!15352 call!2016)))

(declare-fun b!23681 () Bool)

(assert (=> b!23681 (= e!15345 (+!44 call!2018 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))

(declare-fun d!4035 () Bool)

(assert (=> d!4035 e!15346))

(declare-fun res!14524 () Bool)

(assert (=> d!4035 (=> (not res!14524) (not e!15346))))

(assert (=> d!4035 (= res!14524 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!8640 () ListLongMap!563)

(assert (=> d!4035 (= lt!8642 lt!8640)))

(declare-fun lt!8638 () Unit!522)

(assert (=> d!4035 (= lt!8638 e!15341)))

(declare-fun c!3087 () Bool)

(assert (=> d!4035 (= c!3087 e!15340)))

(declare-fun res!14526 () Bool)

(assert (=> d!4035 (=> (not res!14526) (not e!15340))))

(assert (=> d!4035 (= res!14526 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4035 (= lt!8640 e!15345)))

(assert (=> d!4035 (= c!3089 (and (not (= (bvand (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4035 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4035 (= (getCurrentListMap!127 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8642)))

(declare-fun b!23671 () Bool)

(assert (=> b!23671 (= e!15342 (= (apply!29 lt!8642 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23671 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))))))))

(assert (=> b!23671 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!2016 () Bool)

(assert (=> bm!2016 (= call!2017 (contains!229 lt!8642 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23682 () Bool)

(declare-fun res!14520 () Bool)

(assert (=> b!23682 (=> (not res!14520) (not e!15346))))

(assert (=> b!23682 (= res!14520 e!15350)))

(declare-fun c!3086 () Bool)

(assert (=> b!23682 (= c!3086 (not (= (bvand (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!23683 () Bool)

(assert (=> b!23683 (= e!15343 (= (apply!29 lt!8642 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))

(declare-fun b!23684 () Bool)

(assert (=> b!23684 (= e!15352 call!2020)))

(declare-fun b!23685 () Bool)

(declare-fun c!3088 () Bool)

(assert (=> b!23685 (= c!3088 (and (not (= (bvand (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23685 (= e!15348 e!15352)))

(declare-fun bm!2017 () Bool)

(assert (=> bm!2017 (= call!2015 (contains!229 lt!8642 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4035 c!3089) b!23681))

(assert (= (and d!4035 (not c!3089)) b!23668))

(assert (= (and b!23668 c!3090) b!23665))

(assert (= (and b!23668 (not c!3090)) b!23685))

(assert (= (and b!23685 c!3088) b!23680))

(assert (= (and b!23685 (not c!3088)) b!23684))

(assert (= (or b!23680 b!23684) bm!2015))

(assert (= (or b!23665 bm!2015) bm!2013))

(assert (= (or b!23665 b!23680) bm!2012))

(assert (= (or b!23681 bm!2013) bm!2011))

(assert (= (or b!23681 bm!2012) bm!2014))

(assert (= (and d!4035 res!14526) b!23667))

(assert (= (and d!4035 c!3087) b!23674))

(assert (= (and d!4035 (not c!3087)) b!23675))

(assert (= (and d!4035 res!14524) b!23677))

(assert (= (and b!23677 res!14525) b!23679))

(assert (= (and b!23677 (not res!14518)) b!23678))

(assert (= (and b!23678 res!14519) b!23671))

(assert (= (and b!23677 res!14522) b!23682))

(assert (= (and b!23682 c!3086) b!23676))

(assert (= (and b!23682 (not c!3086)) b!23669))

(assert (= (and b!23676 res!14521) b!23683))

(assert (= (or b!23676 b!23669) bm!2017))

(assert (= (and b!23682 res!14520) b!23673))

(assert (= (and b!23673 c!3091) b!23670))

(assert (= (and b!23673 (not c!3091)) b!23672))

(assert (= (and b!23670 res!14523) b!23666))

(assert (= (or b!23670 b!23672) bm!2016))

(declare-fun b_lambda!1575 () Bool)

(assert (=> (not b_lambda!1575) (not b!23671)))

(assert (=> b!23671 t!3232))

(declare-fun b_and!1487 () Bool)

(assert (= b_and!1485 (and (=> t!3232 result!1093) b_and!1487)))

(declare-fun m!17239 () Bool)

(assert (=> b!23683 m!17239))

(declare-fun m!17241 () Bool)

(assert (=> bm!2014 m!17241))

(declare-fun m!17243 () Bool)

(assert (=> b!23671 m!17243))

(assert (=> b!23671 m!17243))

(assert (=> b!23671 m!16930))

(declare-fun m!17245 () Bool)

(assert (=> b!23671 m!17245))

(assert (=> b!23671 m!16934))

(assert (=> b!23671 m!16930))

(assert (=> b!23671 m!16934))

(declare-fun m!17247 () Bool)

(assert (=> b!23671 m!17247))

(declare-fun m!17249 () Bool)

(assert (=> bm!2016 m!17249))

(assert (=> b!23679 m!16934))

(assert (=> b!23679 m!16934))

(assert (=> b!23679 m!16940))

(declare-fun m!17251 () Bool)

(assert (=> bm!2011 m!17251))

(declare-fun m!17253 () Bool)

(assert (=> b!23674 m!17253))

(declare-fun m!17255 () Bool)

(assert (=> b!23674 m!17255))

(declare-fun m!17257 () Bool)

(assert (=> b!23674 m!17257))

(declare-fun m!17259 () Bool)

(assert (=> b!23674 m!17259))

(declare-fun m!17261 () Bool)

(assert (=> b!23674 m!17261))

(declare-fun m!17263 () Bool)

(assert (=> b!23674 m!17263))

(assert (=> b!23674 m!17253))

(declare-fun m!17265 () Bool)

(assert (=> b!23674 m!17265))

(declare-fun m!17267 () Bool)

(assert (=> b!23674 m!17267))

(declare-fun m!17269 () Bool)

(assert (=> b!23674 m!17269))

(declare-fun m!17271 () Bool)

(assert (=> b!23674 m!17271))

(declare-fun m!17273 () Bool)

(assert (=> b!23674 m!17273))

(assert (=> b!23674 m!17251))

(assert (=> b!23674 m!16934))

(declare-fun m!17275 () Bool)

(assert (=> b!23674 m!17275))

(assert (=> b!23674 m!17267))

(declare-fun m!17277 () Bool)

(assert (=> b!23674 m!17277))

(declare-fun m!17279 () Bool)

(assert (=> b!23674 m!17279))

(assert (=> b!23674 m!17257))

(assert (=> b!23674 m!17263))

(declare-fun m!17281 () Bool)

(assert (=> b!23674 m!17281))

(assert (=> b!23678 m!16934))

(assert (=> b!23678 m!16934))

(declare-fun m!17283 () Bool)

(assert (=> b!23678 m!17283))

(declare-fun m!17285 () Bool)

(assert (=> b!23666 m!17285))

(declare-fun m!17287 () Bool)

(assert (=> b!23681 m!17287))

(declare-fun m!17289 () Bool)

(assert (=> bm!2017 m!17289))

(assert (=> d!4035 m!16908))

(assert (=> b!23667 m!16934))

(assert (=> b!23667 m!16934))

(assert (=> b!23667 m!16940))

(assert (=> bm!1930 d!4035))

(declare-fun d!4037 () Bool)

(declare-fun e!15353 () Bool)

(assert (=> d!4037 e!15353))

(declare-fun res!14528 () Bool)

(assert (=> d!4037 (=> (not res!14528) (not e!15353))))

(declare-fun lt!8656 () ListLongMap!563)

(assert (=> d!4037 (= res!14528 (contains!229 lt!8656 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun lt!8654 () List!564)

(assert (=> d!4037 (= lt!8656 (ListLongMap!564 lt!8654))))

(declare-fun lt!8653 () Unit!522)

(declare-fun lt!8655 () Unit!522)

(assert (=> d!4037 (= lt!8653 lt!8655)))

(assert (=> d!4037 (= (getValueByKey!61 lt!8654 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4037 (= lt!8655 (lemmaContainsTupThenGetReturnValue!18 lt!8654 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4037 (= lt!8654 (insertStrictlySorted!18 (toList!297 call!1957) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4037 (= (+!44 call!1957 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!8656)))

(declare-fun b!23686 () Bool)

(declare-fun res!14527 () Bool)

(assert (=> b!23686 (=> (not res!14527) (not e!15353))))

(assert (=> b!23686 (= res!14527 (= (getValueByKey!61 (toList!297 lt!8656) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!23687 () Bool)

(assert (=> b!23687 (= e!15353 (contains!231 (toList!297 lt!8656) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(assert (= (and d!4037 res!14528) b!23686))

(assert (= (and b!23686 res!14527) b!23687))

(declare-fun m!17291 () Bool)

(assert (=> d!4037 m!17291))

(declare-fun m!17293 () Bool)

(assert (=> d!4037 m!17293))

(declare-fun m!17295 () Bool)

(assert (=> d!4037 m!17295))

(declare-fun m!17297 () Bool)

(assert (=> d!4037 m!17297))

(declare-fun m!17299 () Bool)

(assert (=> b!23686 m!17299))

(declare-fun m!17301 () Bool)

(assert (=> b!23687 m!17301))

(assert (=> b!23358 d!4037))

(declare-fun d!4039 () Bool)

(declare-fun e!15355 () Bool)

(assert (=> d!4039 e!15355))

(declare-fun res!14529 () Bool)

(assert (=> d!4039 (=> res!14529 e!15355)))

(declare-fun lt!8658 () Bool)

(assert (=> d!4039 (= res!14529 (not lt!8658))))

(declare-fun lt!8659 () Bool)

(assert (=> d!4039 (= lt!8658 lt!8659)))

(declare-fun lt!8657 () Unit!522)

(declare-fun e!15354 () Unit!522)

(assert (=> d!4039 (= lt!8657 e!15354)))

(declare-fun c!3092 () Bool)

(assert (=> d!4039 (= c!3092 lt!8659)))

(assert (=> d!4039 (= lt!8659 (containsKey!25 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))

(assert (=> d!4039 (= (contains!229 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))) lt!8658)))

(declare-fun b!23688 () Bool)

(declare-fun lt!8660 () Unit!522)

(assert (=> b!23688 (= e!15354 lt!8660)))

(assert (=> b!23688 (= lt!8660 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))

(assert (=> b!23688 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))

(declare-fun b!23689 () Bool)

(declare-fun Unit!542 () Unit!522)

(assert (=> b!23689 (= e!15354 Unit!542)))

(declare-fun b!23690 () Bool)

(assert (=> b!23690 (= e!15355 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356)))))))

(assert (= (and d!4039 c!3092) b!23688))

(assert (= (and d!4039 (not c!3092)) b!23689))

(assert (= (and d!4039 (not res!14529)) b!23690))

(assert (=> d!4039 m!16854))

(declare-fun m!17303 () Bool)

(assert (=> d!4039 m!17303))

(assert (=> b!23688 m!16854))

(declare-fun m!17305 () Bool)

(assert (=> b!23688 m!17305))

(assert (=> b!23688 m!16854))

(declare-fun m!17307 () Bool)

(assert (=> b!23688 m!17307))

(assert (=> b!23688 m!17307))

(declare-fun m!17309 () Bool)

(assert (=> b!23688 m!17309))

(assert (=> b!23690 m!16854))

(assert (=> b!23690 m!17307))

(assert (=> b!23690 m!17307))

(assert (=> b!23690 m!17309))

(assert (=> b!23342 d!4039))

(declare-fun b!23691 () Bool)

(declare-fun e!15364 () ListLongMap!563)

(declare-fun call!2023 () ListLongMap!563)

(assert (=> b!23691 (= e!15364 call!2023)))

(declare-fun b!23692 () Bool)

(declare-fun e!15367 () Bool)

(declare-fun lt!8672 () ListLongMap!563)

(assert (=> b!23692 (= e!15367 (= (apply!29 lt!8672 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!490 lt!8142))))))

(declare-fun b!23693 () Bool)

(declare-fun e!15356 () Bool)

(assert (=> b!23693 (= e!15356 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun bm!2018 () Bool)

(declare-fun call!2026 () ListLongMap!563)

(assert (=> bm!2018 (= call!2026 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!23694 () Bool)

(declare-fun e!15361 () ListLongMap!563)

(assert (=> b!23694 (= e!15361 e!15364)))

(declare-fun c!3097 () Bool)

(assert (=> b!23694 (= c!3097 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23695 () Bool)

(declare-fun e!15366 () Bool)

(declare-fun call!2022 () Bool)

(assert (=> b!23695 (= e!15366 (not call!2022))))

(declare-fun b!23696 () Bool)

(declare-fun e!15363 () Bool)

(assert (=> b!23696 (= e!15363 e!15367)))

(declare-fun res!14535 () Bool)

(declare-fun call!2024 () Bool)

(assert (=> b!23696 (= res!14535 call!2024)))

(assert (=> b!23696 (=> (not res!14535) (not e!15367))))

(declare-fun bm!2019 () Bool)

(declare-fun call!2025 () ListLongMap!563)

(assert (=> bm!2019 (= call!2023 call!2025)))

(declare-fun b!23698 () Bool)

(assert (=> b!23698 (= e!15363 (not call!2024))))

(declare-fun bm!2020 () Bool)

(declare-fun call!2021 () ListLongMap!563)

(assert (=> bm!2020 (= call!2021 call!2026)))

(declare-fun b!23699 () Bool)

(declare-fun e!15362 () Bool)

(assert (=> b!23699 (= e!15362 e!15363)))

(declare-fun c!3098 () Bool)

(assert (=> b!23699 (= c!3098 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23700 () Bool)

(declare-fun e!15357 () Unit!522)

(declare-fun lt!8661 () Unit!522)

(assert (=> b!23700 (= e!15357 lt!8661)))

(declare-fun lt!8677 () ListLongMap!563)

(assert (=> b!23700 (= lt!8677 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8680 () (_ BitVec 64))

(assert (=> b!23700 (= lt!8680 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8675 () (_ BitVec 64))

(assert (=> b!23700 (= lt!8675 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8665 () Unit!522)

(assert (=> b!23700 (= lt!8665 (addStillContains!14 lt!8677 lt!8680 (zeroValue!1665 (_2!490 lt!8142)) lt!8675))))

(assert (=> b!23700 (contains!229 (+!44 lt!8677 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142)))) lt!8675)))

(declare-fun lt!8666 () Unit!522)

(assert (=> b!23700 (= lt!8666 lt!8665)))

(declare-fun lt!8678 () ListLongMap!563)

(assert (=> b!23700 (= lt!8678 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8664 () (_ BitVec 64))

(assert (=> b!23700 (= lt!8664 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8662 () (_ BitVec 64))

(assert (=> b!23700 (= lt!8662 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8671 () Unit!522)

(assert (=> b!23700 (= lt!8671 (addApplyDifferent!14 lt!8678 lt!8664 (minValue!1665 (_2!490 lt!8142)) lt!8662))))

(assert (=> b!23700 (= (apply!29 (+!44 lt!8678 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142)))) lt!8662) (apply!29 lt!8678 lt!8662))))

(declare-fun lt!8669 () Unit!522)

(assert (=> b!23700 (= lt!8669 lt!8671)))

(declare-fun lt!8667 () ListLongMap!563)

(assert (=> b!23700 (= lt!8667 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8682 () (_ BitVec 64))

(assert (=> b!23700 (= lt!8682 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8674 () (_ BitVec 64))

(assert (=> b!23700 (= lt!8674 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8663 () Unit!522)

(assert (=> b!23700 (= lt!8663 (addApplyDifferent!14 lt!8667 lt!8682 (zeroValue!1665 (_2!490 lt!8142)) lt!8674))))

(assert (=> b!23700 (= (apply!29 (+!44 lt!8667 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142)))) lt!8674) (apply!29 lt!8667 lt!8674))))

(declare-fun lt!8676 () Unit!522)

(assert (=> b!23700 (= lt!8676 lt!8663)))

(declare-fun lt!8681 () ListLongMap!563)

(assert (=> b!23700 (= lt!8681 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8679 () (_ BitVec 64))

(assert (=> b!23700 (= lt!8679 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8673 () (_ BitVec 64))

(assert (=> b!23700 (= lt!8673 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(assert (=> b!23700 (= lt!8661 (addApplyDifferent!14 lt!8681 lt!8679 (minValue!1665 (_2!490 lt!8142)) lt!8673))))

(assert (=> b!23700 (= (apply!29 (+!44 lt!8681 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142)))) lt!8673) (apply!29 lt!8681 lt!8673))))

(declare-fun call!2027 () ListLongMap!563)

(declare-fun bm!2021 () Bool)

(declare-fun c!3096 () Bool)

(assert (=> bm!2021 (= call!2025 (+!44 (ite c!3096 call!2026 (ite c!3097 call!2021 call!2027)) (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun b!23701 () Bool)

(declare-fun Unit!543 () Unit!522)

(assert (=> b!23701 (= e!15357 Unit!543)))

(declare-fun b!23702 () Bool)

(declare-fun e!15359 () Bool)

(assert (=> b!23702 (= e!15366 e!15359)))

(declare-fun res!14533 () Bool)

(assert (=> b!23702 (= res!14533 call!2022)))

(assert (=> b!23702 (=> (not res!14533) (not e!15359))))

(declare-fun bm!2022 () Bool)

(assert (=> bm!2022 (= call!2027 call!2021)))

(declare-fun b!23703 () Bool)

(declare-fun res!14534 () Bool)

(assert (=> b!23703 (=> (not res!14534) (not e!15362))))

(declare-fun e!15360 () Bool)

(assert (=> b!23703 (= res!14534 e!15360)))

(declare-fun res!14530 () Bool)

(assert (=> b!23703 (=> res!14530 e!15360)))

(declare-fun e!15365 () Bool)

(assert (=> b!23703 (= res!14530 (not e!15365))))

(declare-fun res!14537 () Bool)

(assert (=> b!23703 (=> (not res!14537) (not e!15365))))

(assert (=> b!23703 (= res!14537 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23704 () Bool)

(declare-fun e!15358 () Bool)

(assert (=> b!23704 (= e!15360 e!15358)))

(declare-fun res!14531 () Bool)

(assert (=> b!23704 (=> (not res!14531) (not e!15358))))

(assert (=> b!23704 (= res!14531 (contains!229 lt!8672 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!23704 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23705 () Bool)

(assert (=> b!23705 (= e!15365 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!23706 () Bool)

(declare-fun e!15368 () ListLongMap!563)

(assert (=> b!23706 (= e!15368 call!2023)))

(declare-fun b!23707 () Bool)

(assert (=> b!23707 (= e!15361 (+!44 call!2025 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))

(declare-fun d!4041 () Bool)

(assert (=> d!4041 e!15362))

(declare-fun res!14536 () Bool)

(assert (=> d!4041 (=> (not res!14536) (not e!15362))))

(assert (=> d!4041 (= res!14536 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(declare-fun lt!8670 () ListLongMap!563)

(assert (=> d!4041 (= lt!8672 lt!8670)))

(declare-fun lt!8668 () Unit!522)

(assert (=> d!4041 (= lt!8668 e!15357)))

(declare-fun c!3094 () Bool)

(assert (=> d!4041 (= c!3094 e!15356)))

(declare-fun res!14538 () Bool)

(assert (=> d!4041 (=> (not res!14538) (not e!15356))))

(assert (=> d!4041 (= res!14538 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4041 (= lt!8670 e!15361)))

(assert (=> d!4041 (= c!3096 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4041 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4041 (= (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!8672)))

(declare-fun b!23697 () Bool)

(assert (=> b!23697 (= e!15358 (= (apply!29 lt!8672 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8342) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23697 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8342)))))

(assert (=> b!23697 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun bm!2023 () Bool)

(assert (=> bm!2023 (= call!2024 (contains!229 lt!8672 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23708 () Bool)

(declare-fun res!14532 () Bool)

(assert (=> b!23708 (=> (not res!14532) (not e!15362))))

(assert (=> b!23708 (= res!14532 e!15366)))

(declare-fun c!3093 () Bool)

(assert (=> b!23708 (= c!3093 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!23709 () Bool)

(assert (=> b!23709 (= e!15359 (= (apply!29 lt!8672 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!490 lt!8142))))))

(declare-fun b!23710 () Bool)

(assert (=> b!23710 (= e!15368 call!2027)))

(declare-fun b!23711 () Bool)

(declare-fun c!3095 () Bool)

(assert (=> b!23711 (= c!3095 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23711 (= e!15364 e!15368)))

(declare-fun bm!2024 () Bool)

(assert (=> bm!2024 (= call!2022 (contains!229 lt!8672 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4041 c!3096) b!23707))

(assert (= (and d!4041 (not c!3096)) b!23694))

(assert (= (and b!23694 c!3097) b!23691))

(assert (= (and b!23694 (not c!3097)) b!23711))

(assert (= (and b!23711 c!3095) b!23706))

(assert (= (and b!23711 (not c!3095)) b!23710))

(assert (= (or b!23706 b!23710) bm!2022))

(assert (= (or b!23691 bm!2022) bm!2020))

(assert (= (or b!23691 b!23706) bm!2019))

(assert (= (or b!23707 bm!2020) bm!2018))

(assert (= (or b!23707 bm!2019) bm!2021))

(assert (= (and d!4041 res!14538) b!23693))

(assert (= (and d!4041 c!3094) b!23700))

(assert (= (and d!4041 (not c!3094)) b!23701))

(assert (= (and d!4041 res!14536) b!23703))

(assert (= (and b!23703 res!14537) b!23705))

(assert (= (and b!23703 (not res!14530)) b!23704))

(assert (= (and b!23704 res!14531) b!23697))

(assert (= (and b!23703 res!14534) b!23708))

(assert (= (and b!23708 c!3093) b!23702))

(assert (= (and b!23708 (not c!3093)) b!23695))

(assert (= (and b!23702 res!14533) b!23709))

(assert (= (or b!23702 b!23695) bm!2024))

(assert (= (and b!23708 res!14532) b!23699))

(assert (= (and b!23699 c!3098) b!23696))

(assert (= (and b!23699 (not c!3098)) b!23698))

(assert (= (and b!23696 res!14535) b!23692))

(assert (= (or b!23696 b!23698) bm!2023))

(declare-fun b_lambda!1577 () Bool)

(assert (=> (not b_lambda!1577) (not b!23697)))

(assert (=> b!23697 t!3234))

(declare-fun b_and!1489 () Bool)

(assert (= b_and!1487 (and (=> t!3234 result!1095) b_and!1489)))

(declare-fun m!17311 () Bool)

(assert (=> b!23709 m!17311))

(declare-fun m!17313 () Bool)

(assert (=> bm!2021 m!17313))

(declare-fun m!17315 () Bool)

(assert (=> b!23697 m!17315))

(assert (=> b!23697 m!17315))

(assert (=> b!23697 m!17076))

(declare-fun m!17317 () Bool)

(assert (=> b!23697 m!17317))

(assert (=> b!23697 m!17080))

(assert (=> b!23697 m!17076))

(assert (=> b!23697 m!17080))

(declare-fun m!17319 () Bool)

(assert (=> b!23697 m!17319))

(declare-fun m!17321 () Bool)

(assert (=> bm!2023 m!17321))

(assert (=> b!23705 m!17080))

(assert (=> b!23705 m!17080))

(assert (=> b!23705 m!17086))

(declare-fun m!17323 () Bool)

(assert (=> bm!2018 m!17323))

(declare-fun m!17325 () Bool)

(assert (=> b!23700 m!17325))

(declare-fun m!17327 () Bool)

(assert (=> b!23700 m!17327))

(declare-fun m!17329 () Bool)

(assert (=> b!23700 m!17329))

(declare-fun m!17331 () Bool)

(assert (=> b!23700 m!17331))

(declare-fun m!17333 () Bool)

(assert (=> b!23700 m!17333))

(declare-fun m!17335 () Bool)

(assert (=> b!23700 m!17335))

(assert (=> b!23700 m!17325))

(declare-fun m!17337 () Bool)

(assert (=> b!23700 m!17337))

(declare-fun m!17339 () Bool)

(assert (=> b!23700 m!17339))

(declare-fun m!17341 () Bool)

(assert (=> b!23700 m!17341))

(declare-fun m!17343 () Bool)

(assert (=> b!23700 m!17343))

(declare-fun m!17345 () Bool)

(assert (=> b!23700 m!17345))

(assert (=> b!23700 m!17323))

(assert (=> b!23700 m!17080))

(declare-fun m!17347 () Bool)

(assert (=> b!23700 m!17347))

(assert (=> b!23700 m!17339))

(declare-fun m!17349 () Bool)

(assert (=> b!23700 m!17349))

(declare-fun m!17351 () Bool)

(assert (=> b!23700 m!17351))

(assert (=> b!23700 m!17329))

(assert (=> b!23700 m!17335))

(declare-fun m!17353 () Bool)

(assert (=> b!23700 m!17353))

(assert (=> b!23704 m!17080))

(assert (=> b!23704 m!17080))

(declare-fun m!17355 () Bool)

(assert (=> b!23704 m!17355))

(declare-fun m!17357 () Bool)

(assert (=> b!23692 m!17357))

(declare-fun m!17359 () Bool)

(assert (=> b!23707 m!17359))

(declare-fun m!17361 () Bool)

(assert (=> bm!2024 m!17361))

(assert (=> d!4041 m!16902))

(assert (=> b!23693 m!17080))

(assert (=> b!23693 m!17080))

(assert (=> b!23693 m!17086))

(assert (=> b!23342 d!4041))

(declare-fun d!4043 () Bool)

(declare-fun e!15371 () Bool)

(assert (=> d!4043 e!15371))

(declare-fun res!14541 () Bool)

(assert (=> d!4043 (=> (not res!14541) (not e!15371))))

(assert (=> d!4043 (= res!14541 (and (bvsge (index!2338 lt!8356) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8356) (size!693 (_keys!3163 (_2!490 lt!8142))))))))

(declare-fun lt!8685 () Unit!522)

(declare-fun choose!208 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) Int) Unit!522)

(assert (=> d!4043 (= lt!8685 (choose!208 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (index!2338 lt!8356) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4043 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4043 (= (lemmaValidKeyInArrayIsInListMap!10 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (index!2338 lt!8356) (defaultEntry!1742 (_2!490 lt!8142))) lt!8685)))

(declare-fun b!23714 () Bool)

(assert (=> b!23714 (= e!15371 (contains!229 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))

(assert (= (and d!4043 res!14541) b!23714))

(declare-fun m!17363 () Bool)

(assert (=> d!4043 m!17363))

(assert (=> d!4043 m!16902))

(assert (=> b!23714 m!16852))

(assert (=> b!23714 m!16854))

(assert (=> b!23714 m!16852))

(assert (=> b!23714 m!16854))

(assert (=> b!23714 m!16856))

(assert (=> b!23342 d!4043))

(declare-fun d!4045 () Bool)

(declare-fun e!15374 () Bool)

(assert (=> d!4045 e!15374))

(declare-fun res!14544 () Bool)

(assert (=> d!4045 (=> (not res!14544) (not e!15374))))

(assert (=> d!4045 (= res!14544 (and (bvsge (index!2338 lt!8356) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8356) (size!692 (_values!1728 (_2!490 lt!8142))))))))

(declare-fun lt!8688 () Unit!522)

(declare-fun choose!209 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) (_ BitVec 64) V!1187 Int) Unit!522)

(assert (=> d!4045 (= lt!8688 (choose!209 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (index!2338 lt!8356) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4045 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4045 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (index!2338 lt!8356) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))) lt!8688)))

(declare-fun b!23717 () Bool)

(assert (=> b!23717 (= e!15374 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))))))

(assert (= (and d!4045 res!14544) b!23717))

(declare-fun m!17365 () Bool)

(assert (=> d!4045 m!17365))

(assert (=> d!4045 m!16902))

(assert (=> b!23717 m!16844))

(assert (=> b!23717 m!16844))

(assert (=> b!23717 m!17212))

(assert (=> b!23717 m!16850))

(declare-fun m!17367 () Bool)

(assert (=> b!23717 m!17367))

(assert (=> b!23342 d!4045))

(declare-fun d!4047 () Bool)

(assert (=> d!4047 (= (inRange!0 (ite c!2994 (ite c!2993 (index!2338 lt!8319) (ite c!2999 (index!2337 lt!8321) (index!2340 lt!8321))) (ite c!2992 (index!2338 lt!8331) (ite c!2990 (index!2337 lt!8326) (index!2340 lt!8326)))) (mask!4729 lt!8141)) (and (bvsge (ite c!2994 (ite c!2993 (index!2338 lt!8319) (ite c!2999 (index!2337 lt!8321) (index!2340 lt!8321))) (ite c!2992 (index!2338 lt!8331) (ite c!2990 (index!2337 lt!8326) (index!2340 lt!8326)))) #b00000000000000000000000000000000) (bvslt (ite c!2994 (ite c!2993 (index!2338 lt!8319) (ite c!2999 (index!2337 lt!8321) (index!2340 lt!8321))) (ite c!2992 (index!2338 lt!8331) (ite c!2990 (index!2337 lt!8326) (index!2340 lt!8326)))) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(assert (=> bm!1919 d!4047))

(declare-fun d!4049 () Bool)

(declare-fun res!14545 () Bool)

(declare-fun e!15375 () Bool)

(assert (=> d!4049 (=> (not res!14545) (not e!15375))))

(assert (=> d!4049 (= res!14545 (simpleValid!20 (_2!490 lt!8361)))))

(assert (=> d!4049 (= (valid!121 (_2!490 lt!8361)) e!15375)))

(declare-fun b!23718 () Bool)

(declare-fun res!14546 () Bool)

(assert (=> b!23718 (=> (not res!14546) (not e!15375))))

(assert (=> b!23718 (= res!14546 (= (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8361)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))) (_size!149 (_2!490 lt!8361))))))

(declare-fun b!23719 () Bool)

(declare-fun res!14547 () Bool)

(assert (=> b!23719 (=> (not res!14547) (not e!15375))))

(assert (=> b!23719 (= res!14547 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361))))))

(declare-fun b!23720 () Bool)

(assert (=> b!23720 (= e!15375 (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8361)) #b00000000000000000000000000000000 Nil!562))))

(assert (= (and d!4049 res!14545) b!23718))

(assert (= (and b!23718 res!14546) b!23719))

(assert (= (and b!23719 res!14547) b!23720))

(declare-fun m!17369 () Bool)

(assert (=> d!4049 m!17369))

(declare-fun m!17371 () Bool)

(assert (=> b!23718 m!17371))

(declare-fun m!17373 () Bool)

(assert (=> b!23719 m!17373))

(declare-fun m!17375 () Bool)

(assert (=> b!23720 m!17375))

(assert (=> d!3967 d!4049))

(declare-fun d!4051 () Bool)

(declare-fun res!14548 () Bool)

(declare-fun e!15376 () Bool)

(assert (=> d!4051 (=> (not res!14548) (not e!15376))))

(assert (=> d!4051 (= res!14548 (simpleValid!20 (_2!490 lt!8142)))))

(assert (=> d!4051 (= (valid!121 (_2!490 lt!8142)) e!15376)))

(declare-fun b!23721 () Bool)

(declare-fun res!14549 () Bool)

(assert (=> b!23721 (=> (not res!14549) (not e!15376))))

(assert (=> b!23721 (= res!14549 (= (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8142)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (_size!149 (_2!490 lt!8142))))))

(declare-fun b!23722 () Bool)

(declare-fun res!14550 () Bool)

(assert (=> b!23722 (=> (not res!14550) (not e!15376))))

(assert (=> b!23722 (= res!14550 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!23723 () Bool)

(assert (=> b!23723 (= e!15376 (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8142)) #b00000000000000000000000000000000 Nil!562))))

(assert (= (and d!4051 res!14548) b!23721))

(assert (= (and b!23721 res!14549) b!23722))

(assert (= (and b!23722 res!14550) b!23723))

(declare-fun m!17377 () Bool)

(assert (=> d!4051 m!17377))

(declare-fun m!17379 () Bool)

(assert (=> b!23721 m!17379))

(declare-fun m!17381 () Bool)

(assert (=> b!23722 m!17381))

(declare-fun m!17383 () Bool)

(assert (=> b!23723 m!17383))

(assert (=> d!3967 d!4051))

(declare-fun d!4053 () Bool)

(declare-fun e!15378 () Bool)

(assert (=> d!4053 e!15378))

(declare-fun res!14551 () Bool)

(assert (=> d!4053 (=> res!14551 e!15378)))

(declare-fun lt!8690 () Bool)

(assert (=> d!4053 (= res!14551 (not lt!8690))))

(declare-fun lt!8691 () Bool)

(assert (=> d!4053 (= lt!8690 lt!8691)))

(declare-fun lt!8689 () Unit!522)

(declare-fun e!15377 () Unit!522)

(assert (=> d!4053 (= lt!8689 e!15377)))

(declare-fun c!3099 () Bool)

(assert (=> d!4053 (= c!3099 lt!8691)))

(assert (=> d!4053 (= lt!8691 (containsKey!25 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4053 (= (contains!229 e!15136 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!8690)))

(declare-fun b!23724 () Bool)

(declare-fun lt!8692 () Unit!522)

(assert (=> b!23724 (= e!15377 lt!8692)))

(assert (=> b!23724 (= lt!8692 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23724 (isDefined!23 (getValueByKey!61 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23725 () Bool)

(declare-fun Unit!544 () Unit!522)

(assert (=> b!23725 (= e!15377 Unit!544)))

(declare-fun b!23726 () Bool)

(assert (=> b!23726 (= e!15378 (isDefined!23 (getValueByKey!61 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4053 c!3099) b!23724))

(assert (= (and d!4053 (not c!3099)) b!23725))

(assert (= (and d!4053 (not res!14551)) b!23726))

(declare-fun m!17385 () Bool)

(assert (=> d!4053 m!17385))

(declare-fun m!17387 () Bool)

(assert (=> b!23724 m!17387))

(declare-fun m!17389 () Bool)

(assert (=> b!23724 m!17389))

(assert (=> b!23724 m!17389))

(declare-fun m!17391 () Bool)

(assert (=> b!23724 m!17391))

(assert (=> b!23726 m!17389))

(assert (=> b!23726 m!17389))

(assert (=> b!23726 m!17391))

(assert (=> bm!1931 d!4053))

(declare-fun b!23727 () Bool)

(declare-fun e!15387 () ListLongMap!563)

(declare-fun call!2030 () ListLongMap!563)

(assert (=> b!23727 (= e!15387 call!2030)))

(declare-fun b!23728 () Bool)

(declare-fun e!15390 () Bool)

(declare-fun lt!8704 () ListLongMap!563)

(assert (=> b!23728 (= e!15390 (= (apply!29 lt!8704 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!490 lt!8142))))))

(declare-fun b!23729 () Bool)

(declare-fun e!15379 () Bool)

(assert (=> b!23729 (= e!15379 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun bm!2025 () Bool)

(declare-fun call!2033 () ListLongMap!563)

(assert (=> bm!2025 (= call!2033 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!23730 () Bool)

(declare-fun e!15384 () ListLongMap!563)

(assert (=> b!23730 (= e!15384 e!15387)))

(declare-fun c!3104 () Bool)

(assert (=> b!23730 (= c!3104 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23731 () Bool)

(declare-fun e!15389 () Bool)

(declare-fun call!2029 () Bool)

(assert (=> b!23731 (= e!15389 (not call!2029))))

(declare-fun b!23732 () Bool)

(declare-fun e!15386 () Bool)

(assert (=> b!23732 (= e!15386 e!15390)))

(declare-fun res!14557 () Bool)

(declare-fun call!2031 () Bool)

(assert (=> b!23732 (= res!14557 call!2031)))

(assert (=> b!23732 (=> (not res!14557) (not e!15390))))

(declare-fun bm!2026 () Bool)

(declare-fun call!2032 () ListLongMap!563)

(assert (=> bm!2026 (= call!2030 call!2032)))

(declare-fun b!23734 () Bool)

(assert (=> b!23734 (= e!15386 (not call!2031))))

(declare-fun bm!2027 () Bool)

(declare-fun call!2028 () ListLongMap!563)

(assert (=> bm!2027 (= call!2028 call!2033)))

(declare-fun b!23735 () Bool)

(declare-fun e!15385 () Bool)

(assert (=> b!23735 (= e!15385 e!15386)))

(declare-fun c!3105 () Bool)

(assert (=> b!23735 (= c!3105 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23736 () Bool)

(declare-fun e!15380 () Unit!522)

(declare-fun lt!8693 () Unit!522)

(assert (=> b!23736 (= e!15380 lt!8693)))

(declare-fun lt!8709 () ListLongMap!563)

(assert (=> b!23736 (= lt!8709 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8712 () (_ BitVec 64))

(assert (=> b!23736 (= lt!8712 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8707 () (_ BitVec 64))

(assert (=> b!23736 (= lt!8707 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8697 () Unit!522)

(assert (=> b!23736 (= lt!8697 (addStillContains!14 lt!8709 lt!8712 (zeroValue!1665 (_2!490 lt!8142)) lt!8707))))

(assert (=> b!23736 (contains!229 (+!44 lt!8709 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142)))) lt!8707)))

(declare-fun lt!8698 () Unit!522)

(assert (=> b!23736 (= lt!8698 lt!8697)))

(declare-fun lt!8710 () ListLongMap!563)

(assert (=> b!23736 (= lt!8710 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8696 () (_ BitVec 64))

(assert (=> b!23736 (= lt!8696 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8694 () (_ BitVec 64))

(assert (=> b!23736 (= lt!8694 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8703 () Unit!522)

(assert (=> b!23736 (= lt!8703 (addApplyDifferent!14 lt!8710 lt!8696 (minValue!1665 (_2!490 lt!8142)) lt!8694))))

(assert (=> b!23736 (= (apply!29 (+!44 lt!8710 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142)))) lt!8694) (apply!29 lt!8710 lt!8694))))

(declare-fun lt!8701 () Unit!522)

(assert (=> b!23736 (= lt!8701 lt!8703)))

(declare-fun lt!8699 () ListLongMap!563)

(assert (=> b!23736 (= lt!8699 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8714 () (_ BitVec 64))

(assert (=> b!23736 (= lt!8714 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8706 () (_ BitVec 64))

(assert (=> b!23736 (= lt!8706 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8695 () Unit!522)

(assert (=> b!23736 (= lt!8695 (addApplyDifferent!14 lt!8699 lt!8714 (zeroValue!1665 (_2!490 lt!8142)) lt!8706))))

(assert (=> b!23736 (= (apply!29 (+!44 lt!8699 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142)))) lt!8706) (apply!29 lt!8699 lt!8706))))

(declare-fun lt!8708 () Unit!522)

(assert (=> b!23736 (= lt!8708 lt!8695)))

(declare-fun lt!8713 () ListLongMap!563)

(assert (=> b!23736 (= lt!8713 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8711 () (_ BitVec 64))

(assert (=> b!23736 (= lt!8711 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8705 () (_ BitVec 64))

(assert (=> b!23736 (= lt!8705 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(assert (=> b!23736 (= lt!8693 (addApplyDifferent!14 lt!8713 lt!8711 (minValue!1665 (_2!490 lt!8142)) lt!8705))))

(assert (=> b!23736 (= (apply!29 (+!44 lt!8713 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142)))) lt!8705) (apply!29 lt!8713 lt!8705))))

(declare-fun call!2034 () ListLongMap!563)

(declare-fun c!3103 () Bool)

(declare-fun bm!2028 () Bool)

(assert (=> bm!2028 (= call!2032 (+!44 (ite c!3103 call!2033 (ite c!3104 call!2028 call!2034)) (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun b!23737 () Bool)

(declare-fun Unit!545 () Unit!522)

(assert (=> b!23737 (= e!15380 Unit!545)))

(declare-fun b!23738 () Bool)

(declare-fun e!15382 () Bool)

(assert (=> b!23738 (= e!15389 e!15382)))

(declare-fun res!14555 () Bool)

(assert (=> b!23738 (= res!14555 call!2029)))

(assert (=> b!23738 (=> (not res!14555) (not e!15382))))

(declare-fun bm!2029 () Bool)

(assert (=> bm!2029 (= call!2034 call!2028)))

(declare-fun b!23739 () Bool)

(declare-fun res!14556 () Bool)

(assert (=> b!23739 (=> (not res!14556) (not e!15385))))

(declare-fun e!15383 () Bool)

(assert (=> b!23739 (= res!14556 e!15383)))

(declare-fun res!14552 () Bool)

(assert (=> b!23739 (=> res!14552 e!15383)))

(declare-fun e!15388 () Bool)

(assert (=> b!23739 (= res!14552 (not e!15388))))

(declare-fun res!14559 () Bool)

(assert (=> b!23739 (=> (not res!14559) (not e!15388))))

(assert (=> b!23739 (= res!14559 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23740 () Bool)

(declare-fun e!15381 () Bool)

(assert (=> b!23740 (= e!15383 e!15381)))

(declare-fun res!14553 () Bool)

(assert (=> b!23740 (=> (not res!14553) (not e!15381))))

(assert (=> b!23740 (= res!14553 (contains!229 lt!8704 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!23740 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23741 () Bool)

(assert (=> b!23741 (= e!15388 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!23742 () Bool)

(declare-fun e!15391 () ListLongMap!563)

(assert (=> b!23742 (= e!15391 call!2030)))

(declare-fun b!23743 () Bool)

(assert (=> b!23743 (= e!15384 (+!44 call!2032 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))

(declare-fun d!4055 () Bool)

(assert (=> d!4055 e!15385))

(declare-fun res!14558 () Bool)

(assert (=> d!4055 (=> (not res!14558) (not e!15385))))

(assert (=> d!4055 (= res!14558 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(declare-fun lt!8702 () ListLongMap!563)

(assert (=> d!4055 (= lt!8704 lt!8702)))

(declare-fun lt!8700 () Unit!522)

(assert (=> d!4055 (= lt!8700 e!15380)))

(declare-fun c!3101 () Bool)

(assert (=> d!4055 (= c!3101 e!15379)))

(declare-fun res!14560 () Bool)

(assert (=> d!4055 (=> (not res!14560) (not e!15379))))

(assert (=> d!4055 (= res!14560 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4055 (= lt!8702 e!15384)))

(assert (=> d!4055 (= c!3103 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4055 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4055 (= (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!8704)))

(declare-fun b!23733 () Bool)

(assert (=> b!23733 (= e!15381 (= (apply!29 lt!8704 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23733 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!490 lt!8142)))))))

(assert (=> b!23733 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun bm!2030 () Bool)

(assert (=> bm!2030 (= call!2031 (contains!229 lt!8704 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23744 () Bool)

(declare-fun res!14554 () Bool)

(assert (=> b!23744 (=> (not res!14554) (not e!15385))))

(assert (=> b!23744 (= res!14554 e!15389)))

(declare-fun c!3100 () Bool)

(assert (=> b!23744 (= c!3100 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!23745 () Bool)

(assert (=> b!23745 (= e!15382 (= (apply!29 lt!8704 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!490 lt!8142))))))

(declare-fun b!23746 () Bool)

(assert (=> b!23746 (= e!15391 call!2034)))

(declare-fun b!23747 () Bool)

(declare-fun c!3102 () Bool)

(assert (=> b!23747 (= c!3102 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23747 (= e!15387 e!15391)))

(declare-fun bm!2031 () Bool)

(assert (=> bm!2031 (= call!2029 (contains!229 lt!8704 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4055 c!3103) b!23743))

(assert (= (and d!4055 (not c!3103)) b!23730))

(assert (= (and b!23730 c!3104) b!23727))

(assert (= (and b!23730 (not c!3104)) b!23747))

(assert (= (and b!23747 c!3102) b!23742))

(assert (= (and b!23747 (not c!3102)) b!23746))

(assert (= (or b!23742 b!23746) bm!2029))

(assert (= (or b!23727 bm!2029) bm!2027))

(assert (= (or b!23727 b!23742) bm!2026))

(assert (= (or b!23743 bm!2027) bm!2025))

(assert (= (or b!23743 bm!2026) bm!2028))

(assert (= (and d!4055 res!14560) b!23729))

(assert (= (and d!4055 c!3101) b!23736))

(assert (= (and d!4055 (not c!3101)) b!23737))

(assert (= (and d!4055 res!14558) b!23739))

(assert (= (and b!23739 res!14559) b!23741))

(assert (= (and b!23739 (not res!14552)) b!23740))

(assert (= (and b!23740 res!14553) b!23733))

(assert (= (and b!23739 res!14556) b!23744))

(assert (= (and b!23744 c!3100) b!23738))

(assert (= (and b!23744 (not c!3100)) b!23731))

(assert (= (and b!23738 res!14555) b!23745))

(assert (= (or b!23738 b!23731) bm!2031))

(assert (= (and b!23744 res!14554) b!23735))

(assert (= (and b!23735 c!3105) b!23732))

(assert (= (and b!23735 (not c!3105)) b!23734))

(assert (= (and b!23732 res!14557) b!23728))

(assert (= (or b!23732 b!23734) bm!2030))

(declare-fun b_lambda!1579 () Bool)

(assert (=> (not b_lambda!1579) (not b!23733)))

(assert (=> b!23733 t!3234))

(declare-fun b_and!1491 () Bool)

(assert (= b_and!1489 (and (=> t!3234 result!1095) b_and!1491)))

(declare-fun m!17393 () Bool)

(assert (=> b!23745 m!17393))

(declare-fun m!17395 () Bool)

(assert (=> bm!2028 m!17395))

(declare-fun m!17397 () Bool)

(assert (=> b!23733 m!17397))

(assert (=> b!23733 m!17397))

(assert (=> b!23733 m!17076))

(declare-fun m!17399 () Bool)

(assert (=> b!23733 m!17399))

(assert (=> b!23733 m!17080))

(assert (=> b!23733 m!17076))

(assert (=> b!23733 m!17080))

(declare-fun m!17401 () Bool)

(assert (=> b!23733 m!17401))

(declare-fun m!17403 () Bool)

(assert (=> bm!2030 m!17403))

(assert (=> b!23741 m!17080))

(assert (=> b!23741 m!17080))

(assert (=> b!23741 m!17086))

(declare-fun m!17405 () Bool)

(assert (=> bm!2025 m!17405))

(declare-fun m!17407 () Bool)

(assert (=> b!23736 m!17407))

(declare-fun m!17409 () Bool)

(assert (=> b!23736 m!17409))

(declare-fun m!17411 () Bool)

(assert (=> b!23736 m!17411))

(declare-fun m!17413 () Bool)

(assert (=> b!23736 m!17413))

(declare-fun m!17415 () Bool)

(assert (=> b!23736 m!17415))

(declare-fun m!17417 () Bool)

(assert (=> b!23736 m!17417))

(assert (=> b!23736 m!17407))

(declare-fun m!17419 () Bool)

(assert (=> b!23736 m!17419))

(declare-fun m!17421 () Bool)

(assert (=> b!23736 m!17421))

(declare-fun m!17423 () Bool)

(assert (=> b!23736 m!17423))

(declare-fun m!17425 () Bool)

(assert (=> b!23736 m!17425))

(declare-fun m!17427 () Bool)

(assert (=> b!23736 m!17427))

(assert (=> b!23736 m!17405))

(assert (=> b!23736 m!17080))

(declare-fun m!17429 () Bool)

(assert (=> b!23736 m!17429))

(assert (=> b!23736 m!17421))

(declare-fun m!17431 () Bool)

(assert (=> b!23736 m!17431))

(declare-fun m!17433 () Bool)

(assert (=> b!23736 m!17433))

(assert (=> b!23736 m!17411))

(assert (=> b!23736 m!17417))

(declare-fun m!17435 () Bool)

(assert (=> b!23736 m!17435))

(assert (=> b!23740 m!17080))

(assert (=> b!23740 m!17080))

(declare-fun m!17437 () Bool)

(assert (=> b!23740 m!17437))

(declare-fun m!17439 () Bool)

(assert (=> b!23728 m!17439))

(declare-fun m!17441 () Bool)

(assert (=> b!23743 m!17441))

(declare-fun m!17443 () Bool)

(assert (=> bm!2031 m!17443))

(assert (=> d!4055 m!16902))

(assert (=> b!23729 m!17080))

(assert (=> b!23729 m!17080))

(assert (=> b!23729 m!17086))

(assert (=> bm!1947 d!4055))

(assert (=> bm!1920 d!3975))

(declare-fun d!4057 () Bool)

(assert (=> d!4057 (= (head!828 (toList!297 (map!408 lt!8245))) (h!1126 (toList!297 (map!408 lt!8245))))))

(assert (=> b!23202 d!4057))

(assert (=> b!23202 d!4013))

(declare-fun d!4059 () Bool)

(declare-fun e!15394 () Bool)

(assert (=> d!4059 e!15394))

(declare-fun c!3108 () Bool)

(assert (=> d!4059 (= c!3108 (and (not (= (_1!495 lt!8244) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (_1!495 lt!8244) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!8717 () Unit!522)

(declare-fun choose!210 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!522)

(assert (=> d!4059 (= lt!8717 (choose!210 lt!8235 (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8232 (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (_1!495 lt!8244) (defaultEntry!1742 (v!1602 (underlying!115 thiss!938)))))))

(assert (=> d!4059 (validMask!0 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(assert (=> d!4059 (= (lemmaKeyInListMapIsInArray!97 lt!8235 (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8232 (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (_1!495 lt!8244) (defaultEntry!1742 (v!1602 (underlying!115 thiss!938)))) lt!8717)))

(declare-fun b!23752 () Bool)

(assert (=> b!23752 (= e!15394 (arrayContainsKey!0 lt!8235 (_1!495 lt!8244) #b00000000000000000000000000000000))))

(declare-fun b!23753 () Bool)

(assert (=> b!23753 (= e!15394 (ite (= (_1!495 lt!8244) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand lt!8232 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8232 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!4059 c!3108) b!23752))

(assert (= (and d!4059 (not c!3108)) b!23753))

(assert (=> d!4059 m!16680))

(assert (=> d!4059 m!16738))

(assert (=> d!4059 m!16738))

(declare-fun m!17445 () Bool)

(assert (=> d!4059 m!17445))

(assert (=> d!4059 m!16680))

(assert (=> d!4059 m!16752))

(assert (=> b!23752 m!16764))

(assert (=> b!23202 d!4059))

(declare-fun d!4061 () Bool)

(declare-fun lt!8720 () (_ BitVec 32))

(assert (=> d!4061 (and (or (bvslt lt!8720 #b00000000000000000000000000000000) (bvsge lt!8720 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (and (bvsge lt!8720 #b00000000000000000000000000000000) (bvslt lt!8720 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))) (bvsge lt!8720 #b00000000000000000000000000000000) (bvslt lt!8720 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (= (select (arr!597 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) lt!8720) (_1!495 lt!8244)))))

(declare-fun e!15397 () (_ BitVec 32))

(assert (=> d!4061 (= lt!8720 e!15397)))

(declare-fun c!3111 () Bool)

(assert (=> d!4061 (= c!3111 (= (select (arr!597 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) #b00000000000000000000000000000000) (_1!495 lt!8244)))))

(assert (=> d!4061 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (bvslt (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) #b01111111111111111111111111111111))))

(assert (=> d!4061 (= (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!495 lt!8244) #b00000000000000000000000000000000) lt!8720)))

(declare-fun b!23758 () Bool)

(assert (=> b!23758 (= e!15397 #b00000000000000000000000000000000)))

(declare-fun b!23759 () Bool)

(assert (=> b!23759 (= e!15397 (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!495 lt!8244) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4061 c!3111) b!23758))

(assert (= (and d!4061 (not c!3111)) b!23759))

(declare-fun m!17447 () Bool)

(assert (=> d!4061 m!17447))

(declare-fun m!17449 () Bool)

(assert (=> d!4061 m!17449))

(declare-fun m!17451 () Bool)

(assert (=> b!23759 m!17451))

(assert (=> b!23202 d!4061))

(declare-fun b!23760 () Bool)

(declare-fun e!15405 () Unit!522)

(declare-fun lt!8742 () Unit!522)

(assert (=> b!23760 (= e!15405 lt!8742)))

(assert (=> b!23760 (= lt!8742 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8722 () SeekEntryResult!54)

(declare-fun call!2035 () SeekEntryResult!54)

(assert (=> b!23760 (= lt!8722 call!2035)))

(declare-fun c!3115 () Bool)

(assert (=> b!23760 (= c!3115 ((_ is MissingZero!54) lt!8722))))

(declare-fun e!15401 () Bool)

(assert (=> b!23760 e!15401))

(declare-fun b!23761 () Bool)

(declare-fun res!14564 () Bool)

(assert (=> b!23761 (= res!14564 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2340 lt!8722)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15400 () Bool)

(assert (=> b!23761 (=> (not res!14564) (not e!15400))))

(declare-fun b!23762 () Bool)

(declare-fun e!15402 () Bool)

(assert (=> b!23762 (= e!15402 e!15400)))

(declare-fun res!14561 () Bool)

(declare-fun call!2036 () Bool)

(assert (=> b!23762 (= res!14561 call!2036)))

(assert (=> b!23762 (=> (not res!14561) (not e!15400))))

(declare-fun c!3113 () Bool)

(declare-fun lt!8735 () SeekEntryResult!54)

(declare-fun bm!2032 () Bool)

(declare-fun call!2037 () Bool)

(assert (=> bm!2032 (= call!2037 (inRange!0 (ite c!3113 (index!2338 lt!8735) (ite c!3115 (index!2337 lt!8722) (index!2340 lt!8722))) (mask!4729 (_2!490 lt!8142))))))

(declare-fun d!4063 () Bool)

(declare-fun e!15399 () Bool)

(assert (=> d!4063 e!15399))

(declare-fun res!14565 () Bool)

(assert (=> d!4063 (=> (not res!14565) (not e!15399))))

(declare-fun lt!8736 () tuple2!962)

(assert (=> d!4063 (= res!14565 (_1!490 lt!8736))))

(assert (=> d!4063 (= lt!8736 (tuple2!963 true (LongMapFixedSize!209 (defaultEntry!1742 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (bvadd (_size!149 (_2!490 lt!8142)) #b00000000000000000000000000000001) (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (_vacant!149 (_2!490 lt!8142)))))))

(declare-fun lt!8734 () Unit!522)

(declare-fun lt!8723 () Unit!522)

(assert (=> d!4063 (= lt!8734 lt!8723)))

(declare-fun lt!8739 () array!1263)

(declare-fun lt!8724 () array!1261)

(assert (=> d!4063 (contains!229 (getCurrentListMap!127 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (select (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))))))

(assert (=> d!4063 (= lt!8723 (lemmaValidKeyInArrayIsInListMap!10 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4063 (= lt!8724 (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))))

(assert (=> d!4063 (= lt!8739 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun lt!8741 () Unit!522)

(declare-fun lt!8730 () Unit!522)

(assert (=> d!4063 (= lt!8741 lt!8730)))

(declare-fun lt!8748 () array!1263)

(assert (=> d!4063 (= (arrayCountValidKeys!0 lt!8748 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (bvadd (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(assert (=> d!4063 (= lt!8730 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!8748 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))))))

(assert (=> d!4063 (= lt!8748 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun lt!8740 () Unit!522)

(declare-fun lt!8733 () Unit!522)

(assert (=> d!4063 (= lt!8740 lt!8733)))

(declare-fun lt!8729 () array!1263)

(assert (=> d!4063 (arrayContainsKey!0 lt!8729 #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!4063 (= lt!8733 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8729 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))))))

(assert (=> d!4063 (= lt!8729 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun lt!8743 () Unit!522)

(declare-fun lt!8728 () Unit!522)

(assert (=> d!4063 (= lt!8743 lt!8728)))

(assert (=> d!4063 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (getCurrentListMap!127 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4063 (= lt!8728 (lemmaAddValidKeyToArrayThenAddPairToListMap!3 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8721 () Unit!522)

(declare-fun lt!8732 () Unit!522)

(assert (=> d!4063 (= lt!8721 lt!8732)))

(assert (=> d!4063 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4063 (= lt!8732 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun lt!8749 () Unit!522)

(declare-fun lt!8727 () Unit!522)

(assert (=> d!4063 (= lt!8749 lt!8727)))

(assert (=> d!4063 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (bvadd (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8142)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) #b00000000000000000000000000000001))))

(assert (=> d!4063 (= lt!8727 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3163 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!8737 () Unit!522)

(declare-fun lt!8746 () Unit!522)

(assert (=> d!4063 (= lt!8737 lt!8746)))

(declare-fun lt!8725 () (_ BitVec 32))

(declare-fun lt!8744 () List!565)

(assert (=> d!4063 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) lt!8725 lt!8744)))

(assert (=> d!4063 (= lt!8746 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) lt!8725 lt!8744))))

(assert (=> d!4063 (= lt!8744 Nil!562)))

(assert (=> d!4063 (= lt!8725 #b00000000000000000000000000000000)))

(declare-fun lt!8726 () Unit!522)

(declare-fun e!15398 () Unit!522)

(assert (=> d!4063 (= lt!8726 e!15398)))

(declare-fun c!3114 () Bool)

(assert (=> d!4063 (= c!3114 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun lt!8750 () Unit!522)

(assert (=> d!4063 (= lt!8750 e!15405)))

(assert (=> d!4063 (= c!3113 (contains!229 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4063 (valid!121 (_2!490 lt!8142))))

(assert (=> d!4063 (= (updateHelperNewKey!10 (_2!490 lt!8142) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))) lt!8736)))

(declare-fun b!23763 () Bool)

(declare-fun e!15404 () Bool)

(assert (=> b!23763 (= e!15404 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8735)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23764 () Bool)

(declare-fun Unit!546 () Unit!522)

(assert (=> b!23764 (= e!15398 Unit!546)))

(declare-fun b!23765 () Bool)

(declare-fun res!14562 () Bool)

(assert (=> b!23765 (=> (not res!14562) (not e!15399))))

(assert (=> b!23765 (= res!14562 (contains!229 (map!408 (_2!490 lt!8736)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23766 () Bool)

(assert (=> b!23766 (= e!15402 ((_ is Undefined!54) lt!8722))))

(declare-fun b!23767 () Bool)

(declare-fun res!14566 () Bool)

(declare-fun e!15403 () Bool)

(assert (=> b!23767 (=> (not res!14566) (not e!15403))))

(assert (=> b!23767 (= res!14566 call!2036)))

(assert (=> b!23767 (= e!15401 e!15403)))

(declare-fun b!23768 () Bool)

(declare-fun c!3112 () Bool)

(assert (=> b!23768 (= c!3112 ((_ is MissingVacant!54) lt!8722))))

(assert (=> b!23768 (= e!15401 e!15402)))

(declare-fun b!23769 () Bool)

(declare-fun Unit!547 () Unit!522)

(assert (=> b!23769 (= e!15398 Unit!547)))

(declare-fun lt!8745 () Unit!522)

(assert (=> b!23769 (= lt!8745 (lemmaArrayContainsKeyThenInListMap!3 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> b!23769 (contains!229 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8731 () Unit!522)

(assert (=> b!23769 (= lt!8731 lt!8745)))

(assert (=> b!23769 false))

(declare-fun b!23770 () Bool)

(declare-fun Unit!548 () Unit!522)

(assert (=> b!23770 (= e!15405 Unit!548)))

(declare-fun lt!8738 () Unit!522)

(assert (=> b!23770 (= lt!8738 (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> b!23770 (= lt!8735 call!2035)))

(declare-fun res!14569 () Bool)

(assert (=> b!23770 (= res!14569 ((_ is Found!54) lt!8735))))

(assert (=> b!23770 (=> (not res!14569) (not e!15404))))

(assert (=> b!23770 e!15404))

(declare-fun lt!8747 () Unit!522)

(assert (=> b!23770 (= lt!8747 lt!8738)))

(assert (=> b!23770 false))

(declare-fun bm!2033 () Bool)

(declare-fun call!2038 () Bool)

(assert (=> bm!2033 (= call!2038 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun b!23771 () Bool)

(assert (=> b!23771 (= e!15400 (not call!2038))))

(declare-fun bm!2034 () Bool)

(assert (=> bm!2034 (= call!2036 call!2037)))

(declare-fun bm!2035 () Bool)

(assert (=> bm!2035 (= call!2035 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!23772 () Bool)

(declare-fun res!14567 () Bool)

(assert (=> b!23772 (= res!14567 call!2037)))

(assert (=> b!23772 (=> (not res!14567) (not e!15404))))

(declare-fun b!23773 () Bool)

(declare-fun res!14568 () Bool)

(assert (=> b!23773 (=> (not res!14568) (not e!15403))))

(assert (=> b!23773 (= res!14568 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2337 lt!8722)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23774 () Bool)

(assert (=> b!23774 (= e!15399 (= (map!408 (_2!490 lt!8736)) (+!44 (map!408 (_2!490 lt!8142)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!23775 () Bool)

(declare-fun res!14563 () Bool)

(assert (=> b!23775 (=> (not res!14563) (not e!15399))))

(assert (=> b!23775 (= res!14563 (valid!121 (_2!490 lt!8736)))))

(declare-fun b!23776 () Bool)

(assert (=> b!23776 (= e!15403 (not call!2038))))

(assert (= (and d!4063 c!3113) b!23770))

(assert (= (and d!4063 (not c!3113)) b!23760))

(assert (= (and b!23770 res!14569) b!23772))

(assert (= (and b!23772 res!14567) b!23763))

(assert (= (and b!23760 c!3115) b!23767))

(assert (= (and b!23760 (not c!3115)) b!23768))

(assert (= (and b!23767 res!14566) b!23773))

(assert (= (and b!23773 res!14568) b!23776))

(assert (= (and b!23768 c!3112) b!23762))

(assert (= (and b!23768 (not c!3112)) b!23766))

(assert (= (and b!23762 res!14561) b!23761))

(assert (= (and b!23761 res!14564) b!23771))

(assert (= (or b!23767 b!23762) bm!2034))

(assert (= (or b!23776 b!23771) bm!2033))

(assert (= (or b!23772 bm!2034) bm!2032))

(assert (= (or b!23770 b!23760) bm!2035))

(assert (= (and d!4063 c!3114) b!23769))

(assert (= (and d!4063 (not c!3114)) b!23764))

(assert (= (and d!4063 res!14565) b!23775))

(assert (= (and b!23775 res!14563) b!23765))

(assert (= (and b!23765 res!14562) b!23774))

(assert (=> b!23770 m!16880))

(assert (=> bm!2035 m!16834))

(declare-fun m!17453 () Bool)

(assert (=> b!23774 m!17453))

(assert (=> b!23774 m!16832))

(assert (=> b!23774 m!16832))

(declare-fun m!17455 () Bool)

(assert (=> b!23774 m!17455))

(assert (=> b!23760 m!16836))

(assert (=> b!23765 m!17453))

(assert (=> b!23765 m!17453))

(declare-fun m!17457 () Bool)

(assert (=> b!23765 m!17457))

(declare-fun m!17459 () Bool)

(assert (=> b!23763 m!17459))

(declare-fun m!17461 () Bool)

(assert (=> b!23761 m!17461))

(declare-fun m!17463 () Bool)

(assert (=> b!23769 m!17463))

(assert (=> b!23769 m!16844))

(assert (=> b!23769 m!16844))

(declare-fun m!17465 () Bool)

(assert (=> b!23769 m!17465))

(declare-fun m!17467 () Bool)

(assert (=> d!4063 m!17467))

(assert (=> d!4063 m!16842))

(declare-fun m!17469 () Bool)

(assert (=> d!4063 m!17469))

(declare-fun m!17471 () Bool)

(assert (=> d!4063 m!17471))

(declare-fun m!17473 () Bool)

(assert (=> d!4063 m!17473))

(assert (=> d!4063 m!16844))

(assert (=> d!4063 m!17212))

(declare-fun m!17475 () Bool)

(assert (=> d!4063 m!17475))

(declare-fun m!17477 () Bool)

(assert (=> d!4063 m!17477))

(declare-fun m!17479 () Bool)

(assert (=> d!4063 m!17479))

(declare-fun m!17481 () Bool)

(assert (=> d!4063 m!17481))

(declare-fun m!17483 () Bool)

(assert (=> d!4063 m!17483))

(declare-fun m!17485 () Bool)

(assert (=> d!4063 m!17485))

(assert (=> d!4063 m!16884))

(declare-fun m!17487 () Bool)

(assert (=> d!4063 m!17487))

(declare-fun m!17489 () Bool)

(assert (=> d!4063 m!17489))

(declare-fun m!17491 () Bool)

(assert (=> d!4063 m!17491))

(declare-fun m!17493 () Bool)

(assert (=> d!4063 m!17493))

(declare-fun m!17495 () Bool)

(assert (=> d!4063 m!17495))

(assert (=> d!4063 m!16844))

(assert (=> d!4063 m!16844))

(assert (=> d!4063 m!17465))

(declare-fun m!17497 () Bool)

(assert (=> d!4063 m!17497))

(assert (=> d!4063 m!17379))

(declare-fun m!17499 () Bool)

(assert (=> d!4063 m!17499))

(assert (=> d!4063 m!17467))

(assert (=> d!4063 m!17493))

(declare-fun m!17501 () Bool)

(assert (=> d!4063 m!17501))

(declare-fun m!17503 () Bool)

(assert (=> b!23773 m!17503))

(declare-fun m!17505 () Bool)

(assert (=> bm!2032 m!17505))

(declare-fun m!17507 () Bool)

(assert (=> b!23775 m!17507))

(assert (=> bm!2033 m!16842))

(assert (=> bm!1940 d!4063))

(declare-fun d!4065 () Bool)

(assert (=> d!4065 (= (map!408 (_2!490 lt!8334)) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8334)) (_values!1728 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334)) (extraKeys!1640 (_2!490 lt!8334)) (zeroValue!1665 (_2!490 lt!8334)) (minValue!1665 (_2!490 lt!8334)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8334))))))

(declare-fun bs!958 () Bool)

(assert (= bs!958 d!4065))

(declare-fun m!17509 () Bool)

(assert (=> bs!958 m!17509))

(assert (=> bm!1909 d!4065))

(declare-fun d!4067 () Bool)

(declare-fun res!14570 () Bool)

(declare-fun e!15406 () Bool)

(assert (=> d!4067 (=> res!14570 e!15406)))

(assert (=> d!4067 (= res!14570 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4067 (= (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000) e!15406)))

(declare-fun b!23777 () Bool)

(declare-fun e!15407 () Bool)

(assert (=> b!23777 (= e!15406 e!15407)))

(declare-fun res!14571 () Bool)

(assert (=> b!23777 (=> (not res!14571) (not e!15407))))

(assert (=> b!23777 (= res!14571 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23778 () Bool)

(assert (=> b!23778 (= e!15407 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4067 (not res!14570)) b!23777))

(assert (= (and b!23777 res!14571) b!23778))

(assert (=> d!4067 m!17080))

(declare-fun m!17511 () Bool)

(assert (=> b!23778 m!17511))

(assert (=> bm!1934 d!4067))

(declare-fun d!4069 () Bool)

(declare-fun e!15409 () Bool)

(assert (=> d!4069 e!15409))

(declare-fun res!14572 () Bool)

(assert (=> d!4069 (=> res!14572 e!15409)))

(declare-fun lt!8752 () Bool)

(assert (=> d!4069 (= res!14572 (not lt!8752))))

(declare-fun lt!8753 () Bool)

(assert (=> d!4069 (= lt!8752 lt!8753)))

(declare-fun lt!8751 () Unit!522)

(declare-fun e!15408 () Unit!522)

(assert (=> d!4069 (= lt!8751 e!15408)))

(declare-fun c!3116 () Bool)

(assert (=> d!4069 (= c!3116 lt!8753)))

(assert (=> d!4069 (= lt!8753 (containsKey!25 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))

(assert (=> d!4069 (= (contains!229 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))) lt!8752)))

(declare-fun b!23779 () Bool)

(declare-fun lt!8754 () Unit!522)

(assert (=> b!23779 (= e!15408 lt!8754)))

(assert (=> b!23779 (= lt!8754 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))

(assert (=> b!23779 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))

(declare-fun b!23780 () Bool)

(declare-fun Unit!549 () Unit!522)

(assert (=> b!23780 (= e!15408 Unit!549)))

(declare-fun b!23781 () Bool)

(assert (=> b!23781 (= e!15409 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329)))))))

(assert (= (and d!4069 c!3116) b!23779))

(assert (= (and d!4069 (not c!3116)) b!23780))

(assert (= (and d!4069 (not res!14572)) b!23781))

(assert (=> d!4069 m!16794))

(declare-fun m!17513 () Bool)

(assert (=> d!4069 m!17513))

(assert (=> b!23779 m!16794))

(declare-fun m!17515 () Bool)

(assert (=> b!23779 m!17515))

(assert (=> b!23779 m!16794))

(declare-fun m!17517 () Bool)

(assert (=> b!23779 m!17517))

(assert (=> b!23779 m!17517))

(declare-fun m!17519 () Bool)

(assert (=> b!23779 m!17519))

(assert (=> b!23781 m!16794))

(assert (=> b!23781 m!17517))

(assert (=> b!23781 m!17517))

(assert (=> b!23781 m!17519))

(assert (=> b!23302 d!4069))

(declare-fun b!23782 () Bool)

(declare-fun e!15418 () ListLongMap!563)

(declare-fun call!2041 () ListLongMap!563)

(assert (=> b!23782 (= e!15418 call!2041)))

(declare-fun b!23783 () Bool)

(declare-fun e!15421 () Bool)

(declare-fun lt!8766 () ListLongMap!563)

(assert (=> b!23783 (= e!15421 (= (apply!29 lt!8766 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!23784 () Bool)

(declare-fun e!15410 () Bool)

(assert (=> b!23784 (= e!15410 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2036 () Bool)

(declare-fun call!2044 () ListLongMap!563)

(assert (=> bm!2036 (= call!2044 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23785 () Bool)

(declare-fun e!15415 () ListLongMap!563)

(assert (=> b!23785 (= e!15415 e!15418)))

(declare-fun c!3121 () Bool)

(assert (=> b!23785 (= c!3121 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23786 () Bool)

(declare-fun e!15420 () Bool)

(declare-fun call!2040 () Bool)

(assert (=> b!23786 (= e!15420 (not call!2040))))

(declare-fun b!23787 () Bool)

(declare-fun e!15417 () Bool)

(assert (=> b!23787 (= e!15417 e!15421)))

(declare-fun res!14578 () Bool)

(declare-fun call!2042 () Bool)

(assert (=> b!23787 (= res!14578 call!2042)))

(assert (=> b!23787 (=> (not res!14578) (not e!15421))))

(declare-fun bm!2037 () Bool)

(declare-fun call!2043 () ListLongMap!563)

(assert (=> bm!2037 (= call!2041 call!2043)))

(declare-fun b!23789 () Bool)

(assert (=> b!23789 (= e!15417 (not call!2042))))

(declare-fun bm!2038 () Bool)

(declare-fun call!2039 () ListLongMap!563)

(assert (=> bm!2038 (= call!2039 call!2044)))

(declare-fun b!23790 () Bool)

(declare-fun e!15416 () Bool)

(assert (=> b!23790 (= e!15416 e!15417)))

(declare-fun c!3122 () Bool)

(assert (=> b!23790 (= c!3122 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23791 () Bool)

(declare-fun e!15411 () Unit!522)

(declare-fun lt!8755 () Unit!522)

(assert (=> b!23791 (= e!15411 lt!8755)))

(declare-fun lt!8771 () ListLongMap!563)

(assert (=> b!23791 (= lt!8771 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8774 () (_ BitVec 64))

(assert (=> b!23791 (= lt!8774 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8769 () (_ BitVec 64))

(assert (=> b!23791 (= lt!8769 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8759 () Unit!522)

(assert (=> b!23791 (= lt!8759 (addStillContains!14 lt!8771 lt!8774 (zeroValue!1665 lt!8141) lt!8769))))

(assert (=> b!23791 (contains!229 (+!44 lt!8771 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141))) lt!8769)))

(declare-fun lt!8760 () Unit!522)

(assert (=> b!23791 (= lt!8760 lt!8759)))

(declare-fun lt!8772 () ListLongMap!563)

(assert (=> b!23791 (= lt!8772 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8758 () (_ BitVec 64))

(assert (=> b!23791 (= lt!8758 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8756 () (_ BitVec 64))

(assert (=> b!23791 (= lt!8756 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8765 () Unit!522)

(assert (=> b!23791 (= lt!8765 (addApplyDifferent!14 lt!8772 lt!8758 (minValue!1665 lt!8141) lt!8756))))

(assert (=> b!23791 (= (apply!29 (+!44 lt!8772 (tuple2!973 lt!8758 (minValue!1665 lt!8141))) lt!8756) (apply!29 lt!8772 lt!8756))))

(declare-fun lt!8763 () Unit!522)

(assert (=> b!23791 (= lt!8763 lt!8765)))

(declare-fun lt!8761 () ListLongMap!563)

(assert (=> b!23791 (= lt!8761 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8776 () (_ BitVec 64))

(assert (=> b!23791 (= lt!8776 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8768 () (_ BitVec 64))

(assert (=> b!23791 (= lt!8768 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8757 () Unit!522)

(assert (=> b!23791 (= lt!8757 (addApplyDifferent!14 lt!8761 lt!8776 (zeroValue!1665 lt!8141) lt!8768))))

(assert (=> b!23791 (= (apply!29 (+!44 lt!8761 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141))) lt!8768) (apply!29 lt!8761 lt!8768))))

(declare-fun lt!8770 () Unit!522)

(assert (=> b!23791 (= lt!8770 lt!8757)))

(declare-fun lt!8775 () ListLongMap!563)

(assert (=> b!23791 (= lt!8775 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8773 () (_ BitVec 64))

(assert (=> b!23791 (= lt!8773 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8767 () (_ BitVec 64))

(assert (=> b!23791 (= lt!8767 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!23791 (= lt!8755 (addApplyDifferent!14 lt!8775 lt!8773 (minValue!1665 lt!8141) lt!8767))))

(assert (=> b!23791 (= (apply!29 (+!44 lt!8775 (tuple2!973 lt!8773 (minValue!1665 lt!8141))) lt!8767) (apply!29 lt!8775 lt!8767))))

(declare-fun bm!2039 () Bool)

(declare-fun call!2045 () ListLongMap!563)

(declare-fun c!3120 () Bool)

(assert (=> bm!2039 (= call!2043 (+!44 (ite c!3120 call!2044 (ite c!3121 call!2039 call!2045)) (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!23792 () Bool)

(declare-fun Unit!550 () Unit!522)

(assert (=> b!23792 (= e!15411 Unit!550)))

(declare-fun b!23793 () Bool)

(declare-fun e!15413 () Bool)

(assert (=> b!23793 (= e!15420 e!15413)))

(declare-fun res!14576 () Bool)

(assert (=> b!23793 (= res!14576 call!2040)))

(assert (=> b!23793 (=> (not res!14576) (not e!15413))))

(declare-fun bm!2040 () Bool)

(assert (=> bm!2040 (= call!2045 call!2039)))

(declare-fun b!23794 () Bool)

(declare-fun res!14577 () Bool)

(assert (=> b!23794 (=> (not res!14577) (not e!15416))))

(declare-fun e!15414 () Bool)

(assert (=> b!23794 (= res!14577 e!15414)))

(declare-fun res!14573 () Bool)

(assert (=> b!23794 (=> res!14573 e!15414)))

(declare-fun e!15419 () Bool)

(assert (=> b!23794 (= res!14573 (not e!15419))))

(declare-fun res!14580 () Bool)

(assert (=> b!23794 (=> (not res!14580) (not e!15419))))

(assert (=> b!23794 (= res!14580 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23795 () Bool)

(declare-fun e!15412 () Bool)

(assert (=> b!23795 (= e!15414 e!15412)))

(declare-fun res!14574 () Bool)

(assert (=> b!23795 (=> (not res!14574) (not e!15412))))

(assert (=> b!23795 (= res!14574 (contains!229 lt!8766 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23795 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23796 () Bool)

(assert (=> b!23796 (= e!15419 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!23797 () Bool)

(declare-fun e!15422 () ListLongMap!563)

(assert (=> b!23797 (= e!15422 call!2041)))

(declare-fun b!23798 () Bool)

(assert (=> b!23798 (= e!15415 (+!44 call!2043 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun d!4071 () Bool)

(assert (=> d!4071 e!15416))

(declare-fun res!14579 () Bool)

(assert (=> d!4071 (=> (not res!14579) (not e!15416))))

(assert (=> d!4071 (= res!14579 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!8764 () ListLongMap!563)

(assert (=> d!4071 (= lt!8766 lt!8764)))

(declare-fun lt!8762 () Unit!522)

(assert (=> d!4071 (= lt!8762 e!15411)))

(declare-fun c!3118 () Bool)

(assert (=> d!4071 (= c!3118 e!15410)))

(declare-fun res!14581 () Bool)

(assert (=> d!4071 (=> (not res!14581) (not e!15410))))

(assert (=> d!4071 (= res!14581 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4071 (= lt!8764 e!15415)))

(assert (=> d!4071 (= c!3120 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4071 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4071 (= (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8766)))

(declare-fun b!23788 () Bool)

(assert (=> b!23788 (= e!15412 (= (apply!29 lt!8766 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8315) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23788 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8315)))))

(assert (=> b!23788 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!2041 () Bool)

(assert (=> bm!2041 (= call!2042 (contains!229 lt!8766 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23799 () Bool)

(declare-fun res!14575 () Bool)

(assert (=> b!23799 (=> (not res!14575) (not e!15416))))

(assert (=> b!23799 (= res!14575 e!15420)))

(declare-fun c!3117 () Bool)

(assert (=> b!23799 (= c!3117 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!23800 () Bool)

(assert (=> b!23800 (= e!15413 (= (apply!29 lt!8766 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun b!23801 () Bool)

(assert (=> b!23801 (= e!15422 call!2045)))

(declare-fun b!23802 () Bool)

(declare-fun c!3119 () Bool)

(assert (=> b!23802 (= c!3119 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23802 (= e!15418 e!15422)))

(declare-fun bm!2042 () Bool)

(assert (=> bm!2042 (= call!2040 (contains!229 lt!8766 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4071 c!3120) b!23798))

(assert (= (and d!4071 (not c!3120)) b!23785))

(assert (= (and b!23785 c!3121) b!23782))

(assert (= (and b!23785 (not c!3121)) b!23802))

(assert (= (and b!23802 c!3119) b!23797))

(assert (= (and b!23802 (not c!3119)) b!23801))

(assert (= (or b!23797 b!23801) bm!2040))

(assert (= (or b!23782 bm!2040) bm!2038))

(assert (= (or b!23782 b!23797) bm!2037))

(assert (= (or b!23798 bm!2038) bm!2036))

(assert (= (or b!23798 bm!2037) bm!2039))

(assert (= (and d!4071 res!14581) b!23784))

(assert (= (and d!4071 c!3118) b!23791))

(assert (= (and d!4071 (not c!3118)) b!23792))

(assert (= (and d!4071 res!14579) b!23794))

(assert (= (and b!23794 res!14580) b!23796))

(assert (= (and b!23794 (not res!14573)) b!23795))

(assert (= (and b!23795 res!14574) b!23788))

(assert (= (and b!23794 res!14577) b!23799))

(assert (= (and b!23799 c!3117) b!23793))

(assert (= (and b!23799 (not c!3117)) b!23786))

(assert (= (and b!23793 res!14576) b!23800))

(assert (= (or b!23793 b!23786) bm!2042))

(assert (= (and b!23799 res!14575) b!23790))

(assert (= (and b!23790 c!3122) b!23787))

(assert (= (and b!23790 (not c!3122)) b!23789))

(assert (= (and b!23787 res!14578) b!23783))

(assert (= (or b!23787 b!23789) bm!2041))

(declare-fun b_lambda!1581 () Bool)

(assert (=> (not b_lambda!1581) (not b!23788)))

(assert (=> b!23788 t!3232))

(declare-fun b_and!1493 () Bool)

(assert (= b_and!1491 (and (=> t!3232 result!1093) b_and!1493)))

(declare-fun m!17521 () Bool)

(assert (=> b!23800 m!17521))

(declare-fun m!17523 () Bool)

(assert (=> bm!2039 m!17523))

(declare-fun m!17525 () Bool)

(assert (=> b!23788 m!17525))

(assert (=> b!23788 m!17525))

(assert (=> b!23788 m!16930))

(declare-fun m!17527 () Bool)

(assert (=> b!23788 m!17527))

(assert (=> b!23788 m!16934))

(assert (=> b!23788 m!16930))

(assert (=> b!23788 m!16934))

(declare-fun m!17529 () Bool)

(assert (=> b!23788 m!17529))

(declare-fun m!17531 () Bool)

(assert (=> bm!2041 m!17531))

(assert (=> b!23796 m!16934))

(assert (=> b!23796 m!16934))

(assert (=> b!23796 m!16940))

(declare-fun m!17533 () Bool)

(assert (=> bm!2036 m!17533))

(declare-fun m!17535 () Bool)

(assert (=> b!23791 m!17535))

(declare-fun m!17537 () Bool)

(assert (=> b!23791 m!17537))

(declare-fun m!17539 () Bool)

(assert (=> b!23791 m!17539))

(declare-fun m!17541 () Bool)

(assert (=> b!23791 m!17541))

(declare-fun m!17543 () Bool)

(assert (=> b!23791 m!17543))

(declare-fun m!17545 () Bool)

(assert (=> b!23791 m!17545))

(assert (=> b!23791 m!17535))

(declare-fun m!17547 () Bool)

(assert (=> b!23791 m!17547))

(declare-fun m!17549 () Bool)

(assert (=> b!23791 m!17549))

(declare-fun m!17551 () Bool)

(assert (=> b!23791 m!17551))

(declare-fun m!17553 () Bool)

(assert (=> b!23791 m!17553))

(declare-fun m!17555 () Bool)

(assert (=> b!23791 m!17555))

(assert (=> b!23791 m!17533))

(assert (=> b!23791 m!16934))

(declare-fun m!17557 () Bool)

(assert (=> b!23791 m!17557))

(assert (=> b!23791 m!17549))

(declare-fun m!17559 () Bool)

(assert (=> b!23791 m!17559))

(declare-fun m!17561 () Bool)

(assert (=> b!23791 m!17561))

(assert (=> b!23791 m!17539))

(assert (=> b!23791 m!17545))

(declare-fun m!17563 () Bool)

(assert (=> b!23791 m!17563))

(assert (=> b!23795 m!16934))

(assert (=> b!23795 m!16934))

(declare-fun m!17565 () Bool)

(assert (=> b!23795 m!17565))

(declare-fun m!17567 () Bool)

(assert (=> b!23783 m!17567))

(declare-fun m!17569 () Bool)

(assert (=> b!23798 m!17569))

(declare-fun m!17571 () Bool)

(assert (=> bm!2042 m!17571))

(assert (=> d!4071 m!16908))

(assert (=> b!23784 m!16934))

(assert (=> b!23784 m!16934))

(assert (=> b!23784 m!16940))

(assert (=> b!23302 d!4071))

(declare-fun d!4073 () Bool)

(declare-fun e!15423 () Bool)

(assert (=> d!4073 e!15423))

(declare-fun res!14582 () Bool)

(assert (=> d!4073 (=> (not res!14582) (not e!15423))))

(assert (=> d!4073 (= res!14582 (and (bvsge (index!2338 lt!8329) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8329) (size!693 (_keys!3163 lt!8141)))))))

(declare-fun lt!8777 () Unit!522)

(assert (=> d!4073 (= lt!8777 (choose!208 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2338 lt!8329) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4073 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4073 (= (lemmaValidKeyInArrayIsInListMap!10 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2338 lt!8329) (defaultEntry!1742 lt!8141)) lt!8777)))

(declare-fun b!23803 () Bool)

(assert (=> b!23803 (= e!15423 (contains!229 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))

(assert (= (and d!4073 res!14582) b!23803))

(declare-fun m!17573 () Bool)

(assert (=> d!4073 m!17573))

(assert (=> d!4073 m!16908))

(assert (=> b!23803 m!16792))

(assert (=> b!23803 m!16794))

(assert (=> b!23803 m!16792))

(assert (=> b!23803 m!16794))

(assert (=> b!23803 m!16796))

(assert (=> b!23302 d!4073))

(declare-fun d!4075 () Bool)

(declare-fun e!15424 () Bool)

(assert (=> d!4075 e!15424))

(declare-fun res!14583 () Bool)

(assert (=> d!4075 (=> (not res!14583) (not e!15424))))

(assert (=> d!4075 (= res!14583 (and (bvsge (index!2338 lt!8329) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8329) (size!692 (_values!1728 lt!8141)))))))

(declare-fun lt!8778 () Unit!522)

(assert (=> d!4075 (= lt!8778 (choose!209 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2338 lt!8329) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4075 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4075 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2338 lt!8329) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) lt!8778)))

(declare-fun b!23804 () Bool)

(assert (=> b!23804 (= e!15424 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (getCurrentListMap!127 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))))

(assert (= (and d!4075 res!14583) b!23804))

(declare-fun m!17575 () Bool)

(assert (=> d!4075 m!17575))

(assert (=> d!4075 m!16908))

(assert (=> b!23804 m!16784))

(assert (=> b!23804 m!16784))

(assert (=> b!23804 m!17004))

(assert (=> b!23804 m!16790))

(declare-fun m!17577 () Bool)

(assert (=> b!23804 m!17577))

(assert (=> b!23302 d!4075))

(declare-fun d!4077 () Bool)

(assert (=> d!4077 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8340 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8779 () Unit!522)

(assert (=> d!4077 (= lt!8779 (choose!206 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) lt!8340 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4077 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4077 (= (lemmaChangeZeroKeyThenAddPairToListMap!10 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) lt!8340 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) (defaultEntry!1742 (_2!490 lt!8142))) lt!8779)))

(declare-fun bs!959 () Bool)

(assert (= bs!959 d!4077))

(assert (=> bs!959 m!16844))

(declare-fun m!17579 () Bool)

(assert (=> bs!959 m!17579))

(assert (=> bs!959 m!16844))

(declare-fun m!17581 () Bool)

(assert (=> bs!959 m!17581))

(declare-fun m!17583 () Bool)

(assert (=> bs!959 m!17583))

(assert (=> bs!959 m!16902))

(assert (=> b!23376 d!4077))

(declare-fun d!4079 () Bool)

(assert (=> d!4079 (= (map!408 (_2!490 lt!8142)) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun bs!960 () Bool)

(assert (= bs!960 d!4079))

(assert (=> bs!960 m!16844))

(assert (=> bm!1935 d!4079))

(declare-fun d!4081 () Bool)

(declare-fun e!15425 () Bool)

(assert (=> d!4081 e!15425))

(declare-fun res!14585 () Bool)

(assert (=> d!4081 (=> (not res!14585) (not e!15425))))

(declare-fun lt!8783 () ListLongMap!563)

(assert (=> d!4081 (= res!14585 (contains!229 lt!8783 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun lt!8781 () List!564)

(assert (=> d!4081 (= lt!8783 (ListLongMap!564 lt!8781))))

(declare-fun lt!8780 () Unit!522)

(declare-fun lt!8782 () Unit!522)

(assert (=> d!4081 (= lt!8780 lt!8782)))

(assert (=> d!4081 (= (getValueByKey!61 lt!8781 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4081 (= lt!8782 (lemmaContainsTupThenGetReturnValue!18 lt!8781 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4081 (= lt!8781 (insertStrictlySorted!18 (toList!297 call!1933) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4081 (= (+!44 call!1933 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!8783)))

(declare-fun b!23805 () Bool)

(declare-fun res!14584 () Bool)

(assert (=> b!23805 (=> (not res!14584) (not e!15425))))

(assert (=> b!23805 (= res!14584 (= (getValueByKey!61 (toList!297 lt!8783) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!23806 () Bool)

(assert (=> b!23806 (= e!15425 (contains!231 (toList!297 lt!8783) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (= (and d!4081 res!14585) b!23805))

(assert (= (and b!23805 res!14584) b!23806))

(declare-fun m!17585 () Bool)

(assert (=> d!4081 m!17585))

(declare-fun m!17587 () Bool)

(assert (=> d!4081 m!17587))

(declare-fun m!17589 () Bool)

(assert (=> d!4081 m!17589))

(declare-fun m!17591 () Bool)

(assert (=> d!4081 m!17591))

(declare-fun m!17593 () Bool)

(assert (=> b!23805 m!17593))

(declare-fun m!17595 () Bool)

(assert (=> b!23806 m!17595))

(assert (=> b!23318 d!4081))

(declare-fun d!4083 () Bool)

(declare-fun e!15426 () Bool)

(assert (=> d!4083 e!15426))

(declare-fun res!14587 () Bool)

(assert (=> d!4083 (=> (not res!14587) (not e!15426))))

(declare-fun lt!8787 () ListLongMap!563)

(assert (=> d!4083 (= res!14587 (contains!229 lt!8787 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun lt!8785 () List!564)

(assert (=> d!4083 (= lt!8787 (ListLongMap!564 lt!8785))))

(declare-fun lt!8784 () Unit!522)

(declare-fun lt!8786 () Unit!522)

(assert (=> d!4083 (= lt!8784 lt!8786)))

(assert (=> d!4083 (= (getValueByKey!61 lt!8785 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))) (Some!66 (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4083 (= lt!8786 (lemmaContainsTupThenGetReturnValue!18 lt!8785 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4083 (= lt!8785 (insertStrictlySorted!18 (toList!297 (ite c!2996 call!1927 call!1928)) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4083 (= (+!44 (ite c!2996 call!1927 call!1928) (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) lt!8787)))

(declare-fun b!23807 () Bool)

(declare-fun res!14586 () Bool)

(assert (=> b!23807 (=> (not res!14586) (not e!15426))))

(assert (=> b!23807 (= res!14586 (= (getValueByKey!61 (toList!297 lt!8787) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))) (Some!66 (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(declare-fun b!23808 () Bool)

(assert (=> b!23808 (= e!15426 (contains!231 (toList!297 lt!8787) (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (= (and d!4083 res!14587) b!23807))

(assert (= (and b!23807 res!14586) b!23808))

(declare-fun m!17597 () Bool)

(assert (=> d!4083 m!17597))

(declare-fun m!17599 () Bool)

(assert (=> d!4083 m!17599))

(declare-fun m!17601 () Bool)

(assert (=> d!4083 m!17601))

(declare-fun m!17603 () Bool)

(assert (=> d!4083 m!17603))

(declare-fun m!17605 () Bool)

(assert (=> b!23807 m!17605))

(declare-fun m!17607 () Bool)

(assert (=> b!23808 m!17607))

(assert (=> bm!1908 d!4083))

(assert (=> b!23347 d!3983))

(declare-fun d!4085 () Bool)

(declare-fun res!14588 () Bool)

(declare-fun e!15427 () Bool)

(assert (=> d!4085 (=> res!14588 e!15427)))

(assert (=> d!4085 (= res!14588 (= (select (arr!597 lt!8235) #b00000000000000000000000000000000) (_1!495 lt!8244)))))

(assert (=> d!4085 (= (arrayContainsKey!0 lt!8235 (_1!495 lt!8244) #b00000000000000000000000000000000) e!15427)))

(declare-fun b!23809 () Bool)

(declare-fun e!15428 () Bool)

(assert (=> b!23809 (= e!15427 e!15428)))

(declare-fun res!14589 () Bool)

(assert (=> b!23809 (=> (not res!14589) (not e!15428))))

(assert (=> b!23809 (= res!14589 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 lt!8235)))))

(declare-fun b!23810 () Bool)

(assert (=> b!23810 (= e!15428 (arrayContainsKey!0 lt!8235 (_1!495 lt!8244) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4085 (not res!14588)) b!23809))

(assert (= (and b!23809 res!14589) b!23810))

(declare-fun m!17609 () Bool)

(assert (=> d!4085 m!17609))

(declare-fun m!17611 () Bool)

(assert (=> b!23810 m!17611))

(assert (=> b!23206 d!4085))

(declare-fun d!4087 () Bool)

(declare-fun e!15430 () Bool)

(assert (=> d!4087 e!15430))

(declare-fun res!14590 () Bool)

(assert (=> d!4087 (=> res!14590 e!15430)))

(declare-fun lt!8789 () Bool)

(assert (=> d!4087 (= res!14590 (not lt!8789))))

(declare-fun lt!8790 () Bool)

(assert (=> d!4087 (= lt!8789 lt!8790)))

(declare-fun lt!8788 () Unit!522)

(declare-fun e!15429 () Unit!522)

(assert (=> d!4087 (= lt!8788 e!15429)))

(declare-fun c!3123 () Bool)

(assert (=> d!4087 (= c!3123 lt!8790)))

(assert (=> d!4087 (= lt!8790 (containsKey!25 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4087 (= (contains!229 call!1920 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!8789)))

(declare-fun b!23811 () Bool)

(declare-fun lt!8791 () Unit!522)

(assert (=> b!23811 (= e!15429 lt!8791)))

(assert (=> b!23811 (= lt!8791 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23811 (isDefined!23 (getValueByKey!61 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23812 () Bool)

(declare-fun Unit!551 () Unit!522)

(assert (=> b!23812 (= e!15429 Unit!551)))

(declare-fun b!23813 () Bool)

(assert (=> b!23813 (= e!15430 (isDefined!23 (getValueByKey!61 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4087 c!3123) b!23811))

(assert (= (and d!4087 (not c!3123)) b!23812))

(assert (= (and d!4087 (not res!14590)) b!23813))

(declare-fun m!17613 () Bool)

(assert (=> d!4087 m!17613))

(declare-fun m!17615 () Bool)

(assert (=> b!23811 m!17615))

(declare-fun m!17617 () Bool)

(assert (=> b!23811 m!17617))

(assert (=> b!23811 m!17617))

(declare-fun m!17619 () Bool)

(assert (=> b!23811 m!17619))

(assert (=> b!23813 m!17617))

(assert (=> b!23813 m!17617))

(assert (=> b!23813 m!17619))

(assert (=> b!23316 d!4087))

(declare-fun b!23814 () Bool)

(declare-fun res!14592 () Bool)

(declare-fun e!15433 () Bool)

(assert (=> b!23814 (=> (not res!14592) (not e!15433))))

(declare-fun lt!8792 () SeekEntryResult!54)

(assert (=> b!23814 (= res!14592 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2340 lt!8792)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23814 (and (bvsge (index!2340 lt!8792) #b00000000000000000000000000000000) (bvslt (index!2340 lt!8792) (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23815 () Bool)

(declare-fun e!15431 () Bool)

(declare-fun e!15432 () Bool)

(assert (=> b!23815 (= e!15431 e!15432)))

(declare-fun c!3124 () Bool)

(assert (=> b!23815 (= c!3124 ((_ is MissingVacant!54) lt!8792))))

(declare-fun b!23816 () Bool)

(assert (=> b!23816 (and (bvsge (index!2337 lt!8792) #b00000000000000000000000000000000) (bvslt (index!2337 lt!8792) (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14591 () Bool)

(assert (=> b!23816 (= res!14591 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2337 lt!8792)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15434 () Bool)

(assert (=> b!23816 (=> (not res!14591) (not e!15434))))

(declare-fun b!23817 () Bool)

(declare-fun res!14593 () Bool)

(assert (=> b!23817 (=> (not res!14593) (not e!15433))))

(declare-fun call!2047 () Bool)

(assert (=> b!23817 (= res!14593 call!2047)))

(assert (=> b!23817 (= e!15432 e!15433)))

(declare-fun d!4089 () Bool)

(assert (=> d!4089 e!15431))

(declare-fun c!3125 () Bool)

(assert (=> d!4089 (= c!3125 ((_ is MissingZero!54) lt!8792))))

(assert (=> d!4089 (= lt!8792 (seekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun lt!8793 () Unit!522)

(assert (=> d!4089 (= lt!8793 (choose!207 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4089 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4089 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)) lt!8793)))

(declare-fun call!2046 () Bool)

(declare-fun bm!2043 () Bool)

(assert (=> bm!2043 (= call!2046 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun b!23818 () Bool)

(assert (=> b!23818 (= e!15431 e!15434)))

(declare-fun res!14594 () Bool)

(assert (=> b!23818 (= res!14594 call!2047)))

(assert (=> b!23818 (=> (not res!14594) (not e!15434))))

(declare-fun bm!2044 () Bool)

(assert (=> bm!2044 (= call!2047 (inRange!0 (ite c!3125 (index!2337 lt!8792) (index!2340 lt!8792)) (mask!4729 lt!8141)))))

(declare-fun b!23819 () Bool)

(assert (=> b!23819 (= e!15433 (not call!2046))))

(declare-fun b!23820 () Bool)

(assert (=> b!23820 (= e!15432 ((_ is Undefined!54) lt!8792))))

(declare-fun b!23821 () Bool)

(assert (=> b!23821 (= e!15434 (not call!2046))))

(assert (= (and d!4089 c!3125) b!23818))

(assert (= (and d!4089 (not c!3125)) b!23815))

(assert (= (and b!23818 res!14594) b!23816))

(assert (= (and b!23816 res!14591) b!23821))

(assert (= (and b!23815 c!3124) b!23817))

(assert (= (and b!23815 (not c!3124)) b!23820))

(assert (= (and b!23817 res!14593) b!23814))

(assert (= (and b!23814 res!14592) b!23819))

(assert (= (or b!23818 b!23817) bm!2044))

(assert (= (or b!23821 b!23819) bm!2043))

(assert (=> d!4089 m!16774))

(declare-fun m!17621 () Bool)

(assert (=> d!4089 m!17621))

(assert (=> d!4089 m!16908))

(declare-fun m!17623 () Bool)

(assert (=> b!23814 m!17623))

(declare-fun m!17625 () Bool)

(assert (=> bm!2044 m!17625))

(assert (=> bm!2043 m!16782))

(declare-fun m!17627 () Bool)

(assert (=> b!23816 m!17627))

(assert (=> bm!1914 d!4089))

(declare-fun b!23822 () Bool)

(declare-fun e!15435 () Bool)

(assert (=> b!23822 (= e!15435 tp_is_empty!1021)))

(declare-fun mapIsEmpty!1032 () Bool)

(declare-fun mapRes!1032 () Bool)

(assert (=> mapIsEmpty!1032 mapRes!1032))

(declare-fun mapNonEmpty!1032 () Bool)

(declare-fun tp!3534 () Bool)

(assert (=> mapNonEmpty!1032 (= mapRes!1032 (and tp!3534 e!15435))))

(declare-fun mapRest!1032 () (Array (_ BitVec 32) ValueCell!311))

(declare-fun mapValue!1032 () ValueCell!311)

(declare-fun mapKey!1032 () (_ BitVec 32))

(assert (=> mapNonEmpty!1032 (= mapRest!1031 (store mapRest!1032 mapKey!1032 mapValue!1032))))

(declare-fun b!23823 () Bool)

(declare-fun e!15436 () Bool)

(assert (=> b!23823 (= e!15436 tp_is_empty!1021)))

(declare-fun condMapEmpty!1032 () Bool)

(declare-fun mapDefault!1032 () ValueCell!311)

(assert (=> mapNonEmpty!1031 (= condMapEmpty!1032 (= mapRest!1031 ((as const (Array (_ BitVec 32) ValueCell!311)) mapDefault!1032)))))

(assert (=> mapNonEmpty!1031 (= tp!3533 (and e!15436 mapRes!1032))))

(assert (= (and mapNonEmpty!1031 condMapEmpty!1032) mapIsEmpty!1032))

(assert (= (and mapNonEmpty!1031 (not condMapEmpty!1032)) mapNonEmpty!1032))

(assert (= (and mapNonEmpty!1032 ((_ is ValueCellFull!311) mapValue!1032)) b!23822))

(assert (= (and mapNonEmpty!1031 ((_ is ValueCellFull!311) mapDefault!1032)) b!23823))

(declare-fun m!17629 () Bool)

(assert (=> mapNonEmpty!1032 m!17629))

(check-sat (not d!4013) (not bm!2010) tp_is_empty!1021 (not b!23674) (not b!23813) (not d!4009) (not d!4059) (not d!4039) (not b!23693) (not bm!1976) (not bm!1988) (not d!4021) (not b!23551) (not b!23707) (not b!23478) (not b!23463) (not b!23635) (not b!23555) (not bm!2025) (not b_next!757) (not b!23567) (not b!23679) (not b!23722) (not b_lambda!1573) (not b!23806) (not b!23628) b_and!1493 (not b!23664) (not b!23765) (not b!23395) (not d!3985) (not b!23538) (not b!23718) (not bm!1985) (not b!23717) (not b!23659) (not bm!2023) (not bm!2039) (not d!3971) (not b_lambda!1571) (not bm!2043) (not bm!2033) (not d!4089) (not b!23644) (not b!23811) (not d!4045) (not b!23803) (not b!23779) (not b!23697) (not d!4069) (not b!23728) (not b!23661) (not bm!2041) (not b!23687) (not d!4073) (not bm!1992) (not b!23671) (not d!4079) (not b!23752) (not b!23642) (not b!23791) (not d!3991) (not b!23531) (not d!3995) (not d!4011) (not b!23558) (not d!4035) (not bm!2044) (not b!23418) (not b!23729) (not d!4001) (not b!23546) (not b!23721) (not d!4053) (not b!23517) (not b!23468) (not b_lambda!1567) (not bm!1989) (not d!4037) (not b!23692) (not b!23775) (not b!23743) (not b!23740) (not b!23770) (not b!23547) (not b!23741) (not bm!2011) (not bm!2032) (not b!23760) (not b!23709) (not b!23807) (not d!4003) (not b!23603) (not d!4071) (not b!23688) (not b!23471) (not b!23783) (not b_lambda!1575) (not b!23527) (not d!3997) (not b!23719) (not d!3993) (not b!23562) (not b!23522) (not d!4049) (not b!23778) (not mapNonEmpty!1032) (not b_lambda!1579) (not d!3983) (not b!23476) (not b!23704) (not bm!1973) (not d!4087) (not b!23526) (not d!4027) (not b!23678) (not b!23630) (not b!23745) (not d!3989) (not b!23781) (not d!3987) (not b!23651) (not bm!2017) (not d!4081) (not b!23804) (not b!23633) (not d!4083) (not d!3979) (not b!23808) (not b!23634) (not bm!2035) (not b!23798) (not bm!2018) (not b!23662) (not b!23663) (not bm!2001) (not b!23700) (not d!4023) (not bm!2007) (not d!3977) (not bm!2028) (not bm!2042) (not b!23796) (not b!23726) (not b!23548) (not bm!2016) (not bm!2021) (not b!23784) (not d!4041) (not b!23393) (not b!23631) (not b!23759) (not b!23667) (not bm!2030) (not b!23657) (not b!23683) (not b!23681) (not b!23714) (not d!3969) (not b!23666) (not bm!2031) (not bm!1994) (not b!23650) (not b_lambda!1569) (not b!23660) (not b!23649) (not bm!2004) (not d!4065) (not d!4043) (not b!23480) (not b!23720) (not d!4063) (not d!4075) (not d!4051) (not b!23733) (not bm!1995) (not b!23550) (not b!23736) (not b!23614) (not b!23690) (not bm!1970) (not b!23724) (not b!23810) (not b!23705) (not d!4077) (not bm!1975) (not b!23641) (not d!4033) (not b!23400) (not b!23686) (not b!23565) (not bm!2036) (not d!4025) (not b_lambda!1581) (not b!23800) (not b!23788) (not b!23532) (not bm!2000) (not bm!1986) (not b!23723) (not b!23475) (not d!4019) (not b!23769) (not bm!2014) (not b!23617) (not b!23795) (not b!23563) (not d!3975) (not b!23805) (not b_lambda!1577) (not d!4031) (not b!23774) (not bm!2024) (not d!4055) (not b!23464))
(check-sat b_and!1493 (not b_next!757))
(get-model)

(declare-fun b!23824 () Bool)

(declare-fun e!15438 () (_ BitVec 32))

(assert (=> b!23824 (= e!15438 #b00000000000000000000000000000000)))

(declare-fun b!23825 () Bool)

(declare-fun e!15437 () (_ BitVec 32))

(assert (=> b!23825 (= e!15438 e!15437)))

(declare-fun c!3127 () Bool)

(assert (=> b!23825 (= c!3127 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)))))

(declare-fun bm!2045 () Bool)

(declare-fun call!2048 () (_ BitVec 32))

(assert (=> bm!2045 (= call!2048 (arrayCountValidKeys!0 (_keys!3163 lt!8243) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8243))))))

(declare-fun d!4091 () Bool)

(declare-fun lt!8794 () (_ BitVec 32))

(assert (=> d!4091 (and (bvsge lt!8794 #b00000000000000000000000000000000) (bvsle lt!8794 (bvsub (size!693 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)))))

(assert (=> d!4091 (= lt!8794 e!15438)))

(declare-fun c!3126 () Bool)

(assert (=> d!4091 (= c!3126 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))))))

(assert (=> d!4091 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 lt!8243)) (size!693 (_keys!3163 lt!8243))))))

(assert (=> d!4091 (= (arrayCountValidKeys!0 (_keys!3163 lt!8243) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))) lt!8794)))

(declare-fun b!23826 () Bool)

(assert (=> b!23826 (= e!15437 (bvadd #b00000000000000000000000000000001 call!2048))))

(declare-fun b!23827 () Bool)

(assert (=> b!23827 (= e!15437 call!2048)))

(assert (= (and d!4091 c!3126) b!23824))

(assert (= (and d!4091 (not c!3126)) b!23825))

(assert (= (and b!23825 c!3127) b!23826))

(assert (= (and b!23825 (not c!3127)) b!23827))

(assert (= (or b!23826 b!23827) bm!2045))

(declare-fun m!17631 () Bool)

(assert (=> b!23825 m!17631))

(assert (=> b!23825 m!17631))

(declare-fun m!17633 () Bool)

(assert (=> b!23825 m!17633))

(declare-fun m!17635 () Bool)

(assert (=> bm!2045 m!17635))

(assert (=> b!23633 d!4091))

(assert (=> b!23752 d!4085))

(declare-fun d!4093 () Bool)

(declare-fun e!15439 () Bool)

(assert (=> d!4093 e!15439))

(declare-fun res!14596 () Bool)

(assert (=> d!4093 (=> (not res!14596) (not e!15439))))

(declare-fun lt!8798 () ListLongMap!563)

(assert (=> d!4093 (= res!14596 (contains!229 lt!8798 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun lt!8796 () List!564)

(assert (=> d!4093 (= lt!8798 (ListLongMap!564 lt!8796))))

(declare-fun lt!8795 () Unit!522)

(declare-fun lt!8797 () Unit!522)

(assert (=> d!4093 (= lt!8795 lt!8797)))

(assert (=> d!4093 (= (getValueByKey!61 lt!8796 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4093 (= lt!8797 (lemmaContainsTupThenGetReturnValue!18 lt!8796 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4093 (= lt!8796 (insertStrictlySorted!18 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4093 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!8798)))

(declare-fun b!23828 () Bool)

(declare-fun res!14595 () Bool)

(assert (=> b!23828 (=> (not res!14595) (not e!15439))))

(assert (=> b!23828 (= res!14595 (= (getValueByKey!61 (toList!297 lt!8798) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!23829 () Bool)

(assert (=> b!23829 (= e!15439 (contains!231 (toList!297 lt!8798) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(assert (= (and d!4093 res!14596) b!23828))

(assert (= (and b!23828 res!14595) b!23829))

(declare-fun m!17637 () Bool)

(assert (=> d!4093 m!17637))

(declare-fun m!17639 () Bool)

(assert (=> d!4093 m!17639))

(declare-fun m!17641 () Bool)

(assert (=> d!4093 m!17641))

(declare-fun m!17643 () Bool)

(assert (=> d!4093 m!17643))

(declare-fun m!17645 () Bool)

(assert (=> b!23828 m!17645))

(declare-fun m!17647 () Bool)

(assert (=> b!23829 m!17647))

(assert (=> b!23717 d!4093))

(assert (=> b!23717 d!4055))

(declare-fun b!23830 () Bool)

(declare-fun e!15448 () ListLongMap!563)

(declare-fun call!2051 () ListLongMap!563)

(assert (=> b!23830 (= e!15448 call!2051)))

(declare-fun b!23831 () Bool)

(declare-fun e!15451 () Bool)

(declare-fun lt!8810 () ListLongMap!563)

(assert (=> b!23831 (= e!15451 (= (apply!29 lt!8810 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!490 lt!8142))))))

(declare-fun b!23832 () Bool)

(declare-fun e!15440 () Bool)

(assert (=> b!23832 (= e!15440 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun call!2054 () ListLongMap!563)

(declare-fun bm!2046 () Bool)

(assert (=> bm!2046 (= call!2054 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!23833 () Bool)

(declare-fun e!15445 () ListLongMap!563)

(assert (=> b!23833 (= e!15445 e!15448)))

(declare-fun c!3132 () Bool)

(assert (=> b!23833 (= c!3132 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23834 () Bool)

(declare-fun e!15450 () Bool)

(declare-fun call!2050 () Bool)

(assert (=> b!23834 (= e!15450 (not call!2050))))

(declare-fun b!23835 () Bool)

(declare-fun e!15447 () Bool)

(assert (=> b!23835 (= e!15447 e!15451)))

(declare-fun res!14602 () Bool)

(declare-fun call!2052 () Bool)

(assert (=> b!23835 (= res!14602 call!2052)))

(assert (=> b!23835 (=> (not res!14602) (not e!15451))))

(declare-fun bm!2047 () Bool)

(declare-fun call!2053 () ListLongMap!563)

(assert (=> bm!2047 (= call!2051 call!2053)))

(declare-fun b!23837 () Bool)

(assert (=> b!23837 (= e!15447 (not call!2052))))

(declare-fun bm!2048 () Bool)

(declare-fun call!2049 () ListLongMap!563)

(assert (=> bm!2048 (= call!2049 call!2054)))

(declare-fun b!23838 () Bool)

(declare-fun e!15446 () Bool)

(assert (=> b!23838 (= e!15446 e!15447)))

(declare-fun c!3133 () Bool)

(assert (=> b!23838 (= c!3133 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23839 () Bool)

(declare-fun e!15441 () Unit!522)

(declare-fun lt!8799 () Unit!522)

(assert (=> b!23839 (= e!15441 lt!8799)))

(declare-fun lt!8815 () ListLongMap!563)

(assert (=> b!23839 (= lt!8815 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8818 () (_ BitVec 64))

(assert (=> b!23839 (= lt!8818 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8813 () (_ BitVec 64))

(assert (=> b!23839 (= lt!8813 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8803 () Unit!522)

(assert (=> b!23839 (= lt!8803 (addStillContains!14 lt!8815 lt!8818 (zeroValue!1665 (_2!490 lt!8142)) lt!8813))))

(assert (=> b!23839 (contains!229 (+!44 lt!8815 (tuple2!973 lt!8818 (zeroValue!1665 (_2!490 lt!8142)))) lt!8813)))

(declare-fun lt!8804 () Unit!522)

(assert (=> b!23839 (= lt!8804 lt!8803)))

(declare-fun lt!8816 () ListLongMap!563)

(assert (=> b!23839 (= lt!8816 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8802 () (_ BitVec 64))

(assert (=> b!23839 (= lt!8802 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8800 () (_ BitVec 64))

(assert (=> b!23839 (= lt!8800 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8809 () Unit!522)

(assert (=> b!23839 (= lt!8809 (addApplyDifferent!14 lt!8816 lt!8802 (minValue!1665 (_2!490 lt!8142)) lt!8800))))

(assert (=> b!23839 (= (apply!29 (+!44 lt!8816 (tuple2!973 lt!8802 (minValue!1665 (_2!490 lt!8142)))) lt!8800) (apply!29 lt!8816 lt!8800))))

(declare-fun lt!8807 () Unit!522)

(assert (=> b!23839 (= lt!8807 lt!8809)))

(declare-fun lt!8805 () ListLongMap!563)

(assert (=> b!23839 (= lt!8805 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8820 () (_ BitVec 64))

(assert (=> b!23839 (= lt!8820 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8812 () (_ BitVec 64))

(assert (=> b!23839 (= lt!8812 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!8801 () Unit!522)

(assert (=> b!23839 (= lt!8801 (addApplyDifferent!14 lt!8805 lt!8820 (zeroValue!1665 (_2!490 lt!8142)) lt!8812))))

(assert (=> b!23839 (= (apply!29 (+!44 lt!8805 (tuple2!973 lt!8820 (zeroValue!1665 (_2!490 lt!8142)))) lt!8812) (apply!29 lt!8805 lt!8812))))

(declare-fun lt!8814 () Unit!522)

(assert (=> b!23839 (= lt!8814 lt!8801)))

(declare-fun lt!8819 () ListLongMap!563)

(assert (=> b!23839 (= lt!8819 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!8817 () (_ BitVec 64))

(assert (=> b!23839 (= lt!8817 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8811 () (_ BitVec 64))

(assert (=> b!23839 (= lt!8811 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(assert (=> b!23839 (= lt!8799 (addApplyDifferent!14 lt!8819 lt!8817 (minValue!1665 (_2!490 lt!8142)) lt!8811))))

(assert (=> b!23839 (= (apply!29 (+!44 lt!8819 (tuple2!973 lt!8817 (minValue!1665 (_2!490 lt!8142)))) lt!8811) (apply!29 lt!8819 lt!8811))))

(declare-fun call!2055 () ListLongMap!563)

(declare-fun bm!2049 () Bool)

(declare-fun c!3131 () Bool)

(assert (=> bm!2049 (= call!2053 (+!44 (ite c!3131 call!2054 (ite c!3132 call!2049 call!2055)) (ite (or c!3131 c!3132) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun b!23840 () Bool)

(declare-fun Unit!552 () Unit!522)

(assert (=> b!23840 (= e!15441 Unit!552)))

(declare-fun b!23841 () Bool)

(declare-fun e!15443 () Bool)

(assert (=> b!23841 (= e!15450 e!15443)))

(declare-fun res!14600 () Bool)

(assert (=> b!23841 (= res!14600 call!2050)))

(assert (=> b!23841 (=> (not res!14600) (not e!15443))))

(declare-fun bm!2050 () Bool)

(assert (=> bm!2050 (= call!2055 call!2049)))

(declare-fun b!23842 () Bool)

(declare-fun res!14601 () Bool)

(assert (=> b!23842 (=> (not res!14601) (not e!15446))))

(declare-fun e!15444 () Bool)

(assert (=> b!23842 (= res!14601 e!15444)))

(declare-fun res!14597 () Bool)

(assert (=> b!23842 (=> res!14597 e!15444)))

(declare-fun e!15449 () Bool)

(assert (=> b!23842 (= res!14597 (not e!15449))))

(declare-fun res!14604 () Bool)

(assert (=> b!23842 (=> (not res!14604) (not e!15449))))

(assert (=> b!23842 (= res!14604 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23843 () Bool)

(declare-fun e!15442 () Bool)

(assert (=> b!23843 (= e!15444 e!15442)))

(declare-fun res!14598 () Bool)

(assert (=> b!23843 (=> (not res!14598) (not e!15442))))

(assert (=> b!23843 (= res!14598 (contains!229 lt!8810 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!23843 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!23844 () Bool)

(assert (=> b!23844 (= e!15449 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!23845 () Bool)

(declare-fun e!15452 () ListLongMap!563)

(assert (=> b!23845 (= e!15452 call!2051)))

(declare-fun b!23846 () Bool)

(assert (=> b!23846 (= e!15445 (+!44 call!2053 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))

(declare-fun d!4095 () Bool)

(assert (=> d!4095 e!15446))

(declare-fun res!14603 () Bool)

(assert (=> d!4095 (=> (not res!14603) (not e!15446))))

(assert (=> d!4095 (= res!14603 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(declare-fun lt!8808 () ListLongMap!563)

(assert (=> d!4095 (= lt!8810 lt!8808)))

(declare-fun lt!8806 () Unit!522)

(assert (=> d!4095 (= lt!8806 e!15441)))

(declare-fun c!3129 () Bool)

(assert (=> d!4095 (= c!3129 e!15440)))

(declare-fun res!14605 () Bool)

(assert (=> d!4095 (=> (not res!14605) (not e!15440))))

(assert (=> d!4095 (= res!14605 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4095 (= lt!8808 e!15445)))

(assert (=> d!4095 (= c!3131 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4095 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4095 (= (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!8810)))

(declare-fun b!23836 () Bool)

(assert (=> b!23836 (= e!15442 (= (apply!29 lt!8810 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23836 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))))))

(assert (=> b!23836 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun bm!2051 () Bool)

(assert (=> bm!2051 (= call!2052 (contains!229 lt!8810 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23847 () Bool)

(declare-fun res!14599 () Bool)

(assert (=> b!23847 (=> (not res!14599) (not e!15446))))

(assert (=> b!23847 (= res!14599 e!15450)))

(declare-fun c!3128 () Bool)

(assert (=> b!23847 (= c!3128 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!23848 () Bool)

(assert (=> b!23848 (= e!15443 (= (apply!29 lt!8810 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!490 lt!8142))))))

(declare-fun b!23849 () Bool)

(assert (=> b!23849 (= e!15452 call!2055)))

(declare-fun b!23850 () Bool)

(declare-fun c!3130 () Bool)

(assert (=> b!23850 (= c!3130 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23850 (= e!15448 e!15452)))

(declare-fun bm!2052 () Bool)

(assert (=> bm!2052 (= call!2050 (contains!229 lt!8810 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4095 c!3131) b!23846))

(assert (= (and d!4095 (not c!3131)) b!23833))

(assert (= (and b!23833 c!3132) b!23830))

(assert (= (and b!23833 (not c!3132)) b!23850))

(assert (= (and b!23850 c!3130) b!23845))

(assert (= (and b!23850 (not c!3130)) b!23849))

(assert (= (or b!23845 b!23849) bm!2050))

(assert (= (or b!23830 bm!2050) bm!2048))

(assert (= (or b!23830 b!23845) bm!2047))

(assert (= (or b!23846 bm!2048) bm!2046))

(assert (= (or b!23846 bm!2047) bm!2049))

(assert (= (and d!4095 res!14605) b!23832))

(assert (= (and d!4095 c!3129) b!23839))

(assert (= (and d!4095 (not c!3129)) b!23840))

(assert (= (and d!4095 res!14603) b!23842))

(assert (= (and b!23842 res!14604) b!23844))

(assert (= (and b!23842 (not res!14597)) b!23843))

(assert (= (and b!23843 res!14598) b!23836))

(assert (= (and b!23842 res!14601) b!23847))

(assert (= (and b!23847 c!3128) b!23841))

(assert (= (and b!23847 (not c!3128)) b!23834))

(assert (= (and b!23841 res!14600) b!23848))

(assert (= (or b!23841 b!23834) bm!2052))

(assert (= (and b!23847 res!14599) b!23838))

(assert (= (and b!23838 c!3133) b!23835))

(assert (= (and b!23838 (not c!3133)) b!23837))

(assert (= (and b!23835 res!14602) b!23831))

(assert (= (or b!23835 b!23837) bm!2051))

(declare-fun b_lambda!1583 () Bool)

(assert (=> (not b_lambda!1583) (not b!23836)))

(assert (=> b!23836 t!3234))

(declare-fun b_and!1495 () Bool)

(assert (= b_and!1493 (and (=> t!3234 result!1095) b_and!1495)))

(declare-fun m!17649 () Bool)

(assert (=> b!23848 m!17649))

(declare-fun m!17651 () Bool)

(assert (=> bm!2049 m!17651))

(declare-fun m!17653 () Bool)

(assert (=> b!23836 m!17653))

(assert (=> b!23836 m!17653))

(assert (=> b!23836 m!17076))

(declare-fun m!17655 () Bool)

(assert (=> b!23836 m!17655))

(assert (=> b!23836 m!17080))

(assert (=> b!23836 m!17076))

(assert (=> b!23836 m!17080))

(declare-fun m!17657 () Bool)

(assert (=> b!23836 m!17657))

(declare-fun m!17659 () Bool)

(assert (=> bm!2051 m!17659))

(assert (=> b!23844 m!17080))

(assert (=> b!23844 m!17080))

(assert (=> b!23844 m!17086))

(declare-fun m!17661 () Bool)

(assert (=> bm!2046 m!17661))

(declare-fun m!17663 () Bool)

(assert (=> b!23839 m!17663))

(declare-fun m!17665 () Bool)

(assert (=> b!23839 m!17665))

(declare-fun m!17667 () Bool)

(assert (=> b!23839 m!17667))

(declare-fun m!17669 () Bool)

(assert (=> b!23839 m!17669))

(declare-fun m!17671 () Bool)

(assert (=> b!23839 m!17671))

(declare-fun m!17673 () Bool)

(assert (=> b!23839 m!17673))

(assert (=> b!23839 m!17663))

(declare-fun m!17675 () Bool)

(assert (=> b!23839 m!17675))

(declare-fun m!17677 () Bool)

(assert (=> b!23839 m!17677))

(declare-fun m!17679 () Bool)

(assert (=> b!23839 m!17679))

(declare-fun m!17681 () Bool)

(assert (=> b!23839 m!17681))

(declare-fun m!17683 () Bool)

(assert (=> b!23839 m!17683))

(assert (=> b!23839 m!17661))

(assert (=> b!23839 m!17080))

(declare-fun m!17685 () Bool)

(assert (=> b!23839 m!17685))

(assert (=> b!23839 m!17677))

(declare-fun m!17687 () Bool)

(assert (=> b!23839 m!17687))

(declare-fun m!17689 () Bool)

(assert (=> b!23839 m!17689))

(assert (=> b!23839 m!17667))

(assert (=> b!23839 m!17673))

(declare-fun m!17691 () Bool)

(assert (=> b!23839 m!17691))

(assert (=> b!23843 m!17080))

(assert (=> b!23843 m!17080))

(declare-fun m!17693 () Bool)

(assert (=> b!23843 m!17693))

(declare-fun m!17695 () Bool)

(assert (=> b!23831 m!17695))

(declare-fun m!17697 () Bool)

(assert (=> b!23846 m!17697))

(declare-fun m!17699 () Bool)

(assert (=> bm!2052 m!17699))

(assert (=> d!4095 m!16902))

(assert (=> b!23832 m!17080))

(assert (=> b!23832 m!17080))

(assert (=> b!23832 m!17086))

(assert (=> b!23717 d!4095))

(declare-fun d!4097 () Bool)

(declare-fun res!14610 () Bool)

(declare-fun e!15457 () Bool)

(assert (=> d!4097 (=> res!14610 e!15457)))

(assert (=> d!4097 (= res!14610 (and ((_ is Cons!560) (toList!297 e!15136)) (= (_1!495 (h!1126 (toList!297 e!15136))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4097 (= (containsKey!25 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) e!15457)))

(declare-fun b!23855 () Bool)

(declare-fun e!15458 () Bool)

(assert (=> b!23855 (= e!15457 e!15458)))

(declare-fun res!14611 () Bool)

(assert (=> b!23855 (=> (not res!14611) (not e!15458))))

(assert (=> b!23855 (= res!14611 (and (or (not ((_ is Cons!560) (toList!297 e!15136))) (bvsle (_1!495 (h!1126 (toList!297 e!15136))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))) ((_ is Cons!560) (toList!297 e!15136)) (bvslt (_1!495 (h!1126 (toList!297 e!15136))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!23856 () Bool)

(assert (=> b!23856 (= e!15458 (containsKey!25 (t!3229 (toList!297 e!15136)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4097 (not res!14610)) b!23855))

(assert (= (and b!23855 res!14611) b!23856))

(declare-fun m!17701 () Bool)

(assert (=> b!23856 m!17701))

(assert (=> d!4053 d!4097))

(declare-fun b!23857 () Bool)

(declare-fun e!15460 () (_ BitVec 32))

(assert (=> b!23857 (= e!15460 #b00000000000000000000000000000000)))

(declare-fun b!23858 () Bool)

(declare-fun e!15459 () (_ BitVec 32))

(assert (=> b!23858 (= e!15460 e!15459)))

(declare-fun c!3135 () Bool)

(assert (=> b!23858 (= c!3135 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2053 () Bool)

(declare-fun call!2056 () (_ BitVec 32))

(assert (=> bm!2053 (= call!2056 (arrayCountValidKeys!0 (_keys!3163 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8141))))))

(declare-fun d!4099 () Bool)

(declare-fun lt!8821 () (_ BitVec 32))

(assert (=> d!4099 (and (bvsge lt!8821 #b00000000000000000000000000000000) (bvsle lt!8821 (bvsub (size!693 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> d!4099 (= lt!8821 e!15460)))

(declare-fun c!3134 () Bool)

(assert (=> d!4099 (= c!3134 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4099 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 lt!8141)) (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4099 (= (arrayCountValidKeys!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) lt!8821)))

(declare-fun b!23859 () Bool)

(assert (=> b!23859 (= e!15459 (bvadd #b00000000000000000000000000000001 call!2056))))

(declare-fun b!23860 () Bool)

(assert (=> b!23860 (= e!15459 call!2056)))

(assert (= (and d!4099 c!3134) b!23857))

(assert (= (and d!4099 (not c!3134)) b!23858))

(assert (= (and b!23858 c!3135) b!23859))

(assert (= (and b!23858 (not c!3135)) b!23860))

(assert (= (or b!23859 b!23860) bm!2053))

(assert (=> b!23858 m!16934))

(assert (=> b!23858 m!16934))

(assert (=> b!23858 m!16940))

(declare-fun m!17703 () Bool)

(assert (=> bm!2053 m!17703))

(assert (=> d!3979 d!4099))

(declare-fun b!23861 () Bool)

(declare-fun e!15464 () Bool)

(assert (=> b!23861 (= e!15464 (contains!230 lt!8541 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) lt!8522)))))

(declare-fun bm!2054 () Bool)

(declare-fun call!2057 () Bool)

(declare-fun c!3136 () Bool)

(assert (=> bm!2054 (= call!2057 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (bvadd lt!8522 #b00000000000000000000000000000001) (ite c!3136 (Cons!561 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) lt!8522) lt!8541) lt!8541)))))

(declare-fun b!23862 () Bool)

(declare-fun e!15463 () Bool)

(assert (=> b!23862 (= e!15463 call!2057)))

(declare-fun d!4101 () Bool)

(declare-fun res!14614 () Bool)

(declare-fun e!15462 () Bool)

(assert (=> d!4101 (=> res!14614 e!15462)))

(assert (=> d!4101 (= res!14614 (bvsge lt!8522 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(assert (=> d!4101 (= (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!8522 lt!8541) e!15462)))

(declare-fun b!23863 () Bool)

(declare-fun e!15461 () Bool)

(assert (=> b!23863 (= e!15462 e!15461)))

(declare-fun res!14613 () Bool)

(assert (=> b!23863 (=> (not res!14613) (not e!15461))))

(assert (=> b!23863 (= res!14613 (not e!15464))))

(declare-fun res!14612 () Bool)

(assert (=> b!23863 (=> (not res!14612) (not e!15464))))

(assert (=> b!23863 (= res!14612 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) lt!8522)))))

(declare-fun b!23864 () Bool)

(assert (=> b!23864 (= e!15461 e!15463)))

(assert (=> b!23864 (= c!3136 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) lt!8522)))))

(declare-fun b!23865 () Bool)

(assert (=> b!23865 (= e!15463 call!2057)))

(assert (= (and d!4101 (not res!14614)) b!23863))

(assert (= (and b!23863 res!14612) b!23861))

(assert (= (and b!23863 res!14613) b!23864))

(assert (= (and b!23864 c!3136) b!23862))

(assert (= (and b!23864 (not c!3136)) b!23865))

(assert (= (or b!23862 b!23865) bm!2054))

(declare-fun m!17705 () Bool)

(assert (=> b!23861 m!17705))

(assert (=> b!23861 m!17705))

(declare-fun m!17707 () Bool)

(assert (=> b!23861 m!17707))

(assert (=> bm!2054 m!17705))

(declare-fun m!17709 () Bool)

(assert (=> bm!2054 m!17709))

(assert (=> b!23863 m!17705))

(assert (=> b!23863 m!17705))

(declare-fun m!17711 () Bool)

(assert (=> b!23863 m!17711))

(assert (=> b!23864 m!17705))

(assert (=> b!23864 m!17705))

(assert (=> b!23864 m!17711))

(assert (=> d!3979 d!4101))

(declare-fun d!4103 () Bool)

(declare-fun e!15467 () Bool)

(assert (=> d!4103 e!15467))

(declare-fun res!14617 () Bool)

(assert (=> d!4103 (=> (not res!14617) (not e!15467))))

(assert (=> d!4103 (= res!14617 (and (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000000) (bvslt (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (size!693 (_keys!3163 lt!8141)))))))

(declare-fun lt!8824 () Unit!522)

(declare-fun choose!102 ((_ BitVec 64) array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!522)

(assert (=> d!4103 (= lt!8824 (choose!102 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (mask!4729 lt!8141)))))

(assert (=> d!4103 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4103 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (mask!4729 lt!8141)) lt!8824)))

(declare-fun b!23868 () Bool)

(assert (=> b!23868 (= e!15467 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141)))))

(assert (= (and d!4103 res!14617) b!23868))

(declare-fun m!17713 () Bool)

(assert (=> d!4103 m!17713))

(assert (=> d!4103 m!16908))

(assert (=> b!23868 m!17032))

(assert (=> b!23868 m!17020))

(assert (=> d!3979 d!4103))

(declare-fun d!4105 () Bool)

(declare-fun e!15469 () Bool)

(assert (=> d!4105 e!15469))

(declare-fun res!14618 () Bool)

(assert (=> d!4105 (=> res!14618 e!15469)))

(declare-fun lt!8826 () Bool)

(assert (=> d!4105 (= res!14618 (not lt!8826))))

(declare-fun lt!8827 () Bool)

(assert (=> d!4105 (= lt!8826 lt!8827)))

(declare-fun lt!8825 () Unit!522)

(declare-fun e!15468 () Unit!522)

(assert (=> d!4105 (= lt!8825 e!15468)))

(declare-fun c!3137 () Bool)

(assert (=> d!4105 (= c!3137 lt!8827)))

(assert (=> d!4105 (= lt!8827 (containsKey!25 (toList!297 (getCurrentListMap!127 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)))))))

(assert (=> d!4105 (= (contains!229 (getCurrentListMap!127 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)))) lt!8826)))

(declare-fun b!23869 () Bool)

(declare-fun lt!8828 () Unit!522)

(assert (=> b!23869 (= e!15468 lt!8828)))

(assert (=> b!23869 (= lt!8828 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (getCurrentListMap!127 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)))))))

(assert (=> b!23869 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)))))))

(declare-fun b!23870 () Bool)

(declare-fun Unit!553 () Unit!522)

(assert (=> b!23870 (= e!15468 Unit!553)))

(declare-fun b!23871 () Bool)

(assert (=> b!23871 (= e!15469 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))))))))

(assert (= (and d!4105 c!3137) b!23869))

(assert (= (and d!4105 (not c!3137)) b!23870))

(assert (= (and d!4105 (not res!14618)) b!23871))

(assert (=> d!4105 m!17024))

(declare-fun m!17715 () Bool)

(assert (=> d!4105 m!17715))

(assert (=> b!23869 m!17024))

(declare-fun m!17717 () Bool)

(assert (=> b!23869 m!17717))

(assert (=> b!23869 m!17024))

(declare-fun m!17719 () Bool)

(assert (=> b!23869 m!17719))

(assert (=> b!23869 m!17719))

(declare-fun m!17721 () Bool)

(assert (=> b!23869 m!17721))

(assert (=> b!23871 m!17024))

(assert (=> b!23871 m!17719))

(assert (=> b!23871 m!17719))

(assert (=> b!23871 m!17721))

(assert (=> d!3979 d!4105))

(assert (=> d!3979 d!3977))

(declare-fun d!4107 () Bool)

(assert (=> d!4107 (= (arrayCountValidKeys!0 lt!8545 (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (bvadd (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!8831 () Unit!522)

(declare-fun choose!2 (array!1263 (_ BitVec 32)) Unit!522)

(assert (=> d!4107 (= lt!8831 (choose!2 lt!8545 (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))))))

(declare-fun e!15472 () Bool)

(assert (=> d!4107 e!15472))

(declare-fun res!14623 () Bool)

(assert (=> d!4107 (=> (not res!14623) (not e!15472))))

(assert (=> d!4107 (= res!14623 (and (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000000) (bvslt (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (size!693 lt!8545))))))

(assert (=> d!4107 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!8545 (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))) lt!8831)))

(declare-fun b!23876 () Bool)

(declare-fun res!14624 () Bool)

(assert (=> b!23876 (=> (not res!14624) (not e!15472))))

(assert (=> b!23876 (= res!14624 (validKeyInArray!0 (select (arr!597 lt!8545) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)))))))

(declare-fun b!23877 () Bool)

(assert (=> b!23877 (= e!15472 (bvslt (size!693 lt!8545) #b01111111111111111111111111111111))))

(assert (= (and d!4107 res!14623) b!23876))

(assert (= (and b!23876 res!14624) b!23877))

(assert (=> d!4107 m!17000))

(declare-fun m!17723 () Bool)

(assert (=> d!4107 m!17723))

(declare-fun m!17725 () Bool)

(assert (=> b!23876 m!17725))

(assert (=> b!23876 m!17725))

(declare-fun m!17727 () Bool)

(assert (=> b!23876 m!17727))

(assert (=> d!3979 d!4107))

(declare-fun d!4109 () Bool)

(declare-fun e!15473 () Bool)

(assert (=> d!4109 e!15473))

(declare-fun res!14626 () Bool)

(assert (=> d!4109 (=> (not res!14626) (not e!15473))))

(declare-fun lt!8835 () ListLongMap!563)

(assert (=> d!4109 (= res!14626 (contains!229 lt!8835 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun lt!8833 () List!564)

(assert (=> d!4109 (= lt!8835 (ListLongMap!564 lt!8833))))

(declare-fun lt!8832 () Unit!522)

(declare-fun lt!8834 () Unit!522)

(assert (=> d!4109 (= lt!8832 lt!8834)))

(assert (=> d!4109 (= (getValueByKey!61 lt!8833 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4109 (= lt!8834 (lemmaContainsTupThenGetReturnValue!18 lt!8833 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4109 (= lt!8833 (insertStrictlySorted!18 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4109 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!8835)))

(declare-fun b!23878 () Bool)

(declare-fun res!14625 () Bool)

(assert (=> b!23878 (=> (not res!14625) (not e!15473))))

(assert (=> b!23878 (= res!14625 (= (getValueByKey!61 (toList!297 lt!8835) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!23879 () Bool)

(assert (=> b!23879 (= e!15473 (contains!231 (toList!297 lt!8835) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (= (and d!4109 res!14626) b!23878))

(assert (= (and b!23878 res!14625) b!23879))

(declare-fun m!17729 () Bool)

(assert (=> d!4109 m!17729))

(declare-fun m!17731 () Bool)

(assert (=> d!4109 m!17731))

(declare-fun m!17733 () Bool)

(assert (=> d!4109 m!17733))

(declare-fun m!17735 () Bool)

(assert (=> d!4109 m!17735))

(declare-fun m!17737 () Bool)

(assert (=> b!23878 m!17737))

(declare-fun m!17739 () Bool)

(assert (=> b!23879 m!17739))

(assert (=> d!3979 d!4109))

(declare-fun d!4111 () Bool)

(declare-fun res!14627 () Bool)

(declare-fun e!15474 () Bool)

(assert (=> d!4111 (=> res!14627 e!15474)))

(assert (=> d!4111 (= res!14627 (= (select (arr!597 lt!8526) #b00000000000000000000000000000000) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4111 (= (arrayContainsKey!0 lt!8526 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000) e!15474)))

(declare-fun b!23880 () Bool)

(declare-fun e!15475 () Bool)

(assert (=> b!23880 (= e!15474 e!15475)))

(declare-fun res!14628 () Bool)

(assert (=> b!23880 (=> (not res!14628) (not e!15475))))

(assert (=> b!23880 (= res!14628 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 lt!8526)))))

(declare-fun b!23881 () Bool)

(assert (=> b!23881 (= e!15475 (arrayContainsKey!0 lt!8526 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4111 (not res!14627)) b!23880))

(assert (= (and b!23880 res!14628) b!23881))

(declare-fun m!17741 () Bool)

(assert (=> d!4111 m!17741))

(declare-fun m!17743 () Bool)

(assert (=> b!23881 m!17743))

(assert (=> d!3979 d!4111))

(declare-fun b!23882 () Bool)

(declare-fun e!15477 () (_ BitVec 32))

(assert (=> b!23882 (= e!15477 #b00000000000000000000000000000000)))

(declare-fun b!23883 () Bool)

(declare-fun e!15476 () (_ BitVec 32))

(assert (=> b!23883 (= e!15477 e!15476)))

(declare-fun c!3139 () Bool)

(assert (=> b!23883 (= c!3139 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(declare-fun call!2058 () (_ BitVec 32))

(declare-fun bm!2055 () Bool)

(assert (=> bm!2055 (= call!2058 (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8141))))))

(declare-fun lt!8836 () (_ BitVec 32))

(declare-fun d!4113 () Bool)

(assert (=> d!4113 (and (bvsge lt!8836 #b00000000000000000000000000000000) (bvsle lt!8836 (bvsub (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(assert (=> d!4113 (= lt!8836 e!15477)))

(declare-fun c!3138 () Bool)

(assert (=> d!4113 (= c!3138 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4113 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 lt!8141)) (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(assert (=> d!4113 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) lt!8836)))

(declare-fun b!23884 () Bool)

(assert (=> b!23884 (= e!15476 (bvadd #b00000000000000000000000000000001 call!2058))))

(declare-fun b!23885 () Bool)

(assert (=> b!23885 (= e!15476 call!2058)))

(assert (= (and d!4113 c!3138) b!23882))

(assert (= (and d!4113 (not c!3138)) b!23883))

(assert (= (and b!23883 c!3139) b!23884))

(assert (= (and b!23883 (not c!3139)) b!23885))

(assert (= (or b!23884 b!23885) bm!2055))

(declare-fun m!17745 () Bool)

(assert (=> b!23883 m!17745))

(assert (=> b!23883 m!17745))

(declare-fun m!17747 () Bool)

(assert (=> b!23883 m!17747))

(declare-fun m!17749 () Bool)

(assert (=> bm!2055 m!17749))

(assert (=> d!3979 d!4113))

(declare-fun b!23886 () Bool)

(declare-fun e!15486 () ListLongMap!563)

(declare-fun call!2061 () ListLongMap!563)

(assert (=> b!23886 (= e!15486 call!2061)))

(declare-fun b!23887 () Bool)

(declare-fun e!15489 () Bool)

(declare-fun lt!8848 () ListLongMap!563)

(assert (=> b!23887 (= e!15489 (= (apply!29 lt!8848 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun e!15478 () Bool)

(declare-fun b!23888 () Bool)

(assert (=> b!23888 (= e!15478 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(declare-fun bm!2056 () Bool)

(declare-fun call!2064 () ListLongMap!563)

(assert (=> bm!2056 (= call!2064 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23889 () Bool)

(declare-fun e!15483 () ListLongMap!563)

(assert (=> b!23889 (= e!15483 e!15486)))

(declare-fun c!3144 () Bool)

(assert (=> b!23889 (= c!3144 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23890 () Bool)

(declare-fun e!15488 () Bool)

(declare-fun call!2060 () Bool)

(assert (=> b!23890 (= e!15488 (not call!2060))))

(declare-fun b!23891 () Bool)

(declare-fun e!15485 () Bool)

(assert (=> b!23891 (= e!15485 e!15489)))

(declare-fun res!14634 () Bool)

(declare-fun call!2062 () Bool)

(assert (=> b!23891 (= res!14634 call!2062)))

(assert (=> b!23891 (=> (not res!14634) (not e!15489))))

(declare-fun bm!2057 () Bool)

(declare-fun call!2063 () ListLongMap!563)

(assert (=> bm!2057 (= call!2061 call!2063)))

(declare-fun b!23893 () Bool)

(assert (=> b!23893 (= e!15485 (not call!2062))))

(declare-fun bm!2058 () Bool)

(declare-fun call!2059 () ListLongMap!563)

(assert (=> bm!2058 (= call!2059 call!2064)))

(declare-fun b!23894 () Bool)

(declare-fun e!15484 () Bool)

(assert (=> b!23894 (= e!15484 e!15485)))

(declare-fun c!3145 () Bool)

(assert (=> b!23894 (= c!3145 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23895 () Bool)

(declare-fun e!15479 () Unit!522)

(declare-fun lt!8837 () Unit!522)

(assert (=> b!23895 (= e!15479 lt!8837)))

(declare-fun lt!8853 () ListLongMap!563)

(assert (=> b!23895 (= lt!8853 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8856 () (_ BitVec 64))

(assert (=> b!23895 (= lt!8856 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8851 () (_ BitVec 64))

(assert (=> b!23895 (= lt!8851 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(declare-fun lt!8841 () Unit!522)

(assert (=> b!23895 (= lt!8841 (addStillContains!14 lt!8853 lt!8856 (zeroValue!1665 lt!8141) lt!8851))))

(assert (=> b!23895 (contains!229 (+!44 lt!8853 (tuple2!973 lt!8856 (zeroValue!1665 lt!8141))) lt!8851)))

(declare-fun lt!8842 () Unit!522)

(assert (=> b!23895 (= lt!8842 lt!8841)))

(declare-fun lt!8854 () ListLongMap!563)

(assert (=> b!23895 (= lt!8854 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8840 () (_ BitVec 64))

(assert (=> b!23895 (= lt!8840 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8838 () (_ BitVec 64))

(assert (=> b!23895 (= lt!8838 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(declare-fun lt!8847 () Unit!522)

(assert (=> b!23895 (= lt!8847 (addApplyDifferent!14 lt!8854 lt!8840 (minValue!1665 lt!8141) lt!8838))))

(assert (=> b!23895 (= (apply!29 (+!44 lt!8854 (tuple2!973 lt!8840 (minValue!1665 lt!8141))) lt!8838) (apply!29 lt!8854 lt!8838))))

(declare-fun lt!8845 () Unit!522)

(assert (=> b!23895 (= lt!8845 lt!8847)))

(declare-fun lt!8843 () ListLongMap!563)

(assert (=> b!23895 (= lt!8843 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8858 () (_ BitVec 64))

(assert (=> b!23895 (= lt!8858 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8850 () (_ BitVec 64))

(assert (=> b!23895 (= lt!8850 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(declare-fun lt!8839 () Unit!522)

(assert (=> b!23895 (= lt!8839 (addApplyDifferent!14 lt!8843 lt!8858 (zeroValue!1665 lt!8141) lt!8850))))

(assert (=> b!23895 (= (apply!29 (+!44 lt!8843 (tuple2!973 lt!8858 (zeroValue!1665 lt!8141))) lt!8850) (apply!29 lt!8843 lt!8850))))

(declare-fun lt!8852 () Unit!522)

(assert (=> b!23895 (= lt!8852 lt!8839)))

(declare-fun lt!8857 () ListLongMap!563)

(assert (=> b!23895 (= lt!8857 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8855 () (_ BitVec 64))

(assert (=> b!23895 (= lt!8855 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8849 () (_ BitVec 64))

(assert (=> b!23895 (= lt!8849 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(assert (=> b!23895 (= lt!8837 (addApplyDifferent!14 lt!8857 lt!8855 (minValue!1665 lt!8141) lt!8849))))

(assert (=> b!23895 (= (apply!29 (+!44 lt!8857 (tuple2!973 lt!8855 (minValue!1665 lt!8141))) lt!8849) (apply!29 lt!8857 lt!8849))))

(declare-fun bm!2059 () Bool)

(declare-fun c!3143 () Bool)

(declare-fun call!2065 () ListLongMap!563)

(assert (=> bm!2059 (= call!2063 (+!44 (ite c!3143 call!2064 (ite c!3144 call!2059 call!2065)) (ite (or c!3143 c!3144) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!23896 () Bool)

(declare-fun Unit!554 () Unit!522)

(assert (=> b!23896 (= e!15479 Unit!554)))

(declare-fun b!23897 () Bool)

(declare-fun e!15481 () Bool)

(assert (=> b!23897 (= e!15488 e!15481)))

(declare-fun res!14632 () Bool)

(assert (=> b!23897 (= res!14632 call!2060)))

(assert (=> b!23897 (=> (not res!14632) (not e!15481))))

(declare-fun bm!2060 () Bool)

(assert (=> bm!2060 (= call!2065 call!2059)))

(declare-fun b!23898 () Bool)

(declare-fun res!14633 () Bool)

(assert (=> b!23898 (=> (not res!14633) (not e!15484))))

(declare-fun e!15482 () Bool)

(assert (=> b!23898 (= res!14633 e!15482)))

(declare-fun res!14629 () Bool)

(assert (=> b!23898 (=> res!14629 e!15482)))

(declare-fun e!15487 () Bool)

(assert (=> b!23898 (= res!14629 (not e!15487))))

(declare-fun res!14636 () Bool)

(assert (=> b!23898 (=> (not res!14636) (not e!15487))))

(assert (=> b!23898 (= res!14636 (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(declare-fun b!23899 () Bool)

(declare-fun e!15480 () Bool)

(assert (=> b!23899 (= e!15482 e!15480)))

(declare-fun res!14630 () Bool)

(assert (=> b!23899 (=> (not res!14630) (not e!15480))))

(assert (=> b!23899 (= res!14630 (contains!229 lt!8848 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(assert (=> b!23899 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(declare-fun b!23900 () Bool)

(assert (=> b!23900 (= e!15487 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(declare-fun b!23901 () Bool)

(declare-fun e!15490 () ListLongMap!563)

(assert (=> b!23901 (= e!15490 call!2061)))

(declare-fun b!23902 () Bool)

(assert (=> b!23902 (= e!15483 (+!44 call!2063 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun d!4115 () Bool)

(assert (=> d!4115 e!15484))

(declare-fun res!14635 () Bool)

(assert (=> d!4115 (=> (not res!14635) (not e!15484))))

(assert (=> d!4115 (= res!14635 (or (bvsge #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))))

(declare-fun lt!8846 () ListLongMap!563)

(assert (=> d!4115 (= lt!8848 lt!8846)))

(declare-fun lt!8844 () Unit!522)

(assert (=> d!4115 (= lt!8844 e!15479)))

(declare-fun c!3141 () Bool)

(assert (=> d!4115 (= c!3141 e!15478)))

(declare-fun res!14637 () Bool)

(assert (=> d!4115 (=> (not res!14637) (not e!15478))))

(assert (=> d!4115 (= res!14637 (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(assert (=> d!4115 (= lt!8846 e!15483)))

(assert (=> d!4115 (= c!3143 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4115 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4115 (= (getCurrentListMap!127 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8848)))

(declare-fun b!23892 () Bool)

(assert (=> b!23892 (= e!15480 (= (apply!29 lt!8848 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23892 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))))))

(assert (=> b!23892 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(declare-fun bm!2061 () Bool)

(assert (=> bm!2061 (= call!2062 (contains!229 lt!8848 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23903 () Bool)

(declare-fun res!14631 () Bool)

(assert (=> b!23903 (=> (not res!14631) (not e!15484))))

(assert (=> b!23903 (= res!14631 e!15488)))

(declare-fun c!3140 () Bool)

(assert (=> b!23903 (= c!3140 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!23904 () Bool)

(assert (=> b!23904 (= e!15481 (= (apply!29 lt!8848 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun b!23905 () Bool)

(assert (=> b!23905 (= e!15490 call!2065)))

(declare-fun b!23906 () Bool)

(declare-fun c!3142 () Bool)

(assert (=> b!23906 (= c!3142 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23906 (= e!15486 e!15490)))

(declare-fun bm!2062 () Bool)

(assert (=> bm!2062 (= call!2060 (contains!229 lt!8848 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4115 c!3143) b!23902))

(assert (= (and d!4115 (not c!3143)) b!23889))

(assert (= (and b!23889 c!3144) b!23886))

(assert (= (and b!23889 (not c!3144)) b!23906))

(assert (= (and b!23906 c!3142) b!23901))

(assert (= (and b!23906 (not c!3142)) b!23905))

(assert (= (or b!23901 b!23905) bm!2060))

(assert (= (or b!23886 bm!2060) bm!2058))

(assert (= (or b!23886 b!23901) bm!2057))

(assert (= (or b!23902 bm!2058) bm!2056))

(assert (= (or b!23902 bm!2057) bm!2059))

(assert (= (and d!4115 res!14637) b!23888))

(assert (= (and d!4115 c!3141) b!23895))

(assert (= (and d!4115 (not c!3141)) b!23896))

(assert (= (and d!4115 res!14635) b!23898))

(assert (= (and b!23898 res!14636) b!23900))

(assert (= (and b!23898 (not res!14629)) b!23899))

(assert (= (and b!23899 res!14630) b!23892))

(assert (= (and b!23898 res!14633) b!23903))

(assert (= (and b!23903 c!3140) b!23897))

(assert (= (and b!23903 (not c!3140)) b!23890))

(assert (= (and b!23897 res!14632) b!23904))

(assert (= (or b!23897 b!23890) bm!2062))

(assert (= (and b!23903 res!14631) b!23894))

(assert (= (and b!23894 c!3145) b!23891))

(assert (= (and b!23894 (not c!3145)) b!23893))

(assert (= (and b!23891 res!14634) b!23887))

(assert (= (or b!23891 b!23893) bm!2061))

(declare-fun b_lambda!1585 () Bool)

(assert (=> (not b_lambda!1585) (not b!23892)))

(assert (=> b!23892 t!3232))

(declare-fun b_and!1497 () Bool)

(assert (= b_and!1495 (and (=> t!3232 result!1093) b_and!1497)))

(declare-fun m!17751 () Bool)

(assert (=> b!23904 m!17751))

(declare-fun m!17753 () Bool)

(assert (=> bm!2059 m!17753))

(declare-fun m!17755 () Bool)

(assert (=> b!23892 m!17755))

(assert (=> b!23892 m!17755))

(assert (=> b!23892 m!16930))

(declare-fun m!17757 () Bool)

(assert (=> b!23892 m!17757))

(assert (=> b!23892 m!17745))

(assert (=> b!23892 m!16930))

(assert (=> b!23892 m!17745))

(declare-fun m!17759 () Bool)

(assert (=> b!23892 m!17759))

(declare-fun m!17761 () Bool)

(assert (=> bm!2061 m!17761))

(assert (=> b!23900 m!17745))

(assert (=> b!23900 m!17745))

(assert (=> b!23900 m!17747))

(declare-fun m!17763 () Bool)

(assert (=> bm!2056 m!17763))

(declare-fun m!17765 () Bool)

(assert (=> b!23895 m!17765))

(declare-fun m!17767 () Bool)

(assert (=> b!23895 m!17767))

(declare-fun m!17769 () Bool)

(assert (=> b!23895 m!17769))

(declare-fun m!17771 () Bool)

(assert (=> b!23895 m!17771))

(declare-fun m!17773 () Bool)

(assert (=> b!23895 m!17773))

(declare-fun m!17775 () Bool)

(assert (=> b!23895 m!17775))

(assert (=> b!23895 m!17765))

(declare-fun m!17777 () Bool)

(assert (=> b!23895 m!17777))

(declare-fun m!17779 () Bool)

(assert (=> b!23895 m!17779))

(declare-fun m!17781 () Bool)

(assert (=> b!23895 m!17781))

(declare-fun m!17783 () Bool)

(assert (=> b!23895 m!17783))

(declare-fun m!17785 () Bool)

(assert (=> b!23895 m!17785))

(assert (=> b!23895 m!17763))

(assert (=> b!23895 m!17745))

(declare-fun m!17787 () Bool)

(assert (=> b!23895 m!17787))

(assert (=> b!23895 m!17779))

(declare-fun m!17789 () Bool)

(assert (=> b!23895 m!17789))

(declare-fun m!17791 () Bool)

(assert (=> b!23895 m!17791))

(assert (=> b!23895 m!17769))

(assert (=> b!23895 m!17775))

(declare-fun m!17793 () Bool)

(assert (=> b!23895 m!17793))

(assert (=> b!23899 m!17745))

(assert (=> b!23899 m!17745))

(declare-fun m!17795 () Bool)

(assert (=> b!23899 m!17795))

(declare-fun m!17797 () Bool)

(assert (=> b!23887 m!17797))

(declare-fun m!17799 () Bool)

(assert (=> b!23902 m!17799))

(declare-fun m!17801 () Bool)

(assert (=> bm!2062 m!17801))

(assert (=> d!4115 m!16908))

(assert (=> b!23888 m!17745))

(assert (=> b!23888 m!17745))

(assert (=> b!23888 m!17747))

(assert (=> d!3979 d!4115))

(declare-fun b!23907 () Bool)

(declare-fun e!15499 () ListLongMap!563)

(declare-fun call!2068 () ListLongMap!563)

(assert (=> b!23907 (= e!15499 call!2068)))

(declare-fun b!23908 () Bool)

(declare-fun e!15502 () Bool)

(declare-fun lt!8870 () ListLongMap!563)

(assert (=> b!23908 (= e!15502 (= (apply!29 lt!8870 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!23909 () Bool)

(declare-fun e!15491 () Bool)

(assert (=> b!23909 (= e!15491 (validKeyInArray!0 (select (arr!597 lt!8536) #b00000000000000000000000000000000)))))

(declare-fun call!2071 () ListLongMap!563)

(declare-fun bm!2063 () Bool)

(assert (=> bm!2063 (= call!2071 (getCurrentListMapNoExtraKeys!15 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23910 () Bool)

(declare-fun e!15496 () ListLongMap!563)

(assert (=> b!23910 (= e!15496 e!15499)))

(declare-fun c!3150 () Bool)

(assert (=> b!23910 (= c!3150 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23911 () Bool)

(declare-fun e!15501 () Bool)

(declare-fun call!2067 () Bool)

(assert (=> b!23911 (= e!15501 (not call!2067))))

(declare-fun b!23912 () Bool)

(declare-fun e!15498 () Bool)

(assert (=> b!23912 (= e!15498 e!15502)))

(declare-fun res!14643 () Bool)

(declare-fun call!2069 () Bool)

(assert (=> b!23912 (= res!14643 call!2069)))

(assert (=> b!23912 (=> (not res!14643) (not e!15502))))

(declare-fun bm!2064 () Bool)

(declare-fun call!2070 () ListLongMap!563)

(assert (=> bm!2064 (= call!2068 call!2070)))

(declare-fun b!23914 () Bool)

(assert (=> b!23914 (= e!15498 (not call!2069))))

(declare-fun bm!2065 () Bool)

(declare-fun call!2066 () ListLongMap!563)

(assert (=> bm!2065 (= call!2066 call!2071)))

(declare-fun b!23915 () Bool)

(declare-fun e!15497 () Bool)

(assert (=> b!23915 (= e!15497 e!15498)))

(declare-fun c!3151 () Bool)

(assert (=> b!23915 (= c!3151 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23916 () Bool)

(declare-fun e!15492 () Unit!522)

(declare-fun lt!8859 () Unit!522)

(assert (=> b!23916 (= e!15492 lt!8859)))

(declare-fun lt!8875 () ListLongMap!563)

(assert (=> b!23916 (= lt!8875 (getCurrentListMapNoExtraKeys!15 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8878 () (_ BitVec 64))

(assert (=> b!23916 (= lt!8878 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8873 () (_ BitVec 64))

(assert (=> b!23916 (= lt!8873 (select (arr!597 lt!8536) #b00000000000000000000000000000000))))

(declare-fun lt!8863 () Unit!522)

(assert (=> b!23916 (= lt!8863 (addStillContains!14 lt!8875 lt!8878 (zeroValue!1665 lt!8141) lt!8873))))

(assert (=> b!23916 (contains!229 (+!44 lt!8875 (tuple2!973 lt!8878 (zeroValue!1665 lt!8141))) lt!8873)))

(declare-fun lt!8864 () Unit!522)

(assert (=> b!23916 (= lt!8864 lt!8863)))

(declare-fun lt!8876 () ListLongMap!563)

(assert (=> b!23916 (= lt!8876 (getCurrentListMapNoExtraKeys!15 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8862 () (_ BitVec 64))

(assert (=> b!23916 (= lt!8862 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8860 () (_ BitVec 64))

(assert (=> b!23916 (= lt!8860 (select (arr!597 lt!8536) #b00000000000000000000000000000000))))

(declare-fun lt!8869 () Unit!522)

(assert (=> b!23916 (= lt!8869 (addApplyDifferent!14 lt!8876 lt!8862 (minValue!1665 lt!8141) lt!8860))))

(assert (=> b!23916 (= (apply!29 (+!44 lt!8876 (tuple2!973 lt!8862 (minValue!1665 lt!8141))) lt!8860) (apply!29 lt!8876 lt!8860))))

(declare-fun lt!8867 () Unit!522)

(assert (=> b!23916 (= lt!8867 lt!8869)))

(declare-fun lt!8865 () ListLongMap!563)

(assert (=> b!23916 (= lt!8865 (getCurrentListMapNoExtraKeys!15 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8880 () (_ BitVec 64))

(assert (=> b!23916 (= lt!8880 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8872 () (_ BitVec 64))

(assert (=> b!23916 (= lt!8872 (select (arr!597 lt!8536) #b00000000000000000000000000000000))))

(declare-fun lt!8861 () Unit!522)

(assert (=> b!23916 (= lt!8861 (addApplyDifferent!14 lt!8865 lt!8880 (zeroValue!1665 lt!8141) lt!8872))))

(assert (=> b!23916 (= (apply!29 (+!44 lt!8865 (tuple2!973 lt!8880 (zeroValue!1665 lt!8141))) lt!8872) (apply!29 lt!8865 lt!8872))))

(declare-fun lt!8874 () Unit!522)

(assert (=> b!23916 (= lt!8874 lt!8861)))

(declare-fun lt!8879 () ListLongMap!563)

(assert (=> b!23916 (= lt!8879 (getCurrentListMapNoExtraKeys!15 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8877 () (_ BitVec 64))

(assert (=> b!23916 (= lt!8877 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8871 () (_ BitVec 64))

(assert (=> b!23916 (= lt!8871 (select (arr!597 lt!8536) #b00000000000000000000000000000000))))

(assert (=> b!23916 (= lt!8859 (addApplyDifferent!14 lt!8879 lt!8877 (minValue!1665 lt!8141) lt!8871))))

(assert (=> b!23916 (= (apply!29 (+!44 lt!8879 (tuple2!973 lt!8877 (minValue!1665 lt!8141))) lt!8871) (apply!29 lt!8879 lt!8871))))

(declare-fun bm!2066 () Bool)

(declare-fun call!2072 () ListLongMap!563)

(declare-fun c!3149 () Bool)

(assert (=> bm!2066 (= call!2070 (+!44 (ite c!3149 call!2071 (ite c!3150 call!2066 call!2072)) (ite (or c!3149 c!3150) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!23917 () Bool)

(declare-fun Unit!555 () Unit!522)

(assert (=> b!23917 (= e!15492 Unit!555)))

(declare-fun b!23918 () Bool)

(declare-fun e!15494 () Bool)

(assert (=> b!23918 (= e!15501 e!15494)))

(declare-fun res!14641 () Bool)

(assert (=> b!23918 (= res!14641 call!2067)))

(assert (=> b!23918 (=> (not res!14641) (not e!15494))))

(declare-fun bm!2067 () Bool)

(assert (=> bm!2067 (= call!2072 call!2066)))

(declare-fun b!23919 () Bool)

(declare-fun res!14642 () Bool)

(assert (=> b!23919 (=> (not res!14642) (not e!15497))))

(declare-fun e!15495 () Bool)

(assert (=> b!23919 (= res!14642 e!15495)))

(declare-fun res!14638 () Bool)

(assert (=> b!23919 (=> res!14638 e!15495)))

(declare-fun e!15500 () Bool)

(assert (=> b!23919 (= res!14638 (not e!15500))))

(declare-fun res!14645 () Bool)

(assert (=> b!23919 (=> (not res!14645) (not e!15500))))

(assert (=> b!23919 (= res!14645 (bvslt #b00000000000000000000000000000000 (size!693 lt!8536)))))

(declare-fun b!23920 () Bool)

(declare-fun e!15493 () Bool)

(assert (=> b!23920 (= e!15495 e!15493)))

(declare-fun res!14639 () Bool)

(assert (=> b!23920 (=> (not res!14639) (not e!15493))))

(assert (=> b!23920 (= res!14639 (contains!229 lt!8870 (select (arr!597 lt!8536) #b00000000000000000000000000000000)))))

(assert (=> b!23920 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8536)))))

(declare-fun b!23921 () Bool)

(assert (=> b!23921 (= e!15500 (validKeyInArray!0 (select (arr!597 lt!8536) #b00000000000000000000000000000000)))))

(declare-fun b!23922 () Bool)

(declare-fun e!15503 () ListLongMap!563)

(assert (=> b!23922 (= e!15503 call!2068)))

(declare-fun b!23923 () Bool)

(assert (=> b!23923 (= e!15496 (+!44 call!2070 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun d!4117 () Bool)

(assert (=> d!4117 e!15497))

(declare-fun res!14644 () Bool)

(assert (=> d!4117 (=> (not res!14644) (not e!15497))))

(assert (=> d!4117 (= res!14644 (or (bvsge #b00000000000000000000000000000000 (size!693 lt!8536)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8536)))))))

(declare-fun lt!8868 () ListLongMap!563)

(assert (=> d!4117 (= lt!8870 lt!8868)))

(declare-fun lt!8866 () Unit!522)

(assert (=> d!4117 (= lt!8866 e!15492)))

(declare-fun c!3147 () Bool)

(assert (=> d!4117 (= c!3147 e!15491)))

(declare-fun res!14646 () Bool)

(assert (=> d!4117 (=> (not res!14646) (not e!15491))))

(assert (=> d!4117 (= res!14646 (bvslt #b00000000000000000000000000000000 (size!693 lt!8536)))))

(assert (=> d!4117 (= lt!8868 e!15496)))

(assert (=> d!4117 (= c!3149 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4117 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4117 (= (getCurrentListMap!127 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8870)))

(declare-fun b!23913 () Bool)

(assert (=> b!23913 (= e!15493 (= (apply!29 lt!8870 (select (arr!597 lt!8536) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8521) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23913 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8521)))))

(assert (=> b!23913 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8536)))))

(declare-fun bm!2068 () Bool)

(assert (=> bm!2068 (= call!2069 (contains!229 lt!8870 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23924 () Bool)

(declare-fun res!14640 () Bool)

(assert (=> b!23924 (=> (not res!14640) (not e!15497))))

(assert (=> b!23924 (= res!14640 e!15501)))

(declare-fun c!3146 () Bool)

(assert (=> b!23924 (= c!3146 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!23925 () Bool)

(assert (=> b!23925 (= e!15494 (= (apply!29 lt!8870 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun b!23926 () Bool)

(assert (=> b!23926 (= e!15503 call!2072)))

(declare-fun b!23927 () Bool)

(declare-fun c!3148 () Bool)

(assert (=> b!23927 (= c!3148 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23927 (= e!15499 e!15503)))

(declare-fun bm!2069 () Bool)

(assert (=> bm!2069 (= call!2067 (contains!229 lt!8870 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4117 c!3149) b!23923))

(assert (= (and d!4117 (not c!3149)) b!23910))

(assert (= (and b!23910 c!3150) b!23907))

(assert (= (and b!23910 (not c!3150)) b!23927))

(assert (= (and b!23927 c!3148) b!23922))

(assert (= (and b!23927 (not c!3148)) b!23926))

(assert (= (or b!23922 b!23926) bm!2067))

(assert (= (or b!23907 bm!2067) bm!2065))

(assert (= (or b!23907 b!23922) bm!2064))

(assert (= (or b!23923 bm!2065) bm!2063))

(assert (= (or b!23923 bm!2064) bm!2066))

(assert (= (and d!4117 res!14646) b!23909))

(assert (= (and d!4117 c!3147) b!23916))

(assert (= (and d!4117 (not c!3147)) b!23917))

(assert (= (and d!4117 res!14644) b!23919))

(assert (= (and b!23919 res!14645) b!23921))

(assert (= (and b!23919 (not res!14638)) b!23920))

(assert (= (and b!23920 res!14639) b!23913))

(assert (= (and b!23919 res!14642) b!23924))

(assert (= (and b!23924 c!3146) b!23918))

(assert (= (and b!23924 (not c!3146)) b!23911))

(assert (= (and b!23918 res!14641) b!23925))

(assert (= (or b!23918 b!23911) bm!2069))

(assert (= (and b!23924 res!14640) b!23915))

(assert (= (and b!23915 c!3151) b!23912))

(assert (= (and b!23915 (not c!3151)) b!23914))

(assert (= (and b!23912 res!14643) b!23908))

(assert (= (or b!23912 b!23914) bm!2068))

(declare-fun b_lambda!1587 () Bool)

(assert (=> (not b_lambda!1587) (not b!23913)))

(assert (=> b!23913 t!3232))

(declare-fun b_and!1499 () Bool)

(assert (= b_and!1497 (and (=> t!3232 result!1093) b_and!1499)))

(declare-fun m!17803 () Bool)

(assert (=> b!23925 m!17803))

(declare-fun m!17805 () Bool)

(assert (=> bm!2066 m!17805))

(declare-fun m!17807 () Bool)

(assert (=> b!23913 m!17807))

(assert (=> b!23913 m!17807))

(assert (=> b!23913 m!16930))

(declare-fun m!17809 () Bool)

(assert (=> b!23913 m!17809))

(declare-fun m!17811 () Bool)

(assert (=> b!23913 m!17811))

(assert (=> b!23913 m!16930))

(assert (=> b!23913 m!17811))

(declare-fun m!17813 () Bool)

(assert (=> b!23913 m!17813))

(declare-fun m!17815 () Bool)

(assert (=> bm!2068 m!17815))

(assert (=> b!23921 m!17811))

(assert (=> b!23921 m!17811))

(declare-fun m!17817 () Bool)

(assert (=> b!23921 m!17817))

(declare-fun m!17819 () Bool)

(assert (=> bm!2063 m!17819))

(declare-fun m!17821 () Bool)

(assert (=> b!23916 m!17821))

(declare-fun m!17823 () Bool)

(assert (=> b!23916 m!17823))

(declare-fun m!17825 () Bool)

(assert (=> b!23916 m!17825))

(declare-fun m!17827 () Bool)

(assert (=> b!23916 m!17827))

(declare-fun m!17829 () Bool)

(assert (=> b!23916 m!17829))

(declare-fun m!17831 () Bool)

(assert (=> b!23916 m!17831))

(assert (=> b!23916 m!17821))

(declare-fun m!17833 () Bool)

(assert (=> b!23916 m!17833))

(declare-fun m!17835 () Bool)

(assert (=> b!23916 m!17835))

(declare-fun m!17837 () Bool)

(assert (=> b!23916 m!17837))

(declare-fun m!17839 () Bool)

(assert (=> b!23916 m!17839))

(declare-fun m!17841 () Bool)

(assert (=> b!23916 m!17841))

(assert (=> b!23916 m!17819))

(assert (=> b!23916 m!17811))

(declare-fun m!17843 () Bool)

(assert (=> b!23916 m!17843))

(assert (=> b!23916 m!17835))

(declare-fun m!17845 () Bool)

(assert (=> b!23916 m!17845))

(declare-fun m!17847 () Bool)

(assert (=> b!23916 m!17847))

(assert (=> b!23916 m!17825))

(assert (=> b!23916 m!17831))

(declare-fun m!17849 () Bool)

(assert (=> b!23916 m!17849))

(assert (=> b!23920 m!17811))

(assert (=> b!23920 m!17811))

(declare-fun m!17851 () Bool)

(assert (=> b!23920 m!17851))

(declare-fun m!17853 () Bool)

(assert (=> b!23908 m!17853))

(declare-fun m!17855 () Bool)

(assert (=> b!23923 m!17855))

(declare-fun m!17857 () Bool)

(assert (=> bm!2069 m!17857))

(assert (=> d!4117 m!16908))

(assert (=> b!23909 m!17811))

(assert (=> b!23909 m!17811))

(assert (=> b!23909 m!17817))

(assert (=> d!3979 d!4117))

(declare-fun d!4119 () Bool)

(declare-fun e!15506 () Bool)

(assert (=> d!4119 e!15506))

(declare-fun res!14649 () Bool)

(assert (=> d!4119 (=> (not res!14649) (not e!15506))))

(assert (=> d!4119 (= res!14649 (and (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000000) (bvslt (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (size!693 (_keys!3163 lt!8141)))))))

(declare-fun lt!8883 () Unit!522)

(declare-fun choose!41 (array!1263 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!565) Unit!522)

(assert (=> d!4119 (= lt!8883 (choose!41 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) lt!8522 lt!8541))))

(assert (=> d!4119 (bvslt (size!693 (_keys!3163 lt!8141)) #b01111111111111111111111111111111)))

(assert (=> d!4119 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) lt!8522 lt!8541) lt!8883)))

(declare-fun b!23930 () Bool)

(assert (=> b!23930 (= e!15506 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!8522 lt!8541))))

(assert (= (and d!4119 res!14649) b!23930))

(declare-fun m!17859 () Bool)

(assert (=> d!4119 m!17859))

(assert (=> b!23930 m!17032))

(assert (=> b!23930 m!17006))

(assert (=> d!3979 d!4119))

(declare-fun b!23942 () Bool)

(declare-fun e!15511 () Bool)

(assert (=> b!23942 (= e!15511 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (bvadd (arrayCountValidKeys!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000001)))))

(declare-fun b!23940 () Bool)

(declare-fun res!14659 () Bool)

(declare-fun e!15512 () Bool)

(assert (=> b!23940 (=> (not res!14659) (not e!15512))))

(assert (=> b!23940 (= res!14659 (validKeyInArray!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun d!4121 () Bool)

(assert (=> d!4121 e!15511))

(declare-fun res!14660 () Bool)

(assert (=> d!4121 (=> (not res!14660) (not e!15511))))

(assert (=> d!4121 (= res!14660 (and (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000000) (bvslt (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (size!693 (_keys!3163 lt!8141)))))))

(declare-fun lt!8886 () Unit!522)

(declare-fun choose!1 (array!1263 (_ BitVec 32) (_ BitVec 64)) Unit!522)

(assert (=> d!4121 (= lt!8886 (choose!1 (_keys!3163 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4121 e!15512))

(declare-fun res!14658 () Bool)

(assert (=> d!4121 (=> (not res!14658) (not e!15512))))

(assert (=> d!4121 (= res!14658 (and (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000000) (bvslt (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (size!693 (_keys!3163 lt!8141)))))))

(assert (=> d!4121 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3163 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!8886)))

(declare-fun b!23941 () Bool)

(assert (=> b!23941 (= e!15512 (bvslt (size!693 (_keys!3163 lt!8141)) #b01111111111111111111111111111111))))

(declare-fun b!23939 () Bool)

(declare-fun res!14661 () Bool)

(assert (=> b!23939 (=> (not res!14661) (not e!15512))))

(assert (=> b!23939 (= res!14661 (not (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))))))))

(assert (= (and d!4121 res!14658) b!23939))

(assert (= (and b!23939 res!14661) b!23940))

(assert (= (and b!23940 res!14659) b!23941))

(assert (= (and d!4121 res!14660) b!23942))

(assert (=> b!23942 m!17032))

(assert (=> b!23942 m!17022))

(assert (=> b!23942 m!17030))

(declare-fun m!17861 () Bool)

(assert (=> b!23940 m!17861))

(declare-fun m!17863 () Bool)

(assert (=> d!4121 m!17863))

(declare-fun m!17865 () Bool)

(assert (=> b!23939 m!17865))

(assert (=> b!23939 m!17865))

(declare-fun m!17867 () Bool)

(assert (=> b!23939 m!17867))

(assert (=> d!3979 d!4121))

(declare-fun d!4123 () Bool)

(declare-fun e!15515 () Bool)

(assert (=> d!4123 e!15515))

(declare-fun res!14664 () Bool)

(assert (=> d!4123 (=> (not res!14664) (not e!15515))))

(assert (=> d!4123 (= res!14664 (and (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000000) (bvslt (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (size!693 (_keys!3163 lt!8141))) (bvslt (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (size!692 (_values!1728 lt!8141)))))))

(declare-fun lt!8889 () Unit!522)

(declare-fun choose!211 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) (_ BitVec 64) V!1187 Int) Unit!522)

(assert (=> d!4123 (= lt!8889 (choose!211 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4123 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4123 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!3 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) lt!8889)))

(declare-fun b!23945 () Bool)

(assert (=> b!23945 (= e!15515 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (getCurrentListMap!127 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))))

(assert (= (and d!4123 res!14664) b!23945))

(declare-fun m!17869 () Bool)

(assert (=> d!4123 m!17869))

(assert (=> d!4123 m!16908))

(assert (=> b!23945 m!17008))

(assert (=> b!23945 m!17014))

(assert (=> b!23945 m!17032))

(assert (=> b!23945 m!16784))

(assert (=> b!23945 m!17004))

(assert (=> b!23945 m!16784))

(assert (=> d!3979 d!4123))

(declare-fun b!23946 () Bool)

(declare-fun e!15516 () Bool)

(declare-fun e!15517 () Bool)

(assert (=> b!23946 (= e!15516 e!15517)))

(declare-fun lt!8892 () (_ BitVec 64))

(assert (=> b!23946 (= lt!8892 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(declare-fun lt!8890 () Unit!522)

(assert (=> b!23946 (= lt!8890 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!8892 #b00000000000000000000000000000000))))

(assert (=> b!23946 (arrayContainsKey!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!8892 #b00000000000000000000000000000000)))

(declare-fun lt!8891 () Unit!522)

(assert (=> b!23946 (= lt!8891 lt!8890)))

(declare-fun res!14665 () Bool)

(assert (=> b!23946 (= res!14665 (= (seekEntryOrOpen!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000) (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141)) (Found!54 #b00000000000000000000000000000000)))))

(assert (=> b!23946 (=> (not res!14665) (not e!15517))))

(declare-fun b!23947 () Bool)

(declare-fun call!2073 () Bool)

(assert (=> b!23947 (= e!15517 call!2073)))

(declare-fun bm!2070 () Bool)

(assert (=> bm!2070 (= call!2073 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141)))))

(declare-fun d!4125 () Bool)

(declare-fun res!14666 () Bool)

(declare-fun e!15518 () Bool)

(assert (=> d!4125 (=> res!14666 e!15518)))

(assert (=> d!4125 (= res!14666 (bvsge #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(assert (=> d!4125 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141)) e!15518)))

(declare-fun b!23948 () Bool)

(assert (=> b!23948 (= e!15516 call!2073)))

(declare-fun b!23949 () Bool)

(assert (=> b!23949 (= e!15518 e!15516)))

(declare-fun c!3152 () Bool)

(assert (=> b!23949 (= c!3152 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(assert (= (and d!4125 (not res!14666)) b!23949))

(assert (= (and b!23949 c!3152) b!23946))

(assert (= (and b!23949 (not c!3152)) b!23948))

(assert (= (and b!23946 res!14665) b!23947))

(assert (= (or b!23947 b!23948) bm!2070))

(assert (=> b!23946 m!17745))

(declare-fun m!17871 () Bool)

(assert (=> b!23946 m!17871))

(declare-fun m!17873 () Bool)

(assert (=> b!23946 m!17873))

(assert (=> b!23946 m!17745))

(declare-fun m!17875 () Bool)

(assert (=> b!23946 m!17875))

(declare-fun m!17877 () Bool)

(assert (=> bm!2070 m!17877))

(assert (=> b!23949 m!17745))

(assert (=> b!23949 m!17745))

(assert (=> b!23949 m!17747))

(assert (=> d!3979 d!4125))

(declare-fun b!23950 () Bool)

(declare-fun e!15520 () (_ BitVec 32))

(assert (=> b!23950 (= e!15520 #b00000000000000000000000000000000)))

(declare-fun b!23951 () Bool)

(declare-fun e!15519 () (_ BitVec 32))

(assert (=> b!23951 (= e!15520 e!15519)))

(declare-fun c!3154 () Bool)

(assert (=> b!23951 (= c!3154 (validKeyInArray!0 (select (arr!597 lt!8545) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)))))))

(declare-fun call!2074 () (_ BitVec 32))

(declare-fun bm!2071 () Bool)

(assert (=> bm!2071 (= call!2074 (arrayCountValidKeys!0 lt!8545 (bvadd (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000001) (bvadd (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000001)))))

(declare-fun d!4127 () Bool)

(declare-fun lt!8893 () (_ BitVec 32))

(assert (=> d!4127 (and (bvsge lt!8893 #b00000000000000000000000000000000) (bvsle lt!8893 (bvsub (size!693 lt!8545) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)))))))

(assert (=> d!4127 (= lt!8893 e!15520)))

(declare-fun c!3153 () Bool)

(assert (=> d!4127 (= c!3153 (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (bvadd (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000001)))))

(assert (=> d!4127 (and (bvsle (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (bvadd (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000001)) (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000001) (size!693 lt!8545)))))

(assert (=> d!4127 (= (arrayCountValidKeys!0 lt!8545 (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (bvadd (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000001)) lt!8893)))

(declare-fun b!23952 () Bool)

(assert (=> b!23952 (= e!15519 (bvadd #b00000000000000000000000000000001 call!2074))))

(declare-fun b!23953 () Bool)

(assert (=> b!23953 (= e!15519 call!2074)))

(assert (= (and d!4127 c!3153) b!23950))

(assert (= (and d!4127 (not c!3153)) b!23951))

(assert (= (and b!23951 c!3154) b!23952))

(assert (= (and b!23951 (not c!3154)) b!23953))

(assert (= (or b!23952 b!23953) bm!2071))

(assert (=> b!23951 m!17725))

(assert (=> b!23951 m!17725))

(assert (=> b!23951 m!17727))

(declare-fun m!17879 () Bool)

(assert (=> bm!2071 m!17879))

(assert (=> d!3979 d!4127))

(declare-fun d!4129 () Bool)

(declare-fun e!15521 () Bool)

(assert (=> d!4129 e!15521))

(declare-fun res!14667 () Bool)

(assert (=> d!4129 (=> (not res!14667) (not e!15521))))

(assert (=> d!4129 (= res!14667 (and (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000000) (bvslt (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (size!693 lt!8536))))))

(declare-fun lt!8894 () Unit!522)

(assert (=> d!4129 (= lt!8894 (choose!208 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4129 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4129 (= (lemmaValidKeyInArrayIsInListMap!10 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) (defaultEntry!1742 lt!8141)) lt!8894)))

(declare-fun b!23954 () Bool)

(assert (=> b!23954 (= e!15521 (contains!229 (getCurrentListMap!127 lt!8536 lt!8521 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 lt!8536) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)))))))

(assert (= (and d!4129 res!14667) b!23954))

(declare-fun m!17881 () Bool)

(assert (=> d!4129 m!17881))

(assert (=> d!4129 m!16908))

(assert (=> b!23954 m!16996))

(declare-fun m!17883 () Bool)

(assert (=> b!23954 m!17883))

(assert (=> b!23954 m!16996))

(assert (=> b!23954 m!17883))

(declare-fun m!17885 () Bool)

(assert (=> b!23954 m!17885))

(assert (=> d!3979 d!4129))

(assert (=> d!3979 d!4033))

(declare-fun d!4131 () Bool)

(assert (=> d!4131 (arrayContainsKey!0 lt!8526 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000)))

(declare-fun lt!8897 () Unit!522)

(declare-fun choose!13 (array!1263 (_ BitVec 64) (_ BitVec 32)) Unit!522)

(assert (=> d!4131 (= lt!8897 (choose!13 lt!8526 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))))))

(assert (=> d!4131 (bvsge (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329)) #b00000000000000000000000000000000)))

(assert (=> d!4131 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8526 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2997 (index!2340 lt!8329) (index!2337 lt!8329))) lt!8897)))

(declare-fun bs!961 () Bool)

(assert (= bs!961 d!4131))

(assert (=> bs!961 m!17018))

(declare-fun m!17887 () Bool)

(assert (=> bs!961 m!17887))

(assert (=> d!3979 d!4131))

(assert (=> d!3979 d!4017))

(declare-fun d!4133 () Bool)

(declare-fun e!15523 () Bool)

(assert (=> d!4133 e!15523))

(declare-fun res!14668 () Bool)

(assert (=> d!4133 (=> res!14668 e!15523)))

(declare-fun lt!8899 () Bool)

(assert (=> d!4133 (= res!14668 (not lt!8899))))

(declare-fun lt!8900 () Bool)

(assert (=> d!4133 (= lt!8899 lt!8900)))

(declare-fun lt!8898 () Unit!522)

(declare-fun e!15522 () Unit!522)

(assert (=> d!4133 (= lt!8898 e!15522)))

(declare-fun c!3155 () Bool)

(assert (=> d!4133 (= c!3155 lt!8900)))

(assert (=> d!4133 (= lt!8900 (containsKey!25 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4133 (= (contains!229 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!8899)))

(declare-fun b!23955 () Bool)

(declare-fun lt!8901 () Unit!522)

(assert (=> b!23955 (= e!15522 lt!8901)))

(assert (=> b!23955 (= lt!8901 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23955 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23956 () Bool)

(declare-fun Unit!556 () Unit!522)

(assert (=> b!23956 (= e!15522 Unit!556)))

(declare-fun b!23957 () Bool)

(assert (=> b!23957 (= e!15523 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4133 c!3155) b!23955))

(assert (= (and d!4133 (not c!3155)) b!23956))

(assert (= (and d!4133 (not res!14668)) b!23957))

(declare-fun m!17889 () Bool)

(assert (=> d!4133 m!17889))

(declare-fun m!17891 () Bool)

(assert (=> b!23955 m!17891))

(declare-fun m!17893 () Bool)

(assert (=> b!23955 m!17893))

(assert (=> b!23955 m!17893))

(declare-fun m!17895 () Bool)

(assert (=> b!23955 m!17895))

(assert (=> b!23957 m!17893))

(assert (=> b!23957 m!17893))

(assert (=> b!23957 m!17895))

(assert (=> d!3979 d!4133))

(declare-fun lt!8904 () Bool)

(declare-fun d!4135 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!15 (List!564) (InoxSet tuple2!972))

(assert (=> d!4135 (= lt!8904 (select (content!15 (toList!297 lt!8783)) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun e!15528 () Bool)

(assert (=> d!4135 (= lt!8904 e!15528)))

(declare-fun res!14673 () Bool)

(assert (=> d!4135 (=> (not res!14673) (not e!15528))))

(assert (=> d!4135 (= res!14673 ((_ is Cons!560) (toList!297 lt!8783)))))

(assert (=> d!4135 (= (contains!231 (toList!297 lt!8783) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!8904)))

(declare-fun b!23962 () Bool)

(declare-fun e!15529 () Bool)

(assert (=> b!23962 (= e!15528 e!15529)))

(declare-fun res!14674 () Bool)

(assert (=> b!23962 (=> res!14674 e!15529)))

(assert (=> b!23962 (= res!14674 (= (h!1126 (toList!297 lt!8783)) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!23963 () Bool)

(assert (=> b!23963 (= e!15529 (contains!231 (t!3229 (toList!297 lt!8783)) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (= (and d!4135 res!14673) b!23962))

(assert (= (and b!23962 (not res!14674)) b!23963))

(declare-fun m!17897 () Bool)

(assert (=> d!4135 m!17897))

(declare-fun m!17899 () Bool)

(assert (=> d!4135 m!17899))

(declare-fun m!17901 () Bool)

(assert (=> b!23963 m!17901))

(assert (=> b!23806 d!4135))

(declare-fun d!4137 () Bool)

(declare-fun isEmpty!172 (Option!67) Bool)

(assert (=> d!4137 (= (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329)))) (not (isEmpty!172 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))))

(declare-fun bs!962 () Bool)

(assert (= bs!962 d!4137))

(assert (=> bs!962 m!17517))

(declare-fun m!17903 () Bool)

(assert (=> bs!962 m!17903))

(assert (=> b!23781 d!4137))

(declare-fun b!23974 () Bool)

(declare-fun e!15535 () Option!67)

(assert (=> b!23974 (= e!15535 (getValueByKey!61 (t!3229 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))

(declare-fun b!23972 () Bool)

(declare-fun e!15534 () Option!67)

(assert (=> b!23972 (= e!15534 (Some!66 (_2!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))))))

(declare-fun b!23975 () Bool)

(assert (=> b!23975 (= e!15535 None!65)))

(declare-fun d!4139 () Bool)

(declare-fun c!3160 () Bool)

(assert (=> d!4139 (= c!3160 (and ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (= (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329)))))))

(assert (=> d!4139 (= (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))) e!15534)))

(declare-fun b!23973 () Bool)

(assert (=> b!23973 (= e!15534 e!15535)))

(declare-fun c!3161 () Bool)

(assert (=> b!23973 (= c!3161 (and ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (not (= (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))))

(assert (= (and d!4139 c!3160) b!23972))

(assert (= (and d!4139 (not c!3160)) b!23973))

(assert (= (and b!23973 c!3161) b!23974))

(assert (= (and b!23973 (not c!3161)) b!23975))

(assert (=> b!23974 m!16794))

(declare-fun m!17905 () Bool)

(assert (=> b!23974 m!17905))

(assert (=> b!23781 d!4139))

(declare-fun b!23994 () Bool)

(declare-fun lt!8909 () SeekEntryResult!54)

(assert (=> b!23994 (and (bvsge (index!2339 lt!8909) #b00000000000000000000000000000000) (bvslt (index!2339 lt!8909) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun e!15547 () Bool)

(assert (=> b!23994 (= e!15547 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2339 lt!8909)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23995 () Bool)

(declare-fun e!15548 () Bool)

(declare-fun e!15549 () Bool)

(assert (=> b!23995 (= e!15548 e!15549)))

(declare-fun res!14683 () Bool)

(assert (=> b!23995 (= res!14683 (and ((_ is Intermediate!54) lt!8909) (not (undefined!866 lt!8909)) (bvslt (x!5576 lt!8909) #b01111111111111111111111111111110) (bvsge (x!5576 lt!8909) #b00000000000000000000000000000000) (bvsge (x!5576 lt!8909) #b00000000000000000000000000000000)))))

(assert (=> b!23995 (=> (not res!14683) (not e!15549))))

(declare-fun b!23996 () Bool)

(assert (=> b!23996 (= e!15548 (bvsge (x!5576 lt!8909) #b01111111111111111111111111111110))))

(declare-fun b!23997 () Bool)

(declare-fun e!15546 () SeekEntryResult!54)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!23997 (= e!15546 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!490 lt!8142))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!4729 (_2!490 lt!8142))) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!23998 () Bool)

(assert (=> b!23998 (and (bvsge (index!2339 lt!8909) #b00000000000000000000000000000000) (bvslt (index!2339 lt!8909) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun res!14681 () Bool)

(assert (=> b!23998 (= res!14681 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2339 lt!8909)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23998 (=> res!14681 e!15547)))

(assert (=> b!23998 (= e!15549 e!15547)))

(declare-fun b!24000 () Bool)

(assert (=> b!24000 (and (bvsge (index!2339 lt!8909) #b00000000000000000000000000000000) (bvslt (index!2339 lt!8909) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun res!14682 () Bool)

(assert (=> b!24000 (= res!14682 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2339 lt!8909)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24000 (=> res!14682 e!15547)))

(declare-fun b!24001 () Bool)

(assert (=> b!24001 (= e!15546 (Intermediate!54 false (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun b!24002 () Bool)

(declare-fun e!15550 () SeekEntryResult!54)

(assert (=> b!24002 (= e!15550 (Intermediate!54 true (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun d!4141 () Bool)

(assert (=> d!4141 e!15548))

(declare-fun c!3170 () Bool)

(assert (=> d!4141 (= c!3170 (and ((_ is Intermediate!54) lt!8909) (undefined!866 lt!8909)))))

(assert (=> d!4141 (= lt!8909 e!15550)))

(declare-fun c!3168 () Bool)

(assert (=> d!4141 (= c!3168 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!8910 () (_ BitVec 64))

(assert (=> d!4141 (= lt!8910 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!490 lt!8142)))))))

(assert (=> d!4141 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4141 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!490 lt!8142))) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))) lt!8909)))

(declare-fun b!23999 () Bool)

(assert (=> b!23999 (= e!15550 e!15546)))

(declare-fun c!3169 () Bool)

(assert (=> b!23999 (= c!3169 (or (= lt!8910 #b1000000000000000000000000000000000000000000000000000000000000000) (= (bvadd lt!8910 lt!8910) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4141 c!3168) b!24002))

(assert (= (and d!4141 (not c!3168)) b!23999))

(assert (= (and b!23999 c!3169) b!24001))

(assert (= (and b!23999 (not c!3169)) b!23997))

(assert (= (and d!4141 c!3170) b!23996))

(assert (= (and d!4141 (not c!3170)) b!23995))

(assert (= (and b!23995 res!14683) b!23998))

(assert (= (and b!23998 (not res!14681)) b!24000))

(assert (= (and b!24000 (not res!14682)) b!23994))

(declare-fun m!17907 () Bool)

(assert (=> b!24000 m!17907))

(assert (=> b!23998 m!17907))

(assert (=> b!23994 m!17907))

(assert (=> d!4141 m!17042))

(declare-fun m!17909 () Bool)

(assert (=> d!4141 m!17909))

(assert (=> d!4141 m!16902))

(assert (=> b!23997 m!17042))

(declare-fun m!17911 () Bool)

(assert (=> b!23997 m!17911))

(assert (=> b!23997 m!17911))

(declare-fun m!17913 () Bool)

(assert (=> b!23997 m!17913))

(assert (=> d!3983 d!4141))

(declare-fun d!4143 () Bool)

(declare-fun lt!8916 () (_ BitVec 32))

(declare-fun lt!8915 () (_ BitVec 32))

(assert (=> d!4143 (= lt!8916 (bvmul (bvxor lt!8915 (bvlshr lt!8915 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!4143 (= lt!8915 ((_ extract 31 0) (bvand (bvxor #b1000000000000000000000000000000000000000000000000000000000000000 (bvlshr #b1000000000000000000000000000000000000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!4143 (and (bvsge (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000000000) (let ((res!14684 (let ((h!1128 ((_ extract 31 0) (bvand (bvxor #b1000000000000000000000000000000000000000000000000000000000000000 (bvlshr #b1000000000000000000000000000000000000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!5834 (bvmul (bvxor h!1128 (bvlshr h!1128 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!5834 (bvlshr x!5834 #b00000000000000000000000000001101)) (mask!4729 (_2!490 lt!8142))))))) (and (bvslt res!14684 (bvadd (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000000001)) (bvsge res!14684 #b00000000000000000000000000000000))))))

(assert (=> d!4143 (= (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!490 lt!8142))) (bvand (bvxor lt!8916 (bvlshr lt!8916 #b00000000000000000000000000001101)) (mask!4729 (_2!490 lt!8142))))))

(assert (=> d!3983 d!4143))

(declare-fun d!4145 () Bool)

(assert (=> d!4145 (= (validMask!0 (mask!4729 (_2!490 lt!8142))) (and (or (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000000111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000001111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000011111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000001111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000011111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000001111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000011111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000000111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000001111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000011111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000000111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000001111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000011111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000000111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000001111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000011111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000000111111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000001111111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000011111111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000000111111111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000001111111111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000011111111111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00000111111111111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00001111111111111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00011111111111111111111111111111) (= (mask!4729 (_2!490 lt!8142)) #b00111111111111111111111111111111)) (bvsle (mask!4729 (_2!490 lt!8142)) #b00111111111111111111111111111111)))))

(assert (=> d!3983 d!4145))

(declare-fun d!4147 () Bool)

(declare-fun e!15551 () Bool)

(assert (=> d!4147 e!15551))

(declare-fun res!14686 () Bool)

(assert (=> d!4147 (=> (not res!14686) (not e!15551))))

(declare-fun lt!8920 () ListLongMap!563)

(assert (=> d!4147 (= res!14686 (contains!229 lt!8920 (_1!495 (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun lt!8918 () List!564)

(assert (=> d!4147 (= lt!8920 (ListLongMap!564 lt!8918))))

(declare-fun lt!8917 () Unit!522)

(declare-fun lt!8919 () Unit!522)

(assert (=> d!4147 (= lt!8917 lt!8919)))

(assert (=> d!4147 (= (getValueByKey!61 lt!8918 (_1!495 (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4147 (= lt!8919 (lemmaContainsTupThenGetReturnValue!18 lt!8918 (_1!495 (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) (_2!495 (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4147 (= lt!8918 (insertStrictlySorted!18 (toList!297 (ite c!3103 call!2033 (ite c!3104 call!2028 call!2034))) (_1!495 (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) (_2!495 (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4147 (= (+!44 (ite c!3103 call!2033 (ite c!3104 call!2028 call!2034)) (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) lt!8920)))

(declare-fun b!24003 () Bool)

(declare-fun res!14685 () Bool)

(assert (=> b!24003 (=> (not res!14685) (not e!15551))))

(assert (=> b!24003 (= res!14685 (= (getValueByKey!61 (toList!297 lt!8920) (_1!495 (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))))

(declare-fun b!24004 () Bool)

(assert (=> b!24004 (= e!15551 (contains!231 (toList!297 lt!8920) (ite (or c!3103 c!3104) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(assert (= (and d!4147 res!14686) b!24003))

(assert (= (and b!24003 res!14685) b!24004))

(declare-fun m!17915 () Bool)

(assert (=> d!4147 m!17915))

(declare-fun m!17917 () Bool)

(assert (=> d!4147 m!17917))

(declare-fun m!17919 () Bool)

(assert (=> d!4147 m!17919))

(declare-fun m!17921 () Bool)

(assert (=> d!4147 m!17921))

(declare-fun m!17923 () Bool)

(assert (=> b!24003 m!17923))

(declare-fun m!17925 () Bool)

(assert (=> b!24004 m!17925))

(assert (=> bm!2028 d!4147))

(declare-fun d!4149 () Bool)

(declare-fun lt!8921 () (_ BitVec 32))

(assert (=> d!4149 (and (or (bvslt lt!8921 #b00000000000000000000000000000000) (bvsge lt!8921 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (and (bvsge lt!8921 #b00000000000000000000000000000000) (bvslt lt!8921 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))) (bvsge lt!8921 #b00000000000000000000000000000000) (bvslt lt!8921 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (= (select (arr!597 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) lt!8921) (_1!495 lt!8244)))))

(declare-fun e!15552 () (_ BitVec 32))

(assert (=> d!4149 (= lt!8921 e!15552)))

(declare-fun c!3171 () Bool)

(assert (=> d!4149 (= c!3171 (= (select (arr!597 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_1!495 lt!8244)))))

(assert (=> d!4149 (and (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (bvslt (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) #b01111111111111111111111111111111))))

(assert (=> d!4149 (= (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!495 lt!8244) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) lt!8921)))

(declare-fun b!24005 () Bool)

(assert (=> b!24005 (= e!15552 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))

(declare-fun b!24006 () Bool)

(assert (=> b!24006 (= e!15552 (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!495 lt!8244) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!4149 c!3171) b!24005))

(assert (= (and d!4149 (not c!3171)) b!24006))

(declare-fun m!17927 () Bool)

(assert (=> d!4149 m!17927))

(declare-fun m!17929 () Bool)

(assert (=> d!4149 m!17929))

(declare-fun m!17931 () Bool)

(assert (=> b!24006 m!17931))

(assert (=> b!23759 d!4149))

(declare-fun b!24018 () Bool)

(declare-fun e!15555 () Bool)

(assert (=> b!24018 (= e!15555 (and (bvsge (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000011) (bvsge (_vacant!149 (_2!490 lt!8142)) #b00000000000000000000000000000000)))))

(declare-fun d!4151 () Bool)

(declare-fun res!14698 () Bool)

(assert (=> d!4151 (=> (not res!14698) (not e!15555))))

(assert (=> d!4151 (= res!14698 (validMask!0 (mask!4729 (_2!490 lt!8142))))))

(assert (=> d!4151 (= (simpleValid!20 (_2!490 lt!8142)) e!15555)))

(declare-fun b!24017 () Bool)

(declare-fun res!14696 () Bool)

(assert (=> b!24017 (=> (not res!14696) (not e!15555))))

(declare-fun size!702 (LongMapFixedSize!208) (_ BitVec 32))

(assert (=> b!24017 (= res!14696 (= (size!702 (_2!490 lt!8142)) (bvadd (_size!149 (_2!490 lt!8142)) (bvsdiv (bvadd (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!24016 () Bool)

(declare-fun res!14695 () Bool)

(assert (=> b!24016 (=> (not res!14695) (not e!15555))))

(assert (=> b!24016 (= res!14695 (bvsge (size!702 (_2!490 lt!8142)) (_size!149 (_2!490 lt!8142))))))

(declare-fun b!24015 () Bool)

(declare-fun res!14697 () Bool)

(assert (=> b!24015 (=> (not res!14697) (not e!15555))))

(assert (=> b!24015 (= res!14697 (and (= (size!692 (_values!1728 (_2!490 lt!8142))) (bvadd (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 (_2!490 lt!8142))) (size!692 (_values!1728 (_2!490 lt!8142)))) (bvsge (_size!149 (_2!490 lt!8142)) #b00000000000000000000000000000000) (bvsle (_size!149 (_2!490 lt!8142)) (bvadd (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000000001))))))

(assert (= (and d!4151 res!14698) b!24015))

(assert (= (and b!24015 res!14697) b!24016))

(assert (= (and b!24016 res!14695) b!24017))

(assert (= (and b!24017 res!14696) b!24018))

(assert (=> d!4151 m!16902))

(declare-fun m!17933 () Bool)

(assert (=> b!24017 m!17933))

(assert (=> b!24016 m!17933))

(assert (=> d!4051 d!4151))

(declare-fun d!4153 () Bool)

(declare-fun e!15557 () Bool)

(assert (=> d!4153 e!15557))

(declare-fun res!14699 () Bool)

(assert (=> d!4153 (=> res!14699 e!15557)))

(declare-fun lt!8923 () Bool)

(assert (=> d!4153 (= res!14699 (not lt!8923))))

(declare-fun lt!8924 () Bool)

(assert (=> d!4153 (= lt!8923 lt!8924)))

(declare-fun lt!8922 () Unit!522)

(declare-fun e!15556 () Unit!522)

(assert (=> d!4153 (= lt!8922 e!15556)))

(declare-fun c!3172 () Bool)

(assert (=> d!4153 (= c!3172 lt!8924)))

(assert (=> d!4153 (= lt!8924 (containsKey!25 (toList!297 lt!8565) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4153 (= (contains!229 lt!8565 #b1000000000000000000000000000000000000000000000000000000000000000) lt!8923)))

(declare-fun b!24019 () Bool)

(declare-fun lt!8925 () Unit!522)

(assert (=> b!24019 (= e!15556 lt!8925)))

(assert (=> b!24019 (= lt!8925 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8565) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24019 (isDefined!23 (getValueByKey!61 (toList!297 lt!8565) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24020 () Bool)

(declare-fun Unit!557 () Unit!522)

(assert (=> b!24020 (= e!15556 Unit!557)))

(declare-fun b!24021 () Bool)

(assert (=> b!24021 (= e!15557 (isDefined!23 (getValueByKey!61 (toList!297 lt!8565) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4153 c!3172) b!24019))

(assert (= (and d!4153 (not c!3172)) b!24020))

(assert (= (and d!4153 (not res!14699)) b!24021))

(declare-fun m!17935 () Bool)

(assert (=> d!4153 m!17935))

(declare-fun m!17937 () Bool)

(assert (=> b!24019 m!17937))

(declare-fun m!17939 () Bool)

(assert (=> b!24019 m!17939))

(assert (=> b!24019 m!17939))

(declare-fun m!17941 () Bool)

(assert (=> b!24019 m!17941))

(assert (=> b!24021 m!17939))

(assert (=> b!24021 m!17939))

(assert (=> b!24021 m!17941))

(assert (=> bm!1994 d!4153))

(declare-fun d!4155 () Bool)

(declare-fun get!391 (Option!67) V!1187)

(assert (=> d!4155 (= (apply!29 lt!8766 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8766) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!963 () Bool)

(assert (= bs!963 d!4155))

(declare-fun m!17943 () Bool)

(assert (=> bs!963 m!17943))

(assert (=> bs!963 m!17943))

(declare-fun m!17945 () Bool)

(assert (=> bs!963 m!17945))

(assert (=> b!23800 d!4155))

(declare-fun b!24025 () Bool)

(declare-fun e!15558 () Bool)

(assert (=> b!24025 (= e!15558 (and (bvsge (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000011) (bvsge (_vacant!149 (_2!490 lt!8361)) #b00000000000000000000000000000000)))))

(declare-fun d!4157 () Bool)

(declare-fun res!14703 () Bool)

(assert (=> d!4157 (=> (not res!14703) (not e!15558))))

(assert (=> d!4157 (= res!14703 (validMask!0 (mask!4729 (_2!490 lt!8361))))))

(assert (=> d!4157 (= (simpleValid!20 (_2!490 lt!8361)) e!15558)))

(declare-fun b!24024 () Bool)

(declare-fun res!14701 () Bool)

(assert (=> b!24024 (=> (not res!14701) (not e!15558))))

(assert (=> b!24024 (= res!14701 (= (size!702 (_2!490 lt!8361)) (bvadd (_size!149 (_2!490 lt!8361)) (bvsdiv (bvadd (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!24023 () Bool)

(declare-fun res!14700 () Bool)

(assert (=> b!24023 (=> (not res!14700) (not e!15558))))

(assert (=> b!24023 (= res!14700 (bvsge (size!702 (_2!490 lt!8361)) (_size!149 (_2!490 lt!8361))))))

(declare-fun b!24022 () Bool)

(declare-fun res!14702 () Bool)

(assert (=> b!24022 (=> (not res!14702) (not e!15558))))

(assert (=> b!24022 (= res!14702 (and (= (size!692 (_values!1728 (_2!490 lt!8361))) (bvadd (mask!4729 (_2!490 lt!8361)) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 (_2!490 lt!8361))) (size!692 (_values!1728 (_2!490 lt!8361)))) (bvsge (_size!149 (_2!490 lt!8361)) #b00000000000000000000000000000000) (bvsle (_size!149 (_2!490 lt!8361)) (bvadd (mask!4729 (_2!490 lt!8361)) #b00000000000000000000000000000001))))))

(assert (= (and d!4157 res!14703) b!24022))

(assert (= (and b!24022 res!14702) b!24023))

(assert (= (and b!24023 res!14700) b!24024))

(assert (= (and b!24024 res!14701) b!24025))

(declare-fun m!17947 () Bool)

(assert (=> d!4157 m!17947))

(declare-fun m!17949 () Bool)

(assert (=> b!24024 m!17949))

(assert (=> b!24023 m!17949))

(assert (=> d!4049 d!4157))

(declare-fun d!4159 () Bool)

(declare-fun e!15559 () Bool)

(assert (=> d!4159 e!15559))

(declare-fun res!14705 () Bool)

(assert (=> d!4159 (=> (not res!14705) (not e!15559))))

(declare-fun lt!8929 () ListLongMap!563)

(assert (=> d!4159 (= res!14705 (contains!229 lt!8929 (_1!495 (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(declare-fun lt!8927 () List!564)

(assert (=> d!4159 (= lt!8929 (ListLongMap!564 lt!8927))))

(declare-fun lt!8926 () Unit!522)

(declare-fun lt!8928 () Unit!522)

(assert (=> d!4159 (= lt!8926 lt!8928)))

(assert (=> d!4159 (= (getValueByKey!61 lt!8927 (_1!495 (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))) (Some!66 (_2!495 (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4159 (= lt!8928 (lemmaContainsTupThenGetReturnValue!18 lt!8927 (_1!495 (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (_2!495 (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4159 (= lt!8927 (insertStrictlySorted!18 (toList!297 (ite c!3040 call!1978 (ite c!3041 call!1973 call!1979))) (_1!495 (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (_2!495 (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4159 (= (+!44 (ite c!3040 call!1978 (ite c!3041 call!1973 call!1979)) (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) lt!8929)))

(declare-fun b!24026 () Bool)

(declare-fun res!14704 () Bool)

(assert (=> b!24026 (=> (not res!14704) (not e!15559))))

(assert (=> b!24026 (= res!14704 (= (getValueByKey!61 (toList!297 lt!8929) (_1!495 (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))) (Some!66 (_2!495 (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))))

(declare-fun b!24027 () Bool)

(assert (=> b!24027 (= e!15559 (contains!231 (toList!297 lt!8929) (ite (or c!3040 c!3041) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (= (and d!4159 res!14705) b!24026))

(assert (= (and b!24026 res!14704) b!24027))

(declare-fun m!17951 () Bool)

(assert (=> d!4159 m!17951))

(declare-fun m!17953 () Bool)

(assert (=> d!4159 m!17953))

(declare-fun m!17955 () Bool)

(assert (=> d!4159 m!17955))

(declare-fun m!17957 () Bool)

(assert (=> d!4159 m!17957))

(declare-fun m!17959 () Bool)

(assert (=> b!24026 m!17959))

(declare-fun m!17961 () Bool)

(assert (=> b!24027 m!17961))

(assert (=> bm!1973 d!4159))

(declare-fun b!24028 () Bool)

(declare-fun e!15568 () ListLongMap!563)

(declare-fun call!2077 () ListLongMap!563)

(assert (=> b!24028 (= e!15568 call!2077)))

(declare-fun b!24029 () Bool)

(declare-fun e!15571 () Bool)

(declare-fun lt!8941 () ListLongMap!563)

(assert (=> b!24029 (= e!15571 (= (apply!29 lt!8941 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8245)))))

(declare-fun b!24030 () Bool)

(declare-fun e!15560 () Bool)

(assert (=> b!24030 (= e!15560 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8245)) #b00000000000000000000000000000000)))))

(declare-fun bm!2072 () Bool)

(declare-fun call!2080 () ListLongMap!563)

(assert (=> bm!2072 (= call!2080 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8245) (_values!1728 lt!8245) (mask!4729 lt!8245) (extraKeys!1640 lt!8245) (zeroValue!1665 lt!8245) (minValue!1665 lt!8245) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8245)))))

(declare-fun b!24031 () Bool)

(declare-fun e!15565 () ListLongMap!563)

(assert (=> b!24031 (= e!15565 e!15568)))

(declare-fun c!3177 () Bool)

(assert (=> b!24031 (= c!3177 (and (not (= (bvand (extraKeys!1640 lt!8245) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8245) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24032 () Bool)

(declare-fun e!15570 () Bool)

(declare-fun call!2076 () Bool)

(assert (=> b!24032 (= e!15570 (not call!2076))))

(declare-fun b!24033 () Bool)

(declare-fun e!15567 () Bool)

(assert (=> b!24033 (= e!15567 e!15571)))

(declare-fun res!14711 () Bool)

(declare-fun call!2078 () Bool)

(assert (=> b!24033 (= res!14711 call!2078)))

(assert (=> b!24033 (=> (not res!14711) (not e!15571))))

(declare-fun bm!2073 () Bool)

(declare-fun call!2079 () ListLongMap!563)

(assert (=> bm!2073 (= call!2077 call!2079)))

(declare-fun b!24035 () Bool)

(assert (=> b!24035 (= e!15567 (not call!2078))))

(declare-fun bm!2074 () Bool)

(declare-fun call!2075 () ListLongMap!563)

(assert (=> bm!2074 (= call!2075 call!2080)))

(declare-fun b!24036 () Bool)

(declare-fun e!15566 () Bool)

(assert (=> b!24036 (= e!15566 e!15567)))

(declare-fun c!3178 () Bool)

(assert (=> b!24036 (= c!3178 (not (= (bvand (extraKeys!1640 lt!8245) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24037 () Bool)

(declare-fun e!15561 () Unit!522)

(declare-fun lt!8930 () Unit!522)

(assert (=> b!24037 (= e!15561 lt!8930)))

(declare-fun lt!8946 () ListLongMap!563)

(assert (=> b!24037 (= lt!8946 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8245) (_values!1728 lt!8245) (mask!4729 lt!8245) (extraKeys!1640 lt!8245) (zeroValue!1665 lt!8245) (minValue!1665 lt!8245) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8245)))))

(declare-fun lt!8949 () (_ BitVec 64))

(assert (=> b!24037 (= lt!8949 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8944 () (_ BitVec 64))

(assert (=> b!24037 (= lt!8944 (select (arr!597 (_keys!3163 lt!8245)) #b00000000000000000000000000000000))))

(declare-fun lt!8934 () Unit!522)

(assert (=> b!24037 (= lt!8934 (addStillContains!14 lt!8946 lt!8949 (zeroValue!1665 lt!8245) lt!8944))))

(assert (=> b!24037 (contains!229 (+!44 lt!8946 (tuple2!973 lt!8949 (zeroValue!1665 lt!8245))) lt!8944)))

(declare-fun lt!8935 () Unit!522)

(assert (=> b!24037 (= lt!8935 lt!8934)))

(declare-fun lt!8947 () ListLongMap!563)

(assert (=> b!24037 (= lt!8947 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8245) (_values!1728 lt!8245) (mask!4729 lt!8245) (extraKeys!1640 lt!8245) (zeroValue!1665 lt!8245) (minValue!1665 lt!8245) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8245)))))

(declare-fun lt!8933 () (_ BitVec 64))

(assert (=> b!24037 (= lt!8933 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8931 () (_ BitVec 64))

(assert (=> b!24037 (= lt!8931 (select (arr!597 (_keys!3163 lt!8245)) #b00000000000000000000000000000000))))

(declare-fun lt!8940 () Unit!522)

(assert (=> b!24037 (= lt!8940 (addApplyDifferent!14 lt!8947 lt!8933 (minValue!1665 lt!8245) lt!8931))))

(assert (=> b!24037 (= (apply!29 (+!44 lt!8947 (tuple2!973 lt!8933 (minValue!1665 lt!8245))) lt!8931) (apply!29 lt!8947 lt!8931))))

(declare-fun lt!8938 () Unit!522)

(assert (=> b!24037 (= lt!8938 lt!8940)))

(declare-fun lt!8936 () ListLongMap!563)

(assert (=> b!24037 (= lt!8936 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8245) (_values!1728 lt!8245) (mask!4729 lt!8245) (extraKeys!1640 lt!8245) (zeroValue!1665 lt!8245) (minValue!1665 lt!8245) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8245)))))

(declare-fun lt!8951 () (_ BitVec 64))

(assert (=> b!24037 (= lt!8951 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8943 () (_ BitVec 64))

(assert (=> b!24037 (= lt!8943 (select (arr!597 (_keys!3163 lt!8245)) #b00000000000000000000000000000000))))

(declare-fun lt!8932 () Unit!522)

(assert (=> b!24037 (= lt!8932 (addApplyDifferent!14 lt!8936 lt!8951 (zeroValue!1665 lt!8245) lt!8943))))

(assert (=> b!24037 (= (apply!29 (+!44 lt!8936 (tuple2!973 lt!8951 (zeroValue!1665 lt!8245))) lt!8943) (apply!29 lt!8936 lt!8943))))

(declare-fun lt!8945 () Unit!522)

(assert (=> b!24037 (= lt!8945 lt!8932)))

(declare-fun lt!8950 () ListLongMap!563)

(assert (=> b!24037 (= lt!8950 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8245) (_values!1728 lt!8245) (mask!4729 lt!8245) (extraKeys!1640 lt!8245) (zeroValue!1665 lt!8245) (minValue!1665 lt!8245) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8245)))))

(declare-fun lt!8948 () (_ BitVec 64))

(assert (=> b!24037 (= lt!8948 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8942 () (_ BitVec 64))

(assert (=> b!24037 (= lt!8942 (select (arr!597 (_keys!3163 lt!8245)) #b00000000000000000000000000000000))))

(assert (=> b!24037 (= lt!8930 (addApplyDifferent!14 lt!8950 lt!8948 (minValue!1665 lt!8245) lt!8942))))

(assert (=> b!24037 (= (apply!29 (+!44 lt!8950 (tuple2!973 lt!8948 (minValue!1665 lt!8245))) lt!8942) (apply!29 lt!8950 lt!8942))))

(declare-fun c!3176 () Bool)

(declare-fun bm!2075 () Bool)

(declare-fun call!2081 () ListLongMap!563)

(assert (=> bm!2075 (= call!2079 (+!44 (ite c!3176 call!2080 (ite c!3177 call!2075 call!2081)) (ite (or c!3176 c!3177) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8245)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8245)))))))

(declare-fun b!24038 () Bool)

(declare-fun Unit!558 () Unit!522)

(assert (=> b!24038 (= e!15561 Unit!558)))

(declare-fun b!24039 () Bool)

(declare-fun e!15563 () Bool)

(assert (=> b!24039 (= e!15570 e!15563)))

(declare-fun res!14709 () Bool)

(assert (=> b!24039 (= res!14709 call!2076)))

(assert (=> b!24039 (=> (not res!14709) (not e!15563))))

(declare-fun bm!2076 () Bool)

(assert (=> bm!2076 (= call!2081 call!2075)))

(declare-fun b!24040 () Bool)

(declare-fun res!14710 () Bool)

(assert (=> b!24040 (=> (not res!14710) (not e!15566))))

(declare-fun e!15564 () Bool)

(assert (=> b!24040 (= res!14710 e!15564)))

(declare-fun res!14706 () Bool)

(assert (=> b!24040 (=> res!14706 e!15564)))

(declare-fun e!15569 () Bool)

(assert (=> b!24040 (= res!14706 (not e!15569))))

(declare-fun res!14713 () Bool)

(assert (=> b!24040 (=> (not res!14713) (not e!15569))))

(assert (=> b!24040 (= res!14713 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8245))))))

(declare-fun b!24041 () Bool)

(declare-fun e!15562 () Bool)

(assert (=> b!24041 (= e!15564 e!15562)))

(declare-fun res!14707 () Bool)

(assert (=> b!24041 (=> (not res!14707) (not e!15562))))

(assert (=> b!24041 (= res!14707 (contains!229 lt!8941 (select (arr!597 (_keys!3163 lt!8245)) #b00000000000000000000000000000000)))))

(assert (=> b!24041 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8245))))))

(declare-fun b!24042 () Bool)

(assert (=> b!24042 (= e!15569 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8245)) #b00000000000000000000000000000000)))))

(declare-fun b!24043 () Bool)

(declare-fun e!15572 () ListLongMap!563)

(assert (=> b!24043 (= e!15572 call!2077)))

(declare-fun b!24044 () Bool)

(assert (=> b!24044 (= e!15565 (+!44 call!2079 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8245))))))

(declare-fun d!4161 () Bool)

(assert (=> d!4161 e!15566))

(declare-fun res!14712 () Bool)

(assert (=> d!4161 (=> (not res!14712) (not e!15566))))

(assert (=> d!4161 (= res!14712 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8245))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8245))))))))

(declare-fun lt!8939 () ListLongMap!563)

(assert (=> d!4161 (= lt!8941 lt!8939)))

(declare-fun lt!8937 () Unit!522)

(assert (=> d!4161 (= lt!8937 e!15561)))

(declare-fun c!3174 () Bool)

(assert (=> d!4161 (= c!3174 e!15560)))

(declare-fun res!14714 () Bool)

(assert (=> d!4161 (=> (not res!14714) (not e!15560))))

(assert (=> d!4161 (= res!14714 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8245))))))

(assert (=> d!4161 (= lt!8939 e!15565)))

(assert (=> d!4161 (= c!3176 (and (not (= (bvand (extraKeys!1640 lt!8245) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8245) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4161 (validMask!0 (mask!4729 lt!8245))))

(assert (=> d!4161 (= (getCurrentListMap!127 (_keys!3163 lt!8245) (_values!1728 lt!8245) (mask!4729 lt!8245) (extraKeys!1640 lt!8245) (zeroValue!1665 lt!8245) (minValue!1665 lt!8245) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8245)) lt!8941)))

(declare-fun b!24034 () Bool)

(assert (=> b!24034 (= e!15562 (= (apply!29 lt!8941 (select (arr!597 (_keys!3163 lt!8245)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8245)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8245) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24034 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8245))))))

(assert (=> b!24034 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8245))))))

(declare-fun bm!2077 () Bool)

(assert (=> bm!2077 (= call!2078 (contains!229 lt!8941 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24045 () Bool)

(declare-fun res!14708 () Bool)

(assert (=> b!24045 (=> (not res!14708) (not e!15566))))

(assert (=> b!24045 (= res!14708 e!15570)))

(declare-fun c!3173 () Bool)

(assert (=> b!24045 (= c!3173 (not (= (bvand (extraKeys!1640 lt!8245) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24046 () Bool)

(assert (=> b!24046 (= e!15563 (= (apply!29 lt!8941 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8245)))))

(declare-fun b!24047 () Bool)

(assert (=> b!24047 (= e!15572 call!2081)))

(declare-fun b!24048 () Bool)

(declare-fun c!3175 () Bool)

(assert (=> b!24048 (= c!3175 (and (not (= (bvand (extraKeys!1640 lt!8245) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8245) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24048 (= e!15568 e!15572)))

(declare-fun bm!2078 () Bool)

(assert (=> bm!2078 (= call!2076 (contains!229 lt!8941 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4161 c!3176) b!24044))

(assert (= (and d!4161 (not c!3176)) b!24031))

(assert (= (and b!24031 c!3177) b!24028))

(assert (= (and b!24031 (not c!3177)) b!24048))

(assert (= (and b!24048 c!3175) b!24043))

(assert (= (and b!24048 (not c!3175)) b!24047))

(assert (= (or b!24043 b!24047) bm!2076))

(assert (= (or b!24028 bm!2076) bm!2074))

(assert (= (or b!24028 b!24043) bm!2073))

(assert (= (or b!24044 bm!2074) bm!2072))

(assert (= (or b!24044 bm!2073) bm!2075))

(assert (= (and d!4161 res!14714) b!24030))

(assert (= (and d!4161 c!3174) b!24037))

(assert (= (and d!4161 (not c!3174)) b!24038))

(assert (= (and d!4161 res!14712) b!24040))

(assert (= (and b!24040 res!14713) b!24042))

(assert (= (and b!24040 (not res!14706)) b!24041))

(assert (= (and b!24041 res!14707) b!24034))

(assert (= (and b!24040 res!14710) b!24045))

(assert (= (and b!24045 c!3173) b!24039))

(assert (= (and b!24045 (not c!3173)) b!24032))

(assert (= (and b!24039 res!14709) b!24046))

(assert (= (or b!24039 b!24032) bm!2078))

(assert (= (and b!24045 res!14708) b!24036))

(assert (= (and b!24036 c!3178) b!24033))

(assert (= (and b!24036 (not c!3178)) b!24035))

(assert (= (and b!24033 res!14711) b!24029))

(assert (= (or b!24033 b!24035) bm!2077))

(declare-fun b_lambda!1589 () Bool)

(assert (=> (not b_lambda!1589) (not b!24034)))

(declare-fun tb!657 () Bool)

(declare-fun t!3236 () Bool)

(assert (=> (and b!23087 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8245)) t!3236) tb!657))

(declare-fun result!1097 () Bool)

(assert (=> tb!657 (= result!1097 tp_is_empty!1021)))

(assert (=> b!24034 t!3236))

(declare-fun b_and!1501 () Bool)

(assert (= b_and!1499 (and (=> t!3236 result!1097) b_and!1501)))

(declare-fun m!17963 () Bool)

(assert (=> b!24046 m!17963))

(declare-fun m!17965 () Bool)

(assert (=> bm!2075 m!17965))

(declare-fun m!17967 () Bool)

(assert (=> b!24034 m!17967))

(assert (=> b!24034 m!17967))

(declare-fun m!17969 () Bool)

(assert (=> b!24034 m!17969))

(declare-fun m!17971 () Bool)

(assert (=> b!24034 m!17971))

(declare-fun m!17973 () Bool)

(assert (=> b!24034 m!17973))

(assert (=> b!24034 m!17969))

(assert (=> b!24034 m!17973))

(declare-fun m!17975 () Bool)

(assert (=> b!24034 m!17975))

(declare-fun m!17977 () Bool)

(assert (=> bm!2077 m!17977))

(assert (=> b!24042 m!17973))

(assert (=> b!24042 m!17973))

(declare-fun m!17979 () Bool)

(assert (=> b!24042 m!17979))

(declare-fun m!17981 () Bool)

(assert (=> bm!2072 m!17981))

(declare-fun m!17983 () Bool)

(assert (=> b!24037 m!17983))

(declare-fun m!17985 () Bool)

(assert (=> b!24037 m!17985))

(declare-fun m!17987 () Bool)

(assert (=> b!24037 m!17987))

(declare-fun m!17989 () Bool)

(assert (=> b!24037 m!17989))

(declare-fun m!17991 () Bool)

(assert (=> b!24037 m!17991))

(declare-fun m!17993 () Bool)

(assert (=> b!24037 m!17993))

(assert (=> b!24037 m!17983))

(declare-fun m!17995 () Bool)

(assert (=> b!24037 m!17995))

(declare-fun m!17997 () Bool)

(assert (=> b!24037 m!17997))

(declare-fun m!17999 () Bool)

(assert (=> b!24037 m!17999))

(declare-fun m!18001 () Bool)

(assert (=> b!24037 m!18001))

(declare-fun m!18003 () Bool)

(assert (=> b!24037 m!18003))

(assert (=> b!24037 m!17981))

(assert (=> b!24037 m!17973))

(declare-fun m!18005 () Bool)

(assert (=> b!24037 m!18005))

(assert (=> b!24037 m!17997))

(declare-fun m!18007 () Bool)

(assert (=> b!24037 m!18007))

(declare-fun m!18009 () Bool)

(assert (=> b!24037 m!18009))

(assert (=> b!24037 m!17987))

(assert (=> b!24037 m!17993))

(declare-fun m!18011 () Bool)

(assert (=> b!24037 m!18011))

(assert (=> b!24041 m!17973))

(assert (=> b!24041 m!17973))

(declare-fun m!18013 () Bool)

(assert (=> b!24041 m!18013))

(declare-fun m!18015 () Bool)

(assert (=> b!24029 m!18015))

(declare-fun m!18017 () Bool)

(assert (=> b!24044 m!18017))

(declare-fun m!18019 () Bool)

(assert (=> bm!2078 m!18019))

(declare-fun m!18021 () Bool)

(assert (=> d!4161 m!18021))

(assert (=> b!24030 m!17973))

(assert (=> b!24030 m!17973))

(assert (=> b!24030 m!17979))

(assert (=> d!4013 d!4161))

(declare-fun d!4163 () Bool)

(assert (=> d!4163 (= (inRange!0 (ite c!3113 (index!2338 lt!8735) (ite c!3115 (index!2337 lt!8722) (index!2340 lt!8722))) (mask!4729 (_2!490 lt!8142))) (and (bvsge (ite c!3113 (index!2338 lt!8735) (ite c!3115 (index!2337 lt!8722) (index!2340 lt!8722))) #b00000000000000000000000000000000) (bvslt (ite c!3113 (index!2338 lt!8735) (ite c!3115 (index!2337 lt!8722) (index!2340 lt!8722))) (bvadd (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000000001))))))

(assert (=> bm!2032 d!4163))

(declare-fun d!4165 () Bool)

(assert (=> d!4165 (= (validKeyInArray!0 (select (arr!597 lt!8241) lt!8240)) (and (not (= (select (arr!597 lt!8241) lt!8240) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 lt!8241) lt!8240) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23630 d!4165))

(declare-fun d!4167 () Bool)

(assert (=> d!4167 (= (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (and (not (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23705 d!4167))

(declare-fun d!4169 () Bool)

(declare-fun e!15574 () Bool)

(assert (=> d!4169 e!15574))

(declare-fun res!14715 () Bool)

(assert (=> d!4169 (=> res!14715 e!15574)))

(declare-fun lt!8953 () Bool)

(assert (=> d!4169 (= res!14715 (not lt!8953))))

(declare-fun lt!8954 () Bool)

(assert (=> d!4169 (= lt!8953 lt!8954)))

(declare-fun lt!8952 () Unit!522)

(declare-fun e!15573 () Unit!522)

(assert (=> d!4169 (= lt!8952 e!15573)))

(declare-fun c!3179 () Bool)

(assert (=> d!4169 (= c!3179 lt!8954)))

(assert (=> d!4169 (= lt!8954 (containsKey!25 (toList!297 lt!8447) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4169 (= (contains!229 lt!8447 #b1000000000000000000000000000000000000000000000000000000000000000) lt!8953)))

(declare-fun b!24049 () Bool)

(declare-fun lt!8955 () Unit!522)

(assert (=> b!24049 (= e!15573 lt!8955)))

(assert (=> b!24049 (= lt!8955 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8447) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24049 (isDefined!23 (getValueByKey!61 (toList!297 lt!8447) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24050 () Bool)

(declare-fun Unit!559 () Unit!522)

(assert (=> b!24050 (= e!15573 Unit!559)))

(declare-fun b!24051 () Bool)

(assert (=> b!24051 (= e!15574 (isDefined!23 (getValueByKey!61 (toList!297 lt!8447) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4169 c!3179) b!24049))

(assert (= (and d!4169 (not c!3179)) b!24050))

(assert (= (and d!4169 (not res!14715)) b!24051))

(declare-fun m!18023 () Bool)

(assert (=> d!4169 m!18023))

(declare-fun m!18025 () Bool)

(assert (=> b!24049 m!18025))

(declare-fun m!18027 () Bool)

(assert (=> b!24049 m!18027))

(assert (=> b!24049 m!18027))

(declare-fun m!18029 () Bool)

(assert (=> b!24049 m!18029))

(assert (=> b!24051 m!18027))

(assert (=> b!24051 m!18027))

(assert (=> b!24051 m!18029))

(assert (=> bm!1975 d!4169))

(declare-fun d!4171 () Bool)

(assert (=> d!4171 (= (validMask!0 (mask!4729 lt!8141)) (and (or (= (mask!4729 lt!8141) #b00000000000000000000000000000111) (= (mask!4729 lt!8141) #b00000000000000000000000000001111) (= (mask!4729 lt!8141) #b00000000000000000000000000011111) (= (mask!4729 lt!8141) #b00000000000000000000000000111111) (= (mask!4729 lt!8141) #b00000000000000000000000001111111) (= (mask!4729 lt!8141) #b00000000000000000000000011111111) (= (mask!4729 lt!8141) #b00000000000000000000000111111111) (= (mask!4729 lt!8141) #b00000000000000000000001111111111) (= (mask!4729 lt!8141) #b00000000000000000000011111111111) (= (mask!4729 lt!8141) #b00000000000000000000111111111111) (= (mask!4729 lt!8141) #b00000000000000000001111111111111) (= (mask!4729 lt!8141) #b00000000000000000011111111111111) (= (mask!4729 lt!8141) #b00000000000000000111111111111111) (= (mask!4729 lt!8141) #b00000000000000001111111111111111) (= (mask!4729 lt!8141) #b00000000000000011111111111111111) (= (mask!4729 lt!8141) #b00000000000000111111111111111111) (= (mask!4729 lt!8141) #b00000000000001111111111111111111) (= (mask!4729 lt!8141) #b00000000000011111111111111111111) (= (mask!4729 lt!8141) #b00000000000111111111111111111111) (= (mask!4729 lt!8141) #b00000000001111111111111111111111) (= (mask!4729 lt!8141) #b00000000011111111111111111111111) (= (mask!4729 lt!8141) #b00000000111111111111111111111111) (= (mask!4729 lt!8141) #b00000001111111111111111111111111) (= (mask!4729 lt!8141) #b00000011111111111111111111111111) (= (mask!4729 lt!8141) #b00000111111111111111111111111111) (= (mask!4729 lt!8141) #b00001111111111111111111111111111) (= (mask!4729 lt!8141) #b00011111111111111111111111111111) (= (mask!4729 lt!8141) #b00111111111111111111111111111111)) (bvsle (mask!4729 lt!8141) #b00111111111111111111111111111111)))))

(assert (=> d!3977 d!4171))

(declare-fun d!4173 () Bool)

(declare-fun e!15575 () Bool)

(assert (=> d!4173 e!15575))

(declare-fun res!14717 () Bool)

(assert (=> d!4173 (=> (not res!14717) (not e!15575))))

(declare-fun lt!8959 () ListLongMap!563)

(assert (=> d!4173 (= res!14717 (contains!229 lt!8959 (_1!495 (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(declare-fun lt!8957 () List!564)

(assert (=> d!4173 (= lt!8959 (ListLongMap!564 lt!8957))))

(declare-fun lt!8956 () Unit!522)

(declare-fun lt!8958 () Unit!522)

(assert (=> d!4173 (= lt!8956 lt!8958)))

(assert (=> d!4173 (= (getValueByKey!61 lt!8957 (_1!495 (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))) (Some!66 (_2!495 (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(assert (=> d!4173 (= lt!8958 (lemmaContainsTupThenGetReturnValue!18 lt!8957 (_1!495 (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (_2!495 (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(assert (=> d!4173 (= lt!8957 (insertStrictlySorted!18 (toList!297 (ite c!3089 call!2019 (ite c!3090 call!2014 call!2020))) (_1!495 (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (_2!495 (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(assert (=> d!4173 (= (+!44 (ite c!3089 call!2019 (ite c!3090 call!2014 call!2020)) (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) lt!8959)))

(declare-fun b!24052 () Bool)

(declare-fun res!14716 () Bool)

(assert (=> b!24052 (=> (not res!14716) (not e!15575))))

(assert (=> b!24052 (= res!14716 (= (getValueByKey!61 (toList!297 lt!8959) (_1!495 (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))) (Some!66 (_2!495 (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))))

(declare-fun b!24053 () Bool)

(assert (=> b!24053 (= e!15575 (contains!231 (toList!297 lt!8959) (ite (or c!3089 c!3090) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (= (and d!4173 res!14717) b!24052))

(assert (= (and b!24052 res!14716) b!24053))

(declare-fun m!18031 () Bool)

(assert (=> d!4173 m!18031))

(declare-fun m!18033 () Bool)

(assert (=> d!4173 m!18033))

(declare-fun m!18035 () Bool)

(assert (=> d!4173 m!18035))

(declare-fun m!18037 () Bool)

(assert (=> d!4173 m!18037))

(declare-fun m!18039 () Bool)

(assert (=> b!24052 m!18039))

(declare-fun m!18041 () Bool)

(assert (=> b!24053 m!18041))

(assert (=> bm!2014 d!4173))

(declare-fun d!4175 () Bool)

(assert (=> d!4175 (= (inRange!0 (index!2338 lt!8381) (mask!4729 (_2!490 lt!8142))) (and (bvsge (index!2338 lt!8381) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8381) (bvadd (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000000001))))))

(assert (=> b!23400 d!4175))

(declare-fun d!4177 () Bool)

(assert (=> d!4177 (isDefined!23 (getValueByKey!61 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!8962 () Unit!522)

(declare-fun choose!212 (List!564 (_ BitVec 64)) Unit!522)

(assert (=> d!4177 (= lt!8962 (choose!212 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15578 () Bool)

(assert (=> d!4177 e!15578))

(declare-fun res!14720 () Bool)

(assert (=> d!4177 (=> (not res!14720) (not e!15578))))

(declare-fun isStrictlySorted!158 (List!564) Bool)

(assert (=> d!4177 (= res!14720 (isStrictlySorted!158 (toList!297 e!15157)))))

(assert (=> d!4177 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000) lt!8962)))

(declare-fun b!24056 () Bool)

(assert (=> b!24056 (= e!15578 (containsKey!25 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4177 res!14720) b!24056))

(assert (=> d!4177 m!16896))

(assert (=> d!4177 m!16896))

(assert (=> d!4177 m!16898))

(declare-fun m!18043 () Bool)

(assert (=> d!4177 m!18043))

(declare-fun m!18045 () Bool)

(assert (=> d!4177 m!18045))

(assert (=> b!24056 m!16892))

(assert (=> b!23393 d!4177))

(declare-fun d!4179 () Bool)

(assert (=> d!4179 (= (isDefined!23 (getValueByKey!61 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!172 (getValueByKey!61 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!964 () Bool)

(assert (= bs!964 d!4179))

(assert (=> bs!964 m!16896))

(declare-fun m!18047 () Bool)

(assert (=> bs!964 m!18047))

(assert (=> b!23393 d!4179))

(declare-fun b!24059 () Bool)

(declare-fun e!15580 () Option!67)

(assert (=> b!24059 (= e!15580 (getValueByKey!61 (t!3229 (toList!297 e!15157)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24057 () Bool)

(declare-fun e!15579 () Option!67)

(assert (=> b!24057 (= e!15579 (Some!66 (_2!495 (h!1126 (toList!297 e!15157)))))))

(declare-fun b!24060 () Bool)

(assert (=> b!24060 (= e!15580 None!65)))

(declare-fun d!4181 () Bool)

(declare-fun c!3180 () Bool)

(assert (=> d!4181 (= c!3180 (and ((_ is Cons!560) (toList!297 e!15157)) (= (_1!495 (h!1126 (toList!297 e!15157))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4181 (= (getValueByKey!61 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000) e!15579)))

(declare-fun b!24058 () Bool)

(assert (=> b!24058 (= e!15579 e!15580)))

(declare-fun c!3181 () Bool)

(assert (=> b!24058 (= c!3181 (and ((_ is Cons!560) (toList!297 e!15157)) (not (= (_1!495 (h!1126 (toList!297 e!15157))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4181 c!3180) b!24057))

(assert (= (and d!4181 (not c!3180)) b!24058))

(assert (= (and b!24058 c!3181) b!24059))

(assert (= (and b!24058 (not c!3181)) b!24060))

(declare-fun m!18049 () Bool)

(assert (=> b!24059 m!18049))

(assert (=> b!23393 d!4181))

(declare-fun d!4183 () Bool)

(declare-fun res!14721 () Bool)

(declare-fun e!15581 () Bool)

(assert (=> d!4183 (=> res!14721 e!15581)))

(assert (=> d!4183 (= res!14721 (and ((_ is Cons!560) (toList!297 call!1944)) (= (_1!495 (h!1126 (toList!297 call!1944))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4183 (= (containsKey!25 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000) e!15581)))

(declare-fun b!24061 () Bool)

(declare-fun e!15582 () Bool)

(assert (=> b!24061 (= e!15581 e!15582)))

(declare-fun res!14722 () Bool)

(assert (=> b!24061 (=> (not res!14722) (not e!15582))))

(assert (=> b!24061 (= res!14722 (and (or (not ((_ is Cons!560) (toList!297 call!1944))) (bvsle (_1!495 (h!1126 (toList!297 call!1944))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!560) (toList!297 call!1944)) (bvslt (_1!495 (h!1126 (toList!297 call!1944))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24062 () Bool)

(assert (=> b!24062 (= e!15582 (containsKey!25 (t!3229 (toList!297 call!1944)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4183 (not res!14721)) b!24061))

(assert (= (and b!24061 res!14722) b!24062))

(declare-fun m!18051 () Bool)

(assert (=> b!24062 m!18051))

(assert (=> d!4019 d!4183))

(assert (=> bm!2033 d!4067))

(declare-fun d!4185 () Bool)

(declare-fun e!15583 () Bool)

(assert (=> d!4185 e!15583))

(declare-fun res!14724 () Bool)

(assert (=> d!4185 (=> (not res!14724) (not e!15583))))

(declare-fun lt!8966 () ListLongMap!563)

(assert (=> d!4185 (= res!14724 (contains!229 lt!8966 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(declare-fun lt!8964 () List!564)

(assert (=> d!4185 (= lt!8966 (ListLongMap!564 lt!8964))))

(declare-fun lt!8963 () Unit!522)

(declare-fun lt!8965 () Unit!522)

(assert (=> d!4185 (= lt!8963 lt!8965)))

(assert (=> d!4185 (= (getValueByKey!61 lt!8964 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4185 (= lt!8965 (lemmaContainsTupThenGetReturnValue!18 lt!8964 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4185 (= lt!8964 (insertStrictlySorted!18 (toList!297 call!2018) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4185 (= (+!44 call!2018 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8966)))

(declare-fun b!24063 () Bool)

(declare-fun res!14723 () Bool)

(assert (=> b!24063 (=> (not res!14723) (not e!15583))))

(assert (=> b!24063 (= res!14723 (= (getValueByKey!61 (toList!297 lt!8966) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(declare-fun b!24064 () Bool)

(assert (=> b!24064 (= e!15583 (contains!231 (toList!297 lt!8966) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))

(assert (= (and d!4185 res!14724) b!24063))

(assert (= (and b!24063 res!14723) b!24064))

(declare-fun m!18053 () Bool)

(assert (=> d!4185 m!18053))

(declare-fun m!18055 () Bool)

(assert (=> d!4185 m!18055))

(declare-fun m!18057 () Bool)

(assert (=> d!4185 m!18057))

(declare-fun m!18059 () Bool)

(assert (=> d!4185 m!18059))

(declare-fun m!18061 () Bool)

(assert (=> b!24063 m!18061))

(declare-fun m!18063 () Bool)

(assert (=> b!24064 m!18063))

(assert (=> b!23681 d!4185))

(declare-fun d!4187 () Bool)

(assert (=> d!4187 (= (inRange!0 (ite c!3069 (index!2337 lt!8583) (index!2340 lt!8583)) (mask!4729 (_2!490 lt!8142))) (and (bvsge (ite c!3069 (index!2337 lt!8583) (index!2340 lt!8583)) #b00000000000000000000000000000000) (bvslt (ite c!3069 (index!2337 lt!8583) (index!2340 lt!8583)) (bvadd (mask!4729 (_2!490 lt!8142)) #b00000000000000000000000000000001))))))

(assert (=> bm!2001 d!4187))

(declare-fun b!24065 () Bool)

(declare-fun e!15585 () (_ BitVec 32))

(assert (=> b!24065 (= e!15585 #b00000000000000000000000000000000)))

(declare-fun b!24066 () Bool)

(declare-fun e!15584 () (_ BitVec 32))

(assert (=> b!24066 (= e!15585 e!15584)))

(declare-fun c!3183 () Bool)

(assert (=> b!24066 (= c!3183 (validKeyInArray!0 (select (arr!597 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(declare-fun bm!2079 () Bool)

(declare-fun call!2082 () (_ BitVec 32))

(assert (=> bm!2079 (= call!2082 (arrayCountValidKeys!0 (_keys!3163 (v!1602 (underlying!115 thiss!938))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun d!4189 () Bool)

(declare-fun lt!8967 () (_ BitVec 32))

(assert (=> d!4189 (and (bvsge lt!8967 #b00000000000000000000000000000000) (bvsle lt!8967 (bvsub (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(assert (=> d!4189 (= lt!8967 e!15585)))

(declare-fun c!3182 () Bool)

(assert (=> d!4189 (= c!3182 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938))))))))

(assert (=> d!4189 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938))))))))

(assert (=> d!4189 (= (arrayCountValidKeys!0 (_keys!3163 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938))))) lt!8967)))

(declare-fun b!24067 () Bool)

(assert (=> b!24067 (= e!15584 (bvadd #b00000000000000000000000000000001 call!2082))))

(declare-fun b!24068 () Bool)

(assert (=> b!24068 (= e!15584 call!2082)))

(assert (= (and d!4189 c!3182) b!24065))

(assert (= (and d!4189 (not c!3182)) b!24066))

(assert (= (and b!24066 c!3183) b!24067))

(assert (= (and b!24066 (not c!3183)) b!24068))

(assert (= (or b!24067 b!24068) bm!2079))

(declare-fun m!18065 () Bool)

(assert (=> b!24066 m!18065))

(assert (=> b!24066 m!18065))

(declare-fun m!18067 () Bool)

(assert (=> b!24066 m!18067))

(declare-fun m!18069 () Bool)

(assert (=> bm!2079 m!18069))

(assert (=> b!23546 d!4189))

(assert (=> b!23693 d!4167))

(declare-fun d!4191 () Bool)

(declare-fun e!15587 () Bool)

(assert (=> d!4191 e!15587))

(declare-fun res!14725 () Bool)

(assert (=> d!4191 (=> res!14725 e!15587)))

(declare-fun lt!8969 () Bool)

(assert (=> d!4191 (= res!14725 (not lt!8969))))

(declare-fun lt!8970 () Bool)

(assert (=> d!4191 (= lt!8969 lt!8970)))

(declare-fun lt!8968 () Unit!522)

(declare-fun e!15586 () Unit!522)

(assert (=> d!4191 (= lt!8968 e!15586)))

(declare-fun c!3184 () Bool)

(assert (=> d!4191 (= c!3184 lt!8970)))

(assert (=> d!4191 (= lt!8970 (containsKey!25 (toList!297 lt!8704) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4191 (= (contains!229 lt!8704 #b1000000000000000000000000000000000000000000000000000000000000000) lt!8969)))

(declare-fun b!24069 () Bool)

(declare-fun lt!8971 () Unit!522)

(assert (=> b!24069 (= e!15586 lt!8971)))

(assert (=> b!24069 (= lt!8971 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8704) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24069 (isDefined!23 (getValueByKey!61 (toList!297 lt!8704) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24070 () Bool)

(declare-fun Unit!560 () Unit!522)

(assert (=> b!24070 (= e!15586 Unit!560)))

(declare-fun b!24071 () Bool)

(assert (=> b!24071 (= e!15587 (isDefined!23 (getValueByKey!61 (toList!297 lt!8704) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4191 c!3184) b!24069))

(assert (= (and d!4191 (not c!3184)) b!24070))

(assert (= (and d!4191 (not res!14725)) b!24071))

(declare-fun m!18071 () Bool)

(assert (=> d!4191 m!18071))

(declare-fun m!18073 () Bool)

(assert (=> b!24069 m!18073))

(declare-fun m!18075 () Bool)

(assert (=> b!24069 m!18075))

(assert (=> b!24069 m!18075))

(declare-fun m!18077 () Bool)

(assert (=> b!24069 m!18077))

(assert (=> b!24071 m!18075))

(assert (=> b!24071 m!18075))

(assert (=> b!24071 m!18077))

(assert (=> bm!2030 d!4191))

(declare-fun d!4193 () Bool)

(declare-fun e!15589 () Bool)

(assert (=> d!4193 e!15589))

(declare-fun res!14726 () Bool)

(assert (=> d!4193 (=> res!14726 e!15589)))

(declare-fun lt!8973 () Bool)

(assert (=> d!4193 (= res!14726 (not lt!8973))))

(declare-fun lt!8974 () Bool)

(assert (=> d!4193 (= lt!8973 lt!8974)))

(declare-fun lt!8972 () Unit!522)

(declare-fun e!15588 () Unit!522)

(assert (=> d!4193 (= lt!8972 e!15588)))

(declare-fun c!3185 () Bool)

(assert (=> d!4193 (= c!3185 lt!8974)))

(assert (=> d!4193 (= lt!8974 (containsKey!25 (toList!297 lt!8672) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4193 (= (contains!229 lt!8672 #b0000000000000000000000000000000000000000000000000000000000000000) lt!8973)))

(declare-fun b!24072 () Bool)

(declare-fun lt!8975 () Unit!522)

(assert (=> b!24072 (= e!15588 lt!8975)))

(assert (=> b!24072 (= lt!8975 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8672) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24072 (isDefined!23 (getValueByKey!61 (toList!297 lt!8672) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24073 () Bool)

(declare-fun Unit!561 () Unit!522)

(assert (=> b!24073 (= e!15588 Unit!561)))

(declare-fun b!24074 () Bool)

(assert (=> b!24074 (= e!15589 (isDefined!23 (getValueByKey!61 (toList!297 lt!8672) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4193 c!3185) b!24072))

(assert (= (and d!4193 (not c!3185)) b!24073))

(assert (= (and d!4193 (not res!14726)) b!24074))

(declare-fun m!18079 () Bool)

(assert (=> d!4193 m!18079))

(declare-fun m!18081 () Bool)

(assert (=> b!24072 m!18081))

(declare-fun m!18083 () Bool)

(assert (=> b!24072 m!18083))

(assert (=> b!24072 m!18083))

(declare-fun m!18085 () Bool)

(assert (=> b!24072 m!18085))

(assert (=> b!24074 m!18083))

(assert (=> b!24074 m!18083))

(assert (=> b!24074 m!18085))

(assert (=> bm!2024 d!4193))

(declare-fun d!4195 () Bool)

(assert (=> d!4195 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4195 true))

(declare-fun _$5!55 () Unit!522)

(assert (=> d!4195 (= (choose!209 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (index!2338 lt!8356) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))) _$5!55)))

(declare-fun bs!965 () Bool)

(assert (= bs!965 d!4195))

(assert (=> bs!965 m!16844))

(assert (=> bs!965 m!16844))

(assert (=> bs!965 m!17212))

(assert (=> bs!965 m!16850))

(assert (=> bs!965 m!17367))

(assert (=> d!4045 d!4195))

(assert (=> d!4045 d!4145))

(declare-fun d!4197 () Bool)

(declare-fun e!15590 () Bool)

(assert (=> d!4197 e!15590))

(declare-fun res!14728 () Bool)

(assert (=> d!4197 (=> (not res!14728) (not e!15590))))

(declare-fun lt!8979 () ListLongMap!563)

(assert (=> d!4197 (= res!14728 (contains!229 lt!8979 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun lt!8977 () List!564)

(assert (=> d!4197 (= lt!8979 (ListLongMap!564 lt!8977))))

(declare-fun lt!8976 () Unit!522)

(declare-fun lt!8978 () Unit!522)

(assert (=> d!4197 (= lt!8976 lt!8978)))

(assert (=> d!4197 (= (getValueByKey!61 lt!8977 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4197 (= lt!8978 (lemmaContainsTupThenGetReturnValue!18 lt!8977 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4197 (= lt!8977 (insertStrictlySorted!18 (toList!297 call!1996) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4197 (= (+!44 call!1996 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) lt!8979)))

(declare-fun b!24075 () Bool)

(declare-fun res!14727 () Bool)

(assert (=> b!24075 (=> (not res!14727) (not e!15590))))

(assert (=> b!24075 (= res!14727 (= (getValueByKey!61 (toList!297 lt!8979) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))))

(declare-fun b!24076 () Bool)

(assert (=> b!24076 (= e!15590 (contains!231 (toList!297 lt!8979) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))

(assert (= (and d!4197 res!14728) b!24075))

(assert (= (and b!24075 res!14727) b!24076))

(declare-fun m!18087 () Bool)

(assert (=> d!4197 m!18087))

(declare-fun m!18089 () Bool)

(assert (=> d!4197 m!18089))

(declare-fun m!18091 () Bool)

(assert (=> d!4197 m!18091))

(declare-fun m!18093 () Bool)

(assert (=> d!4197 m!18093))

(declare-fun m!18095 () Bool)

(assert (=> b!24075 m!18095))

(declare-fun m!18097 () Bool)

(assert (=> b!24076 m!18097))

(assert (=> b!23565 d!4197))

(declare-fun d!4199 () Bool)

(declare-fun e!15591 () Bool)

(assert (=> d!4199 e!15591))

(declare-fun res!14730 () Bool)

(assert (=> d!4199 (=> (not res!14730) (not e!15591))))

(declare-fun lt!8983 () ListLongMap!563)

(assert (=> d!4199 (= res!14730 (contains!229 lt!8983 (_1!495 (tuple2!973 lt!8454 (minValue!1665 lt!8141)))))))

(declare-fun lt!8981 () List!564)

(assert (=> d!4199 (= lt!8983 (ListLongMap!564 lt!8981))))

(declare-fun lt!8980 () Unit!522)

(declare-fun lt!8982 () Unit!522)

(assert (=> d!4199 (= lt!8980 lt!8982)))

(assert (=> d!4199 (= (getValueByKey!61 lt!8981 (_1!495 (tuple2!973 lt!8454 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8454 (minValue!1665 lt!8141)))))))

(assert (=> d!4199 (= lt!8982 (lemmaContainsTupThenGetReturnValue!18 lt!8981 (_1!495 (tuple2!973 lt!8454 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8454 (minValue!1665 lt!8141)))))))

(assert (=> d!4199 (= lt!8981 (insertStrictlySorted!18 (toList!297 lt!8456) (_1!495 (tuple2!973 lt!8454 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8454 (minValue!1665 lt!8141)))))))

(assert (=> d!4199 (= (+!44 lt!8456 (tuple2!973 lt!8454 (minValue!1665 lt!8141))) lt!8983)))

(declare-fun b!24077 () Bool)

(declare-fun res!14729 () Bool)

(assert (=> b!24077 (=> (not res!14729) (not e!15591))))

(assert (=> b!24077 (= res!14729 (= (getValueByKey!61 (toList!297 lt!8983) (_1!495 (tuple2!973 lt!8454 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8454 (minValue!1665 lt!8141))))))))

(declare-fun b!24078 () Bool)

(assert (=> b!24078 (= e!15591 (contains!231 (toList!297 lt!8983) (tuple2!973 lt!8454 (minValue!1665 lt!8141))))))

(assert (= (and d!4199 res!14730) b!24077))

(assert (= (and b!24077 res!14729) b!24078))

(declare-fun m!18099 () Bool)

(assert (=> d!4199 m!18099))

(declare-fun m!18101 () Bool)

(assert (=> d!4199 m!18101))

(declare-fun m!18103 () Bool)

(assert (=> d!4199 m!18103))

(declare-fun m!18105 () Bool)

(assert (=> d!4199 m!18105))

(declare-fun m!18107 () Bool)

(assert (=> b!24077 m!18107))

(declare-fun m!18109 () Bool)

(assert (=> b!24078 m!18109))

(assert (=> b!23471 d!4199))

(declare-fun d!4201 () Bool)

(declare-fun e!15592 () Bool)

(assert (=> d!4201 e!15592))

(declare-fun res!14732 () Bool)

(assert (=> d!4201 (=> (not res!14732) (not e!15592))))

(declare-fun lt!8987 () ListLongMap!563)

(assert (=> d!4201 (= res!14732 (contains!229 lt!8987 (_1!495 (tuple2!973 lt!8439 (minValue!1665 lt!8141)))))))

(declare-fun lt!8985 () List!564)

(assert (=> d!4201 (= lt!8987 (ListLongMap!564 lt!8985))))

(declare-fun lt!8984 () Unit!522)

(declare-fun lt!8986 () Unit!522)

(assert (=> d!4201 (= lt!8984 lt!8986)))

(assert (=> d!4201 (= (getValueByKey!61 lt!8985 (_1!495 (tuple2!973 lt!8439 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8439 (minValue!1665 lt!8141)))))))

(assert (=> d!4201 (= lt!8986 (lemmaContainsTupThenGetReturnValue!18 lt!8985 (_1!495 (tuple2!973 lt!8439 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8439 (minValue!1665 lt!8141)))))))

(assert (=> d!4201 (= lt!8985 (insertStrictlySorted!18 (toList!297 lt!8453) (_1!495 (tuple2!973 lt!8439 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8439 (minValue!1665 lt!8141)))))))

(assert (=> d!4201 (= (+!44 lt!8453 (tuple2!973 lt!8439 (minValue!1665 lt!8141))) lt!8987)))

(declare-fun b!24079 () Bool)

(declare-fun res!14731 () Bool)

(assert (=> b!24079 (=> (not res!14731) (not e!15592))))

(assert (=> b!24079 (= res!14731 (= (getValueByKey!61 (toList!297 lt!8987) (_1!495 (tuple2!973 lt!8439 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8439 (minValue!1665 lt!8141))))))))

(declare-fun b!24080 () Bool)

(assert (=> b!24080 (= e!15592 (contains!231 (toList!297 lt!8987) (tuple2!973 lt!8439 (minValue!1665 lt!8141))))))

(assert (= (and d!4201 res!14732) b!24079))

(assert (= (and b!24079 res!14731) b!24080))

(declare-fun m!18111 () Bool)

(assert (=> d!4201 m!18111))

(declare-fun m!18113 () Bool)

(assert (=> d!4201 m!18113))

(declare-fun m!18115 () Bool)

(assert (=> d!4201 m!18115))

(declare-fun m!18117 () Bool)

(assert (=> d!4201 m!18117))

(declare-fun m!18119 () Bool)

(assert (=> b!24079 m!18119))

(declare-fun m!18121 () Bool)

(assert (=> b!24080 m!18121))

(assert (=> b!23471 d!4201))

(declare-fun d!4203 () Bool)

(assert (=> d!4203 (= (apply!29 lt!8456 lt!8448) (get!391 (getValueByKey!61 (toList!297 lt!8456) lt!8448)))))

(declare-fun bs!966 () Bool)

(assert (= bs!966 d!4203))

(declare-fun m!18123 () Bool)

(assert (=> bs!966 m!18123))

(assert (=> bs!966 m!18123))

(declare-fun m!18125 () Bool)

(assert (=> bs!966 m!18125))

(assert (=> b!23471 d!4203))

(declare-fun d!4205 () Bool)

(assert (=> d!4205 (= (apply!29 (+!44 lt!8453 (tuple2!973 lt!8439 (minValue!1665 lt!8141))) lt!8437) (apply!29 lt!8453 lt!8437))))

(declare-fun lt!8990 () Unit!522)

(declare-fun choose!213 (ListLongMap!563 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!522)

(assert (=> d!4205 (= lt!8990 (choose!213 lt!8453 lt!8439 (minValue!1665 lt!8141) lt!8437))))

(declare-fun e!15595 () Bool)

(assert (=> d!4205 e!15595))

(declare-fun res!14735 () Bool)

(assert (=> d!4205 (=> (not res!14735) (not e!15595))))

(assert (=> d!4205 (= res!14735 (contains!229 lt!8453 lt!8437))))

(assert (=> d!4205 (= (addApplyDifferent!14 lt!8453 lt!8439 (minValue!1665 lt!8141) lt!8437) lt!8990)))

(declare-fun b!24084 () Bool)

(assert (=> b!24084 (= e!15595 (not (= lt!8437 lt!8439)))))

(assert (= (and d!4205 res!14735) b!24084))

(declare-fun m!18127 () Bool)

(assert (=> d!4205 m!18127))

(assert (=> d!4205 m!16970))

(assert (=> d!4205 m!16948))

(assert (=> d!4205 m!16948))

(assert (=> d!4205 m!16950))

(declare-fun m!18129 () Bool)

(assert (=> d!4205 m!18129))

(assert (=> b!23471 d!4205))

(declare-fun d!4207 () Bool)

(assert (=> d!4207 (= (apply!29 (+!44 lt!8456 (tuple2!973 lt!8454 (minValue!1665 lt!8141))) lt!8448) (apply!29 lt!8456 lt!8448))))

(declare-fun lt!8991 () Unit!522)

(assert (=> d!4207 (= lt!8991 (choose!213 lt!8456 lt!8454 (minValue!1665 lt!8141) lt!8448))))

(declare-fun e!15596 () Bool)

(assert (=> d!4207 e!15596))

(declare-fun res!14736 () Bool)

(assert (=> d!4207 (=> (not res!14736) (not e!15596))))

(assert (=> d!4207 (= res!14736 (contains!229 lt!8456 lt!8448))))

(assert (=> d!4207 (= (addApplyDifferent!14 lt!8456 lt!8454 (minValue!1665 lt!8141) lt!8448) lt!8991)))

(declare-fun b!24085 () Bool)

(assert (=> b!24085 (= e!15596 (not (= lt!8448 lt!8454)))))

(assert (= (and d!4207 res!14736) b!24085))

(declare-fun m!18131 () Bool)

(assert (=> d!4207 m!18131))

(assert (=> d!4207 m!16964))

(assert (=> d!4207 m!16958))

(assert (=> d!4207 m!16958))

(assert (=> d!4207 m!16960))

(declare-fun m!18133 () Bool)

(assert (=> d!4207 m!18133))

(assert (=> b!23471 d!4207))

(declare-fun d!4209 () Bool)

(assert (=> d!4209 (= (apply!29 (+!44 lt!8456 (tuple2!973 lt!8454 (minValue!1665 lt!8141))) lt!8448) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8456 (tuple2!973 lt!8454 (minValue!1665 lt!8141)))) lt!8448)))))

(declare-fun bs!967 () Bool)

(assert (= bs!967 d!4209))

(declare-fun m!18135 () Bool)

(assert (=> bs!967 m!18135))

(assert (=> bs!967 m!18135))

(declare-fun m!18137 () Bool)

(assert (=> bs!967 m!18137))

(assert (=> b!23471 d!4209))

(declare-fun d!4211 () Bool)

(assert (=> d!4211 (= (apply!29 lt!8442 lt!8449) (get!391 (getValueByKey!61 (toList!297 lt!8442) lt!8449)))))

(declare-fun bs!968 () Bool)

(assert (= bs!968 d!4211))

(declare-fun m!18139 () Bool)

(assert (=> bs!968 m!18139))

(assert (=> bs!968 m!18139))

(declare-fun m!18141 () Bool)

(assert (=> bs!968 m!18141))

(assert (=> b!23471 d!4211))

(declare-fun d!4213 () Bool)

(assert (=> d!4213 (= (apply!29 (+!44 lt!8442 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141))) lt!8449) (apply!29 lt!8442 lt!8449))))

(declare-fun lt!8992 () Unit!522)

(assert (=> d!4213 (= lt!8992 (choose!213 lt!8442 lt!8457 (zeroValue!1665 lt!8141) lt!8449))))

(declare-fun e!15597 () Bool)

(assert (=> d!4213 e!15597))

(declare-fun res!14737 () Bool)

(assert (=> d!4213 (=> (not res!14737) (not e!15597))))

(assert (=> d!4213 (= res!14737 (contains!229 lt!8442 lt!8449))))

(assert (=> d!4213 (= (addApplyDifferent!14 lt!8442 lt!8457 (zeroValue!1665 lt!8141) lt!8449) lt!8992)))

(declare-fun b!24086 () Bool)

(assert (=> b!24086 (= e!15597 (not (= lt!8449 lt!8457)))))

(assert (= (and d!4213 res!14737) b!24086))

(declare-fun m!18143 () Bool)

(assert (=> d!4213 m!18143))

(assert (=> d!4213 m!16952))

(assert (=> d!4213 m!16944))

(assert (=> d!4213 m!16944))

(assert (=> d!4213 m!16946))

(declare-fun m!18145 () Bool)

(assert (=> d!4213 m!18145))

(assert (=> b!23471 d!4213))

(declare-fun d!4215 () Bool)

(declare-fun e!15598 () Bool)

(assert (=> d!4215 e!15598))

(declare-fun res!14739 () Bool)

(assert (=> d!4215 (=> (not res!14739) (not e!15598))))

(declare-fun lt!8996 () ListLongMap!563)

(assert (=> d!4215 (= res!14739 (contains!229 lt!8996 (_1!495 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141)))))))

(declare-fun lt!8994 () List!564)

(assert (=> d!4215 (= lt!8996 (ListLongMap!564 lt!8994))))

(declare-fun lt!8993 () Unit!522)

(declare-fun lt!8995 () Unit!522)

(assert (=> d!4215 (= lt!8993 lt!8995)))

(assert (=> d!4215 (= (getValueByKey!61 lt!8994 (_1!495 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4215 (= lt!8995 (lemmaContainsTupThenGetReturnValue!18 lt!8994 (_1!495 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4215 (= lt!8994 (insertStrictlySorted!18 (toList!297 lt!8442) (_1!495 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4215 (= (+!44 lt!8442 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141))) lt!8996)))

(declare-fun b!24087 () Bool)

(declare-fun res!14738 () Bool)

(assert (=> b!24087 (=> (not res!14738) (not e!15598))))

(assert (=> b!24087 (= res!14738 (= (getValueByKey!61 (toList!297 lt!8996) (_1!495 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141))))))))

(declare-fun b!24088 () Bool)

(assert (=> b!24088 (= e!15598 (contains!231 (toList!297 lt!8996) (tuple2!973 lt!8457 (zeroValue!1665 lt!8141))))))

(assert (= (and d!4215 res!14739) b!24087))

(assert (= (and b!24087 res!14738) b!24088))

(declare-fun m!18147 () Bool)

(assert (=> d!4215 m!18147))

(declare-fun m!18149 () Bool)

(assert (=> d!4215 m!18149))

(declare-fun m!18151 () Bool)

(assert (=> d!4215 m!18151))

(declare-fun m!18153 () Bool)

(assert (=> d!4215 m!18153))

(declare-fun m!18155 () Bool)

(assert (=> b!24087 m!18155))

(declare-fun m!18157 () Bool)

(assert (=> b!24088 m!18157))

(assert (=> b!23471 d!4215))

(declare-fun b!24113 () Bool)

(declare-fun e!15618 () Bool)

(declare-fun lt!9011 () ListLongMap!563)

(assert (=> b!24113 (= e!15618 (= lt!9011 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141))))))

(declare-fun b!24115 () Bool)

(declare-fun e!15616 () Bool)

(declare-fun e!15613 () Bool)

(assert (=> b!24115 (= e!15616 e!15613)))

(assert (=> b!24115 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14750 () Bool)

(assert (=> b!24115 (= res!14750 (contains!229 lt!9011 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24115 (=> (not res!14750) (not e!15613))))

(declare-fun b!24116 () Bool)

(declare-fun e!15614 () ListLongMap!563)

(declare-fun e!15617 () ListLongMap!563)

(assert (=> b!24116 (= e!15614 e!15617)))

(declare-fun c!3194 () Bool)

(assert (=> b!24116 (= c!3194 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24117 () Bool)

(assert (=> b!24117 (= e!15614 (ListLongMap!564 Nil!561))))

(declare-fun b!24118 () Bool)

(assert (=> b!24118 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> b!24118 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8141))))))

(assert (=> b!24118 (= e!15613 (= (apply!29 lt!9011 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24119 () Bool)

(declare-fun call!2085 () ListLongMap!563)

(assert (=> b!24119 (= e!15617 call!2085)))

(declare-fun b!24120 () Bool)

(declare-fun res!14749 () Bool)

(declare-fun e!15619 () Bool)

(assert (=> b!24120 (=> (not res!14749) (not e!15619))))

(assert (=> b!24120 (= res!14749 (not (contains!229 lt!9011 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24121 () Bool)

(declare-fun isEmpty!173 (ListLongMap!563) Bool)

(assert (=> b!24121 (= e!15618 (isEmpty!173 lt!9011))))

(declare-fun b!24122 () Bool)

(assert (=> b!24122 (= e!15616 e!15618)))

(declare-fun c!3196 () Bool)

(assert (=> b!24122 (= c!3196 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!2082 () Bool)

(assert (=> bm!2082 (= call!2085 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141)))))

(declare-fun b!24114 () Bool)

(assert (=> b!24114 (= e!15619 e!15616)))

(declare-fun c!3195 () Bool)

(declare-fun e!15615 () Bool)

(assert (=> b!24114 (= c!3195 e!15615)))

(declare-fun res!14748 () Bool)

(assert (=> b!24114 (=> (not res!14748) (not e!15615))))

(assert (=> b!24114 (= res!14748 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun d!4217 () Bool)

(assert (=> d!4217 e!15619))

(declare-fun res!14751 () Bool)

(assert (=> d!4217 (=> (not res!14751) (not e!15619))))

(assert (=> d!4217 (= res!14751 (not (contains!229 lt!9011 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4217 (= lt!9011 e!15614)))

(declare-fun c!3197 () Bool)

(assert (=> d!4217 (= c!3197 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4217 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4217 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9011)))

(declare-fun b!24123 () Bool)

(declare-fun lt!9013 () Unit!522)

(declare-fun lt!9014 () Unit!522)

(assert (=> b!24123 (= lt!9013 lt!9014)))

(declare-fun lt!9015 () (_ BitVec 64))

(declare-fun lt!9017 () V!1187)

(declare-fun lt!9016 () (_ BitVec 64))

(declare-fun lt!9012 () ListLongMap!563)

(assert (=> b!24123 (not (contains!229 (+!44 lt!9012 (tuple2!973 lt!9016 lt!9017)) lt!9015))))

(declare-fun addStillNotContains!2 (ListLongMap!563 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!522)

(assert (=> b!24123 (= lt!9014 (addStillNotContains!2 lt!9012 lt!9016 lt!9017 lt!9015))))

(assert (=> b!24123 (= lt!9015 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!24123 (= lt!9017 (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24123 (= lt!9016 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24123 (= lt!9012 call!2085)))

(assert (=> b!24123 (= e!15617 (+!44 call!2085 (tuple2!973 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!24124 () Bool)

(assert (=> b!24124 (= e!15615 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24124 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!4217 c!3197) b!24117))

(assert (= (and d!4217 (not c!3197)) b!24116))

(assert (= (and b!24116 c!3194) b!24123))

(assert (= (and b!24116 (not c!3194)) b!24119))

(assert (= (or b!24123 b!24119) bm!2082))

(assert (= (and d!4217 res!14751) b!24120))

(assert (= (and b!24120 res!14749) b!24114))

(assert (= (and b!24114 res!14748) b!24124))

(assert (= (and b!24114 c!3195) b!24115))

(assert (= (and b!24114 (not c!3195)) b!24122))

(assert (= (and b!24115 res!14750) b!24118))

(assert (= (and b!24122 c!3196) b!24113))

(assert (= (and b!24122 (not c!3196)) b!24121))

(declare-fun b_lambda!1591 () Bool)

(assert (=> (not b_lambda!1591) (not b!24118)))

(assert (=> b!24118 t!3232))

(declare-fun b_and!1503 () Bool)

(assert (= b_and!1501 (and (=> t!3232 result!1093) b_and!1503)))

(declare-fun b_lambda!1593 () Bool)

(assert (=> (not b_lambda!1593) (not b!24123)))

(assert (=> b!24123 t!3232))

(declare-fun b_and!1505 () Bool)

(assert (= b_and!1503 (and (=> t!3232 result!1093) b_and!1505)))

(declare-fun m!18159 () Bool)

(assert (=> b!24123 m!18159))

(declare-fun m!18161 () Bool)

(assert (=> b!24123 m!18161))

(declare-fun m!18163 () Bool)

(assert (=> b!24123 m!18163))

(assert (=> b!24123 m!16928))

(assert (=> b!24123 m!16930))

(assert (=> b!24123 m!16932))

(assert (=> b!24123 m!16930))

(assert (=> b!24123 m!16934))

(assert (=> b!24123 m!18159))

(declare-fun m!18165 () Bool)

(assert (=> b!24123 m!18165))

(assert (=> b!24123 m!16928))

(declare-fun m!18167 () Bool)

(assert (=> d!4217 m!18167))

(assert (=> d!4217 m!16908))

(assert (=> b!24115 m!16934))

(assert (=> b!24115 m!16934))

(declare-fun m!18169 () Bool)

(assert (=> b!24115 m!18169))

(declare-fun m!18171 () Bool)

(assert (=> bm!2082 m!18171))

(assert (=> b!24124 m!16934))

(assert (=> b!24124 m!16934))

(assert (=> b!24124 m!16940))

(declare-fun m!18173 () Bool)

(assert (=> b!24121 m!18173))

(assert (=> b!24116 m!16934))

(assert (=> b!24116 m!16934))

(assert (=> b!24116 m!16940))

(assert (=> b!24113 m!18171))

(declare-fun m!18175 () Bool)

(assert (=> b!24120 m!18175))

(assert (=> b!24118 m!16928))

(assert (=> b!24118 m!16930))

(assert (=> b!24118 m!16932))

(assert (=> b!24118 m!16930))

(assert (=> b!24118 m!16934))

(assert (=> b!24118 m!16928))

(assert (=> b!24118 m!16934))

(declare-fun m!18177 () Bool)

(assert (=> b!24118 m!18177))

(assert (=> b!23471 d!4217))

(declare-fun d!4219 () Bool)

(assert (=> d!4219 (= (apply!29 lt!8453 lt!8437) (get!391 (getValueByKey!61 (toList!297 lt!8453) lt!8437)))))

(declare-fun bs!969 () Bool)

(assert (= bs!969 d!4219))

(declare-fun m!18179 () Bool)

(assert (=> bs!969 m!18179))

(assert (=> bs!969 m!18179))

(declare-fun m!18181 () Bool)

(assert (=> bs!969 m!18181))

(assert (=> b!23471 d!4219))

(declare-fun d!4221 () Bool)

(assert (=> d!4221 (contains!229 (+!44 lt!8452 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141))) lt!8450)))

(declare-fun lt!9020 () Unit!522)

(declare-fun choose!214 (ListLongMap!563 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!522)

(assert (=> d!4221 (= lt!9020 (choose!214 lt!8452 lt!8455 (zeroValue!1665 lt!8141) lt!8450))))

(assert (=> d!4221 (contains!229 lt!8452 lt!8450)))

(assert (=> d!4221 (= (addStillContains!14 lt!8452 lt!8455 (zeroValue!1665 lt!8141) lt!8450) lt!9020)))

(declare-fun bs!970 () Bool)

(assert (= bs!970 d!4221))

(assert (=> bs!970 m!16954))

(assert (=> bs!970 m!16954))

(assert (=> bs!970 m!16972))

(declare-fun m!18183 () Bool)

(assert (=> bs!970 m!18183))

(declare-fun m!18185 () Bool)

(assert (=> bs!970 m!18185))

(assert (=> b!23471 d!4221))

(declare-fun d!4223 () Bool)

(declare-fun e!15621 () Bool)

(assert (=> d!4223 e!15621))

(declare-fun res!14752 () Bool)

(assert (=> d!4223 (=> res!14752 e!15621)))

(declare-fun lt!9022 () Bool)

(assert (=> d!4223 (= res!14752 (not lt!9022))))

(declare-fun lt!9023 () Bool)

(assert (=> d!4223 (= lt!9022 lt!9023)))

(declare-fun lt!9021 () Unit!522)

(declare-fun e!15620 () Unit!522)

(assert (=> d!4223 (= lt!9021 e!15620)))

(declare-fun c!3198 () Bool)

(assert (=> d!4223 (= c!3198 lt!9023)))

(assert (=> d!4223 (= lt!9023 (containsKey!25 (toList!297 (+!44 lt!8452 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))) lt!8450))))

(assert (=> d!4223 (= (contains!229 (+!44 lt!8452 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141))) lt!8450) lt!9022)))

(declare-fun b!24126 () Bool)

(declare-fun lt!9024 () Unit!522)

(assert (=> b!24126 (= e!15620 lt!9024)))

(assert (=> b!24126 (= lt!9024 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (+!44 lt!8452 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))) lt!8450))))

(assert (=> b!24126 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8452 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))) lt!8450))))

(declare-fun b!24127 () Bool)

(declare-fun Unit!562 () Unit!522)

(assert (=> b!24127 (= e!15620 Unit!562)))

(declare-fun b!24128 () Bool)

(assert (=> b!24128 (= e!15621 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8452 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))) lt!8450)))))

(assert (= (and d!4223 c!3198) b!24126))

(assert (= (and d!4223 (not c!3198)) b!24127))

(assert (= (and d!4223 (not res!14752)) b!24128))

(declare-fun m!18187 () Bool)

(assert (=> d!4223 m!18187))

(declare-fun m!18189 () Bool)

(assert (=> b!24126 m!18189))

(declare-fun m!18191 () Bool)

(assert (=> b!24126 m!18191))

(assert (=> b!24126 m!18191))

(declare-fun m!18193 () Bool)

(assert (=> b!24126 m!18193))

(assert (=> b!24128 m!18191))

(assert (=> b!24128 m!18191))

(assert (=> b!24128 m!18193))

(assert (=> b!23471 d!4223))

(declare-fun d!4225 () Bool)

(assert (=> d!4225 (= (apply!29 (+!44 lt!8442 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141))) lt!8449) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8442 (tuple2!973 lt!8457 (zeroValue!1665 lt!8141)))) lt!8449)))))

(declare-fun bs!971 () Bool)

(assert (= bs!971 d!4225))

(declare-fun m!18195 () Bool)

(assert (=> bs!971 m!18195))

(assert (=> bs!971 m!18195))

(declare-fun m!18197 () Bool)

(assert (=> bs!971 m!18197))

(assert (=> b!23471 d!4225))

(declare-fun d!4227 () Bool)

(declare-fun e!15622 () Bool)

(assert (=> d!4227 e!15622))

(declare-fun res!14754 () Bool)

(assert (=> d!4227 (=> (not res!14754) (not e!15622))))

(declare-fun lt!9028 () ListLongMap!563)

(assert (=> d!4227 (= res!14754 (contains!229 lt!9028 (_1!495 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))))))

(declare-fun lt!9026 () List!564)

(assert (=> d!4227 (= lt!9028 (ListLongMap!564 lt!9026))))

(declare-fun lt!9025 () Unit!522)

(declare-fun lt!9027 () Unit!522)

(assert (=> d!4227 (= lt!9025 lt!9027)))

(assert (=> d!4227 (= (getValueByKey!61 lt!9026 (_1!495 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4227 (= lt!9027 (lemmaContainsTupThenGetReturnValue!18 lt!9026 (_1!495 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4227 (= lt!9026 (insertStrictlySorted!18 (toList!297 lt!8452) (_1!495 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4227 (= (+!44 lt!8452 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141))) lt!9028)))

(declare-fun b!24129 () Bool)

(declare-fun res!14753 () Bool)

(assert (=> b!24129 (=> (not res!14753) (not e!15622))))

(assert (=> b!24129 (= res!14753 (= (getValueByKey!61 (toList!297 lt!9028) (_1!495 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8455 (zeroValue!1665 lt!8141))))))))

(declare-fun b!24130 () Bool)

(assert (=> b!24130 (= e!15622 (contains!231 (toList!297 lt!9028) (tuple2!973 lt!8455 (zeroValue!1665 lt!8141))))))

(assert (= (and d!4227 res!14754) b!24129))

(assert (= (and b!24129 res!14753) b!24130))

(declare-fun m!18199 () Bool)

(assert (=> d!4227 m!18199))

(declare-fun m!18201 () Bool)

(assert (=> d!4227 m!18201))

(declare-fun m!18203 () Bool)

(assert (=> d!4227 m!18203))

(declare-fun m!18205 () Bool)

(assert (=> d!4227 m!18205))

(declare-fun m!18207 () Bool)

(assert (=> b!24129 m!18207))

(declare-fun m!18209 () Bool)

(assert (=> b!24130 m!18209))

(assert (=> b!23471 d!4227))

(declare-fun d!4229 () Bool)

(assert (=> d!4229 (= (apply!29 (+!44 lt!8453 (tuple2!973 lt!8439 (minValue!1665 lt!8141))) lt!8437) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8453 (tuple2!973 lt!8439 (minValue!1665 lt!8141)))) lt!8437)))))

(declare-fun bs!972 () Bool)

(assert (= bs!972 d!4229))

(declare-fun m!18211 () Bool)

(assert (=> bs!972 m!18211))

(assert (=> bs!972 m!18211))

(declare-fun m!18213 () Bool)

(assert (=> bs!972 m!18213))

(assert (=> b!23471 d!4229))

(declare-fun b!24131 () Bool)

(declare-fun e!15631 () ListLongMap!563)

(declare-fun call!2088 () ListLongMap!563)

(assert (=> b!24131 (= e!15631 call!2088)))

(declare-fun b!24132 () Bool)

(declare-fun e!15634 () Bool)

(declare-fun lt!9040 () ListLongMap!563)

(assert (=> b!24132 (= e!15634 (= (apply!29 lt!9040 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8243)))))

(declare-fun b!24133 () Bool)

(declare-fun e!15623 () Bool)

(assert (=> b!24133 (= e!15623 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)))))

(declare-fun bm!2083 () Bool)

(declare-fun call!2091 () ListLongMap!563)

(assert (=> bm!2083 (= call!2091 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8243) (_values!1728 lt!8243) (mask!4729 lt!8243) (extraKeys!1640 lt!8243) (zeroValue!1665 lt!8243) (minValue!1665 lt!8243) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8243)))))

(declare-fun b!24134 () Bool)

(declare-fun e!15628 () ListLongMap!563)

(assert (=> b!24134 (= e!15628 e!15631)))

(declare-fun c!3203 () Bool)

(assert (=> b!24134 (= c!3203 (and (not (= (bvand (extraKeys!1640 lt!8243) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8243) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24135 () Bool)

(declare-fun e!15633 () Bool)

(declare-fun call!2087 () Bool)

(assert (=> b!24135 (= e!15633 (not call!2087))))

(declare-fun b!24136 () Bool)

(declare-fun e!15630 () Bool)

(assert (=> b!24136 (= e!15630 e!15634)))

(declare-fun res!14760 () Bool)

(declare-fun call!2089 () Bool)

(assert (=> b!24136 (= res!14760 call!2089)))

(assert (=> b!24136 (=> (not res!14760) (not e!15634))))

(declare-fun bm!2084 () Bool)

(declare-fun call!2090 () ListLongMap!563)

(assert (=> bm!2084 (= call!2088 call!2090)))

(declare-fun b!24138 () Bool)

(assert (=> b!24138 (= e!15630 (not call!2089))))

(declare-fun bm!2085 () Bool)

(declare-fun call!2086 () ListLongMap!563)

(assert (=> bm!2085 (= call!2086 call!2091)))

(declare-fun b!24139 () Bool)

(declare-fun e!15629 () Bool)

(assert (=> b!24139 (= e!15629 e!15630)))

(declare-fun c!3204 () Bool)

(assert (=> b!24139 (= c!3204 (not (= (bvand (extraKeys!1640 lt!8243) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24140 () Bool)

(declare-fun e!15624 () Unit!522)

(declare-fun lt!9029 () Unit!522)

(assert (=> b!24140 (= e!15624 lt!9029)))

(declare-fun lt!9045 () ListLongMap!563)

(assert (=> b!24140 (= lt!9045 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8243) (_values!1728 lt!8243) (mask!4729 lt!8243) (extraKeys!1640 lt!8243) (zeroValue!1665 lt!8243) (minValue!1665 lt!8243) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8243)))))

(declare-fun lt!9048 () (_ BitVec 64))

(assert (=> b!24140 (= lt!9048 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9043 () (_ BitVec 64))

(assert (=> b!24140 (= lt!9043 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000))))

(declare-fun lt!9033 () Unit!522)

(assert (=> b!24140 (= lt!9033 (addStillContains!14 lt!9045 lt!9048 (zeroValue!1665 lt!8243) lt!9043))))

(assert (=> b!24140 (contains!229 (+!44 lt!9045 (tuple2!973 lt!9048 (zeroValue!1665 lt!8243))) lt!9043)))

(declare-fun lt!9034 () Unit!522)

(assert (=> b!24140 (= lt!9034 lt!9033)))

(declare-fun lt!9046 () ListLongMap!563)

(assert (=> b!24140 (= lt!9046 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8243) (_values!1728 lt!8243) (mask!4729 lt!8243) (extraKeys!1640 lt!8243) (zeroValue!1665 lt!8243) (minValue!1665 lt!8243) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8243)))))

(declare-fun lt!9032 () (_ BitVec 64))

(assert (=> b!24140 (= lt!9032 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9030 () (_ BitVec 64))

(assert (=> b!24140 (= lt!9030 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000))))

(declare-fun lt!9039 () Unit!522)

(assert (=> b!24140 (= lt!9039 (addApplyDifferent!14 lt!9046 lt!9032 (minValue!1665 lt!8243) lt!9030))))

(assert (=> b!24140 (= (apply!29 (+!44 lt!9046 (tuple2!973 lt!9032 (minValue!1665 lt!8243))) lt!9030) (apply!29 lt!9046 lt!9030))))

(declare-fun lt!9037 () Unit!522)

(assert (=> b!24140 (= lt!9037 lt!9039)))

(declare-fun lt!9035 () ListLongMap!563)

(assert (=> b!24140 (= lt!9035 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8243) (_values!1728 lt!8243) (mask!4729 lt!8243) (extraKeys!1640 lt!8243) (zeroValue!1665 lt!8243) (minValue!1665 lt!8243) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8243)))))

(declare-fun lt!9050 () (_ BitVec 64))

(assert (=> b!24140 (= lt!9050 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9042 () (_ BitVec 64))

(assert (=> b!24140 (= lt!9042 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000))))

(declare-fun lt!9031 () Unit!522)

(assert (=> b!24140 (= lt!9031 (addApplyDifferent!14 lt!9035 lt!9050 (zeroValue!1665 lt!8243) lt!9042))))

(assert (=> b!24140 (= (apply!29 (+!44 lt!9035 (tuple2!973 lt!9050 (zeroValue!1665 lt!8243))) lt!9042) (apply!29 lt!9035 lt!9042))))

(declare-fun lt!9044 () Unit!522)

(assert (=> b!24140 (= lt!9044 lt!9031)))

(declare-fun lt!9049 () ListLongMap!563)

(assert (=> b!24140 (= lt!9049 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8243) (_values!1728 lt!8243) (mask!4729 lt!8243) (extraKeys!1640 lt!8243) (zeroValue!1665 lt!8243) (minValue!1665 lt!8243) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8243)))))

(declare-fun lt!9047 () (_ BitVec 64))

(assert (=> b!24140 (= lt!9047 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9041 () (_ BitVec 64))

(assert (=> b!24140 (= lt!9041 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000))))

(assert (=> b!24140 (= lt!9029 (addApplyDifferent!14 lt!9049 lt!9047 (minValue!1665 lt!8243) lt!9041))))

(assert (=> b!24140 (= (apply!29 (+!44 lt!9049 (tuple2!973 lt!9047 (minValue!1665 lt!8243))) lt!9041) (apply!29 lt!9049 lt!9041))))

(declare-fun c!3202 () Bool)

(declare-fun call!2092 () ListLongMap!563)

(declare-fun bm!2086 () Bool)

(assert (=> bm!2086 (= call!2090 (+!44 (ite c!3202 call!2091 (ite c!3203 call!2086 call!2092)) (ite (or c!3202 c!3203) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8243)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8243)))))))

(declare-fun b!24141 () Bool)

(declare-fun Unit!563 () Unit!522)

(assert (=> b!24141 (= e!15624 Unit!563)))

(declare-fun b!24142 () Bool)

(declare-fun e!15626 () Bool)

(assert (=> b!24142 (= e!15633 e!15626)))

(declare-fun res!14758 () Bool)

(assert (=> b!24142 (= res!14758 call!2087)))

(assert (=> b!24142 (=> (not res!14758) (not e!15626))))

(declare-fun bm!2087 () Bool)

(assert (=> bm!2087 (= call!2092 call!2086)))

(declare-fun b!24143 () Bool)

(declare-fun res!14759 () Bool)

(assert (=> b!24143 (=> (not res!14759) (not e!15629))))

(declare-fun e!15627 () Bool)

(assert (=> b!24143 (= res!14759 e!15627)))

(declare-fun res!14755 () Bool)

(assert (=> b!24143 (=> res!14755 e!15627)))

(declare-fun e!15632 () Bool)

(assert (=> b!24143 (= res!14755 (not e!15632))))

(declare-fun res!14762 () Bool)

(assert (=> b!24143 (=> (not res!14762) (not e!15632))))

(assert (=> b!24143 (= res!14762 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))))))

(declare-fun b!24144 () Bool)

(declare-fun e!15625 () Bool)

(assert (=> b!24144 (= e!15627 e!15625)))

(declare-fun res!14756 () Bool)

(assert (=> b!24144 (=> (not res!14756) (not e!15625))))

(assert (=> b!24144 (= res!14756 (contains!229 lt!9040 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)))))

(assert (=> b!24144 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))))))

(declare-fun b!24145 () Bool)

(assert (=> b!24145 (= e!15632 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)))))

(declare-fun b!24146 () Bool)

(declare-fun e!15635 () ListLongMap!563)

(assert (=> b!24146 (= e!15635 call!2088)))

(declare-fun b!24147 () Bool)

(assert (=> b!24147 (= e!15628 (+!44 call!2090 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8243))))))

(declare-fun d!4231 () Bool)

(assert (=> d!4231 e!15629))

(declare-fun res!14761 () Bool)

(assert (=> d!4231 (=> (not res!14761) (not e!15629))))

(assert (=> d!4231 (= res!14761 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))))))))

(declare-fun lt!9038 () ListLongMap!563)

(assert (=> d!4231 (= lt!9040 lt!9038)))

(declare-fun lt!9036 () Unit!522)

(assert (=> d!4231 (= lt!9036 e!15624)))

(declare-fun c!3200 () Bool)

(assert (=> d!4231 (= c!3200 e!15623)))

(declare-fun res!14763 () Bool)

(assert (=> d!4231 (=> (not res!14763) (not e!15623))))

(assert (=> d!4231 (= res!14763 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))))))

(assert (=> d!4231 (= lt!9038 e!15628)))

(assert (=> d!4231 (= c!3202 (and (not (= (bvand (extraKeys!1640 lt!8243) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8243) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4231 (validMask!0 (mask!4729 lt!8243))))

(assert (=> d!4231 (= (getCurrentListMap!127 (_keys!3163 lt!8243) (_values!1728 lt!8243) (mask!4729 lt!8243) (extraKeys!1640 lt!8243) (zeroValue!1665 lt!8243) (minValue!1665 lt!8243) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8243)) lt!9040)))

(declare-fun b!24137 () Bool)

(assert (=> b!24137 (= e!15625 (= (apply!29 lt!9040 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8243)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8243) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24137 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8243))))))

(assert (=> b!24137 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))))))

(declare-fun bm!2088 () Bool)

(assert (=> bm!2088 (= call!2089 (contains!229 lt!9040 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24148 () Bool)

(declare-fun res!14757 () Bool)

(assert (=> b!24148 (=> (not res!14757) (not e!15629))))

(assert (=> b!24148 (= res!14757 e!15633)))

(declare-fun c!3199 () Bool)

(assert (=> b!24148 (= c!3199 (not (= (bvand (extraKeys!1640 lt!8243) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24149 () Bool)

(assert (=> b!24149 (= e!15626 (= (apply!29 lt!9040 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8243)))))

(declare-fun b!24150 () Bool)

(assert (=> b!24150 (= e!15635 call!2092)))

(declare-fun b!24151 () Bool)

(declare-fun c!3201 () Bool)

(assert (=> b!24151 (= c!3201 (and (not (= (bvand (extraKeys!1640 lt!8243) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8243) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24151 (= e!15631 e!15635)))

(declare-fun bm!2089 () Bool)

(assert (=> bm!2089 (= call!2087 (contains!229 lt!9040 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4231 c!3202) b!24147))

(assert (= (and d!4231 (not c!3202)) b!24134))

(assert (= (and b!24134 c!3203) b!24131))

(assert (= (and b!24134 (not c!3203)) b!24151))

(assert (= (and b!24151 c!3201) b!24146))

(assert (= (and b!24151 (not c!3201)) b!24150))

(assert (= (or b!24146 b!24150) bm!2087))

(assert (= (or b!24131 bm!2087) bm!2085))

(assert (= (or b!24131 b!24146) bm!2084))

(assert (= (or b!24147 bm!2085) bm!2083))

(assert (= (or b!24147 bm!2084) bm!2086))

(assert (= (and d!4231 res!14763) b!24133))

(assert (= (and d!4231 c!3200) b!24140))

(assert (= (and d!4231 (not c!3200)) b!24141))

(assert (= (and d!4231 res!14761) b!24143))

(assert (= (and b!24143 res!14762) b!24145))

(assert (= (and b!24143 (not res!14755)) b!24144))

(assert (= (and b!24144 res!14756) b!24137))

(assert (= (and b!24143 res!14759) b!24148))

(assert (= (and b!24148 c!3199) b!24142))

(assert (= (and b!24148 (not c!3199)) b!24135))

(assert (= (and b!24142 res!14758) b!24149))

(assert (= (or b!24142 b!24135) bm!2089))

(assert (= (and b!24148 res!14757) b!24139))

(assert (= (and b!24139 c!3204) b!24136))

(assert (= (and b!24139 (not c!3204)) b!24138))

(assert (= (and b!24136 res!14760) b!24132))

(assert (= (or b!24136 b!24138) bm!2088))

(declare-fun b_lambda!1595 () Bool)

(assert (=> (not b_lambda!1595) (not b!24137)))

(declare-fun t!3238 () Bool)

(declare-fun tb!659 () Bool)

(assert (=> (and b!23087 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8243)) t!3238) tb!659))

(declare-fun result!1099 () Bool)

(assert (=> tb!659 (= result!1099 tp_is_empty!1021)))

(assert (=> b!24137 t!3238))

(declare-fun b_and!1507 () Bool)

(assert (= b_and!1505 (and (=> t!3238 result!1099) b_and!1507)))

(declare-fun m!18215 () Bool)

(assert (=> b!24149 m!18215))

(declare-fun m!18217 () Bool)

(assert (=> bm!2086 m!18217))

(declare-fun m!18219 () Bool)

(assert (=> b!24137 m!18219))

(assert (=> b!24137 m!18219))

(declare-fun m!18221 () Bool)

(assert (=> b!24137 m!18221))

(declare-fun m!18223 () Bool)

(assert (=> b!24137 m!18223))

(assert (=> b!24137 m!17631))

(assert (=> b!24137 m!18221))

(assert (=> b!24137 m!17631))

(declare-fun m!18225 () Bool)

(assert (=> b!24137 m!18225))

(declare-fun m!18227 () Bool)

(assert (=> bm!2088 m!18227))

(assert (=> b!24145 m!17631))

(assert (=> b!24145 m!17631))

(assert (=> b!24145 m!17633))

(declare-fun m!18229 () Bool)

(assert (=> bm!2083 m!18229))

(declare-fun m!18231 () Bool)

(assert (=> b!24140 m!18231))

(declare-fun m!18233 () Bool)

(assert (=> b!24140 m!18233))

(declare-fun m!18235 () Bool)

(assert (=> b!24140 m!18235))

(declare-fun m!18237 () Bool)

(assert (=> b!24140 m!18237))

(declare-fun m!18239 () Bool)

(assert (=> b!24140 m!18239))

(declare-fun m!18241 () Bool)

(assert (=> b!24140 m!18241))

(assert (=> b!24140 m!18231))

(declare-fun m!18243 () Bool)

(assert (=> b!24140 m!18243))

(declare-fun m!18245 () Bool)

(assert (=> b!24140 m!18245))

(declare-fun m!18247 () Bool)

(assert (=> b!24140 m!18247))

(declare-fun m!18249 () Bool)

(assert (=> b!24140 m!18249))

(declare-fun m!18251 () Bool)

(assert (=> b!24140 m!18251))

(assert (=> b!24140 m!18229))

(assert (=> b!24140 m!17631))

(declare-fun m!18253 () Bool)

(assert (=> b!24140 m!18253))

(assert (=> b!24140 m!18245))

(declare-fun m!18255 () Bool)

(assert (=> b!24140 m!18255))

(declare-fun m!18257 () Bool)

(assert (=> b!24140 m!18257))

(assert (=> b!24140 m!18235))

(assert (=> b!24140 m!18241))

(declare-fun m!18259 () Bool)

(assert (=> b!24140 m!18259))

(assert (=> b!24144 m!17631))

(assert (=> b!24144 m!17631))

(declare-fun m!18261 () Bool)

(assert (=> b!24144 m!18261))

(declare-fun m!18263 () Bool)

(assert (=> b!24132 m!18263))

(declare-fun m!18265 () Bool)

(assert (=> b!24147 m!18265))

(declare-fun m!18267 () Bool)

(assert (=> bm!2089 m!18267))

(declare-fun m!18269 () Bool)

(assert (=> d!4231 m!18269))

(assert (=> b!24133 m!17631))

(assert (=> b!24133 m!17631))

(assert (=> b!24133 m!17633))

(assert (=> d!4023 d!4231))

(declare-fun b!24152 () Bool)

(declare-fun lt!9051 () ListLongMap!563)

(declare-fun e!15641 () Bool)

(assert (=> b!24152 (= e!15641 (= lt!9051 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141))))))

(declare-fun b!24154 () Bool)

(declare-fun e!15639 () Bool)

(declare-fun e!15636 () Bool)

(assert (=> b!24154 (= e!15639 e!15636)))

(assert (=> b!24154 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14766 () Bool)

(assert (=> b!24154 (= res!14766 (contains!229 lt!9051 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24154 (=> (not res!14766) (not e!15636))))

(declare-fun b!24155 () Bool)

(declare-fun e!15637 () ListLongMap!563)

(declare-fun e!15640 () ListLongMap!563)

(assert (=> b!24155 (= e!15637 e!15640)))

(declare-fun c!3205 () Bool)

(assert (=> b!24155 (= c!3205 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24156 () Bool)

(assert (=> b!24156 (= e!15637 (ListLongMap!564 Nil!561))))

(declare-fun b!24157 () Bool)

(assert (=> b!24157 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> b!24157 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))))))))

(assert (=> b!24157 (= e!15636 (= (apply!29 lt!9051 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24158 () Bool)

(declare-fun call!2093 () ListLongMap!563)

(assert (=> b!24158 (= e!15640 call!2093)))

(declare-fun b!24159 () Bool)

(declare-fun res!14765 () Bool)

(declare-fun e!15642 () Bool)

(assert (=> b!24159 (=> (not res!14765) (not e!15642))))

(assert (=> b!24159 (= res!14765 (not (contains!229 lt!9051 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24160 () Bool)

(assert (=> b!24160 (= e!15641 (isEmpty!173 lt!9051))))

(declare-fun b!24161 () Bool)

(assert (=> b!24161 (= e!15639 e!15641)))

(declare-fun c!3207 () Bool)

(assert (=> b!24161 (= c!3207 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!2090 () Bool)

(assert (=> bm!2090 (= call!2093 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141)))))

(declare-fun b!24153 () Bool)

(assert (=> b!24153 (= e!15642 e!15639)))

(declare-fun c!3206 () Bool)

(declare-fun e!15638 () Bool)

(assert (=> b!24153 (= c!3206 e!15638)))

(declare-fun res!14764 () Bool)

(assert (=> b!24153 (=> (not res!14764) (not e!15638))))

(assert (=> b!24153 (= res!14764 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun d!4233 () Bool)

(assert (=> d!4233 e!15642))

(declare-fun res!14767 () Bool)

(assert (=> d!4233 (=> (not res!14767) (not e!15642))))

(assert (=> d!4233 (= res!14767 (not (contains!229 lt!9051 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4233 (= lt!9051 e!15637)))

(declare-fun c!3208 () Bool)

(assert (=> d!4233 (= c!3208 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4233 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4233 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (ite c!2996 (ite c!2995 lt!8313 lt!8337) (extraKeys!1640 lt!8141)) (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9051)))

(declare-fun b!24162 () Bool)

(declare-fun lt!9053 () Unit!522)

(declare-fun lt!9054 () Unit!522)

(assert (=> b!24162 (= lt!9053 lt!9054)))

(declare-fun lt!9055 () (_ BitVec 64))

(declare-fun lt!9057 () V!1187)

(declare-fun lt!9056 () (_ BitVec 64))

(declare-fun lt!9052 () ListLongMap!563)

(assert (=> b!24162 (not (contains!229 (+!44 lt!9052 (tuple2!973 lt!9056 lt!9057)) lt!9055))))

(assert (=> b!24162 (= lt!9054 (addStillNotContains!2 lt!9052 lt!9056 lt!9057 lt!9055))))

(assert (=> b!24162 (= lt!9055 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!24162 (= lt!9057 (get!390 (select (arr!596 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24162 (= lt!9056 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24162 (= lt!9052 call!2093)))

(assert (=> b!24162 (= e!15640 (+!44 call!2093 (tuple2!973 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (get!390 (select (arr!596 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!24163 () Bool)

(assert (=> b!24163 (= e!15638 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24163 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!4233 c!3208) b!24156))

(assert (= (and d!4233 (not c!3208)) b!24155))

(assert (= (and b!24155 c!3205) b!24162))

(assert (= (and b!24155 (not c!3205)) b!24158))

(assert (= (or b!24162 b!24158) bm!2090))

(assert (= (and d!4233 res!14767) b!24159))

(assert (= (and b!24159 res!14765) b!24153))

(assert (= (and b!24153 res!14764) b!24163))

(assert (= (and b!24153 c!3206) b!24154))

(assert (= (and b!24153 (not c!3206)) b!24161))

(assert (= (and b!24154 res!14766) b!24157))

(assert (= (and b!24161 c!3207) b!24152))

(assert (= (and b!24161 (not c!3207)) b!24160))

(declare-fun b_lambda!1597 () Bool)

(assert (=> (not b_lambda!1597) (not b!24157)))

(assert (=> b!24157 t!3232))

(declare-fun b_and!1509 () Bool)

(assert (= b_and!1507 (and (=> t!3232 result!1093) b_and!1509)))

(declare-fun b_lambda!1599 () Bool)

(assert (=> (not b_lambda!1599) (not b!24162)))

(assert (=> b!24162 t!3232))

(declare-fun b_and!1511 () Bool)

(assert (= b_and!1509 (and (=> t!3232 result!1093) b_and!1511)))

(declare-fun m!18271 () Bool)

(assert (=> b!24162 m!18271))

(declare-fun m!18273 () Bool)

(assert (=> b!24162 m!18273))

(declare-fun m!18275 () Bool)

(assert (=> b!24162 m!18275))

(assert (=> b!24162 m!17243))

(assert (=> b!24162 m!16930))

(assert (=> b!24162 m!17245))

(assert (=> b!24162 m!16930))

(assert (=> b!24162 m!16934))

(assert (=> b!24162 m!18271))

(declare-fun m!18277 () Bool)

(assert (=> b!24162 m!18277))

(assert (=> b!24162 m!17243))

(declare-fun m!18279 () Bool)

(assert (=> d!4233 m!18279))

(assert (=> d!4233 m!16908))

(assert (=> b!24154 m!16934))

(assert (=> b!24154 m!16934))

(declare-fun m!18281 () Bool)

(assert (=> b!24154 m!18281))

(declare-fun m!18283 () Bool)

(assert (=> bm!2090 m!18283))

(assert (=> b!24163 m!16934))

(assert (=> b!24163 m!16934))

(assert (=> b!24163 m!16940))

(declare-fun m!18285 () Bool)

(assert (=> b!24160 m!18285))

(assert (=> b!24155 m!16934))

(assert (=> b!24155 m!16934))

(assert (=> b!24155 m!16940))

(assert (=> b!24152 m!18283))

(declare-fun m!18287 () Bool)

(assert (=> b!24159 m!18287))

(assert (=> b!24157 m!17243))

(assert (=> b!24157 m!16930))

(assert (=> b!24157 m!17245))

(assert (=> b!24157 m!16930))

(assert (=> b!24157 m!16934))

(assert (=> b!24157 m!17243))

(assert (=> b!24157 m!16934))

(declare-fun m!18289 () Bool)

(assert (=> b!24157 m!18289))

(assert (=> bm!2011 d!4233))

(declare-fun d!4235 () Bool)

(declare-fun res!14768 () Bool)

(declare-fun e!15643 () Bool)

(assert (=> d!4235 (=> (not res!14768) (not e!15643))))

(assert (=> d!4235 (= res!14768 (simpleValid!20 (_2!490 lt!8736)))))

(assert (=> d!4235 (= (valid!121 (_2!490 lt!8736)) e!15643)))

(declare-fun b!24164 () Bool)

(declare-fun res!14769 () Bool)

(assert (=> b!24164 (=> (not res!14769) (not e!15643))))

(assert (=> b!24164 (= res!14769 (= (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8736)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8736)))) (_size!149 (_2!490 lt!8736))))))

(declare-fun b!24165 () Bool)

(declare-fun res!14770 () Bool)

(assert (=> b!24165 (=> (not res!14770) (not e!15643))))

(assert (=> b!24165 (= res!14770 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!490 lt!8736)) (mask!4729 (_2!490 lt!8736))))))

(declare-fun b!24166 () Bool)

(assert (=> b!24166 (= e!15643 (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8736)) #b00000000000000000000000000000000 Nil!562))))

(assert (= (and d!4235 res!14768) b!24164))

(assert (= (and b!24164 res!14769) b!24165))

(assert (= (and b!24165 res!14770) b!24166))

(declare-fun m!18291 () Bool)

(assert (=> d!4235 m!18291))

(declare-fun m!18293 () Bool)

(assert (=> b!24164 m!18293))

(declare-fun m!18295 () Bool)

(assert (=> b!24165 m!18295))

(declare-fun m!18297 () Bool)

(assert (=> b!24166 m!18297))

(assert (=> b!23775 d!4235))

(declare-fun e!15645 () Option!67)

(declare-fun b!24169 () Bool)

(assert (=> b!24169 (= e!15645 (getValueByKey!61 (t!3229 (toList!297 lt!8783)) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24167 () Bool)

(declare-fun e!15644 () Option!67)

(assert (=> b!24167 (= e!15644 (Some!66 (_2!495 (h!1126 (toList!297 lt!8783)))))))

(declare-fun b!24170 () Bool)

(assert (=> b!24170 (= e!15645 None!65)))

(declare-fun d!4237 () Bool)

(declare-fun c!3209 () Bool)

(assert (=> d!4237 (= c!3209 (and ((_ is Cons!560) (toList!297 lt!8783)) (= (_1!495 (h!1126 (toList!297 lt!8783))) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4237 (= (getValueByKey!61 (toList!297 lt!8783) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) e!15644)))

(declare-fun b!24168 () Bool)

(assert (=> b!24168 (= e!15644 e!15645)))

(declare-fun c!3210 () Bool)

(assert (=> b!24168 (= c!3210 (and ((_ is Cons!560) (toList!297 lt!8783)) (not (= (_1!495 (h!1126 (toList!297 lt!8783))) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(assert (= (and d!4237 c!3209) b!24167))

(assert (= (and d!4237 (not c!3209)) b!24168))

(assert (= (and b!24168 c!3210) b!24169))

(assert (= (and b!24168 (not c!3210)) b!24170))

(declare-fun m!18299 () Bool)

(assert (=> b!24169 m!18299))

(assert (=> b!23805 d!4237))

(declare-fun d!4239 () Bool)

(assert (=> d!4239 (= (inRange!0 (ite c!3052 (index!2338 lt!8532) (ite c!3054 (index!2337 lt!8519) (index!2340 lt!8519))) (mask!4729 lt!8141)) (and (bvsge (ite c!3052 (index!2338 lt!8532) (ite c!3054 (index!2337 lt!8519) (index!2340 lt!8519))) #b00000000000000000000000000000000) (bvslt (ite c!3052 (index!2338 lt!8532) (ite c!3054 (index!2337 lt!8519) (index!2340 lt!8519))) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(assert (=> bm!1985 d!4239))

(declare-fun d!4241 () Bool)

(declare-fun e!15646 () Bool)

(assert (=> d!4241 e!15646))

(declare-fun res!14772 () Bool)

(assert (=> d!4241 (=> (not res!14772) (not e!15646))))

(declare-fun lt!9061 () ListLongMap!563)

(assert (=> d!4241 (= res!14772 (contains!229 lt!9061 (_1!495 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9059 () List!564)

(assert (=> d!4241 (= lt!9061 (ListLongMap!564 lt!9059))))

(declare-fun lt!9058 () Unit!522)

(declare-fun lt!9060 () Unit!522)

(assert (=> d!4241 (= lt!9058 lt!9060)))

(assert (=> d!4241 (= (getValueByKey!61 lt!9059 (_1!495 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4241 (= lt!9060 (lemmaContainsTupThenGetReturnValue!18 lt!9059 (_1!495 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4241 (= lt!9059 (insertStrictlySorted!18 (toList!297 lt!8709) (_1!495 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4241 (= (+!44 lt!8709 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142)))) lt!9061)))

(declare-fun b!24171 () Bool)

(declare-fun res!14771 () Bool)

(assert (=> b!24171 (=> (not res!14771) (not e!15646))))

(assert (=> b!24171 (= res!14771 (= (getValueByKey!61 (toList!297 lt!9061) (_1!495 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24172 () Bool)

(assert (=> b!24172 (= e!15646 (contains!231 (toList!297 lt!9061) (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4241 res!14772) b!24171))

(assert (= (and b!24171 res!14771) b!24172))

(declare-fun m!18301 () Bool)

(assert (=> d!4241 m!18301))

(declare-fun m!18303 () Bool)

(assert (=> d!4241 m!18303))

(declare-fun m!18305 () Bool)

(assert (=> d!4241 m!18305))

(declare-fun m!18307 () Bool)

(assert (=> d!4241 m!18307))

(declare-fun m!18309 () Bool)

(assert (=> b!24171 m!18309))

(declare-fun m!18311 () Bool)

(assert (=> b!24172 m!18311))

(assert (=> b!23736 d!4241))

(declare-fun d!4243 () Bool)

(assert (=> d!4243 (= (apply!29 lt!8713 lt!8705) (get!391 (getValueByKey!61 (toList!297 lt!8713) lt!8705)))))

(declare-fun bs!973 () Bool)

(assert (= bs!973 d!4243))

(declare-fun m!18313 () Bool)

(assert (=> bs!973 m!18313))

(assert (=> bs!973 m!18313))

(declare-fun m!18315 () Bool)

(assert (=> bs!973 m!18315))

(assert (=> b!23736 d!4243))

(declare-fun d!4245 () Bool)

(assert (=> d!4245 (= (apply!29 lt!8699 lt!8706) (get!391 (getValueByKey!61 (toList!297 lt!8699) lt!8706)))))

(declare-fun bs!974 () Bool)

(assert (= bs!974 d!4245))

(declare-fun m!18317 () Bool)

(assert (=> bs!974 m!18317))

(assert (=> bs!974 m!18317))

(declare-fun m!18319 () Bool)

(assert (=> bs!974 m!18319))

(assert (=> b!23736 d!4245))

(declare-fun d!4247 () Bool)

(assert (=> d!4247 (contains!229 (+!44 lt!8709 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142)))) lt!8707)))

(declare-fun lt!9062 () Unit!522)

(assert (=> d!4247 (= lt!9062 (choose!214 lt!8709 lt!8712 (zeroValue!1665 (_2!490 lt!8142)) lt!8707))))

(assert (=> d!4247 (contains!229 lt!8709 lt!8707)))

(assert (=> d!4247 (= (addStillContains!14 lt!8709 lt!8712 (zeroValue!1665 (_2!490 lt!8142)) lt!8707) lt!9062)))

(declare-fun bs!975 () Bool)

(assert (= bs!975 d!4247))

(assert (=> bs!975 m!17417))

(assert (=> bs!975 m!17417))

(assert (=> bs!975 m!17435))

(declare-fun m!18321 () Bool)

(assert (=> bs!975 m!18321))

(declare-fun m!18323 () Bool)

(assert (=> bs!975 m!18323))

(assert (=> b!23736 d!4247))

(declare-fun d!4249 () Bool)

(assert (=> d!4249 (= (apply!29 lt!8710 lt!8694) (get!391 (getValueByKey!61 (toList!297 lt!8710) lt!8694)))))

(declare-fun bs!976 () Bool)

(assert (= bs!976 d!4249))

(declare-fun m!18325 () Bool)

(assert (=> bs!976 m!18325))

(assert (=> bs!976 m!18325))

(declare-fun m!18327 () Bool)

(assert (=> bs!976 m!18327))

(assert (=> b!23736 d!4249))

(declare-fun d!4251 () Bool)

(assert (=> d!4251 (= (apply!29 (+!44 lt!8713 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142)))) lt!8705) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8713 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142))))) lt!8705)))))

(declare-fun bs!977 () Bool)

(assert (= bs!977 d!4251))

(declare-fun m!18329 () Bool)

(assert (=> bs!977 m!18329))

(assert (=> bs!977 m!18329))

(declare-fun m!18331 () Bool)

(assert (=> bs!977 m!18331))

(assert (=> b!23736 d!4251))

(declare-fun d!4253 () Bool)

(declare-fun e!15647 () Bool)

(assert (=> d!4253 e!15647))

(declare-fun res!14774 () Bool)

(assert (=> d!4253 (=> (not res!14774) (not e!15647))))

(declare-fun lt!9066 () ListLongMap!563)

(assert (=> d!4253 (= res!14774 (contains!229 lt!9066 (_1!495 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9064 () List!564)

(assert (=> d!4253 (= lt!9066 (ListLongMap!564 lt!9064))))

(declare-fun lt!9063 () Unit!522)

(declare-fun lt!9065 () Unit!522)

(assert (=> d!4253 (= lt!9063 lt!9065)))

(assert (=> d!4253 (= (getValueByKey!61 lt!9064 (_1!495 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4253 (= lt!9065 (lemmaContainsTupThenGetReturnValue!18 lt!9064 (_1!495 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4253 (= lt!9064 (insertStrictlySorted!18 (toList!297 lt!8710) (_1!495 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4253 (= (+!44 lt!8710 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142)))) lt!9066)))

(declare-fun b!24173 () Bool)

(declare-fun res!14773 () Bool)

(assert (=> b!24173 (=> (not res!14773) (not e!15647))))

(assert (=> b!24173 (= res!14773 (= (getValueByKey!61 (toList!297 lt!9066) (_1!495 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24174 () Bool)

(assert (=> b!24174 (= e!15647 (contains!231 (toList!297 lt!9066) (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4253 res!14774) b!24173))

(assert (= (and b!24173 res!14773) b!24174))

(declare-fun m!18333 () Bool)

(assert (=> d!4253 m!18333))

(declare-fun m!18335 () Bool)

(assert (=> d!4253 m!18335))

(declare-fun m!18337 () Bool)

(assert (=> d!4253 m!18337))

(declare-fun m!18339 () Bool)

(assert (=> d!4253 m!18339))

(declare-fun m!18341 () Bool)

(assert (=> b!24173 m!18341))

(declare-fun m!18343 () Bool)

(assert (=> b!24174 m!18343))

(assert (=> b!23736 d!4253))

(declare-fun d!4255 () Bool)

(assert (=> d!4255 (= (apply!29 (+!44 lt!8713 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142)))) lt!8705) (apply!29 lt!8713 lt!8705))))

(declare-fun lt!9067 () Unit!522)

(assert (=> d!4255 (= lt!9067 (choose!213 lt!8713 lt!8711 (minValue!1665 (_2!490 lt!8142)) lt!8705))))

(declare-fun e!15648 () Bool)

(assert (=> d!4255 e!15648))

(declare-fun res!14775 () Bool)

(assert (=> d!4255 (=> (not res!14775) (not e!15648))))

(assert (=> d!4255 (= res!14775 (contains!229 lt!8713 lt!8705))))

(assert (=> d!4255 (= (addApplyDifferent!14 lt!8713 lt!8711 (minValue!1665 (_2!490 lt!8142)) lt!8705) lt!9067)))

(declare-fun b!24175 () Bool)

(assert (=> b!24175 (= e!15648 (not (= lt!8705 lt!8711)))))

(assert (= (and d!4255 res!14775) b!24175))

(declare-fun m!18345 () Bool)

(assert (=> d!4255 m!18345))

(assert (=> d!4255 m!17427))

(assert (=> d!4255 m!17421))

(assert (=> d!4255 m!17421))

(assert (=> d!4255 m!17423))

(declare-fun m!18347 () Bool)

(assert (=> d!4255 m!18347))

(assert (=> b!23736 d!4255))

(declare-fun d!4257 () Bool)

(assert (=> d!4257 (= (apply!29 (+!44 lt!8710 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142)))) lt!8694) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8710 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142))))) lt!8694)))))

(declare-fun bs!978 () Bool)

(assert (= bs!978 d!4257))

(declare-fun m!18349 () Bool)

(assert (=> bs!978 m!18349))

(assert (=> bs!978 m!18349))

(declare-fun m!18351 () Bool)

(assert (=> bs!978 m!18351))

(assert (=> b!23736 d!4257))

(declare-fun d!4259 () Bool)

(assert (=> d!4259 (= (apply!29 (+!44 lt!8699 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142)))) lt!8706) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8699 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142))))) lt!8706)))))

(declare-fun bs!979 () Bool)

(assert (= bs!979 d!4259))

(declare-fun m!18353 () Bool)

(assert (=> bs!979 m!18353))

(assert (=> bs!979 m!18353))

(declare-fun m!18355 () Bool)

(assert (=> bs!979 m!18355))

(assert (=> b!23736 d!4259))

(declare-fun d!4261 () Bool)

(declare-fun e!15649 () Bool)

(assert (=> d!4261 e!15649))

(declare-fun res!14777 () Bool)

(assert (=> d!4261 (=> (not res!14777) (not e!15649))))

(declare-fun lt!9071 () ListLongMap!563)

(assert (=> d!4261 (= res!14777 (contains!229 lt!9071 (_1!495 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9069 () List!564)

(assert (=> d!4261 (= lt!9071 (ListLongMap!564 lt!9069))))

(declare-fun lt!9068 () Unit!522)

(declare-fun lt!9070 () Unit!522)

(assert (=> d!4261 (= lt!9068 lt!9070)))

(assert (=> d!4261 (= (getValueByKey!61 lt!9069 (_1!495 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4261 (= lt!9070 (lemmaContainsTupThenGetReturnValue!18 lt!9069 (_1!495 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4261 (= lt!9069 (insertStrictlySorted!18 (toList!297 lt!8713) (_1!495 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4261 (= (+!44 lt!8713 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142)))) lt!9071)))

(declare-fun b!24176 () Bool)

(declare-fun res!14776 () Bool)

(assert (=> b!24176 (=> (not res!14776) (not e!15649))))

(assert (=> b!24176 (= res!14776 (= (getValueByKey!61 (toList!297 lt!9071) (_1!495 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24177 () Bool)

(assert (=> b!24177 (= e!15649 (contains!231 (toList!297 lt!9071) (tuple2!973 lt!8711 (minValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4261 res!14777) b!24176))

(assert (= (and b!24176 res!14776) b!24177))

(declare-fun m!18357 () Bool)

(assert (=> d!4261 m!18357))

(declare-fun m!18359 () Bool)

(assert (=> d!4261 m!18359))

(declare-fun m!18361 () Bool)

(assert (=> d!4261 m!18361))

(declare-fun m!18363 () Bool)

(assert (=> d!4261 m!18363))

(declare-fun m!18365 () Bool)

(assert (=> b!24176 m!18365))

(declare-fun m!18367 () Bool)

(assert (=> b!24177 m!18367))

(assert (=> b!23736 d!4261))

(declare-fun d!4263 () Bool)

(declare-fun e!15651 () Bool)

(assert (=> d!4263 e!15651))

(declare-fun res!14778 () Bool)

(assert (=> d!4263 (=> res!14778 e!15651)))

(declare-fun lt!9073 () Bool)

(assert (=> d!4263 (= res!14778 (not lt!9073))))

(declare-fun lt!9074 () Bool)

(assert (=> d!4263 (= lt!9073 lt!9074)))

(declare-fun lt!9072 () Unit!522)

(declare-fun e!15650 () Unit!522)

(assert (=> d!4263 (= lt!9072 e!15650)))

(declare-fun c!3211 () Bool)

(assert (=> d!4263 (= c!3211 lt!9074)))

(assert (=> d!4263 (= lt!9074 (containsKey!25 (toList!297 (+!44 lt!8709 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))) lt!8707))))

(assert (=> d!4263 (= (contains!229 (+!44 lt!8709 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142)))) lt!8707) lt!9073)))

(declare-fun b!24178 () Bool)

(declare-fun lt!9075 () Unit!522)

(assert (=> b!24178 (= e!15650 lt!9075)))

(assert (=> b!24178 (= lt!9075 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (+!44 lt!8709 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))) lt!8707))))

(assert (=> b!24178 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8709 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))) lt!8707))))

(declare-fun b!24179 () Bool)

(declare-fun Unit!564 () Unit!522)

(assert (=> b!24179 (= e!15650 Unit!564)))

(declare-fun b!24180 () Bool)

(assert (=> b!24180 (= e!15651 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8709 (tuple2!973 lt!8712 (zeroValue!1665 (_2!490 lt!8142))))) lt!8707)))))

(assert (= (and d!4263 c!3211) b!24178))

(assert (= (and d!4263 (not c!3211)) b!24179))

(assert (= (and d!4263 (not res!14778)) b!24180))

(declare-fun m!18369 () Bool)

(assert (=> d!4263 m!18369))

(declare-fun m!18371 () Bool)

(assert (=> b!24178 m!18371))

(declare-fun m!18373 () Bool)

(assert (=> b!24178 m!18373))

(assert (=> b!24178 m!18373))

(declare-fun m!18375 () Bool)

(assert (=> b!24178 m!18375))

(assert (=> b!24180 m!18373))

(assert (=> b!24180 m!18373))

(assert (=> b!24180 m!18375))

(assert (=> b!23736 d!4263))

(declare-fun d!4265 () Bool)

(assert (=> d!4265 (= (apply!29 (+!44 lt!8710 (tuple2!973 lt!8696 (minValue!1665 (_2!490 lt!8142)))) lt!8694) (apply!29 lt!8710 lt!8694))))

(declare-fun lt!9076 () Unit!522)

(assert (=> d!4265 (= lt!9076 (choose!213 lt!8710 lt!8696 (minValue!1665 (_2!490 lt!8142)) lt!8694))))

(declare-fun e!15652 () Bool)

(assert (=> d!4265 e!15652))

(declare-fun res!14779 () Bool)

(assert (=> d!4265 (=> (not res!14779) (not e!15652))))

(assert (=> d!4265 (= res!14779 (contains!229 lt!8710 lt!8694))))

(assert (=> d!4265 (= (addApplyDifferent!14 lt!8710 lt!8696 (minValue!1665 (_2!490 lt!8142)) lt!8694) lt!9076)))

(declare-fun b!24181 () Bool)

(assert (=> b!24181 (= e!15652 (not (= lt!8694 lt!8696)))))

(assert (= (and d!4265 res!14779) b!24181))

(declare-fun m!18377 () Bool)

(assert (=> d!4265 m!18377))

(assert (=> d!4265 m!17433))

(assert (=> d!4265 m!17411))

(assert (=> d!4265 m!17411))

(assert (=> d!4265 m!17413))

(declare-fun m!18379 () Bool)

(assert (=> d!4265 m!18379))

(assert (=> b!23736 d!4265))

(declare-fun d!4267 () Bool)

(assert (=> d!4267 (= (apply!29 (+!44 lt!8699 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142)))) lt!8706) (apply!29 lt!8699 lt!8706))))

(declare-fun lt!9077 () Unit!522)

(assert (=> d!4267 (= lt!9077 (choose!213 lt!8699 lt!8714 (zeroValue!1665 (_2!490 lt!8142)) lt!8706))))

(declare-fun e!15653 () Bool)

(assert (=> d!4267 e!15653))

(declare-fun res!14780 () Bool)

(assert (=> d!4267 (=> (not res!14780) (not e!15653))))

(assert (=> d!4267 (= res!14780 (contains!229 lt!8699 lt!8706))))

(assert (=> d!4267 (= (addApplyDifferent!14 lt!8699 lt!8714 (zeroValue!1665 (_2!490 lt!8142)) lt!8706) lt!9077)))

(declare-fun b!24182 () Bool)

(assert (=> b!24182 (= e!15653 (not (= lt!8706 lt!8714)))))

(assert (= (and d!4267 res!14780) b!24182))

(declare-fun m!18381 () Bool)

(assert (=> d!4267 m!18381))

(assert (=> d!4267 m!17415))

(assert (=> d!4267 m!17407))

(assert (=> d!4267 m!17407))

(assert (=> d!4267 m!17409))

(declare-fun m!18383 () Bool)

(assert (=> d!4267 m!18383))

(assert (=> b!23736 d!4267))

(declare-fun d!4269 () Bool)

(declare-fun e!15654 () Bool)

(assert (=> d!4269 e!15654))

(declare-fun res!14782 () Bool)

(assert (=> d!4269 (=> (not res!14782) (not e!15654))))

(declare-fun lt!9081 () ListLongMap!563)

(assert (=> d!4269 (= res!14782 (contains!229 lt!9081 (_1!495 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9079 () List!564)

(assert (=> d!4269 (= lt!9081 (ListLongMap!564 lt!9079))))

(declare-fun lt!9078 () Unit!522)

(declare-fun lt!9080 () Unit!522)

(assert (=> d!4269 (= lt!9078 lt!9080)))

(assert (=> d!4269 (= (getValueByKey!61 lt!9079 (_1!495 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4269 (= lt!9080 (lemmaContainsTupThenGetReturnValue!18 lt!9079 (_1!495 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4269 (= lt!9079 (insertStrictlySorted!18 (toList!297 lt!8699) (_1!495 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4269 (= (+!44 lt!8699 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142)))) lt!9081)))

(declare-fun b!24183 () Bool)

(declare-fun res!14781 () Bool)

(assert (=> b!24183 (=> (not res!14781) (not e!15654))))

(assert (=> b!24183 (= res!14781 (= (getValueByKey!61 (toList!297 lt!9081) (_1!495 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24184 () Bool)

(assert (=> b!24184 (= e!15654 (contains!231 (toList!297 lt!9081) (tuple2!973 lt!8714 (zeroValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4269 res!14782) b!24183))

(assert (= (and b!24183 res!14781) b!24184))

(declare-fun m!18385 () Bool)

(assert (=> d!4269 m!18385))

(declare-fun m!18387 () Bool)

(assert (=> d!4269 m!18387))

(declare-fun m!18389 () Bool)

(assert (=> d!4269 m!18389))

(declare-fun m!18391 () Bool)

(assert (=> d!4269 m!18391))

(declare-fun m!18393 () Bool)

(assert (=> b!24183 m!18393))

(declare-fun m!18395 () Bool)

(assert (=> b!24184 m!18395))

(assert (=> b!23736 d!4269))

(declare-fun b!24185 () Bool)

(declare-fun e!15660 () Bool)

(declare-fun lt!9082 () ListLongMap!563)

(assert (=> b!24185 (= e!15660 (= lt!9082 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!490 lt!8142)))))))

(declare-fun b!24187 () Bool)

(declare-fun e!15658 () Bool)

(declare-fun e!15655 () Bool)

(assert (=> b!24187 (= e!15658 e!15655)))

(assert (=> b!24187 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun res!14785 () Bool)

(assert (=> b!24187 (= res!14785 (contains!229 lt!9082 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24187 (=> (not res!14785) (not e!15655))))

(declare-fun b!24188 () Bool)

(declare-fun e!15656 () ListLongMap!563)

(declare-fun e!15659 () ListLongMap!563)

(assert (=> b!24188 (= e!15656 e!15659)))

(declare-fun c!3212 () Bool)

(assert (=> b!24188 (= c!3212 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24189 () Bool)

(assert (=> b!24189 (= e!15656 (ListLongMap!564 Nil!561))))

(declare-fun b!24190 () Bool)

(assert (=> b!24190 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> b!24190 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!490 lt!8142)))))))

(assert (=> b!24190 (= e!15655 (= (apply!29 lt!9082 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24191 () Bool)

(declare-fun call!2094 () ListLongMap!563)

(assert (=> b!24191 (= e!15659 call!2094)))

(declare-fun b!24192 () Bool)

(declare-fun res!14784 () Bool)

(declare-fun e!15661 () Bool)

(assert (=> b!24192 (=> (not res!14784) (not e!15661))))

(assert (=> b!24192 (= res!14784 (not (contains!229 lt!9082 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24193 () Bool)

(assert (=> b!24193 (= e!15660 (isEmpty!173 lt!9082))))

(declare-fun b!24194 () Bool)

(assert (=> b!24194 (= e!15658 e!15660)))

(declare-fun c!3214 () Bool)

(assert (=> b!24194 (= c!3214 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun bm!2091 () Bool)

(assert (=> bm!2091 (= call!2094 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!24186 () Bool)

(assert (=> b!24186 (= e!15661 e!15658)))

(declare-fun c!3213 () Bool)

(declare-fun e!15657 () Bool)

(assert (=> b!24186 (= c!3213 e!15657)))

(declare-fun res!14783 () Bool)

(assert (=> b!24186 (=> (not res!14783) (not e!15657))))

(assert (=> b!24186 (= res!14783 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun d!4271 () Bool)

(assert (=> d!4271 e!15661))

(declare-fun res!14786 () Bool)

(assert (=> d!4271 (=> (not res!14786) (not e!15661))))

(assert (=> d!4271 (= res!14786 (not (contains!229 lt!9082 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4271 (= lt!9082 e!15656)))

(declare-fun c!3215 () Bool)

(assert (=> d!4271 (= c!3215 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4271 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4271 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!9082)))

(declare-fun b!24195 () Bool)

(declare-fun lt!9084 () Unit!522)

(declare-fun lt!9085 () Unit!522)

(assert (=> b!24195 (= lt!9084 lt!9085)))

(declare-fun lt!9083 () ListLongMap!563)

(declare-fun lt!9087 () (_ BitVec 64))

(declare-fun lt!9088 () V!1187)

(declare-fun lt!9086 () (_ BitVec 64))

(assert (=> b!24195 (not (contains!229 (+!44 lt!9083 (tuple2!973 lt!9087 lt!9088)) lt!9086))))

(assert (=> b!24195 (= lt!9085 (addStillNotContains!2 lt!9083 lt!9087 lt!9088 lt!9086))))

(assert (=> b!24195 (= lt!9086 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!24195 (= lt!9088 (get!390 (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24195 (= lt!9087 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(assert (=> b!24195 (= lt!9083 call!2094)))

(assert (=> b!24195 (= e!15659 (+!44 call!2094 (tuple2!973 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000) (get!390 (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!24196 () Bool)

(assert (=> b!24196 (= e!15657 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24196 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!4271 c!3215) b!24189))

(assert (= (and d!4271 (not c!3215)) b!24188))

(assert (= (and b!24188 c!3212) b!24195))

(assert (= (and b!24188 (not c!3212)) b!24191))

(assert (= (or b!24195 b!24191) bm!2091))

(assert (= (and d!4271 res!14786) b!24192))

(assert (= (and b!24192 res!14784) b!24186))

(assert (= (and b!24186 res!14783) b!24196))

(assert (= (and b!24186 c!3213) b!24187))

(assert (= (and b!24186 (not c!3213)) b!24194))

(assert (= (and b!24187 res!14785) b!24190))

(assert (= (and b!24194 c!3214) b!24185))

(assert (= (and b!24194 (not c!3214)) b!24193))

(declare-fun b_lambda!1601 () Bool)

(assert (=> (not b_lambda!1601) (not b!24190)))

(assert (=> b!24190 t!3234))

(declare-fun b_and!1513 () Bool)

(assert (= b_and!1511 (and (=> t!3234 result!1095) b_and!1513)))

(declare-fun b_lambda!1603 () Bool)

(assert (=> (not b_lambda!1603) (not b!24195)))

(assert (=> b!24195 t!3234))

(declare-fun b_and!1515 () Bool)

(assert (= b_and!1513 (and (=> t!3234 result!1095) b_and!1515)))

(declare-fun m!18397 () Bool)

(assert (=> b!24195 m!18397))

(declare-fun m!18399 () Bool)

(assert (=> b!24195 m!18399))

(declare-fun m!18401 () Bool)

(assert (=> b!24195 m!18401))

(assert (=> b!24195 m!17397))

(assert (=> b!24195 m!17076))

(assert (=> b!24195 m!17399))

(assert (=> b!24195 m!17076))

(assert (=> b!24195 m!17080))

(assert (=> b!24195 m!18397))

(declare-fun m!18403 () Bool)

(assert (=> b!24195 m!18403))

(assert (=> b!24195 m!17397))

(declare-fun m!18405 () Bool)

(assert (=> d!4271 m!18405))

(assert (=> d!4271 m!16902))

(assert (=> b!24187 m!17080))

(assert (=> b!24187 m!17080))

(declare-fun m!18407 () Bool)

(assert (=> b!24187 m!18407))

(declare-fun m!18409 () Bool)

(assert (=> bm!2091 m!18409))

(assert (=> b!24196 m!17080))

(assert (=> b!24196 m!17080))

(assert (=> b!24196 m!17086))

(declare-fun m!18411 () Bool)

(assert (=> b!24193 m!18411))

(assert (=> b!24188 m!17080))

(assert (=> b!24188 m!17080))

(assert (=> b!24188 m!17086))

(assert (=> b!24185 m!18409))

(declare-fun m!18413 () Bool)

(assert (=> b!24192 m!18413))

(assert (=> b!24190 m!17397))

(assert (=> b!24190 m!17076))

(assert (=> b!24190 m!17399))

(assert (=> b!24190 m!17076))

(assert (=> b!24190 m!17080))

(assert (=> b!24190 m!17397))

(assert (=> b!24190 m!17080))

(declare-fun m!18415 () Bool)

(assert (=> b!24190 m!18415))

(assert (=> b!23736 d!4271))

(declare-fun d!4273 () Bool)

(declare-fun res!14787 () Bool)

(declare-fun e!15662 () Bool)

(assert (=> d!4273 (=> res!14787 e!15662)))

(assert (=> d!4273 (= res!14787 (and ((_ is Cons!560) (toList!297 call!1920)) (= (_1!495 (h!1126 (toList!297 call!1920))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4273 (= (containsKey!25 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) e!15662)))

(declare-fun b!24197 () Bool)

(declare-fun e!15663 () Bool)

(assert (=> b!24197 (= e!15662 e!15663)))

(declare-fun res!14788 () Bool)

(assert (=> b!24197 (=> (not res!14788) (not e!15663))))

(assert (=> b!24197 (= res!14788 (and (or (not ((_ is Cons!560) (toList!297 call!1920))) (bvsle (_1!495 (h!1126 (toList!297 call!1920))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))) ((_ is Cons!560) (toList!297 call!1920)) (bvslt (_1!495 (h!1126 (toList!297 call!1920))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24198 () Bool)

(assert (=> b!24198 (= e!15663 (containsKey!25 (t!3229 (toList!297 call!1920)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4273 (not res!14787)) b!24197))

(assert (= (and b!24197 res!14788) b!24198))

(declare-fun m!18417 () Bool)

(assert (=> b!24198 m!18417))

(assert (=> d!4087 d!4273))

(declare-fun d!4275 () Bool)

(assert (=> d!4275 (= (inRange!0 (ite c!3125 (index!2337 lt!8792) (index!2340 lt!8792)) (mask!4729 lt!8141)) (and (bvsge (ite c!3125 (index!2337 lt!8792) (index!2340 lt!8792)) #b00000000000000000000000000000000) (bvslt (ite c!3125 (index!2337 lt!8792) (index!2340 lt!8792)) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(assert (=> bm!2044 d!4275))

(declare-fun d!4277 () Bool)

(declare-fun e!15664 () Bool)

(assert (=> d!4277 e!15664))

(declare-fun res!14790 () Bool)

(assert (=> d!4277 (=> (not res!14790) (not e!15664))))

(declare-fun lt!9092 () ListLongMap!563)

(assert (=> d!4277 (= res!14790 (contains!229 lt!9092 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun lt!9090 () List!564)

(assert (=> d!4277 (= lt!9092 (ListLongMap!564 lt!9090))))

(declare-fun lt!9089 () Unit!522)

(declare-fun lt!9091 () Unit!522)

(assert (=> d!4277 (= lt!9089 lt!9091)))

(assert (=> d!4277 (= (getValueByKey!61 lt!9090 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4277 (= lt!9091 (lemmaContainsTupThenGetReturnValue!18 lt!9090 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4277 (= lt!9090 (insertStrictlySorted!18 (toList!297 call!1977) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4277 (= (+!44 call!1977 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) lt!9092)))

(declare-fun b!24199 () Bool)

(declare-fun res!14789 () Bool)

(assert (=> b!24199 (=> (not res!14789) (not e!15664))))

(assert (=> b!24199 (= res!14789 (= (getValueByKey!61 (toList!297 lt!9092) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(declare-fun b!24200 () Bool)

(assert (=> b!24200 (= e!15664 (contains!231 (toList!297 lt!9092) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(assert (= (and d!4277 res!14790) b!24199))

(assert (= (and b!24199 res!14789) b!24200))

(declare-fun m!18419 () Bool)

(assert (=> d!4277 m!18419))

(declare-fun m!18421 () Bool)

(assert (=> d!4277 m!18421))

(declare-fun m!18423 () Bool)

(assert (=> d!4277 m!18423))

(declare-fun m!18425 () Bool)

(assert (=> d!4277 m!18425))

(declare-fun m!18427 () Bool)

(assert (=> b!24199 m!18427))

(declare-fun m!18429 () Bool)

(assert (=> b!24200 m!18429))

(assert (=> b!23478 d!4277))

(declare-fun d!4279 () Bool)

(declare-fun e!15666 () Bool)

(assert (=> d!4279 e!15666))

(declare-fun res!14791 () Bool)

(assert (=> d!4279 (=> res!14791 e!15666)))

(declare-fun lt!9094 () Bool)

(assert (=> d!4279 (= res!14791 (not lt!9094))))

(declare-fun lt!9095 () Bool)

(assert (=> d!4279 (= lt!9094 lt!9095)))

(declare-fun lt!9093 () Unit!522)

(declare-fun e!15665 () Unit!522)

(assert (=> d!4279 (= lt!9093 e!15665)))

(declare-fun c!3216 () Bool)

(assert (=> d!4279 (= c!3216 lt!9095)))

(assert (=> d!4279 (= lt!9095 (containsKey!25 (toList!297 lt!8672) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> d!4279 (= (contains!229 lt!8672 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) lt!9094)))

(declare-fun b!24201 () Bool)

(declare-fun lt!9096 () Unit!522)

(assert (=> b!24201 (= e!15665 lt!9096)))

(assert (=> b!24201 (= lt!9096 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8672) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24201 (isDefined!23 (getValueByKey!61 (toList!297 lt!8672) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24202 () Bool)

(declare-fun Unit!565 () Unit!522)

(assert (=> b!24202 (= e!15665 Unit!565)))

(declare-fun b!24203 () Bool)

(assert (=> b!24203 (= e!15666 (isDefined!23 (getValueByKey!61 (toList!297 lt!8672) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))))

(assert (= (and d!4279 c!3216) b!24201))

(assert (= (and d!4279 (not c!3216)) b!24202))

(assert (= (and d!4279 (not res!14791)) b!24203))

(assert (=> d!4279 m!17080))

(declare-fun m!18431 () Bool)

(assert (=> d!4279 m!18431))

(assert (=> b!24201 m!17080))

(declare-fun m!18433 () Bool)

(assert (=> b!24201 m!18433))

(assert (=> b!24201 m!17080))

(declare-fun m!18435 () Bool)

(assert (=> b!24201 m!18435))

(assert (=> b!24201 m!18435))

(declare-fun m!18437 () Bool)

(assert (=> b!24201 m!18437))

(assert (=> b!24203 m!17080))

(assert (=> b!24203 m!18435))

(assert (=> b!24203 m!18435))

(assert (=> b!24203 m!18437))

(assert (=> b!23704 d!4279))

(declare-fun d!4281 () Bool)

(assert (=> d!4281 (= (apply!29 (+!44 lt!8651 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8643) (apply!29 lt!8651 lt!8643))))

(declare-fun lt!9097 () Unit!522)

(assert (=> d!4281 (= lt!9097 (choose!213 lt!8651 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8643))))

(declare-fun e!15667 () Bool)

(assert (=> d!4281 e!15667))

(declare-fun res!14792 () Bool)

(assert (=> d!4281 (=> (not res!14792) (not e!15667))))

(assert (=> d!4281 (= res!14792 (contains!229 lt!8651 lt!8643))))

(assert (=> d!4281 (= (addApplyDifferent!14 lt!8651 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8643) lt!9097)))

(declare-fun b!24204 () Bool)

(assert (=> b!24204 (= e!15667 (not (= lt!8643 lt!8649)))))

(assert (= (and d!4281 res!14792) b!24204))

(declare-fun m!18439 () Bool)

(assert (=> d!4281 m!18439))

(assert (=> d!4281 m!17273))

(assert (=> d!4281 m!17267))

(assert (=> d!4281 m!17267))

(assert (=> d!4281 m!17269))

(declare-fun m!18441 () Bool)

(assert (=> d!4281 m!18441))

(assert (=> b!23674 d!4281))

(declare-fun d!4283 () Bool)

(declare-fun e!15669 () Bool)

(assert (=> d!4283 e!15669))

(declare-fun res!14793 () Bool)

(assert (=> d!4283 (=> res!14793 e!15669)))

(declare-fun lt!9099 () Bool)

(assert (=> d!4283 (= res!14793 (not lt!9099))))

(declare-fun lt!9100 () Bool)

(assert (=> d!4283 (= lt!9099 lt!9100)))

(declare-fun lt!9098 () Unit!522)

(declare-fun e!15668 () Unit!522)

(assert (=> d!4283 (= lt!9098 e!15668)))

(declare-fun c!3217 () Bool)

(assert (=> d!4283 (= c!3217 lt!9100)))

(assert (=> d!4283 (= lt!9100 (containsKey!25 (toList!297 (+!44 lt!8647 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8645))))

(assert (=> d!4283 (= (contains!229 (+!44 lt!8647 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8645) lt!9099)))

(declare-fun b!24205 () Bool)

(declare-fun lt!9101 () Unit!522)

(assert (=> b!24205 (= e!15668 lt!9101)))

(assert (=> b!24205 (= lt!9101 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (+!44 lt!8647 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8645))))

(assert (=> b!24205 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8647 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8645))))

(declare-fun b!24206 () Bool)

(declare-fun Unit!566 () Unit!522)

(assert (=> b!24206 (= e!15668 Unit!566)))

(declare-fun b!24207 () Bool)

(assert (=> b!24207 (= e!15669 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8647 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8645)))))

(assert (= (and d!4283 c!3217) b!24205))

(assert (= (and d!4283 (not c!3217)) b!24206))

(assert (= (and d!4283 (not res!14793)) b!24207))

(declare-fun m!18443 () Bool)

(assert (=> d!4283 m!18443))

(declare-fun m!18445 () Bool)

(assert (=> b!24205 m!18445))

(declare-fun m!18447 () Bool)

(assert (=> b!24205 m!18447))

(assert (=> b!24205 m!18447))

(declare-fun m!18449 () Bool)

(assert (=> b!24205 m!18449))

(assert (=> b!24207 m!18447))

(assert (=> b!24207 m!18447))

(assert (=> b!24207 m!18449))

(assert (=> b!23674 d!4283))

(declare-fun d!4285 () Bool)

(assert (=> d!4285 (= (apply!29 (+!44 lt!8648 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8632) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8648 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) lt!8632)))))

(declare-fun bs!980 () Bool)

(assert (= bs!980 d!4285))

(declare-fun m!18451 () Bool)

(assert (=> bs!980 m!18451))

(assert (=> bs!980 m!18451))

(declare-fun m!18453 () Bool)

(assert (=> bs!980 m!18453))

(assert (=> b!23674 d!4285))

(declare-fun d!4287 () Bool)

(assert (=> d!4287 (= (apply!29 (+!44 lt!8651 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8643) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8651 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) lt!8643)))))

(declare-fun bs!981 () Bool)

(assert (= bs!981 d!4287))

(declare-fun m!18455 () Bool)

(assert (=> bs!981 m!18455))

(assert (=> bs!981 m!18455))

(declare-fun m!18457 () Bool)

(assert (=> bs!981 m!18457))

(assert (=> b!23674 d!4287))

(declare-fun d!4289 () Bool)

(declare-fun e!15670 () Bool)

(assert (=> d!4289 e!15670))

(declare-fun res!14795 () Bool)

(assert (=> d!4289 (=> (not res!14795) (not e!15670))))

(declare-fun lt!9105 () ListLongMap!563)

(assert (=> d!4289 (= res!14795 (contains!229 lt!9105 (_1!495 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(declare-fun lt!9103 () List!564)

(assert (=> d!4289 (= lt!9105 (ListLongMap!564 lt!9103))))

(declare-fun lt!9102 () Unit!522)

(declare-fun lt!9104 () Unit!522)

(assert (=> d!4289 (= lt!9102 lt!9104)))

(assert (=> d!4289 (= (getValueByKey!61 lt!9103 (_1!495 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4289 (= lt!9104 (lemmaContainsTupThenGetReturnValue!18 lt!9103 (_1!495 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!495 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4289 (= lt!9103 (insertStrictlySorted!18 (toList!297 lt!8651) (_1!495 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!495 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4289 (= (+!44 lt!8651 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!9105)))

(declare-fun b!24208 () Bool)

(declare-fun res!14794 () Bool)

(assert (=> b!24208 (=> (not res!14794) (not e!15670))))

(assert (=> b!24208 (= res!14794 (= (getValueByKey!61 (toList!297 lt!9105) (_1!495 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(declare-fun b!24209 () Bool)

(assert (=> b!24209 (= e!15670 (contains!231 (toList!297 lt!9105) (tuple2!973 lt!8649 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))

(assert (= (and d!4289 res!14795) b!24208))

(assert (= (and b!24208 res!14794) b!24209))

(declare-fun m!18459 () Bool)

(assert (=> d!4289 m!18459))

(declare-fun m!18461 () Bool)

(assert (=> d!4289 m!18461))

(declare-fun m!18463 () Bool)

(assert (=> d!4289 m!18463))

(declare-fun m!18465 () Bool)

(assert (=> d!4289 m!18465))

(declare-fun m!18467 () Bool)

(assert (=> b!24208 m!18467))

(declare-fun m!18469 () Bool)

(assert (=> b!24209 m!18469))

(assert (=> b!23674 d!4289))

(declare-fun d!4291 () Bool)

(declare-fun e!15671 () Bool)

(assert (=> d!4291 e!15671))

(declare-fun res!14797 () Bool)

(assert (=> d!4291 (=> (not res!14797) (not e!15671))))

(declare-fun lt!9109 () ListLongMap!563)

(assert (=> d!4291 (= res!14797 (contains!229 lt!9109 (_1!495 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(declare-fun lt!9107 () List!564)

(assert (=> d!4291 (= lt!9109 (ListLongMap!564 lt!9107))))

(declare-fun lt!9106 () Unit!522)

(declare-fun lt!9108 () Unit!522)

(assert (=> d!4291 (= lt!9106 lt!9108)))

(assert (=> d!4291 (= (getValueByKey!61 lt!9107 (_1!495 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4291 (= lt!9108 (lemmaContainsTupThenGetReturnValue!18 lt!9107 (_1!495 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!495 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4291 (= lt!9107 (insertStrictlySorted!18 (toList!297 lt!8648) (_1!495 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!495 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4291 (= (+!44 lt!8648 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!9109)))

(declare-fun b!24210 () Bool)

(declare-fun res!14796 () Bool)

(assert (=> b!24210 (=> (not res!14796) (not e!15671))))

(assert (=> b!24210 (= res!14796 (= (getValueByKey!61 (toList!297 lt!9109) (_1!495 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(declare-fun b!24211 () Bool)

(assert (=> b!24211 (= e!15671 (contains!231 (toList!297 lt!9109) (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))

(assert (= (and d!4291 res!14797) b!24210))

(assert (= (and b!24210 res!14796) b!24211))

(declare-fun m!18471 () Bool)

(assert (=> d!4291 m!18471))

(declare-fun m!18473 () Bool)

(assert (=> d!4291 m!18473))

(declare-fun m!18475 () Bool)

(assert (=> d!4291 m!18475))

(declare-fun m!18477 () Bool)

(assert (=> d!4291 m!18477))

(declare-fun m!18479 () Bool)

(assert (=> b!24210 m!18479))

(declare-fun m!18481 () Bool)

(assert (=> b!24211 m!18481))

(assert (=> b!23674 d!4291))

(assert (=> b!23674 d!4233))

(declare-fun d!4293 () Bool)

(assert (=> d!4293 (contains!229 (+!44 lt!8647 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8645)))

(declare-fun lt!9110 () Unit!522)

(assert (=> d!4293 (= lt!9110 (choose!214 lt!8647 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8645))))

(assert (=> d!4293 (contains!229 lt!8647 lt!8645)))

(assert (=> d!4293 (= (addStillContains!14 lt!8647 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8645) lt!9110)))

(declare-fun bs!982 () Bool)

(assert (= bs!982 d!4293))

(assert (=> bs!982 m!17263))

(assert (=> bs!982 m!17263))

(assert (=> bs!982 m!17281))

(declare-fun m!18483 () Bool)

(assert (=> bs!982 m!18483))

(declare-fun m!18485 () Bool)

(assert (=> bs!982 m!18485))

(assert (=> b!23674 d!4293))

(declare-fun d!4295 () Bool)

(assert (=> d!4295 (= (apply!29 (+!44 lt!8637 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8644) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8637 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8644)))))

(declare-fun bs!983 () Bool)

(assert (= bs!983 d!4295))

(declare-fun m!18487 () Bool)

(assert (=> bs!983 m!18487))

(assert (=> bs!983 m!18487))

(declare-fun m!18489 () Bool)

(assert (=> bs!983 m!18489))

(assert (=> b!23674 d!4295))

(declare-fun d!4297 () Bool)

(assert (=> d!4297 (= (apply!29 (+!44 lt!8648 (tuple2!973 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8632) (apply!29 lt!8648 lt!8632))))

(declare-fun lt!9111 () Unit!522)

(assert (=> d!4297 (= lt!9111 (choose!213 lt!8648 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8632))))

(declare-fun e!15672 () Bool)

(assert (=> d!4297 e!15672))

(declare-fun res!14798 () Bool)

(assert (=> d!4297 (=> (not res!14798) (not e!15672))))

(assert (=> d!4297 (= res!14798 (contains!229 lt!8648 lt!8632))))

(assert (=> d!4297 (= (addApplyDifferent!14 lt!8648 lt!8634 (ite c!2996 (ite c!2995 (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8632) lt!9111)))

(declare-fun b!24212 () Bool)

(assert (=> b!24212 (= e!15672 (not (= lt!8632 lt!8634)))))

(assert (= (and d!4297 res!14798) b!24212))

(declare-fun m!18491 () Bool)

(assert (=> d!4297 m!18491))

(assert (=> d!4297 m!17279))

(assert (=> d!4297 m!17257))

(assert (=> d!4297 m!17257))

(assert (=> d!4297 m!17259))

(declare-fun m!18493 () Bool)

(assert (=> d!4297 m!18493))

(assert (=> b!23674 d!4297))

(declare-fun d!4299 () Bool)

(assert (=> d!4299 (= (apply!29 lt!8637 lt!8644) (get!391 (getValueByKey!61 (toList!297 lt!8637) lt!8644)))))

(declare-fun bs!984 () Bool)

(assert (= bs!984 d!4299))

(declare-fun m!18495 () Bool)

(assert (=> bs!984 m!18495))

(assert (=> bs!984 m!18495))

(declare-fun m!18497 () Bool)

(assert (=> bs!984 m!18497))

(assert (=> b!23674 d!4299))

(declare-fun d!4301 () Bool)

(assert (=> d!4301 (= (apply!29 (+!44 lt!8637 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8644) (apply!29 lt!8637 lt!8644))))

(declare-fun lt!9112 () Unit!522)

(assert (=> d!4301 (= lt!9112 (choose!213 lt!8637 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8644))))

(declare-fun e!15673 () Bool)

(assert (=> d!4301 e!15673))

(declare-fun res!14799 () Bool)

(assert (=> d!4301 (=> (not res!14799) (not e!15673))))

(assert (=> d!4301 (= res!14799 (contains!229 lt!8637 lt!8644))))

(assert (=> d!4301 (= (addApplyDifferent!14 lt!8637 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8644) lt!9112)))

(declare-fun b!24213 () Bool)

(assert (=> b!24213 (= e!15673 (not (= lt!8644 lt!8652)))))

(assert (= (and d!4301 res!14799) b!24213))

(declare-fun m!18499 () Bool)

(assert (=> d!4301 m!18499))

(assert (=> d!4301 m!17261))

(assert (=> d!4301 m!17253))

(assert (=> d!4301 m!17253))

(assert (=> d!4301 m!17255))

(declare-fun m!18501 () Bool)

(assert (=> d!4301 m!18501))

(assert (=> b!23674 d!4301))

(declare-fun d!4303 () Bool)

(declare-fun e!15674 () Bool)

(assert (=> d!4303 e!15674))

(declare-fun res!14801 () Bool)

(assert (=> d!4303 (=> (not res!14801) (not e!15674))))

(declare-fun lt!9116 () ListLongMap!563)

(assert (=> d!4303 (= res!14801 (contains!229 lt!9116 (_1!495 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(declare-fun lt!9114 () List!564)

(assert (=> d!4303 (= lt!9116 (ListLongMap!564 lt!9114))))

(declare-fun lt!9113 () Unit!522)

(declare-fun lt!9115 () Unit!522)

(assert (=> d!4303 (= lt!9113 lt!9115)))

(assert (=> d!4303 (= (getValueByKey!61 lt!9114 (_1!495 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4303 (= lt!9115 (lemmaContainsTupThenGetReturnValue!18 lt!9114 (_1!495 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) (_2!495 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4303 (= lt!9114 (insertStrictlySorted!18 (toList!297 lt!8637) (_1!495 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) (_2!495 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4303 (= (+!44 lt!8637 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!9116)))

(declare-fun b!24214 () Bool)

(declare-fun res!14800 () Bool)

(assert (=> b!24214 (=> (not res!14800) (not e!15674))))

(assert (=> b!24214 (= res!14800 (= (getValueByKey!61 (toList!297 lt!9116) (_1!495 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))))))))

(declare-fun b!24215 () Bool)

(assert (=> b!24215 (= e!15674 (contains!231 (toList!297 lt!9116) (tuple2!973 lt!8652 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))))))

(assert (= (and d!4303 res!14801) b!24214))

(assert (= (and b!24214 res!14800) b!24215))

(declare-fun m!18503 () Bool)

(assert (=> d!4303 m!18503))

(declare-fun m!18505 () Bool)

(assert (=> d!4303 m!18505))

(declare-fun m!18507 () Bool)

(assert (=> d!4303 m!18507))

(declare-fun m!18509 () Bool)

(assert (=> d!4303 m!18509))

(declare-fun m!18511 () Bool)

(assert (=> b!24214 m!18511))

(declare-fun m!18513 () Bool)

(assert (=> b!24215 m!18513))

(assert (=> b!23674 d!4303))

(declare-fun d!4305 () Bool)

(assert (=> d!4305 (= (apply!29 lt!8648 lt!8632) (get!391 (getValueByKey!61 (toList!297 lt!8648) lt!8632)))))

(declare-fun bs!985 () Bool)

(assert (= bs!985 d!4305))

(declare-fun m!18515 () Bool)

(assert (=> bs!985 m!18515))

(assert (=> bs!985 m!18515))

(declare-fun m!18517 () Bool)

(assert (=> bs!985 m!18517))

(assert (=> b!23674 d!4305))

(declare-fun d!4307 () Bool)

(declare-fun e!15675 () Bool)

(assert (=> d!4307 e!15675))

(declare-fun res!14803 () Bool)

(assert (=> d!4307 (=> (not res!14803) (not e!15675))))

(declare-fun lt!9120 () ListLongMap!563)

(assert (=> d!4307 (= res!14803 (contains!229 lt!9120 (_1!495 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(declare-fun lt!9118 () List!564)

(assert (=> d!4307 (= lt!9120 (ListLongMap!564 lt!9118))))

(declare-fun lt!9117 () Unit!522)

(declare-fun lt!9119 () Unit!522)

(assert (=> d!4307 (= lt!9117 lt!9119)))

(assert (=> d!4307 (= (getValueByKey!61 lt!9118 (_1!495 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4307 (= lt!9119 (lemmaContainsTupThenGetReturnValue!18 lt!9118 (_1!495 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) (_2!495 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4307 (= lt!9118 (insertStrictlySorted!18 (toList!297 lt!8647) (_1!495 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) (_2!495 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4307 (= (+!44 lt!8647 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!9120)))

(declare-fun b!24216 () Bool)

(declare-fun res!14802 () Bool)

(assert (=> b!24216 (=> (not res!14802) (not e!15675))))

(assert (=> b!24216 (= res!14802 (= (getValueByKey!61 (toList!297 lt!9120) (_1!495 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) (Some!66 (_2!495 (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))))))))

(declare-fun b!24217 () Bool)

(assert (=> b!24217 (= e!15675 (contains!231 (toList!297 lt!9120) (tuple2!973 lt!8650 (ite (and c!2996 c!2995) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))))))

(assert (= (and d!4307 res!14803) b!24216))

(assert (= (and b!24216 res!14802) b!24217))

(declare-fun m!18519 () Bool)

(assert (=> d!4307 m!18519))

(declare-fun m!18521 () Bool)

(assert (=> d!4307 m!18521))

(declare-fun m!18523 () Bool)

(assert (=> d!4307 m!18523))

(declare-fun m!18525 () Bool)

(assert (=> d!4307 m!18525))

(declare-fun m!18527 () Bool)

(assert (=> b!24216 m!18527))

(declare-fun m!18529 () Bool)

(assert (=> b!24217 m!18529))

(assert (=> b!23674 d!4307))

(declare-fun d!4309 () Bool)

(assert (=> d!4309 (= (apply!29 lt!8651 lt!8643) (get!391 (getValueByKey!61 (toList!297 lt!8651) lt!8643)))))

(declare-fun bs!986 () Bool)

(assert (= bs!986 d!4309))

(declare-fun m!18531 () Bool)

(assert (=> bs!986 m!18531))

(assert (=> bs!986 m!18531))

(declare-fun m!18533 () Bool)

(assert (=> bs!986 m!18533))

(assert (=> b!23674 d!4309))

(declare-fun d!4311 () Bool)

(declare-fun e!15676 () Bool)

(assert (=> d!4311 e!15676))

(declare-fun res!14805 () Bool)

(assert (=> d!4311 (=> (not res!14805) (not e!15676))))

(declare-fun lt!9124 () ListLongMap!563)

(assert (=> d!4311 (= res!14805 (contains!229 lt!9124 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9122 () List!564)

(assert (=> d!4311 (= lt!9124 (ListLongMap!564 lt!9122))))

(declare-fun lt!9121 () Unit!522)

(declare-fun lt!9123 () Unit!522)

(assert (=> d!4311 (= lt!9121 lt!9123)))

(assert (=> d!4311 (= (getValueByKey!61 lt!9122 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4311 (= lt!9123 (lemmaContainsTupThenGetReturnValue!18 lt!9122 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4311 (= lt!9122 (insertStrictlySorted!18 (toList!297 call!2032) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4311 (= (+!44 call!2032 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))) lt!9124)))

(declare-fun b!24218 () Bool)

(declare-fun res!14804 () Bool)

(assert (=> b!24218 (=> (not res!14804) (not e!15676))))

(assert (=> b!24218 (= res!14804 (= (getValueByKey!61 (toList!297 lt!9124) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24219 () Bool)

(assert (=> b!24219 (= e!15676 (contains!231 (toList!297 lt!9124) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4311 res!14805) b!24218))

(assert (= (and b!24218 res!14804) b!24219))

(declare-fun m!18535 () Bool)

(assert (=> d!4311 m!18535))

(declare-fun m!18537 () Bool)

(assert (=> d!4311 m!18537))

(declare-fun m!18539 () Bool)

(assert (=> d!4311 m!18539))

(declare-fun m!18541 () Bool)

(assert (=> d!4311 m!18541))

(declare-fun m!18543 () Bool)

(assert (=> b!24218 m!18543))

(declare-fun m!18545 () Bool)

(assert (=> b!24219 m!18545))

(assert (=> b!23743 d!4311))

(declare-fun d!4313 () Bool)

(assert (=> d!4313 (contains!229 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356)))))

(assert (=> d!4313 true))

(declare-fun _$16!71 () Unit!522)

(assert (=> d!4313 (= (choose!208 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (index!2338 lt!8356) (defaultEntry!1742 (_2!490 lt!8142))) _$16!71)))

(declare-fun bs!987 () Bool)

(assert (= bs!987 d!4313))

(assert (=> bs!987 m!16852))

(assert (=> bs!987 m!16854))

(assert (=> bs!987 m!16852))

(assert (=> bs!987 m!16854))

(assert (=> bs!987 m!16856))

(assert (=> d!4043 d!4313))

(assert (=> d!4043 d!4145))

(declare-fun d!4315 () Bool)

(assert (=> d!4315 (= (apply!29 lt!8766 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!391 (getValueByKey!61 (toList!297 lt!8766) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(declare-fun bs!988 () Bool)

(assert (= bs!988 d!4315))

(assert (=> bs!988 m!16934))

(declare-fun m!18547 () Bool)

(assert (=> bs!988 m!18547))

(assert (=> bs!988 m!18547))

(declare-fun m!18549 () Bool)

(assert (=> bs!988 m!18549))

(assert (=> b!23788 d!4315))

(declare-fun d!4317 () Bool)

(declare-fun c!3220 () Bool)

(assert (=> d!4317 (= c!3220 ((_ is ValueCellFull!311) (select (arr!596 lt!8315) #b00000000000000000000000000000000)))))

(declare-fun e!15679 () V!1187)

(assert (=> d!4317 (= (get!390 (select (arr!596 lt!8315) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)) e!15679)))

(declare-fun b!24224 () Bool)

(declare-fun get!392 (ValueCell!311 V!1187) V!1187)

(assert (=> b!24224 (= e!15679 (get!392 (select (arr!596 lt!8315) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24225 () Bool)

(declare-fun get!393 (ValueCell!311 V!1187) V!1187)

(assert (=> b!24225 (= e!15679 (get!393 (select (arr!596 lt!8315) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4317 c!3220) b!24224))

(assert (= (and d!4317 (not c!3220)) b!24225))

(assert (=> b!24224 m!17525))

(assert (=> b!24224 m!16930))

(declare-fun m!18551 () Bool)

(assert (=> b!24224 m!18551))

(assert (=> b!24225 m!17525))

(assert (=> b!24225 m!16930))

(declare-fun m!18553 () Bool)

(assert (=> b!24225 m!18553))

(assert (=> b!23788 d!4317))

(declare-fun d!4319 () Bool)

(declare-fun e!15680 () Bool)

(assert (=> d!4319 e!15680))

(declare-fun res!14806 () Bool)

(assert (=> d!4319 (=> (not res!14806) (not e!15680))))

(assert (=> d!4319 (= res!14806 (and (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000000) (bvslt (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (size!693 (_keys!3163 (_2!490 lt!8142))))))))

(declare-fun lt!9125 () Unit!522)

(assert (=> d!4319 (= lt!9125 (choose!41 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) lt!8725 lt!8744))))

(assert (=> d!4319 (bvslt (size!693 (_keys!3163 (_2!490 lt!8142))) #b01111111111111111111111111111111)))

(assert (=> d!4319 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) lt!8725 lt!8744) lt!9125)))

(declare-fun b!24226 () Bool)

(assert (=> b!24226 (= e!15680 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) lt!8725 lt!8744))))

(assert (= (and d!4319 res!14806) b!24226))

(declare-fun m!18555 () Bool)

(assert (=> d!4319 m!18555))

(assert (=> b!24226 m!17499))

(assert (=> b!24226 m!17475))

(assert (=> d!4063 d!4319))

(assert (=> d!4063 d!4093))

(assert (=> d!4063 d!4051))

(declare-fun b!24227 () Bool)

(declare-fun e!15682 () (_ BitVec 32))

(assert (=> b!24227 (= e!15682 #b00000000000000000000000000000000)))

(declare-fun b!24228 () Bool)

(declare-fun e!15681 () (_ BitVec 32))

(assert (=> b!24228 (= e!15682 e!15681)))

(declare-fun c!3222 () Bool)

(assert (=> b!24228 (= c!3222 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun bm!2092 () Bool)

(declare-fun call!2095 () (_ BitVec 32))

(assert (=> bm!2092 (= call!2095 (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8142)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun d!4321 () Bool)

(declare-fun lt!9126 () (_ BitVec 32))

(assert (=> d!4321 (and (bvsge lt!9126 #b00000000000000000000000000000000) (bvsle lt!9126 (bvsub (size!693 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> d!4321 (= lt!9126 e!15682)))

(declare-fun c!3221 () Bool)

(assert (=> d!4321 (= c!3221 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4321 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (_2!490 lt!8142))) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4321 (= (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8142)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) lt!9126)))

(declare-fun b!24229 () Bool)

(assert (=> b!24229 (= e!15681 (bvadd #b00000000000000000000000000000001 call!2095))))

(declare-fun b!24230 () Bool)

(assert (=> b!24230 (= e!15681 call!2095)))

(assert (= (and d!4321 c!3221) b!24227))

(assert (= (and d!4321 (not c!3221)) b!24228))

(assert (= (and b!24228 c!3222) b!24229))

(assert (= (and b!24228 (not c!3222)) b!24230))

(assert (= (or b!24229 b!24230) bm!2092))

(assert (=> b!24228 m!17080))

(assert (=> b!24228 m!17080))

(assert (=> b!24228 m!17086))

(declare-fun m!18557 () Bool)

(assert (=> bm!2092 m!18557))

(assert (=> d!4063 d!4321))

(declare-fun d!4323 () Bool)

(declare-fun res!14807 () Bool)

(declare-fun e!15683 () Bool)

(assert (=> d!4323 (=> res!14807 e!15683)))

(assert (=> d!4323 (= res!14807 (= (select (arr!597 lt!8729) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4323 (= (arrayContainsKey!0 lt!8729 #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000) e!15683)))

(declare-fun b!24231 () Bool)

(declare-fun e!15684 () Bool)

(assert (=> b!24231 (= e!15683 e!15684)))

(declare-fun res!14808 () Bool)

(assert (=> b!24231 (=> (not res!14808) (not e!15684))))

(assert (=> b!24231 (= res!14808 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 lt!8729)))))

(declare-fun b!24232 () Bool)

(assert (=> b!24232 (= e!15684 (arrayContainsKey!0 lt!8729 #b1000000000000000000000000000000000000000000000000000000000000000 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4323 (not res!14807)) b!24231))

(assert (= (and b!24231 res!14808) b!24232))

(declare-fun m!18559 () Bool)

(assert (=> d!4323 m!18559))

(declare-fun m!18561 () Bool)

(assert (=> b!24232 m!18561))

(assert (=> d!4063 d!4323))

(declare-fun b!24233 () Bool)

(declare-fun e!15686 () (_ BitVec 32))

(assert (=> b!24233 (= e!15686 #b00000000000000000000000000000000)))

(declare-fun b!24234 () Bool)

(declare-fun e!15685 () (_ BitVec 32))

(assert (=> b!24234 (= e!15686 e!15685)))

(declare-fun c!3224 () Bool)

(assert (=> b!24234 (= c!3224 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000)))))

(declare-fun bm!2093 () Bool)

(declare-fun call!2096 () (_ BitVec 32))

(assert (=> bm!2093 (= call!2096 (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun lt!9127 () (_ BitVec 32))

(declare-fun d!4325 () Bool)

(assert (=> d!4325 (and (bvsge lt!9127 #b00000000000000000000000000000000) (bvsle lt!9127 (bvsub (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000)))))

(assert (=> d!4325 (= lt!9127 e!15686)))

(declare-fun c!3223 () Bool)

(assert (=> d!4325 (= c!3223 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4325 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (_2!490 lt!8142))) (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(assert (=> d!4325 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) lt!9127)))

(declare-fun b!24235 () Bool)

(assert (=> b!24235 (= e!15685 (bvadd #b00000000000000000000000000000001 call!2096))))

(declare-fun b!24236 () Bool)

(assert (=> b!24236 (= e!15685 call!2096)))

(assert (= (and d!4325 c!3223) b!24233))

(assert (= (and d!4325 (not c!3223)) b!24234))

(assert (= (and b!24234 c!3224) b!24235))

(assert (= (and b!24234 (not c!3224)) b!24236))

(assert (= (or b!24235 b!24236) bm!2093))

(declare-fun m!18563 () Bool)

(assert (=> b!24234 m!18563))

(assert (=> b!24234 m!18563))

(declare-fun m!18565 () Bool)

(assert (=> b!24234 m!18565))

(declare-fun m!18567 () Bool)

(assert (=> bm!2093 m!18567))

(assert (=> d!4063 d!4325))

(declare-fun b!24237 () Bool)

(declare-fun e!15690 () Bool)

(assert (=> b!24237 (= e!15690 (contains!230 lt!8744 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) lt!8725)))))

(declare-fun call!2097 () Bool)

(declare-fun c!3225 () Bool)

(declare-fun bm!2094 () Bool)

(assert (=> bm!2094 (= call!2097 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (bvadd lt!8725 #b00000000000000000000000000000001) (ite c!3225 (Cons!561 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) lt!8725) lt!8744) lt!8744)))))

(declare-fun b!24238 () Bool)

(declare-fun e!15689 () Bool)

(assert (=> b!24238 (= e!15689 call!2097)))

(declare-fun d!4327 () Bool)

(declare-fun res!14811 () Bool)

(declare-fun e!15688 () Bool)

(assert (=> d!4327 (=> res!14811 e!15688)))

(assert (=> d!4327 (= res!14811 (bvsge lt!8725 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(assert (=> d!4327 (= (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) lt!8725 lt!8744) e!15688)))

(declare-fun b!24239 () Bool)

(declare-fun e!15687 () Bool)

(assert (=> b!24239 (= e!15688 e!15687)))

(declare-fun res!14810 () Bool)

(assert (=> b!24239 (=> (not res!14810) (not e!15687))))

(assert (=> b!24239 (= res!14810 (not e!15690))))

(declare-fun res!14809 () Bool)

(assert (=> b!24239 (=> (not res!14809) (not e!15690))))

(assert (=> b!24239 (= res!14809 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) lt!8725)))))

(declare-fun b!24240 () Bool)

(assert (=> b!24240 (= e!15687 e!15689)))

(assert (=> b!24240 (= c!3225 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) lt!8725)))))

(declare-fun b!24241 () Bool)

(assert (=> b!24241 (= e!15689 call!2097)))

(assert (= (and d!4327 (not res!14811)) b!24239))

(assert (= (and b!24239 res!14809) b!24237))

(assert (= (and b!24239 res!14810) b!24240))

(assert (= (and b!24240 c!3225) b!24238))

(assert (= (and b!24240 (not c!3225)) b!24241))

(assert (= (or b!24238 b!24241) bm!2094))

(declare-fun m!18569 () Bool)

(assert (=> b!24237 m!18569))

(assert (=> b!24237 m!18569))

(declare-fun m!18571 () Bool)

(assert (=> b!24237 m!18571))

(assert (=> bm!2094 m!18569))

(declare-fun m!18573 () Bool)

(assert (=> bm!2094 m!18573))

(assert (=> b!24239 m!18569))

(assert (=> b!24239 m!18569))

(declare-fun m!18575 () Bool)

(assert (=> b!24239 m!18575))

(assert (=> b!24240 m!18569))

(assert (=> b!24240 m!18569))

(assert (=> b!24240 m!18575))

(assert (=> d!4063 d!4327))

(declare-fun b!24242 () Bool)

(declare-fun e!15699 () ListLongMap!563)

(declare-fun call!2100 () ListLongMap!563)

(assert (=> b!24242 (= e!15699 call!2100)))

(declare-fun b!24243 () Bool)

(declare-fun e!15702 () Bool)

(declare-fun lt!9139 () ListLongMap!563)

(assert (=> b!24243 (= e!15702 (= (apply!29 lt!9139 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!490 lt!8142))))))

(declare-fun e!15691 () Bool)

(declare-fun b!24244 () Bool)

(assert (=> b!24244 (= e!15691 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000)))))

(declare-fun bm!2095 () Bool)

(declare-fun call!2103 () ListLongMap!563)

(assert (=> bm!2095 (= call!2103 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!24245 () Bool)

(declare-fun e!15696 () ListLongMap!563)

(assert (=> b!24245 (= e!15696 e!15699)))

(declare-fun c!3230 () Bool)

(assert (=> b!24245 (= c!3230 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24246 () Bool)

(declare-fun e!15701 () Bool)

(declare-fun call!2099 () Bool)

(assert (=> b!24246 (= e!15701 (not call!2099))))

(declare-fun b!24247 () Bool)

(declare-fun e!15698 () Bool)

(assert (=> b!24247 (= e!15698 e!15702)))

(declare-fun res!14817 () Bool)

(declare-fun call!2101 () Bool)

(assert (=> b!24247 (= res!14817 call!2101)))

(assert (=> b!24247 (=> (not res!14817) (not e!15702))))

(declare-fun bm!2096 () Bool)

(declare-fun call!2102 () ListLongMap!563)

(assert (=> bm!2096 (= call!2100 call!2102)))

(declare-fun b!24249 () Bool)

(assert (=> b!24249 (= e!15698 (not call!2101))))

(declare-fun bm!2097 () Bool)

(declare-fun call!2098 () ListLongMap!563)

(assert (=> bm!2097 (= call!2098 call!2103)))

(declare-fun b!24250 () Bool)

(declare-fun e!15697 () Bool)

(assert (=> b!24250 (= e!15697 e!15698)))

(declare-fun c!3231 () Bool)

(assert (=> b!24250 (= c!3231 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24251 () Bool)

(declare-fun e!15692 () Unit!522)

(declare-fun lt!9128 () Unit!522)

(assert (=> b!24251 (= e!15692 lt!9128)))

(declare-fun lt!9144 () ListLongMap!563)

(assert (=> b!24251 (= lt!9144 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9147 () (_ BitVec 64))

(assert (=> b!24251 (= lt!9147 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9142 () (_ BitVec 64))

(assert (=> b!24251 (= lt!9142 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000))))

(declare-fun lt!9132 () Unit!522)

(assert (=> b!24251 (= lt!9132 (addStillContains!14 lt!9144 lt!9147 (zeroValue!1665 (_2!490 lt!8142)) lt!9142))))

(assert (=> b!24251 (contains!229 (+!44 lt!9144 (tuple2!973 lt!9147 (zeroValue!1665 (_2!490 lt!8142)))) lt!9142)))

(declare-fun lt!9133 () Unit!522)

(assert (=> b!24251 (= lt!9133 lt!9132)))

(declare-fun lt!9145 () ListLongMap!563)

(assert (=> b!24251 (= lt!9145 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9131 () (_ BitVec 64))

(assert (=> b!24251 (= lt!9131 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9129 () (_ BitVec 64))

(assert (=> b!24251 (= lt!9129 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000))))

(declare-fun lt!9138 () Unit!522)

(assert (=> b!24251 (= lt!9138 (addApplyDifferent!14 lt!9145 lt!9131 (minValue!1665 (_2!490 lt!8142)) lt!9129))))

(assert (=> b!24251 (= (apply!29 (+!44 lt!9145 (tuple2!973 lt!9131 (minValue!1665 (_2!490 lt!8142)))) lt!9129) (apply!29 lt!9145 lt!9129))))

(declare-fun lt!9136 () Unit!522)

(assert (=> b!24251 (= lt!9136 lt!9138)))

(declare-fun lt!9134 () ListLongMap!563)

(assert (=> b!24251 (= lt!9134 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9149 () (_ BitVec 64))

(assert (=> b!24251 (= lt!9149 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9141 () (_ BitVec 64))

(assert (=> b!24251 (= lt!9141 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000))))

(declare-fun lt!9130 () Unit!522)

(assert (=> b!24251 (= lt!9130 (addApplyDifferent!14 lt!9134 lt!9149 (zeroValue!1665 (_2!490 lt!8142)) lt!9141))))

(assert (=> b!24251 (= (apply!29 (+!44 lt!9134 (tuple2!973 lt!9149 (zeroValue!1665 (_2!490 lt!8142)))) lt!9141) (apply!29 lt!9134 lt!9141))))

(declare-fun lt!9143 () Unit!522)

(assert (=> b!24251 (= lt!9143 lt!9130)))

(declare-fun lt!9148 () ListLongMap!563)

(assert (=> b!24251 (= lt!9148 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9146 () (_ BitVec 64))

(assert (=> b!24251 (= lt!9146 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9140 () (_ BitVec 64))

(assert (=> b!24251 (= lt!9140 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000))))

(assert (=> b!24251 (= lt!9128 (addApplyDifferent!14 lt!9148 lt!9146 (minValue!1665 (_2!490 lt!8142)) lt!9140))))

(assert (=> b!24251 (= (apply!29 (+!44 lt!9148 (tuple2!973 lt!9146 (minValue!1665 (_2!490 lt!8142)))) lt!9140) (apply!29 lt!9148 lt!9140))))

(declare-fun bm!2098 () Bool)

(declare-fun c!3229 () Bool)

(declare-fun call!2104 () ListLongMap!563)

(assert (=> bm!2098 (= call!2102 (+!44 (ite c!3229 call!2103 (ite c!3230 call!2098 call!2104)) (ite (or c!3229 c!3230) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun b!24252 () Bool)

(declare-fun Unit!567 () Unit!522)

(assert (=> b!24252 (= e!15692 Unit!567)))

(declare-fun b!24253 () Bool)

(declare-fun e!15694 () Bool)

(assert (=> b!24253 (= e!15701 e!15694)))

(declare-fun res!14815 () Bool)

(assert (=> b!24253 (= res!14815 call!2099)))

(assert (=> b!24253 (=> (not res!14815) (not e!15694))))

(declare-fun bm!2099 () Bool)

(assert (=> bm!2099 (= call!2104 call!2098)))

(declare-fun b!24254 () Bool)

(declare-fun res!14816 () Bool)

(assert (=> b!24254 (=> (not res!14816) (not e!15697))))

(declare-fun e!15695 () Bool)

(assert (=> b!24254 (= res!14816 e!15695)))

(declare-fun res!14812 () Bool)

(assert (=> b!24254 (=> res!14812 e!15695)))

(declare-fun e!15700 () Bool)

(assert (=> b!24254 (= res!14812 (not e!15700))))

(declare-fun res!14819 () Bool)

(assert (=> b!24254 (=> (not res!14819) (not e!15700))))

(assert (=> b!24254 (= res!14819 (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(declare-fun b!24255 () Bool)

(declare-fun e!15693 () Bool)

(assert (=> b!24255 (= e!15695 e!15693)))

(declare-fun res!14813 () Bool)

(assert (=> b!24255 (=> (not res!14813) (not e!15693))))

(assert (=> b!24255 (= res!14813 (contains!229 lt!9139 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000)))))

(assert (=> b!24255 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(declare-fun b!24256 () Bool)

(assert (=> b!24256 (= e!15700 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000)))))

(declare-fun b!24257 () Bool)

(declare-fun e!15703 () ListLongMap!563)

(assert (=> b!24257 (= e!15703 call!2100)))

(declare-fun b!24258 () Bool)

(assert (=> b!24258 (= e!15696 (+!44 call!2102 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))

(declare-fun d!4329 () Bool)

(assert (=> d!4329 e!15697))

(declare-fun res!14818 () Bool)

(assert (=> d!4329 (=> (not res!14818) (not e!15697))))

(assert (=> d!4329 (= res!14818 (or (bvsge #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))))))

(declare-fun lt!9137 () ListLongMap!563)

(assert (=> d!4329 (= lt!9139 lt!9137)))

(declare-fun lt!9135 () Unit!522)

(assert (=> d!4329 (= lt!9135 e!15692)))

(declare-fun c!3227 () Bool)

(assert (=> d!4329 (= c!3227 e!15691)))

(declare-fun res!14820 () Bool)

(assert (=> d!4329 (=> (not res!14820) (not e!15691))))

(assert (=> d!4329 (= res!14820 (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(assert (=> d!4329 (= lt!9137 e!15696)))

(assert (=> d!4329 (= c!3229 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4329 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4329 (= (getCurrentListMap!127 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!9139)))

(declare-fun b!24248 () Bool)

(assert (=> b!24248 (= e!15693 (= (apply!29 lt!9139 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24248 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))))))

(assert (=> b!24248 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(declare-fun bm!2100 () Bool)

(assert (=> bm!2100 (= call!2101 (contains!229 lt!9139 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24259 () Bool)

(declare-fun res!14814 () Bool)

(assert (=> b!24259 (=> (not res!14814) (not e!15697))))

(assert (=> b!24259 (= res!14814 e!15701)))

(declare-fun c!3226 () Bool)

(assert (=> b!24259 (= c!3226 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24260 () Bool)

(assert (=> b!24260 (= e!15694 (= (apply!29 lt!9139 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!490 lt!8142))))))

(declare-fun b!24261 () Bool)

(assert (=> b!24261 (= e!15703 call!2104)))

(declare-fun b!24262 () Bool)

(declare-fun c!3228 () Bool)

(assert (=> b!24262 (= c!3228 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24262 (= e!15699 e!15703)))

(declare-fun bm!2101 () Bool)

(assert (=> bm!2101 (= call!2099 (contains!229 lt!9139 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4329 c!3229) b!24258))

(assert (= (and d!4329 (not c!3229)) b!24245))

(assert (= (and b!24245 c!3230) b!24242))

(assert (= (and b!24245 (not c!3230)) b!24262))

(assert (= (and b!24262 c!3228) b!24257))

(assert (= (and b!24262 (not c!3228)) b!24261))

(assert (= (or b!24257 b!24261) bm!2099))

(assert (= (or b!24242 bm!2099) bm!2097))

(assert (= (or b!24242 b!24257) bm!2096))

(assert (= (or b!24258 bm!2097) bm!2095))

(assert (= (or b!24258 bm!2096) bm!2098))

(assert (= (and d!4329 res!14820) b!24244))

(assert (= (and d!4329 c!3227) b!24251))

(assert (= (and d!4329 (not c!3227)) b!24252))

(assert (= (and d!4329 res!14818) b!24254))

(assert (= (and b!24254 res!14819) b!24256))

(assert (= (and b!24254 (not res!14812)) b!24255))

(assert (= (and b!24255 res!14813) b!24248))

(assert (= (and b!24254 res!14816) b!24259))

(assert (= (and b!24259 c!3226) b!24253))

(assert (= (and b!24259 (not c!3226)) b!24246))

(assert (= (and b!24253 res!14815) b!24260))

(assert (= (or b!24253 b!24246) bm!2101))

(assert (= (and b!24259 res!14814) b!24250))

(assert (= (and b!24250 c!3231) b!24247))

(assert (= (and b!24250 (not c!3231)) b!24249))

(assert (= (and b!24247 res!14817) b!24243))

(assert (= (or b!24247 b!24249) bm!2100))

(declare-fun b_lambda!1605 () Bool)

(assert (=> (not b_lambda!1605) (not b!24248)))

(assert (=> b!24248 t!3234))

(declare-fun b_and!1517 () Bool)

(assert (= b_and!1515 (and (=> t!3234 result!1095) b_and!1517)))

(declare-fun m!18577 () Bool)

(assert (=> b!24260 m!18577))

(declare-fun m!18579 () Bool)

(assert (=> bm!2098 m!18579))

(declare-fun m!18581 () Bool)

(assert (=> b!24248 m!18581))

(assert (=> b!24248 m!18581))

(assert (=> b!24248 m!17076))

(declare-fun m!18583 () Bool)

(assert (=> b!24248 m!18583))

(assert (=> b!24248 m!18563))

(assert (=> b!24248 m!17076))

(assert (=> b!24248 m!18563))

(declare-fun m!18585 () Bool)

(assert (=> b!24248 m!18585))

(declare-fun m!18587 () Bool)

(assert (=> bm!2100 m!18587))

(assert (=> b!24256 m!18563))

(assert (=> b!24256 m!18563))

(assert (=> b!24256 m!18565))

(declare-fun m!18589 () Bool)

(assert (=> bm!2095 m!18589))

(declare-fun m!18591 () Bool)

(assert (=> b!24251 m!18591))

(declare-fun m!18593 () Bool)

(assert (=> b!24251 m!18593))

(declare-fun m!18595 () Bool)

(assert (=> b!24251 m!18595))

(declare-fun m!18597 () Bool)

(assert (=> b!24251 m!18597))

(declare-fun m!18599 () Bool)

(assert (=> b!24251 m!18599))

(declare-fun m!18601 () Bool)

(assert (=> b!24251 m!18601))

(assert (=> b!24251 m!18591))

(declare-fun m!18603 () Bool)

(assert (=> b!24251 m!18603))

(declare-fun m!18605 () Bool)

(assert (=> b!24251 m!18605))

(declare-fun m!18607 () Bool)

(assert (=> b!24251 m!18607))

(declare-fun m!18609 () Bool)

(assert (=> b!24251 m!18609))

(declare-fun m!18611 () Bool)

(assert (=> b!24251 m!18611))

(assert (=> b!24251 m!18589))

(assert (=> b!24251 m!18563))

(declare-fun m!18613 () Bool)

(assert (=> b!24251 m!18613))

(assert (=> b!24251 m!18605))

(declare-fun m!18615 () Bool)

(assert (=> b!24251 m!18615))

(declare-fun m!18617 () Bool)

(assert (=> b!24251 m!18617))

(assert (=> b!24251 m!18595))

(assert (=> b!24251 m!18601))

(declare-fun m!18619 () Bool)

(assert (=> b!24251 m!18619))

(assert (=> b!24255 m!18563))

(assert (=> b!24255 m!18563))

(declare-fun m!18621 () Bool)

(assert (=> b!24255 m!18621))

(declare-fun m!18623 () Bool)

(assert (=> b!24243 m!18623))

(declare-fun m!18625 () Bool)

(assert (=> b!24258 m!18625))

(declare-fun m!18627 () Bool)

(assert (=> bm!2101 m!18627))

(assert (=> d!4329 m!16902))

(assert (=> b!24244 m!18563))

(assert (=> b!24244 m!18563))

(assert (=> b!24244 m!18565))

(assert (=> d!4063 d!4329))

(declare-fun d!4331 () Bool)

(declare-fun e!15704 () Bool)

(assert (=> d!4331 e!15704))

(declare-fun res!14821 () Bool)

(assert (=> d!4331 (=> (not res!14821) (not e!15704))))

(assert (=> d!4331 (= res!14821 (and (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000000) (bvslt (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (size!693 (_keys!3163 (_2!490 lt!8142)))) (bvslt (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (size!692 (_values!1728 (_2!490 lt!8142))))))))

(declare-fun lt!9150 () Unit!522)

(assert (=> d!4331 (= lt!9150 (choose!211 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4331 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4331 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!3 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))) lt!9150)))

(declare-fun b!24263 () Bool)

(assert (=> b!24263 (= e!15704 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (getCurrentListMap!127 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))))))

(assert (= (and d!4331 res!14821) b!24263))

(declare-fun m!18629 () Bool)

(assert (=> d!4331 m!18629))

(assert (=> d!4331 m!16902))

(assert (=> b!24263 m!17477))

(assert (=> b!24263 m!17483))

(assert (=> b!24263 m!17499))

(assert (=> b!24263 m!16844))

(assert (=> b!24263 m!17212))

(assert (=> b!24263 m!16844))

(assert (=> d!4063 d!4331))

(declare-fun d!4333 () Bool)

(declare-fun e!15706 () Bool)

(assert (=> d!4333 e!15706))

(declare-fun res!14822 () Bool)

(assert (=> d!4333 (=> res!14822 e!15706)))

(declare-fun lt!9152 () Bool)

(assert (=> d!4333 (= res!14822 (not lt!9152))))

(declare-fun lt!9153 () Bool)

(assert (=> d!4333 (= lt!9152 lt!9153)))

(declare-fun lt!9151 () Unit!522)

(declare-fun e!15705 () Unit!522)

(assert (=> d!4333 (= lt!9151 e!15705)))

(declare-fun c!3232 () Bool)

(assert (=> d!4333 (= c!3232 lt!9153)))

(assert (=> d!4333 (= lt!9153 (containsKey!25 (toList!297 (getCurrentListMap!127 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)))))))

(assert (=> d!4333 (= (contains!229 (getCurrentListMap!127 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (select (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)))) lt!9152)))

(declare-fun b!24264 () Bool)

(declare-fun lt!9154 () Unit!522)

(assert (=> b!24264 (= e!15705 lt!9154)))

(assert (=> b!24264 (= lt!9154 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (getCurrentListMap!127 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)))))))

(assert (=> b!24264 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)))))))

(declare-fun b!24265 () Bool)

(declare-fun Unit!568 () Unit!522)

(assert (=> b!24265 (= e!15705 Unit!568)))

(declare-fun b!24266 () Bool)

(assert (=> b!24266 (= e!15706 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))))))))

(assert (= (and d!4333 c!3232) b!24264))

(assert (= (and d!4333 (not c!3232)) b!24265))

(assert (= (and d!4333 (not res!14822)) b!24266))

(assert (=> d!4333 m!17493))

(declare-fun m!18631 () Bool)

(assert (=> d!4333 m!18631))

(assert (=> b!24264 m!17493))

(declare-fun m!18633 () Bool)

(assert (=> b!24264 m!18633))

(assert (=> b!24264 m!17493))

(declare-fun m!18635 () Bool)

(assert (=> b!24264 m!18635))

(assert (=> b!24264 m!18635))

(declare-fun m!18637 () Bool)

(assert (=> b!24264 m!18637))

(assert (=> b!24266 m!17493))

(assert (=> b!24266 m!18635))

(assert (=> b!24266 m!18635))

(assert (=> b!24266 m!18637))

(assert (=> d!4063 d!4333))

(declare-fun d!4335 () Bool)

(declare-fun e!15707 () Bool)

(assert (=> d!4335 e!15707))

(declare-fun res!14823 () Bool)

(assert (=> d!4335 (=> (not res!14823) (not e!15707))))

(assert (=> d!4335 (= res!14823 (and (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000000) (bvslt (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (size!693 (_keys!3163 (_2!490 lt!8142))))))))

(declare-fun lt!9155 () Unit!522)

(assert (=> d!4335 (= lt!9155 (choose!102 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (mask!4729 (_2!490 lt!8142))))))

(assert (=> d!4335 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4335 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (mask!4729 (_2!490 lt!8142))) lt!9155)))

(declare-fun b!24267 () Bool)

(assert (=> b!24267 (= e!15707 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142))))))

(assert (= (and d!4335 res!14823) b!24267))

(declare-fun m!18639 () Bool)

(assert (=> d!4335 m!18639))

(assert (=> d!4335 m!16902))

(assert (=> b!24267 m!17499))

(assert (=> b!24267 m!17489))

(assert (=> d!4063 d!4335))

(assert (=> d!4063 d!4055))

(assert (=> d!4063 d!4067))

(declare-fun b!24268 () Bool)

(declare-fun e!15709 () (_ BitVec 32))

(assert (=> b!24268 (= e!15709 #b00000000000000000000000000000000)))

(declare-fun b!24269 () Bool)

(declare-fun e!15708 () (_ BitVec 32))

(assert (=> b!24269 (= e!15709 e!15708)))

(declare-fun c!3234 () Bool)

(assert (=> b!24269 (= c!3234 (validKeyInArray!0 (select (arr!597 lt!8748) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)))))))

(declare-fun call!2105 () (_ BitVec 32))

(declare-fun bm!2102 () Bool)

(assert (=> bm!2102 (= call!2105 (arrayCountValidKeys!0 lt!8748 (bvadd (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000001) (bvadd (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000001)))))

(declare-fun d!4337 () Bool)

(declare-fun lt!9156 () (_ BitVec 32))

(assert (=> d!4337 (and (bvsge lt!9156 #b00000000000000000000000000000000) (bvsle lt!9156 (bvsub (size!693 lt!8748) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)))))))

(assert (=> d!4337 (= lt!9156 e!15709)))

(declare-fun c!3233 () Bool)

(assert (=> d!4337 (= c!3233 (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (bvadd (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000001)))))

(assert (=> d!4337 (and (bvsle (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (bvadd (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000001)) (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000001) (size!693 lt!8748)))))

(assert (=> d!4337 (= (arrayCountValidKeys!0 lt!8748 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (bvadd (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000001)) lt!9156)))

(declare-fun b!24270 () Bool)

(assert (=> b!24270 (= e!15708 (bvadd #b00000000000000000000000000000001 call!2105))))

(declare-fun b!24271 () Bool)

(assert (=> b!24271 (= e!15708 call!2105)))

(assert (= (and d!4337 c!3233) b!24268))

(assert (= (and d!4337 (not c!3233)) b!24269))

(assert (= (and b!24269 c!3234) b!24270))

(assert (= (and b!24269 (not c!3234)) b!24271))

(assert (= (or b!24270 b!24271) bm!2102))

(declare-fun m!18641 () Bool)

(assert (=> b!24269 m!18641))

(assert (=> b!24269 m!18641))

(declare-fun m!18643 () Bool)

(assert (=> b!24269 m!18643))

(declare-fun m!18645 () Bool)

(assert (=> bm!2102 m!18645))

(assert (=> d!4063 d!4337))

(declare-fun b!24272 () Bool)

(declare-fun e!15718 () ListLongMap!563)

(declare-fun call!2108 () ListLongMap!563)

(assert (=> b!24272 (= e!15718 call!2108)))

(declare-fun b!24273 () Bool)

(declare-fun e!15721 () Bool)

(declare-fun lt!9168 () ListLongMap!563)

(assert (=> b!24273 (= e!15721 (= (apply!29 lt!9168 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!490 lt!8142))))))

(declare-fun b!24274 () Bool)

(declare-fun e!15710 () Bool)

(assert (=> b!24274 (= e!15710 (validKeyInArray!0 (select (arr!597 lt!8739) #b00000000000000000000000000000000)))))

(declare-fun call!2111 () ListLongMap!563)

(declare-fun bm!2103 () Bool)

(assert (=> bm!2103 (= call!2111 (getCurrentListMapNoExtraKeys!15 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!24275 () Bool)

(declare-fun e!15715 () ListLongMap!563)

(assert (=> b!24275 (= e!15715 e!15718)))

(declare-fun c!3239 () Bool)

(assert (=> b!24275 (= c!3239 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24276 () Bool)

(declare-fun e!15720 () Bool)

(declare-fun call!2107 () Bool)

(assert (=> b!24276 (= e!15720 (not call!2107))))

(declare-fun b!24277 () Bool)

(declare-fun e!15717 () Bool)

(assert (=> b!24277 (= e!15717 e!15721)))

(declare-fun res!14829 () Bool)

(declare-fun call!2109 () Bool)

(assert (=> b!24277 (= res!14829 call!2109)))

(assert (=> b!24277 (=> (not res!14829) (not e!15721))))

(declare-fun bm!2104 () Bool)

(declare-fun call!2110 () ListLongMap!563)

(assert (=> bm!2104 (= call!2108 call!2110)))

(declare-fun b!24279 () Bool)

(assert (=> b!24279 (= e!15717 (not call!2109))))

(declare-fun bm!2105 () Bool)

(declare-fun call!2106 () ListLongMap!563)

(assert (=> bm!2105 (= call!2106 call!2111)))

(declare-fun b!24280 () Bool)

(declare-fun e!15716 () Bool)

(assert (=> b!24280 (= e!15716 e!15717)))

(declare-fun c!3240 () Bool)

(assert (=> b!24280 (= c!3240 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24281 () Bool)

(declare-fun e!15711 () Unit!522)

(declare-fun lt!9157 () Unit!522)

(assert (=> b!24281 (= e!15711 lt!9157)))

(declare-fun lt!9173 () ListLongMap!563)

(assert (=> b!24281 (= lt!9173 (getCurrentListMapNoExtraKeys!15 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9176 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9176 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9171 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9171 (select (arr!597 lt!8739) #b00000000000000000000000000000000))))

(declare-fun lt!9161 () Unit!522)

(assert (=> b!24281 (= lt!9161 (addStillContains!14 lt!9173 lt!9176 (zeroValue!1665 (_2!490 lt!8142)) lt!9171))))

(assert (=> b!24281 (contains!229 (+!44 lt!9173 (tuple2!973 lt!9176 (zeroValue!1665 (_2!490 lt!8142)))) lt!9171)))

(declare-fun lt!9162 () Unit!522)

(assert (=> b!24281 (= lt!9162 lt!9161)))

(declare-fun lt!9174 () ListLongMap!563)

(assert (=> b!24281 (= lt!9174 (getCurrentListMapNoExtraKeys!15 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9160 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9160 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9158 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9158 (select (arr!597 lt!8739) #b00000000000000000000000000000000))))

(declare-fun lt!9167 () Unit!522)

(assert (=> b!24281 (= lt!9167 (addApplyDifferent!14 lt!9174 lt!9160 (minValue!1665 (_2!490 lt!8142)) lt!9158))))

(assert (=> b!24281 (= (apply!29 (+!44 lt!9174 (tuple2!973 lt!9160 (minValue!1665 (_2!490 lt!8142)))) lt!9158) (apply!29 lt!9174 lt!9158))))

(declare-fun lt!9165 () Unit!522)

(assert (=> b!24281 (= lt!9165 lt!9167)))

(declare-fun lt!9163 () ListLongMap!563)

(assert (=> b!24281 (= lt!9163 (getCurrentListMapNoExtraKeys!15 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9178 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9178 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9170 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9170 (select (arr!597 lt!8739) #b00000000000000000000000000000000))))

(declare-fun lt!9159 () Unit!522)

(assert (=> b!24281 (= lt!9159 (addApplyDifferent!14 lt!9163 lt!9178 (zeroValue!1665 (_2!490 lt!8142)) lt!9170))))

(assert (=> b!24281 (= (apply!29 (+!44 lt!9163 (tuple2!973 lt!9178 (zeroValue!1665 (_2!490 lt!8142)))) lt!9170) (apply!29 lt!9163 lt!9170))))

(declare-fun lt!9172 () Unit!522)

(assert (=> b!24281 (= lt!9172 lt!9159)))

(declare-fun lt!9177 () ListLongMap!563)

(assert (=> b!24281 (= lt!9177 (getCurrentListMapNoExtraKeys!15 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9175 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9175 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9169 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9169 (select (arr!597 lt!8739) #b00000000000000000000000000000000))))

(assert (=> b!24281 (= lt!9157 (addApplyDifferent!14 lt!9177 lt!9175 (minValue!1665 (_2!490 lt!8142)) lt!9169))))

(assert (=> b!24281 (= (apply!29 (+!44 lt!9177 (tuple2!973 lt!9175 (minValue!1665 (_2!490 lt!8142)))) lt!9169) (apply!29 lt!9177 lt!9169))))

(declare-fun c!3238 () Bool)

(declare-fun bm!2106 () Bool)

(declare-fun call!2112 () ListLongMap!563)

(assert (=> bm!2106 (= call!2110 (+!44 (ite c!3238 call!2111 (ite c!3239 call!2106 call!2112)) (ite (or c!3238 c!3239) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun b!24282 () Bool)

(declare-fun Unit!569 () Unit!522)

(assert (=> b!24282 (= e!15711 Unit!569)))

(declare-fun b!24283 () Bool)

(declare-fun e!15713 () Bool)

(assert (=> b!24283 (= e!15720 e!15713)))

(declare-fun res!14827 () Bool)

(assert (=> b!24283 (= res!14827 call!2107)))

(assert (=> b!24283 (=> (not res!14827) (not e!15713))))

(declare-fun bm!2107 () Bool)

(assert (=> bm!2107 (= call!2112 call!2106)))

(declare-fun b!24284 () Bool)

(declare-fun res!14828 () Bool)

(assert (=> b!24284 (=> (not res!14828) (not e!15716))))

(declare-fun e!15714 () Bool)

(assert (=> b!24284 (= res!14828 e!15714)))

(declare-fun res!14824 () Bool)

(assert (=> b!24284 (=> res!14824 e!15714)))

(declare-fun e!15719 () Bool)

(assert (=> b!24284 (= res!14824 (not e!15719))))

(declare-fun res!14831 () Bool)

(assert (=> b!24284 (=> (not res!14831) (not e!15719))))

(assert (=> b!24284 (= res!14831 (bvslt #b00000000000000000000000000000000 (size!693 lt!8739)))))

(declare-fun b!24285 () Bool)

(declare-fun e!15712 () Bool)

(assert (=> b!24285 (= e!15714 e!15712)))

(declare-fun res!14825 () Bool)

(assert (=> b!24285 (=> (not res!14825) (not e!15712))))

(assert (=> b!24285 (= res!14825 (contains!229 lt!9168 (select (arr!597 lt!8739) #b00000000000000000000000000000000)))))

(assert (=> b!24285 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8739)))))

(declare-fun b!24286 () Bool)

(assert (=> b!24286 (= e!15719 (validKeyInArray!0 (select (arr!597 lt!8739) #b00000000000000000000000000000000)))))

(declare-fun b!24287 () Bool)

(declare-fun e!15722 () ListLongMap!563)

(assert (=> b!24287 (= e!15722 call!2108)))

(declare-fun b!24288 () Bool)

(assert (=> b!24288 (= e!15715 (+!44 call!2110 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))

(declare-fun d!4339 () Bool)

(assert (=> d!4339 e!15716))

(declare-fun res!14830 () Bool)

(assert (=> d!4339 (=> (not res!14830) (not e!15716))))

(assert (=> d!4339 (= res!14830 (or (bvsge #b00000000000000000000000000000000 (size!693 lt!8739)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8739)))))))

(declare-fun lt!9166 () ListLongMap!563)

(assert (=> d!4339 (= lt!9168 lt!9166)))

(declare-fun lt!9164 () Unit!522)

(assert (=> d!4339 (= lt!9164 e!15711)))

(declare-fun c!3236 () Bool)

(assert (=> d!4339 (= c!3236 e!15710)))

(declare-fun res!14832 () Bool)

(assert (=> d!4339 (=> (not res!14832) (not e!15710))))

(assert (=> d!4339 (= res!14832 (bvslt #b00000000000000000000000000000000 (size!693 lt!8739)))))

(assert (=> d!4339 (= lt!9166 e!15715)))

(assert (=> d!4339 (= c!3238 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4339 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4339 (= (getCurrentListMap!127 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!9168)))

(declare-fun b!24278 () Bool)

(assert (=> b!24278 (= e!15712 (= (apply!29 lt!9168 (select (arr!597 lt!8739) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8724) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24278 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8724)))))

(assert (=> b!24278 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8739)))))

(declare-fun bm!2108 () Bool)

(assert (=> bm!2108 (= call!2109 (contains!229 lt!9168 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24289 () Bool)

(declare-fun res!14826 () Bool)

(assert (=> b!24289 (=> (not res!14826) (not e!15716))))

(assert (=> b!24289 (= res!14826 e!15720)))

(declare-fun c!3235 () Bool)

(assert (=> b!24289 (= c!3235 (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24290 () Bool)

(assert (=> b!24290 (= e!15713 (= (apply!29 lt!9168 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!490 lt!8142))))))

(declare-fun b!24291 () Bool)

(assert (=> b!24291 (= e!15722 call!2112)))

(declare-fun b!24292 () Bool)

(declare-fun c!3237 () Bool)

(assert (=> b!24292 (= c!3237 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8142)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24292 (= e!15718 e!15722)))

(declare-fun bm!2109 () Bool)

(assert (=> bm!2109 (= call!2107 (contains!229 lt!9168 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4339 c!3238) b!24288))

(assert (= (and d!4339 (not c!3238)) b!24275))

(assert (= (and b!24275 c!3239) b!24272))

(assert (= (and b!24275 (not c!3239)) b!24292))

(assert (= (and b!24292 c!3237) b!24287))

(assert (= (and b!24292 (not c!3237)) b!24291))

(assert (= (or b!24287 b!24291) bm!2107))

(assert (= (or b!24272 bm!2107) bm!2105))

(assert (= (or b!24272 b!24287) bm!2104))

(assert (= (or b!24288 bm!2105) bm!2103))

(assert (= (or b!24288 bm!2104) bm!2106))

(assert (= (and d!4339 res!14832) b!24274))

(assert (= (and d!4339 c!3236) b!24281))

(assert (= (and d!4339 (not c!3236)) b!24282))

(assert (= (and d!4339 res!14830) b!24284))

(assert (= (and b!24284 res!14831) b!24286))

(assert (= (and b!24284 (not res!14824)) b!24285))

(assert (= (and b!24285 res!14825) b!24278))

(assert (= (and b!24284 res!14828) b!24289))

(assert (= (and b!24289 c!3235) b!24283))

(assert (= (and b!24289 (not c!3235)) b!24276))

(assert (= (and b!24283 res!14827) b!24290))

(assert (= (or b!24283 b!24276) bm!2109))

(assert (= (and b!24289 res!14826) b!24280))

(assert (= (and b!24280 c!3240) b!24277))

(assert (= (and b!24280 (not c!3240)) b!24279))

(assert (= (and b!24277 res!14829) b!24273))

(assert (= (or b!24277 b!24279) bm!2108))

(declare-fun b_lambda!1607 () Bool)

(assert (=> (not b_lambda!1607) (not b!24278)))

(assert (=> b!24278 t!3234))

(declare-fun b_and!1519 () Bool)

(assert (= b_and!1517 (and (=> t!3234 result!1095) b_and!1519)))

(declare-fun m!18647 () Bool)

(assert (=> b!24290 m!18647))

(declare-fun m!18649 () Bool)

(assert (=> bm!2106 m!18649))

(declare-fun m!18651 () Bool)

(assert (=> b!24278 m!18651))

(assert (=> b!24278 m!18651))

(assert (=> b!24278 m!17076))

(declare-fun m!18653 () Bool)

(assert (=> b!24278 m!18653))

(declare-fun m!18655 () Bool)

(assert (=> b!24278 m!18655))

(assert (=> b!24278 m!17076))

(assert (=> b!24278 m!18655))

(declare-fun m!18657 () Bool)

(assert (=> b!24278 m!18657))

(declare-fun m!18659 () Bool)

(assert (=> bm!2108 m!18659))

(assert (=> b!24286 m!18655))

(assert (=> b!24286 m!18655))

(declare-fun m!18661 () Bool)

(assert (=> b!24286 m!18661))

(declare-fun m!18663 () Bool)

(assert (=> bm!2103 m!18663))

(declare-fun m!18665 () Bool)

(assert (=> b!24281 m!18665))

(declare-fun m!18667 () Bool)

(assert (=> b!24281 m!18667))

(declare-fun m!18669 () Bool)

(assert (=> b!24281 m!18669))

(declare-fun m!18671 () Bool)

(assert (=> b!24281 m!18671))

(declare-fun m!18673 () Bool)

(assert (=> b!24281 m!18673))

(declare-fun m!18675 () Bool)

(assert (=> b!24281 m!18675))

(assert (=> b!24281 m!18665))

(declare-fun m!18677 () Bool)

(assert (=> b!24281 m!18677))

(declare-fun m!18679 () Bool)

(assert (=> b!24281 m!18679))

(declare-fun m!18681 () Bool)

(assert (=> b!24281 m!18681))

(declare-fun m!18683 () Bool)

(assert (=> b!24281 m!18683))

(declare-fun m!18685 () Bool)

(assert (=> b!24281 m!18685))

(assert (=> b!24281 m!18663))

(assert (=> b!24281 m!18655))

(declare-fun m!18687 () Bool)

(assert (=> b!24281 m!18687))

(assert (=> b!24281 m!18679))

(declare-fun m!18689 () Bool)

(assert (=> b!24281 m!18689))

(declare-fun m!18691 () Bool)

(assert (=> b!24281 m!18691))

(assert (=> b!24281 m!18669))

(assert (=> b!24281 m!18675))

(declare-fun m!18693 () Bool)

(assert (=> b!24281 m!18693))

(assert (=> b!24285 m!18655))

(assert (=> b!24285 m!18655))

(declare-fun m!18695 () Bool)

(assert (=> b!24285 m!18695))

(declare-fun m!18697 () Bool)

(assert (=> b!24273 m!18697))

(declare-fun m!18699 () Bool)

(assert (=> b!24288 m!18699))

(declare-fun m!18701 () Bool)

(assert (=> bm!2109 m!18701))

(assert (=> d!4339 m!16902))

(assert (=> b!24274 m!18655))

(assert (=> b!24274 m!18655))

(assert (=> b!24274 m!18661))

(assert (=> d!4063 d!4339))

(declare-fun d!4341 () Bool)

(assert (=> d!4341 (arrayContainsKey!0 lt!8729 #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun lt!9179 () Unit!522)

(assert (=> d!4341 (= lt!9179 (choose!13 lt!8729 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))))))

(assert (=> d!4341 (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000000)))

(assert (=> d!4341 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8729 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))) lt!9179)))

(declare-fun bs!989 () Bool)

(assert (= bs!989 d!4341))

(assert (=> bs!989 m!17487))

(declare-fun m!18703 () Bool)

(assert (=> bs!989 m!18703))

(assert (=> d!4063 d!4341))

(declare-fun b!24293 () Bool)

(declare-fun e!15723 () Bool)

(declare-fun e!15724 () Bool)

(assert (=> b!24293 (= e!15723 e!15724)))

(declare-fun lt!9182 () (_ BitVec 64))

(assert (=> b!24293 (= lt!9182 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000))))

(declare-fun lt!9180 () Unit!522)

(assert (=> b!24293 (= lt!9180 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) lt!9182 #b00000000000000000000000000000000))))

(assert (=> b!24293 (arrayContainsKey!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) lt!9182 #b00000000000000000000000000000000)))

(declare-fun lt!9181 () Unit!522)

(assert (=> b!24293 (= lt!9181 lt!9180)))

(declare-fun res!14833 () Bool)

(assert (=> b!24293 (= res!14833 (= (seekEntryOrOpen!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000) (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142))) (Found!54 #b00000000000000000000000000000000)))))

(assert (=> b!24293 (=> (not res!14833) (not e!15724))))

(declare-fun b!24294 () Bool)

(declare-fun call!2113 () Bool)

(assert (=> b!24294 (= e!15724 call!2113)))

(declare-fun bm!2110 () Bool)

(assert (=> bm!2110 (= call!2113 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142))))))

(declare-fun d!4343 () Bool)

(declare-fun res!14834 () Bool)

(declare-fun e!15725 () Bool)

(assert (=> d!4343 (=> res!14834 e!15725)))

(assert (=> d!4343 (= res!14834 (bvsge #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(assert (=> d!4343 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) (mask!4729 (_2!490 lt!8142))) e!15725)))

(declare-fun b!24295 () Bool)

(assert (=> b!24295 (= e!15723 call!2113)))

(declare-fun b!24296 () Bool)

(assert (=> b!24296 (= e!15725 e!15723)))

(declare-fun c!3241 () Bool)

(assert (=> b!24296 (= c!3241 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142))))) #b00000000000000000000000000000000)))))

(assert (= (and d!4343 (not res!14834)) b!24296))

(assert (= (and b!24296 c!3241) b!24293))

(assert (= (and b!24296 (not c!3241)) b!24295))

(assert (= (and b!24293 res!14833) b!24294))

(assert (= (or b!24294 b!24295) bm!2110))

(assert (=> b!24293 m!18563))

(declare-fun m!18705 () Bool)

(assert (=> b!24293 m!18705))

(declare-fun m!18707 () Bool)

(assert (=> b!24293 m!18707))

(assert (=> b!24293 m!18563))

(declare-fun m!18709 () Bool)

(assert (=> b!24293 m!18709))

(declare-fun m!18711 () Bool)

(assert (=> bm!2110 m!18711))

(assert (=> b!24296 m!18563))

(assert (=> b!24296 m!18563))

(assert (=> b!24296 m!18565))

(assert (=> d!4063 d!4343))

(declare-fun d!4345 () Bool)

(declare-fun e!15726 () Bool)

(assert (=> d!4345 e!15726))

(declare-fun res!14835 () Bool)

(assert (=> d!4345 (=> (not res!14835) (not e!15726))))

(assert (=> d!4345 (= res!14835 (and (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000000) (bvslt (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (size!693 lt!8739))))))

(declare-fun lt!9183 () Unit!522)

(assert (=> d!4345 (= lt!9183 (choose!208 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4345 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4345 (= (lemmaValidKeyInArrayIsInListMap!10 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (defaultEntry!1742 (_2!490 lt!8142))) lt!9183)))

(declare-fun b!24297 () Bool)

(assert (=> b!24297 (= e!15726 (contains!229 (getCurrentListMap!127 lt!8739 lt!8724 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (select (arr!597 lt!8739) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)))))))

(assert (= (and d!4345 res!14835) b!24297))

(declare-fun m!18713 () Bool)

(assert (=> d!4345 m!18713))

(assert (=> d!4345 m!16902))

(assert (=> b!24297 m!17467))

(declare-fun m!18715 () Bool)

(assert (=> b!24297 m!18715))

(assert (=> b!24297 m!17467))

(assert (=> b!24297 m!18715))

(declare-fun m!18717 () Bool)

(assert (=> b!24297 m!18717))

(assert (=> d!4063 d!4345))

(declare-fun e!15727 () Bool)

(declare-fun b!24301 () Bool)

(assert (=> b!24301 (= e!15727 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!490 lt!8142)))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (bvadd (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8142)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) #b00000000000000000000000000000001)))))

(declare-fun b!24299 () Bool)

(declare-fun res!14837 () Bool)

(declare-fun e!15728 () Bool)

(assert (=> b!24299 (=> (not res!14837) (not e!15728))))

(assert (=> b!24299 (= res!14837 (validKeyInArray!0 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!4347 () Bool)

(assert (=> d!4347 e!15727))

(declare-fun res!14838 () Bool)

(assert (=> d!4347 (=> (not res!14838) (not e!15727))))

(assert (=> d!4347 (= res!14838 (and (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000000) (bvslt (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (size!693 (_keys!3163 (_2!490 lt!8142))))))))

(declare-fun lt!9184 () Unit!522)

(assert (=> d!4347 (= lt!9184 (choose!1 (_keys!3163 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4347 e!15728))

(declare-fun res!14836 () Bool)

(assert (=> d!4347 (=> (not res!14836) (not e!15728))))

(assert (=> d!4347 (= res!14836 (and (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000000) (bvslt (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (size!693 (_keys!3163 (_2!490 lt!8142))))))))

(assert (=> d!4347 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3163 (_2!490 lt!8142)) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b1000000000000000000000000000000000000000000000000000000000000000) lt!9184)))

(declare-fun b!24300 () Bool)

(assert (=> b!24300 (= e!15728 (bvslt (size!693 (_keys!3163 (_2!490 lt!8142))) #b01111111111111111111111111111111))))

(declare-fun b!24298 () Bool)

(declare-fun res!14839 () Bool)

(assert (=> b!24298 (=> (not res!14839) (not e!15728))))

(assert (=> b!24298 (= res!14839 (not (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))))))))

(assert (= (and d!4347 res!14836) b!24298))

(assert (= (and b!24298 res!14839) b!24299))

(assert (= (and b!24299 res!14837) b!24300))

(assert (= (and d!4347 res!14838) b!24301))

(assert (=> b!24301 m!17499))

(assert (=> b!24301 m!17491))

(assert (=> b!24301 m!17379))

(declare-fun m!18719 () Bool)

(assert (=> b!24299 m!18719))

(declare-fun m!18721 () Bool)

(assert (=> d!4347 m!18721))

(declare-fun m!18723 () Bool)

(assert (=> b!24298 m!18723))

(assert (=> b!24298 m!18723))

(declare-fun m!18725 () Bool)

(assert (=> b!24298 m!18725))

(assert (=> d!4063 d!4347))

(declare-fun d!4349 () Bool)

(declare-fun e!15730 () Bool)

(assert (=> d!4349 e!15730))

(declare-fun res!14840 () Bool)

(assert (=> d!4349 (=> res!14840 e!15730)))

(declare-fun lt!9186 () Bool)

(assert (=> d!4349 (= res!14840 (not lt!9186))))

(declare-fun lt!9187 () Bool)

(assert (=> d!4349 (= lt!9186 lt!9187)))

(declare-fun lt!9185 () Unit!522)

(declare-fun e!15729 () Unit!522)

(assert (=> d!4349 (= lt!9185 e!15729)))

(declare-fun c!3242 () Bool)

(assert (=> d!4349 (= c!3242 lt!9187)))

(assert (=> d!4349 (= lt!9187 (containsKey!25 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4349 (= (contains!229 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) #b1000000000000000000000000000000000000000000000000000000000000000) lt!9186)))

(declare-fun b!24302 () Bool)

(declare-fun lt!9188 () Unit!522)

(assert (=> b!24302 (= e!15729 lt!9188)))

(assert (=> b!24302 (= lt!9188 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24302 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24303 () Bool)

(declare-fun Unit!570 () Unit!522)

(assert (=> b!24303 (= e!15729 Unit!570)))

(declare-fun b!24304 () Bool)

(assert (=> b!24304 (= e!15730 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4349 c!3242) b!24302))

(assert (= (and d!4349 (not c!3242)) b!24303))

(assert (= (and d!4349 (not res!14840)) b!24304))

(declare-fun m!18727 () Bool)

(assert (=> d!4349 m!18727))

(declare-fun m!18729 () Bool)

(assert (=> b!24302 m!18729))

(declare-fun m!18731 () Bool)

(assert (=> b!24302 m!18731))

(assert (=> b!24302 m!18731))

(declare-fun m!18733 () Bool)

(assert (=> b!24302 m!18733))

(assert (=> b!24304 m!18731))

(assert (=> b!24304 m!18731))

(assert (=> b!24304 m!18733))

(assert (=> d!4063 d!4349))

(declare-fun d!4351 () Bool)

(assert (=> d!4351 (= (arrayCountValidKeys!0 lt!8748 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (bvadd (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!9189 () Unit!522)

(assert (=> d!4351 (= lt!9189 (choose!2 lt!8748 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))))))

(declare-fun e!15731 () Bool)

(assert (=> d!4351 e!15731))

(declare-fun res!14841 () Bool)

(assert (=> d!4351 (=> (not res!14841) (not e!15731))))

(assert (=> d!4351 (= res!14841 (and (bvsge (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) #b00000000000000000000000000000000) (bvslt (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)) (size!693 lt!8748))))))

(assert (=> d!4351 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!8748 (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356))) lt!9189)))

(declare-fun b!24305 () Bool)

(declare-fun res!14842 () Bool)

(assert (=> b!24305 (=> (not res!14842) (not e!15731))))

(assert (=> b!24305 (= res!14842 (validKeyInArray!0 (select (arr!597 lt!8748) (ite c!3010 (index!2340 lt!8356) (index!2337 lt!8356)))))))

(declare-fun b!24306 () Bool)

(assert (=> b!24306 (= e!15731 (bvslt (size!693 lt!8748) #b01111111111111111111111111111111))))

(assert (= (and d!4351 res!14841) b!24305))

(assert (= (and b!24305 res!14842) b!24306))

(assert (=> d!4351 m!17471))

(declare-fun m!18735 () Bool)

(assert (=> d!4351 m!18735))

(assert (=> b!24305 m!18641))

(assert (=> b!24305 m!18641))

(assert (=> b!24305 m!18643))

(assert (=> d!4063 d!4351))

(assert (=> b!23770 d!3971))

(declare-fun d!4353 () Bool)

(declare-fun e!15733 () Bool)

(assert (=> d!4353 e!15733))

(declare-fun res!14843 () Bool)

(assert (=> d!4353 (=> res!14843 e!15733)))

(declare-fun lt!9191 () Bool)

(assert (=> d!4353 (= res!14843 (not lt!9191))))

(declare-fun lt!9192 () Bool)

(assert (=> d!4353 (= lt!9191 lt!9192)))

(declare-fun lt!9190 () Unit!522)

(declare-fun e!15732 () Unit!522)

(assert (=> d!4353 (= lt!9190 e!15732)))

(declare-fun c!3243 () Bool)

(assert (=> d!4353 (= c!3243 lt!9192)))

(assert (=> d!4353 (= lt!9192 (containsKey!25 (toList!297 lt!8783) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4353 (= (contains!229 lt!8783 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) lt!9191)))

(declare-fun b!24307 () Bool)

(declare-fun lt!9193 () Unit!522)

(assert (=> b!24307 (= e!15732 lt!9193)))

(assert (=> b!24307 (= lt!9193 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8783) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> b!24307 (isDefined!23 (getValueByKey!61 (toList!297 lt!8783) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24308 () Bool)

(declare-fun Unit!571 () Unit!522)

(assert (=> b!24308 (= e!15732 Unit!571)))

(declare-fun b!24309 () Bool)

(assert (=> b!24309 (= e!15733 (isDefined!23 (getValueByKey!61 (toList!297 lt!8783) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4353 c!3243) b!24307))

(assert (= (and d!4353 (not c!3243)) b!24308))

(assert (= (and d!4353 (not res!14843)) b!24309))

(declare-fun m!18737 () Bool)

(assert (=> d!4353 m!18737))

(declare-fun m!18739 () Bool)

(assert (=> b!24307 m!18739))

(assert (=> b!24307 m!17593))

(assert (=> b!24307 m!17593))

(declare-fun m!18741 () Bool)

(assert (=> b!24307 m!18741))

(assert (=> b!24309 m!17593))

(assert (=> b!24309 m!17593))

(assert (=> b!24309 m!18741))

(assert (=> d!4081 d!4353))

(declare-fun b!24312 () Bool)

(declare-fun e!15735 () Option!67)

(assert (=> b!24312 (= e!15735 (getValueByKey!61 (t!3229 lt!8781) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24310 () Bool)

(declare-fun e!15734 () Option!67)

(assert (=> b!24310 (= e!15734 (Some!66 (_2!495 (h!1126 lt!8781))))))

(declare-fun b!24313 () Bool)

(assert (=> b!24313 (= e!15735 None!65)))

(declare-fun d!4355 () Bool)

(declare-fun c!3244 () Bool)

(assert (=> d!4355 (= c!3244 (and ((_ is Cons!560) lt!8781) (= (_1!495 (h!1126 lt!8781)) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4355 (= (getValueByKey!61 lt!8781 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) e!15734)))

(declare-fun b!24311 () Bool)

(assert (=> b!24311 (= e!15734 e!15735)))

(declare-fun c!3245 () Bool)

(assert (=> b!24311 (= c!3245 (and ((_ is Cons!560) lt!8781) (not (= (_1!495 (h!1126 lt!8781)) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(assert (= (and d!4355 c!3244) b!24310))

(assert (= (and d!4355 (not c!3244)) b!24311))

(assert (= (and b!24311 c!3245) b!24312))

(assert (= (and b!24311 (not c!3245)) b!24313))

(declare-fun m!18743 () Bool)

(assert (=> b!24312 m!18743))

(assert (=> d!4081 d!4355))

(declare-fun d!4357 () Bool)

(assert (=> d!4357 (= (getValueByKey!61 lt!8781 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun lt!9196 () Unit!522)

(declare-fun choose!215 (List!564 (_ BitVec 64) V!1187) Unit!522)

(assert (=> d!4357 (= lt!9196 (choose!215 lt!8781 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun e!15738 () Bool)

(assert (=> d!4357 e!15738))

(declare-fun res!14848 () Bool)

(assert (=> d!4357 (=> (not res!14848) (not e!15738))))

(assert (=> d!4357 (= res!14848 (isStrictlySorted!158 lt!8781))))

(assert (=> d!4357 (= (lemmaContainsTupThenGetReturnValue!18 lt!8781 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) lt!9196)))

(declare-fun b!24318 () Bool)

(declare-fun res!14849 () Bool)

(assert (=> b!24318 (=> (not res!14849) (not e!15738))))

(assert (=> b!24318 (= res!14849 (containsKey!25 lt!8781 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24319 () Bool)

(assert (=> b!24319 (= e!15738 (contains!231 lt!8781 (tuple2!973 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4357 res!14848) b!24318))

(assert (= (and b!24318 res!14849) b!24319))

(assert (=> d!4357 m!17587))

(declare-fun m!18745 () Bool)

(assert (=> d!4357 m!18745))

(declare-fun m!18747 () Bool)

(assert (=> d!4357 m!18747))

(declare-fun m!18749 () Bool)

(assert (=> b!24318 m!18749))

(declare-fun m!18751 () Bool)

(assert (=> b!24319 m!18751))

(assert (=> d!4081 d!4357))

(declare-fun c!3254 () Bool)

(declare-fun b!24340 () Bool)

(assert (=> b!24340 (= c!3254 (and ((_ is Cons!560) (toList!297 call!1933)) (bvsgt (_1!495 (h!1126 (toList!297 call!1933))) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun e!15753 () List!564)

(declare-fun e!15750 () List!564)

(assert (=> b!24340 (= e!15753 e!15750)))

(declare-fun b!24341 () Bool)

(declare-fun e!15751 () List!564)

(declare-fun c!3256 () Bool)

(assert (=> b!24341 (= e!15751 (ite c!3256 (t!3229 (toList!297 call!1933)) (ite c!3254 (Cons!560 (h!1126 (toList!297 call!1933)) (t!3229 (toList!297 call!1933))) Nil!561)))))

(declare-fun b!24342 () Bool)

(assert (=> b!24342 (= e!15751 (insertStrictlySorted!18 (t!3229 (toList!297 call!1933)) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24343 () Bool)

(declare-fun call!2121 () List!564)

(assert (=> b!24343 (= e!15750 call!2121)))

(declare-fun call!2120 () List!564)

(declare-fun bm!2117 () Bool)

(declare-fun c!3257 () Bool)

(declare-fun $colon$colon!30 (List!564 tuple2!972) List!564)

(assert (=> bm!2117 (= call!2120 ($colon$colon!30 e!15751 (ite c!3257 (h!1126 (toList!297 call!1933)) (tuple2!973 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(declare-fun c!3255 () Bool)

(assert (=> bm!2117 (= c!3255 c!3257)))

(declare-fun e!15752 () Bool)

(declare-fun lt!9199 () List!564)

(declare-fun b!24344 () Bool)

(assert (=> b!24344 (= e!15752 (contains!231 lt!9199 (tuple2!973 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24345 () Bool)

(declare-fun call!2122 () List!564)

(assert (=> b!24345 (= e!15753 call!2122)))

(declare-fun b!24346 () Bool)

(declare-fun e!15749 () List!564)

(assert (=> b!24346 (= e!15749 e!15753)))

(assert (=> b!24346 (= c!3256 (and ((_ is Cons!560) (toList!297 call!1933)) (= (_1!495 (h!1126 (toList!297 call!1933))) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24347 () Bool)

(declare-fun res!14855 () Bool)

(assert (=> b!24347 (=> (not res!14855) (not e!15752))))

(assert (=> b!24347 (= res!14855 (containsKey!25 lt!9199 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun bm!2119 () Bool)

(assert (=> bm!2119 (= call!2122 call!2120)))

(declare-fun b!24348 () Bool)

(assert (=> b!24348 (= e!15750 call!2121)))

(declare-fun b!24349 () Bool)

(assert (=> b!24349 (= e!15749 call!2120)))

(declare-fun d!4359 () Bool)

(assert (=> d!4359 e!15752))

(declare-fun res!14854 () Bool)

(assert (=> d!4359 (=> (not res!14854) (not e!15752))))

(assert (=> d!4359 (= res!14854 (isStrictlySorted!158 lt!9199))))

(assert (=> d!4359 (= lt!9199 e!15749)))

(assert (=> d!4359 (= c!3257 (and ((_ is Cons!560) (toList!297 call!1933)) (bvslt (_1!495 (h!1126 (toList!297 call!1933))) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4359 (isStrictlySorted!158 (toList!297 call!1933))))

(assert (=> d!4359 (= (insertStrictlySorted!18 (toList!297 call!1933) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) lt!9199)))

(declare-fun bm!2118 () Bool)

(assert (=> bm!2118 (= call!2121 call!2122)))

(assert (= (and d!4359 c!3257) b!24349))

(assert (= (and d!4359 (not c!3257)) b!24346))

(assert (= (and b!24346 c!3256) b!24345))

(assert (= (and b!24346 (not c!3256)) b!24340))

(assert (= (and b!24340 c!3254) b!24343))

(assert (= (and b!24340 (not c!3254)) b!24348))

(assert (= (or b!24343 b!24348) bm!2118))

(assert (= (or b!24345 bm!2118) bm!2119))

(assert (= (or b!24349 bm!2119) bm!2117))

(assert (= (and bm!2117 c!3255) b!24342))

(assert (= (and bm!2117 (not c!3255)) b!24341))

(assert (= (and d!4359 res!14854) b!24347))

(assert (= (and b!24347 res!14855) b!24344))

(declare-fun m!18753 () Bool)

(assert (=> b!24347 m!18753))

(declare-fun m!18755 () Bool)

(assert (=> b!24344 m!18755))

(declare-fun m!18757 () Bool)

(assert (=> bm!2117 m!18757))

(declare-fun m!18759 () Bool)

(assert (=> b!24342 m!18759))

(declare-fun m!18761 () Bool)

(assert (=> d!4359 m!18761))

(declare-fun m!18763 () Bool)

(assert (=> d!4359 m!18763))

(assert (=> d!4081 d!4359))

(declare-fun d!4361 () Bool)

(declare-fun res!14856 () Bool)

(declare-fun e!15754 () Bool)

(assert (=> d!4361 (=> res!14856 e!15754)))

(assert (=> d!4361 (= res!14856 (and ((_ is Cons!560) (toList!297 e!15157)) (= (_1!495 (h!1126 (toList!297 e!15157))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4361 (= (containsKey!25 (toList!297 e!15157) #b1000000000000000000000000000000000000000000000000000000000000000) e!15754)))

(declare-fun b!24350 () Bool)

(declare-fun e!15755 () Bool)

(assert (=> b!24350 (= e!15754 e!15755)))

(declare-fun res!14857 () Bool)

(assert (=> b!24350 (=> (not res!14857) (not e!15755))))

(assert (=> b!24350 (= res!14857 (and (or (not ((_ is Cons!560) (toList!297 e!15157))) (bvsle (_1!495 (h!1126 (toList!297 e!15157))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!560) (toList!297 e!15157)) (bvslt (_1!495 (h!1126 (toList!297 e!15157))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24351 () Bool)

(assert (=> b!24351 (= e!15755 (containsKey!25 (t!3229 (toList!297 e!15157)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4361 (not res!14856)) b!24350))

(assert (= (and b!24350 res!14857) b!24351))

(declare-fun m!18765 () Bool)

(assert (=> b!24351 m!18765))

(assert (=> d!3969 d!4361))

(declare-fun d!4363 () Bool)

(assert (=> d!4363 (= (apply!29 lt!8672 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8672) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!990 () Bool)

(assert (= bs!990 d!4363))

(declare-fun m!18767 () Bool)

(assert (=> bs!990 m!18767))

(assert (=> bs!990 m!18767))

(declare-fun m!18769 () Bool)

(assert (=> bs!990 m!18769))

(assert (=> b!23692 d!4363))

(assert (=> d!4041 d!4145))

(declare-fun d!4365 () Bool)

(declare-fun e!15756 () Bool)

(assert (=> d!4365 e!15756))

(declare-fun res!14859 () Bool)

(assert (=> d!4365 (=> (not res!14859) (not e!15756))))

(declare-fun lt!9203 () ListLongMap!563)

(assert (=> d!4365 (= res!14859 (contains!229 lt!9203 (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun lt!9201 () List!564)

(assert (=> d!4365 (= lt!9203 (ListLongMap!564 lt!9201))))

(declare-fun lt!9200 () Unit!522)

(declare-fun lt!9202 () Unit!522)

(assert (=> d!4365 (= lt!9200 lt!9202)))

(assert (=> d!4365 (= (getValueByKey!61 lt!9201 (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4365 (= lt!9202 (lemmaContainsTupThenGetReturnValue!18 lt!9201 (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4365 (= lt!9201 (insertStrictlySorted!18 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4365 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9203)))

(declare-fun b!24352 () Bool)

(declare-fun res!14858 () Bool)

(assert (=> b!24352 (=> (not res!14858) (not e!15756))))

(assert (=> b!24352 (= res!14858 (= (getValueByKey!61 (toList!297 lt!9203) (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24353 () Bool)

(assert (=> b!24353 (= e!15756 (contains!231 (toList!297 lt!9203) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (= (and d!4365 res!14859) b!24352))

(assert (= (and b!24352 res!14858) b!24353))

(declare-fun m!18771 () Bool)

(assert (=> d!4365 m!18771))

(declare-fun m!18773 () Bool)

(assert (=> d!4365 m!18773))

(declare-fun m!18775 () Bool)

(assert (=> d!4365 m!18775))

(declare-fun m!18777 () Bool)

(assert (=> d!4365 m!18777))

(declare-fun m!18779 () Bool)

(assert (=> b!24352 m!18779))

(declare-fun m!18781 () Bool)

(assert (=> b!24353 m!18781))

(assert (=> d!3991 d!4365))

(assert (=> d!3991 d!4171))

(assert (=> d!3991 d!3977))

(declare-fun b!24354 () Bool)

(declare-fun e!15765 () ListLongMap!563)

(declare-fun call!2125 () ListLongMap!563)

(assert (=> b!24354 (= e!15765 call!2125)))

(declare-fun b!24355 () Bool)

(declare-fun e!15768 () Bool)

(declare-fun lt!9215 () ListLongMap!563)

(assert (=> b!24355 (= e!15768 (= (apply!29 lt!9215 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!24356 () Bool)

(declare-fun e!15757 () Bool)

(assert (=> b!24356 (= e!15757 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2120 () Bool)

(declare-fun call!2128 () ListLongMap!563)

(assert (=> bm!2120 (= call!2128 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8313 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!24357 () Bool)

(declare-fun e!15762 () ListLongMap!563)

(assert (=> b!24357 (= e!15762 e!15765)))

(declare-fun c!3262 () Bool)

(assert (=> b!24357 (= c!3262 (and (not (= (bvand lt!8313 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!8313 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24358 () Bool)

(declare-fun e!15767 () Bool)

(declare-fun call!2124 () Bool)

(assert (=> b!24358 (= e!15767 (not call!2124))))

(declare-fun b!24359 () Bool)

(declare-fun e!15764 () Bool)

(assert (=> b!24359 (= e!15764 e!15768)))

(declare-fun res!14865 () Bool)

(declare-fun call!2126 () Bool)

(assert (=> b!24359 (= res!14865 call!2126)))

(assert (=> b!24359 (=> (not res!14865) (not e!15768))))

(declare-fun bm!2121 () Bool)

(declare-fun call!2127 () ListLongMap!563)

(assert (=> bm!2121 (= call!2125 call!2127)))

(declare-fun b!24361 () Bool)

(assert (=> b!24361 (= e!15764 (not call!2126))))

(declare-fun bm!2122 () Bool)

(declare-fun call!2123 () ListLongMap!563)

(assert (=> bm!2122 (= call!2123 call!2128)))

(declare-fun b!24362 () Bool)

(declare-fun e!15763 () Bool)

(assert (=> b!24362 (= e!15763 e!15764)))

(declare-fun c!3263 () Bool)

(assert (=> b!24362 (= c!3263 (not (= (bvand lt!8313 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24363 () Bool)

(declare-fun e!15758 () Unit!522)

(declare-fun lt!9204 () Unit!522)

(assert (=> b!24363 (= e!15758 lt!9204)))

(declare-fun lt!9220 () ListLongMap!563)

(assert (=> b!24363 (= lt!9220 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8313 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9223 () (_ BitVec 64))

(assert (=> b!24363 (= lt!9223 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9218 () (_ BitVec 64))

(assert (=> b!24363 (= lt!9218 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9208 () Unit!522)

(assert (=> b!24363 (= lt!9208 (addStillContains!14 lt!9220 lt!9223 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) lt!9218))))

(assert (=> b!24363 (contains!229 (+!44 lt!9220 (tuple2!973 lt!9223 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9218)))

(declare-fun lt!9209 () Unit!522)

(assert (=> b!24363 (= lt!9209 lt!9208)))

(declare-fun lt!9221 () ListLongMap!563)

(assert (=> b!24363 (= lt!9221 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8313 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9207 () (_ BitVec 64))

(assert (=> b!24363 (= lt!9207 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9205 () (_ BitVec 64))

(assert (=> b!24363 (= lt!9205 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9214 () Unit!522)

(assert (=> b!24363 (= lt!9214 (addApplyDifferent!14 lt!9221 lt!9207 (minValue!1665 lt!8141) lt!9205))))

(assert (=> b!24363 (= (apply!29 (+!44 lt!9221 (tuple2!973 lt!9207 (minValue!1665 lt!8141))) lt!9205) (apply!29 lt!9221 lt!9205))))

(declare-fun lt!9212 () Unit!522)

(assert (=> b!24363 (= lt!9212 lt!9214)))

(declare-fun lt!9210 () ListLongMap!563)

(assert (=> b!24363 (= lt!9210 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8313 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9225 () (_ BitVec 64))

(assert (=> b!24363 (= lt!9225 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9217 () (_ BitVec 64))

(assert (=> b!24363 (= lt!9217 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9206 () Unit!522)

(assert (=> b!24363 (= lt!9206 (addApplyDifferent!14 lt!9210 lt!9225 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) lt!9217))))

(assert (=> b!24363 (= (apply!29 (+!44 lt!9210 (tuple2!973 lt!9225 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9217) (apply!29 lt!9210 lt!9217))))

(declare-fun lt!9219 () Unit!522)

(assert (=> b!24363 (= lt!9219 lt!9206)))

(declare-fun lt!9224 () ListLongMap!563)

(assert (=> b!24363 (= lt!9224 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8313 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9222 () (_ BitVec 64))

(assert (=> b!24363 (= lt!9222 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9216 () (_ BitVec 64))

(assert (=> b!24363 (= lt!9216 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24363 (= lt!9204 (addApplyDifferent!14 lt!9224 lt!9222 (minValue!1665 lt!8141) lt!9216))))

(assert (=> b!24363 (= (apply!29 (+!44 lt!9224 (tuple2!973 lt!9222 (minValue!1665 lt!8141))) lt!9216) (apply!29 lt!9224 lt!9216))))

(declare-fun bm!2123 () Bool)

(declare-fun c!3261 () Bool)

(declare-fun call!2129 () ListLongMap!563)

(assert (=> bm!2123 (= call!2127 (+!44 (ite c!3261 call!2128 (ite c!3262 call!2123 call!2129)) (ite (or c!3261 c!3262) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!24364 () Bool)

(declare-fun Unit!572 () Unit!522)

(assert (=> b!24364 (= e!15758 Unit!572)))

(declare-fun b!24365 () Bool)

(declare-fun e!15760 () Bool)

(assert (=> b!24365 (= e!15767 e!15760)))

(declare-fun res!14863 () Bool)

(assert (=> b!24365 (= res!14863 call!2124)))

(assert (=> b!24365 (=> (not res!14863) (not e!15760))))

(declare-fun bm!2124 () Bool)

(assert (=> bm!2124 (= call!2129 call!2123)))

(declare-fun b!24366 () Bool)

(declare-fun res!14864 () Bool)

(assert (=> b!24366 (=> (not res!14864) (not e!15763))))

(declare-fun e!15761 () Bool)

(assert (=> b!24366 (= res!14864 e!15761)))

(declare-fun res!14860 () Bool)

(assert (=> b!24366 (=> res!14860 e!15761)))

(declare-fun e!15766 () Bool)

(assert (=> b!24366 (= res!14860 (not e!15766))))

(declare-fun res!14867 () Bool)

(assert (=> b!24366 (=> (not res!14867) (not e!15766))))

(assert (=> b!24366 (= res!14867 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24367 () Bool)

(declare-fun e!15759 () Bool)

(assert (=> b!24367 (= e!15761 e!15759)))

(declare-fun res!14861 () Bool)

(assert (=> b!24367 (=> (not res!14861) (not e!15759))))

(assert (=> b!24367 (= res!14861 (contains!229 lt!9215 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24367 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24368 () Bool)

(assert (=> b!24368 (= e!15766 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24369 () Bool)

(declare-fun e!15769 () ListLongMap!563)

(assert (=> b!24369 (= e!15769 call!2125)))

(declare-fun b!24370 () Bool)

(assert (=> b!24370 (= e!15762 (+!44 call!2127 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun d!4367 () Bool)

(assert (=> d!4367 e!15763))

(declare-fun res!14866 () Bool)

(assert (=> d!4367 (=> (not res!14866) (not e!15763))))

(assert (=> d!4367 (= res!14866 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!9213 () ListLongMap!563)

(assert (=> d!4367 (= lt!9215 lt!9213)))

(declare-fun lt!9211 () Unit!522)

(assert (=> d!4367 (= lt!9211 e!15758)))

(declare-fun c!3259 () Bool)

(assert (=> d!4367 (= c!3259 e!15757)))

(declare-fun res!14868 () Bool)

(assert (=> d!4367 (=> (not res!14868) (not e!15757))))

(assert (=> d!4367 (= res!14868 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4367 (= lt!9213 e!15762)))

(assert (=> d!4367 (= c!3261 (and (not (= (bvand lt!8313 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8313 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4367 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4367 (= (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8313 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9215)))

(declare-fun b!24360 () Bool)

(assert (=> b!24360 (= e!15759 (= (apply!29 lt!9215 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24360 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8141))))))

(assert (=> b!24360 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!2125 () Bool)

(assert (=> bm!2125 (= call!2126 (contains!229 lt!9215 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24371 () Bool)

(declare-fun res!14862 () Bool)

(assert (=> b!24371 (=> (not res!14862) (not e!15763))))

(assert (=> b!24371 (= res!14862 e!15767)))

(declare-fun c!3258 () Bool)

(assert (=> b!24371 (= c!3258 (not (= (bvand lt!8313 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24372 () Bool)

(assert (=> b!24372 (= e!15760 (= (apply!29 lt!9215 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun b!24373 () Bool)

(assert (=> b!24373 (= e!15769 call!2129)))

(declare-fun b!24374 () Bool)

(declare-fun c!3260 () Bool)

(assert (=> b!24374 (= c!3260 (and (not (= (bvand lt!8313 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!8313 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24374 (= e!15765 e!15769)))

(declare-fun bm!2126 () Bool)

(assert (=> bm!2126 (= call!2124 (contains!229 lt!9215 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4367 c!3261) b!24370))

(assert (= (and d!4367 (not c!3261)) b!24357))

(assert (= (and b!24357 c!3262) b!24354))

(assert (= (and b!24357 (not c!3262)) b!24374))

(assert (= (and b!24374 c!3260) b!24369))

(assert (= (and b!24374 (not c!3260)) b!24373))

(assert (= (or b!24369 b!24373) bm!2124))

(assert (= (or b!24354 bm!2124) bm!2122))

(assert (= (or b!24354 b!24369) bm!2121))

(assert (= (or b!24370 bm!2122) bm!2120))

(assert (= (or b!24370 bm!2121) bm!2123))

(assert (= (and d!4367 res!14868) b!24356))

(assert (= (and d!4367 c!3259) b!24363))

(assert (= (and d!4367 (not c!3259)) b!24364))

(assert (= (and d!4367 res!14866) b!24366))

(assert (= (and b!24366 res!14867) b!24368))

(assert (= (and b!24366 (not res!14860)) b!24367))

(assert (= (and b!24367 res!14861) b!24360))

(assert (= (and b!24366 res!14864) b!24371))

(assert (= (and b!24371 c!3258) b!24365))

(assert (= (and b!24371 (not c!3258)) b!24358))

(assert (= (and b!24365 res!14863) b!24372))

(assert (= (or b!24365 b!24358) bm!2126))

(assert (= (and b!24371 res!14862) b!24362))

(assert (= (and b!24362 c!3263) b!24359))

(assert (= (and b!24362 (not c!3263)) b!24361))

(assert (= (and b!24359 res!14865) b!24355))

(assert (= (or b!24359 b!24361) bm!2125))

(declare-fun b_lambda!1609 () Bool)

(assert (=> (not b_lambda!1609) (not b!24360)))

(assert (=> b!24360 t!3232))

(declare-fun b_and!1521 () Bool)

(assert (= b_and!1519 (and (=> t!3232 result!1093) b_and!1521)))

(declare-fun m!18783 () Bool)

(assert (=> b!24372 m!18783))

(declare-fun m!18785 () Bool)

(assert (=> bm!2123 m!18785))

(assert (=> b!24360 m!16928))

(assert (=> b!24360 m!16928))

(assert (=> b!24360 m!16930))

(assert (=> b!24360 m!16932))

(assert (=> b!24360 m!16934))

(assert (=> b!24360 m!16930))

(assert (=> b!24360 m!16934))

(declare-fun m!18787 () Bool)

(assert (=> b!24360 m!18787))

(declare-fun m!18789 () Bool)

(assert (=> bm!2125 m!18789))

(assert (=> b!24368 m!16934))

(assert (=> b!24368 m!16934))

(assert (=> b!24368 m!16940))

(declare-fun m!18791 () Bool)

(assert (=> bm!2120 m!18791))

(declare-fun m!18793 () Bool)

(assert (=> b!24363 m!18793))

(declare-fun m!18795 () Bool)

(assert (=> b!24363 m!18795))

(declare-fun m!18797 () Bool)

(assert (=> b!24363 m!18797))

(declare-fun m!18799 () Bool)

(assert (=> b!24363 m!18799))

(declare-fun m!18801 () Bool)

(assert (=> b!24363 m!18801))

(declare-fun m!18803 () Bool)

(assert (=> b!24363 m!18803))

(assert (=> b!24363 m!18793))

(declare-fun m!18805 () Bool)

(assert (=> b!24363 m!18805))

(declare-fun m!18807 () Bool)

(assert (=> b!24363 m!18807))

(declare-fun m!18809 () Bool)

(assert (=> b!24363 m!18809))

(declare-fun m!18811 () Bool)

(assert (=> b!24363 m!18811))

(declare-fun m!18813 () Bool)

(assert (=> b!24363 m!18813))

(assert (=> b!24363 m!18791))

(assert (=> b!24363 m!16934))

(declare-fun m!18815 () Bool)

(assert (=> b!24363 m!18815))

(assert (=> b!24363 m!18807))

(declare-fun m!18817 () Bool)

(assert (=> b!24363 m!18817))

(declare-fun m!18819 () Bool)

(assert (=> b!24363 m!18819))

(assert (=> b!24363 m!18797))

(assert (=> b!24363 m!18803))

(declare-fun m!18821 () Bool)

(assert (=> b!24363 m!18821))

(assert (=> b!24367 m!16934))

(assert (=> b!24367 m!16934))

(declare-fun m!18823 () Bool)

(assert (=> b!24367 m!18823))

(declare-fun m!18825 () Bool)

(assert (=> b!24355 m!18825))

(declare-fun m!18827 () Bool)

(assert (=> b!24370 m!18827))

(declare-fun m!18829 () Bool)

(assert (=> bm!2126 m!18829))

(assert (=> d!4367 m!16908))

(assert (=> b!24356 m!16934))

(assert (=> b!24356 m!16934))

(assert (=> b!24356 m!16940))

(assert (=> d!3991 d!4367))

(declare-fun d!4369 () Bool)

(assert (=> d!4369 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8313 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> d!4369 true))

(declare-fun _$7!37 () Unit!522)

(assert (=> d!4369 (= (choose!206 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8313 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (defaultEntry!1742 lt!8141)) _$7!37)))

(declare-fun bs!991 () Bool)

(assert (= bs!991 d!4369))

(assert (=> bs!991 m!16784))

(assert (=> bs!991 m!16784))

(assert (=> bs!991 m!17130))

(assert (=> bs!991 m!17132))

(assert (=> d!3991 d!4369))

(assert (=> bm!1986 d!4017))

(declare-fun b!24375 () Bool)

(declare-fun e!15778 () ListLongMap!563)

(declare-fun call!2132 () ListLongMap!563)

(assert (=> b!24375 (= e!15778 call!2132)))

(declare-fun b!24376 () Bool)

(declare-fun e!15781 () Bool)

(declare-fun lt!9237 () ListLongMap!563)

(assert (=> b!24376 (= e!15781 (= (apply!29 lt!9237 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!490 lt!8334))))))

(declare-fun b!24377 () Bool)

(declare-fun e!15770 () Bool)

(assert (=> b!24377 (= e!15770 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)))))

(declare-fun bm!2127 () Bool)

(declare-fun call!2135 () ListLongMap!563)

(assert (=> bm!2127 (= call!2135 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8334)) (_values!1728 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334)) (extraKeys!1640 (_2!490 lt!8334)) (zeroValue!1665 (_2!490 lt!8334)) (minValue!1665 (_2!490 lt!8334)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8334))))))

(declare-fun b!24378 () Bool)

(declare-fun e!15775 () ListLongMap!563)

(assert (=> b!24378 (= e!15775 e!15778)))

(declare-fun c!3268 () Bool)

(assert (=> b!24378 (= c!3268 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24379 () Bool)

(declare-fun e!15780 () Bool)

(declare-fun call!2131 () Bool)

(assert (=> b!24379 (= e!15780 (not call!2131))))

(declare-fun b!24380 () Bool)

(declare-fun e!15777 () Bool)

(assert (=> b!24380 (= e!15777 e!15781)))

(declare-fun res!14874 () Bool)

(declare-fun call!2133 () Bool)

(assert (=> b!24380 (= res!14874 call!2133)))

(assert (=> b!24380 (=> (not res!14874) (not e!15781))))

(declare-fun bm!2128 () Bool)

(declare-fun call!2134 () ListLongMap!563)

(assert (=> bm!2128 (= call!2132 call!2134)))

(declare-fun b!24382 () Bool)

(assert (=> b!24382 (= e!15777 (not call!2133))))

(declare-fun bm!2129 () Bool)

(declare-fun call!2130 () ListLongMap!563)

(assert (=> bm!2129 (= call!2130 call!2135)))

(declare-fun b!24383 () Bool)

(declare-fun e!15776 () Bool)

(assert (=> b!24383 (= e!15776 e!15777)))

(declare-fun c!3269 () Bool)

(assert (=> b!24383 (= c!3269 (not (= (bvand (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24384 () Bool)

(declare-fun e!15771 () Unit!522)

(declare-fun lt!9226 () Unit!522)

(assert (=> b!24384 (= e!15771 lt!9226)))

(declare-fun lt!9242 () ListLongMap!563)

(assert (=> b!24384 (= lt!9242 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8334)) (_values!1728 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334)) (extraKeys!1640 (_2!490 lt!8334)) (zeroValue!1665 (_2!490 lt!8334)) (minValue!1665 (_2!490 lt!8334)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8334))))))

(declare-fun lt!9245 () (_ BitVec 64))

(assert (=> b!24384 (= lt!9245 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9240 () (_ BitVec 64))

(assert (=> b!24384 (= lt!9240 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000))))

(declare-fun lt!9230 () Unit!522)

(assert (=> b!24384 (= lt!9230 (addStillContains!14 lt!9242 lt!9245 (zeroValue!1665 (_2!490 lt!8334)) lt!9240))))

(assert (=> b!24384 (contains!229 (+!44 lt!9242 (tuple2!973 lt!9245 (zeroValue!1665 (_2!490 lt!8334)))) lt!9240)))

(declare-fun lt!9231 () Unit!522)

(assert (=> b!24384 (= lt!9231 lt!9230)))

(declare-fun lt!9243 () ListLongMap!563)

(assert (=> b!24384 (= lt!9243 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8334)) (_values!1728 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334)) (extraKeys!1640 (_2!490 lt!8334)) (zeroValue!1665 (_2!490 lt!8334)) (minValue!1665 (_2!490 lt!8334)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8334))))))

(declare-fun lt!9229 () (_ BitVec 64))

(assert (=> b!24384 (= lt!9229 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9227 () (_ BitVec 64))

(assert (=> b!24384 (= lt!9227 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000))))

(declare-fun lt!9236 () Unit!522)

(assert (=> b!24384 (= lt!9236 (addApplyDifferent!14 lt!9243 lt!9229 (minValue!1665 (_2!490 lt!8334)) lt!9227))))

(assert (=> b!24384 (= (apply!29 (+!44 lt!9243 (tuple2!973 lt!9229 (minValue!1665 (_2!490 lt!8334)))) lt!9227) (apply!29 lt!9243 lt!9227))))

(declare-fun lt!9234 () Unit!522)

(assert (=> b!24384 (= lt!9234 lt!9236)))

(declare-fun lt!9232 () ListLongMap!563)

(assert (=> b!24384 (= lt!9232 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8334)) (_values!1728 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334)) (extraKeys!1640 (_2!490 lt!8334)) (zeroValue!1665 (_2!490 lt!8334)) (minValue!1665 (_2!490 lt!8334)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8334))))))

(declare-fun lt!9247 () (_ BitVec 64))

(assert (=> b!24384 (= lt!9247 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9239 () (_ BitVec 64))

(assert (=> b!24384 (= lt!9239 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000))))

(declare-fun lt!9228 () Unit!522)

(assert (=> b!24384 (= lt!9228 (addApplyDifferent!14 lt!9232 lt!9247 (zeroValue!1665 (_2!490 lt!8334)) lt!9239))))

(assert (=> b!24384 (= (apply!29 (+!44 lt!9232 (tuple2!973 lt!9247 (zeroValue!1665 (_2!490 lt!8334)))) lt!9239) (apply!29 lt!9232 lt!9239))))

(declare-fun lt!9241 () Unit!522)

(assert (=> b!24384 (= lt!9241 lt!9228)))

(declare-fun lt!9246 () ListLongMap!563)

(assert (=> b!24384 (= lt!9246 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8334)) (_values!1728 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334)) (extraKeys!1640 (_2!490 lt!8334)) (zeroValue!1665 (_2!490 lt!8334)) (minValue!1665 (_2!490 lt!8334)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8334))))))

(declare-fun lt!9244 () (_ BitVec 64))

(assert (=> b!24384 (= lt!9244 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9238 () (_ BitVec 64))

(assert (=> b!24384 (= lt!9238 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000))))

(assert (=> b!24384 (= lt!9226 (addApplyDifferent!14 lt!9246 lt!9244 (minValue!1665 (_2!490 lt!8334)) lt!9238))))

(assert (=> b!24384 (= (apply!29 (+!44 lt!9246 (tuple2!973 lt!9244 (minValue!1665 (_2!490 lt!8334)))) lt!9238) (apply!29 lt!9246 lt!9238))))

(declare-fun call!2136 () ListLongMap!563)

(declare-fun bm!2130 () Bool)

(declare-fun c!3267 () Bool)

(assert (=> bm!2130 (= call!2134 (+!44 (ite c!3267 call!2135 (ite c!3268 call!2130 call!2136)) (ite (or c!3267 c!3268) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8334))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8334))))))))

(declare-fun b!24385 () Bool)

(declare-fun Unit!573 () Unit!522)

(assert (=> b!24385 (= e!15771 Unit!573)))

(declare-fun b!24386 () Bool)

(declare-fun e!15773 () Bool)

(assert (=> b!24386 (= e!15780 e!15773)))

(declare-fun res!14872 () Bool)

(assert (=> b!24386 (= res!14872 call!2131)))

(assert (=> b!24386 (=> (not res!14872) (not e!15773))))

(declare-fun bm!2131 () Bool)

(assert (=> bm!2131 (= call!2136 call!2130)))

(declare-fun b!24387 () Bool)

(declare-fun res!14873 () Bool)

(assert (=> b!24387 (=> (not res!14873) (not e!15776))))

(declare-fun e!15774 () Bool)

(assert (=> b!24387 (= res!14873 e!15774)))

(declare-fun res!14869 () Bool)

(assert (=> b!24387 (=> res!14869 e!15774)))

(declare-fun e!15779 () Bool)

(assert (=> b!24387 (= res!14869 (not e!15779))))

(declare-fun res!14876 () Bool)

(assert (=> b!24387 (=> (not res!14876) (not e!15779))))

(assert (=> b!24387 (= res!14876 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))))))

(declare-fun b!24388 () Bool)

(declare-fun e!15772 () Bool)

(assert (=> b!24388 (= e!15774 e!15772)))

(declare-fun res!14870 () Bool)

(assert (=> b!24388 (=> (not res!14870) (not e!15772))))

(assert (=> b!24388 (= res!14870 (contains!229 lt!9237 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)))))

(assert (=> b!24388 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))))))

(declare-fun b!24389 () Bool)

(assert (=> b!24389 (= e!15779 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)))))

(declare-fun b!24390 () Bool)

(declare-fun e!15782 () ListLongMap!563)

(assert (=> b!24390 (= e!15782 call!2132)))

(declare-fun b!24391 () Bool)

(assert (=> b!24391 (= e!15775 (+!44 call!2134 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8334)))))))

(declare-fun d!4371 () Bool)

(assert (=> d!4371 e!15776))

(declare-fun res!14875 () Bool)

(assert (=> d!4371 (=> (not res!14875) (not e!15776))))

(assert (=> d!4371 (= res!14875 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))))))))

(declare-fun lt!9235 () ListLongMap!563)

(assert (=> d!4371 (= lt!9237 lt!9235)))

(declare-fun lt!9233 () Unit!522)

(assert (=> d!4371 (= lt!9233 e!15771)))

(declare-fun c!3265 () Bool)

(assert (=> d!4371 (= c!3265 e!15770)))

(declare-fun res!14877 () Bool)

(assert (=> d!4371 (=> (not res!14877) (not e!15770))))

(assert (=> d!4371 (= res!14877 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))))))

(assert (=> d!4371 (= lt!9235 e!15775)))

(assert (=> d!4371 (= c!3267 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4371 (validMask!0 (mask!4729 (_2!490 lt!8334)))))

(assert (=> d!4371 (= (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8334)) (_values!1728 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334)) (extraKeys!1640 (_2!490 lt!8334)) (zeroValue!1665 (_2!490 lt!8334)) (minValue!1665 (_2!490 lt!8334)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8334))) lt!9237)))

(declare-fun b!24381 () Bool)

(assert (=> b!24381 (= e!15772 (= (apply!29 lt!9237 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!490 lt!8334))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8334)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24381 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!490 lt!8334)))))))

(assert (=> b!24381 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))))))

(declare-fun bm!2132 () Bool)

(assert (=> bm!2132 (= call!2133 (contains!229 lt!9237 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24392 () Bool)

(declare-fun res!14871 () Bool)

(assert (=> b!24392 (=> (not res!14871) (not e!15776))))

(assert (=> b!24392 (= res!14871 e!15780)))

(declare-fun c!3264 () Bool)

(assert (=> b!24392 (= c!3264 (not (= (bvand (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24393 () Bool)

(assert (=> b!24393 (= e!15773 (= (apply!29 lt!9237 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!490 lt!8334))))))

(declare-fun b!24394 () Bool)

(assert (=> b!24394 (= e!15782 call!2136)))

(declare-fun b!24395 () Bool)

(declare-fun c!3266 () Bool)

(assert (=> b!24395 (= c!3266 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24395 (= e!15778 e!15782)))

(declare-fun bm!2133 () Bool)

(assert (=> bm!2133 (= call!2131 (contains!229 lt!9237 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4371 c!3267) b!24391))

(assert (= (and d!4371 (not c!3267)) b!24378))

(assert (= (and b!24378 c!3268) b!24375))

(assert (= (and b!24378 (not c!3268)) b!24395))

(assert (= (and b!24395 c!3266) b!24390))

(assert (= (and b!24395 (not c!3266)) b!24394))

(assert (= (or b!24390 b!24394) bm!2131))

(assert (= (or b!24375 bm!2131) bm!2129))

(assert (= (or b!24375 b!24390) bm!2128))

(assert (= (or b!24391 bm!2129) bm!2127))

(assert (= (or b!24391 bm!2128) bm!2130))

(assert (= (and d!4371 res!14877) b!24377))

(assert (= (and d!4371 c!3265) b!24384))

(assert (= (and d!4371 (not c!3265)) b!24385))

(assert (= (and d!4371 res!14875) b!24387))

(assert (= (and b!24387 res!14876) b!24389))

(assert (= (and b!24387 (not res!14869)) b!24388))

(assert (= (and b!24388 res!14870) b!24381))

(assert (= (and b!24387 res!14873) b!24392))

(assert (= (and b!24392 c!3264) b!24386))

(assert (= (and b!24392 (not c!3264)) b!24379))

(assert (= (and b!24386 res!14872) b!24393))

(assert (= (or b!24386 b!24379) bm!2133))

(assert (= (and b!24392 res!14871) b!24383))

(assert (= (and b!24383 c!3269) b!24380))

(assert (= (and b!24383 (not c!3269)) b!24382))

(assert (= (and b!24380 res!14874) b!24376))

(assert (= (or b!24380 b!24382) bm!2132))

(declare-fun b_lambda!1611 () Bool)

(assert (=> (not b_lambda!1611) (not b!24381)))

(declare-fun tb!661 () Bool)

(declare-fun t!3240 () Bool)

(assert (=> (and b!23087 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8334))) t!3240) tb!661))

(declare-fun result!1101 () Bool)

(assert (=> tb!661 (= result!1101 tp_is_empty!1021)))

(assert (=> b!24381 t!3240))

(declare-fun b_and!1523 () Bool)

(assert (= b_and!1521 (and (=> t!3240 result!1101) b_and!1523)))

(declare-fun m!18831 () Bool)

(assert (=> b!24393 m!18831))

(declare-fun m!18833 () Bool)

(assert (=> bm!2130 m!18833))

(declare-fun m!18835 () Bool)

(assert (=> b!24381 m!18835))

(assert (=> b!24381 m!18835))

(declare-fun m!18837 () Bool)

(assert (=> b!24381 m!18837))

(declare-fun m!18839 () Bool)

(assert (=> b!24381 m!18839))

(declare-fun m!18841 () Bool)

(assert (=> b!24381 m!18841))

(assert (=> b!24381 m!18837))

(assert (=> b!24381 m!18841))

(declare-fun m!18843 () Bool)

(assert (=> b!24381 m!18843))

(declare-fun m!18845 () Bool)

(assert (=> bm!2132 m!18845))

(assert (=> b!24389 m!18841))

(assert (=> b!24389 m!18841))

(declare-fun m!18847 () Bool)

(assert (=> b!24389 m!18847))

(declare-fun m!18849 () Bool)

(assert (=> bm!2127 m!18849))

(declare-fun m!18851 () Bool)

(assert (=> b!24384 m!18851))

(declare-fun m!18853 () Bool)

(assert (=> b!24384 m!18853))

(declare-fun m!18855 () Bool)

(assert (=> b!24384 m!18855))

(declare-fun m!18857 () Bool)

(assert (=> b!24384 m!18857))

(declare-fun m!18859 () Bool)

(assert (=> b!24384 m!18859))

(declare-fun m!18861 () Bool)

(assert (=> b!24384 m!18861))

(assert (=> b!24384 m!18851))

(declare-fun m!18863 () Bool)

(assert (=> b!24384 m!18863))

(declare-fun m!18865 () Bool)

(assert (=> b!24384 m!18865))

(declare-fun m!18867 () Bool)

(assert (=> b!24384 m!18867))

(declare-fun m!18869 () Bool)

(assert (=> b!24384 m!18869))

(declare-fun m!18871 () Bool)

(assert (=> b!24384 m!18871))

(assert (=> b!24384 m!18849))

(assert (=> b!24384 m!18841))

(declare-fun m!18873 () Bool)

(assert (=> b!24384 m!18873))

(assert (=> b!24384 m!18865))

(declare-fun m!18875 () Bool)

(assert (=> b!24384 m!18875))

(declare-fun m!18877 () Bool)

(assert (=> b!24384 m!18877))

(assert (=> b!24384 m!18855))

(assert (=> b!24384 m!18861))

(declare-fun m!18879 () Bool)

(assert (=> b!24384 m!18879))

(assert (=> b!24388 m!18841))

(assert (=> b!24388 m!18841))

(declare-fun m!18881 () Bool)

(assert (=> b!24388 m!18881))

(declare-fun m!18883 () Bool)

(assert (=> b!24376 m!18883))

(declare-fun m!18885 () Bool)

(assert (=> b!24391 m!18885))

(declare-fun m!18887 () Bool)

(assert (=> bm!2133 m!18887))

(declare-fun m!18889 () Bool)

(assert (=> d!4371 m!18889))

(assert (=> b!24377 m!18841))

(assert (=> b!24377 m!18841))

(assert (=> b!24377 m!18847))

(assert (=> d!4065 d!4371))

(declare-fun d!4373 () Bool)

(declare-fun e!15783 () Bool)

(assert (=> d!4373 e!15783))

(declare-fun res!14879 () Bool)

(assert (=> d!4373 (=> (not res!14879) (not e!15783))))

(declare-fun lt!9251 () ListLongMap!563)

(assert (=> d!4373 (= res!14879 (contains!229 lt!9251 (_1!495 (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))))

(declare-fun lt!9249 () List!564)

(assert (=> d!4373 (= lt!9251 (ListLongMap!564 lt!9249))))

(declare-fun lt!9248 () Unit!522)

(declare-fun lt!9250 () Unit!522)

(assert (=> d!4373 (= lt!9248 lt!9250)))

(assert (=> d!4373 (= (getValueByKey!61 lt!9249 (_1!495 (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))) (Some!66 (_2!495 (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))))

(assert (=> d!4373 (= lt!9250 (lemmaContainsTupThenGetReturnValue!18 lt!9249 (_1!495 (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) (_2!495 (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))))

(assert (=> d!4373 (= lt!9249 (insertStrictlySorted!18 (toList!297 (ite c!3061 call!1997 (ite c!3062 call!1992 call!1998))) (_1!495 (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) (_2!495 (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))))

(assert (=> d!4373 (= (+!44 (ite c!3061 call!1997 (ite c!3062 call!1992 call!1998)) (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) lt!9251)))

(declare-fun b!24396 () Bool)

(declare-fun res!14878 () Bool)

(assert (=> b!24396 (=> (not res!14878) (not e!15783))))

(assert (=> b!24396 (= res!14878 (= (getValueByKey!61 (toList!297 lt!9251) (_1!495 (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))) (Some!66 (_2!495 (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))))

(declare-fun b!24397 () Bool)

(assert (=> b!24397 (= e!15783 (contains!231 (toList!297 lt!9251) (ite (or c!3061 c!3062) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (= (and d!4373 res!14879) b!24396))

(assert (= (and b!24396 res!14878) b!24397))

(declare-fun m!18891 () Bool)

(assert (=> d!4373 m!18891))

(declare-fun m!18893 () Bool)

(assert (=> d!4373 m!18893))

(declare-fun m!18895 () Bool)

(assert (=> d!4373 m!18895))

(declare-fun m!18897 () Bool)

(assert (=> d!4373 m!18897))

(declare-fun m!18899 () Bool)

(assert (=> b!24396 m!18899))

(declare-fun m!18901 () Bool)

(assert (=> b!24397 m!18901))

(assert (=> bm!1992 d!4373))

(declare-fun d!4375 () Bool)

(assert (=> d!4375 (isDefined!23 (getValueByKey!61 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun lt!9252 () Unit!522)

(assert (=> d!4375 (= lt!9252 (choose!212 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15784 () Bool)

(assert (=> d!4375 e!15784))

(declare-fun res!14880 () Bool)

(assert (=> d!4375 (=> (not res!14880) (not e!15784))))

(assert (=> d!4375 (= res!14880 (isStrictlySorted!158 (toList!297 call!1920)))))

(assert (=> d!4375 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!9252)))

(declare-fun b!24398 () Bool)

(assert (=> b!24398 (= e!15784 (containsKey!25 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4375 res!14880) b!24398))

(assert (=> d!4375 m!17617))

(assert (=> d!4375 m!17617))

(assert (=> d!4375 m!17619))

(declare-fun m!18903 () Bool)

(assert (=> d!4375 m!18903))

(declare-fun m!18905 () Bool)

(assert (=> d!4375 m!18905))

(assert (=> b!24398 m!17613))

(assert (=> b!23811 d!4375))

(declare-fun d!4377 () Bool)

(assert (=> d!4377 (= (isDefined!23 (getValueByKey!61 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))) (not (isEmpty!172 (getValueByKey!61 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bs!992 () Bool)

(assert (= bs!992 d!4377))

(assert (=> bs!992 m!17617))

(declare-fun m!18907 () Bool)

(assert (=> bs!992 m!18907))

(assert (=> b!23811 d!4377))

(declare-fun e!15786 () Option!67)

(declare-fun b!24401 () Bool)

(assert (=> b!24401 (= e!15786 (getValueByKey!61 (t!3229 (toList!297 call!1920)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24399 () Bool)

(declare-fun e!15785 () Option!67)

(assert (=> b!24399 (= e!15785 (Some!66 (_2!495 (h!1126 (toList!297 call!1920)))))))

(declare-fun b!24402 () Bool)

(assert (=> b!24402 (= e!15786 None!65)))

(declare-fun d!4379 () Bool)

(declare-fun c!3270 () Bool)

(assert (=> d!4379 (= c!3270 (and ((_ is Cons!560) (toList!297 call!1920)) (= (_1!495 (h!1126 (toList!297 call!1920))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4379 (= (getValueByKey!61 (toList!297 call!1920) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) e!15785)))

(declare-fun b!24400 () Bool)

(assert (=> b!24400 (= e!15785 e!15786)))

(declare-fun c!3271 () Bool)

(assert (=> b!24400 (= c!3271 (and ((_ is Cons!560) (toList!297 call!1920)) (not (= (_1!495 (h!1126 (toList!297 call!1920))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!4379 c!3270) b!24399))

(assert (= (and d!4379 (not c!3270)) b!24400))

(assert (= (and b!24400 c!3271) b!24401))

(assert (= (and b!24400 (not c!3271)) b!24402))

(declare-fun m!18909 () Bool)

(assert (=> b!24401 m!18909))

(assert (=> b!23811 d!4379))

(declare-fun d!4381 () Bool)

(assert (=> d!4381 (= (map!408 (_2!490 lt!8736)) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8736)) (_values!1728 (_2!490 lt!8736)) (mask!4729 (_2!490 lt!8736)) (extraKeys!1640 (_2!490 lt!8736)) (zeroValue!1665 (_2!490 lt!8736)) (minValue!1665 (_2!490 lt!8736)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8736))))))

(declare-fun bs!993 () Bool)

(assert (= bs!993 d!4381))

(declare-fun m!18911 () Bool)

(assert (=> bs!993 m!18911))

(assert (=> b!23774 d!4381))

(declare-fun d!4383 () Bool)

(declare-fun e!15787 () Bool)

(assert (=> d!4383 e!15787))

(declare-fun res!14882 () Bool)

(assert (=> d!4383 (=> (not res!14882) (not e!15787))))

(declare-fun lt!9256 () ListLongMap!563)

(assert (=> d!4383 (= res!14882 (contains!229 lt!9256 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun lt!9254 () List!564)

(assert (=> d!4383 (= lt!9256 (ListLongMap!564 lt!9254))))

(declare-fun lt!9253 () Unit!522)

(declare-fun lt!9255 () Unit!522)

(assert (=> d!4383 (= lt!9253 lt!9255)))

(assert (=> d!4383 (= (getValueByKey!61 lt!9254 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4383 (= lt!9255 (lemmaContainsTupThenGetReturnValue!18 lt!9254 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4383 (= lt!9254 (insertStrictlySorted!18 (toList!297 (map!408 (_2!490 lt!8142))) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4383 (= (+!44 (map!408 (_2!490 lt!8142)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!9256)))

(declare-fun b!24403 () Bool)

(declare-fun res!14881 () Bool)

(assert (=> b!24403 (=> (not res!14881) (not e!15787))))

(assert (=> b!24403 (= res!14881 (= (getValueByKey!61 (toList!297 lt!9256) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24404 () Bool)

(assert (=> b!24404 (= e!15787 (contains!231 (toList!297 lt!9256) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(assert (= (and d!4383 res!14882) b!24403))

(assert (= (and b!24403 res!14881) b!24404))

(declare-fun m!18913 () Bool)

(assert (=> d!4383 m!18913))

(declare-fun m!18915 () Bool)

(assert (=> d!4383 m!18915))

(declare-fun m!18917 () Bool)

(assert (=> d!4383 m!18917))

(declare-fun m!18919 () Bool)

(assert (=> d!4383 m!18919))

(declare-fun m!18921 () Bool)

(assert (=> b!24403 m!18921))

(declare-fun m!18923 () Bool)

(assert (=> b!24404 m!18923))

(assert (=> b!23774 d!4383))

(assert (=> b!23774 d!4079))

(declare-fun d!4385 () Bool)

(declare-fun res!14883 () Bool)

(declare-fun e!15788 () Bool)

(assert (=> d!4385 (=> (not res!14883) (not e!15788))))

(assert (=> d!4385 (= res!14883 (simpleValid!20 (_2!490 lt!8533)))))

(assert (=> d!4385 (= (valid!121 (_2!490 lt!8533)) e!15788)))

(declare-fun b!24405 () Bool)

(declare-fun res!14884 () Bool)

(assert (=> b!24405 (=> (not res!14884) (not e!15788))))

(assert (=> b!24405 (= res!14884 (= (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8533)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8533)))) (_size!149 (_2!490 lt!8533))))))

(declare-fun b!24406 () Bool)

(declare-fun res!14885 () Bool)

(assert (=> b!24406 (=> (not res!14885) (not e!15788))))

(assert (=> b!24406 (= res!14885 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!490 lt!8533)) (mask!4729 (_2!490 lt!8533))))))

(declare-fun b!24407 () Bool)

(assert (=> b!24407 (= e!15788 (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8533)) #b00000000000000000000000000000000 Nil!562))))

(assert (= (and d!4385 res!14883) b!24405))

(assert (= (and b!24405 res!14884) b!24406))

(assert (= (and b!24406 res!14885) b!24407))

(declare-fun m!18925 () Bool)

(assert (=> d!4385 m!18925))

(declare-fun m!18927 () Bool)

(assert (=> b!24405 m!18927))

(declare-fun m!18929 () Bool)

(assert (=> b!24406 m!18929))

(declare-fun m!18931 () Bool)

(assert (=> b!24407 m!18931))

(assert (=> b!23532 d!4385))

(declare-fun d!4387 () Bool)

(assert (=> d!4387 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))

(declare-fun lt!9257 () Unit!522)

(assert (=> d!4387 (= lt!9257 (choose!212 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))

(declare-fun e!15789 () Bool)

(assert (=> d!4387 e!15789))

(declare-fun res!14886 () Bool)

(assert (=> d!4387 (=> (not res!14886) (not e!15789))))

(assert (=> d!4387 (= res!14886 (isStrictlySorted!158 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))))

(assert (=> d!4387 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))) lt!9257)))

(declare-fun b!24408 () Bool)

(assert (=> b!24408 (= e!15789 (containsKey!25 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))

(assert (= (and d!4387 res!14886) b!24408))

(assert (=> d!4387 m!16794))

(assert (=> d!4387 m!17517))

(assert (=> d!4387 m!17517))

(assert (=> d!4387 m!17519))

(assert (=> d!4387 m!16794))

(declare-fun m!18933 () Bool)

(assert (=> d!4387 m!18933))

(declare-fun m!18935 () Bool)

(assert (=> d!4387 m!18935))

(assert (=> b!24408 m!16794))

(assert (=> b!24408 m!17513))

(assert (=> b!23779 d!4387))

(assert (=> b!23779 d!4137))

(assert (=> b!23779 d!4139))

(declare-fun d!4389 () Bool)

(declare-fun e!15791 () Bool)

(assert (=> d!4389 e!15791))

(declare-fun res!14887 () Bool)

(assert (=> d!4389 (=> res!14887 e!15791)))

(declare-fun lt!9259 () Bool)

(assert (=> d!4389 (= res!14887 (not lt!9259))))

(declare-fun lt!9260 () Bool)

(assert (=> d!4389 (= lt!9259 lt!9260)))

(declare-fun lt!9258 () Unit!522)

(declare-fun e!15790 () Unit!522)

(assert (=> d!4389 (= lt!9258 e!15790)))

(declare-fun c!3272 () Bool)

(assert (=> d!4389 (= c!3272 lt!9260)))

(assert (=> d!4389 (= lt!9260 (containsKey!25 (toList!297 lt!8642) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4389 (= (contains!229 lt!8642 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9259)))

(declare-fun b!24409 () Bool)

(declare-fun lt!9261 () Unit!522)

(assert (=> b!24409 (= e!15790 lt!9261)))

(assert (=> b!24409 (= lt!9261 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8642) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24409 (isDefined!23 (getValueByKey!61 (toList!297 lt!8642) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24410 () Bool)

(declare-fun Unit!574 () Unit!522)

(assert (=> b!24410 (= e!15790 Unit!574)))

(declare-fun b!24411 () Bool)

(assert (=> b!24411 (= e!15791 (isDefined!23 (getValueByKey!61 (toList!297 lt!8642) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4389 c!3272) b!24409))

(assert (= (and d!4389 (not c!3272)) b!24410))

(assert (= (and d!4389 (not res!14887)) b!24411))

(declare-fun m!18937 () Bool)

(assert (=> d!4389 m!18937))

(declare-fun m!18939 () Bool)

(assert (=> b!24409 m!18939))

(declare-fun m!18941 () Bool)

(assert (=> b!24409 m!18941))

(assert (=> b!24409 m!18941))

(declare-fun m!18943 () Bool)

(assert (=> b!24409 m!18943))

(assert (=> b!24411 m!18941))

(assert (=> b!24411 m!18941))

(assert (=> b!24411 m!18943))

(assert (=> bm!2017 d!4389))

(declare-fun d!4391 () Bool)

(assert (=> d!4391 (= (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (and (not (= (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23667 d!4391))

(declare-fun d!4393 () Bool)

(declare-fun e!15793 () Bool)

(assert (=> d!4393 e!15793))

(declare-fun res!14888 () Bool)

(assert (=> d!4393 (=> res!14888 e!15793)))

(declare-fun lt!9263 () Bool)

(assert (=> d!4393 (= res!14888 (not lt!9263))))

(declare-fun lt!9264 () Bool)

(assert (=> d!4393 (= lt!9263 lt!9264)))

(declare-fun lt!9262 () Unit!522)

(declare-fun e!15792 () Unit!522)

(assert (=> d!4393 (= lt!9262 e!15792)))

(declare-fun c!3273 () Bool)

(assert (=> d!4393 (= c!3273 lt!9264)))

(assert (=> d!4393 (= lt!9264 (containsKey!25 (toList!297 lt!8766) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4393 (= (contains!229 lt!8766 #b1000000000000000000000000000000000000000000000000000000000000000) lt!9263)))

(declare-fun b!24412 () Bool)

(declare-fun lt!9265 () Unit!522)

(assert (=> b!24412 (= e!15792 lt!9265)))

(assert (=> b!24412 (= lt!9265 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8766) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24412 (isDefined!23 (getValueByKey!61 (toList!297 lt!8766) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24413 () Bool)

(declare-fun Unit!575 () Unit!522)

(assert (=> b!24413 (= e!15792 Unit!575)))

(declare-fun b!24414 () Bool)

(assert (=> b!24414 (= e!15793 (isDefined!23 (getValueByKey!61 (toList!297 lt!8766) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4393 c!3273) b!24412))

(assert (= (and d!4393 (not c!3273)) b!24413))

(assert (= (and d!4393 (not res!14888)) b!24414))

(declare-fun m!18945 () Bool)

(assert (=> d!4393 m!18945))

(declare-fun m!18947 () Bool)

(assert (=> b!24412 m!18947))

(declare-fun m!18949 () Bool)

(assert (=> b!24412 m!18949))

(assert (=> b!24412 m!18949))

(declare-fun m!18951 () Bool)

(assert (=> b!24412 m!18951))

(assert (=> b!24414 m!18949))

(assert (=> b!24414 m!18949))

(assert (=> b!24414 m!18951))

(assert (=> bm!2041 d!4393))

(declare-fun lt!9266 () Bool)

(declare-fun d!4395 () Bool)

(assert (=> d!4395 (= lt!9266 (select (content!15 (toList!297 lt!8787)) (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun e!15794 () Bool)

(assert (=> d!4395 (= lt!9266 e!15794)))

(declare-fun res!14889 () Bool)

(assert (=> d!4395 (=> (not res!14889) (not e!15794))))

(assert (=> d!4395 (= res!14889 ((_ is Cons!560) (toList!297 lt!8787)))))

(assert (=> d!4395 (= (contains!231 (toList!297 lt!8787) (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) lt!9266)))

(declare-fun b!24415 () Bool)

(declare-fun e!15795 () Bool)

(assert (=> b!24415 (= e!15794 e!15795)))

(declare-fun res!14890 () Bool)

(assert (=> b!24415 (=> res!14890 e!15795)))

(assert (=> b!24415 (= res!14890 (= (h!1126 (toList!297 lt!8787)) (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24416 () Bool)

(assert (=> b!24416 (= e!15795 (contains!231 (t!3229 (toList!297 lt!8787)) (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (= (and d!4395 res!14889) b!24415))

(assert (= (and b!24415 (not res!14890)) b!24416))

(declare-fun m!18953 () Bool)

(assert (=> d!4395 m!18953))

(declare-fun m!18955 () Bool)

(assert (=> d!4395 m!18955))

(declare-fun m!18957 () Bool)

(assert (=> b!24416 m!18957))

(assert (=> b!23808 d!4395))

(declare-fun e!15799 () Bool)

(declare-fun b!24417 () Bool)

(assert (=> b!24417 (= e!15799 (contains!230 (ite c!3081 (Cons!561 (select (arr!597 lt!8241) lt!8240) lt!8233) lt!8233) (select (arr!597 lt!8241) (bvadd lt!8240 #b00000000000000000000000000000001))))))

(declare-fun call!2137 () Bool)

(declare-fun c!3274 () Bool)

(declare-fun bm!2134 () Bool)

(assert (=> bm!2134 (= call!2137 (arrayNoDuplicates!0 lt!8241 (bvadd lt!8240 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!3274 (Cons!561 (select (arr!597 lt!8241) (bvadd lt!8240 #b00000000000000000000000000000001)) (ite c!3081 (Cons!561 (select (arr!597 lt!8241) lt!8240) lt!8233) lt!8233)) (ite c!3081 (Cons!561 (select (arr!597 lt!8241) lt!8240) lt!8233) lt!8233))))))

(declare-fun b!24418 () Bool)

(declare-fun e!15798 () Bool)

(assert (=> b!24418 (= e!15798 call!2137)))

(declare-fun d!4397 () Bool)

(declare-fun res!14893 () Bool)

(declare-fun e!15797 () Bool)

(assert (=> d!4397 (=> res!14893 e!15797)))

(assert (=> d!4397 (= res!14893 (bvsge (bvadd lt!8240 #b00000000000000000000000000000001) (size!693 lt!8241)))))

(assert (=> d!4397 (= (arrayNoDuplicates!0 lt!8241 (bvadd lt!8240 #b00000000000000000000000000000001) (ite c!3081 (Cons!561 (select (arr!597 lt!8241) lt!8240) lt!8233) lt!8233)) e!15797)))

(declare-fun b!24419 () Bool)

(declare-fun e!15796 () Bool)

(assert (=> b!24419 (= e!15797 e!15796)))

(declare-fun res!14892 () Bool)

(assert (=> b!24419 (=> (not res!14892) (not e!15796))))

(assert (=> b!24419 (= res!14892 (not e!15799))))

(declare-fun res!14891 () Bool)

(assert (=> b!24419 (=> (not res!14891) (not e!15799))))

(assert (=> b!24419 (= res!14891 (validKeyInArray!0 (select (arr!597 lt!8241) (bvadd lt!8240 #b00000000000000000000000000000001))))))

(declare-fun b!24420 () Bool)

(assert (=> b!24420 (= e!15796 e!15798)))

(assert (=> b!24420 (= c!3274 (validKeyInArray!0 (select (arr!597 lt!8241) (bvadd lt!8240 #b00000000000000000000000000000001))))))

(declare-fun b!24421 () Bool)

(assert (=> b!24421 (= e!15798 call!2137)))

(assert (= (and d!4397 (not res!14893)) b!24419))

(assert (= (and b!24419 res!14891) b!24417))

(assert (= (and b!24419 res!14892) b!24420))

(assert (= (and b!24420 c!3274) b!24418))

(assert (= (and b!24420 (not c!3274)) b!24421))

(assert (= (or b!24418 b!24421) bm!2134))

(declare-fun m!18959 () Bool)

(assert (=> b!24417 m!18959))

(assert (=> b!24417 m!18959))

(declare-fun m!18961 () Bool)

(assert (=> b!24417 m!18961))

(assert (=> bm!2134 m!18959))

(declare-fun m!18963 () Bool)

(assert (=> bm!2134 m!18963))

(assert (=> b!24419 m!18959))

(assert (=> b!24419 m!18959))

(declare-fun m!18965 () Bool)

(assert (=> b!24419 m!18965))

(assert (=> b!24420 m!18959))

(assert (=> b!24420 m!18959))

(assert (=> b!24420 m!18965))

(assert (=> bm!2010 d!4397))

(declare-fun d!4399 () Bool)

(declare-fun lt!9267 () Bool)

(assert (=> d!4399 (= lt!9267 (select (content!15 (toList!297 lt!8656)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun e!15800 () Bool)

(assert (=> d!4399 (= lt!9267 e!15800)))

(declare-fun res!14894 () Bool)

(assert (=> d!4399 (=> (not res!14894) (not e!15800))))

(assert (=> d!4399 (= res!14894 ((_ is Cons!560) (toList!297 lt!8656)))))

(assert (=> d!4399 (= (contains!231 (toList!297 lt!8656) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!9267)))

(declare-fun b!24422 () Bool)

(declare-fun e!15801 () Bool)

(assert (=> b!24422 (= e!15800 e!15801)))

(declare-fun res!14895 () Bool)

(assert (=> b!24422 (=> res!14895 e!15801)))

(assert (=> b!24422 (= res!14895 (= (h!1126 (toList!297 lt!8656)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun b!24423 () Bool)

(assert (=> b!24423 (= e!15801 (contains!231 (t!3229 (toList!297 lt!8656)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(assert (= (and d!4399 res!14894) b!24422))

(assert (= (and b!24422 (not res!14895)) b!24423))

(declare-fun m!18967 () Bool)

(assert (=> d!4399 m!18967))

(declare-fun m!18969 () Bool)

(assert (=> d!4399 m!18969))

(declare-fun m!18971 () Bool)

(assert (=> b!24423 m!18971))

(assert (=> b!23687 d!4399))

(declare-fun e!15807 () Bool)

(declare-fun lt!9268 () ListLongMap!563)

(declare-fun b!24424 () Bool)

(assert (=> b!24424 (= e!15807 (= lt!9268 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!490 lt!8142)))))))

(declare-fun b!24426 () Bool)

(declare-fun e!15805 () Bool)

(declare-fun e!15802 () Bool)

(assert (=> b!24426 (= e!15805 e!15802)))

(assert (=> b!24426 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun res!14898 () Bool)

(assert (=> b!24426 (= res!14898 (contains!229 lt!9268 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24426 (=> (not res!14898) (not e!15802))))

(declare-fun b!24427 () Bool)

(declare-fun e!15803 () ListLongMap!563)

(declare-fun e!15806 () ListLongMap!563)

(assert (=> b!24427 (= e!15803 e!15806)))

(declare-fun c!3275 () Bool)

(assert (=> b!24427 (= c!3275 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24428 () Bool)

(assert (=> b!24428 (= e!15803 (ListLongMap!564 Nil!561))))

(declare-fun b!24429 () Bool)

(assert (=> b!24429 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> b!24429 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))))))))

(assert (=> b!24429 (= e!15802 (= (apply!29 lt!9268 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24430 () Bool)

(declare-fun call!2138 () ListLongMap!563)

(assert (=> b!24430 (= e!15806 call!2138)))

(declare-fun b!24431 () Bool)

(declare-fun res!14897 () Bool)

(declare-fun e!15808 () Bool)

(assert (=> b!24431 (=> (not res!14897) (not e!15808))))

(assert (=> b!24431 (= res!14897 (not (contains!229 lt!9268 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24432 () Bool)

(assert (=> b!24432 (= e!15807 (isEmpty!173 lt!9268))))

(declare-fun b!24433 () Bool)

(assert (=> b!24433 (= e!15805 e!15807)))

(declare-fun c!3277 () Bool)

(assert (=> b!24433 (= c!3277 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun bm!2135 () Bool)

(assert (=> bm!2135 (= call!2138 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!24425 () Bool)

(assert (=> b!24425 (= e!15808 e!15805)))

(declare-fun c!3276 () Bool)

(declare-fun e!15804 () Bool)

(assert (=> b!24425 (= c!3276 e!15804)))

(declare-fun res!14896 () Bool)

(assert (=> b!24425 (=> (not res!14896) (not e!15804))))

(assert (=> b!24425 (= res!14896 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun d!4401 () Bool)

(assert (=> d!4401 e!15808))

(declare-fun res!14899 () Bool)

(assert (=> d!4401 (=> (not res!14899) (not e!15808))))

(assert (=> d!4401 (= res!14899 (not (contains!229 lt!9268 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4401 (= lt!9268 e!15803)))

(declare-fun c!3278 () Bool)

(assert (=> d!4401 (= c!3278 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4401 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4401 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142))))) (mask!4729 (_2!490 lt!8142)) (ite c!3009 (ite c!3008 lt!8340 lt!8364) (extraKeys!1640 (_2!490 lt!8142))) (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!9268)))

(declare-fun b!24434 () Bool)

(declare-fun lt!9270 () Unit!522)

(declare-fun lt!9271 () Unit!522)

(assert (=> b!24434 (= lt!9270 lt!9271)))

(declare-fun lt!9272 () (_ BitVec 64))

(declare-fun lt!9273 () (_ BitVec 64))

(declare-fun lt!9269 () ListLongMap!563)

(declare-fun lt!9274 () V!1187)

(assert (=> b!24434 (not (contains!229 (+!44 lt!9269 (tuple2!973 lt!9273 lt!9274)) lt!9272))))

(assert (=> b!24434 (= lt!9271 (addStillNotContains!2 lt!9269 lt!9273 lt!9274 lt!9272))))

(assert (=> b!24434 (= lt!9272 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!24434 (= lt!9274 (get!390 (select (arr!596 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24434 (= lt!9273 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(assert (=> b!24434 (= lt!9269 call!2138)))

(assert (=> b!24434 (= e!15806 (+!44 call!2138 (tuple2!973 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000) (get!390 (select (arr!596 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!24435 () Bool)

(assert (=> b!24435 (= e!15804 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24435 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!4401 c!3278) b!24428))

(assert (= (and d!4401 (not c!3278)) b!24427))

(assert (= (and b!24427 c!3275) b!24434))

(assert (= (and b!24427 (not c!3275)) b!24430))

(assert (= (or b!24434 b!24430) bm!2135))

(assert (= (and d!4401 res!14899) b!24431))

(assert (= (and b!24431 res!14897) b!24425))

(assert (= (and b!24425 res!14896) b!24435))

(assert (= (and b!24425 c!3276) b!24426))

(assert (= (and b!24425 (not c!3276)) b!24433))

(assert (= (and b!24426 res!14898) b!24429))

(assert (= (and b!24433 c!3277) b!24424))

(assert (= (and b!24433 (not c!3277)) b!24432))

(declare-fun b_lambda!1613 () Bool)

(assert (=> (not b_lambda!1613) (not b!24429)))

(assert (=> b!24429 t!3234))

(declare-fun b_and!1525 () Bool)

(assert (= b_and!1523 (and (=> t!3234 result!1095) b_and!1525)))

(declare-fun b_lambda!1615 () Bool)

(assert (=> (not b_lambda!1615) (not b!24434)))

(assert (=> b!24434 t!3234))

(declare-fun b_and!1527 () Bool)

(assert (= b_and!1525 (and (=> t!3234 result!1095) b_and!1527)))

(declare-fun m!18973 () Bool)

(assert (=> b!24434 m!18973))

(declare-fun m!18975 () Bool)

(assert (=> b!24434 m!18975))

(declare-fun m!18977 () Bool)

(assert (=> b!24434 m!18977))

(assert (=> b!24434 m!17074))

(assert (=> b!24434 m!17076))

(assert (=> b!24434 m!17078))

(assert (=> b!24434 m!17076))

(assert (=> b!24434 m!17080))

(assert (=> b!24434 m!18973))

(declare-fun m!18979 () Bool)

(assert (=> b!24434 m!18979))

(assert (=> b!24434 m!17074))

(declare-fun m!18981 () Bool)

(assert (=> d!4401 m!18981))

(assert (=> d!4401 m!16902))

(assert (=> b!24426 m!17080))

(assert (=> b!24426 m!17080))

(declare-fun m!18983 () Bool)

(assert (=> b!24426 m!18983))

(declare-fun m!18985 () Bool)

(assert (=> bm!2135 m!18985))

(assert (=> b!24435 m!17080))

(assert (=> b!24435 m!17080))

(assert (=> b!24435 m!17086))

(declare-fun m!18987 () Bool)

(assert (=> b!24432 m!18987))

(assert (=> b!24427 m!17080))

(assert (=> b!24427 m!17080))

(assert (=> b!24427 m!17086))

(assert (=> b!24424 m!18985))

(declare-fun m!18989 () Bool)

(assert (=> b!24431 m!18989))

(assert (=> b!24429 m!17074))

(assert (=> b!24429 m!17076))

(assert (=> b!24429 m!17078))

(assert (=> b!24429 m!17076))

(assert (=> b!24429 m!17080))

(assert (=> b!24429 m!17074))

(assert (=> b!24429 m!17080))

(declare-fun m!18991 () Bool)

(assert (=> b!24429 m!18991))

(assert (=> bm!1989 d!4401))

(declare-fun e!15817 () SeekEntryResult!54)

(declare-fun b!24449 () Bool)

(assert (=> b!24449 (= e!15817 (seekKeyOrZeroReturnVacant!0 (bvadd (x!5576 lt!8389) #b00000000000000000000000000000001) (nextIndex!0 (index!2339 lt!8389) (bvadd (x!5576 lt!8389) #b00000000000000000000000000000001) (mask!4729 lt!8141)) (index!2339 lt!8389) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!24450 () Bool)

(declare-fun c!3287 () Bool)

(declare-fun lt!9280 () (_ BitVec 64))

(assert (=> b!24450 (= c!3287 (= lt!9280 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15815 () SeekEntryResult!54)

(assert (=> b!24450 (= e!15815 e!15817)))

(declare-fun b!24451 () Bool)

(assert (=> b!24451 (= e!15817 (MissingVacant!54 (index!2339 lt!8389)))))

(declare-fun b!24452 () Bool)

(assert (=> b!24452 (= e!15815 (Found!54 (index!2339 lt!8389)))))

(declare-fun b!24453 () Bool)

(declare-fun e!15816 () SeekEntryResult!54)

(assert (=> b!24453 (= e!15816 Undefined!54)))

(declare-fun b!24448 () Bool)

(assert (=> b!24448 (= e!15816 e!15815)))

(declare-fun c!3286 () Bool)

(assert (=> b!24448 (= c!3286 (= lt!9280 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun d!4403 () Bool)

(declare-fun lt!9279 () SeekEntryResult!54)

(assert (=> d!4403 (and (or ((_ is Undefined!54) lt!9279) (not ((_ is Found!54) lt!9279)) (and (bvsge (index!2338 lt!9279) #b00000000000000000000000000000000) (bvslt (index!2338 lt!9279) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!54) lt!9279) ((_ is Found!54) lt!9279) (not ((_ is MissingVacant!54) lt!9279)) (not (= (index!2340 lt!9279) (index!2339 lt!8389))) (and (bvsge (index!2340 lt!9279) #b00000000000000000000000000000000) (bvslt (index!2340 lt!9279) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!54) lt!9279) (ite ((_ is Found!54) lt!9279) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!9279)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (and ((_ is MissingVacant!54) lt!9279) (= (index!2340 lt!9279) (index!2339 lt!8389)) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2340 lt!9279)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!4403 (= lt!9279 e!15816)))

(declare-fun c!3285 () Bool)

(assert (=> d!4403 (= c!3285 (bvsge (x!5576 lt!8389) #b01111111111111111111111111111110))))

(assert (=> d!4403 (= lt!9280 (select (arr!597 (_keys!3163 lt!8141)) (index!2339 lt!8389)))))

(assert (=> d!4403 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4403 (= (seekKeyOrZeroReturnVacant!0 (x!5576 lt!8389) (index!2339 lt!8389) (index!2339 lt!8389) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)) lt!9279)))

(assert (= (and d!4403 c!3285) b!24453))

(assert (= (and d!4403 (not c!3285)) b!24448))

(assert (= (and b!24448 c!3286) b!24452))

(assert (= (and b!24448 (not c!3286)) b!24450))

(assert (= (and b!24450 c!3287) b!24451))

(assert (= (and b!24450 (not c!3287)) b!24449))

(declare-fun m!18993 () Bool)

(assert (=> b!24449 m!18993))

(assert (=> b!24449 m!18993))

(declare-fun m!18995 () Bool)

(assert (=> b!24449 m!18995))

(declare-fun m!18997 () Bool)

(assert (=> d!4403 m!18997))

(declare-fun m!18999 () Bool)

(assert (=> d!4403 m!18999))

(assert (=> d!4403 m!16920))

(assert (=> d!4403 m!16908))

(assert (=> b!23418 d!4403))

(declare-fun b!24454 () Bool)

(declare-fun e!15821 () Bool)

(assert (=> b!24454 (= e!15821 (contains!230 Nil!562 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun bm!2136 () Bool)

(declare-fun call!2139 () Bool)

(declare-fun c!3288 () Bool)

(assert (=> bm!2136 (= call!2139 (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8142)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3288 (Cons!561 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000) Nil!562) Nil!562)))))

(declare-fun b!24455 () Bool)

(declare-fun e!15820 () Bool)

(assert (=> b!24455 (= e!15820 call!2139)))

(declare-fun d!4405 () Bool)

(declare-fun res!14902 () Bool)

(declare-fun e!15819 () Bool)

(assert (=> d!4405 (=> res!14902 e!15819)))

(assert (=> d!4405 (= res!14902 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4405 (= (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8142)) #b00000000000000000000000000000000 Nil!562) e!15819)))

(declare-fun b!24456 () Bool)

(declare-fun e!15818 () Bool)

(assert (=> b!24456 (= e!15819 e!15818)))

(declare-fun res!14901 () Bool)

(assert (=> b!24456 (=> (not res!14901) (not e!15818))))

(assert (=> b!24456 (= res!14901 (not e!15821))))

(declare-fun res!14900 () Bool)

(assert (=> b!24456 (=> (not res!14900) (not e!15821))))

(assert (=> b!24456 (= res!14900 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24457 () Bool)

(assert (=> b!24457 (= e!15818 e!15820)))

(assert (=> b!24457 (= c!3288 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24458 () Bool)

(assert (=> b!24458 (= e!15820 call!2139)))

(assert (= (and d!4405 (not res!14902)) b!24456))

(assert (= (and b!24456 res!14900) b!24454))

(assert (= (and b!24456 res!14901) b!24457))

(assert (= (and b!24457 c!3288) b!24455))

(assert (= (and b!24457 (not c!3288)) b!24458))

(assert (= (or b!24455 b!24458) bm!2136))

(assert (=> b!24454 m!17080))

(assert (=> b!24454 m!17080))

(declare-fun m!19001 () Bool)

(assert (=> b!24454 m!19001))

(assert (=> bm!2136 m!17080))

(declare-fun m!19003 () Bool)

(assert (=> bm!2136 m!19003))

(assert (=> b!24456 m!17080))

(assert (=> b!24456 m!17080))

(assert (=> b!24456 m!17086))

(assert (=> b!24457 m!17080))

(assert (=> b!24457 m!17080))

(assert (=> b!24457 m!17086))

(assert (=> b!23723 d!4405))

(declare-fun b!24462 () Bool)

(declare-fun e!15822 () Bool)

(assert (=> b!24462 (= e!15822 (and (bvsge (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000011) (bvsge (_vacant!149 (_2!490 lt!8334)) #b00000000000000000000000000000000)))))

(declare-fun d!4407 () Bool)

(declare-fun res!14906 () Bool)

(assert (=> d!4407 (=> (not res!14906) (not e!15822))))

(assert (=> d!4407 (= res!14906 (validMask!0 (mask!4729 (_2!490 lt!8334))))))

(assert (=> d!4407 (= (simpleValid!20 (_2!490 lt!8334)) e!15822)))

(declare-fun b!24461 () Bool)

(declare-fun res!14904 () Bool)

(assert (=> b!24461 (=> (not res!14904) (not e!15822))))

(assert (=> b!24461 (= res!14904 (= (size!702 (_2!490 lt!8334)) (bvadd (_size!149 (_2!490 lt!8334)) (bvsdiv (bvadd (extraKeys!1640 (_2!490 lt!8334)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!24460 () Bool)

(declare-fun res!14903 () Bool)

(assert (=> b!24460 (=> (not res!14903) (not e!15822))))

(assert (=> b!24460 (= res!14903 (bvsge (size!702 (_2!490 lt!8334)) (_size!149 (_2!490 lt!8334))))))

(declare-fun b!24459 () Bool)

(declare-fun res!14905 () Bool)

(assert (=> b!24459 (=> (not res!14905) (not e!15822))))

(assert (=> b!24459 (= res!14905 (and (= (size!692 (_values!1728 (_2!490 lt!8334))) (bvadd (mask!4729 (_2!490 lt!8334)) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 (_2!490 lt!8334))) (size!692 (_values!1728 (_2!490 lt!8334)))) (bvsge (_size!149 (_2!490 lt!8334)) #b00000000000000000000000000000000) (bvsle (_size!149 (_2!490 lt!8334)) (bvadd (mask!4729 (_2!490 lt!8334)) #b00000000000000000000000000000001))))))

(assert (= (and d!4407 res!14906) b!24459))

(assert (= (and b!24459 res!14905) b!24460))

(assert (= (and b!24460 res!14903) b!24461))

(assert (= (and b!24461 res!14904) b!24462))

(assert (=> d!4407 m!18889))

(declare-fun m!19005 () Bool)

(assert (=> b!24461 m!19005))

(assert (=> b!24460 m!19005))

(assert (=> d!4031 d!4407))

(declare-fun d!4409 () Bool)

(assert (=> d!4409 (contains!229 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9283 () Unit!522)

(declare-fun choose!216 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) (_ BitVec 32) Int) Unit!522)

(assert (=> d!4409 (= lt!9283 (choose!216 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4409 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4409 (= (lemmaArrayContainsKeyThenInListMap!3 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!9283)))

(declare-fun bs!994 () Bool)

(assert (= bs!994 d!4409))

(assert (=> bs!994 m!16844))

(assert (=> bs!994 m!16844))

(assert (=> bs!994 m!17465))

(declare-fun m!19007 () Bool)

(assert (=> bs!994 m!19007))

(assert (=> bs!994 m!16902))

(assert (=> b!23769 d!4409))

(assert (=> b!23769 d!4349))

(assert (=> b!23769 d!4055))

(declare-fun b!24466 () Bool)

(declare-fun e!15823 () Bool)

(assert (=> b!24466 (= e!15823 (and (bvsge (extraKeys!1640 lt!8141) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 lt!8141) #b00000000000000000000000000000011) (bvsge (_vacant!149 lt!8141) #b00000000000000000000000000000000)))))

(declare-fun d!4411 () Bool)

(declare-fun res!14910 () Bool)

(assert (=> d!4411 (=> (not res!14910) (not e!15823))))

(assert (=> d!4411 (= res!14910 (validMask!0 (mask!4729 lt!8141)))))

(assert (=> d!4411 (= (simpleValid!20 lt!8141) e!15823)))

(declare-fun b!24465 () Bool)

(declare-fun res!14908 () Bool)

(assert (=> b!24465 (=> (not res!14908) (not e!15823))))

(assert (=> b!24465 (= res!14908 (= (size!702 lt!8141) (bvadd (_size!149 lt!8141) (bvsdiv (bvadd (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!24464 () Bool)

(declare-fun res!14907 () Bool)

(assert (=> b!24464 (=> (not res!14907) (not e!15823))))

(assert (=> b!24464 (= res!14907 (bvsge (size!702 lt!8141) (_size!149 lt!8141)))))

(declare-fun b!24463 () Bool)

(declare-fun res!14909 () Bool)

(assert (=> b!24463 (=> (not res!14909) (not e!15823))))

(assert (=> b!24463 (= res!14909 (and (= (size!692 (_values!1728 lt!8141)) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 lt!8141)) (size!692 (_values!1728 lt!8141))) (bvsge (_size!149 lt!8141) #b00000000000000000000000000000000) (bvsle (_size!149 lt!8141) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(assert (= (and d!4411 res!14910) b!24463))

(assert (= (and b!24463 res!14909) b!24464))

(assert (= (and b!24464 res!14907) b!24465))

(assert (= (and b!24465 res!14908) b!24466))

(assert (=> d!4411 m!16908))

(declare-fun m!19009 () Bool)

(assert (=> b!24465 m!19009))

(assert (=> b!24464 m!19009))

(assert (=> d!4033 d!4411))

(declare-fun b!24467 () Bool)

(declare-fun e!15827 () Bool)

(assert (=> b!24467 (= e!15827 (contains!230 Nil!562 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)))))

(declare-fun bm!2137 () Bool)

(declare-fun call!2140 () Bool)

(declare-fun c!3289 () Bool)

(assert (=> bm!2137 (= call!2140 (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8361)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3289 (Cons!561 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000) Nil!562) Nil!562)))))

(declare-fun b!24468 () Bool)

(declare-fun e!15826 () Bool)

(assert (=> b!24468 (= e!15826 call!2140)))

(declare-fun d!4413 () Bool)

(declare-fun res!14913 () Bool)

(declare-fun e!15825 () Bool)

(assert (=> d!4413 (=> res!14913 e!15825)))

(assert (=> d!4413 (= res!14913 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))))))

(assert (=> d!4413 (= (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8361)) #b00000000000000000000000000000000 Nil!562) e!15825)))

(declare-fun b!24469 () Bool)

(declare-fun e!15824 () Bool)

(assert (=> b!24469 (= e!15825 e!15824)))

(declare-fun res!14912 () Bool)

(assert (=> b!24469 (=> (not res!14912) (not e!15824))))

(assert (=> b!24469 (= res!14912 (not e!15827))))

(declare-fun res!14911 () Bool)

(assert (=> b!24469 (=> (not res!14911) (not e!15827))))

(assert (=> b!24469 (= res!14911 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)))))

(declare-fun b!24470 () Bool)

(assert (=> b!24470 (= e!15824 e!15826)))

(assert (=> b!24470 (= c!3289 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)))))

(declare-fun b!24471 () Bool)

(assert (=> b!24471 (= e!15826 call!2140)))

(assert (= (and d!4413 (not res!14913)) b!24469))

(assert (= (and b!24469 res!14911) b!24467))

(assert (= (and b!24469 res!14912) b!24470))

(assert (= (and b!24470 c!3289) b!24468))

(assert (= (and b!24470 (not c!3289)) b!24471))

(assert (= (or b!24468 b!24471) bm!2137))

(declare-fun m!19011 () Bool)

(assert (=> b!24467 m!19011))

(assert (=> b!24467 m!19011))

(declare-fun m!19013 () Bool)

(assert (=> b!24467 m!19013))

(assert (=> bm!2137 m!19011))

(declare-fun m!19015 () Bool)

(assert (=> bm!2137 m!19015))

(assert (=> b!24469 m!19011))

(assert (=> b!24469 m!19011))

(declare-fun m!19017 () Bool)

(assert (=> b!24469 m!19017))

(assert (=> b!24470 m!19011))

(assert (=> b!24470 m!19011))

(assert (=> b!24470 m!19017))

(assert (=> b!23720 d!4413))

(assert (=> b!23527 d!4027))

(declare-fun d!4415 () Bool)

(assert (=> d!4415 (= (apply!29 (+!44 lt!8571 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) lt!8555) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8571 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) lt!8555)))))

(declare-fun bs!995 () Bool)

(assert (= bs!995 d!4415))

(declare-fun m!19019 () Bool)

(assert (=> bs!995 m!19019))

(assert (=> bs!995 m!19019))

(declare-fun m!19021 () Bool)

(assert (=> bs!995 m!19021))

(assert (=> b!23558 d!4415))

(declare-fun d!4417 () Bool)

(declare-fun e!15829 () Bool)

(assert (=> d!4417 e!15829))

(declare-fun res!14914 () Bool)

(assert (=> d!4417 (=> res!14914 e!15829)))

(declare-fun lt!9285 () Bool)

(assert (=> d!4417 (= res!14914 (not lt!9285))))

(declare-fun lt!9286 () Bool)

(assert (=> d!4417 (= lt!9285 lt!9286)))

(declare-fun lt!9284 () Unit!522)

(declare-fun e!15828 () Unit!522)

(assert (=> d!4417 (= lt!9284 e!15828)))

(declare-fun c!3290 () Bool)

(assert (=> d!4417 (= c!3290 lt!9286)))

(assert (=> d!4417 (= lt!9286 (containsKey!25 (toList!297 (+!44 lt!8570 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))) lt!8568))))

(assert (=> d!4417 (= (contains!229 (+!44 lt!8570 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) lt!8568) lt!9285)))

(declare-fun b!24472 () Bool)

(declare-fun lt!9287 () Unit!522)

(assert (=> b!24472 (= e!15828 lt!9287)))

(assert (=> b!24472 (= lt!9287 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (+!44 lt!8570 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))) lt!8568))))

(assert (=> b!24472 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8570 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))) lt!8568))))

(declare-fun b!24473 () Bool)

(declare-fun Unit!576 () Unit!522)

(assert (=> b!24473 (= e!15828 Unit!576)))

(declare-fun b!24474 () Bool)

(assert (=> b!24474 (= e!15829 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8570 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))) lt!8568)))))

(assert (= (and d!4417 c!3290) b!24472))

(assert (= (and d!4417 (not c!3290)) b!24473))

(assert (= (and d!4417 (not res!14914)) b!24474))

(declare-fun m!19023 () Bool)

(assert (=> d!4417 m!19023))

(declare-fun m!19025 () Bool)

(assert (=> b!24472 m!19025))

(declare-fun m!19027 () Bool)

(assert (=> b!24472 m!19027))

(assert (=> b!24472 m!19027))

(declare-fun m!19029 () Bool)

(assert (=> b!24472 m!19029))

(assert (=> b!24474 m!19027))

(assert (=> b!24474 m!19027))

(assert (=> b!24474 m!19029))

(assert (=> b!23558 d!4417))

(declare-fun d!4419 () Bool)

(assert (=> d!4419 (= (apply!29 lt!8574 lt!8566) (get!391 (getValueByKey!61 (toList!297 lt!8574) lt!8566)))))

(declare-fun bs!996 () Bool)

(assert (= bs!996 d!4419))

(declare-fun m!19031 () Bool)

(assert (=> bs!996 m!19031))

(assert (=> bs!996 m!19031))

(declare-fun m!19033 () Bool)

(assert (=> bs!996 m!19033))

(assert (=> b!23558 d!4419))

(declare-fun d!4421 () Bool)

(assert (=> d!4421 (= (apply!29 (+!44 lt!8560 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) lt!8567) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8560 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))) lt!8567)))))

(declare-fun bs!997 () Bool)

(assert (= bs!997 d!4421))

(declare-fun m!19035 () Bool)

(assert (=> bs!997 m!19035))

(assert (=> bs!997 m!19035))

(declare-fun m!19037 () Bool)

(assert (=> bs!997 m!19037))

(assert (=> b!23558 d!4421))

(declare-fun d!4423 () Bool)

(declare-fun e!15830 () Bool)

(assert (=> d!4423 e!15830))

(declare-fun res!14916 () Bool)

(assert (=> d!4423 (=> (not res!14916) (not e!15830))))

(declare-fun lt!9291 () ListLongMap!563)

(assert (=> d!4423 (= res!14916 (contains!229 lt!9291 (_1!495 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun lt!9289 () List!564)

(assert (=> d!4423 (= lt!9291 (ListLongMap!564 lt!9289))))

(declare-fun lt!9288 () Unit!522)

(declare-fun lt!9290 () Unit!522)

(assert (=> d!4423 (= lt!9288 lt!9290)))

(assert (=> d!4423 (= (getValueByKey!61 lt!9289 (_1!495 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4423 (= lt!9290 (lemmaContainsTupThenGetReturnValue!18 lt!9289 (_1!495 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4423 (= lt!9289 (insertStrictlySorted!18 (toList!297 lt!8574) (_1!495 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4423 (= (+!44 lt!8574 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) lt!9291)))

(declare-fun b!24475 () Bool)

(declare-fun res!14915 () Bool)

(assert (=> b!24475 (=> (not res!14915) (not e!15830))))

(assert (=> b!24475 (= res!14915 (= (getValueByKey!61 (toList!297 lt!9291) (_1!495 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))))

(declare-fun b!24476 () Bool)

(assert (=> b!24476 (= e!15830 (contains!231 (toList!297 lt!9291) (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))

(assert (= (and d!4423 res!14916) b!24475))

(assert (= (and b!24475 res!14915) b!24476))

(declare-fun m!19039 () Bool)

(assert (=> d!4423 m!19039))

(declare-fun m!19041 () Bool)

(assert (=> d!4423 m!19041))

(declare-fun m!19043 () Bool)

(assert (=> d!4423 m!19043))

(declare-fun m!19045 () Bool)

(assert (=> d!4423 m!19045))

(declare-fun m!19047 () Bool)

(assert (=> b!24475 m!19047))

(declare-fun m!19049 () Bool)

(assert (=> b!24476 m!19049))

(assert (=> b!23558 d!4423))

(declare-fun d!4425 () Bool)

(assert (=> d!4425 (= (apply!29 (+!44 lt!8560 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) lt!8567) (apply!29 lt!8560 lt!8567))))

(declare-fun lt!9292 () Unit!522)

(assert (=> d!4425 (= lt!9292 (choose!213 lt!8560 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) lt!8567))))

(declare-fun e!15831 () Bool)

(assert (=> d!4425 e!15831))

(declare-fun res!14917 () Bool)

(assert (=> d!4425 (=> (not res!14917) (not e!15831))))

(assert (=> d!4425 (= res!14917 (contains!229 lt!8560 lt!8567))))

(assert (=> d!4425 (= (addApplyDifferent!14 lt!8560 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) lt!8567) lt!9292)))

(declare-fun b!24477 () Bool)

(assert (=> b!24477 (= e!15831 (not (= lt!8567 lt!8575)))))

(assert (= (and d!4425 res!14917) b!24477))

(declare-fun m!19051 () Bool)

(assert (=> d!4425 m!19051))

(assert (=> d!4425 m!17098))

(assert (=> d!4425 m!17090))

(assert (=> d!4425 m!17090))

(assert (=> d!4425 m!17092))

(declare-fun m!19053 () Bool)

(assert (=> d!4425 m!19053))

(assert (=> b!23558 d!4425))

(declare-fun d!4427 () Bool)

(assert (=> d!4427 (= (apply!29 (+!44 lt!8574 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) lt!8566) (apply!29 lt!8574 lt!8566))))

(declare-fun lt!9293 () Unit!522)

(assert (=> d!4427 (= lt!9293 (choose!213 lt!8574 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) lt!8566))))

(declare-fun e!15832 () Bool)

(assert (=> d!4427 e!15832))

(declare-fun res!14918 () Bool)

(assert (=> d!4427 (=> (not res!14918) (not e!15832))))

(assert (=> d!4427 (= res!14918 (contains!229 lt!8574 lt!8566))))

(assert (=> d!4427 (= (addApplyDifferent!14 lt!8574 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) lt!8566) lt!9293)))

(declare-fun b!24478 () Bool)

(assert (=> b!24478 (= e!15832 (not (= lt!8566 lt!8572)))))

(assert (= (and d!4427 res!14918) b!24478))

(declare-fun m!19055 () Bool)

(assert (=> d!4427 m!19055))

(assert (=> d!4427 m!17110))

(assert (=> d!4427 m!17104))

(assert (=> d!4427 m!17104))

(assert (=> d!4427 m!17106))

(declare-fun m!19057 () Bool)

(assert (=> d!4427 m!19057))

(assert (=> b!23558 d!4427))

(declare-fun d!4429 () Bool)

(assert (=> d!4429 (= (apply!29 lt!8571 lt!8555) (get!391 (getValueByKey!61 (toList!297 lt!8571) lt!8555)))))

(declare-fun bs!998 () Bool)

(assert (= bs!998 d!4429))

(declare-fun m!19059 () Bool)

(assert (=> bs!998 m!19059))

(assert (=> bs!998 m!19059))

(declare-fun m!19061 () Bool)

(assert (=> bs!998 m!19061))

(assert (=> b!23558 d!4429))

(declare-fun d!4431 () Bool)

(declare-fun e!15833 () Bool)

(assert (=> d!4431 e!15833))

(declare-fun res!14920 () Bool)

(assert (=> d!4431 (=> (not res!14920) (not e!15833))))

(declare-fun lt!9297 () ListLongMap!563)

(assert (=> d!4431 (= res!14920 (contains!229 lt!9297 (_1!495 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun lt!9295 () List!564)

(assert (=> d!4431 (= lt!9297 (ListLongMap!564 lt!9295))))

(declare-fun lt!9294 () Unit!522)

(declare-fun lt!9296 () Unit!522)

(assert (=> d!4431 (= lt!9294 lt!9296)))

(assert (=> d!4431 (= (getValueByKey!61 lt!9295 (_1!495 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4431 (= lt!9296 (lemmaContainsTupThenGetReturnValue!18 lt!9295 (_1!495 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4431 (= lt!9295 (insertStrictlySorted!18 (toList!297 lt!8571) (_1!495 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4431 (= (+!44 lt!8571 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) lt!9297)))

(declare-fun b!24479 () Bool)

(declare-fun res!14919 () Bool)

(assert (=> b!24479 (=> (not res!14919) (not e!15833))))

(assert (=> b!24479 (= res!14919 (= (getValueByKey!61 (toList!297 lt!9297) (_1!495 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))))

(declare-fun b!24480 () Bool)

(assert (=> b!24480 (= e!15833 (contains!231 (toList!297 lt!9297) (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))))))

(assert (= (and d!4431 res!14920) b!24479))

(assert (= (and b!24479 res!14919) b!24480))

(declare-fun m!19063 () Bool)

(assert (=> d!4431 m!19063))

(declare-fun m!19065 () Bool)

(assert (=> d!4431 m!19065))

(declare-fun m!19067 () Bool)

(assert (=> d!4431 m!19067))

(declare-fun m!19069 () Bool)

(assert (=> d!4431 m!19069))

(declare-fun m!19071 () Bool)

(assert (=> b!24479 m!19071))

(declare-fun m!19073 () Bool)

(assert (=> b!24480 m!19073))

(assert (=> b!23558 d!4431))

(declare-fun d!4433 () Bool)

(declare-fun e!15834 () Bool)

(assert (=> d!4433 e!15834))

(declare-fun res!14922 () Bool)

(assert (=> d!4433 (=> (not res!14922) (not e!15834))))

(declare-fun lt!9301 () ListLongMap!563)

(assert (=> d!4433 (= res!14922 (contains!229 lt!9301 (_1!495 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))))))

(declare-fun lt!9299 () List!564)

(assert (=> d!4433 (= lt!9301 (ListLongMap!564 lt!9299))))

(declare-fun lt!9298 () Unit!522)

(declare-fun lt!9300 () Unit!522)

(assert (=> d!4433 (= lt!9298 lt!9300)))

(assert (=> d!4433 (= (getValueByKey!61 lt!9299 (_1!495 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4433 (= lt!9300 (lemmaContainsTupThenGetReturnValue!18 lt!9299 (_1!495 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4433 (= lt!9299 (insertStrictlySorted!18 (toList!297 lt!8570) (_1!495 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4433 (= (+!44 lt!8570 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) lt!9301)))

(declare-fun b!24481 () Bool)

(declare-fun res!14921 () Bool)

(assert (=> b!24481 (=> (not res!14921) (not e!15834))))

(assert (=> b!24481 (= res!14921 (= (getValueByKey!61 (toList!297 lt!9301) (_1!495 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))))))))

(declare-fun b!24482 () Bool)

(assert (=> b!24482 (= e!15834 (contains!231 (toList!297 lt!9301) (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (= (and d!4433 res!14922) b!24481))

(assert (= (and b!24481 res!14921) b!24482))

(declare-fun m!19075 () Bool)

(assert (=> d!4433 m!19075))

(declare-fun m!19077 () Bool)

(assert (=> d!4433 m!19077))

(declare-fun m!19079 () Bool)

(assert (=> d!4433 m!19079))

(declare-fun m!19081 () Bool)

(assert (=> d!4433 m!19081))

(declare-fun m!19083 () Bool)

(assert (=> b!24481 m!19083))

(declare-fun m!19085 () Bool)

(assert (=> b!24482 m!19085))

(assert (=> b!23558 d!4433))

(declare-fun d!4435 () Bool)

(assert (=> d!4435 (= (apply!29 lt!8560 lt!8567) (get!391 (getValueByKey!61 (toList!297 lt!8560) lt!8567)))))

(declare-fun bs!999 () Bool)

(assert (= bs!999 d!4435))

(declare-fun m!19087 () Bool)

(assert (=> bs!999 m!19087))

(assert (=> bs!999 m!19087))

(declare-fun m!19089 () Bool)

(assert (=> bs!999 m!19089))

(assert (=> b!23558 d!4435))

(declare-fun d!4437 () Bool)

(assert (=> d!4437 (contains!229 (+!44 lt!8570 (tuple2!973 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) lt!8568)))

(declare-fun lt!9302 () Unit!522)

(assert (=> d!4437 (= lt!9302 (choose!214 lt!8570 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) lt!8568))))

(assert (=> d!4437 (contains!229 lt!8570 lt!8568)))

(assert (=> d!4437 (= (addStillContains!14 lt!8570 lt!8573 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))) lt!8568) lt!9302)))

(declare-fun bs!1000 () Bool)

(assert (= bs!1000 d!4437))

(assert (=> bs!1000 m!17100))

(assert (=> bs!1000 m!17100))

(assert (=> bs!1000 m!17118))

(declare-fun m!19091 () Bool)

(assert (=> bs!1000 m!19091))

(declare-fun m!19093 () Bool)

(assert (=> bs!1000 m!19093))

(assert (=> b!23558 d!4437))

(declare-fun d!4439 () Bool)

(assert (=> d!4439 (= (apply!29 (+!44 lt!8571 (tuple2!973 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) lt!8555) (apply!29 lt!8571 lt!8555))))

(declare-fun lt!9303 () Unit!522)

(assert (=> d!4439 (= lt!9303 (choose!213 lt!8571 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) lt!8555))))

(declare-fun e!15835 () Bool)

(assert (=> d!4439 e!15835))

(declare-fun res!14923 () Bool)

(assert (=> d!4439 (=> (not res!14923) (not e!15835))))

(assert (=> d!4439 (= res!14923 (contains!229 lt!8571 lt!8555))))

(assert (=> d!4439 (= (addApplyDifferent!14 lt!8571 lt!8557 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))) lt!8555) lt!9303)))

(declare-fun b!24483 () Bool)

(assert (=> b!24483 (= e!15835 (not (= lt!8555 lt!8557)))))

(assert (= (and d!4439 res!14923) b!24483))

(declare-fun m!19095 () Bool)

(assert (=> d!4439 m!19095))

(assert (=> d!4439 m!17116))

(assert (=> d!4439 m!17094))

(assert (=> d!4439 m!17094))

(assert (=> d!4439 m!17096))

(declare-fun m!19097 () Bool)

(assert (=> d!4439 m!19097))

(assert (=> b!23558 d!4439))

(declare-fun d!4441 () Bool)

(declare-fun e!15836 () Bool)

(assert (=> d!4441 e!15836))

(declare-fun res!14925 () Bool)

(assert (=> d!4441 (=> (not res!14925) (not e!15836))))

(declare-fun lt!9307 () ListLongMap!563)

(assert (=> d!4441 (= res!14925 (contains!229 lt!9307 (_1!495 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))))))

(declare-fun lt!9305 () List!564)

(assert (=> d!4441 (= lt!9307 (ListLongMap!564 lt!9305))))

(declare-fun lt!9304 () Unit!522)

(declare-fun lt!9306 () Unit!522)

(assert (=> d!4441 (= lt!9304 lt!9306)))

(assert (=> d!4441 (= (getValueByKey!61 lt!9305 (_1!495 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4441 (= lt!9306 (lemmaContainsTupThenGetReturnValue!18 lt!9305 (_1!495 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4441 (= lt!9305 (insertStrictlySorted!18 (toList!297 lt!8560) (_1!495 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) (_2!495 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4441 (= (+!44 lt!8560 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))) lt!9307)))

(declare-fun b!24484 () Bool)

(declare-fun res!14924 () Bool)

(assert (=> b!24484 (=> (not res!14924) (not e!15836))))

(assert (=> b!24484 (= res!14924 (= (getValueByKey!61 (toList!297 lt!9307) (_1!495 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))))))))

(declare-fun b!24485 () Bool)

(assert (=> b!24485 (= e!15836 (contains!231 (toList!297 lt!9307) (tuple2!973 lt!8575 (ite (and c!3009 c!3008) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (= (and d!4441 res!14925) b!24484))

(assert (= (and b!24484 res!14924) b!24485))

(declare-fun m!19099 () Bool)

(assert (=> d!4441 m!19099))

(declare-fun m!19101 () Bool)

(assert (=> d!4441 m!19101))

(declare-fun m!19103 () Bool)

(assert (=> d!4441 m!19103))

(declare-fun m!19105 () Bool)

(assert (=> d!4441 m!19105))

(declare-fun m!19107 () Bool)

(assert (=> b!24484 m!19107))

(declare-fun m!19109 () Bool)

(assert (=> b!24485 m!19109))

(assert (=> b!23558 d!4441))

(assert (=> b!23558 d!4401))

(declare-fun d!4443 () Bool)

(assert (=> d!4443 (= (apply!29 (+!44 lt!8574 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142))))) lt!8566) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8574 (tuple2!973 lt!8572 (ite c!3009 (ite c!3008 (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (minValue!1665 (_2!490 lt!8142)))))) lt!8566)))))

(declare-fun bs!1001 () Bool)

(assert (= bs!1001 d!4443))

(declare-fun m!19111 () Bool)

(assert (=> bs!1001 m!19111))

(assert (=> bs!1001 m!19111))

(declare-fun m!19113 () Bool)

(assert (=> bs!1001 m!19113))

(assert (=> b!23558 d!4443))

(assert (=> bm!1970 d!4217))

(assert (=> b!23679 d!4391))

(assert (=> bm!2000 d!4067))

(assert (=> bm!2025 d!4271))

(declare-fun b!24486 () Bool)

(declare-fun lt!9308 () SeekEntryResult!54)

(assert (=> b!24486 (and (bvsge (index!2339 lt!9308) #b00000000000000000000000000000000) (bvslt (index!2339 lt!9308) (size!693 (_keys!3163 lt!8141))))))

(declare-fun e!15838 () Bool)

(assert (=> b!24486 (= e!15838 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2339 lt!9308)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24487 () Bool)

(declare-fun e!15839 () Bool)

(declare-fun e!15840 () Bool)

(assert (=> b!24487 (= e!15839 e!15840)))

(declare-fun res!14928 () Bool)

(assert (=> b!24487 (= res!14928 (and ((_ is Intermediate!54) lt!9308) (not (undefined!866 lt!9308)) (bvslt (x!5576 lt!9308) #b01111111111111111111111111111110) (bvsge (x!5576 lt!9308) #b00000000000000000000000000000000) (bvsge (x!5576 lt!9308) #b00000000000000000000000000000000)))))

(assert (=> b!24487 (=> (not res!14928) (not e!15840))))

(declare-fun b!24488 () Bool)

(assert (=> b!24488 (= e!15839 (bvsge (x!5576 lt!9308) #b01111111111111111111111111111110))))

(declare-fun b!24489 () Bool)

(declare-fun e!15837 () SeekEntryResult!54)

(assert (=> b!24489 (= e!15837 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!4729 lt!8141)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!24490 () Bool)

(assert (=> b!24490 (and (bvsge (index!2339 lt!9308) #b00000000000000000000000000000000) (bvslt (index!2339 lt!9308) (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14926 () Bool)

(assert (=> b!24490 (= res!14926 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2339 lt!9308)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24490 (=> res!14926 e!15838)))

(assert (=> b!24490 (= e!15840 e!15838)))

(declare-fun b!24492 () Bool)

(assert (=> b!24492 (and (bvsge (index!2339 lt!9308) #b00000000000000000000000000000000) (bvslt (index!2339 lt!9308) (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14927 () Bool)

(assert (=> b!24492 (= res!14927 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2339 lt!9308)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24492 (=> res!14927 e!15838)))

(declare-fun b!24493 () Bool)

(assert (=> b!24493 (= e!15837 (Intermediate!54 false (toIndex!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun b!24494 () Bool)

(declare-fun e!15841 () SeekEntryResult!54)

(assert (=> b!24494 (= e!15841 (Intermediate!54 true (toIndex!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun d!4445 () Bool)

(assert (=> d!4445 e!15839))

(declare-fun c!3293 () Bool)

(assert (=> d!4445 (= c!3293 (and ((_ is Intermediate!54) lt!9308) (undefined!866 lt!9308)))))

(assert (=> d!4445 (= lt!9308 e!15841)))

(declare-fun c!3291 () Bool)

(assert (=> d!4445 (= c!3291 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!9309 () (_ BitVec 64))

(assert (=> d!4445 (= lt!9309 (select (arr!597 (_keys!3163 lt!8141)) (toIndex!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141))))))

(assert (=> d!4445 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4445 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)) lt!9308)))

(declare-fun b!24491 () Bool)

(assert (=> b!24491 (= e!15841 e!15837)))

(declare-fun c!3292 () Bool)

(assert (=> b!24491 (= c!3292 (or (= lt!9309 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (= (bvadd lt!9309 lt!9309) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4445 c!3291) b!24494))

(assert (= (and d!4445 (not c!3291)) b!24491))

(assert (= (and b!24491 c!3292) b!24493))

(assert (= (and b!24491 (not c!3292)) b!24489))

(assert (= (and d!4445 c!3293) b!24488))

(assert (= (and d!4445 (not c!3293)) b!24487))

(assert (= (and b!24487 res!14928) b!24490))

(assert (= (and b!24490 (not res!14926)) b!24492))

(assert (= (and b!24492 (not res!14927)) b!24486))

(declare-fun m!19115 () Bool)

(assert (=> b!24492 m!19115))

(assert (=> b!24490 m!19115))

(assert (=> b!24486 m!19115))

(assert (=> d!4445 m!16910))

(declare-fun m!19117 () Bool)

(assert (=> d!4445 m!19117))

(assert (=> d!4445 m!16908))

(assert (=> b!24489 m!16910))

(declare-fun m!19119 () Bool)

(assert (=> b!24489 m!19119))

(assert (=> b!24489 m!19119))

(declare-fun m!19121 () Bool)

(assert (=> b!24489 m!19121))

(assert (=> d!3975 d!4445))

(declare-fun d!4447 () Bool)

(declare-fun lt!9311 () (_ BitVec 32))

(declare-fun lt!9310 () (_ BitVec 32))

(assert (=> d!4447 (= lt!9311 (bvmul (bvxor lt!9310 (bvlshr lt!9310 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!4447 (= lt!9310 ((_ extract 31 0) (bvand (bvxor (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvlshr (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!4447 (and (bvsge (mask!4729 lt!8141) #b00000000000000000000000000000000) (let ((res!14684 (let ((h!1128 ((_ extract 31 0) (bvand (bvxor (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvlshr (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!5834 (bvmul (bvxor h!1128 (bvlshr h!1128 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!5834 (bvlshr x!5834 #b00000000000000000000000000001101)) (mask!4729 lt!8141)))))) (and (bvslt res!14684 (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001)) (bvsge res!14684 #b00000000000000000000000000000000))))))

(assert (=> d!4447 (= (toIndex!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) (bvand (bvxor lt!9311 (bvlshr lt!9311 #b00000000000000000000000000001101)) (mask!4729 lt!8141)))))

(assert (=> d!3975 d!4447))

(assert (=> d!3975 d!4171))

(declare-fun lt!9314 () Bool)

(declare-fun d!4449 () Bool)

(declare-fun content!16 (List!565) (InoxSet (_ BitVec 64)))

(assert (=> d!4449 (= lt!9314 (select (content!16 lt!8233) (select (arr!597 lt!8241) lt!8240)))))

(declare-fun e!15846 () Bool)

(assert (=> d!4449 (= lt!9314 e!15846)))

(declare-fun res!14934 () Bool)

(assert (=> d!4449 (=> (not res!14934) (not e!15846))))

(assert (=> d!4449 (= res!14934 ((_ is Cons!561) lt!8233))))

(assert (=> d!4449 (= (contains!230 lt!8233 (select (arr!597 lt!8241) lt!8240)) lt!9314)))

(declare-fun b!24499 () Bool)

(declare-fun e!15847 () Bool)

(assert (=> b!24499 (= e!15846 e!15847)))

(declare-fun res!14933 () Bool)

(assert (=> b!24499 (=> res!14933 e!15847)))

(assert (=> b!24499 (= res!14933 (= (h!1127 lt!8233) (select (arr!597 lt!8241) lt!8240)))))

(declare-fun b!24500 () Bool)

(assert (=> b!24500 (= e!15847 (contains!230 (t!3230 lt!8233) (select (arr!597 lt!8241) lt!8240)))))

(assert (= (and d!4449 res!14934) b!24499))

(assert (= (and b!24499 (not res!14933)) b!24500))

(declare-fun m!19123 () Bool)

(assert (=> d!4449 m!19123))

(assert (=> d!4449 m!17166))

(declare-fun m!19125 () Bool)

(assert (=> d!4449 m!19125))

(assert (=> b!24500 m!17166))

(declare-fun m!19127 () Bool)

(assert (=> b!24500 m!19127))

(assert (=> b!23628 d!4449))

(declare-fun d!4451 () Bool)

(assert (=> d!4451 (= (apply!29 lt!8672 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!391 (getValueByKey!61 (toList!297 lt!8672) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))))

(declare-fun bs!1002 () Bool)

(assert (= bs!1002 d!4451))

(assert (=> bs!1002 m!17080))

(assert (=> bs!1002 m!18435))

(assert (=> bs!1002 m!18435))

(declare-fun m!19129 () Bool)

(assert (=> bs!1002 m!19129))

(assert (=> b!23697 d!4451))

(declare-fun d!4453 () Bool)

(declare-fun c!3294 () Bool)

(assert (=> d!4453 (= c!3294 ((_ is ValueCellFull!311) (select (arr!596 lt!8342) #b00000000000000000000000000000000)))))

(declare-fun e!15848 () V!1187)

(assert (=> d!4453 (= (get!390 (select (arr!596 lt!8342) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)) e!15848)))

(declare-fun b!24501 () Bool)

(assert (=> b!24501 (= e!15848 (get!392 (select (arr!596 lt!8342) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24502 () Bool)

(assert (=> b!24502 (= e!15848 (get!393 (select (arr!596 lt!8342) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4453 c!3294) b!24501))

(assert (= (and d!4453 (not c!3294)) b!24502))

(assert (=> b!24501 m!17315))

(assert (=> b!24501 m!17076))

(declare-fun m!19131 () Bool)

(assert (=> b!24501 m!19131))

(assert (=> b!24502 m!17315))

(assert (=> b!24502 m!17076))

(declare-fun m!19133 () Bool)

(assert (=> b!24502 m!19133))

(assert (=> b!23697 d!4453))

(assert (=> d!4035 d!4171))

(assert (=> d!3995 d!3983))

(declare-fun b!24519 () Bool)

(declare-fun e!15859 () Bool)

(declare-fun call!2145 () Bool)

(assert (=> b!24519 (= e!15859 (not call!2145))))

(declare-fun d!4455 () Bool)

(declare-fun e!15858 () Bool)

(assert (=> d!4455 e!15858))

(declare-fun c!3299 () Bool)

(declare-fun lt!9317 () SeekEntryResult!54)

(assert (=> d!4455 (= c!3299 ((_ is MissingZero!54) lt!9317))))

(assert (=> d!4455 (= lt!9317 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(assert (=> d!4455 true))

(declare-fun _$34!747 () Unit!522)

(assert (=> d!4455 (= (choose!207 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) _$34!747)))

(declare-fun b!24520 () Bool)

(declare-fun e!15860 () Bool)

(assert (=> b!24520 (= e!15860 (not call!2145))))

(declare-fun b!24521 () Bool)

(declare-fun e!15857 () Bool)

(assert (=> b!24521 (= e!15858 e!15857)))

(declare-fun c!3300 () Bool)

(assert (=> b!24521 (= c!3300 ((_ is MissingVacant!54) lt!9317))))

(declare-fun b!24522 () Bool)

(assert (=> b!24522 (= e!15857 ((_ is Undefined!54) lt!9317))))

(declare-fun bm!2142 () Bool)

(assert (=> bm!2142 (= call!2145 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun b!24523 () Bool)

(assert (=> b!24523 (= e!15858 e!15859)))

(declare-fun res!14943 () Bool)

(declare-fun call!2146 () Bool)

(assert (=> b!24523 (= res!14943 call!2146)))

(assert (=> b!24523 (=> (not res!14943) (not e!15859))))

(declare-fun b!24524 () Bool)

(declare-fun res!14945 () Bool)

(assert (=> b!24524 (=> (not res!14945) (not e!15860))))

(assert (=> b!24524 (= res!14945 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2340 lt!9317)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!2143 () Bool)

(assert (=> bm!2143 (= call!2146 (inRange!0 (ite c!3299 (index!2337 lt!9317) (index!2340 lt!9317)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!24525 () Bool)

(declare-fun res!14944 () Bool)

(assert (=> b!24525 (= res!14944 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2337 lt!9317)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24525 (=> (not res!14944) (not e!15859))))

(declare-fun b!24526 () Bool)

(declare-fun res!14946 () Bool)

(assert (=> b!24526 (=> (not res!14946) (not e!15860))))

(assert (=> b!24526 (= res!14946 call!2146)))

(assert (=> b!24526 (= e!15857 e!15860)))

(assert (= (and d!4455 c!3299) b!24523))

(assert (= (and d!4455 (not c!3299)) b!24521))

(assert (= (and b!24523 res!14943) b!24525))

(assert (= (and b!24525 res!14944) b!24519))

(assert (= (and b!24521 c!3300) b!24526))

(assert (= (and b!24521 (not c!3300)) b!24522))

(assert (= (and b!24526 res!14946) b!24524))

(assert (= (and b!24524 res!14945) b!24520))

(assert (= (or b!24523 b!24526) bm!2143))

(assert (= (or b!24519 b!24520) bm!2142))

(declare-fun m!19135 () Bool)

(assert (=> b!24524 m!19135))

(declare-fun m!19137 () Bool)

(assert (=> bm!2143 m!19137))

(assert (=> d!4455 m!16834))

(declare-fun m!19139 () Bool)

(assert (=> b!24525 m!19139))

(assert (=> bm!2142 m!16842))

(assert (=> d!3995 d!4455))

(assert (=> d!3995 d!4145))

(declare-fun d!4457 () Bool)

(declare-fun e!15862 () Bool)

(assert (=> d!4457 e!15862))

(declare-fun res!14947 () Bool)

(assert (=> d!4457 (=> res!14947 e!15862)))

(declare-fun lt!9319 () Bool)

(assert (=> d!4457 (= res!14947 (not lt!9319))))

(declare-fun lt!9320 () Bool)

(assert (=> d!4457 (= lt!9319 lt!9320)))

(declare-fun lt!9318 () Unit!522)

(declare-fun e!15861 () Unit!522)

(assert (=> d!4457 (= lt!9318 e!15861)))

(declare-fun c!3301 () Bool)

(assert (=> d!4457 (= c!3301 lt!9320)))

(assert (=> d!4457 (= lt!9320 (containsKey!25 (toList!297 lt!8704) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4457 (= (contains!229 lt!8704 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9319)))

(declare-fun b!24527 () Bool)

(declare-fun lt!9321 () Unit!522)

(assert (=> b!24527 (= e!15861 lt!9321)))

(assert (=> b!24527 (= lt!9321 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8704) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24527 (isDefined!23 (getValueByKey!61 (toList!297 lt!8704) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24528 () Bool)

(declare-fun Unit!577 () Unit!522)

(assert (=> b!24528 (= e!15861 Unit!577)))

(declare-fun b!24529 () Bool)

(assert (=> b!24529 (= e!15862 (isDefined!23 (getValueByKey!61 (toList!297 lt!8704) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4457 c!3301) b!24527))

(assert (= (and d!4457 (not c!3301)) b!24528))

(assert (= (and d!4457 (not res!14947)) b!24529))

(declare-fun m!19141 () Bool)

(assert (=> d!4457 m!19141))

(declare-fun m!19143 () Bool)

(assert (=> b!24527 m!19143))

(declare-fun m!19145 () Bool)

(assert (=> b!24527 m!19145))

(assert (=> b!24527 m!19145))

(declare-fun m!19147 () Bool)

(assert (=> b!24527 m!19147))

(assert (=> b!24529 m!19145))

(assert (=> b!24529 m!19145))

(assert (=> b!24529 m!19147))

(assert (=> bm!2031 d!4457))

(declare-fun b!24532 () Bool)

(declare-fun e!15864 () Option!67)

(assert (=> b!24532 (= e!15864 (getValueByKey!61 (t!3229 (toList!297 lt!8787)) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24530 () Bool)

(declare-fun e!15863 () Option!67)

(assert (=> b!24530 (= e!15863 (Some!66 (_2!495 (h!1126 (toList!297 lt!8787)))))))

(declare-fun b!24533 () Bool)

(assert (=> b!24533 (= e!15864 None!65)))

(declare-fun d!4459 () Bool)

(declare-fun c!3302 () Bool)

(assert (=> d!4459 (= c!3302 (and ((_ is Cons!560) (toList!297 lt!8787)) (= (_1!495 (h!1126 (toList!297 lt!8787))) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(assert (=> d!4459 (= (getValueByKey!61 (toList!297 lt!8787) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))) e!15863)))

(declare-fun b!24531 () Bool)

(assert (=> b!24531 (= e!15863 e!15864)))

(declare-fun c!3303 () Bool)

(assert (=> b!24531 (= c!3303 (and ((_ is Cons!560) (toList!297 lt!8787)) (not (= (_1!495 (h!1126 (toList!297 lt!8787))) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))))

(assert (= (and d!4459 c!3302) b!24530))

(assert (= (and d!4459 (not c!3302)) b!24531))

(assert (= (and b!24531 c!3303) b!24532))

(assert (= (and b!24531 (not c!3303)) b!24533))

(declare-fun m!19149 () Bool)

(assert (=> b!24532 m!19149))

(assert (=> b!23807 d!4459))

(declare-fun b!24535 () Bool)

(declare-fun e!15867 () SeekEntryResult!54)

(assert (=> b!24535 (= e!15867 (seekKeyOrZeroReturnVacant!0 (bvadd (x!5576 lt!8548) #b00000000000000000000000000000001) (nextIndex!0 (index!2339 lt!8548) (bvadd (x!5576 lt!8548) #b00000000000000000000000000000001) (mask!4729 (_2!490 lt!8142))) (index!2339 lt!8548) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!24536 () Bool)

(declare-fun c!3306 () Bool)

(declare-fun lt!9323 () (_ BitVec 64))

(assert (=> b!24536 (= c!3306 (= lt!9323 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15865 () SeekEntryResult!54)

(assert (=> b!24536 (= e!15865 e!15867)))

(declare-fun b!24537 () Bool)

(assert (=> b!24537 (= e!15867 (MissingVacant!54 (index!2339 lt!8548)))))

(declare-fun b!24538 () Bool)

(assert (=> b!24538 (= e!15865 (Found!54 (index!2339 lt!8548)))))

(declare-fun b!24539 () Bool)

(declare-fun e!15866 () SeekEntryResult!54)

(assert (=> b!24539 (= e!15866 Undefined!54)))

(declare-fun b!24534 () Bool)

(assert (=> b!24534 (= e!15866 e!15865)))

(declare-fun c!3305 () Bool)

(assert (=> b!24534 (= c!3305 (= lt!9323 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!4461 () Bool)

(declare-fun lt!9322 () SeekEntryResult!54)

(assert (=> d!4461 (and (or ((_ is Undefined!54) lt!9322) (not ((_ is Found!54) lt!9322)) (and (bvsge (index!2338 lt!9322) #b00000000000000000000000000000000) (bvslt (index!2338 lt!9322) (size!693 (_keys!3163 (_2!490 lt!8142)))))) (or ((_ is Undefined!54) lt!9322) ((_ is Found!54) lt!9322) (not ((_ is MissingVacant!54) lt!9322)) (not (= (index!2340 lt!9322) (index!2339 lt!8548))) (and (bvsge (index!2340 lt!9322) #b00000000000000000000000000000000) (bvslt (index!2340 lt!9322) (size!693 (_keys!3163 (_2!490 lt!8142)))))) (or ((_ is Undefined!54) lt!9322) (ite ((_ is Found!54) lt!9322) (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!9322)) #b1000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!54) lt!9322) (= (index!2340 lt!9322) (index!2339 lt!8548)) (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2340 lt!9322)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!4461 (= lt!9322 e!15866)))

(declare-fun c!3304 () Bool)

(assert (=> d!4461 (= c!3304 (bvsge (x!5576 lt!8548) #b01111111111111111111111111111110))))

(assert (=> d!4461 (= lt!9323 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2339 lt!8548)))))

(assert (=> d!4461 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4461 (= (seekKeyOrZeroReturnVacant!0 (x!5576 lt!8548) (index!2339 lt!8548) (index!2339 lt!8548) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))) lt!9322)))

(assert (= (and d!4461 c!3304) b!24539))

(assert (= (and d!4461 (not c!3304)) b!24534))

(assert (= (and b!24534 c!3305) b!24538))

(assert (= (and b!24534 (not c!3305)) b!24536))

(assert (= (and b!24536 c!3306) b!24537))

(assert (= (and b!24536 (not c!3306)) b!24535))

(declare-fun m!19151 () Bool)

(assert (=> b!24535 m!19151))

(assert (=> b!24535 m!19151))

(declare-fun m!19153 () Bool)

(assert (=> b!24535 m!19153))

(declare-fun m!19155 () Bool)

(assert (=> d!4461 m!19155))

(declare-fun m!19157 () Bool)

(assert (=> d!4461 m!19157))

(assert (=> d!4461 m!17052))

(assert (=> d!4461 m!16902))

(assert (=> b!23538 d!4461))

(declare-fun b!24540 () Bool)

(declare-fun e!15871 () Bool)

(assert (=> b!24540 (= e!15871 (contains!230 Nil!562 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)))))

(declare-fun bm!2144 () Bool)

(declare-fun call!2147 () Bool)

(declare-fun c!3307 () Bool)

(assert (=> bm!2144 (= call!2147 (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8334)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3307 (Cons!561 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000) Nil!562) Nil!562)))))

(declare-fun b!24541 () Bool)

(declare-fun e!15870 () Bool)

(assert (=> b!24541 (= e!15870 call!2147)))

(declare-fun d!4463 () Bool)

(declare-fun res!14950 () Bool)

(declare-fun e!15869 () Bool)

(assert (=> d!4463 (=> res!14950 e!15869)))

(assert (=> d!4463 (= res!14950 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))))))

(assert (=> d!4463 (= (arrayNoDuplicates!0 (_keys!3163 (_2!490 lt!8334)) #b00000000000000000000000000000000 Nil!562) e!15869)))

(declare-fun b!24542 () Bool)

(declare-fun e!15868 () Bool)

(assert (=> b!24542 (= e!15869 e!15868)))

(declare-fun res!14949 () Bool)

(assert (=> b!24542 (=> (not res!14949) (not e!15868))))

(assert (=> b!24542 (= res!14949 (not e!15871))))

(declare-fun res!14948 () Bool)

(assert (=> b!24542 (=> (not res!14948) (not e!15871))))

(assert (=> b!24542 (= res!14948 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)))))

(declare-fun b!24543 () Bool)

(assert (=> b!24543 (= e!15868 e!15870)))

(assert (=> b!24543 (= c!3307 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)))))

(declare-fun b!24544 () Bool)

(assert (=> b!24544 (= e!15870 call!2147)))

(assert (= (and d!4463 (not res!14950)) b!24542))

(assert (= (and b!24542 res!14948) b!24540))

(assert (= (and b!24542 res!14949) b!24543))

(assert (= (and b!24543 c!3307) b!24541))

(assert (= (and b!24543 (not c!3307)) b!24544))

(assert (= (or b!24541 b!24544) bm!2144))

(assert (=> b!24540 m!18841))

(assert (=> b!24540 m!18841))

(declare-fun m!19159 () Bool)

(assert (=> b!24540 m!19159))

(assert (=> bm!2144 m!18841))

(declare-fun m!19161 () Bool)

(assert (=> bm!2144 m!19161))

(assert (=> b!24542 m!18841))

(assert (=> b!24542 m!18841))

(assert (=> b!24542 m!18847))

(assert (=> b!24543 m!18841))

(assert (=> b!24543 m!18841))

(assert (=> b!24543 m!18847))

(assert (=> b!23661 d!4463))

(declare-fun d!4465 () Bool)

(assert (=> d!4465 (= (map!408 (_2!490 lt!8533)) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8533)) (_values!1728 (_2!490 lt!8533)) (mask!4729 (_2!490 lt!8533)) (extraKeys!1640 (_2!490 lt!8533)) (zeroValue!1665 (_2!490 lt!8533)) (minValue!1665 (_2!490 lt!8533)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8533))))))

(declare-fun bs!1003 () Bool)

(assert (= bs!1003 d!4465))

(declare-fun m!19163 () Bool)

(assert (=> bs!1003 m!19163))

(assert (=> b!23531 d!4465))

(declare-fun d!4467 () Bool)

(declare-fun e!15872 () Bool)

(assert (=> d!4467 e!15872))

(declare-fun res!14952 () Bool)

(assert (=> d!4467 (=> (not res!14952) (not e!15872))))

(declare-fun lt!9327 () ListLongMap!563)

(assert (=> d!4467 (= res!14952 (contains!229 lt!9327 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun lt!9325 () List!564)

(assert (=> d!4467 (= lt!9327 (ListLongMap!564 lt!9325))))

(declare-fun lt!9324 () Unit!522)

(declare-fun lt!9326 () Unit!522)

(assert (=> d!4467 (= lt!9324 lt!9326)))

(assert (=> d!4467 (= (getValueByKey!61 lt!9325 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4467 (= lt!9326 (lemmaContainsTupThenGetReturnValue!18 lt!9325 (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4467 (= lt!9325 (insertStrictlySorted!18 (toList!297 (map!408 lt!8141)) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4467 (= (+!44 (map!408 lt!8141) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9327)))

(declare-fun b!24545 () Bool)

(declare-fun res!14951 () Bool)

(assert (=> b!24545 (=> (not res!14951) (not e!15872))))

(assert (=> b!24545 (= res!14951 (= (getValueByKey!61 (toList!297 lt!9327) (_1!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24546 () Bool)

(assert (=> b!24546 (= e!15872 (contains!231 (toList!297 lt!9327) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (= (and d!4467 res!14952) b!24545))

(assert (= (and b!24545 res!14951) b!24546))

(declare-fun m!19165 () Bool)

(assert (=> d!4467 m!19165))

(declare-fun m!19167 () Bool)

(assert (=> d!4467 m!19167))

(declare-fun m!19169 () Bool)

(assert (=> d!4467 m!19169))

(declare-fun m!19171 () Bool)

(assert (=> d!4467 m!19171))

(declare-fun m!19173 () Bool)

(assert (=> b!24545 m!19173))

(declare-fun m!19175 () Bool)

(assert (=> b!24546 m!19175))

(assert (=> b!23531 d!4467))

(assert (=> b!23531 d!3997))

(assert (=> b!23563 d!4167))

(assert (=> bm!2043 d!4017))

(declare-fun d!4469 () Bool)

(declare-fun e!15873 () Bool)

(assert (=> d!4469 e!15873))

(declare-fun res!14954 () Bool)

(assert (=> d!4469 (=> (not res!14954) (not e!15873))))

(declare-fun lt!9331 () ListLongMap!563)

(assert (=> d!4469 (= res!14954 (contains!229 lt!9331 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun lt!9329 () List!564)

(assert (=> d!4469 (= lt!9331 (ListLongMap!564 lt!9329))))

(declare-fun lt!9328 () Unit!522)

(declare-fun lt!9330 () Unit!522)

(assert (=> d!4469 (= lt!9328 lt!9330)))

(assert (=> d!4469 (= (getValueByKey!61 lt!9329 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4469 (= lt!9330 (lemmaContainsTupThenGetReturnValue!18 lt!9329 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4469 (= lt!9329 (insertStrictlySorted!18 (toList!297 call!2043) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4469 (= (+!44 call!2043 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) lt!9331)))

(declare-fun b!24547 () Bool)

(declare-fun res!14953 () Bool)

(assert (=> b!24547 (=> (not res!14953) (not e!15873))))

(assert (=> b!24547 (= res!14953 (= (getValueByKey!61 (toList!297 lt!9331) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(declare-fun b!24548 () Bool)

(assert (=> b!24548 (= e!15873 (contains!231 (toList!297 lt!9331) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(assert (= (and d!4469 res!14954) b!24547))

(assert (= (and b!24547 res!14953) b!24548))

(declare-fun m!19177 () Bool)

(assert (=> d!4469 m!19177))

(declare-fun m!19179 () Bool)

(assert (=> d!4469 m!19179))

(declare-fun m!19181 () Bool)

(assert (=> d!4469 m!19181))

(declare-fun m!19183 () Bool)

(assert (=> d!4469 m!19183))

(declare-fun m!19185 () Bool)

(assert (=> b!24547 m!19185))

(declare-fun m!19187 () Bool)

(assert (=> b!24548 m!19187))

(assert (=> b!23798 d!4469))

(declare-fun d!4471 () Bool)

(assert (=> d!4471 (= (validKeyInArray!0 (select (arr!597 lt!8238) lt!8248)) (and (not (= (select (arr!597 lt!8238) lt!8248) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 lt!8238) lt!8248) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23617 d!4471))

(assert (=> b!23760 d!3995))

(declare-fun d!4473 () Bool)

(declare-fun e!15875 () Bool)

(assert (=> d!4473 e!15875))

(declare-fun res!14955 () Bool)

(assert (=> d!4473 (=> res!14955 e!15875)))

(declare-fun lt!9333 () Bool)

(assert (=> d!4473 (= res!14955 (not lt!9333))))

(declare-fun lt!9334 () Bool)

(assert (=> d!4473 (= lt!9333 lt!9334)))

(declare-fun lt!9332 () Unit!522)

(declare-fun e!15874 () Unit!522)

(assert (=> d!4473 (= lt!9332 e!15874)))

(declare-fun c!3308 () Bool)

(assert (=> d!4473 (= c!3308 lt!9334)))

(assert (=> d!4473 (= lt!9334 (containsKey!25 (toList!297 lt!8565) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4473 (= (contains!229 lt!8565 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9333)))

(declare-fun b!24549 () Bool)

(declare-fun lt!9335 () Unit!522)

(assert (=> b!24549 (= e!15874 lt!9335)))

(assert (=> b!24549 (= lt!9335 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8565) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24549 (isDefined!23 (getValueByKey!61 (toList!297 lt!8565) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24550 () Bool)

(declare-fun Unit!578 () Unit!522)

(assert (=> b!24550 (= e!15874 Unit!578)))

(declare-fun b!24551 () Bool)

(assert (=> b!24551 (= e!15875 (isDefined!23 (getValueByKey!61 (toList!297 lt!8565) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4473 c!3308) b!24549))

(assert (= (and d!4473 (not c!3308)) b!24550))

(assert (= (and d!4473 (not res!14955)) b!24551))

(declare-fun m!19189 () Bool)

(assert (=> d!4473 m!19189))

(declare-fun m!19191 () Bool)

(assert (=> b!24549 m!19191))

(declare-fun m!19193 () Bool)

(assert (=> b!24549 m!19193))

(assert (=> b!24549 m!19193))

(declare-fun m!19195 () Bool)

(assert (=> b!24549 m!19195))

(assert (=> b!24551 m!19193))

(assert (=> b!24551 m!19193))

(assert (=> b!24551 m!19195))

(assert (=> bm!1995 d!4473))

(assert (=> b!23721 d!4321))

(declare-fun b!24554 () Bool)

(declare-fun e!15877 () Option!67)

(assert (=> b!24554 (= e!15877 (getValueByKey!61 (t!3229 (toList!297 lt!8656)) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!24552 () Bool)

(declare-fun e!15876 () Option!67)

(assert (=> b!24552 (= e!15876 (Some!66 (_2!495 (h!1126 (toList!297 lt!8656)))))))

(declare-fun b!24555 () Bool)

(assert (=> b!24555 (= e!15877 None!65)))

(declare-fun d!4475 () Bool)

(declare-fun c!3309 () Bool)

(assert (=> d!4475 (= c!3309 (and ((_ is Cons!560) (toList!297 lt!8656)) (= (_1!495 (h!1126 (toList!297 lt!8656))) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4475 (= (getValueByKey!61 (toList!297 lt!8656) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) e!15876)))

(declare-fun b!24553 () Bool)

(assert (=> b!24553 (= e!15876 e!15877)))

(declare-fun c!3310 () Bool)

(assert (=> b!24553 (= c!3310 (and ((_ is Cons!560) (toList!297 lt!8656)) (not (= (_1!495 (h!1126 (toList!297 lt!8656))) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4475 c!3309) b!24552))

(assert (= (and d!4475 (not c!3309)) b!24553))

(assert (= (and b!24553 c!3310) b!24554))

(assert (= (and b!24553 (not c!3310)) b!24555))

(declare-fun m!19197 () Bool)

(assert (=> b!24554 m!19197))

(assert (=> b!23686 d!4475))

(assert (=> b!23551 d!4167))

(assert (=> d!4027 d!3975))

(declare-fun d!4477 () Bool)

(declare-fun e!15880 () Bool)

(assert (=> d!4477 e!15880))

(declare-fun res!14961 () Bool)

(assert (=> d!4477 (=> (not res!14961) (not e!15880))))

(declare-fun lt!9338 () SeekEntryResult!54)

(assert (=> d!4477 (= res!14961 ((_ is Found!54) lt!9338))))

(assert (=> d!4477 (= lt!9338 (seekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(assert (=> d!4477 true))

(declare-fun _$33!35 () Unit!522)

(assert (=> d!4477 (= (choose!204 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)) _$33!35)))

(declare-fun b!24560 () Bool)

(declare-fun res!14960 () Bool)

(assert (=> b!24560 (=> (not res!14960) (not e!15880))))

(assert (=> b!24560 (= res!14960 (inRange!0 (index!2338 lt!9338) (mask!4729 lt!8141)))))

(declare-fun b!24561 () Bool)

(assert (=> b!24561 (= e!15880 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!9338)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4477 res!14961) b!24560))

(assert (= (and b!24560 res!14960) b!24561))

(assert (=> d!4477 m!16774))

(declare-fun m!19199 () Bool)

(assert (=> b!24560 m!19199))

(declare-fun m!19201 () Bool)

(assert (=> b!24561 m!19201))

(assert (=> d!4027 d!4477))

(assert (=> d!4027 d!4171))

(declare-fun b!24562 () Bool)

(declare-fun e!15881 () Bool)

(declare-fun e!15882 () Bool)

(assert (=> b!24562 (= e!15881 e!15882)))

(declare-fun lt!9341 () (_ BitVec 64))

(assert (=> b!24562 (= lt!9341 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!9339 () Unit!522)

(assert (=> b!24562 (= lt!9339 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 (_2!490 lt!8142)) lt!9341 #b00000000000000000000000000000000))))

(assert (=> b!24562 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) lt!9341 #b00000000000000000000000000000000)))

(declare-fun lt!9340 () Unit!522)

(assert (=> b!24562 (= lt!9340 lt!9339)))

(declare-fun res!14962 () Bool)

(assert (=> b!24562 (= res!14962 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000) (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))) (Found!54 #b00000000000000000000000000000000)))))

(assert (=> b!24562 (=> (not res!14962) (not e!15882))))

(declare-fun b!24563 () Bool)

(declare-fun call!2148 () Bool)

(assert (=> b!24563 (= e!15882 call!2148)))

(declare-fun bm!2145 () Bool)

(assert (=> bm!2145 (= call!2148 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(declare-fun d!4479 () Bool)

(declare-fun res!14963 () Bool)

(declare-fun e!15883 () Bool)

(assert (=> d!4479 (=> res!14963 e!15883)))

(assert (=> d!4479 (= res!14963 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4479 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))) e!15883)))

(declare-fun b!24564 () Bool)

(assert (=> b!24564 (= e!15881 call!2148)))

(declare-fun b!24565 () Bool)

(assert (=> b!24565 (= e!15883 e!15881)))

(declare-fun c!3311 () Bool)

(assert (=> b!24565 (= c!3311 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (= (and d!4479 (not res!14963)) b!24565))

(assert (= (and b!24565 c!3311) b!24562))

(assert (= (and b!24565 (not c!3311)) b!24564))

(assert (= (and b!24562 res!14962) b!24563))

(assert (= (or b!24563 b!24564) bm!2145))

(assert (=> b!24562 m!17080))

(declare-fun m!19203 () Bool)

(assert (=> b!24562 m!19203))

(declare-fun m!19205 () Bool)

(assert (=> b!24562 m!19205))

(assert (=> b!24562 m!17080))

(declare-fun m!19207 () Bool)

(assert (=> b!24562 m!19207))

(declare-fun m!19209 () Bool)

(assert (=> bm!2145 m!19209))

(assert (=> b!24565 m!17080))

(assert (=> b!24565 m!17080))

(assert (=> b!24565 m!17086))

(assert (=> b!23722 d!4479))

(declare-fun d!4481 () Bool)

(assert (=> d!4481 (contains!229 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!9342 () Unit!522)

(assert (=> d!4481 (= lt!9342 (choose!216 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> d!4481 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4481 (= (lemmaArrayContainsKeyThenInListMap!3 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9342)))

(declare-fun bs!1004 () Bool)

(assert (= bs!1004 d!4481))

(assert (=> bs!1004 m!16784))

(assert (=> bs!1004 m!16784))

(assert (=> bs!1004 m!16994))

(declare-fun m!19211 () Bool)

(assert (=> bs!1004 m!19211))

(assert (=> bs!1004 m!16908))

(assert (=> b!23526 d!4481))

(assert (=> b!23526 d!4133))

(assert (=> b!23526 d!3977))

(declare-fun d!4483 () Bool)

(assert (=> d!4483 (= (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356)))) (not (isEmpty!172 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))))

(declare-fun bs!1005 () Bool)

(assert (= bs!1005 d!4483))

(assert (=> bs!1005 m!17307))

(declare-fun m!19213 () Bool)

(assert (=> bs!1005 m!19213))

(assert (=> b!23690 d!4483))

(declare-fun e!15885 () Option!67)

(declare-fun b!24568 () Bool)

(assert (=> b!24568 (= e!15885 (getValueByKey!61 (t!3229 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))

(declare-fun b!24566 () Bool)

(declare-fun e!15884 () Option!67)

(assert (=> b!24566 (= e!15884 (Some!66 (_2!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))))))

(declare-fun b!24569 () Bool)

(assert (=> b!24569 (= e!15885 None!65)))

(declare-fun c!3312 () Bool)

(declare-fun d!4485 () Bool)

(assert (=> d!4485 (= c!3312 (and ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))) (= (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356)))))))

(assert (=> d!4485 (= (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))) e!15884)))

(declare-fun b!24567 () Bool)

(assert (=> b!24567 (= e!15884 e!15885)))

(declare-fun c!3313 () Bool)

(assert (=> b!24567 (= c!3313 (and ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))) (not (= (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))))

(assert (= (and d!4485 c!3312) b!24566))

(assert (= (and d!4485 (not c!3312)) b!24567))

(assert (= (and b!24567 c!3313) b!24568))

(assert (= (and b!24567 (not c!3313)) b!24569))

(assert (=> b!24568 m!16854))

(declare-fun m!19215 () Bool)

(assert (=> b!24568 m!19215))

(assert (=> b!23690 d!4485))

(assert (=> b!23803 d!4069))

(assert (=> b!23803 d!4071))

(declare-fun b!24570 () Bool)

(declare-fun e!15886 () Bool)

(declare-fun e!15887 () Bool)

(assert (=> b!24570 (= e!15886 e!15887)))

(declare-fun lt!9345 () (_ BitVec 64))

(assert (=> b!24570 (= lt!9345 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000))))

(declare-fun lt!9343 () Unit!522)

(assert (=> b!24570 (= lt!9343 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 (_2!490 lt!8361)) lt!9345 #b00000000000000000000000000000000))))

(assert (=> b!24570 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8361)) lt!9345 #b00000000000000000000000000000000)))

(declare-fun lt!9344 () Unit!522)

(assert (=> b!24570 (= lt!9344 lt!9343)))

(declare-fun res!14964 () Bool)

(assert (=> b!24570 (= res!14964 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000) (_keys!3163 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361))) (Found!54 #b00000000000000000000000000000000)))))

(assert (=> b!24570 (=> (not res!14964) (not e!15887))))

(declare-fun b!24571 () Bool)

(declare-fun call!2149 () Bool)

(assert (=> b!24571 (= e!15887 call!2149)))

(declare-fun bm!2146 () Bool)

(assert (=> bm!2146 (= call!2149 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361))))))

(declare-fun d!4487 () Bool)

(declare-fun res!14965 () Bool)

(declare-fun e!15888 () Bool)

(assert (=> d!4487 (=> res!14965 e!15888)))

(assert (=> d!4487 (= res!14965 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))))))

(assert (=> d!4487 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361))) e!15888)))

(declare-fun b!24572 () Bool)

(assert (=> b!24572 (= e!15886 call!2149)))

(declare-fun b!24573 () Bool)

(assert (=> b!24573 (= e!15888 e!15886)))

(declare-fun c!3314 () Bool)

(assert (=> b!24573 (= c!3314 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)))))

(assert (= (and d!4487 (not res!14965)) b!24573))

(assert (= (and b!24573 c!3314) b!24570))

(assert (= (and b!24573 (not c!3314)) b!24572))

(assert (= (and b!24570 res!14964) b!24571))

(assert (= (or b!24571 b!24572) bm!2146))

(assert (=> b!24570 m!19011))

(declare-fun m!19217 () Bool)

(assert (=> b!24570 m!19217))

(declare-fun m!19219 () Bool)

(assert (=> b!24570 m!19219))

(assert (=> b!24570 m!19011))

(declare-fun m!19221 () Bool)

(assert (=> b!24570 m!19221))

(declare-fun m!19223 () Bool)

(assert (=> bm!2146 m!19223))

(assert (=> b!24573 m!19011))

(assert (=> b!24573 m!19011))

(assert (=> b!24573 m!19017))

(assert (=> b!23719 d!4487))

(assert (=> b!23476 d!4391))

(assert (=> b!23741 d!4167))

(declare-fun d!4489 () Bool)

(declare-fun res!14966 () Bool)

(declare-fun e!15889 () Bool)

(assert (=> d!4489 (=> res!14966 e!15889)))

(assert (=> d!4489 (= res!14966 (and ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (= (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329)))))))

(assert (=> d!4489 (= (containsKey!25 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))) e!15889)))

(declare-fun b!24574 () Bool)

(declare-fun e!15890 () Bool)

(assert (=> b!24574 (= e!15889 e!15890)))

(declare-fun res!14967 () Bool)

(assert (=> b!24574 (=> (not res!14967) (not e!15890))))

(assert (=> b!24574 (= res!14967 (and (or (not ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (bvsle (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329)))) ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (bvslt (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329)))))))

(declare-fun b!24575 () Bool)

(assert (=> b!24575 (= e!15890 (containsKey!25 (t!3229 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329))))))

(assert (= (and d!4489 (not res!14966)) b!24574))

(assert (= (and b!24574 res!14967) b!24575))

(assert (=> b!24575 m!16794))

(declare-fun m!19225 () Bool)

(assert (=> b!24575 m!19225))

(assert (=> d!4069 d!4489))

(declare-fun d!4491 () Bool)

(declare-fun e!15892 () Bool)

(assert (=> d!4491 e!15892))

(declare-fun res!14968 () Bool)

(assert (=> d!4491 (=> res!14968 e!15892)))

(declare-fun lt!9347 () Bool)

(assert (=> d!4491 (= res!14968 (not lt!9347))))

(declare-fun lt!9348 () Bool)

(assert (=> d!4491 (= lt!9347 lt!9348)))

(declare-fun lt!9346 () Unit!522)

(declare-fun e!15891 () Unit!522)

(assert (=> d!4491 (= lt!9346 e!15891)))

(declare-fun c!3315 () Bool)

(assert (=> d!4491 (= c!3315 lt!9348)))

(assert (=> d!4491 (= lt!9348 (containsKey!25 (toList!297 lt!8787) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4491 (= (contains!229 lt!8787 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))) lt!9347)))

(declare-fun b!24576 () Bool)

(declare-fun lt!9349 () Unit!522)

(assert (=> b!24576 (= e!15891 lt!9349)))

(assert (=> b!24576 (= lt!9349 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8787) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> b!24576 (isDefined!23 (getValueByKey!61 (toList!297 lt!8787) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24577 () Bool)

(declare-fun Unit!579 () Unit!522)

(assert (=> b!24577 (= e!15891 Unit!579)))

(declare-fun b!24578 () Bool)

(assert (=> b!24578 (= e!15892 (isDefined!23 (getValueByKey!61 (toList!297 lt!8787) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(assert (= (and d!4491 c!3315) b!24576))

(assert (= (and d!4491 (not c!3315)) b!24577))

(assert (= (and d!4491 (not res!14968)) b!24578))

(declare-fun m!19227 () Bool)

(assert (=> d!4491 m!19227))

(declare-fun m!19229 () Bool)

(assert (=> b!24576 m!19229))

(assert (=> b!24576 m!17605))

(assert (=> b!24576 m!17605))

(declare-fun m!19231 () Bool)

(assert (=> b!24576 m!19231))

(assert (=> b!24578 m!17605))

(assert (=> b!24578 m!17605))

(assert (=> b!24578 m!19231))

(assert (=> d!4083 d!4491))

(declare-fun e!15894 () Option!67)

(declare-fun b!24581 () Bool)

(assert (=> b!24581 (= e!15894 (getValueByKey!61 (t!3229 lt!8785) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24579 () Bool)

(declare-fun e!15893 () Option!67)

(assert (=> b!24579 (= e!15893 (Some!66 (_2!495 (h!1126 lt!8785))))))

(declare-fun b!24582 () Bool)

(assert (=> b!24582 (= e!15894 None!65)))

(declare-fun c!3316 () Bool)

(declare-fun d!4493 () Bool)

(assert (=> d!4493 (= c!3316 (and ((_ is Cons!560) lt!8785) (= (_1!495 (h!1126 lt!8785)) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(assert (=> d!4493 (= (getValueByKey!61 lt!8785 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))) e!15893)))

(declare-fun b!24580 () Bool)

(assert (=> b!24580 (= e!15893 e!15894)))

(declare-fun c!3317 () Bool)

(assert (=> b!24580 (= c!3317 (and ((_ is Cons!560) lt!8785) (not (= (_1!495 (h!1126 lt!8785)) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))))

(assert (= (and d!4493 c!3316) b!24579))

(assert (= (and d!4493 (not c!3316)) b!24580))

(assert (= (and b!24580 c!3317) b!24581))

(assert (= (and b!24580 (not c!3317)) b!24582))

(declare-fun m!19233 () Bool)

(assert (=> b!24581 m!19233))

(assert (=> d!4083 d!4493))

(declare-fun d!4495 () Bool)

(assert (=> d!4495 (= (getValueByKey!61 lt!8785 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))) (Some!66 (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun lt!9350 () Unit!522)

(assert (=> d!4495 (= lt!9350 (choose!215 lt!8785 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun e!15895 () Bool)

(assert (=> d!4495 e!15895))

(declare-fun res!14969 () Bool)

(assert (=> d!4495 (=> (not res!14969) (not e!15895))))

(assert (=> d!4495 (= res!14969 (isStrictlySorted!158 lt!8785))))

(assert (=> d!4495 (= (lemmaContainsTupThenGetReturnValue!18 lt!8785 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))) lt!9350)))

(declare-fun b!24583 () Bool)

(declare-fun res!14970 () Bool)

(assert (=> b!24583 (=> (not res!14970) (not e!15895))))

(assert (=> b!24583 (= res!14970 (containsKey!25 lt!8785 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24584 () Bool)

(assert (=> b!24584 (= e!15895 (contains!231 lt!8785 (tuple2!973 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(assert (= (and d!4495 res!14969) b!24583))

(assert (= (and b!24583 res!14970) b!24584))

(assert (=> d!4495 m!17599))

(declare-fun m!19235 () Bool)

(assert (=> d!4495 m!19235))

(declare-fun m!19237 () Bool)

(assert (=> d!4495 m!19237))

(declare-fun m!19239 () Bool)

(assert (=> b!24583 m!19239))

(declare-fun m!19241 () Bool)

(assert (=> b!24584 m!19241))

(assert (=> d!4083 d!4495))

(declare-fun b!24585 () Bool)

(declare-fun c!3318 () Bool)

(assert (=> b!24585 (= c!3318 (and ((_ is Cons!560) (toList!297 (ite c!2996 call!1927 call!1928))) (bvsgt (_1!495 (h!1126 (toList!297 (ite c!2996 call!1927 call!1928)))) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(declare-fun e!15900 () List!564)

(declare-fun e!15897 () List!564)

(assert (=> b!24585 (= e!15900 e!15897)))

(declare-fun b!24586 () Bool)

(declare-fun c!3320 () Bool)

(declare-fun e!15898 () List!564)

(assert (=> b!24586 (= e!15898 (ite c!3320 (t!3229 (toList!297 (ite c!2996 call!1927 call!1928))) (ite c!3318 (Cons!560 (h!1126 (toList!297 (ite c!2996 call!1927 call!1928))) (t!3229 (toList!297 (ite c!2996 call!1927 call!1928)))) Nil!561)))))

(declare-fun b!24587 () Bool)

(assert (=> b!24587 (= e!15898 (insertStrictlySorted!18 (t!3229 (toList!297 (ite c!2996 call!1927 call!1928))) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24588 () Bool)

(declare-fun call!2151 () List!564)

(assert (=> b!24588 (= e!15897 call!2151)))

(declare-fun c!3321 () Bool)

(declare-fun bm!2147 () Bool)

(declare-fun call!2150 () List!564)

(assert (=> bm!2147 (= call!2150 ($colon$colon!30 e!15898 (ite c!3321 (h!1126 (toList!297 (ite c!2996 call!1927 call!1928))) (tuple2!973 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))))

(declare-fun c!3319 () Bool)

(assert (=> bm!2147 (= c!3319 c!3321)))

(declare-fun lt!9351 () List!564)

(declare-fun b!24589 () Bool)

(declare-fun e!15899 () Bool)

(assert (=> b!24589 (= e!15899 (contains!231 lt!9351 (tuple2!973 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(declare-fun b!24590 () Bool)

(declare-fun call!2152 () List!564)

(assert (=> b!24590 (= e!15900 call!2152)))

(declare-fun b!24591 () Bool)

(declare-fun e!15896 () List!564)

(assert (=> b!24591 (= e!15896 e!15900)))

(assert (=> b!24591 (= c!3320 (and ((_ is Cons!560) (toList!297 (ite c!2996 call!1927 call!1928))) (= (_1!495 (h!1126 (toList!297 (ite c!2996 call!1927 call!1928)))) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(declare-fun b!24592 () Bool)

(declare-fun res!14972 () Bool)

(assert (=> b!24592 (=> (not res!14972) (not e!15899))))

(assert (=> b!24592 (= res!14972 (containsKey!25 lt!9351 (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun bm!2149 () Bool)

(assert (=> bm!2149 (= call!2152 call!2150)))

(declare-fun b!24593 () Bool)

(assert (=> b!24593 (= e!15897 call!2151)))

(declare-fun b!24594 () Bool)

(assert (=> b!24594 (= e!15896 call!2150)))

(declare-fun d!4497 () Bool)

(assert (=> d!4497 e!15899))

(declare-fun res!14971 () Bool)

(assert (=> d!4497 (=> (not res!14971) (not e!15899))))

(assert (=> d!4497 (= res!14971 (isStrictlySorted!158 lt!9351))))

(assert (=> d!4497 (= lt!9351 e!15896)))

(assert (=> d!4497 (= c!3321 (and ((_ is Cons!560) (toList!297 (ite c!2996 call!1927 call!1928))) (bvslt (_1!495 (h!1126 (toList!297 (ite c!2996 call!1927 call!1928)))) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(assert (=> d!4497 (isStrictlySorted!158 (toList!297 (ite c!2996 call!1927 call!1928)))))

(assert (=> d!4497 (= (insertStrictlySorted!18 (toList!297 (ite c!2996 call!1927 call!1928)) (_1!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (_2!495 (ite c!2996 (ite c!2995 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))) lt!9351)))

(declare-fun bm!2148 () Bool)

(assert (=> bm!2148 (= call!2151 call!2152)))

(assert (= (and d!4497 c!3321) b!24594))

(assert (= (and d!4497 (not c!3321)) b!24591))

(assert (= (and b!24591 c!3320) b!24590))

(assert (= (and b!24591 (not c!3320)) b!24585))

(assert (= (and b!24585 c!3318) b!24588))

(assert (= (and b!24585 (not c!3318)) b!24593))

(assert (= (or b!24588 b!24593) bm!2148))

(assert (= (or b!24590 bm!2148) bm!2149))

(assert (= (or b!24594 bm!2149) bm!2147))

(assert (= (and bm!2147 c!3319) b!24587))

(assert (= (and bm!2147 (not c!3319)) b!24586))

(assert (= (and d!4497 res!14971) b!24592))

(assert (= (and b!24592 res!14972) b!24589))

(declare-fun m!19243 () Bool)

(assert (=> b!24592 m!19243))

(declare-fun m!19245 () Bool)

(assert (=> b!24589 m!19245))

(declare-fun m!19247 () Bool)

(assert (=> bm!2147 m!19247))

(declare-fun m!19249 () Bool)

(assert (=> b!24587 m!19249))

(declare-fun m!19251 () Bool)

(assert (=> d!4497 m!19251))

(declare-fun m!19253 () Bool)

(assert (=> d!4497 m!19253))

(assert (=> d!4083 d!4497))

(assert (=> b!23729 d!4167))

(declare-fun d!4499 () Bool)

(assert (=> d!4499 (= (apply!29 lt!8672 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8672) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1006 () Bool)

(assert (= bs!1006 d!4499))

(assert (=> bs!1006 m!18083))

(assert (=> bs!1006 m!18083))

(declare-fun m!19255 () Bool)

(assert (=> bs!1006 m!19255))

(assert (=> b!23709 d!4499))

(declare-fun d!4501 () Bool)

(declare-fun e!15902 () Bool)

(assert (=> d!4501 e!15902))

(declare-fun res!14973 () Bool)

(assert (=> d!4501 (=> res!14973 e!15902)))

(declare-fun lt!9353 () Bool)

(assert (=> d!4501 (= res!14973 (not lt!9353))))

(declare-fun lt!9354 () Bool)

(assert (=> d!4501 (= lt!9353 lt!9354)))

(declare-fun lt!9352 () Unit!522)

(declare-fun e!15901 () Unit!522)

(assert (=> d!4501 (= lt!9352 e!15901)))

(declare-fun c!3322 () Bool)

(assert (=> d!4501 (= c!3322 lt!9354)))

(assert (=> d!4501 (= lt!9354 (containsKey!25 (toList!297 lt!8656) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4501 (= (contains!229 lt!8656 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9353)))

(declare-fun b!24595 () Bool)

(declare-fun lt!9355 () Unit!522)

(assert (=> b!24595 (= e!15901 lt!9355)))

(assert (=> b!24595 (= lt!9355 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8656) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> b!24595 (isDefined!23 (getValueByKey!61 (toList!297 lt!8656) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!24596 () Bool)

(declare-fun Unit!580 () Unit!522)

(assert (=> b!24596 (= e!15901 Unit!580)))

(declare-fun b!24597 () Bool)

(assert (=> b!24597 (= e!15902 (isDefined!23 (getValueByKey!61 (toList!297 lt!8656) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (= (and d!4501 c!3322) b!24595))

(assert (= (and d!4501 (not c!3322)) b!24596))

(assert (= (and d!4501 (not res!14973)) b!24597))

(declare-fun m!19257 () Bool)

(assert (=> d!4501 m!19257))

(declare-fun m!19259 () Bool)

(assert (=> b!24595 m!19259))

(assert (=> b!24595 m!17299))

(assert (=> b!24595 m!17299))

(declare-fun m!19261 () Bool)

(assert (=> b!24595 m!19261))

(assert (=> b!24597 m!17299))

(assert (=> b!24597 m!17299))

(assert (=> b!24597 m!19261))

(assert (=> d!4037 d!4501))

(declare-fun b!24600 () Bool)

(declare-fun e!15904 () Option!67)

(assert (=> b!24600 (= e!15904 (getValueByKey!61 (t!3229 lt!8654) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!24598 () Bool)

(declare-fun e!15903 () Option!67)

(assert (=> b!24598 (= e!15903 (Some!66 (_2!495 (h!1126 lt!8654))))))

(declare-fun b!24601 () Bool)

(assert (=> b!24601 (= e!15904 None!65)))

(declare-fun d!4503 () Bool)

(declare-fun c!3323 () Bool)

(assert (=> d!4503 (= c!3323 (and ((_ is Cons!560) lt!8654) (= (_1!495 (h!1126 lt!8654)) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4503 (= (getValueByKey!61 lt!8654 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) e!15903)))

(declare-fun b!24599 () Bool)

(assert (=> b!24599 (= e!15903 e!15904)))

(declare-fun c!3324 () Bool)

(assert (=> b!24599 (= c!3324 (and ((_ is Cons!560) lt!8654) (not (= (_1!495 (h!1126 lt!8654)) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4503 c!3323) b!24598))

(assert (= (and d!4503 (not c!3323)) b!24599))

(assert (= (and b!24599 c!3324) b!24600))

(assert (= (and b!24599 (not c!3324)) b!24601))

(declare-fun m!19263 () Bool)

(assert (=> b!24600 m!19263))

(assert (=> d!4037 d!4503))

(declare-fun d!4505 () Bool)

(assert (=> d!4505 (= (getValueByKey!61 lt!8654 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun lt!9356 () Unit!522)

(assert (=> d!4505 (= lt!9356 (choose!215 lt!8654 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun e!15905 () Bool)

(assert (=> d!4505 e!15905))

(declare-fun res!14974 () Bool)

(assert (=> d!4505 (=> (not res!14974) (not e!15905))))

(assert (=> d!4505 (= res!14974 (isStrictlySorted!158 lt!8654))))

(assert (=> d!4505 (= (lemmaContainsTupThenGetReturnValue!18 lt!8654 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9356)))

(declare-fun b!24602 () Bool)

(declare-fun res!14975 () Bool)

(assert (=> b!24602 (=> (not res!14975) (not e!15905))))

(assert (=> b!24602 (= res!14975 (containsKey!25 lt!8654 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!24603 () Bool)

(assert (=> b!24603 (= e!15905 (contains!231 lt!8654 (tuple2!973 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (= (and d!4505 res!14974) b!24602))

(assert (= (and b!24602 res!14975) b!24603))

(assert (=> d!4505 m!17293))

(declare-fun m!19265 () Bool)

(assert (=> d!4505 m!19265))

(declare-fun m!19267 () Bool)

(assert (=> d!4505 m!19267))

(declare-fun m!19269 () Bool)

(assert (=> b!24602 m!19269))

(declare-fun m!19271 () Bool)

(assert (=> b!24603 m!19271))

(assert (=> d!4037 d!4505))

(declare-fun b!24604 () Bool)

(declare-fun c!3325 () Bool)

(assert (=> b!24604 (= c!3325 (and ((_ is Cons!560) (toList!297 call!1957)) (bvsgt (_1!495 (h!1126 (toList!297 call!1957))) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun e!15910 () List!564)

(declare-fun e!15907 () List!564)

(assert (=> b!24604 (= e!15910 e!15907)))

(declare-fun c!3327 () Bool)

(declare-fun e!15908 () List!564)

(declare-fun b!24605 () Bool)

(assert (=> b!24605 (= e!15908 (ite c!3327 (t!3229 (toList!297 call!1957)) (ite c!3325 (Cons!560 (h!1126 (toList!297 call!1957)) (t!3229 (toList!297 call!1957))) Nil!561)))))

(declare-fun b!24606 () Bool)

(assert (=> b!24606 (= e!15908 (insertStrictlySorted!18 (t!3229 (toList!297 call!1957)) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!24607 () Bool)

(declare-fun call!2154 () List!564)

(assert (=> b!24607 (= e!15907 call!2154)))

(declare-fun bm!2150 () Bool)

(declare-fun c!3328 () Bool)

(declare-fun call!2153 () List!564)

(assert (=> bm!2150 (= call!2153 ($colon$colon!30 e!15908 (ite c!3328 (h!1126 (toList!297 call!1957)) (tuple2!973 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun c!3326 () Bool)

(assert (=> bm!2150 (= c!3326 c!3328)))

(declare-fun b!24608 () Bool)

(declare-fun e!15909 () Bool)

(declare-fun lt!9357 () List!564)

(assert (=> b!24608 (= e!15909 (contains!231 lt!9357 (tuple2!973 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24609 () Bool)

(declare-fun call!2155 () List!564)

(assert (=> b!24609 (= e!15910 call!2155)))

(declare-fun b!24610 () Bool)

(declare-fun e!15906 () List!564)

(assert (=> b!24610 (= e!15906 e!15910)))

(assert (=> b!24610 (= c!3327 (and ((_ is Cons!560) (toList!297 call!1957)) (= (_1!495 (h!1126 (toList!297 call!1957))) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24611 () Bool)

(declare-fun res!14977 () Bool)

(assert (=> b!24611 (=> (not res!14977) (not e!15909))))

(assert (=> b!24611 (= res!14977 (containsKey!25 lt!9357 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun bm!2152 () Bool)

(assert (=> bm!2152 (= call!2155 call!2153)))

(declare-fun b!24612 () Bool)

(assert (=> b!24612 (= e!15907 call!2154)))

(declare-fun b!24613 () Bool)

(assert (=> b!24613 (= e!15906 call!2153)))

(declare-fun d!4507 () Bool)

(assert (=> d!4507 e!15909))

(declare-fun res!14976 () Bool)

(assert (=> d!4507 (=> (not res!14976) (not e!15909))))

(assert (=> d!4507 (= res!14976 (isStrictlySorted!158 lt!9357))))

(assert (=> d!4507 (= lt!9357 e!15906)))

(assert (=> d!4507 (= c!3328 (and ((_ is Cons!560) (toList!297 call!1957)) (bvslt (_1!495 (h!1126 (toList!297 call!1957))) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4507 (isStrictlySorted!158 (toList!297 call!1957))))

(assert (=> d!4507 (= (insertStrictlySorted!18 (toList!297 call!1957) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9357)))

(declare-fun bm!2151 () Bool)

(assert (=> bm!2151 (= call!2154 call!2155)))

(assert (= (and d!4507 c!3328) b!24613))

(assert (= (and d!4507 (not c!3328)) b!24610))

(assert (= (and b!24610 c!3327) b!24609))

(assert (= (and b!24610 (not c!3327)) b!24604))

(assert (= (and b!24604 c!3325) b!24607))

(assert (= (and b!24604 (not c!3325)) b!24612))

(assert (= (or b!24607 b!24612) bm!2151))

(assert (= (or b!24609 bm!2151) bm!2152))

(assert (= (or b!24613 bm!2152) bm!2150))

(assert (= (and bm!2150 c!3326) b!24606))

(assert (= (and bm!2150 (not c!3326)) b!24605))

(assert (= (and d!4507 res!14976) b!24611))

(assert (= (and b!24611 res!14977) b!24608))

(declare-fun m!19273 () Bool)

(assert (=> b!24611 m!19273))

(declare-fun m!19275 () Bool)

(assert (=> b!24608 m!19275))

(declare-fun m!19277 () Bool)

(assert (=> bm!2150 m!19277))

(declare-fun m!19279 () Bool)

(assert (=> b!24606 m!19279))

(declare-fun m!19281 () Bool)

(assert (=> d!4507 m!19281))

(declare-fun m!19283 () Bool)

(assert (=> d!4507 m!19283))

(assert (=> d!4037 d!4507))

(declare-fun d!4509 () Bool)

(declare-fun e!15912 () Bool)

(assert (=> d!4509 e!15912))

(declare-fun res!14978 () Bool)

(assert (=> d!4509 (=> res!14978 e!15912)))

(declare-fun lt!9359 () Bool)

(assert (=> d!4509 (= res!14978 (not lt!9359))))

(declare-fun lt!9360 () Bool)

(assert (=> d!4509 (= lt!9359 lt!9360)))

(declare-fun lt!9358 () Unit!522)

(declare-fun e!15911 () Unit!522)

(assert (=> d!4509 (= lt!9358 e!15911)))

(declare-fun c!3329 () Bool)

(assert (=> d!4509 (= c!3329 lt!9360)))

(assert (=> d!4509 (= lt!9360 (containsKey!25 (toList!297 lt!8447) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4509 (= (contains!229 lt!8447 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9359)))

(declare-fun b!24614 () Bool)

(declare-fun lt!9361 () Unit!522)

(assert (=> b!24614 (= e!15911 lt!9361)))

(assert (=> b!24614 (= lt!9361 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8447) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24614 (isDefined!23 (getValueByKey!61 (toList!297 lt!8447) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24615 () Bool)

(declare-fun Unit!581 () Unit!522)

(assert (=> b!24615 (= e!15911 Unit!581)))

(declare-fun b!24616 () Bool)

(assert (=> b!24616 (= e!15912 (isDefined!23 (getValueByKey!61 (toList!297 lt!8447) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4509 c!3329) b!24614))

(assert (= (and d!4509 (not c!3329)) b!24615))

(assert (= (and d!4509 (not res!14978)) b!24616))

(declare-fun m!19285 () Bool)

(assert (=> d!4509 m!19285))

(declare-fun m!19287 () Bool)

(assert (=> b!24614 m!19287))

(declare-fun m!19289 () Bool)

(assert (=> b!24614 m!19289))

(assert (=> b!24614 m!19289))

(declare-fun m!19291 () Bool)

(assert (=> b!24614 m!19291))

(assert (=> b!24616 m!19289))

(assert (=> b!24616 m!19289))

(assert (=> b!24616 m!19291))

(assert (=> bm!1976 d!4509))

(declare-fun d!4511 () Bool)

(assert (=> d!4511 (= (apply!29 lt!8642 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8642) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1007 () Bool)

(assert (= bs!1007 d!4511))

(declare-fun m!19293 () Bool)

(assert (=> bs!1007 m!19293))

(assert (=> bs!1007 m!19293))

(declare-fun m!19295 () Bool)

(assert (=> bs!1007 m!19295))

(assert (=> b!23666 d!4511))

(assert (=> b!23464 d!4391))

(declare-fun d!4513 () Bool)

(declare-fun e!15914 () Bool)

(assert (=> d!4513 e!15914))

(declare-fun res!14979 () Bool)

(assert (=> d!4513 (=> res!14979 e!15914)))

(declare-fun lt!9363 () Bool)

(assert (=> d!4513 (= res!14979 (not lt!9363))))

(declare-fun lt!9364 () Bool)

(assert (=> d!4513 (= lt!9363 lt!9364)))

(declare-fun lt!9362 () Unit!522)

(declare-fun e!15913 () Unit!522)

(assert (=> d!4513 (= lt!9362 e!15913)))

(declare-fun c!3330 () Bool)

(assert (=> d!4513 (= c!3330 lt!9364)))

(assert (=> d!4513 (= lt!9364 (containsKey!25 (toList!297 lt!8642) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> d!4513 (= (contains!229 lt!8642 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) lt!9363)))

(declare-fun b!24617 () Bool)

(declare-fun lt!9365 () Unit!522)

(assert (=> b!24617 (= e!15913 lt!9365)))

(assert (=> b!24617 (= lt!9365 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8642) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24617 (isDefined!23 (getValueByKey!61 (toList!297 lt!8642) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24618 () Bool)

(declare-fun Unit!582 () Unit!522)

(assert (=> b!24618 (= e!15913 Unit!582)))

(declare-fun b!24619 () Bool)

(assert (=> b!24619 (= e!15914 (isDefined!23 (getValueByKey!61 (toList!297 lt!8642) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(assert (= (and d!4513 c!3330) b!24617))

(assert (= (and d!4513 (not c!3330)) b!24618))

(assert (= (and d!4513 (not res!14979)) b!24619))

(assert (=> d!4513 m!16934))

(declare-fun m!19297 () Bool)

(assert (=> d!4513 m!19297))

(assert (=> b!24617 m!16934))

(declare-fun m!19299 () Bool)

(assert (=> b!24617 m!19299))

(assert (=> b!24617 m!16934))

(declare-fun m!19301 () Bool)

(assert (=> b!24617 m!19301))

(assert (=> b!24617 m!19301))

(declare-fun m!19303 () Bool)

(assert (=> b!24617 m!19303))

(assert (=> b!24619 m!16934))

(assert (=> b!24619 m!19301))

(assert (=> b!24619 m!19301))

(assert (=> b!24619 m!19303))

(assert (=> b!23678 d!4513))

(declare-fun d!4515 () Bool)

(declare-fun e!15915 () Bool)

(assert (=> d!4515 e!15915))

(declare-fun res!14981 () Bool)

(assert (=> d!4515 (=> (not res!14981) (not e!15915))))

(declare-fun lt!9369 () ListLongMap!563)

(assert (=> d!4515 (= res!14981 (contains!229 lt!9369 (_1!495 (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(declare-fun lt!9367 () List!564)

(assert (=> d!4515 (= lt!9369 (ListLongMap!564 lt!9367))))

(declare-fun lt!9366 () Unit!522)

(declare-fun lt!9368 () Unit!522)

(assert (=> d!4515 (= lt!9366 lt!9368)))

(assert (=> d!4515 (= (getValueByKey!61 lt!9367 (_1!495 (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))) (Some!66 (_2!495 (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4515 (= lt!9368 (lemmaContainsTupThenGetReturnValue!18 lt!9367 (_1!495 (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (_2!495 (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4515 (= lt!9367 (insertStrictlySorted!18 (toList!297 (ite c!3120 call!2044 (ite c!3121 call!2039 call!2045))) (_1!495 (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (_2!495 (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4515 (= (+!44 (ite c!3120 call!2044 (ite c!3121 call!2039 call!2045)) (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) lt!9369)))

(declare-fun b!24620 () Bool)

(declare-fun res!14980 () Bool)

(assert (=> b!24620 (=> (not res!14980) (not e!15915))))

(assert (=> b!24620 (= res!14980 (= (getValueByKey!61 (toList!297 lt!9369) (_1!495 (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))) (Some!66 (_2!495 (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))))

(declare-fun b!24621 () Bool)

(assert (=> b!24621 (= e!15915 (contains!231 (toList!297 lt!9369) (ite (or c!3120 c!3121) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (= (and d!4515 res!14981) b!24620))

(assert (= (and b!24620 res!14980) b!24621))

(declare-fun m!19305 () Bool)

(assert (=> d!4515 m!19305))

(declare-fun m!19307 () Bool)

(assert (=> d!4515 m!19307))

(declare-fun m!19309 () Bool)

(assert (=> d!4515 m!19309))

(declare-fun m!19311 () Bool)

(assert (=> d!4515 m!19311))

(declare-fun m!19313 () Bool)

(assert (=> b!24620 m!19313))

(declare-fun m!19315 () Bool)

(assert (=> b!24621 m!19315))

(assert (=> bm!2039 d!4515))

(assert (=> d!3985 d!4171))

(declare-fun d!4517 () Bool)

(declare-fun e!15916 () Bool)

(assert (=> d!4517 e!15916))

(declare-fun res!14983 () Bool)

(assert (=> d!4517 (=> (not res!14983) (not e!15916))))

(declare-fun lt!9373 () ListLongMap!563)

(assert (=> d!4517 (= res!14983 (contains!229 lt!9373 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun lt!9371 () List!564)

(assert (=> d!4517 (= lt!9373 (ListLongMap!564 lt!9371))))

(declare-fun lt!9370 () Unit!522)

(declare-fun lt!9372 () Unit!522)

(assert (=> d!4517 (= lt!9370 lt!9372)))

(assert (=> d!4517 (= (getValueByKey!61 lt!9371 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4517 (= lt!9372 (lemmaContainsTupThenGetReturnValue!18 lt!9371 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4517 (= lt!9371 (insertStrictlySorted!18 (toList!297 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4517 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9373)))

(declare-fun b!24622 () Bool)

(declare-fun res!14982 () Bool)

(assert (=> b!24622 (=> (not res!14982) (not e!15916))))

(assert (=> b!24622 (= res!14982 (= (getValueByKey!61 (toList!297 lt!9373) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24623 () Bool)

(assert (=> b!24623 (= e!15916 (contains!231 (toList!297 lt!9373) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (= (and d!4517 res!14983) b!24622))

(assert (= (and b!24622 res!14982) b!24623))

(declare-fun m!19317 () Bool)

(assert (=> d!4517 m!19317))

(declare-fun m!19319 () Bool)

(assert (=> d!4517 m!19319))

(declare-fun m!19321 () Bool)

(assert (=> d!4517 m!19321))

(declare-fun m!19323 () Bool)

(assert (=> d!4517 m!19323))

(declare-fun m!19325 () Bool)

(assert (=> b!24622 m!19325))

(declare-fun m!19327 () Bool)

(assert (=> b!24623 m!19327))

(assert (=> d!3985 d!4517))

(declare-fun d!4519 () Bool)

(assert (=> d!4519 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> d!4519 true))

(declare-fun _$8!39 () Unit!522)

(assert (=> d!4519 (= (choose!205 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) _$8!39)))

(declare-fun bs!1008 () Bool)

(assert (= bs!1008 d!4519))

(assert (=> bs!1008 m!16784))

(assert (=> bs!1008 m!16784))

(assert (=> bs!1008 m!17058))

(assert (=> bs!1008 m!17056))

(assert (=> d!3985 d!4519))

(assert (=> d!3985 d!3977))

(declare-fun b!24624 () Bool)

(declare-fun e!15925 () ListLongMap!563)

(declare-fun call!2158 () ListLongMap!563)

(assert (=> b!24624 (= e!15925 call!2158)))

(declare-fun b!24625 () Bool)

(declare-fun e!15928 () Bool)

(declare-fun lt!9385 () ListLongMap!563)

(assert (=> b!24625 (= e!15928 (= (apply!29 lt!9385 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun b!24626 () Bool)

(declare-fun e!15917 () Bool)

(assert (=> b!24626 (= e!15917 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2153 () Bool)

(declare-fun call!2161 () ListLongMap!563)

(assert (=> bm!2153 (= call!2161 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!24627 () Bool)

(declare-fun e!15922 () ListLongMap!563)

(assert (=> b!24627 (= e!15922 e!15925)))

(declare-fun c!3335 () Bool)

(assert (=> b!24627 (= c!3335 (and (not (= (bvand lt!8337 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!8337 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24628 () Bool)

(declare-fun e!15927 () Bool)

(declare-fun call!2157 () Bool)

(assert (=> b!24628 (= e!15927 (not call!2157))))

(declare-fun b!24629 () Bool)

(declare-fun e!15924 () Bool)

(assert (=> b!24629 (= e!15924 e!15928)))

(declare-fun res!14989 () Bool)

(declare-fun call!2159 () Bool)

(assert (=> b!24629 (= res!14989 call!2159)))

(assert (=> b!24629 (=> (not res!14989) (not e!15928))))

(declare-fun bm!2154 () Bool)

(declare-fun call!2160 () ListLongMap!563)

(assert (=> bm!2154 (= call!2158 call!2160)))

(declare-fun b!24631 () Bool)

(assert (=> b!24631 (= e!15924 (not call!2159))))

(declare-fun bm!2155 () Bool)

(declare-fun call!2156 () ListLongMap!563)

(assert (=> bm!2155 (= call!2156 call!2161)))

(declare-fun b!24632 () Bool)

(declare-fun e!15923 () Bool)

(assert (=> b!24632 (= e!15923 e!15924)))

(declare-fun c!3336 () Bool)

(assert (=> b!24632 (= c!3336 (not (= (bvand lt!8337 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24633 () Bool)

(declare-fun e!15918 () Unit!522)

(declare-fun lt!9374 () Unit!522)

(assert (=> b!24633 (= e!15918 lt!9374)))

(declare-fun lt!9390 () ListLongMap!563)

(assert (=> b!24633 (= lt!9390 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9393 () (_ BitVec 64))

(assert (=> b!24633 (= lt!9393 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9388 () (_ BitVec 64))

(assert (=> b!24633 (= lt!9388 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9378 () Unit!522)

(assert (=> b!24633 (= lt!9378 (addStillContains!14 lt!9390 lt!9393 (zeroValue!1665 lt!8141) lt!9388))))

(assert (=> b!24633 (contains!229 (+!44 lt!9390 (tuple2!973 lt!9393 (zeroValue!1665 lt!8141))) lt!9388)))

(declare-fun lt!9379 () Unit!522)

(assert (=> b!24633 (= lt!9379 lt!9378)))

(declare-fun lt!9391 () ListLongMap!563)

(assert (=> b!24633 (= lt!9391 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9377 () (_ BitVec 64))

(assert (=> b!24633 (= lt!9377 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9375 () (_ BitVec 64))

(assert (=> b!24633 (= lt!9375 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9384 () Unit!522)

(assert (=> b!24633 (= lt!9384 (addApplyDifferent!14 lt!9391 lt!9377 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) lt!9375))))

(assert (=> b!24633 (= (apply!29 (+!44 lt!9391 (tuple2!973 lt!9377 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9375) (apply!29 lt!9391 lt!9375))))

(declare-fun lt!9382 () Unit!522)

(assert (=> b!24633 (= lt!9382 lt!9384)))

(declare-fun lt!9380 () ListLongMap!563)

(assert (=> b!24633 (= lt!9380 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9395 () (_ BitVec 64))

(assert (=> b!24633 (= lt!9395 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9387 () (_ BitVec 64))

(assert (=> b!24633 (= lt!9387 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9376 () Unit!522)

(assert (=> b!24633 (= lt!9376 (addApplyDifferent!14 lt!9380 lt!9395 (zeroValue!1665 lt!8141) lt!9387))))

(assert (=> b!24633 (= (apply!29 (+!44 lt!9380 (tuple2!973 lt!9395 (zeroValue!1665 lt!8141))) lt!9387) (apply!29 lt!9380 lt!9387))))

(declare-fun lt!9389 () Unit!522)

(assert (=> b!24633 (= lt!9389 lt!9376)))

(declare-fun lt!9394 () ListLongMap!563)

(assert (=> b!24633 (= lt!9394 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9392 () (_ BitVec 64))

(assert (=> b!24633 (= lt!9392 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9386 () (_ BitVec 64))

(assert (=> b!24633 (= lt!9386 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24633 (= lt!9374 (addApplyDifferent!14 lt!9394 lt!9392 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) lt!9386))))

(assert (=> b!24633 (= (apply!29 (+!44 lt!9394 (tuple2!973 lt!9392 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9386) (apply!29 lt!9394 lt!9386))))

(declare-fun c!3334 () Bool)

(declare-fun call!2162 () ListLongMap!563)

(declare-fun bm!2156 () Bool)

(assert (=> bm!2156 (= call!2160 (+!44 (ite c!3334 call!2161 (ite c!3335 call!2156 call!2162)) (ite (or c!3334 c!3335) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24634 () Bool)

(declare-fun Unit!583 () Unit!522)

(assert (=> b!24634 (= e!15918 Unit!583)))

(declare-fun b!24635 () Bool)

(declare-fun e!15920 () Bool)

(assert (=> b!24635 (= e!15927 e!15920)))

(declare-fun res!14987 () Bool)

(assert (=> b!24635 (= res!14987 call!2157)))

(assert (=> b!24635 (=> (not res!14987) (not e!15920))))

(declare-fun bm!2157 () Bool)

(assert (=> bm!2157 (= call!2162 call!2156)))

(declare-fun b!24636 () Bool)

(declare-fun res!14988 () Bool)

(assert (=> b!24636 (=> (not res!14988) (not e!15923))))

(declare-fun e!15921 () Bool)

(assert (=> b!24636 (= res!14988 e!15921)))

(declare-fun res!14984 () Bool)

(assert (=> b!24636 (=> res!14984 e!15921)))

(declare-fun e!15926 () Bool)

(assert (=> b!24636 (= res!14984 (not e!15926))))

(declare-fun res!14991 () Bool)

(assert (=> b!24636 (=> (not res!14991) (not e!15926))))

(assert (=> b!24636 (= res!14991 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24637 () Bool)

(declare-fun e!15919 () Bool)

(assert (=> b!24637 (= e!15921 e!15919)))

(declare-fun res!14985 () Bool)

(assert (=> b!24637 (=> (not res!14985) (not e!15919))))

(assert (=> b!24637 (= res!14985 (contains!229 lt!9385 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24637 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24638 () Bool)

(assert (=> b!24638 (= e!15926 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24639 () Bool)

(declare-fun e!15929 () ListLongMap!563)

(assert (=> b!24639 (= e!15929 call!2158)))

(declare-fun b!24640 () Bool)

(assert (=> b!24640 (= e!15922 (+!44 call!2160 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun d!4521 () Bool)

(assert (=> d!4521 e!15923))

(declare-fun res!14990 () Bool)

(assert (=> d!4521 (=> (not res!14990) (not e!15923))))

(assert (=> d!4521 (= res!14990 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!9383 () ListLongMap!563)

(assert (=> d!4521 (= lt!9385 lt!9383)))

(declare-fun lt!9381 () Unit!522)

(assert (=> d!4521 (= lt!9381 e!15918)))

(declare-fun c!3332 () Bool)

(assert (=> d!4521 (= c!3332 e!15917)))

(declare-fun res!14992 () Bool)

(assert (=> d!4521 (=> (not res!14992) (not e!15917))))

(assert (=> d!4521 (= res!14992 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4521 (= lt!9383 e!15922)))

(assert (=> d!4521 (= c!3334 (and (not (= (bvand lt!8337 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8337 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4521 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4521 (= (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8337 (zeroValue!1665 lt!8141) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9385)))

(declare-fun b!24630 () Bool)

(assert (=> b!24630 (= e!15919 (= (apply!29 lt!9385 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24630 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8141))))))

(assert (=> b!24630 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!2158 () Bool)

(assert (=> bm!2158 (= call!2159 (contains!229 lt!9385 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24641 () Bool)

(declare-fun res!14986 () Bool)

(assert (=> b!24641 (=> (not res!14986) (not e!15923))))

(assert (=> b!24641 (= res!14986 e!15927)))

(declare-fun c!3331 () Bool)

(assert (=> b!24641 (= c!3331 (not (= (bvand lt!8337 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24642 () Bool)

(assert (=> b!24642 (= e!15920 (= (apply!29 lt!9385 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun b!24643 () Bool)

(assert (=> b!24643 (= e!15929 call!2162)))

(declare-fun b!24644 () Bool)

(declare-fun c!3333 () Bool)

(assert (=> b!24644 (= c!3333 (and (not (= (bvand lt!8337 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!8337 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24644 (= e!15925 e!15929)))

(declare-fun bm!2159 () Bool)

(assert (=> bm!2159 (= call!2157 (contains!229 lt!9385 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4521 c!3334) b!24640))

(assert (= (and d!4521 (not c!3334)) b!24627))

(assert (= (and b!24627 c!3335) b!24624))

(assert (= (and b!24627 (not c!3335)) b!24644))

(assert (= (and b!24644 c!3333) b!24639))

(assert (= (and b!24644 (not c!3333)) b!24643))

(assert (= (or b!24639 b!24643) bm!2157))

(assert (= (or b!24624 bm!2157) bm!2155))

(assert (= (or b!24624 b!24639) bm!2154))

(assert (= (or b!24640 bm!2155) bm!2153))

(assert (= (or b!24640 bm!2154) bm!2156))

(assert (= (and d!4521 res!14992) b!24626))

(assert (= (and d!4521 c!3332) b!24633))

(assert (= (and d!4521 (not c!3332)) b!24634))

(assert (= (and d!4521 res!14990) b!24636))

(assert (= (and b!24636 res!14991) b!24638))

(assert (= (and b!24636 (not res!14984)) b!24637))

(assert (= (and b!24637 res!14985) b!24630))

(assert (= (and b!24636 res!14988) b!24641))

(assert (= (and b!24641 c!3331) b!24635))

(assert (= (and b!24641 (not c!3331)) b!24628))

(assert (= (and b!24635 res!14987) b!24642))

(assert (= (or b!24635 b!24628) bm!2159))

(assert (= (and b!24641 res!14986) b!24632))

(assert (= (and b!24632 c!3336) b!24629))

(assert (= (and b!24632 (not c!3336)) b!24631))

(assert (= (and b!24629 res!14989) b!24625))

(assert (= (or b!24629 b!24631) bm!2158))

(declare-fun b_lambda!1617 () Bool)

(assert (=> (not b_lambda!1617) (not b!24630)))

(assert (=> b!24630 t!3232))

(declare-fun b_and!1529 () Bool)

(assert (= b_and!1527 (and (=> t!3232 result!1093) b_and!1529)))

(declare-fun m!19329 () Bool)

(assert (=> b!24642 m!19329))

(declare-fun m!19331 () Bool)

(assert (=> bm!2156 m!19331))

(assert (=> b!24630 m!16928))

(assert (=> b!24630 m!16928))

(assert (=> b!24630 m!16930))

(assert (=> b!24630 m!16932))

(assert (=> b!24630 m!16934))

(assert (=> b!24630 m!16930))

(assert (=> b!24630 m!16934))

(declare-fun m!19333 () Bool)

(assert (=> b!24630 m!19333))

(declare-fun m!19335 () Bool)

(assert (=> bm!2158 m!19335))

(assert (=> b!24638 m!16934))

(assert (=> b!24638 m!16934))

(assert (=> b!24638 m!16940))

(declare-fun m!19337 () Bool)

(assert (=> bm!2153 m!19337))

(declare-fun m!19339 () Bool)

(assert (=> b!24633 m!19339))

(declare-fun m!19341 () Bool)

(assert (=> b!24633 m!19341))

(declare-fun m!19343 () Bool)

(assert (=> b!24633 m!19343))

(declare-fun m!19345 () Bool)

(assert (=> b!24633 m!19345))

(declare-fun m!19347 () Bool)

(assert (=> b!24633 m!19347))

(declare-fun m!19349 () Bool)

(assert (=> b!24633 m!19349))

(assert (=> b!24633 m!19339))

(declare-fun m!19351 () Bool)

(assert (=> b!24633 m!19351))

(declare-fun m!19353 () Bool)

(assert (=> b!24633 m!19353))

(declare-fun m!19355 () Bool)

(assert (=> b!24633 m!19355))

(declare-fun m!19357 () Bool)

(assert (=> b!24633 m!19357))

(declare-fun m!19359 () Bool)

(assert (=> b!24633 m!19359))

(assert (=> b!24633 m!19337))

(assert (=> b!24633 m!16934))

(declare-fun m!19361 () Bool)

(assert (=> b!24633 m!19361))

(assert (=> b!24633 m!19353))

(declare-fun m!19363 () Bool)

(assert (=> b!24633 m!19363))

(declare-fun m!19365 () Bool)

(assert (=> b!24633 m!19365))

(assert (=> b!24633 m!19343))

(assert (=> b!24633 m!19349))

(declare-fun m!19367 () Bool)

(assert (=> b!24633 m!19367))

(assert (=> b!24637 m!16934))

(assert (=> b!24637 m!16934))

(declare-fun m!19369 () Bool)

(assert (=> b!24637 m!19369))

(declare-fun m!19371 () Bool)

(assert (=> b!24625 m!19371))

(declare-fun m!19373 () Bool)

(assert (=> b!24640 m!19373))

(declare-fun m!19375 () Bool)

(assert (=> bm!2159 m!19375))

(assert (=> d!4521 m!16908))

(assert (=> b!24626 m!16934))

(assert (=> b!24626 m!16934))

(assert (=> b!24626 m!16940))

(assert (=> d!3985 d!4521))

(declare-fun b!24645 () Bool)

(declare-fun e!15933 () Bool)

(assert (=> b!24645 (= e!15933 (contains!230 Nil!562 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2160 () Bool)

(declare-fun call!2163 () Bool)

(declare-fun c!3337 () Bool)

(assert (=> bm!2160 (= call!2163 (arrayNoDuplicates!0 (_keys!3163 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3337 (Cons!561 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) Nil!562) Nil!562)))))

(declare-fun b!24646 () Bool)

(declare-fun e!15932 () Bool)

(assert (=> b!24646 (= e!15932 call!2163)))

(declare-fun d!4523 () Bool)

(declare-fun res!14995 () Bool)

(declare-fun e!15931 () Bool)

(assert (=> d!4523 (=> res!14995 e!15931)))

(assert (=> d!4523 (= res!14995 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4523 (= (arrayNoDuplicates!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 Nil!562) e!15931)))

(declare-fun b!24647 () Bool)

(declare-fun e!15930 () Bool)

(assert (=> b!24647 (= e!15931 e!15930)))

(declare-fun res!14994 () Bool)

(assert (=> b!24647 (=> (not res!14994) (not e!15930))))

(assert (=> b!24647 (= res!14994 (not e!15933))))

(declare-fun res!14993 () Bool)

(assert (=> b!24647 (=> (not res!14993) (not e!15933))))

(assert (=> b!24647 (= res!14993 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24648 () Bool)

(assert (=> b!24648 (= e!15930 e!15932)))

(assert (=> b!24648 (= c!3337 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24649 () Bool)

(assert (=> b!24649 (= e!15932 call!2163)))

(assert (= (and d!4523 (not res!14995)) b!24647))

(assert (= (and b!24647 res!14993) b!24645))

(assert (= (and b!24647 res!14994) b!24648))

(assert (= (and b!24648 c!3337) b!24646))

(assert (= (and b!24648 (not c!3337)) b!24649))

(assert (= (or b!24646 b!24649) bm!2160))

(assert (=> b!24645 m!16934))

(assert (=> b!24645 m!16934))

(declare-fun m!19377 () Bool)

(assert (=> b!24645 m!19377))

(assert (=> bm!2160 m!16934))

(declare-fun m!19379 () Bool)

(assert (=> bm!2160 m!19379))

(assert (=> b!24647 m!16934))

(assert (=> b!24647 m!16934))

(assert (=> b!24647 m!16940))

(assert (=> b!24648 m!16934))

(assert (=> b!24648 m!16934))

(assert (=> b!24648 m!16940))

(assert (=> b!23664 d!4523))

(declare-fun b!24650 () Bool)

(declare-fun e!15942 () ListLongMap!563)

(declare-fun call!2166 () ListLongMap!563)

(assert (=> b!24650 (= e!15942 call!2166)))

(declare-fun b!24651 () Bool)

(declare-fun e!15945 () Bool)

(declare-fun lt!9407 () ListLongMap!563)

(assert (=> b!24651 (= e!15945 (= (apply!29 lt!9407 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!490 lt!8361))))))

(declare-fun b!24652 () Bool)

(declare-fun e!15934 () Bool)

(assert (=> b!24652 (= e!15934 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)))))

(declare-fun bm!2161 () Bool)

(declare-fun call!2169 () ListLongMap!563)

(assert (=> bm!2161 (= call!2169 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8361)) (_values!1728 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361)) (extraKeys!1640 (_2!490 lt!8361)) (zeroValue!1665 (_2!490 lt!8361)) (minValue!1665 (_2!490 lt!8361)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8361))))))

(declare-fun b!24653 () Bool)

(declare-fun e!15939 () ListLongMap!563)

(assert (=> b!24653 (= e!15939 e!15942)))

(declare-fun c!3342 () Bool)

(assert (=> b!24653 (= c!3342 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24654 () Bool)

(declare-fun e!15944 () Bool)

(declare-fun call!2165 () Bool)

(assert (=> b!24654 (= e!15944 (not call!2165))))

(declare-fun b!24655 () Bool)

(declare-fun e!15941 () Bool)

(assert (=> b!24655 (= e!15941 e!15945)))

(declare-fun res!15001 () Bool)

(declare-fun call!2167 () Bool)

(assert (=> b!24655 (= res!15001 call!2167)))

(assert (=> b!24655 (=> (not res!15001) (not e!15945))))

(declare-fun bm!2162 () Bool)

(declare-fun call!2168 () ListLongMap!563)

(assert (=> bm!2162 (= call!2166 call!2168)))

(declare-fun b!24657 () Bool)

(assert (=> b!24657 (= e!15941 (not call!2167))))

(declare-fun bm!2163 () Bool)

(declare-fun call!2164 () ListLongMap!563)

(assert (=> bm!2163 (= call!2164 call!2169)))

(declare-fun b!24658 () Bool)

(declare-fun e!15940 () Bool)

(assert (=> b!24658 (= e!15940 e!15941)))

(declare-fun c!3343 () Bool)

(assert (=> b!24658 (= c!3343 (not (= (bvand (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24659 () Bool)

(declare-fun e!15935 () Unit!522)

(declare-fun lt!9396 () Unit!522)

(assert (=> b!24659 (= e!15935 lt!9396)))

(declare-fun lt!9412 () ListLongMap!563)

(assert (=> b!24659 (= lt!9412 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8361)) (_values!1728 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361)) (extraKeys!1640 (_2!490 lt!8361)) (zeroValue!1665 (_2!490 lt!8361)) (minValue!1665 (_2!490 lt!8361)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8361))))))

(declare-fun lt!9415 () (_ BitVec 64))

(assert (=> b!24659 (= lt!9415 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9410 () (_ BitVec 64))

(assert (=> b!24659 (= lt!9410 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000))))

(declare-fun lt!9400 () Unit!522)

(assert (=> b!24659 (= lt!9400 (addStillContains!14 lt!9412 lt!9415 (zeroValue!1665 (_2!490 lt!8361)) lt!9410))))

(assert (=> b!24659 (contains!229 (+!44 lt!9412 (tuple2!973 lt!9415 (zeroValue!1665 (_2!490 lt!8361)))) lt!9410)))

(declare-fun lt!9401 () Unit!522)

(assert (=> b!24659 (= lt!9401 lt!9400)))

(declare-fun lt!9413 () ListLongMap!563)

(assert (=> b!24659 (= lt!9413 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8361)) (_values!1728 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361)) (extraKeys!1640 (_2!490 lt!8361)) (zeroValue!1665 (_2!490 lt!8361)) (minValue!1665 (_2!490 lt!8361)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8361))))))

(declare-fun lt!9399 () (_ BitVec 64))

(assert (=> b!24659 (= lt!9399 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9397 () (_ BitVec 64))

(assert (=> b!24659 (= lt!9397 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000))))

(declare-fun lt!9406 () Unit!522)

(assert (=> b!24659 (= lt!9406 (addApplyDifferent!14 lt!9413 lt!9399 (minValue!1665 (_2!490 lt!8361)) lt!9397))))

(assert (=> b!24659 (= (apply!29 (+!44 lt!9413 (tuple2!973 lt!9399 (minValue!1665 (_2!490 lt!8361)))) lt!9397) (apply!29 lt!9413 lt!9397))))

(declare-fun lt!9404 () Unit!522)

(assert (=> b!24659 (= lt!9404 lt!9406)))

(declare-fun lt!9402 () ListLongMap!563)

(assert (=> b!24659 (= lt!9402 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8361)) (_values!1728 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361)) (extraKeys!1640 (_2!490 lt!8361)) (zeroValue!1665 (_2!490 lt!8361)) (minValue!1665 (_2!490 lt!8361)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8361))))))

(declare-fun lt!9417 () (_ BitVec 64))

(assert (=> b!24659 (= lt!9417 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9409 () (_ BitVec 64))

(assert (=> b!24659 (= lt!9409 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000))))

(declare-fun lt!9398 () Unit!522)

(assert (=> b!24659 (= lt!9398 (addApplyDifferent!14 lt!9402 lt!9417 (zeroValue!1665 (_2!490 lt!8361)) lt!9409))))

(assert (=> b!24659 (= (apply!29 (+!44 lt!9402 (tuple2!973 lt!9417 (zeroValue!1665 (_2!490 lt!8361)))) lt!9409) (apply!29 lt!9402 lt!9409))))

(declare-fun lt!9411 () Unit!522)

(assert (=> b!24659 (= lt!9411 lt!9398)))

(declare-fun lt!9416 () ListLongMap!563)

(assert (=> b!24659 (= lt!9416 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8361)) (_values!1728 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361)) (extraKeys!1640 (_2!490 lt!8361)) (zeroValue!1665 (_2!490 lt!8361)) (minValue!1665 (_2!490 lt!8361)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8361))))))

(declare-fun lt!9414 () (_ BitVec 64))

(assert (=> b!24659 (= lt!9414 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9408 () (_ BitVec 64))

(assert (=> b!24659 (= lt!9408 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000))))

(assert (=> b!24659 (= lt!9396 (addApplyDifferent!14 lt!9416 lt!9414 (minValue!1665 (_2!490 lt!8361)) lt!9408))))

(assert (=> b!24659 (= (apply!29 (+!44 lt!9416 (tuple2!973 lt!9414 (minValue!1665 (_2!490 lt!8361)))) lt!9408) (apply!29 lt!9416 lt!9408))))

(declare-fun call!2170 () ListLongMap!563)

(declare-fun c!3341 () Bool)

(declare-fun bm!2164 () Bool)

(assert (=> bm!2164 (= call!2168 (+!44 (ite c!3341 call!2169 (ite c!3342 call!2164 call!2170)) (ite (or c!3341 c!3342) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8361))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8361))))))))

(declare-fun b!24660 () Bool)

(declare-fun Unit!584 () Unit!522)

(assert (=> b!24660 (= e!15935 Unit!584)))

(declare-fun b!24661 () Bool)

(declare-fun e!15937 () Bool)

(assert (=> b!24661 (= e!15944 e!15937)))

(declare-fun res!14999 () Bool)

(assert (=> b!24661 (= res!14999 call!2165)))

(assert (=> b!24661 (=> (not res!14999) (not e!15937))))

(declare-fun bm!2165 () Bool)

(assert (=> bm!2165 (= call!2170 call!2164)))

(declare-fun b!24662 () Bool)

(declare-fun res!15000 () Bool)

(assert (=> b!24662 (=> (not res!15000) (not e!15940))))

(declare-fun e!15938 () Bool)

(assert (=> b!24662 (= res!15000 e!15938)))

(declare-fun res!14996 () Bool)

(assert (=> b!24662 (=> res!14996 e!15938)))

(declare-fun e!15943 () Bool)

(assert (=> b!24662 (= res!14996 (not e!15943))))

(declare-fun res!15003 () Bool)

(assert (=> b!24662 (=> (not res!15003) (not e!15943))))

(assert (=> b!24662 (= res!15003 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))))))

(declare-fun b!24663 () Bool)

(declare-fun e!15936 () Bool)

(assert (=> b!24663 (= e!15938 e!15936)))

(declare-fun res!14997 () Bool)

(assert (=> b!24663 (=> (not res!14997) (not e!15936))))

(assert (=> b!24663 (= res!14997 (contains!229 lt!9407 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)))))

(assert (=> b!24663 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))))))

(declare-fun b!24664 () Bool)

(assert (=> b!24664 (= e!15943 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)))))

(declare-fun b!24665 () Bool)

(declare-fun e!15946 () ListLongMap!563)

(assert (=> b!24665 (= e!15946 call!2166)))

(declare-fun b!24666 () Bool)

(assert (=> b!24666 (= e!15939 (+!44 call!2168 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8361)))))))

(declare-fun d!4525 () Bool)

(assert (=> d!4525 e!15940))

(declare-fun res!15002 () Bool)

(assert (=> d!4525 (=> (not res!15002) (not e!15940))))

(assert (=> d!4525 (= res!15002 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))))))))

(declare-fun lt!9405 () ListLongMap!563)

(assert (=> d!4525 (= lt!9407 lt!9405)))

(declare-fun lt!9403 () Unit!522)

(assert (=> d!4525 (= lt!9403 e!15935)))

(declare-fun c!3339 () Bool)

(assert (=> d!4525 (= c!3339 e!15934)))

(declare-fun res!15004 () Bool)

(assert (=> d!4525 (=> (not res!15004) (not e!15934))))

(assert (=> d!4525 (= res!15004 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))))))

(assert (=> d!4525 (= lt!9405 e!15939)))

(assert (=> d!4525 (= c!3341 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4525 (validMask!0 (mask!4729 (_2!490 lt!8361)))))

(assert (=> d!4525 (= (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8361)) (_values!1728 (_2!490 lt!8361)) (mask!4729 (_2!490 lt!8361)) (extraKeys!1640 (_2!490 lt!8361)) (zeroValue!1665 (_2!490 lt!8361)) (minValue!1665 (_2!490 lt!8361)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8361))) lt!9407)))

(declare-fun b!24656 () Bool)

(assert (=> b!24656 (= e!15936 (= (apply!29 lt!9407 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!490 lt!8361))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8361)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24656 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!490 lt!8361)))))))

(assert (=> b!24656 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))))))

(declare-fun bm!2166 () Bool)

(assert (=> bm!2166 (= call!2167 (contains!229 lt!9407 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24667 () Bool)

(declare-fun res!14998 () Bool)

(assert (=> b!24667 (=> (not res!14998) (not e!15940))))

(assert (=> b!24667 (= res!14998 e!15944)))

(declare-fun c!3338 () Bool)

(assert (=> b!24667 (= c!3338 (not (= (bvand (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24668 () Bool)

(assert (=> b!24668 (= e!15937 (= (apply!29 lt!9407 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!490 lt!8361))))))

(declare-fun b!24669 () Bool)

(assert (=> b!24669 (= e!15946 call!2170)))

(declare-fun b!24670 () Bool)

(declare-fun c!3340 () Bool)

(assert (=> b!24670 (= c!3340 (and (not (= (bvand (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!490 lt!8361)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24670 (= e!15942 e!15946)))

(declare-fun bm!2167 () Bool)

(assert (=> bm!2167 (= call!2165 (contains!229 lt!9407 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4525 c!3341) b!24666))

(assert (= (and d!4525 (not c!3341)) b!24653))

(assert (= (and b!24653 c!3342) b!24650))

(assert (= (and b!24653 (not c!3342)) b!24670))

(assert (= (and b!24670 c!3340) b!24665))

(assert (= (and b!24670 (not c!3340)) b!24669))

(assert (= (or b!24665 b!24669) bm!2165))

(assert (= (or b!24650 bm!2165) bm!2163))

(assert (= (or b!24650 b!24665) bm!2162))

(assert (= (or b!24666 bm!2163) bm!2161))

(assert (= (or b!24666 bm!2162) bm!2164))

(assert (= (and d!4525 res!15004) b!24652))

(assert (= (and d!4525 c!3339) b!24659))

(assert (= (and d!4525 (not c!3339)) b!24660))

(assert (= (and d!4525 res!15002) b!24662))

(assert (= (and b!24662 res!15003) b!24664))

(assert (= (and b!24662 (not res!14996)) b!24663))

(assert (= (and b!24663 res!14997) b!24656))

(assert (= (and b!24662 res!15000) b!24667))

(assert (= (and b!24667 c!3338) b!24661))

(assert (= (and b!24667 (not c!3338)) b!24654))

(assert (= (and b!24661 res!14999) b!24668))

(assert (= (or b!24661 b!24654) bm!2167))

(assert (= (and b!24667 res!14998) b!24658))

(assert (= (and b!24658 c!3343) b!24655))

(assert (= (and b!24658 (not c!3343)) b!24657))

(assert (= (and b!24655 res!15001) b!24651))

(assert (= (or b!24655 b!24657) bm!2166))

(declare-fun b_lambda!1619 () Bool)

(assert (=> (not b_lambda!1619) (not b!24656)))

(declare-fun tb!663 () Bool)

(declare-fun t!3242 () Bool)

(assert (=> (and b!23087 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8361))) t!3242) tb!663))

(declare-fun result!1103 () Bool)

(assert (=> tb!663 (= result!1103 tp_is_empty!1021)))

(assert (=> b!24656 t!3242))

(declare-fun b_and!1531 () Bool)

(assert (= b_and!1529 (and (=> t!3242 result!1103) b_and!1531)))

(declare-fun m!19381 () Bool)

(assert (=> b!24668 m!19381))

(declare-fun m!19383 () Bool)

(assert (=> bm!2164 m!19383))

(declare-fun m!19385 () Bool)

(assert (=> b!24656 m!19385))

(assert (=> b!24656 m!19385))

(declare-fun m!19387 () Bool)

(assert (=> b!24656 m!19387))

(declare-fun m!19389 () Bool)

(assert (=> b!24656 m!19389))

(assert (=> b!24656 m!19011))

(assert (=> b!24656 m!19387))

(assert (=> b!24656 m!19011))

(declare-fun m!19391 () Bool)

(assert (=> b!24656 m!19391))

(declare-fun m!19393 () Bool)

(assert (=> bm!2166 m!19393))

(assert (=> b!24664 m!19011))

(assert (=> b!24664 m!19011))

(assert (=> b!24664 m!19017))

(declare-fun m!19395 () Bool)

(assert (=> bm!2161 m!19395))

(declare-fun m!19397 () Bool)

(assert (=> b!24659 m!19397))

(declare-fun m!19399 () Bool)

(assert (=> b!24659 m!19399))

(declare-fun m!19401 () Bool)

(assert (=> b!24659 m!19401))

(declare-fun m!19403 () Bool)

(assert (=> b!24659 m!19403))

(declare-fun m!19405 () Bool)

(assert (=> b!24659 m!19405))

(declare-fun m!19407 () Bool)

(assert (=> b!24659 m!19407))

(assert (=> b!24659 m!19397))

(declare-fun m!19409 () Bool)

(assert (=> b!24659 m!19409))

(declare-fun m!19411 () Bool)

(assert (=> b!24659 m!19411))

(declare-fun m!19413 () Bool)

(assert (=> b!24659 m!19413))

(declare-fun m!19415 () Bool)

(assert (=> b!24659 m!19415))

(declare-fun m!19417 () Bool)

(assert (=> b!24659 m!19417))

(assert (=> b!24659 m!19395))

(assert (=> b!24659 m!19011))

(declare-fun m!19419 () Bool)

(assert (=> b!24659 m!19419))

(assert (=> b!24659 m!19411))

(declare-fun m!19421 () Bool)

(assert (=> b!24659 m!19421))

(declare-fun m!19423 () Bool)

(assert (=> b!24659 m!19423))

(assert (=> b!24659 m!19401))

(assert (=> b!24659 m!19407))

(declare-fun m!19425 () Bool)

(assert (=> b!24659 m!19425))

(assert (=> b!24663 m!19011))

(assert (=> b!24663 m!19011))

(declare-fun m!19427 () Bool)

(assert (=> b!24663 m!19427))

(declare-fun m!19429 () Bool)

(assert (=> b!24651 m!19429))

(declare-fun m!19431 () Bool)

(assert (=> b!24666 m!19431))

(declare-fun m!19433 () Bool)

(assert (=> bm!2167 m!19433))

(assert (=> d!4525 m!17947))

(assert (=> b!24652 m!19011))

(assert (=> b!24652 m!19011))

(assert (=> b!24652 m!19017))

(assert (=> d!3993 d!4525))

(assert (=> b!23804 d!4109))

(assert (=> b!23804 d!3977))

(declare-fun b!24671 () Bool)

(declare-fun e!15955 () ListLongMap!563)

(declare-fun call!2173 () ListLongMap!563)

(assert (=> b!24671 (= e!15955 call!2173)))

(declare-fun b!24672 () Bool)

(declare-fun e!15958 () Bool)

(declare-fun lt!9429 () ListLongMap!563)

(assert (=> b!24672 (= e!15958 (= (apply!29 lt!9429 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!24673 () Bool)

(declare-fun e!15947 () Bool)

(assert (=> b!24673 (= e!15947 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun call!2176 () ListLongMap!563)

(declare-fun bm!2168 () Bool)

(assert (=> bm!2168 (= call!2176 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!24674 () Bool)

(declare-fun e!15952 () ListLongMap!563)

(assert (=> b!24674 (= e!15952 e!15955)))

(declare-fun c!3348 () Bool)

(assert (=> b!24674 (= c!3348 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24675 () Bool)

(declare-fun e!15957 () Bool)

(declare-fun call!2172 () Bool)

(assert (=> b!24675 (= e!15957 (not call!2172))))

(declare-fun b!24676 () Bool)

(declare-fun e!15954 () Bool)

(assert (=> b!24676 (= e!15954 e!15958)))

(declare-fun res!15010 () Bool)

(declare-fun call!2174 () Bool)

(assert (=> b!24676 (= res!15010 call!2174)))

(assert (=> b!24676 (=> (not res!15010) (not e!15958))))

(declare-fun bm!2169 () Bool)

(declare-fun call!2175 () ListLongMap!563)

(assert (=> bm!2169 (= call!2173 call!2175)))

(declare-fun b!24678 () Bool)

(assert (=> b!24678 (= e!15954 (not call!2174))))

(declare-fun bm!2170 () Bool)

(declare-fun call!2171 () ListLongMap!563)

(assert (=> bm!2170 (= call!2171 call!2176)))

(declare-fun b!24679 () Bool)

(declare-fun e!15953 () Bool)

(assert (=> b!24679 (= e!15953 e!15954)))

(declare-fun c!3349 () Bool)

(assert (=> b!24679 (= c!3349 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24680 () Bool)

(declare-fun e!15948 () Unit!522)

(declare-fun lt!9418 () Unit!522)

(assert (=> b!24680 (= e!15948 lt!9418)))

(declare-fun lt!9434 () ListLongMap!563)

(assert (=> b!24680 (= lt!9434 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9437 () (_ BitVec 64))

(assert (=> b!24680 (= lt!9437 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9432 () (_ BitVec 64))

(assert (=> b!24680 (= lt!9432 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9422 () Unit!522)

(assert (=> b!24680 (= lt!9422 (addStillContains!14 lt!9434 lt!9437 (zeroValue!1665 lt!8141) lt!9432))))

(assert (=> b!24680 (contains!229 (+!44 lt!9434 (tuple2!973 lt!9437 (zeroValue!1665 lt!8141))) lt!9432)))

(declare-fun lt!9423 () Unit!522)

(assert (=> b!24680 (= lt!9423 lt!9422)))

(declare-fun lt!9435 () ListLongMap!563)

(assert (=> b!24680 (= lt!9435 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9421 () (_ BitVec 64))

(assert (=> b!24680 (= lt!9421 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9419 () (_ BitVec 64))

(assert (=> b!24680 (= lt!9419 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9428 () Unit!522)

(assert (=> b!24680 (= lt!9428 (addApplyDifferent!14 lt!9435 lt!9421 (minValue!1665 lt!8141) lt!9419))))

(assert (=> b!24680 (= (apply!29 (+!44 lt!9435 (tuple2!973 lt!9421 (minValue!1665 lt!8141))) lt!9419) (apply!29 lt!9435 lt!9419))))

(declare-fun lt!9426 () Unit!522)

(assert (=> b!24680 (= lt!9426 lt!9428)))

(declare-fun lt!9424 () ListLongMap!563)

(assert (=> b!24680 (= lt!9424 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9439 () (_ BitVec 64))

(assert (=> b!24680 (= lt!9439 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9431 () (_ BitVec 64))

(assert (=> b!24680 (= lt!9431 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9420 () Unit!522)

(assert (=> b!24680 (= lt!9420 (addApplyDifferent!14 lt!9424 lt!9439 (zeroValue!1665 lt!8141) lt!9431))))

(assert (=> b!24680 (= (apply!29 (+!44 lt!9424 (tuple2!973 lt!9439 (zeroValue!1665 lt!8141))) lt!9431) (apply!29 lt!9424 lt!9431))))

(declare-fun lt!9433 () Unit!522)

(assert (=> b!24680 (= lt!9433 lt!9420)))

(declare-fun lt!9438 () ListLongMap!563)

(assert (=> b!24680 (= lt!9438 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9436 () (_ BitVec 64))

(assert (=> b!24680 (= lt!9436 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9430 () (_ BitVec 64))

(assert (=> b!24680 (= lt!9430 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24680 (= lt!9418 (addApplyDifferent!14 lt!9438 lt!9436 (minValue!1665 lt!8141) lt!9430))))

(assert (=> b!24680 (= (apply!29 (+!44 lt!9438 (tuple2!973 lt!9436 (minValue!1665 lt!8141))) lt!9430) (apply!29 lt!9438 lt!9430))))

(declare-fun call!2177 () ListLongMap!563)

(declare-fun bm!2171 () Bool)

(declare-fun c!3347 () Bool)

(assert (=> bm!2171 (= call!2175 (+!44 (ite c!3347 call!2176 (ite c!3348 call!2171 call!2177)) (ite (or c!3347 c!3348) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!24681 () Bool)

(declare-fun Unit!585 () Unit!522)

(assert (=> b!24681 (= e!15948 Unit!585)))

(declare-fun b!24682 () Bool)

(declare-fun e!15950 () Bool)

(assert (=> b!24682 (= e!15957 e!15950)))

(declare-fun res!15008 () Bool)

(assert (=> b!24682 (= res!15008 call!2172)))

(assert (=> b!24682 (=> (not res!15008) (not e!15950))))

(declare-fun bm!2172 () Bool)

(assert (=> bm!2172 (= call!2177 call!2171)))

(declare-fun b!24683 () Bool)

(declare-fun res!15009 () Bool)

(assert (=> b!24683 (=> (not res!15009) (not e!15953))))

(declare-fun e!15951 () Bool)

(assert (=> b!24683 (= res!15009 e!15951)))

(declare-fun res!15005 () Bool)

(assert (=> b!24683 (=> res!15005 e!15951)))

(declare-fun e!15956 () Bool)

(assert (=> b!24683 (= res!15005 (not e!15956))))

(declare-fun res!15012 () Bool)

(assert (=> b!24683 (=> (not res!15012) (not e!15956))))

(assert (=> b!24683 (= res!15012 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24684 () Bool)

(declare-fun e!15949 () Bool)

(assert (=> b!24684 (= e!15951 e!15949)))

(declare-fun res!15006 () Bool)

(assert (=> b!24684 (=> (not res!15006) (not e!15949))))

(assert (=> b!24684 (= res!15006 (contains!229 lt!9429 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24684 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24685 () Bool)

(assert (=> b!24685 (= e!15956 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24686 () Bool)

(declare-fun e!15959 () ListLongMap!563)

(assert (=> b!24686 (= e!15959 call!2173)))

(declare-fun b!24687 () Bool)

(assert (=> b!24687 (= e!15952 (+!44 call!2175 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun d!4527 () Bool)

(assert (=> d!4527 e!15953))

(declare-fun res!15011 () Bool)

(assert (=> d!4527 (=> (not res!15011) (not e!15953))))

(assert (=> d!4527 (= res!15011 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!9427 () ListLongMap!563)

(assert (=> d!4527 (= lt!9429 lt!9427)))

(declare-fun lt!9425 () Unit!522)

(assert (=> d!4527 (= lt!9425 e!15948)))

(declare-fun c!3345 () Bool)

(assert (=> d!4527 (= c!3345 e!15947)))

(declare-fun res!15013 () Bool)

(assert (=> d!4527 (=> (not res!15013) (not e!15947))))

(assert (=> d!4527 (= res!15013 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4527 (= lt!9427 e!15952)))

(assert (=> d!4527 (= c!3347 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4527 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4527 (= (getCurrentListMap!127 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9429)))

(declare-fun b!24677 () Bool)

(assert (=> b!24677 (= e!15949 (= (apply!29 lt!9429 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24677 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))))))

(assert (=> b!24677 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!2173 () Bool)

(assert (=> bm!2173 (= call!2174 (contains!229 lt!9429 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24688 () Bool)

(declare-fun res!15007 () Bool)

(assert (=> b!24688 (=> (not res!15007) (not e!15953))))

(assert (=> b!24688 (= res!15007 e!15957)))

(declare-fun c!3344 () Bool)

(assert (=> b!24688 (= c!3344 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24689 () Bool)

(assert (=> b!24689 (= e!15950 (= (apply!29 lt!9429 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun b!24690 () Bool)

(assert (=> b!24690 (= e!15959 call!2177)))

(declare-fun b!24691 () Bool)

(declare-fun c!3346 () Bool)

(assert (=> b!24691 (= c!3346 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24691 (= e!15955 e!15959)))

(declare-fun bm!2174 () Bool)

(assert (=> bm!2174 (= call!2172 (contains!229 lt!9429 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4527 c!3347) b!24687))

(assert (= (and d!4527 (not c!3347)) b!24674))

(assert (= (and b!24674 c!3348) b!24671))

(assert (= (and b!24674 (not c!3348)) b!24691))

(assert (= (and b!24691 c!3346) b!24686))

(assert (= (and b!24691 (not c!3346)) b!24690))

(assert (= (or b!24686 b!24690) bm!2172))

(assert (= (or b!24671 bm!2172) bm!2170))

(assert (= (or b!24671 b!24686) bm!2169))

(assert (= (or b!24687 bm!2170) bm!2168))

(assert (= (or b!24687 bm!2169) bm!2171))

(assert (= (and d!4527 res!15013) b!24673))

(assert (= (and d!4527 c!3345) b!24680))

(assert (= (and d!4527 (not c!3345)) b!24681))

(assert (= (and d!4527 res!15011) b!24683))

(assert (= (and b!24683 res!15012) b!24685))

(assert (= (and b!24683 (not res!15005)) b!24684))

(assert (= (and b!24684 res!15006) b!24677))

(assert (= (and b!24683 res!15009) b!24688))

(assert (= (and b!24688 c!3344) b!24682))

(assert (= (and b!24688 (not c!3344)) b!24675))

(assert (= (and b!24682 res!15008) b!24689))

(assert (= (or b!24682 b!24675) bm!2174))

(assert (= (and b!24688 res!15007) b!24679))

(assert (= (and b!24679 c!3349) b!24676))

(assert (= (and b!24679 (not c!3349)) b!24678))

(assert (= (and b!24676 res!15010) b!24672))

(assert (= (or b!24676 b!24678) bm!2173))

(declare-fun b_lambda!1621 () Bool)

(assert (=> (not b_lambda!1621) (not b!24677)))

(assert (=> b!24677 t!3232))

(declare-fun b_and!1533 () Bool)

(assert (= b_and!1531 (and (=> t!3232 result!1093) b_and!1533)))

(declare-fun m!19435 () Bool)

(assert (=> b!24689 m!19435))

(declare-fun m!19437 () Bool)

(assert (=> bm!2171 m!19437))

(declare-fun m!19439 () Bool)

(assert (=> b!24677 m!19439))

(assert (=> b!24677 m!19439))

(assert (=> b!24677 m!16930))

(declare-fun m!19441 () Bool)

(assert (=> b!24677 m!19441))

(assert (=> b!24677 m!16934))

(assert (=> b!24677 m!16930))

(assert (=> b!24677 m!16934))

(declare-fun m!19443 () Bool)

(assert (=> b!24677 m!19443))

(declare-fun m!19445 () Bool)

(assert (=> bm!2173 m!19445))

(assert (=> b!24685 m!16934))

(assert (=> b!24685 m!16934))

(assert (=> b!24685 m!16940))

(declare-fun m!19447 () Bool)

(assert (=> bm!2168 m!19447))

(declare-fun m!19449 () Bool)

(assert (=> b!24680 m!19449))

(declare-fun m!19451 () Bool)

(assert (=> b!24680 m!19451))

(declare-fun m!19453 () Bool)

(assert (=> b!24680 m!19453))

(declare-fun m!19455 () Bool)

(assert (=> b!24680 m!19455))

(declare-fun m!19457 () Bool)

(assert (=> b!24680 m!19457))

(declare-fun m!19459 () Bool)

(assert (=> b!24680 m!19459))

(assert (=> b!24680 m!19449))

(declare-fun m!19461 () Bool)

(assert (=> b!24680 m!19461))

(declare-fun m!19463 () Bool)

(assert (=> b!24680 m!19463))

(declare-fun m!19465 () Bool)

(assert (=> b!24680 m!19465))

(declare-fun m!19467 () Bool)

(assert (=> b!24680 m!19467))

(declare-fun m!19469 () Bool)

(assert (=> b!24680 m!19469))

(assert (=> b!24680 m!19447))

(assert (=> b!24680 m!16934))

(declare-fun m!19471 () Bool)

(assert (=> b!24680 m!19471))

(assert (=> b!24680 m!19463))

(declare-fun m!19473 () Bool)

(assert (=> b!24680 m!19473))

(declare-fun m!19475 () Bool)

(assert (=> b!24680 m!19475))

(assert (=> b!24680 m!19453))

(assert (=> b!24680 m!19459))

(declare-fun m!19477 () Bool)

(assert (=> b!24680 m!19477))

(assert (=> b!24684 m!16934))

(assert (=> b!24684 m!16934))

(declare-fun m!19479 () Bool)

(assert (=> b!24684 m!19479))

(declare-fun m!19481 () Bool)

(assert (=> b!24672 m!19481))

(declare-fun m!19483 () Bool)

(assert (=> b!24687 m!19483))

(declare-fun m!19485 () Bool)

(assert (=> bm!2174 m!19485))

(assert (=> d!4527 m!16908))

(assert (=> b!24673 m!16934))

(assert (=> b!24673 m!16934))

(assert (=> b!24673 m!16940))

(assert (=> b!23804 d!4527))

(assert (=> d!3971 d!3983))

(declare-fun d!4529 () Bool)

(declare-fun e!15960 () Bool)

(assert (=> d!4529 e!15960))

(declare-fun res!15015 () Bool)

(assert (=> d!4529 (=> (not res!15015) (not e!15960))))

(declare-fun lt!9440 () SeekEntryResult!54)

(assert (=> d!4529 (= res!15015 ((_ is Found!54) lt!9440))))

(assert (=> d!4529 (= lt!9440 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142))))))

(assert (=> d!4529 true))

(declare-fun _$33!36 () Unit!522)

(assert (=> d!4529 (= (choose!204 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) _$33!36)))

(declare-fun b!24692 () Bool)

(declare-fun res!15014 () Bool)

(assert (=> b!24692 (=> (not res!15014) (not e!15960))))

(assert (=> b!24692 (= res!15014 (inRange!0 (index!2338 lt!9440) (mask!4729 (_2!490 lt!8142))))))

(declare-fun b!24693 () Bool)

(assert (=> b!24693 (= e!15960 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!9440)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4529 res!15015) b!24692))

(assert (= (and b!24692 res!15014) b!24693))

(assert (=> d!4529 m!16834))

(declare-fun m!19487 () Bool)

(assert (=> b!24692 m!19487))

(declare-fun m!19489 () Bool)

(assert (=> b!24693 m!19489))

(assert (=> d!3971 d!4529))

(assert (=> d!3971 d!4145))

(assert (=> d!4055 d!4145))

(assert (=> d!4025 d!4093))

(assert (=> d!4025 d!4145))

(declare-fun b!24694 () Bool)

(declare-fun e!15969 () ListLongMap!563)

(declare-fun call!2180 () ListLongMap!563)

(assert (=> b!24694 (= e!15969 call!2180)))

(declare-fun b!24695 () Bool)

(declare-fun e!15972 () Bool)

(declare-fun lt!9452 () ListLongMap!563)

(assert (=> b!24695 (= e!15972 (= (apply!29 lt!9452 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun b!24696 () Bool)

(declare-fun e!15961 () Bool)

(assert (=> b!24696 (= e!15961 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun bm!2175 () Bool)

(declare-fun call!2183 () ListLongMap!563)

(assert (=> bm!2175 (= call!2183 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!24697 () Bool)

(declare-fun e!15966 () ListLongMap!563)

(assert (=> b!24697 (= e!15966 e!15969)))

(declare-fun c!3354 () Bool)

(assert (=> b!24697 (= c!3354 (and (not (= (bvand lt!8364 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!8364 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24698 () Bool)

(declare-fun e!15971 () Bool)

(declare-fun call!2179 () Bool)

(assert (=> b!24698 (= e!15971 (not call!2179))))

(declare-fun b!24699 () Bool)

(declare-fun e!15968 () Bool)

(assert (=> b!24699 (= e!15968 e!15972)))

(declare-fun res!15021 () Bool)

(declare-fun call!2181 () Bool)

(assert (=> b!24699 (= res!15021 call!2181)))

(assert (=> b!24699 (=> (not res!15021) (not e!15972))))

(declare-fun bm!2176 () Bool)

(declare-fun call!2182 () ListLongMap!563)

(assert (=> bm!2176 (= call!2180 call!2182)))

(declare-fun b!24701 () Bool)

(assert (=> b!24701 (= e!15968 (not call!2181))))

(declare-fun bm!2177 () Bool)

(declare-fun call!2178 () ListLongMap!563)

(assert (=> bm!2177 (= call!2178 call!2183)))

(declare-fun b!24702 () Bool)

(declare-fun e!15967 () Bool)

(assert (=> b!24702 (= e!15967 e!15968)))

(declare-fun c!3355 () Bool)

(assert (=> b!24702 (= c!3355 (not (= (bvand lt!8364 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24703 () Bool)

(declare-fun e!15962 () Unit!522)

(declare-fun lt!9441 () Unit!522)

(assert (=> b!24703 (= e!15962 lt!9441)))

(declare-fun lt!9457 () ListLongMap!563)

(assert (=> b!24703 (= lt!9457 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9460 () (_ BitVec 64))

(assert (=> b!24703 (= lt!9460 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9455 () (_ BitVec 64))

(assert (=> b!24703 (= lt!9455 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!9445 () Unit!522)

(assert (=> b!24703 (= lt!9445 (addStillContains!14 lt!9457 lt!9460 (zeroValue!1665 (_2!490 lt!8142)) lt!9455))))

(assert (=> b!24703 (contains!229 (+!44 lt!9457 (tuple2!973 lt!9460 (zeroValue!1665 (_2!490 lt!8142)))) lt!9455)))

(declare-fun lt!9446 () Unit!522)

(assert (=> b!24703 (= lt!9446 lt!9445)))

(declare-fun lt!9458 () ListLongMap!563)

(assert (=> b!24703 (= lt!9458 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9444 () (_ BitVec 64))

(assert (=> b!24703 (= lt!9444 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9442 () (_ BitVec 64))

(assert (=> b!24703 (= lt!9442 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!9451 () Unit!522)

(assert (=> b!24703 (= lt!9451 (addApplyDifferent!14 lt!9458 lt!9444 (minValue!1665 (v!1602 (underlying!115 thiss!938))) lt!9442))))

(assert (=> b!24703 (= (apply!29 (+!44 lt!9458 (tuple2!973 lt!9444 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!9442) (apply!29 lt!9458 lt!9442))))

(declare-fun lt!9449 () Unit!522)

(assert (=> b!24703 (= lt!9449 lt!9451)))

(declare-fun lt!9447 () ListLongMap!563)

(assert (=> b!24703 (= lt!9447 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9462 () (_ BitVec 64))

(assert (=> b!24703 (= lt!9462 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9454 () (_ BitVec 64))

(assert (=> b!24703 (= lt!9454 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!9443 () Unit!522)

(assert (=> b!24703 (= lt!9443 (addApplyDifferent!14 lt!9447 lt!9462 (zeroValue!1665 (_2!490 lt!8142)) lt!9454))))

(assert (=> b!24703 (= (apply!29 (+!44 lt!9447 (tuple2!973 lt!9462 (zeroValue!1665 (_2!490 lt!8142)))) lt!9454) (apply!29 lt!9447 lt!9454))))

(declare-fun lt!9456 () Unit!522)

(assert (=> b!24703 (= lt!9456 lt!9443)))

(declare-fun lt!9461 () ListLongMap!563)

(assert (=> b!24703 (= lt!9461 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9459 () (_ BitVec 64))

(assert (=> b!24703 (= lt!9459 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9453 () (_ BitVec 64))

(assert (=> b!24703 (= lt!9453 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(assert (=> b!24703 (= lt!9441 (addApplyDifferent!14 lt!9461 lt!9459 (minValue!1665 (v!1602 (underlying!115 thiss!938))) lt!9453))))

(assert (=> b!24703 (= (apply!29 (+!44 lt!9461 (tuple2!973 lt!9459 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!9453) (apply!29 lt!9461 lt!9453))))

(declare-fun call!2184 () ListLongMap!563)

(declare-fun c!3353 () Bool)

(declare-fun bm!2178 () Bool)

(assert (=> bm!2178 (= call!2182 (+!44 (ite c!3353 call!2183 (ite c!3354 call!2178 call!2184)) (ite (or c!3353 c!3354) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!24704 () Bool)

(declare-fun Unit!586 () Unit!522)

(assert (=> b!24704 (= e!15962 Unit!586)))

(declare-fun b!24705 () Bool)

(declare-fun e!15964 () Bool)

(assert (=> b!24705 (= e!15971 e!15964)))

(declare-fun res!15019 () Bool)

(assert (=> b!24705 (= res!15019 call!2179)))

(assert (=> b!24705 (=> (not res!15019) (not e!15964))))

(declare-fun bm!2179 () Bool)

(assert (=> bm!2179 (= call!2184 call!2178)))

(declare-fun b!24706 () Bool)

(declare-fun res!15020 () Bool)

(assert (=> b!24706 (=> (not res!15020) (not e!15967))))

(declare-fun e!15965 () Bool)

(assert (=> b!24706 (= res!15020 e!15965)))

(declare-fun res!15016 () Bool)

(assert (=> b!24706 (=> res!15016 e!15965)))

(declare-fun e!15970 () Bool)

(assert (=> b!24706 (= res!15016 (not e!15970))))

(declare-fun res!15023 () Bool)

(assert (=> b!24706 (=> (not res!15023) (not e!15970))))

(assert (=> b!24706 (= res!15023 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!24707 () Bool)

(declare-fun e!15963 () Bool)

(assert (=> b!24707 (= e!15965 e!15963)))

(declare-fun res!15017 () Bool)

(assert (=> b!24707 (=> (not res!15017) (not e!15963))))

(assert (=> b!24707 (= res!15017 (contains!229 lt!9452 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24707 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!24708 () Bool)

(assert (=> b!24708 (= e!15970 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24709 () Bool)

(declare-fun e!15973 () ListLongMap!563)

(assert (=> b!24709 (= e!15973 call!2180)))

(declare-fun b!24710 () Bool)

(assert (=> b!24710 (= e!15966 (+!44 call!2182 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun d!4531 () Bool)

(assert (=> d!4531 e!15967))

(declare-fun res!15022 () Bool)

(assert (=> d!4531 (=> (not res!15022) (not e!15967))))

(assert (=> d!4531 (= res!15022 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(declare-fun lt!9450 () ListLongMap!563)

(assert (=> d!4531 (= lt!9452 lt!9450)))

(declare-fun lt!9448 () Unit!522)

(assert (=> d!4531 (= lt!9448 e!15962)))

(declare-fun c!3351 () Bool)

(assert (=> d!4531 (= c!3351 e!15961)))

(declare-fun res!15024 () Bool)

(assert (=> d!4531 (=> (not res!15024) (not e!15961))))

(assert (=> d!4531 (= res!15024 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4531 (= lt!9450 e!15966)))

(assert (=> d!4531 (= c!3353 (and (not (= (bvand lt!8364 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8364 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4531 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4531 (= (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!9452)))

(declare-fun b!24700 () Bool)

(assert (=> b!24700 (= e!15963 (= (apply!29 lt!9452 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24700 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!490 lt!8142)))))))

(assert (=> b!24700 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun bm!2180 () Bool)

(assert (=> bm!2180 (= call!2181 (contains!229 lt!9452 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24711 () Bool)

(declare-fun res!15018 () Bool)

(assert (=> b!24711 (=> (not res!15018) (not e!15967))))

(assert (=> b!24711 (= res!15018 e!15971)))

(declare-fun c!3350 () Bool)

(assert (=> b!24711 (= c!3350 (not (= (bvand lt!8364 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24712 () Bool)

(assert (=> b!24712 (= e!15964 (= (apply!29 lt!9452 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!490 lt!8142))))))

(declare-fun b!24713 () Bool)

(assert (=> b!24713 (= e!15973 call!2184)))

(declare-fun b!24714 () Bool)

(declare-fun c!3352 () Bool)

(assert (=> b!24714 (= c!3352 (and (not (= (bvand lt!8364 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!8364 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24714 (= e!15969 e!15973)))

(declare-fun bm!2181 () Bool)

(assert (=> bm!2181 (= call!2179 (contains!229 lt!9452 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4531 c!3353) b!24710))

(assert (= (and d!4531 (not c!3353)) b!24697))

(assert (= (and b!24697 c!3354) b!24694))

(assert (= (and b!24697 (not c!3354)) b!24714))

(assert (= (and b!24714 c!3352) b!24709))

(assert (= (and b!24714 (not c!3352)) b!24713))

(assert (= (or b!24709 b!24713) bm!2179))

(assert (= (or b!24694 bm!2179) bm!2177))

(assert (= (or b!24694 b!24709) bm!2176))

(assert (= (or b!24710 bm!2177) bm!2175))

(assert (= (or b!24710 bm!2176) bm!2178))

(assert (= (and d!4531 res!15024) b!24696))

(assert (= (and d!4531 c!3351) b!24703))

(assert (= (and d!4531 (not c!3351)) b!24704))

(assert (= (and d!4531 res!15022) b!24706))

(assert (= (and b!24706 res!15023) b!24708))

(assert (= (and b!24706 (not res!15016)) b!24707))

(assert (= (and b!24707 res!15017) b!24700))

(assert (= (and b!24706 res!15020) b!24711))

(assert (= (and b!24711 c!3350) b!24705))

(assert (= (and b!24711 (not c!3350)) b!24698))

(assert (= (and b!24705 res!15019) b!24712))

(assert (= (or b!24705 b!24698) bm!2181))

(assert (= (and b!24711 res!15018) b!24702))

(assert (= (and b!24702 c!3355) b!24699))

(assert (= (and b!24702 (not c!3355)) b!24701))

(assert (= (and b!24699 res!15021) b!24695))

(assert (= (or b!24699 b!24701) bm!2180))

(declare-fun b_lambda!1623 () Bool)

(assert (=> (not b_lambda!1623) (not b!24700)))

(assert (=> b!24700 t!3234))

(declare-fun b_and!1535 () Bool)

(assert (= b_and!1533 (and (=> t!3234 result!1095) b_and!1535)))

(declare-fun m!19491 () Bool)

(assert (=> b!24712 m!19491))

(declare-fun m!19493 () Bool)

(assert (=> bm!2178 m!19493))

(assert (=> b!24700 m!17397))

(assert (=> b!24700 m!17397))

(assert (=> b!24700 m!17076))

(assert (=> b!24700 m!17399))

(assert (=> b!24700 m!17080))

(assert (=> b!24700 m!17076))

(assert (=> b!24700 m!17080))

(declare-fun m!19495 () Bool)

(assert (=> b!24700 m!19495))

(declare-fun m!19497 () Bool)

(assert (=> bm!2180 m!19497))

(assert (=> b!24708 m!17080))

(assert (=> b!24708 m!17080))

(assert (=> b!24708 m!17086))

(declare-fun m!19499 () Bool)

(assert (=> bm!2175 m!19499))

(declare-fun m!19501 () Bool)

(assert (=> b!24703 m!19501))

(declare-fun m!19503 () Bool)

(assert (=> b!24703 m!19503))

(declare-fun m!19505 () Bool)

(assert (=> b!24703 m!19505))

(declare-fun m!19507 () Bool)

(assert (=> b!24703 m!19507))

(declare-fun m!19509 () Bool)

(assert (=> b!24703 m!19509))

(declare-fun m!19511 () Bool)

(assert (=> b!24703 m!19511))

(assert (=> b!24703 m!19501))

(declare-fun m!19513 () Bool)

(assert (=> b!24703 m!19513))

(declare-fun m!19515 () Bool)

(assert (=> b!24703 m!19515))

(declare-fun m!19517 () Bool)

(assert (=> b!24703 m!19517))

(declare-fun m!19519 () Bool)

(assert (=> b!24703 m!19519))

(declare-fun m!19521 () Bool)

(assert (=> b!24703 m!19521))

(assert (=> b!24703 m!19499))

(assert (=> b!24703 m!17080))

(declare-fun m!19523 () Bool)

(assert (=> b!24703 m!19523))

(assert (=> b!24703 m!19515))

(declare-fun m!19525 () Bool)

(assert (=> b!24703 m!19525))

(declare-fun m!19527 () Bool)

(assert (=> b!24703 m!19527))

(assert (=> b!24703 m!19505))

(assert (=> b!24703 m!19511))

(declare-fun m!19529 () Bool)

(assert (=> b!24703 m!19529))

(assert (=> b!24707 m!17080))

(assert (=> b!24707 m!17080))

(declare-fun m!19531 () Bool)

(assert (=> b!24707 m!19531))

(declare-fun m!19533 () Bool)

(assert (=> b!24695 m!19533))

(declare-fun m!19535 () Bool)

(assert (=> b!24710 m!19535))

(declare-fun m!19537 () Bool)

(assert (=> bm!2181 m!19537))

(assert (=> d!4531 m!16902))

(assert (=> b!24696 m!17080))

(assert (=> b!24696 m!17080))

(assert (=> b!24696 m!17086))

(assert (=> d!4025 d!4531))

(assert (=> d!4025 d!4055))

(declare-fun d!4533 () Bool)

(assert (=> d!4533 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4533 true))

(declare-fun _$8!40 () Unit!522)

(assert (=> d!4533 (= (choose!205 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) lt!8364 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142))) _$8!40)))

(declare-fun bs!1009 () Bool)

(assert (= bs!1009 d!4533))

(assert (=> bs!1009 m!16844))

(assert (=> bs!1009 m!16844))

(assert (=> bs!1009 m!17212))

(assert (=> bs!1009 m!17210))

(assert (=> d!4025 d!4533))

(declare-fun b!24715 () Bool)

(declare-fun e!15974 () Bool)

(declare-fun e!15975 () Bool)

(assert (=> b!24715 (= e!15974 e!15975)))

(declare-fun lt!9465 () (_ BitVec 64))

(assert (=> b!24715 (= lt!9465 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000))))

(declare-fun lt!9463 () Unit!522)

(assert (=> b!24715 (= lt!9463 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 (_2!490 lt!8334)) lt!9465 #b00000000000000000000000000000000))))

(assert (=> b!24715 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8334)) lt!9465 #b00000000000000000000000000000000)))

(declare-fun lt!9464 () Unit!522)

(assert (=> b!24715 (= lt!9464 lt!9463)))

(declare-fun res!15025 () Bool)

(assert (=> b!24715 (= res!15025 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000) (_keys!3163 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334))) (Found!54 #b00000000000000000000000000000000)))))

(assert (=> b!24715 (=> (not res!15025) (not e!15975))))

(declare-fun b!24716 () Bool)

(declare-fun call!2185 () Bool)

(assert (=> b!24716 (= e!15975 call!2185)))

(declare-fun bm!2182 () Bool)

(assert (=> bm!2182 (= call!2185 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334))))))

(declare-fun d!4535 () Bool)

(declare-fun res!15026 () Bool)

(declare-fun e!15976 () Bool)

(assert (=> d!4535 (=> res!15026 e!15976)))

(assert (=> d!4535 (= res!15026 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))))))

(assert (=> d!4535 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!490 lt!8334)) (mask!4729 (_2!490 lt!8334))) e!15976)))

(declare-fun b!24717 () Bool)

(assert (=> b!24717 (= e!15974 call!2185)))

(declare-fun b!24718 () Bool)

(assert (=> b!24718 (= e!15976 e!15974)))

(declare-fun c!3356 () Bool)

(assert (=> b!24718 (= c!3356 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)))))

(assert (= (and d!4535 (not res!15026)) b!24718))

(assert (= (and b!24718 c!3356) b!24715))

(assert (= (and b!24718 (not c!3356)) b!24717))

(assert (= (and b!24715 res!15025) b!24716))

(assert (= (or b!24716 b!24717) bm!2182))

(assert (=> b!24715 m!18841))

(declare-fun m!19539 () Bool)

(assert (=> b!24715 m!19539))

(declare-fun m!19541 () Bool)

(assert (=> b!24715 m!19541))

(assert (=> b!24715 m!18841))

(declare-fun m!19543 () Bool)

(assert (=> b!24715 m!19543))

(declare-fun m!19545 () Bool)

(assert (=> bm!2182 m!19545))

(assert (=> b!24718 m!18841))

(assert (=> b!24718 m!18841))

(assert (=> b!24718 m!18847))

(assert (=> b!23660 d!4535))

(declare-fun d!4537 () Bool)

(declare-fun e!15978 () Bool)

(assert (=> d!4537 e!15978))

(declare-fun res!15027 () Bool)

(assert (=> d!4537 (=> res!15027 e!15978)))

(declare-fun lt!9467 () Bool)

(assert (=> d!4537 (= res!15027 (not lt!9467))))

(declare-fun lt!9468 () Bool)

(assert (=> d!4537 (= lt!9467 lt!9468)))

(declare-fun lt!9466 () Unit!522)

(declare-fun e!15977 () Unit!522)

(assert (=> d!4537 (= lt!9466 e!15977)))

(declare-fun c!3357 () Bool)

(assert (=> d!4537 (= c!3357 lt!9468)))

(assert (=> d!4537 (= lt!9468 (containsKey!25 (toList!297 lt!8565) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> d!4537 (= (contains!229 lt!8565 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) lt!9467)))

(declare-fun b!24719 () Bool)

(declare-fun lt!9469 () Unit!522)

(assert (=> b!24719 (= e!15977 lt!9469)))

(assert (=> b!24719 (= lt!9469 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8565) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24719 (isDefined!23 (getValueByKey!61 (toList!297 lt!8565) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24720 () Bool)

(declare-fun Unit!587 () Unit!522)

(assert (=> b!24720 (= e!15977 Unit!587)))

(declare-fun b!24721 () Bool)

(assert (=> b!24721 (= e!15978 (isDefined!23 (getValueByKey!61 (toList!297 lt!8565) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))))

(assert (= (and d!4537 c!3357) b!24719))

(assert (= (and d!4537 (not c!3357)) b!24720))

(assert (= (and d!4537 (not res!15027)) b!24721))

(assert (=> d!4537 m!17080))

(declare-fun m!19547 () Bool)

(assert (=> d!4537 m!19547))

(assert (=> b!24719 m!17080))

(declare-fun m!19549 () Bool)

(assert (=> b!24719 m!19549))

(assert (=> b!24719 m!17080))

(declare-fun m!19551 () Bool)

(assert (=> b!24719 m!19551))

(assert (=> b!24719 m!19551))

(declare-fun m!19553 () Bool)

(assert (=> b!24719 m!19553))

(assert (=> b!24721 m!17080))

(assert (=> b!24721 m!19551))

(assert (=> b!24721 m!19551))

(assert (=> b!24721 m!19553))

(assert (=> b!23562 d!4537))

(assert (=> b!23517 d!4089))

(declare-fun d!4539 () Bool)

(assert (=> d!4539 (= (apply!29 lt!8565 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8565) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1010 () Bool)

(assert (= bs!1010 d!4539))

(assert (=> bs!1010 m!17939))

(assert (=> bs!1010 m!17939))

(declare-fun m!19555 () Bool)

(assert (=> bs!1010 m!19555))

(assert (=> b!23550 d!4539))

(declare-fun e!15984 () Bool)

(declare-fun lt!9470 () ListLongMap!563)

(declare-fun b!24722 () Bool)

(assert (=> b!24722 (= e!15984 (= lt!9470 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141))))))

(declare-fun b!24724 () Bool)

(declare-fun e!15982 () Bool)

(declare-fun e!15979 () Bool)

(assert (=> b!24724 (= e!15982 e!15979)))

(assert (=> b!24724 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!15030 () Bool)

(assert (=> b!24724 (= res!15030 (contains!229 lt!9470 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24724 (=> (not res!15030) (not e!15979))))

(declare-fun b!24725 () Bool)

(declare-fun e!15980 () ListLongMap!563)

(declare-fun e!15983 () ListLongMap!563)

(assert (=> b!24725 (= e!15980 e!15983)))

(declare-fun c!3358 () Bool)

(assert (=> b!24725 (= c!3358 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24726 () Bool)

(assert (=> b!24726 (= e!15980 (ListLongMap!564 Nil!561))))

(declare-fun b!24727 () Bool)

(assert (=> b!24727 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> b!24727 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8315)))))

(assert (=> b!24727 (= e!15979 (= (apply!29 lt!9470 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8315) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24728 () Bool)

(declare-fun call!2186 () ListLongMap!563)

(assert (=> b!24728 (= e!15983 call!2186)))

(declare-fun b!24729 () Bool)

(declare-fun res!15029 () Bool)

(declare-fun e!15985 () Bool)

(assert (=> b!24729 (=> (not res!15029) (not e!15985))))

(assert (=> b!24729 (= res!15029 (not (contains!229 lt!9470 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24730 () Bool)

(assert (=> b!24730 (= e!15984 (isEmpty!173 lt!9470))))

(declare-fun b!24731 () Bool)

(assert (=> b!24731 (= e!15982 e!15984)))

(declare-fun c!3360 () Bool)

(assert (=> b!24731 (= c!3360 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!2183 () Bool)

(assert (=> bm!2183 (= call!2186 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141)))))

(declare-fun b!24723 () Bool)

(assert (=> b!24723 (= e!15985 e!15982)))

(declare-fun c!3359 () Bool)

(declare-fun e!15981 () Bool)

(assert (=> b!24723 (= c!3359 e!15981)))

(declare-fun res!15028 () Bool)

(assert (=> b!24723 (=> (not res!15028) (not e!15981))))

(assert (=> b!24723 (= res!15028 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun d!4541 () Bool)

(assert (=> d!4541 e!15985))

(declare-fun res!15031 () Bool)

(assert (=> d!4541 (=> (not res!15031) (not e!15985))))

(assert (=> d!4541 (= res!15031 (not (contains!229 lt!9470 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4541 (= lt!9470 e!15980)))

(declare-fun c!3361 () Bool)

(assert (=> d!4541 (= c!3361 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4541 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4541 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9470)))

(declare-fun b!24732 () Bool)

(declare-fun lt!9472 () Unit!522)

(declare-fun lt!9473 () Unit!522)

(assert (=> b!24732 (= lt!9472 lt!9473)))

(declare-fun lt!9471 () ListLongMap!563)

(declare-fun lt!9476 () V!1187)

(declare-fun lt!9474 () (_ BitVec 64))

(declare-fun lt!9475 () (_ BitVec 64))

(assert (=> b!24732 (not (contains!229 (+!44 lt!9471 (tuple2!973 lt!9475 lt!9476)) lt!9474))))

(assert (=> b!24732 (= lt!9473 (addStillNotContains!2 lt!9471 lt!9475 lt!9476 lt!9474))))

(assert (=> b!24732 (= lt!9474 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!24732 (= lt!9476 (get!390 (select (arr!596 lt!8315) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24732 (= lt!9475 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24732 (= lt!9471 call!2186)))

(assert (=> b!24732 (= e!15983 (+!44 call!2186 (tuple2!973 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (get!390 (select (arr!596 lt!8315) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!24733 () Bool)

(assert (=> b!24733 (= e!15981 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24733 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!4541 c!3361) b!24726))

(assert (= (and d!4541 (not c!3361)) b!24725))

(assert (= (and b!24725 c!3358) b!24732))

(assert (= (and b!24725 (not c!3358)) b!24728))

(assert (= (or b!24732 b!24728) bm!2183))

(assert (= (and d!4541 res!15031) b!24729))

(assert (= (and b!24729 res!15029) b!24723))

(assert (= (and b!24723 res!15028) b!24733))

(assert (= (and b!24723 c!3359) b!24724))

(assert (= (and b!24723 (not c!3359)) b!24731))

(assert (= (and b!24724 res!15030) b!24727))

(assert (= (and b!24731 c!3360) b!24722))

(assert (= (and b!24731 (not c!3360)) b!24730))

(declare-fun b_lambda!1625 () Bool)

(assert (=> (not b_lambda!1625) (not b!24727)))

(assert (=> b!24727 t!3232))

(declare-fun b_and!1537 () Bool)

(assert (= b_and!1535 (and (=> t!3232 result!1093) b_and!1537)))

(declare-fun b_lambda!1627 () Bool)

(assert (=> (not b_lambda!1627) (not b!24732)))

(assert (=> b!24732 t!3232))

(declare-fun b_and!1539 () Bool)

(assert (= b_and!1537 (and (=> t!3232 result!1093) b_and!1539)))

(declare-fun m!19557 () Bool)

(assert (=> b!24732 m!19557))

(declare-fun m!19559 () Bool)

(assert (=> b!24732 m!19559))

(declare-fun m!19561 () Bool)

(assert (=> b!24732 m!19561))

(assert (=> b!24732 m!17525))

(assert (=> b!24732 m!16930))

(assert (=> b!24732 m!17527))

(assert (=> b!24732 m!16930))

(assert (=> b!24732 m!16934))

(assert (=> b!24732 m!19557))

(declare-fun m!19563 () Bool)

(assert (=> b!24732 m!19563))

(assert (=> b!24732 m!17525))

(declare-fun m!19565 () Bool)

(assert (=> d!4541 m!19565))

(assert (=> d!4541 m!16908))

(assert (=> b!24724 m!16934))

(assert (=> b!24724 m!16934))

(declare-fun m!19567 () Bool)

(assert (=> b!24724 m!19567))

(declare-fun m!19569 () Bool)

(assert (=> bm!2183 m!19569))

(assert (=> b!24733 m!16934))

(assert (=> b!24733 m!16934))

(assert (=> b!24733 m!16940))

(declare-fun m!19571 () Bool)

(assert (=> b!24730 m!19571))

(assert (=> b!24725 m!16934))

(assert (=> b!24725 m!16934))

(assert (=> b!24725 m!16940))

(assert (=> b!24722 m!19569))

(declare-fun m!19573 () Bool)

(assert (=> b!24729 m!19573))

(assert (=> b!24727 m!17525))

(assert (=> b!24727 m!16930))

(assert (=> b!24727 m!17527))

(assert (=> b!24727 m!16930))

(assert (=> b!24727 m!16934))

(assert (=> b!24727 m!17525))

(assert (=> b!24727 m!16934))

(declare-fun m!19575 () Bool)

(assert (=> b!24727 m!19575))

(assert (=> bm!2036 d!4541))

(declare-fun d!4543 () Bool)

(assert (=> d!4543 (isDefined!23 (getValueByKey!61 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))

(declare-fun lt!9477 () Unit!522)

(assert (=> d!4543 (= lt!9477 (choose!212 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))

(declare-fun e!15986 () Bool)

(assert (=> d!4543 e!15986))

(declare-fun res!15032 () Bool)

(assert (=> d!4543 (=> (not res!15032) (not e!15986))))

(assert (=> d!4543 (= res!15032 (isStrictlySorted!158 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))))

(assert (=> d!4543 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))) lt!9477)))

(declare-fun b!24734 () Bool)

(assert (=> b!24734 (= e!15986 (containsKey!25 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))

(assert (= (and d!4543 res!15032) b!24734))

(assert (=> d!4543 m!16854))

(assert (=> d!4543 m!17307))

(assert (=> d!4543 m!17307))

(assert (=> d!4543 m!17309))

(assert (=> d!4543 m!16854))

(declare-fun m!19577 () Bool)

(assert (=> d!4543 m!19577))

(declare-fun m!19579 () Bool)

(assert (=> d!4543 m!19579))

(assert (=> b!24734 m!16854))

(assert (=> b!24734 m!17303))

(assert (=> b!23688 d!4543))

(assert (=> b!23688 d!4483))

(assert (=> b!23688 d!4485))

(declare-fun d!4545 () Bool)

(declare-fun e!15988 () Bool)

(assert (=> d!4545 e!15988))

(declare-fun res!15033 () Bool)

(assert (=> d!4545 (=> res!15033 e!15988)))

(declare-fun lt!9479 () Bool)

(assert (=> d!4545 (= res!15033 (not lt!9479))))

(declare-fun lt!9480 () Bool)

(assert (=> d!4545 (= lt!9479 lt!9480)))

(declare-fun lt!9478 () Unit!522)

(declare-fun e!15987 () Unit!522)

(assert (=> d!4545 (= lt!9478 e!15987)))

(declare-fun c!3362 () Bool)

(assert (=> d!4545 (= c!3362 lt!9480)))

(assert (=> d!4545 (= lt!9480 (containsKey!25 (toList!297 lt!8704) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> d!4545 (= (contains!229 lt!8704 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) lt!9479)))

(declare-fun b!24735 () Bool)

(declare-fun lt!9481 () Unit!522)

(assert (=> b!24735 (= e!15987 lt!9481)))

(assert (=> b!24735 (= lt!9481 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8704) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24735 (isDefined!23 (getValueByKey!61 (toList!297 lt!8704) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24736 () Bool)

(declare-fun Unit!588 () Unit!522)

(assert (=> b!24736 (= e!15987 Unit!588)))

(declare-fun b!24737 () Bool)

(assert (=> b!24737 (= e!15988 (isDefined!23 (getValueByKey!61 (toList!297 lt!8704) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))))

(assert (= (and d!4545 c!3362) b!24735))

(assert (= (and d!4545 (not c!3362)) b!24736))

(assert (= (and d!4545 (not res!15033)) b!24737))

(assert (=> d!4545 m!17080))

(declare-fun m!19581 () Bool)

(assert (=> d!4545 m!19581))

(assert (=> b!24735 m!17080))

(declare-fun m!19583 () Bool)

(assert (=> b!24735 m!19583))

(assert (=> b!24735 m!17080))

(declare-fun m!19585 () Bool)

(assert (=> b!24735 m!19585))

(assert (=> b!24735 m!19585))

(declare-fun m!19587 () Bool)

(assert (=> b!24735 m!19587))

(assert (=> b!24737 m!17080))

(assert (=> b!24737 m!19585))

(assert (=> b!24737 m!19585))

(assert (=> b!24737 m!19587))

(assert (=> b!23740 d!4545))

(declare-fun d!4547 () Bool)

(declare-fun res!15034 () Bool)

(declare-fun e!15989 () Bool)

(assert (=> d!4547 (=> res!15034 e!15989)))

(assert (=> d!4547 (= res!15034 (= (select (arr!597 (_keys!3163 lt!8141)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4547 (= (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!15989)))

(declare-fun b!24738 () Bool)

(declare-fun e!15990 () Bool)

(assert (=> b!24738 (= e!15989 e!15990)))

(declare-fun res!15035 () Bool)

(assert (=> b!24738 (=> (not res!15035) (not e!15990))))

(assert (=> b!24738 (= res!15035 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24739 () Bool)

(assert (=> b!24739 (= e!15990 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!4547 (not res!15034)) b!24738))

(assert (= (and b!24738 res!15035) b!24739))

(declare-fun m!19589 () Bool)

(assert (=> d!4547 m!19589))

(declare-fun m!19591 () Bool)

(assert (=> b!24739 m!19591))

(assert (=> b!23641 d!4547))

(declare-fun d!4549 () Bool)

(assert (=> d!4549 (= (apply!29 lt!8447 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8447) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1011 () Bool)

(assert (= bs!1011 d!4549))

(assert (=> bs!1011 m!18027))

(assert (=> bs!1011 m!18027))

(declare-fun m!19593 () Bool)

(assert (=> bs!1011 m!19593))

(assert (=> b!23463 d!4549))

(declare-fun d!4551 () Bool)

(declare-fun e!15992 () Bool)

(assert (=> d!4551 e!15992))

(declare-fun res!15036 () Bool)

(assert (=> d!4551 (=> res!15036 e!15992)))

(declare-fun lt!9483 () Bool)

(assert (=> d!4551 (= res!15036 (not lt!9483))))

(declare-fun lt!9484 () Bool)

(assert (=> d!4551 (= lt!9483 lt!9484)))

(declare-fun lt!9482 () Unit!522)

(declare-fun e!15991 () Unit!522)

(assert (=> d!4551 (= lt!9482 e!15991)))

(declare-fun c!3363 () Bool)

(assert (=> d!4551 (= c!3363 lt!9484)))

(assert (=> d!4551 (= lt!9484 (containsKey!25 (toList!297 lt!8447) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> d!4551 (= (contains!229 lt!8447 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) lt!9483)))

(declare-fun b!24740 () Bool)

(declare-fun lt!9485 () Unit!522)

(assert (=> b!24740 (= e!15991 lt!9485)))

(assert (=> b!24740 (= lt!9485 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8447) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24740 (isDefined!23 (getValueByKey!61 (toList!297 lt!8447) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24741 () Bool)

(declare-fun Unit!589 () Unit!522)

(assert (=> b!24741 (= e!15991 Unit!589)))

(declare-fun b!24742 () Bool)

(assert (=> b!24742 (= e!15992 (isDefined!23 (getValueByKey!61 (toList!297 lt!8447) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(assert (= (and d!4551 c!3363) b!24740))

(assert (= (and d!4551 (not c!3363)) b!24741))

(assert (= (and d!4551 (not res!15036)) b!24742))

(assert (=> d!4551 m!16934))

(declare-fun m!19595 () Bool)

(assert (=> d!4551 m!19595))

(assert (=> b!24740 m!16934))

(declare-fun m!19597 () Bool)

(assert (=> b!24740 m!19597))

(assert (=> b!24740 m!16934))

(declare-fun m!19599 () Bool)

(assert (=> b!24740 m!19599))

(assert (=> b!24740 m!19599))

(declare-fun m!19601 () Bool)

(assert (=> b!24740 m!19601))

(assert (=> b!24742 m!16934))

(assert (=> b!24742 m!19599))

(assert (=> b!24742 m!19599))

(assert (=> b!24742 m!19601))

(assert (=> b!23475 d!4551))

(assert (=> b!23714 d!4039))

(assert (=> b!23714 d!4041))

(assert (=> d!3997 d!3977))

(declare-fun b!24743 () Bool)

(declare-fun e!15994 () (_ BitVec 32))

(assert (=> b!24743 (= e!15994 #b00000000000000000000000000000000)))

(declare-fun b!24744 () Bool)

(declare-fun e!15993 () (_ BitVec 32))

(assert (=> b!24744 (= e!15994 e!15993)))

(declare-fun c!3365 () Bool)

(assert (=> b!24744 (= c!3365 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)))))

(declare-fun bm!2184 () Bool)

(declare-fun call!2187 () (_ BitVec 32))

(assert (=> bm!2184 (= call!2187 (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8361)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!490 lt!8361)))))))

(declare-fun d!4553 () Bool)

(declare-fun lt!9486 () (_ BitVec 32))

(assert (=> d!4553 (and (bvsge lt!9486 #b00000000000000000000000000000000) (bvsle lt!9486 (bvsub (size!693 (_keys!3163 (_2!490 lt!8361))) #b00000000000000000000000000000000)))))

(assert (=> d!4553 (= lt!9486 e!15994)))

(declare-fun c!3364 () Bool)

(assert (=> d!4553 (= c!3364 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))))))

(assert (=> d!4553 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (_2!490 lt!8361))) (size!693 (_keys!3163 (_2!490 lt!8361)))))))

(assert (=> d!4553 (= (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8361)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8361)))) lt!9486)))

(declare-fun b!24745 () Bool)

(assert (=> b!24745 (= e!15993 (bvadd #b00000000000000000000000000000001 call!2187))))

(declare-fun b!24746 () Bool)

(assert (=> b!24746 (= e!15993 call!2187)))

(assert (= (and d!4553 c!3364) b!24743))

(assert (= (and d!4553 (not c!3364)) b!24744))

(assert (= (and b!24744 c!3365) b!24745))

(assert (= (and b!24744 (not c!3365)) b!24746))

(assert (= (or b!24745 b!24746) bm!2184))

(assert (=> b!24744 m!19011))

(assert (=> b!24744 m!19011))

(assert (=> b!24744 m!19017))

(declare-fun m!19603 () Bool)

(assert (=> bm!2184 m!19603))

(assert (=> b!23718 d!4553))

(assert (=> d!4079 d!4055))

(declare-fun d!4555 () Bool)

(declare-fun e!15996 () Bool)

(assert (=> d!4555 e!15996))

(declare-fun res!15037 () Bool)

(assert (=> d!4555 (=> res!15037 e!15996)))

(declare-fun lt!9488 () Bool)

(assert (=> d!4555 (= res!15037 (not lt!9488))))

(declare-fun lt!9489 () Bool)

(assert (=> d!4555 (= lt!9488 lt!9489)))

(declare-fun lt!9487 () Unit!522)

(declare-fun e!15995 () Unit!522)

(assert (=> d!4555 (= lt!9487 e!15995)))

(declare-fun c!3366 () Bool)

(assert (=> d!4555 (= c!3366 lt!9489)))

(assert (=> d!4555 (= lt!9489 (containsKey!25 (toList!297 lt!8621) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> d!4555 (= (contains!229 lt!8621 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) lt!9488)))

(declare-fun b!24747 () Bool)

(declare-fun lt!9490 () Unit!522)

(assert (=> b!24747 (= e!15995 lt!9490)))

(assert (=> b!24747 (= lt!9490 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8621) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(assert (=> b!24747 (isDefined!23 (getValueByKey!61 (toList!297 lt!8621) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24748 () Bool)

(declare-fun Unit!590 () Unit!522)

(assert (=> b!24748 (= e!15995 Unit!590)))

(declare-fun b!24749 () Bool)

(assert (=> b!24749 (= e!15996 (isDefined!23 (getValueByKey!61 (toList!297 lt!8621) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4555 c!3366) b!24747))

(assert (= (and d!4555 (not c!3366)) b!24748))

(assert (= (and d!4555 (not res!15037)) b!24749))

(declare-fun m!19605 () Bool)

(assert (=> d!4555 m!19605))

(declare-fun m!19607 () Bool)

(assert (=> b!24747 m!19607))

(assert (=> b!24747 m!17204))

(assert (=> b!24747 m!17204))

(declare-fun m!19609 () Bool)

(assert (=> b!24747 m!19609))

(assert (=> b!24749 m!17204))

(assert (=> b!24749 m!17204))

(assert (=> b!24749 m!19609))

(assert (=> d!4021 d!4555))

(declare-fun b!24752 () Bool)

(declare-fun e!15998 () Option!67)

(assert (=> b!24752 (= e!15998 (getValueByKey!61 (t!3229 lt!8619) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24750 () Bool)

(declare-fun e!15997 () Option!67)

(assert (=> b!24750 (= e!15997 (Some!66 (_2!495 (h!1126 lt!8619))))))

(declare-fun b!24753 () Bool)

(assert (=> b!24753 (= e!15998 None!65)))

(declare-fun c!3367 () Bool)

(declare-fun d!4557 () Bool)

(assert (=> d!4557 (= c!3367 (and ((_ is Cons!560) lt!8619) (= (_1!495 (h!1126 lt!8619)) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4557 (= (getValueByKey!61 lt!8619 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) e!15997)))

(declare-fun b!24751 () Bool)

(assert (=> b!24751 (= e!15997 e!15998)))

(declare-fun c!3368 () Bool)

(assert (=> b!24751 (= c!3368 (and ((_ is Cons!560) lt!8619) (not (= (_1!495 (h!1126 lt!8619)) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(assert (= (and d!4557 c!3367) b!24750))

(assert (= (and d!4557 (not c!3367)) b!24751))

(assert (= (and b!24751 c!3368) b!24752))

(assert (= (and b!24751 (not c!3368)) b!24753))

(declare-fun m!19611 () Bool)

(assert (=> b!24752 m!19611))

(assert (=> d!4021 d!4557))

(declare-fun d!4559 () Bool)

(assert (=> d!4559 (= (getValueByKey!61 lt!8619 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) (Some!66 (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun lt!9491 () Unit!522)

(assert (=> d!4559 (= lt!9491 (choose!215 lt!8619 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun e!15999 () Bool)

(assert (=> d!4559 e!15999))

(declare-fun res!15038 () Bool)

(assert (=> d!4559 (=> (not res!15038) (not e!15999))))

(assert (=> d!4559 (= res!15038 (isStrictlySorted!158 lt!8619))))

(assert (=> d!4559 (= (lemmaContainsTupThenGetReturnValue!18 lt!8619 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) lt!9491)))

(declare-fun b!24754 () Bool)

(declare-fun res!15039 () Bool)

(assert (=> b!24754 (=> (not res!15039) (not e!15999))))

(assert (=> b!24754 (= res!15039 (containsKey!25 lt!8619 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24755 () Bool)

(assert (=> b!24755 (= e!15999 (contains!231 lt!8619 (tuple2!973 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4559 res!15038) b!24754))

(assert (= (and b!24754 res!15039) b!24755))

(assert (=> d!4559 m!17198))

(declare-fun m!19613 () Bool)

(assert (=> d!4559 m!19613))

(declare-fun m!19615 () Bool)

(assert (=> d!4559 m!19615))

(declare-fun m!19617 () Bool)

(assert (=> b!24754 m!19617))

(declare-fun m!19619 () Bool)

(assert (=> b!24755 m!19619))

(assert (=> d!4021 d!4559))

(declare-fun c!3369 () Bool)

(declare-fun b!24756 () Bool)

(assert (=> b!24756 (= c!3369 (and ((_ is Cons!560) (toList!297 (ite c!3009 call!1951 call!1952))) (bvsgt (_1!495 (h!1126 (toList!297 (ite c!3009 call!1951 call!1952)))) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun e!16004 () List!564)

(declare-fun e!16001 () List!564)

(assert (=> b!24756 (= e!16004 e!16001)))

(declare-fun b!24757 () Bool)

(declare-fun c!3371 () Bool)

(declare-fun e!16002 () List!564)

(assert (=> b!24757 (= e!16002 (ite c!3371 (t!3229 (toList!297 (ite c!3009 call!1951 call!1952))) (ite c!3369 (Cons!560 (h!1126 (toList!297 (ite c!3009 call!1951 call!1952))) (t!3229 (toList!297 (ite c!3009 call!1951 call!1952)))) Nil!561)))))

(declare-fun b!24758 () Bool)

(assert (=> b!24758 (= e!16002 (insertStrictlySorted!18 (t!3229 (toList!297 (ite c!3009 call!1951 call!1952))) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24759 () Bool)

(declare-fun call!2189 () List!564)

(assert (=> b!24759 (= e!16001 call!2189)))

(declare-fun call!2188 () List!564)

(declare-fun bm!2185 () Bool)

(declare-fun c!3372 () Bool)

(assert (=> bm!2185 (= call!2188 ($colon$colon!30 e!16002 (ite c!3372 (h!1126 (toList!297 (ite c!3009 call!1951 call!1952))) (tuple2!973 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(declare-fun c!3370 () Bool)

(assert (=> bm!2185 (= c!3370 c!3372)))

(declare-fun lt!9492 () List!564)

(declare-fun b!24760 () Bool)

(declare-fun e!16003 () Bool)

(assert (=> b!24760 (= e!16003 (contains!231 lt!9492 (tuple2!973 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24761 () Bool)

(declare-fun call!2190 () List!564)

(assert (=> b!24761 (= e!16004 call!2190)))

(declare-fun b!24762 () Bool)

(declare-fun e!16000 () List!564)

(assert (=> b!24762 (= e!16000 e!16004)))

(assert (=> b!24762 (= c!3371 (and ((_ is Cons!560) (toList!297 (ite c!3009 call!1951 call!1952))) (= (_1!495 (h!1126 (toList!297 (ite c!3009 call!1951 call!1952)))) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(declare-fun b!24763 () Bool)

(declare-fun res!15041 () Bool)

(assert (=> b!24763 (=> (not res!15041) (not e!16003))))

(assert (=> b!24763 (= res!15041 (containsKey!25 lt!9492 (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun bm!2187 () Bool)

(assert (=> bm!2187 (= call!2190 call!2188)))

(declare-fun b!24764 () Bool)

(assert (=> b!24764 (= e!16001 call!2189)))

(declare-fun b!24765 () Bool)

(assert (=> b!24765 (= e!16000 call!2188)))

(declare-fun d!4561 () Bool)

(assert (=> d!4561 e!16003))

(declare-fun res!15040 () Bool)

(assert (=> d!4561 (=> (not res!15040) (not e!16003))))

(assert (=> d!4561 (= res!15040 (isStrictlySorted!158 lt!9492))))

(assert (=> d!4561 (= lt!9492 e!16000)))

(assert (=> d!4561 (= c!3372 (and ((_ is Cons!560) (toList!297 (ite c!3009 call!1951 call!1952))) (bvslt (_1!495 (h!1126 (toList!297 (ite c!3009 call!1951 call!1952)))) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4561 (isStrictlySorted!158 (toList!297 (ite c!3009 call!1951 call!1952)))))

(assert (=> d!4561 (= (insertStrictlySorted!18 (toList!297 (ite c!3009 call!1951 call!1952)) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (_2!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) lt!9492)))

(declare-fun bm!2186 () Bool)

(assert (=> bm!2186 (= call!2189 call!2190)))

(assert (= (and d!4561 c!3372) b!24765))

(assert (= (and d!4561 (not c!3372)) b!24762))

(assert (= (and b!24762 c!3371) b!24761))

(assert (= (and b!24762 (not c!3371)) b!24756))

(assert (= (and b!24756 c!3369) b!24759))

(assert (= (and b!24756 (not c!3369)) b!24764))

(assert (= (or b!24759 b!24764) bm!2186))

(assert (= (or b!24761 bm!2186) bm!2187))

(assert (= (or b!24765 bm!2187) bm!2185))

(assert (= (and bm!2185 c!3370) b!24758))

(assert (= (and bm!2185 (not c!3370)) b!24757))

(assert (= (and d!4561 res!15040) b!24763))

(assert (= (and b!24763 res!15041) b!24760))

(declare-fun m!19621 () Bool)

(assert (=> b!24763 m!19621))

(declare-fun m!19623 () Bool)

(assert (=> b!24760 m!19623))

(declare-fun m!19625 () Bool)

(assert (=> bm!2185 m!19625))

(declare-fun m!19627 () Bool)

(assert (=> b!24758 m!19627))

(declare-fun m!19629 () Bool)

(assert (=> d!4561 m!19629))

(declare-fun m!19631 () Bool)

(assert (=> d!4561 m!19631))

(assert (=> d!4021 d!4561))

(declare-fun d!4563 () Bool)

(assert (=> d!4563 (= (apply!29 lt!8704 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8704) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1012 () Bool)

(assert (= bs!1012 d!4563))

(assert (=> bs!1012 m!18075))

(assert (=> bs!1012 m!18075))

(declare-fun m!19633 () Bool)

(assert (=> bs!1012 m!19633))

(assert (=> b!23728 d!4563))

(declare-fun b!24766 () Bool)

(declare-fun e!16005 () Bool)

(declare-fun e!16006 () Bool)

(assert (=> b!24766 (= e!16005 e!16006)))

(declare-fun lt!9495 () (_ BitVec 64))

(assert (=> b!24766 (= lt!9495 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9493 () Unit!522)

(assert (=> b!24766 (= lt!9493 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 lt!8141) lt!9495 #b00000000000000000000000000000000))))

(assert (=> b!24766 (arrayContainsKey!0 (_keys!3163 lt!8141) lt!9495 #b00000000000000000000000000000000)))

(declare-fun lt!9494 () Unit!522)

(assert (=> b!24766 (= lt!9494 lt!9493)))

(declare-fun res!15042 () Bool)

(assert (=> b!24766 (= res!15042 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)) (Found!54 #b00000000000000000000000000000000)))))

(assert (=> b!24766 (=> (not res!15042) (not e!16006))))

(declare-fun b!24767 () Bool)

(declare-fun call!2191 () Bool)

(assert (=> b!24767 (= e!16006 call!2191)))

(declare-fun bm!2188 () Bool)

(assert (=> bm!2188 (= call!2191 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun d!4565 () Bool)

(declare-fun res!15043 () Bool)

(declare-fun e!16007 () Bool)

(assert (=> d!4565 (=> res!15043 e!16007)))

(assert (=> d!4565 (= res!15043 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4565 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 lt!8141) (mask!4729 lt!8141)) e!16007)))

(declare-fun b!24768 () Bool)

(assert (=> b!24768 (= e!16005 call!2191)))

(declare-fun b!24769 () Bool)

(assert (=> b!24769 (= e!16007 e!16005)))

(declare-fun c!3373 () Bool)

(assert (=> b!24769 (= c!3373 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (= (and d!4565 (not res!15043)) b!24769))

(assert (= (and b!24769 c!3373) b!24766))

(assert (= (and b!24769 (not c!3373)) b!24768))

(assert (= (and b!24766 res!15042) b!24767))

(assert (= (or b!24767 b!24768) bm!2188))

(assert (=> b!24766 m!16934))

(declare-fun m!19635 () Bool)

(assert (=> b!24766 m!19635))

(declare-fun m!19637 () Bool)

(assert (=> b!24766 m!19637))

(assert (=> b!24766 m!16934))

(declare-fun m!19639 () Bool)

(assert (=> b!24766 m!19639))

(declare-fun m!19641 () Bool)

(assert (=> bm!2188 m!19641))

(assert (=> b!24769 m!16934))

(assert (=> b!24769 m!16934))

(assert (=> b!24769 m!16940))

(assert (=> b!23663 d!4565))

(declare-fun d!4567 () Bool)

(assert (=> d!4567 (= (apply!29 (+!44 lt!8772 (tuple2!973 lt!8758 (minValue!1665 lt!8141))) lt!8756) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8772 (tuple2!973 lt!8758 (minValue!1665 lt!8141)))) lt!8756)))))

(declare-fun bs!1013 () Bool)

(assert (= bs!1013 d!4567))

(declare-fun m!19643 () Bool)

(assert (=> bs!1013 m!19643))

(assert (=> bs!1013 m!19643))

(declare-fun m!19645 () Bool)

(assert (=> bs!1013 m!19645))

(assert (=> b!23791 d!4567))

(declare-fun d!4569 () Bool)

(declare-fun e!16009 () Bool)

(assert (=> d!4569 e!16009))

(declare-fun res!15044 () Bool)

(assert (=> d!4569 (=> res!15044 e!16009)))

(declare-fun lt!9497 () Bool)

(assert (=> d!4569 (= res!15044 (not lt!9497))))

(declare-fun lt!9498 () Bool)

(assert (=> d!4569 (= lt!9497 lt!9498)))

(declare-fun lt!9496 () Unit!522)

(declare-fun e!16008 () Unit!522)

(assert (=> d!4569 (= lt!9496 e!16008)))

(declare-fun c!3374 () Bool)

(assert (=> d!4569 (= c!3374 lt!9498)))

(assert (=> d!4569 (= lt!9498 (containsKey!25 (toList!297 (+!44 lt!8771 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))) lt!8769))))

(assert (=> d!4569 (= (contains!229 (+!44 lt!8771 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141))) lt!8769) lt!9497)))

(declare-fun b!24770 () Bool)

(declare-fun lt!9499 () Unit!522)

(assert (=> b!24770 (= e!16008 lt!9499)))

(assert (=> b!24770 (= lt!9499 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (+!44 lt!8771 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))) lt!8769))))

(assert (=> b!24770 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8771 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))) lt!8769))))

(declare-fun b!24771 () Bool)

(declare-fun Unit!591 () Unit!522)

(assert (=> b!24771 (= e!16008 Unit!591)))

(declare-fun b!24772 () Bool)

(assert (=> b!24772 (= e!16009 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8771 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))) lt!8769)))))

(assert (= (and d!4569 c!3374) b!24770))

(assert (= (and d!4569 (not c!3374)) b!24771))

(assert (= (and d!4569 (not res!15044)) b!24772))

(declare-fun m!19647 () Bool)

(assert (=> d!4569 m!19647))

(declare-fun m!19649 () Bool)

(assert (=> b!24770 m!19649))

(declare-fun m!19651 () Bool)

(assert (=> b!24770 m!19651))

(assert (=> b!24770 m!19651))

(declare-fun m!19653 () Bool)

(assert (=> b!24770 m!19653))

(assert (=> b!24772 m!19651))

(assert (=> b!24772 m!19651))

(assert (=> b!24772 m!19653))

(assert (=> b!23791 d!4569))

(declare-fun d!4571 () Bool)

(assert (=> d!4571 (= (apply!29 (+!44 lt!8775 (tuple2!973 lt!8773 (minValue!1665 lt!8141))) lt!8767) (apply!29 lt!8775 lt!8767))))

(declare-fun lt!9500 () Unit!522)

(assert (=> d!4571 (= lt!9500 (choose!213 lt!8775 lt!8773 (minValue!1665 lt!8141) lt!8767))))

(declare-fun e!16010 () Bool)

(assert (=> d!4571 e!16010))

(declare-fun res!15045 () Bool)

(assert (=> d!4571 (=> (not res!15045) (not e!16010))))

(assert (=> d!4571 (= res!15045 (contains!229 lt!8775 lt!8767))))

(assert (=> d!4571 (= (addApplyDifferent!14 lt!8775 lt!8773 (minValue!1665 lt!8141) lt!8767) lt!9500)))

(declare-fun b!24773 () Bool)

(assert (=> b!24773 (= e!16010 (not (= lt!8767 lt!8773)))))

(assert (= (and d!4571 res!15045) b!24773))

(declare-fun m!19655 () Bool)

(assert (=> d!4571 m!19655))

(assert (=> d!4571 m!17555))

(assert (=> d!4571 m!17549))

(assert (=> d!4571 m!17549))

(assert (=> d!4571 m!17551))

(declare-fun m!19657 () Bool)

(assert (=> d!4571 m!19657))

(assert (=> b!23791 d!4571))

(declare-fun d!4573 () Bool)

(assert (=> d!4573 (= (apply!29 (+!44 lt!8761 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141))) lt!8768) (apply!29 lt!8761 lt!8768))))

(declare-fun lt!9501 () Unit!522)

(assert (=> d!4573 (= lt!9501 (choose!213 lt!8761 lt!8776 (zeroValue!1665 lt!8141) lt!8768))))

(declare-fun e!16011 () Bool)

(assert (=> d!4573 e!16011))

(declare-fun res!15046 () Bool)

(assert (=> d!4573 (=> (not res!15046) (not e!16011))))

(assert (=> d!4573 (= res!15046 (contains!229 lt!8761 lt!8768))))

(assert (=> d!4573 (= (addApplyDifferent!14 lt!8761 lt!8776 (zeroValue!1665 lt!8141) lt!8768) lt!9501)))

(declare-fun b!24774 () Bool)

(assert (=> b!24774 (= e!16011 (not (= lt!8768 lt!8776)))))

(assert (= (and d!4573 res!15046) b!24774))

(declare-fun m!19659 () Bool)

(assert (=> d!4573 m!19659))

(assert (=> d!4573 m!17543))

(assert (=> d!4573 m!17535))

(assert (=> d!4573 m!17535))

(assert (=> d!4573 m!17537))

(declare-fun m!19661 () Bool)

(assert (=> d!4573 m!19661))

(assert (=> b!23791 d!4573))

(declare-fun d!4575 () Bool)

(assert (=> d!4575 (contains!229 (+!44 lt!8771 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141))) lt!8769)))

(declare-fun lt!9502 () Unit!522)

(assert (=> d!4575 (= lt!9502 (choose!214 lt!8771 lt!8774 (zeroValue!1665 lt!8141) lt!8769))))

(assert (=> d!4575 (contains!229 lt!8771 lt!8769)))

(assert (=> d!4575 (= (addStillContains!14 lt!8771 lt!8774 (zeroValue!1665 lt!8141) lt!8769) lt!9502)))

(declare-fun bs!1014 () Bool)

(assert (= bs!1014 d!4575))

(assert (=> bs!1014 m!17545))

(assert (=> bs!1014 m!17545))

(assert (=> bs!1014 m!17563))

(declare-fun m!19663 () Bool)

(assert (=> bs!1014 m!19663))

(declare-fun m!19665 () Bool)

(assert (=> bs!1014 m!19665))

(assert (=> b!23791 d!4575))

(declare-fun d!4577 () Bool)

(declare-fun e!16012 () Bool)

(assert (=> d!4577 e!16012))

(declare-fun res!15048 () Bool)

(assert (=> d!4577 (=> (not res!15048) (not e!16012))))

(declare-fun lt!9506 () ListLongMap!563)

(assert (=> d!4577 (= res!15048 (contains!229 lt!9506 (_1!495 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))))))

(declare-fun lt!9504 () List!564)

(assert (=> d!4577 (= lt!9506 (ListLongMap!564 lt!9504))))

(declare-fun lt!9503 () Unit!522)

(declare-fun lt!9505 () Unit!522)

(assert (=> d!4577 (= lt!9503 lt!9505)))

(assert (=> d!4577 (= (getValueByKey!61 lt!9504 (_1!495 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4577 (= lt!9505 (lemmaContainsTupThenGetReturnValue!18 lt!9504 (_1!495 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4577 (= lt!9504 (insertStrictlySorted!18 (toList!297 lt!8771) (_1!495 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4577 (= (+!44 lt!8771 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141))) lt!9506)))

(declare-fun b!24775 () Bool)

(declare-fun res!15047 () Bool)

(assert (=> b!24775 (=> (not res!15047) (not e!16012))))

(assert (=> b!24775 (= res!15047 (= (getValueByKey!61 (toList!297 lt!9506) (_1!495 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8774 (zeroValue!1665 lt!8141))))))))

(declare-fun b!24776 () Bool)

(assert (=> b!24776 (= e!16012 (contains!231 (toList!297 lt!9506) (tuple2!973 lt!8774 (zeroValue!1665 lt!8141))))))

(assert (= (and d!4577 res!15048) b!24775))

(assert (= (and b!24775 res!15047) b!24776))

(declare-fun m!19667 () Bool)

(assert (=> d!4577 m!19667))

(declare-fun m!19669 () Bool)

(assert (=> d!4577 m!19669))

(declare-fun m!19671 () Bool)

(assert (=> d!4577 m!19671))

(declare-fun m!19673 () Bool)

(assert (=> d!4577 m!19673))

(declare-fun m!19675 () Bool)

(assert (=> b!24775 m!19675))

(declare-fun m!19677 () Bool)

(assert (=> b!24776 m!19677))

(assert (=> b!23791 d!4577))

(declare-fun d!4579 () Bool)

(declare-fun e!16013 () Bool)

(assert (=> d!4579 e!16013))

(declare-fun res!15050 () Bool)

(assert (=> d!4579 (=> (not res!15050) (not e!16013))))

(declare-fun lt!9510 () ListLongMap!563)

(assert (=> d!4579 (= res!15050 (contains!229 lt!9510 (_1!495 (tuple2!973 lt!8758 (minValue!1665 lt!8141)))))))

(declare-fun lt!9508 () List!564)

(assert (=> d!4579 (= lt!9510 (ListLongMap!564 lt!9508))))

(declare-fun lt!9507 () Unit!522)

(declare-fun lt!9509 () Unit!522)

(assert (=> d!4579 (= lt!9507 lt!9509)))

(assert (=> d!4579 (= (getValueByKey!61 lt!9508 (_1!495 (tuple2!973 lt!8758 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8758 (minValue!1665 lt!8141)))))))

(assert (=> d!4579 (= lt!9509 (lemmaContainsTupThenGetReturnValue!18 lt!9508 (_1!495 (tuple2!973 lt!8758 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8758 (minValue!1665 lt!8141)))))))

(assert (=> d!4579 (= lt!9508 (insertStrictlySorted!18 (toList!297 lt!8772) (_1!495 (tuple2!973 lt!8758 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8758 (minValue!1665 lt!8141)))))))

(assert (=> d!4579 (= (+!44 lt!8772 (tuple2!973 lt!8758 (minValue!1665 lt!8141))) lt!9510)))

(declare-fun b!24777 () Bool)

(declare-fun res!15049 () Bool)

(assert (=> b!24777 (=> (not res!15049) (not e!16013))))

(assert (=> b!24777 (= res!15049 (= (getValueByKey!61 (toList!297 lt!9510) (_1!495 (tuple2!973 lt!8758 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8758 (minValue!1665 lt!8141))))))))

(declare-fun b!24778 () Bool)

(assert (=> b!24778 (= e!16013 (contains!231 (toList!297 lt!9510) (tuple2!973 lt!8758 (minValue!1665 lt!8141))))))

(assert (= (and d!4579 res!15050) b!24777))

(assert (= (and b!24777 res!15049) b!24778))

(declare-fun m!19679 () Bool)

(assert (=> d!4579 m!19679))

(declare-fun m!19681 () Bool)

(assert (=> d!4579 m!19681))

(declare-fun m!19683 () Bool)

(assert (=> d!4579 m!19683))

(declare-fun m!19685 () Bool)

(assert (=> d!4579 m!19685))

(declare-fun m!19687 () Bool)

(assert (=> b!24777 m!19687))

(declare-fun m!19689 () Bool)

(assert (=> b!24778 m!19689))

(assert (=> b!23791 d!4579))

(declare-fun d!4581 () Bool)

(assert (=> d!4581 (= (apply!29 (+!44 lt!8761 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141))) lt!8768) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8761 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141)))) lt!8768)))))

(declare-fun bs!1015 () Bool)

(assert (= bs!1015 d!4581))

(declare-fun m!19691 () Bool)

(assert (=> bs!1015 m!19691))

(assert (=> bs!1015 m!19691))

(declare-fun m!19693 () Bool)

(assert (=> bs!1015 m!19693))

(assert (=> b!23791 d!4581))

(declare-fun d!4583 () Bool)

(declare-fun e!16014 () Bool)

(assert (=> d!4583 e!16014))

(declare-fun res!15052 () Bool)

(assert (=> d!4583 (=> (not res!15052) (not e!16014))))

(declare-fun lt!9514 () ListLongMap!563)

(assert (=> d!4583 (= res!15052 (contains!229 lt!9514 (_1!495 (tuple2!973 lt!8773 (minValue!1665 lt!8141)))))))

(declare-fun lt!9512 () List!564)

(assert (=> d!4583 (= lt!9514 (ListLongMap!564 lt!9512))))

(declare-fun lt!9511 () Unit!522)

(declare-fun lt!9513 () Unit!522)

(assert (=> d!4583 (= lt!9511 lt!9513)))

(assert (=> d!4583 (= (getValueByKey!61 lt!9512 (_1!495 (tuple2!973 lt!8773 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8773 (minValue!1665 lt!8141)))))))

(assert (=> d!4583 (= lt!9513 (lemmaContainsTupThenGetReturnValue!18 lt!9512 (_1!495 (tuple2!973 lt!8773 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8773 (minValue!1665 lt!8141)))))))

(assert (=> d!4583 (= lt!9512 (insertStrictlySorted!18 (toList!297 lt!8775) (_1!495 (tuple2!973 lt!8773 (minValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8773 (minValue!1665 lt!8141)))))))

(assert (=> d!4583 (= (+!44 lt!8775 (tuple2!973 lt!8773 (minValue!1665 lt!8141))) lt!9514)))

(declare-fun b!24779 () Bool)

(declare-fun res!15051 () Bool)

(assert (=> b!24779 (=> (not res!15051) (not e!16014))))

(assert (=> b!24779 (= res!15051 (= (getValueByKey!61 (toList!297 lt!9514) (_1!495 (tuple2!973 lt!8773 (minValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8773 (minValue!1665 lt!8141))))))))

(declare-fun b!24780 () Bool)

(assert (=> b!24780 (= e!16014 (contains!231 (toList!297 lt!9514) (tuple2!973 lt!8773 (minValue!1665 lt!8141))))))

(assert (= (and d!4583 res!15052) b!24779))

(assert (= (and b!24779 res!15051) b!24780))

(declare-fun m!19695 () Bool)

(assert (=> d!4583 m!19695))

(declare-fun m!19697 () Bool)

(assert (=> d!4583 m!19697))

(declare-fun m!19699 () Bool)

(assert (=> d!4583 m!19699))

(declare-fun m!19701 () Bool)

(assert (=> d!4583 m!19701))

(declare-fun m!19703 () Bool)

(assert (=> b!24779 m!19703))

(declare-fun m!19705 () Bool)

(assert (=> b!24780 m!19705))

(assert (=> b!23791 d!4583))

(declare-fun d!4585 () Bool)

(assert (=> d!4585 (= (apply!29 (+!44 lt!8775 (tuple2!973 lt!8773 (minValue!1665 lt!8141))) lt!8767) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8775 (tuple2!973 lt!8773 (minValue!1665 lt!8141)))) lt!8767)))))

(declare-fun bs!1016 () Bool)

(assert (= bs!1016 d!4585))

(declare-fun m!19707 () Bool)

(assert (=> bs!1016 m!19707))

(assert (=> bs!1016 m!19707))

(declare-fun m!19709 () Bool)

(assert (=> bs!1016 m!19709))

(assert (=> b!23791 d!4585))

(declare-fun d!4587 () Bool)

(assert (=> d!4587 (= (apply!29 lt!8761 lt!8768) (get!391 (getValueByKey!61 (toList!297 lt!8761) lt!8768)))))

(declare-fun bs!1017 () Bool)

(assert (= bs!1017 d!4587))

(declare-fun m!19711 () Bool)

(assert (=> bs!1017 m!19711))

(assert (=> bs!1017 m!19711))

(declare-fun m!19713 () Bool)

(assert (=> bs!1017 m!19713))

(assert (=> b!23791 d!4587))

(assert (=> b!23791 d!4541))

(declare-fun d!4589 () Bool)

(declare-fun e!16015 () Bool)

(assert (=> d!4589 e!16015))

(declare-fun res!15054 () Bool)

(assert (=> d!4589 (=> (not res!15054) (not e!16015))))

(declare-fun lt!9518 () ListLongMap!563)

(assert (=> d!4589 (= res!15054 (contains!229 lt!9518 (_1!495 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141)))))))

(declare-fun lt!9516 () List!564)

(assert (=> d!4589 (= lt!9518 (ListLongMap!564 lt!9516))))

(declare-fun lt!9515 () Unit!522)

(declare-fun lt!9517 () Unit!522)

(assert (=> d!4589 (= lt!9515 lt!9517)))

(assert (=> d!4589 (= (getValueByKey!61 lt!9516 (_1!495 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4589 (= lt!9517 (lemmaContainsTupThenGetReturnValue!18 lt!9516 (_1!495 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4589 (= lt!9516 (insertStrictlySorted!18 (toList!297 lt!8761) (_1!495 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141))) (_2!495 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4589 (= (+!44 lt!8761 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141))) lt!9518)))

(declare-fun b!24781 () Bool)

(declare-fun res!15053 () Bool)

(assert (=> b!24781 (=> (not res!15053) (not e!16015))))

(assert (=> b!24781 (= res!15053 (= (getValueByKey!61 (toList!297 lt!9518) (_1!495 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141)))) (Some!66 (_2!495 (tuple2!973 lt!8776 (zeroValue!1665 lt!8141))))))))

(declare-fun b!24782 () Bool)

(assert (=> b!24782 (= e!16015 (contains!231 (toList!297 lt!9518) (tuple2!973 lt!8776 (zeroValue!1665 lt!8141))))))

(assert (= (and d!4589 res!15054) b!24781))

(assert (= (and b!24781 res!15053) b!24782))

(declare-fun m!19715 () Bool)

(assert (=> d!4589 m!19715))

(declare-fun m!19717 () Bool)

(assert (=> d!4589 m!19717))

(declare-fun m!19719 () Bool)

(assert (=> d!4589 m!19719))

(declare-fun m!19721 () Bool)

(assert (=> d!4589 m!19721))

(declare-fun m!19723 () Bool)

(assert (=> b!24781 m!19723))

(declare-fun m!19725 () Bool)

(assert (=> b!24782 m!19725))

(assert (=> b!23791 d!4589))

(declare-fun d!4591 () Bool)

(assert (=> d!4591 (= (apply!29 (+!44 lt!8772 (tuple2!973 lt!8758 (minValue!1665 lt!8141))) lt!8756) (apply!29 lt!8772 lt!8756))))

(declare-fun lt!9519 () Unit!522)

(assert (=> d!4591 (= lt!9519 (choose!213 lt!8772 lt!8758 (minValue!1665 lt!8141) lt!8756))))

(declare-fun e!16016 () Bool)

(assert (=> d!4591 e!16016))

(declare-fun res!15055 () Bool)

(assert (=> d!4591 (=> (not res!15055) (not e!16016))))

(assert (=> d!4591 (= res!15055 (contains!229 lt!8772 lt!8756))))

(assert (=> d!4591 (= (addApplyDifferent!14 lt!8772 lt!8758 (minValue!1665 lt!8141) lt!8756) lt!9519)))

(declare-fun b!24783 () Bool)

(assert (=> b!24783 (= e!16016 (not (= lt!8756 lt!8758)))))

(assert (= (and d!4591 res!15055) b!24783))

(declare-fun m!19727 () Bool)

(assert (=> d!4591 m!19727))

(assert (=> d!4591 m!17561))

(assert (=> d!4591 m!17539))

(assert (=> d!4591 m!17539))

(assert (=> d!4591 m!17541))

(declare-fun m!19729 () Bool)

(assert (=> d!4591 m!19729))

(assert (=> b!23791 d!4591))

(declare-fun d!4593 () Bool)

(assert (=> d!4593 (= (apply!29 lt!8772 lt!8756) (get!391 (getValueByKey!61 (toList!297 lt!8772) lt!8756)))))

(declare-fun bs!1018 () Bool)

(assert (= bs!1018 d!4593))

(declare-fun m!19731 () Bool)

(assert (=> bs!1018 m!19731))

(assert (=> bs!1018 m!19731))

(declare-fun m!19733 () Bool)

(assert (=> bs!1018 m!19733))

(assert (=> b!23791 d!4593))

(declare-fun d!4595 () Bool)

(assert (=> d!4595 (= (apply!29 lt!8775 lt!8767) (get!391 (getValueByKey!61 (toList!297 lt!8775) lt!8767)))))

(declare-fun bs!1019 () Bool)

(assert (= bs!1019 d!4595))

(declare-fun m!19735 () Bool)

(assert (=> bs!1019 m!19735))

(assert (=> bs!1019 m!19735))

(declare-fun m!19737 () Bool)

(assert (=> bs!1019 m!19737))

(assert (=> b!23791 d!4595))

(declare-fun d!4597 () Bool)

(declare-fun res!15056 () Bool)

(declare-fun e!16017 () Bool)

(assert (=> d!4597 (=> res!15056 e!16017)))

(assert (=> d!4597 (= res!15056 (and ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))) (= (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356)))))))

(assert (=> d!4597 (= (containsKey!25 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))) e!16017)))

(declare-fun b!24784 () Bool)

(declare-fun e!16018 () Bool)

(assert (=> b!24784 (= e!16017 e!16018)))

(declare-fun res!15057 () Bool)

(assert (=> b!24784 (=> (not res!15057) (not e!16018))))

(assert (=> b!24784 (= res!15057 (and (or (not ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))))) (bvsle (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356)))) ((_ is Cons!560) (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))) (bvslt (_1!495 (h!1126 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356)))))))

(declare-fun b!24785 () Bool)

(assert (=> b!24785 (= e!16018 (containsKey!25 (t!3229 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (index!2338 lt!8356))))))

(assert (= (and d!4597 (not res!15056)) b!24784))

(assert (= (and b!24784 res!15057) b!24785))

(assert (=> b!24785 m!16854))

(declare-fun m!19739 () Bool)

(assert (=> b!24785 m!19739))

(assert (=> d!4039 d!4597))

(assert (=> b!23796 d!4391))

(declare-fun d!4599 () Bool)

(assert (=> d!4599 (= (apply!29 lt!8642 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8642) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1020 () Bool)

(assert (= bs!1020 d!4599))

(assert (=> bs!1020 m!18941))

(assert (=> bs!1020 m!18941))

(declare-fun m!19741 () Bool)

(assert (=> bs!1020 m!19741))

(assert (=> b!23683 d!4599))

(assert (=> d!4077 d!4145))

(assert (=> d!4077 d!4055))

(declare-fun b!24786 () Bool)

(declare-fun e!16027 () ListLongMap!563)

(declare-fun call!2194 () ListLongMap!563)

(assert (=> b!24786 (= e!16027 call!2194)))

(declare-fun b!24787 () Bool)

(declare-fun e!16030 () Bool)

(declare-fun lt!9531 () ListLongMap!563)

(assert (=> b!24787 (= e!16030 (= (apply!29 lt!9531 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!490 lt!8142))))))

(declare-fun b!24788 () Bool)

(declare-fun e!16019 () Bool)

(assert (=> b!24788 (= e!16019 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun call!2197 () ListLongMap!563)

(declare-fun bm!2189 () Bool)

(assert (=> bm!2189 (= call!2197 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8340 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!24789 () Bool)

(declare-fun e!16024 () ListLongMap!563)

(assert (=> b!24789 (= e!16024 e!16027)))

(declare-fun c!3379 () Bool)

(assert (=> b!24789 (= c!3379 (and (not (= (bvand lt!8340 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!8340 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24790 () Bool)

(declare-fun e!16029 () Bool)

(declare-fun call!2193 () Bool)

(assert (=> b!24790 (= e!16029 (not call!2193))))

(declare-fun b!24791 () Bool)

(declare-fun e!16026 () Bool)

(assert (=> b!24791 (= e!16026 e!16030)))

(declare-fun res!15063 () Bool)

(declare-fun call!2195 () Bool)

(assert (=> b!24791 (= res!15063 call!2195)))

(assert (=> b!24791 (=> (not res!15063) (not e!16030))))

(declare-fun bm!2190 () Bool)

(declare-fun call!2196 () ListLongMap!563)

(assert (=> bm!2190 (= call!2194 call!2196)))

(declare-fun b!24793 () Bool)

(assert (=> b!24793 (= e!16026 (not call!2195))))

(declare-fun bm!2191 () Bool)

(declare-fun call!2192 () ListLongMap!563)

(assert (=> bm!2191 (= call!2192 call!2197)))

(declare-fun b!24794 () Bool)

(declare-fun e!16025 () Bool)

(assert (=> b!24794 (= e!16025 e!16026)))

(declare-fun c!3380 () Bool)

(assert (=> b!24794 (= c!3380 (not (= (bvand lt!8340 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24795 () Bool)

(declare-fun e!16020 () Unit!522)

(declare-fun lt!9520 () Unit!522)

(assert (=> b!24795 (= e!16020 lt!9520)))

(declare-fun lt!9536 () ListLongMap!563)

(assert (=> b!24795 (= lt!9536 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8340 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9539 () (_ BitVec 64))

(assert (=> b!24795 (= lt!9539 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9534 () (_ BitVec 64))

(assert (=> b!24795 (= lt!9534 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!9524 () Unit!522)

(assert (=> b!24795 (= lt!9524 (addStillContains!14 lt!9536 lt!9539 (minValue!1665 (v!1602 (underlying!115 thiss!938))) lt!9534))))

(assert (=> b!24795 (contains!229 (+!44 lt!9536 (tuple2!973 lt!9539 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!9534)))

(declare-fun lt!9525 () Unit!522)

(assert (=> b!24795 (= lt!9525 lt!9524)))

(declare-fun lt!9537 () ListLongMap!563)

(assert (=> b!24795 (= lt!9537 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8340 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9523 () (_ BitVec 64))

(assert (=> b!24795 (= lt!9523 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9521 () (_ BitVec 64))

(assert (=> b!24795 (= lt!9521 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!9530 () Unit!522)

(assert (=> b!24795 (= lt!9530 (addApplyDifferent!14 lt!9537 lt!9523 (minValue!1665 (_2!490 lt!8142)) lt!9521))))

(assert (=> b!24795 (= (apply!29 (+!44 lt!9537 (tuple2!973 lt!9523 (minValue!1665 (_2!490 lt!8142)))) lt!9521) (apply!29 lt!9537 lt!9521))))

(declare-fun lt!9528 () Unit!522)

(assert (=> b!24795 (= lt!9528 lt!9530)))

(declare-fun lt!9526 () ListLongMap!563)

(assert (=> b!24795 (= lt!9526 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8340 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9541 () (_ BitVec 64))

(assert (=> b!24795 (= lt!9541 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9533 () (_ BitVec 64))

(assert (=> b!24795 (= lt!9533 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(declare-fun lt!9522 () Unit!522)

(assert (=> b!24795 (= lt!9522 (addApplyDifferent!14 lt!9526 lt!9541 (minValue!1665 (v!1602 (underlying!115 thiss!938))) lt!9533))))

(assert (=> b!24795 (= (apply!29 (+!44 lt!9526 (tuple2!973 lt!9541 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!9533) (apply!29 lt!9526 lt!9533))))

(declare-fun lt!9535 () Unit!522)

(assert (=> b!24795 (= lt!9535 lt!9522)))

(declare-fun lt!9540 () ListLongMap!563)

(assert (=> b!24795 (= lt!9540 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8340 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun lt!9538 () (_ BitVec 64))

(assert (=> b!24795 (= lt!9538 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9532 () (_ BitVec 64))

(assert (=> b!24795 (= lt!9532 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(assert (=> b!24795 (= lt!9520 (addApplyDifferent!14 lt!9540 lt!9538 (minValue!1665 (_2!490 lt!8142)) lt!9532))))

(assert (=> b!24795 (= (apply!29 (+!44 lt!9540 (tuple2!973 lt!9538 (minValue!1665 (_2!490 lt!8142)))) lt!9532) (apply!29 lt!9540 lt!9532))))

(declare-fun call!2198 () ListLongMap!563)

(declare-fun c!3378 () Bool)

(declare-fun bm!2192 () Bool)

(assert (=> bm!2192 (= call!2196 (+!44 (ite c!3378 call!2197 (ite c!3379 call!2192 call!2198)) (ite (or c!3378 c!3379) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun b!24796 () Bool)

(declare-fun Unit!592 () Unit!522)

(assert (=> b!24796 (= e!16020 Unit!592)))

(declare-fun b!24797 () Bool)

(declare-fun e!16022 () Bool)

(assert (=> b!24797 (= e!16029 e!16022)))

(declare-fun res!15061 () Bool)

(assert (=> b!24797 (= res!15061 call!2193)))

(assert (=> b!24797 (=> (not res!15061) (not e!16022))))

(declare-fun bm!2193 () Bool)

(assert (=> bm!2193 (= call!2198 call!2192)))

(declare-fun b!24798 () Bool)

(declare-fun res!15062 () Bool)

(assert (=> b!24798 (=> (not res!15062) (not e!16025))))

(declare-fun e!16023 () Bool)

(assert (=> b!24798 (= res!15062 e!16023)))

(declare-fun res!15058 () Bool)

(assert (=> b!24798 (=> res!15058 e!16023)))

(declare-fun e!16028 () Bool)

(assert (=> b!24798 (= res!15058 (not e!16028))))

(declare-fun res!15065 () Bool)

(assert (=> b!24798 (=> (not res!15065) (not e!16028))))

(assert (=> b!24798 (= res!15065 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!24799 () Bool)

(declare-fun e!16021 () Bool)

(assert (=> b!24799 (= e!16023 e!16021)))

(declare-fun res!15059 () Bool)

(assert (=> b!24799 (=> (not res!15059) (not e!16021))))

(assert (=> b!24799 (= res!15059 (contains!229 lt!9531 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24799 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!24800 () Bool)

(assert (=> b!24800 (= e!16028 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24801 () Bool)

(declare-fun e!16031 () ListLongMap!563)

(assert (=> b!24801 (= e!16031 call!2194)))

(declare-fun b!24802 () Bool)

(assert (=> b!24802 (= e!16024 (+!44 call!2196 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))

(declare-fun d!4601 () Bool)

(assert (=> d!4601 e!16025))

(declare-fun res!15064 () Bool)

(assert (=> d!4601 (=> (not res!15064) (not e!16025))))

(assert (=> d!4601 (= res!15064 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))))

(declare-fun lt!9529 () ListLongMap!563)

(assert (=> d!4601 (= lt!9531 lt!9529)))

(declare-fun lt!9527 () Unit!522)

(assert (=> d!4601 (= lt!9527 e!16020)))

(declare-fun c!3376 () Bool)

(assert (=> d!4601 (= c!3376 e!16019)))

(declare-fun res!15066 () Bool)

(assert (=> d!4601 (=> (not res!15066) (not e!16019))))

(assert (=> d!4601 (= res!15066 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4601 (= lt!9529 e!16024)))

(assert (=> d!4601 (= c!3378 (and (not (= (bvand lt!8340 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8340 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4601 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4601 (= (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8340 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!9531)))

(declare-fun b!24792 () Bool)

(assert (=> b!24792 (= e!16021 (= (apply!29 lt!9531 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24792 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!490 lt!8142)))))))

(assert (=> b!24792 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun bm!2194 () Bool)

(assert (=> bm!2194 (= call!2195 (contains!229 lt!9531 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24803 () Bool)

(declare-fun res!15060 () Bool)

(assert (=> b!24803 (=> (not res!15060) (not e!16025))))

(assert (=> b!24803 (= res!15060 e!16029)))

(declare-fun c!3375 () Bool)

(assert (=> b!24803 (= c!3375 (not (= (bvand lt!8340 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!24804 () Bool)

(assert (=> b!24804 (= e!16022 (= (apply!29 lt!9531 #b0000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun b!24805 () Bool)

(assert (=> b!24805 (= e!16031 call!2198)))

(declare-fun b!24806 () Bool)

(declare-fun c!3377 () Bool)

(assert (=> b!24806 (= c!3377 (and (not (= (bvand lt!8340 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!8340 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24806 (= e!16027 e!16031)))

(declare-fun bm!2195 () Bool)

(assert (=> bm!2195 (= call!2193 (contains!229 lt!9531 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4601 c!3378) b!24802))

(assert (= (and d!4601 (not c!3378)) b!24789))

(assert (= (and b!24789 c!3379) b!24786))

(assert (= (and b!24789 (not c!3379)) b!24806))

(assert (= (and b!24806 c!3377) b!24801))

(assert (= (and b!24806 (not c!3377)) b!24805))

(assert (= (or b!24801 b!24805) bm!2193))

(assert (= (or b!24786 bm!2193) bm!2191))

(assert (= (or b!24786 b!24801) bm!2190))

(assert (= (or b!24802 bm!2191) bm!2189))

(assert (= (or b!24802 bm!2190) bm!2192))

(assert (= (and d!4601 res!15066) b!24788))

(assert (= (and d!4601 c!3376) b!24795))

(assert (= (and d!4601 (not c!3376)) b!24796))

(assert (= (and d!4601 res!15064) b!24798))

(assert (= (and b!24798 res!15065) b!24800))

(assert (= (and b!24798 (not res!15058)) b!24799))

(assert (= (and b!24799 res!15059) b!24792))

(assert (= (and b!24798 res!15062) b!24803))

(assert (= (and b!24803 c!3375) b!24797))

(assert (= (and b!24803 (not c!3375)) b!24790))

(assert (= (and b!24797 res!15061) b!24804))

(assert (= (or b!24797 b!24790) bm!2195))

(assert (= (and b!24803 res!15060) b!24794))

(assert (= (and b!24794 c!3380) b!24791))

(assert (= (and b!24794 (not c!3380)) b!24793))

(assert (= (and b!24791 res!15063) b!24787))

(assert (= (or b!24791 b!24793) bm!2194))

(declare-fun b_lambda!1629 () Bool)

(assert (=> (not b_lambda!1629) (not b!24792)))

(assert (=> b!24792 t!3234))

(declare-fun b_and!1541 () Bool)

(assert (= b_and!1539 (and (=> t!3234 result!1095) b_and!1541)))

(declare-fun m!19743 () Bool)

(assert (=> b!24804 m!19743))

(declare-fun m!19745 () Bool)

(assert (=> bm!2192 m!19745))

(assert (=> b!24792 m!17397))

(assert (=> b!24792 m!17397))

(assert (=> b!24792 m!17076))

(assert (=> b!24792 m!17399))

(assert (=> b!24792 m!17080))

(assert (=> b!24792 m!17076))

(assert (=> b!24792 m!17080))

(declare-fun m!19747 () Bool)

(assert (=> b!24792 m!19747))

(declare-fun m!19749 () Bool)

(assert (=> bm!2194 m!19749))

(assert (=> b!24800 m!17080))

(assert (=> b!24800 m!17080))

(assert (=> b!24800 m!17086))

(declare-fun m!19751 () Bool)

(assert (=> bm!2189 m!19751))

(declare-fun m!19753 () Bool)

(assert (=> b!24795 m!19753))

(declare-fun m!19755 () Bool)

(assert (=> b!24795 m!19755))

(declare-fun m!19757 () Bool)

(assert (=> b!24795 m!19757))

(declare-fun m!19759 () Bool)

(assert (=> b!24795 m!19759))

(declare-fun m!19761 () Bool)

(assert (=> b!24795 m!19761))

(declare-fun m!19763 () Bool)

(assert (=> b!24795 m!19763))

(assert (=> b!24795 m!19753))

(declare-fun m!19765 () Bool)

(assert (=> b!24795 m!19765))

(declare-fun m!19767 () Bool)

(assert (=> b!24795 m!19767))

(declare-fun m!19769 () Bool)

(assert (=> b!24795 m!19769))

(declare-fun m!19771 () Bool)

(assert (=> b!24795 m!19771))

(declare-fun m!19773 () Bool)

(assert (=> b!24795 m!19773))

(assert (=> b!24795 m!19751))

(assert (=> b!24795 m!17080))

(declare-fun m!19775 () Bool)

(assert (=> b!24795 m!19775))

(assert (=> b!24795 m!19767))

(declare-fun m!19777 () Bool)

(assert (=> b!24795 m!19777))

(declare-fun m!19779 () Bool)

(assert (=> b!24795 m!19779))

(assert (=> b!24795 m!19757))

(assert (=> b!24795 m!19763))

(declare-fun m!19781 () Bool)

(assert (=> b!24795 m!19781))

(assert (=> b!24799 m!17080))

(assert (=> b!24799 m!17080))

(declare-fun m!19783 () Bool)

(assert (=> b!24799 m!19783))

(declare-fun m!19785 () Bool)

(assert (=> b!24787 m!19785))

(declare-fun m!19787 () Bool)

(assert (=> b!24802 m!19787))

(declare-fun m!19789 () Bool)

(assert (=> bm!2195 m!19789))

(assert (=> d!4601 m!16902))

(assert (=> b!24788 m!17080))

(assert (=> b!24788 m!17080))

(assert (=> b!24788 m!17086))

(assert (=> d!4077 d!4601))

(declare-fun d!4603 () Bool)

(declare-fun e!16032 () Bool)

(assert (=> d!4603 e!16032))

(declare-fun res!15068 () Bool)

(assert (=> d!4603 (=> (not res!15068) (not e!16032))))

(declare-fun lt!9545 () ListLongMap!563)

(assert (=> d!4603 (= res!15068 (contains!229 lt!9545 (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun lt!9543 () List!564)

(assert (=> d!4603 (= lt!9545 (ListLongMap!564 lt!9543))))

(declare-fun lt!9542 () Unit!522)

(declare-fun lt!9544 () Unit!522)

(assert (=> d!4603 (= lt!9542 lt!9544)))

(assert (=> d!4603 (= (getValueByKey!61 lt!9543 (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (Some!66 (_2!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4603 (= lt!9544 (lemmaContainsTupThenGetReturnValue!18 lt!9543 (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4603 (= lt!9543 (insertStrictlySorted!18 (toList!297 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142)))) (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (_2!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (=> d!4603 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) lt!9545)))

(declare-fun b!24807 () Bool)

(declare-fun res!15067 () Bool)

(assert (=> b!24807 (=> (not res!15067) (not e!16032))))

(assert (=> b!24807 (= res!15067 (= (getValueByKey!61 (toList!297 lt!9545) (_1!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (Some!66 (_2!495 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24808 () Bool)

(assert (=> b!24808 (= e!16032 (contains!231 (toList!297 lt!9545) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))

(assert (= (and d!4603 res!15068) b!24807))

(assert (= (and b!24807 res!15067) b!24808))

(declare-fun m!19791 () Bool)

(assert (=> d!4603 m!19791))

(declare-fun m!19793 () Bool)

(assert (=> d!4603 m!19793))

(declare-fun m!19795 () Bool)

(assert (=> d!4603 m!19795))

(declare-fun m!19797 () Bool)

(assert (=> d!4603 m!19797))

(declare-fun m!19799 () Bool)

(assert (=> b!24807 m!19799))

(declare-fun m!19801 () Bool)

(assert (=> b!24808 m!19801))

(assert (=> d!4077 d!4603))

(declare-fun d!4605 () Bool)

(assert (=> d!4605 (= (+!44 (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (getCurrentListMap!127 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) lt!8340 (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))))))

(assert (=> d!4605 true))

(declare-fun _$7!38 () Unit!522)

(assert (=> d!4605 (= (choose!206 (_keys!3163 (_2!490 lt!8142)) (_values!1728 (_2!490 lt!8142)) (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) lt!8340 (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (_2!490 lt!8142)) (defaultEntry!1742 (_2!490 lt!8142))) _$7!38)))

(declare-fun bs!1021 () Bool)

(assert (= bs!1021 d!4605))

(assert (=> bs!1021 m!16844))

(assert (=> bs!1021 m!16844))

(assert (=> bs!1021 m!17581))

(assert (=> bs!1021 m!17583))

(assert (=> d!4077 d!4605))

(declare-fun d!4607 () Bool)

(assert (=> d!4607 (= (isDefined!23 (getValueByKey!61 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!172 (getValueByKey!61 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!1022 () Bool)

(assert (= bs!1022 d!4607))

(assert (=> bs!1022 m!17192))

(declare-fun m!19803 () Bool)

(assert (=> bs!1022 m!19803))

(assert (=> b!23644 d!4607))

(declare-fun b!24811 () Bool)

(declare-fun e!16034 () Option!67)

(assert (=> b!24811 (= e!16034 (getValueByKey!61 (t!3229 (toList!297 call!1944)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24809 () Bool)

(declare-fun e!16033 () Option!67)

(assert (=> b!24809 (= e!16033 (Some!66 (_2!495 (h!1126 (toList!297 call!1944)))))))

(declare-fun b!24812 () Bool)

(assert (=> b!24812 (= e!16034 None!65)))

(declare-fun d!4609 () Bool)

(declare-fun c!3381 () Bool)

(assert (=> d!4609 (= c!3381 (and ((_ is Cons!560) (toList!297 call!1944)) (= (_1!495 (h!1126 (toList!297 call!1944))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4609 (= (getValueByKey!61 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000) e!16033)))

(declare-fun b!24810 () Bool)

(assert (=> b!24810 (= e!16033 e!16034)))

(declare-fun c!3382 () Bool)

(assert (=> b!24810 (= c!3382 (and ((_ is Cons!560) (toList!297 call!1944)) (not (= (_1!495 (h!1126 (toList!297 call!1944))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4609 c!3381) b!24809))

(assert (= (and d!4609 (not c!3381)) b!24810))

(assert (= (and b!24810 c!3382) b!24811))

(assert (= (and b!24810 (not c!3382)) b!24812))

(declare-fun m!19805 () Bool)

(assert (=> b!24811 m!19805))

(assert (=> b!23644 d!4609))

(declare-fun d!4611 () Bool)

(declare-fun e!16035 () Bool)

(assert (=> d!4611 e!16035))

(declare-fun res!15070 () Bool)

(assert (=> d!4611 (=> (not res!15070) (not e!16035))))

(declare-fun lt!9549 () ListLongMap!563)

(assert (=> d!4611 (= res!15070 (contains!229 lt!9549 (_1!495 (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun lt!9547 () List!564)

(assert (=> d!4611 (= lt!9549 (ListLongMap!564 lt!9547))))

(declare-fun lt!9546 () Unit!522)

(declare-fun lt!9548 () Unit!522)

(assert (=> d!4611 (= lt!9546 lt!9548)))

(assert (=> d!4611 (= (getValueByKey!61 lt!9547 (_1!495 (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4611 (= lt!9548 (lemmaContainsTupThenGetReturnValue!18 lt!9547 (_1!495 (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) (_2!495 (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4611 (= lt!9547 (insertStrictlySorted!18 (toList!297 (ite c!3096 call!2026 (ite c!3097 call!2021 call!2027))) (_1!495 (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) (_2!495 (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(assert (=> d!4611 (= (+!44 (ite c!3096 call!2026 (ite c!3097 call!2021 call!2027)) (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) lt!9549)))

(declare-fun b!24813 () Bool)

(declare-fun res!15069 () Bool)

(assert (=> b!24813 (=> (not res!15069) (not e!16035))))

(assert (=> b!24813 (= res!15069 (= (getValueByKey!61 (toList!297 lt!9549) (_1!495 (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))) (Some!66 (_2!495 (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))))

(declare-fun b!24814 () Bool)

(assert (=> b!24814 (= e!16035 (contains!231 (toList!297 lt!9549) (ite (or c!3096 c!3097) (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!490 lt!8142))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(assert (= (and d!4611 res!15070) b!24813))

(assert (= (and b!24813 res!15069) b!24814))

(declare-fun m!19807 () Bool)

(assert (=> d!4611 m!19807))

(declare-fun m!19809 () Bool)

(assert (=> d!4611 m!19809))

(declare-fun m!19811 () Bool)

(assert (=> d!4611 m!19811))

(declare-fun m!19813 () Bool)

(assert (=> d!4611 m!19813))

(declare-fun m!19815 () Bool)

(assert (=> b!24813 m!19815))

(declare-fun m!19817 () Bool)

(assert (=> b!24814 m!19817))

(assert (=> bm!2021 d!4611))

(declare-fun d!4613 () Bool)

(assert (=> d!4613 (= (apply!29 lt!8642 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!391 (getValueByKey!61 (toList!297 lt!8642) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(declare-fun bs!1023 () Bool)

(assert (= bs!1023 d!4613))

(assert (=> bs!1023 m!16934))

(assert (=> bs!1023 m!19301))

(assert (=> bs!1023 m!19301))

(declare-fun m!19819 () Bool)

(assert (=> bs!1023 m!19819))

(assert (=> b!23671 d!4613))

(declare-fun c!3383 () Bool)

(declare-fun d!4615 () Bool)

(assert (=> d!4615 (= c!3383 ((_ is ValueCellFull!311) (select (arr!596 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000)))))

(declare-fun e!16036 () V!1187)

(assert (=> d!4615 (= (get!390 (select (arr!596 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)) e!16036)))

(declare-fun b!24815 () Bool)

(assert (=> b!24815 (= e!16036 (get!392 (select (arr!596 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24816 () Bool)

(assert (=> b!24816 (= e!16036 (get!393 (select (arr!596 (ite (or c!2996 c!2994) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4615 c!3383) b!24815))

(assert (= (and d!4615 (not c!3383)) b!24816))

(assert (=> b!24815 m!17243))

(assert (=> b!24815 m!16930))

(declare-fun m!19821 () Bool)

(assert (=> b!24815 m!19821))

(assert (=> b!24816 m!17243))

(assert (=> b!24816 m!16930))

(declare-fun m!19823 () Bool)

(assert (=> b!24816 m!19823))

(assert (=> b!23671 d!4615))

(assert (=> d!4089 d!3975))

(declare-fun b!24817 () Bool)

(declare-fun e!16039 () Bool)

(declare-fun call!2199 () Bool)

(assert (=> b!24817 (= e!16039 (not call!2199))))

(declare-fun d!4617 () Bool)

(declare-fun e!16038 () Bool)

(assert (=> d!4617 e!16038))

(declare-fun c!3384 () Bool)

(declare-fun lt!9550 () SeekEntryResult!54)

(assert (=> d!4617 (= c!3384 ((_ is MissingZero!54) lt!9550))))

(assert (=> d!4617 (= lt!9550 (seekEntryOrOpen!0 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(assert (=> d!4617 true))

(declare-fun _$34!748 () Unit!522)

(assert (=> d!4617 (= (choose!207 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)) _$34!748)))

(declare-fun b!24818 () Bool)

(declare-fun e!16040 () Bool)

(assert (=> b!24818 (= e!16040 (not call!2199))))

(declare-fun b!24819 () Bool)

(declare-fun e!16037 () Bool)

(assert (=> b!24819 (= e!16038 e!16037)))

(declare-fun c!3385 () Bool)

(assert (=> b!24819 (= c!3385 ((_ is MissingVacant!54) lt!9550))))

(declare-fun b!24820 () Bool)

(assert (=> b!24820 (= e!16037 ((_ is Undefined!54) lt!9550))))

(declare-fun bm!2196 () Bool)

(assert (=> bm!2196 (= call!2199 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun b!24821 () Bool)

(assert (=> b!24821 (= e!16038 e!16039)))

(declare-fun res!15071 () Bool)

(declare-fun call!2200 () Bool)

(assert (=> b!24821 (= res!15071 call!2200)))

(assert (=> b!24821 (=> (not res!15071) (not e!16039))))

(declare-fun b!24822 () Bool)

(declare-fun res!15073 () Bool)

(assert (=> b!24822 (=> (not res!15073) (not e!16040))))

(assert (=> b!24822 (= res!15073 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2340 lt!9550)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!2197 () Bool)

(assert (=> bm!2197 (= call!2200 (inRange!0 (ite c!3384 (index!2337 lt!9550) (index!2340 lt!9550)) (mask!4729 lt!8141)))))

(declare-fun b!24823 () Bool)

(declare-fun res!15072 () Bool)

(assert (=> b!24823 (= res!15072 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2337 lt!9550)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24823 (=> (not res!15072) (not e!16039))))

(declare-fun b!24824 () Bool)

(declare-fun res!15074 () Bool)

(assert (=> b!24824 (=> (not res!15074) (not e!16040))))

(assert (=> b!24824 (= res!15074 call!2200)))

(assert (=> b!24824 (= e!16037 e!16040)))

(assert (= (and d!4617 c!3384) b!24821))

(assert (= (and d!4617 (not c!3384)) b!24819))

(assert (= (and b!24821 res!15071) b!24823))

(assert (= (and b!24823 res!15072) b!24817))

(assert (= (and b!24819 c!3385) b!24824))

(assert (= (and b!24819 (not c!3385)) b!24820))

(assert (= (and b!24824 res!15074) b!24822))

(assert (= (and b!24822 res!15073) b!24818))

(assert (= (or b!24821 b!24824) bm!2197))

(assert (= (or b!24817 b!24818) bm!2196))

(declare-fun m!19825 () Bool)

(assert (=> b!24822 m!19825))

(declare-fun m!19827 () Bool)

(assert (=> bm!2197 m!19827))

(assert (=> d!4617 m!16774))

(declare-fun m!19829 () Bool)

(assert (=> b!24823 m!19829))

(assert (=> bm!2196 m!16782))

(assert (=> d!4089 d!4617))

(assert (=> d!4089 d!4171))

(assert (=> b!23784 d!4391))

(declare-fun b!24825 () Bool)

(declare-fun e!16041 () Bool)

(declare-fun e!16042 () Bool)

(assert (=> b!24825 (= e!16041 e!16042)))

(declare-fun lt!9553 () (_ BitVec 64))

(assert (=> b!24825 (= lt!9553 (select (arr!597 lt!8238) (bvadd lt!8248 #b00000000000000000000000000000001)))))

(declare-fun lt!9551 () Unit!522)

(assert (=> b!24825 (= lt!9551 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8238 lt!9553 (bvadd lt!8248 #b00000000000000000000000000000001)))))

(assert (=> b!24825 (arrayContainsKey!0 lt!8238 lt!9553 #b00000000000000000000000000000000)))

(declare-fun lt!9552 () Unit!522)

(assert (=> b!24825 (= lt!9552 lt!9551)))

(declare-fun res!15075 () Bool)

(assert (=> b!24825 (= res!15075 (= (seekEntryOrOpen!0 (select (arr!597 lt!8238) (bvadd lt!8248 #b00000000000000000000000000000001)) lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))) (Found!54 (bvadd lt!8248 #b00000000000000000000000000000001))))))

(assert (=> b!24825 (=> (not res!15075) (not e!16042))))

(declare-fun b!24826 () Bool)

(declare-fun call!2201 () Bool)

(assert (=> b!24826 (= e!16042 call!2201)))

(declare-fun bm!2198 () Bool)

(assert (=> bm!2198 (= call!2201 (arrayForallSeekEntryOrOpenFound!0 (bvadd lt!8248 #b00000000000000000000000000000001 #b00000000000000000000000000000001) lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun d!4619 () Bool)

(declare-fun res!15076 () Bool)

(declare-fun e!16043 () Bool)

(assert (=> d!4619 (=> res!15076 e!16043)))

(assert (=> d!4619 (= res!15076 (bvsge (bvadd lt!8248 #b00000000000000000000000000000001) (size!693 lt!8238)))))

(assert (=> d!4619 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd lt!8248 #b00000000000000000000000000000001) lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))) e!16043)))

(declare-fun b!24827 () Bool)

(assert (=> b!24827 (= e!16041 call!2201)))

(declare-fun b!24828 () Bool)

(assert (=> b!24828 (= e!16043 e!16041)))

(declare-fun c!3386 () Bool)

(assert (=> b!24828 (= c!3386 (validKeyInArray!0 (select (arr!597 lt!8238) (bvadd lt!8248 #b00000000000000000000000000000001))))))

(assert (= (and d!4619 (not res!15076)) b!24828))

(assert (= (and b!24828 c!3386) b!24825))

(assert (= (and b!24828 (not c!3386)) b!24827))

(assert (= (and b!24825 res!15075) b!24826))

(assert (= (or b!24826 b!24827) bm!2198))

(declare-fun m!19831 () Bool)

(assert (=> b!24825 m!19831))

(declare-fun m!19833 () Bool)

(assert (=> b!24825 m!19833))

(declare-fun m!19835 () Bool)

(assert (=> b!24825 m!19835))

(assert (=> b!24825 m!19831))

(assert (=> b!24825 m!16680))

(declare-fun m!19837 () Bool)

(assert (=> b!24825 m!19837))

(assert (=> bm!2198 m!16680))

(declare-fun m!19839 () Bool)

(assert (=> bm!2198 m!19839))

(assert (=> b!24828 m!19831))

(assert (=> b!24828 m!19831))

(declare-fun m!19841 () Bool)

(assert (=> b!24828 m!19841))

(assert (=> bm!2007 d!4619))

(assert (=> d!4011 d!4005))

(declare-fun d!4621 () Bool)

(assert (=> d!4621 (arrayForallSeekEntryOrOpenFound!0 lt!8248 lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(assert (=> d!4621 true))

(declare-fun _$30!30 () Unit!522)

(assert (=> d!4621 (= (choose!34 lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8248) _$30!30)))

(declare-fun bs!1024 () Bool)

(assert (= bs!1024 d!4621))

(assert (=> bs!1024 m!16680))

(assert (=> bs!1024 m!16746))

(assert (=> d!4011 d!4621))

(assert (=> d!4011 d!4015))

(assert (=> d!3989 d!4145))

(declare-fun d!4623 () Bool)

(declare-fun e!16045 () Bool)

(assert (=> d!4623 e!16045))

(declare-fun res!15077 () Bool)

(assert (=> d!4623 (=> res!15077 e!16045)))

(declare-fun lt!9555 () Bool)

(assert (=> d!4623 (= res!15077 (not lt!9555))))

(declare-fun lt!9556 () Bool)

(assert (=> d!4623 (= lt!9555 lt!9556)))

(declare-fun lt!9554 () Unit!522)

(declare-fun e!16044 () Unit!522)

(assert (=> d!4623 (= lt!9554 e!16044)))

(declare-fun c!3387 () Bool)

(assert (=> d!4623 (= c!3387 lt!9556)))

(assert (=> d!4623 (= lt!9556 (containsKey!25 (toList!297 lt!8672) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4623 (= (contains!229 lt!8672 #b1000000000000000000000000000000000000000000000000000000000000000) lt!9555)))

(declare-fun b!24829 () Bool)

(declare-fun lt!9557 () Unit!522)

(assert (=> b!24829 (= e!16044 lt!9557)))

(assert (=> b!24829 (= lt!9557 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8672) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24829 (isDefined!23 (getValueByKey!61 (toList!297 lt!8672) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24830 () Bool)

(declare-fun Unit!593 () Unit!522)

(assert (=> b!24830 (= e!16044 Unit!593)))

(declare-fun b!24831 () Bool)

(assert (=> b!24831 (= e!16045 (isDefined!23 (getValueByKey!61 (toList!297 lt!8672) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4623 c!3387) b!24829))

(assert (= (and d!4623 (not c!3387)) b!24830))

(assert (= (and d!4623 (not res!15077)) b!24831))

(declare-fun m!19843 () Bool)

(assert (=> d!4623 m!19843))

(declare-fun m!19845 () Bool)

(assert (=> b!24829 m!19845))

(assert (=> b!24829 m!18767))

(assert (=> b!24829 m!18767))

(declare-fun m!19847 () Bool)

(assert (=> b!24829 m!19847))

(assert (=> b!24831 m!18767))

(assert (=> b!24831 m!18767))

(assert (=> b!24831 m!19847))

(assert (=> bm!2023 d!4623))

(declare-fun b!24835 () Bool)

(declare-fun e!16046 () Bool)

(assert (=> b!24835 (= e!16046 (and (bvsge (extraKeys!1640 lt!8243) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 lt!8243) #b00000000000000000000000000000011) (bvsge (_vacant!149 lt!8243) #b00000000000000000000000000000000)))))

(declare-fun d!4625 () Bool)

(declare-fun res!15081 () Bool)

(assert (=> d!4625 (=> (not res!15081) (not e!16046))))

(assert (=> d!4625 (= res!15081 (validMask!0 (mask!4729 lt!8243)))))

(assert (=> d!4625 (= (simpleValid!20 lt!8243) e!16046)))

(declare-fun b!24834 () Bool)

(declare-fun res!15079 () Bool)

(assert (=> b!24834 (=> (not res!15079) (not e!16046))))

(assert (=> b!24834 (= res!15079 (= (size!702 lt!8243) (bvadd (_size!149 lt!8243) (bvsdiv (bvadd (extraKeys!1640 lt!8243) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!24833 () Bool)

(declare-fun res!15078 () Bool)

(assert (=> b!24833 (=> (not res!15078) (not e!16046))))

(assert (=> b!24833 (= res!15078 (bvsge (size!702 lt!8243) (_size!149 lt!8243)))))

(declare-fun b!24832 () Bool)

(declare-fun res!15080 () Bool)

(assert (=> b!24832 (=> (not res!15080) (not e!16046))))

(assert (=> b!24832 (= res!15080 (and (= (size!692 (_values!1728 lt!8243)) (bvadd (mask!4729 lt!8243) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 lt!8243)) (size!692 (_values!1728 lt!8243))) (bvsge (_size!149 lt!8243) #b00000000000000000000000000000000) (bvsle (_size!149 lt!8243) (bvadd (mask!4729 lt!8243) #b00000000000000000000000000000001))))))

(assert (= (and d!4625 res!15081) b!24832))

(assert (= (and b!24832 res!15080) b!24833))

(assert (= (and b!24833 res!15078) b!24834))

(assert (= (and b!24834 res!15079) b!24835))

(assert (=> d!4625 m!18269))

(declare-fun m!19849 () Bool)

(assert (=> b!24834 m!19849))

(assert (=> b!24833 m!19849))

(assert (=> d!4009 d!4625))

(declare-fun b!24839 () Bool)

(declare-fun e!16047 () Bool)

(assert (=> b!24839 (= e!16047 (and (bvsge (extraKeys!1640 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000011) (bvsge (_vacant!149 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000)))))

(declare-fun d!4627 () Bool)

(declare-fun res!15085 () Bool)

(assert (=> d!4627 (=> (not res!15085) (not e!16047))))

(assert (=> d!4627 (= res!15085 (validMask!0 (mask!4729 (v!1602 (underlying!115 thiss!938)))))))

(assert (=> d!4627 (= (simpleValid!20 (v!1602 (underlying!115 thiss!938))) e!16047)))

(declare-fun b!24838 () Bool)

(declare-fun res!15083 () Bool)

(assert (=> b!24838 (=> (not res!15083) (not e!16047))))

(assert (=> b!24838 (= res!15083 (= (size!702 (v!1602 (underlying!115 thiss!938))) (bvadd (_size!149 (v!1602 (underlying!115 thiss!938))) (bvsdiv (bvadd (extraKeys!1640 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!24837 () Bool)

(declare-fun res!15082 () Bool)

(assert (=> b!24837 (=> (not res!15082) (not e!16047))))

(assert (=> b!24837 (= res!15082 (bvsge (size!702 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun b!24836 () Bool)

(declare-fun res!15084 () Bool)

(assert (=> b!24836 (=> (not res!15084) (not e!16047))))

(assert (=> b!24836 (= res!15084 (and (= (size!692 (_values!1728 (v!1602 (underlying!115 thiss!938)))) (bvadd (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) (size!692 (_values!1728 (v!1602 (underlying!115 thiss!938))))) (bvsge (_size!149 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000) (bvsle (_size!149 (v!1602 (underlying!115 thiss!938))) (bvadd (mask!4729 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000001))))))

(assert (= (and d!4627 res!15085) b!24836))

(assert (= (and b!24836 res!15084) b!24837))

(assert (= (and b!24837 res!15082) b!24838))

(assert (= (and b!24838 res!15083) b!24839))

(assert (=> d!4627 m!16696))

(declare-fun m!19851 () Bool)

(assert (=> b!24838 m!19851))

(assert (=> b!24837 m!19851))

(assert (=> d!3987 d!4627))

(declare-fun b!24840 () Bool)

(declare-fun e!16049 () (_ BitVec 32))

(assert (=> b!24840 (= e!16049 #b00000000000000000000000000000000)))

(declare-fun b!24841 () Bool)

(declare-fun e!16048 () (_ BitVec 32))

(assert (=> b!24841 (= e!16049 e!16048)))

(declare-fun c!3389 () Bool)

(assert (=> b!24841 (= c!3389 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)))))

(declare-fun bm!2199 () Bool)

(declare-fun call!2202 () (_ BitVec 32))

(assert (=> bm!2199 (= call!2202 (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8334)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!490 lt!8334)))))))

(declare-fun d!4629 () Bool)

(declare-fun lt!9558 () (_ BitVec 32))

(assert (=> d!4629 (and (bvsge lt!9558 #b00000000000000000000000000000000) (bvsle lt!9558 (bvsub (size!693 (_keys!3163 (_2!490 lt!8334))) #b00000000000000000000000000000000)))))

(assert (=> d!4629 (= lt!9558 e!16049)))

(declare-fun c!3388 () Bool)

(assert (=> d!4629 (= c!3388 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))))))

(assert (=> d!4629 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (_2!490 lt!8334))) (size!693 (_keys!3163 (_2!490 lt!8334)))))))

(assert (=> d!4629 (= (arrayCountValidKeys!0 (_keys!3163 (_2!490 lt!8334)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8334)))) lt!9558)))

(declare-fun b!24842 () Bool)

(assert (=> b!24842 (= e!16048 (bvadd #b00000000000000000000000000000001 call!2202))))

(declare-fun b!24843 () Bool)

(assert (=> b!24843 (= e!16048 call!2202)))

(assert (= (and d!4629 c!3388) b!24840))

(assert (= (and d!4629 (not c!3388)) b!24841))

(assert (= (and b!24841 c!3389) b!24842))

(assert (= (and b!24841 (not c!3389)) b!24843))

(assert (= (or b!24842 b!24843) bm!2199))

(assert (=> b!24841 m!18841))

(assert (=> b!24841 m!18841))

(assert (=> b!24841 m!18847))

(declare-fun m!19853 () Bool)

(assert (=> bm!2199 m!19853))

(assert (=> b!23659 d!4629))

(declare-fun d!4631 () Bool)

(assert (=> d!4631 (= (inRange!0 (index!2338 lt!8623) (mask!4729 lt!8141)) (and (bvsge (index!2338 lt!8623) #b00000000000000000000000000000000) (bvslt (index!2338 lt!8623) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(assert (=> b!23651 d!4631))

(assert (=> b!23662 d!4099))

(assert (=> bm!2035 d!3983))

(assert (=> d!4001 d!4007))

(declare-fun d!4633 () Bool)

(assert (=> d!4633 (arrayNoDuplicates!0 lt!8241 lt!8240 lt!8233)))

(assert (=> d!4633 true))

(declare-fun res!15088 () Unit!522)

(assert (=> d!4633 (= (choose!111 lt!8241 lt!8240 (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001) lt!8233) res!15088)))

(declare-fun bs!1025 () Bool)

(assert (= bs!1025 d!4633))

(assert (=> bs!1025 m!16748))

(assert (=> d!4001 d!4633))

(declare-fun d!4635 () Bool)

(assert (=> d!4635 (= (apply!29 lt!8704 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!391 (getValueByKey!61 (toList!297 lt!8704) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))))

(declare-fun bs!1026 () Bool)

(assert (= bs!1026 d!4635))

(assert (=> bs!1026 m!17080))

(assert (=> bs!1026 m!19585))

(assert (=> bs!1026 m!19585))

(declare-fun m!19855 () Bool)

(assert (=> bs!1026 m!19855))

(assert (=> b!23733 d!4635))

(declare-fun d!4637 () Bool)

(declare-fun c!3390 () Bool)

(assert (=> d!4637 (= c!3390 ((_ is ValueCellFull!311) (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun e!16050 () V!1187)

(assert (=> d!4637 (= (get!390 (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)) e!16050)))

(declare-fun b!24844 () Bool)

(assert (=> b!24844 (= e!16050 (get!392 (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24845 () Bool)

(assert (=> b!24845 (= e!16050 (get!393 (select (arr!596 (_values!1728 (_2!490 lt!8142))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4637 c!3390) b!24844))

(assert (= (and d!4637 (not c!3390)) b!24845))

(assert (=> b!24844 m!17397))

(assert (=> b!24844 m!17076))

(declare-fun m!19857 () Bool)

(assert (=> b!24844 m!19857))

(assert (=> b!24845 m!17397))

(assert (=> b!24845 m!17076))

(declare-fun m!19859 () Bool)

(assert (=> b!24845 m!19859))

(assert (=> b!23733 d!4637))

(declare-fun b!24846 () Bool)

(declare-fun e!16054 () Bool)

(assert (=> b!24846 (= e!16054 (contains!230 Nil!562 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)))))

(declare-fun bm!2200 () Bool)

(declare-fun call!2203 () Bool)

(declare-fun c!3391 () Bool)

(assert (=> bm!2200 (= call!2203 (arrayNoDuplicates!0 (_keys!3163 lt!8243) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3391 (Cons!561 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000) Nil!562) Nil!562)))))

(declare-fun b!24847 () Bool)

(declare-fun e!16053 () Bool)

(assert (=> b!24847 (= e!16053 call!2203)))

(declare-fun d!4639 () Bool)

(declare-fun res!15091 () Bool)

(declare-fun e!16052 () Bool)

(assert (=> d!4639 (=> res!15091 e!16052)))

(assert (=> d!4639 (= res!15091 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))))))

(assert (=> d!4639 (= (arrayNoDuplicates!0 (_keys!3163 lt!8243) #b00000000000000000000000000000000 Nil!562) e!16052)))

(declare-fun b!24848 () Bool)

(declare-fun e!16051 () Bool)

(assert (=> b!24848 (= e!16052 e!16051)))

(declare-fun res!15090 () Bool)

(assert (=> b!24848 (=> (not res!15090) (not e!16051))))

(assert (=> b!24848 (= res!15090 (not e!16054))))

(declare-fun res!15089 () Bool)

(assert (=> b!24848 (=> (not res!15089) (not e!16054))))

(assert (=> b!24848 (= res!15089 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)))))

(declare-fun b!24849 () Bool)

(assert (=> b!24849 (= e!16051 e!16053)))

(assert (=> b!24849 (= c!3391 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)))))

(declare-fun b!24850 () Bool)

(assert (=> b!24850 (= e!16053 call!2203)))

(assert (= (and d!4639 (not res!15091)) b!24848))

(assert (= (and b!24848 res!15089) b!24846))

(assert (= (and b!24848 res!15090) b!24849))

(assert (= (and b!24849 c!3391) b!24847))

(assert (= (and b!24849 (not c!3391)) b!24850))

(assert (= (or b!24847 b!24850) bm!2200))

(assert (=> b!24846 m!17631))

(assert (=> b!24846 m!17631))

(declare-fun m!19861 () Bool)

(assert (=> b!24846 m!19861))

(assert (=> bm!2200 m!17631))

(declare-fun m!19863 () Bool)

(assert (=> bm!2200 m!19863))

(assert (=> b!24848 m!17631))

(assert (=> b!24848 m!17631))

(assert (=> b!24848 m!17633))

(assert (=> b!24849 m!17631))

(assert (=> b!24849 m!17631))

(assert (=> b!24849 m!17633))

(assert (=> b!23635 d!4639))

(declare-fun d!4641 () Bool)

(assert (=> d!4641 (= (apply!29 lt!8447 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!391 (getValueByKey!61 (toList!297 lt!8447) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(declare-fun bs!1027 () Bool)

(assert (= bs!1027 d!4641))

(assert (=> bs!1027 m!16934))

(assert (=> bs!1027 m!19599))

(assert (=> bs!1027 m!19599))

(declare-fun m!19865 () Bool)

(assert (=> bs!1027 m!19865))

(assert (=> b!23468 d!4641))

(declare-fun d!4643 () Bool)

(declare-fun c!3392 () Bool)

(assert (=> d!4643 (= c!3392 ((_ is ValueCellFull!311) (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun e!16055 () V!1187)

(assert (=> d!4643 (= (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)) e!16055)))

(declare-fun b!24851 () Bool)

(assert (=> b!24851 (= e!16055 (get!392 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24852 () Bool)

(assert (=> b!24852 (= e!16055 (get!393 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4643 c!3392) b!24851))

(assert (= (and d!4643 (not c!3392)) b!24852))

(assert (=> b!24851 m!16928))

(assert (=> b!24851 m!16930))

(declare-fun m!19867 () Bool)

(assert (=> b!24851 m!19867))

(assert (=> b!24852 m!16928))

(assert (=> b!24852 m!16930))

(declare-fun m!19869 () Bool)

(assert (=> b!24852 m!19869))

(assert (=> b!23468 d!4643))

(declare-fun b!24853 () Bool)

(declare-fun e!16059 () Bool)

(assert (=> b!24853 (= e!16059 (contains!230 Nil!562 (select (arr!597 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(declare-fun bm!2201 () Bool)

(declare-fun call!2204 () Bool)

(declare-fun c!3393 () Bool)

(assert (=> bm!2201 (= call!2204 (arrayNoDuplicates!0 (_keys!3163 (v!1602 (underlying!115 thiss!938))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3393 (Cons!561 (select (arr!597 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000) Nil!562) Nil!562)))))

(declare-fun b!24854 () Bool)

(declare-fun e!16058 () Bool)

(assert (=> b!24854 (= e!16058 call!2204)))

(declare-fun d!4645 () Bool)

(declare-fun res!15094 () Bool)

(declare-fun e!16057 () Bool)

(assert (=> d!4645 (=> res!15094 e!16057)))

(assert (=> d!4645 (= res!15094 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938))))))))

(assert (=> d!4645 (= (arrayNoDuplicates!0 (_keys!3163 (v!1602 (underlying!115 thiss!938))) #b00000000000000000000000000000000 Nil!562) e!16057)))

(declare-fun b!24855 () Bool)

(declare-fun e!16056 () Bool)

(assert (=> b!24855 (= e!16057 e!16056)))

(declare-fun res!15093 () Bool)

(assert (=> b!24855 (=> (not res!15093) (not e!16056))))

(assert (=> b!24855 (= res!15093 (not e!16059))))

(declare-fun res!15092 () Bool)

(assert (=> b!24855 (=> (not res!15092) (not e!16059))))

(assert (=> b!24855 (= res!15092 (validKeyInArray!0 (select (arr!597 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(declare-fun b!24856 () Bool)

(assert (=> b!24856 (= e!16056 e!16058)))

(assert (=> b!24856 (= c!3393 (validKeyInArray!0 (select (arr!597 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(declare-fun b!24857 () Bool)

(assert (=> b!24857 (= e!16058 call!2204)))

(assert (= (and d!4645 (not res!15094)) b!24855))

(assert (= (and b!24855 res!15092) b!24853))

(assert (= (and b!24855 res!15093) b!24856))

(assert (= (and b!24856 c!3393) b!24854))

(assert (= (and b!24856 (not c!3393)) b!24857))

(assert (= (or b!24854 b!24857) bm!2201))

(assert (=> b!24853 m!18065))

(assert (=> b!24853 m!18065))

(declare-fun m!19871 () Bool)

(assert (=> b!24853 m!19871))

(assert (=> bm!2201 m!18065))

(declare-fun m!19873 () Bool)

(assert (=> bm!2201 m!19873))

(assert (=> b!24855 m!18065))

(assert (=> b!24855 m!18065))

(assert (=> b!24855 m!18067))

(assert (=> b!24856 m!18065))

(assert (=> b!24856 m!18065))

(assert (=> b!24856 m!18067))

(assert (=> b!23548 d!4645))

(declare-fun d!4647 () Bool)

(declare-fun e!16061 () Bool)

(assert (=> d!4647 e!16061))

(declare-fun res!15095 () Bool)

(assert (=> d!4647 (=> res!15095 e!16061)))

(declare-fun lt!9560 () Bool)

(assert (=> d!4647 (= res!15095 (not lt!9560))))

(declare-fun lt!9561 () Bool)

(assert (=> d!4647 (= lt!9560 lt!9561)))

(declare-fun lt!9559 () Unit!522)

(declare-fun e!16060 () Unit!522)

(assert (=> d!4647 (= lt!9559 e!16060)))

(declare-fun c!3394 () Bool)

(assert (=> d!4647 (= c!3394 lt!9561)))

(assert (=> d!4647 (= lt!9561 (containsKey!25 (toList!297 lt!8766) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> d!4647 (= (contains!229 lt!8766 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) lt!9560)))

(declare-fun b!24858 () Bool)

(declare-fun lt!9562 () Unit!522)

(assert (=> b!24858 (= e!16060 lt!9562)))

(assert (=> b!24858 (= lt!9562 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8766) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24858 (isDefined!23 (getValueByKey!61 (toList!297 lt!8766) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24859 () Bool)

(declare-fun Unit!594 () Unit!522)

(assert (=> b!24859 (= e!16060 Unit!594)))

(declare-fun b!24860 () Bool)

(assert (=> b!24860 (= e!16061 (isDefined!23 (getValueByKey!61 (toList!297 lt!8766) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(assert (= (and d!4647 c!3394) b!24858))

(assert (= (and d!4647 (not c!3394)) b!24859))

(assert (= (and d!4647 (not res!15095)) b!24860))

(assert (=> d!4647 m!16934))

(declare-fun m!19875 () Bool)

(assert (=> d!4647 m!19875))

(assert (=> b!24858 m!16934))

(declare-fun m!19877 () Bool)

(assert (=> b!24858 m!19877))

(assert (=> b!24858 m!16934))

(assert (=> b!24858 m!18547))

(assert (=> b!24858 m!18547))

(declare-fun m!19879 () Bool)

(assert (=> b!24858 m!19879))

(assert (=> b!24860 m!16934))

(assert (=> b!24860 m!18547))

(assert (=> b!24860 m!18547))

(assert (=> b!24860 m!19879))

(assert (=> b!23795 d!4647))

(declare-fun d!4649 () Bool)

(assert (=> d!4649 (contains!229 (getCurrentListMap!127 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 (_keys!3163 lt!8141)) (index!2338 lt!8329)))))

(assert (=> d!4649 true))

(declare-fun _$16!72 () Unit!522)

(assert (=> d!4649 (= (choose!208 (_keys!3163 lt!8141) lt!8315 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2338 lt!8329) (defaultEntry!1742 lt!8141)) _$16!72)))

(declare-fun bs!1028 () Bool)

(assert (= bs!1028 d!4649))

(assert (=> bs!1028 m!16792))

(assert (=> bs!1028 m!16794))

(assert (=> bs!1028 m!16792))

(assert (=> bs!1028 m!16794))

(assert (=> bs!1028 m!16796))

(assert (=> d!4073 d!4649))

(assert (=> d!4073 d!4171))

(declare-fun d!4651 () Bool)

(assert (=> d!4651 (= (apply!29 (+!44 lt!8681 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142)))) lt!8673) (apply!29 lt!8681 lt!8673))))

(declare-fun lt!9563 () Unit!522)

(assert (=> d!4651 (= lt!9563 (choose!213 lt!8681 lt!8679 (minValue!1665 (_2!490 lt!8142)) lt!8673))))

(declare-fun e!16062 () Bool)

(assert (=> d!4651 e!16062))

(declare-fun res!15096 () Bool)

(assert (=> d!4651 (=> (not res!15096) (not e!16062))))

(assert (=> d!4651 (= res!15096 (contains!229 lt!8681 lt!8673))))

(assert (=> d!4651 (= (addApplyDifferent!14 lt!8681 lt!8679 (minValue!1665 (_2!490 lt!8142)) lt!8673) lt!9563)))

(declare-fun b!24861 () Bool)

(assert (=> b!24861 (= e!16062 (not (= lt!8673 lt!8679)))))

(assert (= (and d!4651 res!15096) b!24861))

(declare-fun m!19881 () Bool)

(assert (=> d!4651 m!19881))

(assert (=> d!4651 m!17345))

(assert (=> d!4651 m!17339))

(assert (=> d!4651 m!17339))

(assert (=> d!4651 m!17341))

(declare-fun m!19883 () Bool)

(assert (=> d!4651 m!19883))

(assert (=> b!23700 d!4651))

(declare-fun d!4653 () Bool)

(assert (=> d!4653 (= (apply!29 lt!8681 lt!8673) (get!391 (getValueByKey!61 (toList!297 lt!8681) lt!8673)))))

(declare-fun bs!1029 () Bool)

(assert (= bs!1029 d!4653))

(declare-fun m!19885 () Bool)

(assert (=> bs!1029 m!19885))

(assert (=> bs!1029 m!19885))

(declare-fun m!19887 () Bool)

(assert (=> bs!1029 m!19887))

(assert (=> b!23700 d!4653))

(declare-fun d!4655 () Bool)

(assert (=> d!4655 (= (apply!29 lt!8667 lt!8674) (get!391 (getValueByKey!61 (toList!297 lt!8667) lt!8674)))))

(declare-fun bs!1030 () Bool)

(assert (= bs!1030 d!4655))

(declare-fun m!19889 () Bool)

(assert (=> bs!1030 m!19889))

(assert (=> bs!1030 m!19889))

(declare-fun m!19891 () Bool)

(assert (=> bs!1030 m!19891))

(assert (=> b!23700 d!4655))

(declare-fun b!24862 () Bool)

(declare-fun e!16068 () Bool)

(declare-fun lt!9564 () ListLongMap!563)

(assert (=> b!24862 (= e!16068 (= lt!9564 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!490 lt!8142)))))))

(declare-fun b!24864 () Bool)

(declare-fun e!16066 () Bool)

(declare-fun e!16063 () Bool)

(assert (=> b!24864 (= e!16066 e!16063)))

(assert (=> b!24864 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun res!15099 () Bool)

(assert (=> b!24864 (= res!15099 (contains!229 lt!9564 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24864 (=> (not res!15099) (not e!16063))))

(declare-fun b!24865 () Bool)

(declare-fun e!16064 () ListLongMap!563)

(declare-fun e!16067 () ListLongMap!563)

(assert (=> b!24865 (= e!16064 e!16067)))

(declare-fun c!3395 () Bool)

(assert (=> b!24865 (= c!3395 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(declare-fun b!24866 () Bool)

(assert (=> b!24866 (= e!16064 (ListLongMap!564 Nil!561))))

(declare-fun b!24867 () Bool)

(assert (=> b!24867 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> b!24867 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8342)))))

(assert (=> b!24867 (= e!16063 (= (apply!29 lt!9564 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8342) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24868 () Bool)

(declare-fun call!2205 () ListLongMap!563)

(assert (=> b!24868 (= e!16067 call!2205)))

(declare-fun b!24869 () Bool)

(declare-fun res!15098 () Bool)

(declare-fun e!16069 () Bool)

(assert (=> b!24869 (=> (not res!15098) (not e!16069))))

(assert (=> b!24869 (= res!15098 (not (contains!229 lt!9564 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24870 () Bool)

(assert (=> b!24870 (= e!16068 (isEmpty!173 lt!9564))))

(declare-fun b!24871 () Bool)

(assert (=> b!24871 (= e!16066 e!16068)))

(declare-fun c!3397 () Bool)

(assert (=> b!24871 (= c!3397 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun bm!2202 () Bool)

(assert (=> bm!2202 (= call!2205 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!490 lt!8142))))))

(declare-fun b!24863 () Bool)

(assert (=> b!24863 (= e!16069 e!16066)))

(declare-fun c!3396 () Bool)

(declare-fun e!16065 () Bool)

(assert (=> b!24863 (= c!3396 e!16065)))

(declare-fun res!15097 () Bool)

(assert (=> b!24863 (=> (not res!15097) (not e!16065))))

(assert (=> b!24863 (= res!15097 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun d!4657 () Bool)

(assert (=> d!4657 e!16069))

(declare-fun res!15100 () Bool)

(assert (=> d!4657 (=> (not res!15100) (not e!16069))))

(assert (=> d!4657 (= res!15100 (not (contains!229 lt!9564 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4657 (= lt!9564 e!16064)))

(declare-fun c!3398 () Bool)

(assert (=> d!4657 (= c!3398 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(assert (=> d!4657 (validMask!0 (mask!4729 (_2!490 lt!8142)))))

(assert (=> d!4657 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!490 lt!8142)) lt!8342 (mask!4729 (_2!490 lt!8142)) (extraKeys!1640 (_2!490 lt!8142)) (zeroValue!1665 (_2!490 lt!8142)) (minValue!1665 (_2!490 lt!8142)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!490 lt!8142))) lt!9564)))

(declare-fun b!24872 () Bool)

(declare-fun lt!9566 () Unit!522)

(declare-fun lt!9567 () Unit!522)

(assert (=> b!24872 (= lt!9566 lt!9567)))

(declare-fun lt!9569 () (_ BitVec 64))

(declare-fun lt!9565 () ListLongMap!563)

(declare-fun lt!9568 () (_ BitVec 64))

(declare-fun lt!9570 () V!1187)

(assert (=> b!24872 (not (contains!229 (+!44 lt!9565 (tuple2!973 lt!9569 lt!9570)) lt!9568))))

(assert (=> b!24872 (= lt!9567 (addStillNotContains!2 lt!9565 lt!9569 lt!9570 lt!9568))))

(assert (=> b!24872 (= lt!9568 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!24872 (= lt!9570 (get!390 (select (arr!596 lt!8342) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24872 (= lt!9569 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))

(assert (=> b!24872 (= lt!9565 call!2205)))

(assert (=> b!24872 (= e!16067 (+!44 call!2205 (tuple2!973 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000) (get!390 (select (arr!596 lt!8342) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!24873 () Bool)

(assert (=> b!24873 (= e!16065 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)))))

(assert (=> b!24873 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!4657 c!3398) b!24866))

(assert (= (and d!4657 (not c!3398)) b!24865))

(assert (= (and b!24865 c!3395) b!24872))

(assert (= (and b!24865 (not c!3395)) b!24868))

(assert (= (or b!24872 b!24868) bm!2202))

(assert (= (and d!4657 res!15100) b!24869))

(assert (= (and b!24869 res!15098) b!24863))

(assert (= (and b!24863 res!15097) b!24873))

(assert (= (and b!24863 c!3396) b!24864))

(assert (= (and b!24863 (not c!3396)) b!24871))

(assert (= (and b!24864 res!15099) b!24867))

(assert (= (and b!24871 c!3397) b!24862))

(assert (= (and b!24871 (not c!3397)) b!24870))

(declare-fun b_lambda!1631 () Bool)

(assert (=> (not b_lambda!1631) (not b!24867)))

(assert (=> b!24867 t!3234))

(declare-fun b_and!1543 () Bool)

(assert (= b_and!1541 (and (=> t!3234 result!1095) b_and!1543)))

(declare-fun b_lambda!1633 () Bool)

(assert (=> (not b_lambda!1633) (not b!24872)))

(assert (=> b!24872 t!3234))

(declare-fun b_and!1545 () Bool)

(assert (= b_and!1543 (and (=> t!3234 result!1095) b_and!1545)))

(declare-fun m!19893 () Bool)

(assert (=> b!24872 m!19893))

(declare-fun m!19895 () Bool)

(assert (=> b!24872 m!19895))

(declare-fun m!19897 () Bool)

(assert (=> b!24872 m!19897))

(assert (=> b!24872 m!17315))

(assert (=> b!24872 m!17076))

(assert (=> b!24872 m!17317))

(assert (=> b!24872 m!17076))

(assert (=> b!24872 m!17080))

(assert (=> b!24872 m!19893))

(declare-fun m!19899 () Bool)

(assert (=> b!24872 m!19899))

(assert (=> b!24872 m!17315))

(declare-fun m!19901 () Bool)

(assert (=> d!4657 m!19901))

(assert (=> d!4657 m!16902))

(assert (=> b!24864 m!17080))

(assert (=> b!24864 m!17080))

(declare-fun m!19903 () Bool)

(assert (=> b!24864 m!19903))

(declare-fun m!19905 () Bool)

(assert (=> bm!2202 m!19905))

(assert (=> b!24873 m!17080))

(assert (=> b!24873 m!17080))

(assert (=> b!24873 m!17086))

(declare-fun m!19907 () Bool)

(assert (=> b!24870 m!19907))

(assert (=> b!24865 m!17080))

(assert (=> b!24865 m!17080))

(assert (=> b!24865 m!17086))

(assert (=> b!24862 m!19905))

(declare-fun m!19909 () Bool)

(assert (=> b!24869 m!19909))

(assert (=> b!24867 m!17315))

(assert (=> b!24867 m!17076))

(assert (=> b!24867 m!17317))

(assert (=> b!24867 m!17076))

(assert (=> b!24867 m!17080))

(assert (=> b!24867 m!17315))

(assert (=> b!24867 m!17080))

(declare-fun m!19911 () Bool)

(assert (=> b!24867 m!19911))

(assert (=> b!23700 d!4657))

(declare-fun d!4659 () Bool)

(assert (=> d!4659 (= (apply!29 (+!44 lt!8681 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142)))) lt!8673) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8681 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142))))) lt!8673)))))

(declare-fun bs!1031 () Bool)

(assert (= bs!1031 d!4659))

(declare-fun m!19913 () Bool)

(assert (=> bs!1031 m!19913))

(assert (=> bs!1031 m!19913))

(declare-fun m!19915 () Bool)

(assert (=> bs!1031 m!19915))

(assert (=> b!23700 d!4659))

(declare-fun d!4661 () Bool)

(declare-fun e!16070 () Bool)

(assert (=> d!4661 e!16070))

(declare-fun res!15102 () Bool)

(assert (=> d!4661 (=> (not res!15102) (not e!16070))))

(declare-fun lt!9574 () ListLongMap!563)

(assert (=> d!4661 (= res!15102 (contains!229 lt!9574 (_1!495 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9572 () List!564)

(assert (=> d!4661 (= lt!9574 (ListLongMap!564 lt!9572))))

(declare-fun lt!9571 () Unit!522)

(declare-fun lt!9573 () Unit!522)

(assert (=> d!4661 (= lt!9571 lt!9573)))

(assert (=> d!4661 (= (getValueByKey!61 lt!9572 (_1!495 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4661 (= lt!9573 (lemmaContainsTupThenGetReturnValue!18 lt!9572 (_1!495 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4661 (= lt!9572 (insertStrictlySorted!18 (toList!297 lt!8677) (_1!495 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4661 (= (+!44 lt!8677 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142)))) lt!9574)))

(declare-fun b!24874 () Bool)

(declare-fun res!15101 () Bool)

(assert (=> b!24874 (=> (not res!15101) (not e!16070))))

(assert (=> b!24874 (= res!15101 (= (getValueByKey!61 (toList!297 lt!9574) (_1!495 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24875 () Bool)

(assert (=> b!24875 (= e!16070 (contains!231 (toList!297 lt!9574) (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4661 res!15102) b!24874))

(assert (= (and b!24874 res!15101) b!24875))

(declare-fun m!19917 () Bool)

(assert (=> d!4661 m!19917))

(declare-fun m!19919 () Bool)

(assert (=> d!4661 m!19919))

(declare-fun m!19921 () Bool)

(assert (=> d!4661 m!19921))

(declare-fun m!19923 () Bool)

(assert (=> d!4661 m!19923))

(declare-fun m!19925 () Bool)

(assert (=> b!24874 m!19925))

(declare-fun m!19927 () Bool)

(assert (=> b!24875 m!19927))

(assert (=> b!23700 d!4661))

(declare-fun d!4663 () Bool)

(assert (=> d!4663 (= (apply!29 (+!44 lt!8678 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142)))) lt!8662) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8678 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142))))) lt!8662)))))

(declare-fun bs!1032 () Bool)

(assert (= bs!1032 d!4663))

(declare-fun m!19929 () Bool)

(assert (=> bs!1032 m!19929))

(assert (=> bs!1032 m!19929))

(declare-fun m!19931 () Bool)

(assert (=> bs!1032 m!19931))

(assert (=> b!23700 d!4663))

(declare-fun d!4665 () Bool)

(declare-fun e!16071 () Bool)

(assert (=> d!4665 e!16071))

(declare-fun res!15104 () Bool)

(assert (=> d!4665 (=> (not res!15104) (not e!16071))))

(declare-fun lt!9578 () ListLongMap!563)

(assert (=> d!4665 (= res!15104 (contains!229 lt!9578 (_1!495 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9576 () List!564)

(assert (=> d!4665 (= lt!9578 (ListLongMap!564 lt!9576))))

(declare-fun lt!9575 () Unit!522)

(declare-fun lt!9577 () Unit!522)

(assert (=> d!4665 (= lt!9575 lt!9577)))

(assert (=> d!4665 (= (getValueByKey!61 lt!9576 (_1!495 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4665 (= lt!9577 (lemmaContainsTupThenGetReturnValue!18 lt!9576 (_1!495 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4665 (= lt!9576 (insertStrictlySorted!18 (toList!297 lt!8681) (_1!495 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4665 (= (+!44 lt!8681 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142)))) lt!9578)))

(declare-fun b!24876 () Bool)

(declare-fun res!15103 () Bool)

(assert (=> b!24876 (=> (not res!15103) (not e!16071))))

(assert (=> b!24876 (= res!15103 (= (getValueByKey!61 (toList!297 lt!9578) (_1!495 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24877 () Bool)

(assert (=> b!24877 (= e!16071 (contains!231 (toList!297 lt!9578) (tuple2!973 lt!8679 (minValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4665 res!15104) b!24876))

(assert (= (and b!24876 res!15103) b!24877))

(declare-fun m!19933 () Bool)

(assert (=> d!4665 m!19933))

(declare-fun m!19935 () Bool)

(assert (=> d!4665 m!19935))

(declare-fun m!19937 () Bool)

(assert (=> d!4665 m!19937))

(declare-fun m!19939 () Bool)

(assert (=> d!4665 m!19939))

(declare-fun m!19941 () Bool)

(assert (=> b!24876 m!19941))

(declare-fun m!19943 () Bool)

(assert (=> b!24877 m!19943))

(assert (=> b!23700 d!4665))

(declare-fun d!4667 () Bool)

(assert (=> d!4667 (contains!229 (+!44 lt!8677 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142)))) lt!8675)))

(declare-fun lt!9579 () Unit!522)

(assert (=> d!4667 (= lt!9579 (choose!214 lt!8677 lt!8680 (zeroValue!1665 (_2!490 lt!8142)) lt!8675))))

(assert (=> d!4667 (contains!229 lt!8677 lt!8675)))

(assert (=> d!4667 (= (addStillContains!14 lt!8677 lt!8680 (zeroValue!1665 (_2!490 lt!8142)) lt!8675) lt!9579)))

(declare-fun bs!1033 () Bool)

(assert (= bs!1033 d!4667))

(assert (=> bs!1033 m!17335))

(assert (=> bs!1033 m!17335))

(assert (=> bs!1033 m!17353))

(declare-fun m!19945 () Bool)

(assert (=> bs!1033 m!19945))

(declare-fun m!19947 () Bool)

(assert (=> bs!1033 m!19947))

(assert (=> b!23700 d!4667))

(declare-fun d!4669 () Bool)

(assert (=> d!4669 (= (apply!29 (+!44 lt!8667 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142)))) lt!8674) (apply!29 lt!8667 lt!8674))))

(declare-fun lt!9580 () Unit!522)

(assert (=> d!4669 (= lt!9580 (choose!213 lt!8667 lt!8682 (zeroValue!1665 (_2!490 lt!8142)) lt!8674))))

(declare-fun e!16072 () Bool)

(assert (=> d!4669 e!16072))

(declare-fun res!15105 () Bool)

(assert (=> d!4669 (=> (not res!15105) (not e!16072))))

(assert (=> d!4669 (= res!15105 (contains!229 lt!8667 lt!8674))))

(assert (=> d!4669 (= (addApplyDifferent!14 lt!8667 lt!8682 (zeroValue!1665 (_2!490 lt!8142)) lt!8674) lt!9580)))

(declare-fun b!24878 () Bool)

(assert (=> b!24878 (= e!16072 (not (= lt!8674 lt!8682)))))

(assert (= (and d!4669 res!15105) b!24878))

(declare-fun m!19949 () Bool)

(assert (=> d!4669 m!19949))

(assert (=> d!4669 m!17333))

(assert (=> d!4669 m!17325))

(assert (=> d!4669 m!17325))

(assert (=> d!4669 m!17327))

(declare-fun m!19951 () Bool)

(assert (=> d!4669 m!19951))

(assert (=> b!23700 d!4669))

(declare-fun d!4671 () Bool)

(assert (=> d!4671 (= (apply!29 (+!44 lt!8667 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142)))) lt!8674) (get!391 (getValueByKey!61 (toList!297 (+!44 lt!8667 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142))))) lt!8674)))))

(declare-fun bs!1034 () Bool)

(assert (= bs!1034 d!4671))

(declare-fun m!19953 () Bool)

(assert (=> bs!1034 m!19953))

(assert (=> bs!1034 m!19953))

(declare-fun m!19955 () Bool)

(assert (=> bs!1034 m!19955))

(assert (=> b!23700 d!4671))

(declare-fun d!4673 () Bool)

(assert (=> d!4673 (= (apply!29 (+!44 lt!8678 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142)))) lt!8662) (apply!29 lt!8678 lt!8662))))

(declare-fun lt!9581 () Unit!522)

(assert (=> d!4673 (= lt!9581 (choose!213 lt!8678 lt!8664 (minValue!1665 (_2!490 lt!8142)) lt!8662))))

(declare-fun e!16073 () Bool)

(assert (=> d!4673 e!16073))

(declare-fun res!15106 () Bool)

(assert (=> d!4673 (=> (not res!15106) (not e!16073))))

(assert (=> d!4673 (= res!15106 (contains!229 lt!8678 lt!8662))))

(assert (=> d!4673 (= (addApplyDifferent!14 lt!8678 lt!8664 (minValue!1665 (_2!490 lt!8142)) lt!8662) lt!9581)))

(declare-fun b!24879 () Bool)

(assert (=> b!24879 (= e!16073 (not (= lt!8662 lt!8664)))))

(assert (= (and d!4673 res!15106) b!24879))

(declare-fun m!19957 () Bool)

(assert (=> d!4673 m!19957))

(assert (=> d!4673 m!17351))

(assert (=> d!4673 m!17329))

(assert (=> d!4673 m!17329))

(assert (=> d!4673 m!17331))

(declare-fun m!19959 () Bool)

(assert (=> d!4673 m!19959))

(assert (=> b!23700 d!4673))

(declare-fun d!4675 () Bool)

(declare-fun e!16074 () Bool)

(assert (=> d!4675 e!16074))

(declare-fun res!15108 () Bool)

(assert (=> d!4675 (=> (not res!15108) (not e!16074))))

(declare-fun lt!9585 () ListLongMap!563)

(assert (=> d!4675 (= res!15108 (contains!229 lt!9585 (_1!495 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9583 () List!564)

(assert (=> d!4675 (= lt!9585 (ListLongMap!564 lt!9583))))

(declare-fun lt!9582 () Unit!522)

(declare-fun lt!9584 () Unit!522)

(assert (=> d!4675 (= lt!9582 lt!9584)))

(assert (=> d!4675 (= (getValueByKey!61 lt!9583 (_1!495 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4675 (= lt!9584 (lemmaContainsTupThenGetReturnValue!18 lt!9583 (_1!495 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4675 (= lt!9583 (insertStrictlySorted!18 (toList!297 lt!8667) (_1!495 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4675 (= (+!44 lt!8667 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142)))) lt!9585)))

(declare-fun b!24880 () Bool)

(declare-fun res!15107 () Bool)

(assert (=> b!24880 (=> (not res!15107) (not e!16074))))

(assert (=> b!24880 (= res!15107 (= (getValueByKey!61 (toList!297 lt!9585) (_1!495 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24881 () Bool)

(assert (=> b!24881 (= e!16074 (contains!231 (toList!297 lt!9585) (tuple2!973 lt!8682 (zeroValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4675 res!15108) b!24880))

(assert (= (and b!24880 res!15107) b!24881))

(declare-fun m!19961 () Bool)

(assert (=> d!4675 m!19961))

(declare-fun m!19963 () Bool)

(assert (=> d!4675 m!19963))

(declare-fun m!19965 () Bool)

(assert (=> d!4675 m!19965))

(declare-fun m!19967 () Bool)

(assert (=> d!4675 m!19967))

(declare-fun m!19969 () Bool)

(assert (=> b!24880 m!19969))

(declare-fun m!19971 () Bool)

(assert (=> b!24881 m!19971))

(assert (=> b!23700 d!4675))

(declare-fun d!4677 () Bool)

(declare-fun e!16075 () Bool)

(assert (=> d!4677 e!16075))

(declare-fun res!15110 () Bool)

(assert (=> d!4677 (=> (not res!15110) (not e!16075))))

(declare-fun lt!9589 () ListLongMap!563)

(assert (=> d!4677 (= res!15110 (contains!229 lt!9589 (_1!495 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9587 () List!564)

(assert (=> d!4677 (= lt!9589 (ListLongMap!564 lt!9587))))

(declare-fun lt!9586 () Unit!522)

(declare-fun lt!9588 () Unit!522)

(assert (=> d!4677 (= lt!9586 lt!9588)))

(assert (=> d!4677 (= (getValueByKey!61 lt!9587 (_1!495 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4677 (= lt!9588 (lemmaContainsTupThenGetReturnValue!18 lt!9587 (_1!495 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4677 (= lt!9587 (insertStrictlySorted!18 (toList!297 lt!8678) (_1!495 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4677 (= (+!44 lt!8678 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142)))) lt!9589)))

(declare-fun b!24882 () Bool)

(declare-fun res!15109 () Bool)

(assert (=> b!24882 (=> (not res!15109) (not e!16075))))

(assert (=> b!24882 (= res!15109 (= (getValueByKey!61 (toList!297 lt!9589) (_1!495 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24883 () Bool)

(assert (=> b!24883 (= e!16075 (contains!231 (toList!297 lt!9589) (tuple2!973 lt!8664 (minValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4677 res!15110) b!24882))

(assert (= (and b!24882 res!15109) b!24883))

(declare-fun m!19973 () Bool)

(assert (=> d!4677 m!19973))

(declare-fun m!19975 () Bool)

(assert (=> d!4677 m!19975))

(declare-fun m!19977 () Bool)

(assert (=> d!4677 m!19977))

(declare-fun m!19979 () Bool)

(assert (=> d!4677 m!19979))

(declare-fun m!19981 () Bool)

(assert (=> b!24882 m!19981))

(declare-fun m!19983 () Bool)

(assert (=> b!24883 m!19983))

(assert (=> b!23700 d!4677))

(declare-fun d!4679 () Bool)

(assert (=> d!4679 (= (apply!29 lt!8678 lt!8662) (get!391 (getValueByKey!61 (toList!297 lt!8678) lt!8662)))))

(declare-fun bs!1035 () Bool)

(assert (= bs!1035 d!4679))

(declare-fun m!19985 () Bool)

(assert (=> bs!1035 m!19985))

(assert (=> bs!1035 m!19985))

(declare-fun m!19987 () Bool)

(assert (=> bs!1035 m!19987))

(assert (=> b!23700 d!4679))

(declare-fun d!4681 () Bool)

(declare-fun e!16077 () Bool)

(assert (=> d!4681 e!16077))

(declare-fun res!15111 () Bool)

(assert (=> d!4681 (=> res!15111 e!16077)))

(declare-fun lt!9591 () Bool)

(assert (=> d!4681 (= res!15111 (not lt!9591))))

(declare-fun lt!9592 () Bool)

(assert (=> d!4681 (= lt!9591 lt!9592)))

(declare-fun lt!9590 () Unit!522)

(declare-fun e!16076 () Unit!522)

(assert (=> d!4681 (= lt!9590 e!16076)))

(declare-fun c!3399 () Bool)

(assert (=> d!4681 (= c!3399 lt!9592)))

(assert (=> d!4681 (= lt!9592 (containsKey!25 (toList!297 (+!44 lt!8677 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))) lt!8675))))

(assert (=> d!4681 (= (contains!229 (+!44 lt!8677 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142)))) lt!8675) lt!9591)))

(declare-fun b!24884 () Bool)

(declare-fun lt!9593 () Unit!522)

(assert (=> b!24884 (= e!16076 lt!9593)))

(assert (=> b!24884 (= lt!9593 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (+!44 lt!8677 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))) lt!8675))))

(assert (=> b!24884 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8677 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))) lt!8675))))

(declare-fun b!24885 () Bool)

(declare-fun Unit!595 () Unit!522)

(assert (=> b!24885 (= e!16076 Unit!595)))

(declare-fun b!24886 () Bool)

(assert (=> b!24886 (= e!16077 (isDefined!23 (getValueByKey!61 (toList!297 (+!44 lt!8677 (tuple2!973 lt!8680 (zeroValue!1665 (_2!490 lt!8142))))) lt!8675)))))

(assert (= (and d!4681 c!3399) b!24884))

(assert (= (and d!4681 (not c!3399)) b!24885))

(assert (= (and d!4681 (not res!15111)) b!24886))

(declare-fun m!19989 () Bool)

(assert (=> d!4681 m!19989))

(declare-fun m!19991 () Bool)

(assert (=> b!24884 m!19991))

(declare-fun m!19993 () Bool)

(assert (=> b!24884 m!19993))

(assert (=> b!24884 m!19993))

(declare-fun m!19995 () Bool)

(assert (=> b!24884 m!19995))

(assert (=> b!24886 m!19993))

(assert (=> b!24886 m!19993))

(assert (=> b!24886 m!19995))

(assert (=> b!23700 d!4681))

(declare-fun d!4683 () Bool)

(declare-fun lt!9594 () tuple2!974)

(assert (=> d!4683 (or (bvsle (_2!496 lt!9594) #b00000000000000000000000000001000) (bvsge (bvmul #b00000000000000000000000000001000 (_size!149 (v!1602 (underlying!115 thiss!938)))) (_2!496 lt!9594)) (bvslt (bvadd (bvand (bvashr (_2!496 lt!9594) #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun e!16078 () tuple2!974)

(assert (=> d!4683 (= lt!9594 e!16078)))

(declare-fun c!3400 () Bool)

(declare-fun lt!9595 () (_ BitVec 32))

(assert (=> d!4683 (= c!3400 (and (bvsgt lt!9595 #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!9595) (bvsge (bvadd (bvand (bvashr lt!9595 #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1602 (underlying!115 thiss!938))))))))

(assert (=> d!4683 (= lt!9595 (bvlshr lt!8630 #b00000000000000000000000000000001))))

(assert (=> d!4683 (and (bvsgt lt!8630 #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8630) (bvsge (bvadd (bvand (bvashr lt!8630 #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(assert (=> d!4683 (= (computeNewMaskWhile!14 (_size!149 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (mask!4729 (v!1602 (underlying!115 thiss!938))) lt!8630) lt!9594)))

(declare-fun b!24887 () Bool)

(assert (=> b!24887 (= e!16078 (computeNewMaskWhile!14 (_size!149 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (mask!4729 (v!1602 (underlying!115 thiss!938))) lt!9595))))

(declare-fun b!24888 () Bool)

(declare-fun Unit!596 () Unit!522)

(assert (=> b!24888 (= e!16078 (tuple2!975 Unit!596 lt!9595))))

(assert (= (and d!4683 c!3400) b!24887))

(assert (= (and d!4683 (not c!3400)) b!24888))

(declare-fun m!19997 () Bool)

(assert (=> b!24887 m!19997))

(assert (=> b!23657 d!4683))

(declare-fun d!4685 () Bool)

(declare-fun res!15112 () Bool)

(declare-fun e!16079 () Bool)

(assert (=> d!4685 (=> res!15112 e!16079)))

(assert (=> d!4685 (= res!15112 (= (select (arr!597 (_keys!3163 (_2!490 lt!8142))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4685 (= (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!16079)))

(declare-fun b!24889 () Bool)

(declare-fun e!16080 () Bool)

(assert (=> b!24889 (= e!16079 e!16080)))

(declare-fun res!15113 () Bool)

(assert (=> b!24889 (=> (not res!15113) (not e!16080))))

(assert (=> b!24889 (= res!15113 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!490 lt!8142)))))))

(declare-fun b!24890 () Bool)

(assert (=> b!24890 (= e!16080 (arrayContainsKey!0 (_keys!3163 (_2!490 lt!8142)) #b1000000000000000000000000000000000000000000000000000000000000000 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!4685 (not res!15112)) b!24889))

(assert (= (and b!24889 res!15113) b!24890))

(declare-fun m!19999 () Bool)

(assert (=> d!4685 m!19999))

(declare-fun m!20001 () Bool)

(assert (=> b!24890 m!20001))

(assert (=> b!23778 d!4685))

(declare-fun d!4687 () Bool)

(declare-fun lt!9596 () Bool)

(assert (=> d!4687 (= lt!9596 (select (content!15 (toList!297 lt!8621)) (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun e!16081 () Bool)

(assert (=> d!4687 (= lt!9596 e!16081)))

(declare-fun res!15114 () Bool)

(assert (=> d!4687 (=> (not res!15114) (not e!16081))))

(assert (=> d!4687 (= res!15114 ((_ is Cons!560) (toList!297 lt!8621)))))

(assert (=> d!4687 (= (contains!231 (toList!297 lt!8621) (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) lt!9596)))

(declare-fun b!24891 () Bool)

(declare-fun e!16082 () Bool)

(assert (=> b!24891 (= e!16081 e!16082)))

(declare-fun res!15115 () Bool)

(assert (=> b!24891 (=> res!15115 e!16082)))

(assert (=> b!24891 (= res!15115 (= (h!1126 (toList!297 lt!8621)) (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(declare-fun b!24892 () Bool)

(assert (=> b!24892 (= e!16082 (contains!231 (t!3229 (toList!297 lt!8621)) (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))

(assert (= (and d!4687 res!15114) b!24891))

(assert (= (and b!24891 (not res!15115)) b!24892))

(declare-fun m!20003 () Bool)

(assert (=> d!4687 m!20003))

(declare-fun m!20005 () Bool)

(assert (=> d!4687 m!20005))

(declare-fun m!20007 () Bool)

(assert (=> b!24892 m!20007))

(assert (=> b!23650 d!4687))

(declare-fun d!4689 () Bool)

(assert (=> d!4689 (= (apply!29 lt!8565 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8565) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1036 () Bool)

(assert (= bs!1036 d!4689))

(assert (=> bs!1036 m!19193))

(assert (=> bs!1036 m!19193))

(declare-fun m!20009 () Bool)

(assert (=> bs!1036 m!20009))

(assert (=> b!23567 d!4689))

(declare-fun b!24893 () Bool)

(declare-fun e!16084 () (_ BitVec 32))

(assert (=> b!24893 (= e!16084 #b00000000000000000000000000000000)))

(declare-fun b!24894 () Bool)

(declare-fun e!16083 () (_ BitVec 32))

(assert (=> b!24894 (= e!16084 e!16083)))

(declare-fun c!3402 () Bool)

(assert (=> b!24894 (= c!3402 (validKeyInArray!0 (select (arr!597 lt!8242) (bvadd lt!8249 #b00000000000000000000000000000001))))))

(declare-fun bm!2203 () Bool)

(declare-fun call!2206 () (_ BitVec 32))

(assert (=> bm!2203 (= call!2206 (arrayCountValidKeys!0 lt!8242 (bvadd lt!8249 #b00000000000000000000000000000001 #b00000000000000000000000000000001) lt!8228))))

(declare-fun d!4691 () Bool)

(declare-fun lt!9597 () (_ BitVec 32))

(assert (=> d!4691 (and (bvsge lt!9597 #b00000000000000000000000000000000) (bvsle lt!9597 (bvsub (size!693 lt!8242) (bvadd lt!8249 #b00000000000000000000000000000001))))))

(assert (=> d!4691 (= lt!9597 e!16084)))

(declare-fun c!3401 () Bool)

(assert (=> d!4691 (= c!3401 (bvsge (bvadd lt!8249 #b00000000000000000000000000000001) lt!8228))))

(assert (=> d!4691 (and (bvsle (bvadd lt!8249 #b00000000000000000000000000000001) lt!8228) (bvsge (bvadd lt!8249 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle lt!8228 (size!693 lt!8242)))))

(assert (=> d!4691 (= (arrayCountValidKeys!0 lt!8242 (bvadd lt!8249 #b00000000000000000000000000000001) lt!8228) lt!9597)))

(declare-fun b!24895 () Bool)

(assert (=> b!24895 (= e!16083 (bvadd #b00000000000000000000000000000001 call!2206))))

(declare-fun b!24896 () Bool)

(assert (=> b!24896 (= e!16083 call!2206)))

(assert (= (and d!4691 c!3401) b!24893))

(assert (= (and d!4691 (not c!3401)) b!24894))

(assert (= (and b!24894 c!3402) b!24895))

(assert (= (and b!24894 (not c!3402)) b!24896))

(assert (= (or b!24895 b!24896) bm!2203))

(declare-fun m!20011 () Bool)

(assert (=> b!24894 m!20011))

(assert (=> b!24894 m!20011))

(declare-fun m!20013 () Bool)

(assert (=> b!24894 m!20013))

(declare-fun m!20015 () Bool)

(assert (=> bm!2203 m!20015))

(assert (=> bm!2004 d!4691))

(declare-fun d!4693 () Bool)

(assert (=> d!4693 (= (apply!29 lt!8766 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8766) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1037 () Bool)

(assert (= bs!1037 d!4693))

(assert (=> bs!1037 m!18949))

(assert (=> bs!1037 m!18949))

(declare-fun m!20017 () Bool)

(assert (=> bs!1037 m!20017))

(assert (=> b!23783 d!4693))

(declare-fun d!4695 () Bool)

(declare-fun e!16086 () Bool)

(assert (=> d!4695 e!16086))

(declare-fun res!15116 () Bool)

(assert (=> d!4695 (=> res!15116 e!16086)))

(declare-fun lt!9599 () Bool)

(assert (=> d!4695 (= res!15116 (not lt!9599))))

(declare-fun lt!9600 () Bool)

(assert (=> d!4695 (= lt!9599 lt!9600)))

(declare-fun lt!9598 () Unit!522)

(declare-fun e!16085 () Unit!522)

(assert (=> d!4695 (= lt!9598 e!16085)))

(declare-fun c!3403 () Bool)

(assert (=> d!4695 (= c!3403 lt!9600)))

(assert (=> d!4695 (= lt!9600 (containsKey!25 (toList!297 lt!8766) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4695 (= (contains!229 lt!8766 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9599)))

(declare-fun b!24897 () Bool)

(declare-fun lt!9601 () Unit!522)

(assert (=> b!24897 (= e!16085 lt!9601)))

(assert (=> b!24897 (= lt!9601 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8766) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24897 (isDefined!23 (getValueByKey!61 (toList!297 lt!8766) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24898 () Bool)

(declare-fun Unit!597 () Unit!522)

(assert (=> b!24898 (= e!16085 Unit!597)))

(declare-fun b!24899 () Bool)

(assert (=> b!24899 (= e!16086 (isDefined!23 (getValueByKey!61 (toList!297 lt!8766) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4695 c!3403) b!24897))

(assert (= (and d!4695 (not c!3403)) b!24898))

(assert (= (and d!4695 (not res!15116)) b!24899))

(declare-fun m!20019 () Bool)

(assert (=> d!4695 m!20019))

(declare-fun m!20021 () Bool)

(assert (=> b!24897 m!20021))

(assert (=> b!24897 m!17943))

(assert (=> b!24897 m!17943))

(declare-fun m!20023 () Bool)

(assert (=> b!24897 m!20023))

(assert (=> b!24899 m!17943))

(assert (=> b!24899 m!17943))

(assert (=> b!24899 m!20023))

(assert (=> bm!2042 d!4695))

(declare-fun d!4697 () Bool)

(assert (=> d!4697 (= (isDefined!23 (getValueByKey!61 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))) (not (isEmpty!172 (getValueByKey!61 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bs!1038 () Bool)

(assert (= bs!1038 d!4697))

(assert (=> bs!1038 m!17389))

(declare-fun m!20025 () Bool)

(assert (=> bs!1038 m!20025))

(assert (=> b!23726 d!4697))

(declare-fun b!24902 () Bool)

(declare-fun e!16088 () Option!67)

(assert (=> b!24902 (= e!16088 (getValueByKey!61 (t!3229 (toList!297 e!15136)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24900 () Bool)

(declare-fun e!16087 () Option!67)

(assert (=> b!24900 (= e!16087 (Some!66 (_2!495 (h!1126 (toList!297 e!15136)))))))

(declare-fun b!24903 () Bool)

(assert (=> b!24903 (= e!16088 None!65)))

(declare-fun d!4699 () Bool)

(declare-fun c!3404 () Bool)

(assert (=> d!4699 (= c!3404 (and ((_ is Cons!560) (toList!297 e!15136)) (= (_1!495 (h!1126 (toList!297 e!15136))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4699 (= (getValueByKey!61 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) e!16087)))

(declare-fun b!24901 () Bool)

(assert (=> b!24901 (= e!16087 e!16088)))

(declare-fun c!3405 () Bool)

(assert (=> b!24901 (= c!3405 (and ((_ is Cons!560) (toList!297 e!15136)) (not (= (_1!495 (h!1126 (toList!297 e!15136))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!4699 c!3404) b!24900))

(assert (= (and d!4699 (not c!3404)) b!24901))

(assert (= (and b!24901 c!3405) b!24902))

(assert (= (and b!24901 (not c!3405)) b!24903))

(declare-fun m!20027 () Bool)

(assert (=> b!24902 m!20027))

(assert (=> b!23726 d!4699))

(assert (=> b!23395 d!4179))

(assert (=> b!23395 d!4181))

(declare-fun d!4701 () Bool)

(declare-fun e!16090 () Bool)

(assert (=> d!4701 e!16090))

(declare-fun res!15117 () Bool)

(assert (=> d!4701 (=> res!15117 e!16090)))

(declare-fun lt!9603 () Bool)

(assert (=> d!4701 (= res!15117 (not lt!9603))))

(declare-fun lt!9604 () Bool)

(assert (=> d!4701 (= lt!9603 lt!9604)))

(declare-fun lt!9602 () Unit!522)

(declare-fun e!16089 () Unit!522)

(assert (=> d!4701 (= lt!9602 e!16089)))

(declare-fun c!3406 () Bool)

(assert (=> d!4701 (= c!3406 lt!9604)))

(assert (=> d!4701 (= lt!9604 (containsKey!25 (toList!297 (map!408 (_2!490 lt!8736))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4701 (= (contains!229 (map!408 (_2!490 lt!8736)) #b1000000000000000000000000000000000000000000000000000000000000000) lt!9603)))

(declare-fun b!24904 () Bool)

(declare-fun lt!9605 () Unit!522)

(assert (=> b!24904 (= e!16089 lt!9605)))

(assert (=> b!24904 (= lt!9605 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (map!408 (_2!490 lt!8736))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24904 (isDefined!23 (getValueByKey!61 (toList!297 (map!408 (_2!490 lt!8736))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24905 () Bool)

(declare-fun Unit!598 () Unit!522)

(assert (=> b!24905 (= e!16089 Unit!598)))

(declare-fun b!24906 () Bool)

(assert (=> b!24906 (= e!16090 (isDefined!23 (getValueByKey!61 (toList!297 (map!408 (_2!490 lt!8736))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4701 c!3406) b!24904))

(assert (= (and d!4701 (not c!3406)) b!24905))

(assert (= (and d!4701 (not res!15117)) b!24906))

(declare-fun m!20029 () Bool)

(assert (=> d!4701 m!20029))

(declare-fun m!20031 () Bool)

(assert (=> b!24904 m!20031))

(declare-fun m!20033 () Bool)

(assert (=> b!24904 m!20033))

(assert (=> b!24904 m!20033))

(declare-fun m!20035 () Bool)

(assert (=> b!24904 m!20035))

(assert (=> b!24906 m!20033))

(assert (=> b!24906 m!20033))

(assert (=> b!24906 m!20035))

(assert (=> b!23765 d!4701))

(assert (=> b!23765 d!4381))

(declare-fun d!4703 () Bool)

(declare-fun e!16091 () Bool)

(assert (=> d!4703 e!16091))

(declare-fun res!15119 () Bool)

(assert (=> d!4703 (=> (not res!15119) (not e!16091))))

(declare-fun lt!9609 () ListLongMap!563)

(assert (=> d!4703 (= res!15119 (contains!229 lt!9609 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(declare-fun lt!9607 () List!564)

(assert (=> d!4703 (= lt!9609 (ListLongMap!564 lt!9607))))

(declare-fun lt!9606 () Unit!522)

(declare-fun lt!9608 () Unit!522)

(assert (=> d!4703 (= lt!9606 lt!9608)))

(assert (=> d!4703 (= (getValueByKey!61 lt!9607 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4703 (= lt!9608 (lemmaContainsTupThenGetReturnValue!18 lt!9607 (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4703 (= lt!9607 (insertStrictlySorted!18 (toList!297 call!2025) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))) (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))))))

(assert (=> d!4703 (= (+!44 call!2025 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))) lt!9609)))

(declare-fun b!24907 () Bool)

(declare-fun res!15118 () Bool)

(assert (=> b!24907 (=> (not res!15118) (not e!16091))))

(assert (=> b!24907 (= res!15118 (= (getValueByKey!61 (toList!297 lt!9609) (_1!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142))))) (Some!66 (_2!495 (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))))

(declare-fun b!24908 () Bool)

(assert (=> b!24908 (= e!16091 (contains!231 (toList!297 lt!9609) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!490 lt!8142)))))))

(assert (= (and d!4703 res!15119) b!24907))

(assert (= (and b!24907 res!15118) b!24908))

(declare-fun m!20037 () Bool)

(assert (=> d!4703 m!20037))

(declare-fun m!20039 () Bool)

(assert (=> d!4703 m!20039))

(declare-fun m!20041 () Bool)

(assert (=> d!4703 m!20041))

(declare-fun m!20043 () Bool)

(assert (=> d!4703 m!20043))

(declare-fun m!20045 () Bool)

(assert (=> b!24907 m!20045))

(declare-fun m!20047 () Bool)

(assert (=> b!24908 m!20047))

(assert (=> b!23707 d!4703))

(assert (=> bm!1988 d!3975))

(declare-fun d!4705 () Bool)

(assert (=> d!4705 (= (apply!29 lt!8447 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8447) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1039 () Bool)

(assert (= bs!1039 d!4705))

(assert (=> bs!1039 m!19289))

(assert (=> bs!1039 m!19289))

(declare-fun m!20049 () Bool)

(assert (=> bs!1039 m!20049))

(assert (=> b!23480 d!4705))

(declare-fun d!4707 () Bool)

(assert (=> d!4707 (= (apply!29 lt!8704 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!61 (toList!297 lt!8704) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1040 () Bool)

(assert (= bs!1040 d!4707))

(assert (=> bs!1040 m!19145))

(assert (=> bs!1040 m!19145))

(declare-fun m!20051 () Bool)

(assert (=> bs!1040 m!20051))

(assert (=> b!23745 d!4707))

(declare-fun b!24909 () Bool)

(declare-fun e!16092 () Bool)

(declare-fun e!16093 () Bool)

(assert (=> b!24909 (= e!16092 e!16093)))

(declare-fun lt!9612 () (_ BitVec 64))

(assert (=> b!24909 (= lt!9612 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000))))

(declare-fun lt!9610 () Unit!522)

(assert (=> b!24909 (= lt!9610 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 lt!8243) lt!9612 #b00000000000000000000000000000000))))

(assert (=> b!24909 (arrayContainsKey!0 (_keys!3163 lt!8243) lt!9612 #b00000000000000000000000000000000)))

(declare-fun lt!9611 () Unit!522)

(assert (=> b!24909 (= lt!9611 lt!9610)))

(declare-fun res!15120 () Bool)

(assert (=> b!24909 (= res!15120 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000) (_keys!3163 lt!8243) (mask!4729 lt!8243)) (Found!54 #b00000000000000000000000000000000)))))

(assert (=> b!24909 (=> (not res!15120) (not e!16093))))

(declare-fun b!24910 () Bool)

(declare-fun call!2207 () Bool)

(assert (=> b!24910 (= e!16093 call!2207)))

(declare-fun bm!2204 () Bool)

(assert (=> bm!2204 (= call!2207 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 lt!8243) (mask!4729 lt!8243)))))

(declare-fun d!4709 () Bool)

(declare-fun res!15121 () Bool)

(declare-fun e!16094 () Bool)

(assert (=> d!4709 (=> res!15121 e!16094)))

(assert (=> d!4709 (= res!15121 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8243))))))

(assert (=> d!4709 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 lt!8243) (mask!4729 lt!8243)) e!16094)))

(declare-fun b!24911 () Bool)

(assert (=> b!24911 (= e!16092 call!2207)))

(declare-fun b!24912 () Bool)

(assert (=> b!24912 (= e!16094 e!16092)))

(declare-fun c!3407 () Bool)

(assert (=> b!24912 (= c!3407 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8243)) #b00000000000000000000000000000000)))))

(assert (= (and d!4709 (not res!15121)) b!24912))

(assert (= (and b!24912 c!3407) b!24909))

(assert (= (and b!24912 (not c!3407)) b!24911))

(assert (= (and b!24909 res!15120) b!24910))

(assert (= (or b!24910 b!24911) bm!2204))

(assert (=> b!24909 m!17631))

(declare-fun m!20053 () Bool)

(assert (=> b!24909 m!20053))

(declare-fun m!20055 () Bool)

(assert (=> b!24909 m!20055))

(assert (=> b!24909 m!17631))

(declare-fun m!20057 () Bool)

(assert (=> b!24909 m!20057))

(declare-fun m!20059 () Bool)

(assert (=> bm!2204 m!20059))

(assert (=> b!24912 m!17631))

(assert (=> b!24912 m!17631))

(assert (=> b!24912 m!17633))

(assert (=> b!23634 d!4709))

(assert (=> b!23813 d!4377))

(assert (=> b!23813 d!4379))

(declare-fun d!4711 () Bool)

(declare-fun res!15122 () Bool)

(declare-fun e!16095 () Bool)

(assert (=> d!4711 (=> res!15122 e!16095)))

(assert (=> d!4711 (= res!15122 (= (select (arr!597 lt!8235) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_1!495 lt!8244)))))

(assert (=> d!4711 (= (arrayContainsKey!0 lt!8235 (_1!495 lt!8244) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!16095)))

(declare-fun b!24913 () Bool)

(declare-fun e!16096 () Bool)

(assert (=> b!24913 (= e!16095 e!16096)))

(declare-fun res!15123 () Bool)

(assert (=> b!24913 (=> (not res!15123) (not e!16096))))

(assert (=> b!24913 (= res!15123 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!693 lt!8235)))))

(declare-fun b!24914 () Bool)

(assert (=> b!24914 (= e!16096 (arrayContainsKey!0 lt!8235 (_1!495 lt!8244) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!4711 (not res!15122)) b!24913))

(assert (= (and b!24913 res!15123) b!24914))

(declare-fun m!20061 () Bool)

(assert (=> d!4711 m!20061))

(declare-fun m!20063 () Bool)

(assert (=> b!24914 m!20063))

(assert (=> b!23810 d!4711))

(assert (=> b!23631 d!4165))

(assert (=> d!4003 d!3999))

(declare-fun d!4713 () Bool)

(assert (=> d!4713 (= (arrayCountValidKeys!0 lt!8242 lt!8249 lt!8228) #b00000000000000000000000000000000)))

(assert (=> d!4713 true))

(declare-fun _$88!16 () Unit!522)

(assert (=> d!4713 (= (choose!59 lt!8242 lt!8249 lt!8228) _$88!16)))

(declare-fun bs!1041 () Bool)

(assert (= bs!1041 d!4713))

(assert (=> bs!1041 m!16750))

(assert (=> d!4003 d!4713))

(declare-fun d!4715 () Bool)

(assert (=> d!4715 (arrayContainsKey!0 lt!8238 lt!8602 #b00000000000000000000000000000000)))

(declare-fun lt!9613 () Unit!522)

(assert (=> d!4715 (= lt!9613 (choose!13 lt!8238 lt!8602 lt!8248))))

(assert (=> d!4715 (bvsge lt!8248 #b00000000000000000000000000000000)))

(assert (=> d!4715 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8238 lt!8602 lt!8248) lt!9613)))

(declare-fun bs!1042 () Bool)

(assert (= bs!1042 d!4715))

(assert (=> bs!1042 m!17158))

(declare-fun m!20065 () Bool)

(assert (=> bs!1042 m!20065))

(assert (=> b!23614 d!4715))

(declare-fun d!4717 () Bool)

(declare-fun res!15124 () Bool)

(declare-fun e!16097 () Bool)

(assert (=> d!4717 (=> res!15124 e!16097)))

(assert (=> d!4717 (= res!15124 (= (select (arr!597 lt!8238) #b00000000000000000000000000000000) lt!8602))))

(assert (=> d!4717 (= (arrayContainsKey!0 lt!8238 lt!8602 #b00000000000000000000000000000000) e!16097)))

(declare-fun b!24915 () Bool)

(declare-fun e!16098 () Bool)

(assert (=> b!24915 (= e!16097 e!16098)))

(declare-fun res!15125 () Bool)

(assert (=> b!24915 (=> (not res!15125) (not e!16098))))

(assert (=> b!24915 (= res!15125 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 lt!8238)))))

(declare-fun b!24916 () Bool)

(assert (=> b!24916 (= e!16098 (arrayContainsKey!0 lt!8238 lt!8602 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4717 (not res!15124)) b!24915))

(assert (= (and b!24915 res!15125) b!24916))

(declare-fun m!20067 () Bool)

(assert (=> d!4717 m!20067))

(declare-fun m!20069 () Bool)

(assert (=> b!24916 m!20069))

(assert (=> b!23614 d!4717))

(declare-fun b!24917 () Bool)

(declare-fun e!16101 () SeekEntryResult!54)

(assert (=> b!24917 (= e!16101 Undefined!54)))

(declare-fun d!4719 () Bool)

(declare-fun lt!9616 () SeekEntryResult!54)

(assert (=> d!4719 (and (or ((_ is Undefined!54) lt!9616) (not ((_ is Found!54) lt!9616)) (and (bvsge (index!2338 lt!9616) #b00000000000000000000000000000000) (bvslt (index!2338 lt!9616) (size!693 lt!8238)))) (or ((_ is Undefined!54) lt!9616) ((_ is Found!54) lt!9616) (not ((_ is MissingZero!54) lt!9616)) (and (bvsge (index!2337 lt!9616) #b00000000000000000000000000000000) (bvslt (index!2337 lt!9616) (size!693 lt!8238)))) (or ((_ is Undefined!54) lt!9616) ((_ is Found!54) lt!9616) ((_ is MissingZero!54) lt!9616) (not ((_ is MissingVacant!54) lt!9616)) (and (bvsge (index!2340 lt!9616) #b00000000000000000000000000000000) (bvslt (index!2340 lt!9616) (size!693 lt!8238)))) (or ((_ is Undefined!54) lt!9616) (ite ((_ is Found!54) lt!9616) (= (select (arr!597 lt!8238) (index!2338 lt!9616)) (select (arr!597 lt!8238) lt!8248)) (ite ((_ is MissingZero!54) lt!9616) (= (select (arr!597 lt!8238) (index!2337 lt!9616)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!54) lt!9616) (= (select (arr!597 lt!8238) (index!2340 lt!9616)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!4719 (= lt!9616 e!16101)))

(declare-fun c!3408 () Bool)

(declare-fun lt!9614 () SeekEntryResult!54)

(assert (=> d!4719 (= c!3408 (and ((_ is Intermediate!54) lt!9614) (undefined!866 lt!9614)))))

(assert (=> d!4719 (= lt!9614 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!597 lt!8238) lt!8248) (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))) (select (arr!597 lt!8238) lt!8248) lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))))))

(assert (=> d!4719 (validMask!0 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))))))

(assert (=> d!4719 (= (seekEntryOrOpen!0 (select (arr!597 lt!8238) lt!8248) lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))) lt!9616)))

(declare-fun b!24918 () Bool)

(declare-fun c!3409 () Bool)

(declare-fun lt!9615 () (_ BitVec 64))

(assert (=> b!24918 (= c!3409 (= lt!9615 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!16100 () SeekEntryResult!54)

(declare-fun e!16099 () SeekEntryResult!54)

(assert (=> b!24918 (= e!16100 e!16099)))

(declare-fun b!24919 () Bool)

(assert (=> b!24919 (= e!16101 e!16100)))

(assert (=> b!24919 (= lt!9615 (select (arr!597 lt!8238) (index!2339 lt!9614)))))

(declare-fun c!3410 () Bool)

(assert (=> b!24919 (= c!3410 (= lt!9615 (select (arr!597 lt!8238) lt!8248)))))

(declare-fun b!24920 () Bool)

(assert (=> b!24920 (= e!16099 (MissingZero!54 (index!2339 lt!9614)))))

(declare-fun b!24921 () Bool)

(assert (=> b!24921 (= e!16099 (seekKeyOrZeroReturnVacant!0 (x!5576 lt!9614) (index!2339 lt!9614) (index!2339 lt!9614) (select (arr!597 lt!8238) lt!8248) lt!8238 (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938))))))))

(declare-fun b!24922 () Bool)

(assert (=> b!24922 (= e!16100 (Found!54 (index!2339 lt!9614)))))

(assert (= (and d!4719 c!3408) b!24917))

(assert (= (and d!4719 (not c!3408)) b!24919))

(assert (= (and b!24919 c!3410) b!24922))

(assert (= (and b!24919 (not c!3410)) b!24918))

(assert (= (and b!24918 c!3409) b!24920))

(assert (= (and b!24918 (not c!3409)) b!24921))

(assert (=> d!4719 m!16680))

(assert (=> d!4719 m!16752))

(declare-fun m!20071 () Bool)

(assert (=> d!4719 m!20071))

(assert (=> d!4719 m!17154))

(assert (=> d!4719 m!16680))

(declare-fun m!20073 () Bool)

(assert (=> d!4719 m!20073))

(declare-fun m!20075 () Bool)

(assert (=> d!4719 m!20075))

(declare-fun m!20077 () Bool)

(assert (=> d!4719 m!20077))

(declare-fun m!20079 () Bool)

(assert (=> d!4719 m!20079))

(assert (=> d!4719 m!17154))

(assert (=> d!4719 m!16680))

(assert (=> d!4719 m!20071))

(declare-fun m!20081 () Bool)

(assert (=> b!24919 m!20081))

(assert (=> b!24921 m!17154))

(assert (=> b!24921 m!16680))

(declare-fun m!20083 () Bool)

(assert (=> b!24921 m!20083))

(assert (=> b!23614 d!4719))

(declare-fun d!4721 () Bool)

(assert (=> d!4721 (isDefined!23 (getValueByKey!61 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun lt!9617 () Unit!522)

(assert (=> d!4721 (= lt!9617 (choose!212 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!16102 () Bool)

(assert (=> d!4721 e!16102))

(declare-fun res!15126 () Bool)

(assert (=> d!4721 (=> (not res!15126) (not e!16102))))

(assert (=> d!4721 (= res!15126 (isStrictlySorted!158 (toList!297 e!15136)))))

(assert (=> d!4721 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!9617)))

(declare-fun b!24923 () Bool)

(assert (=> b!24923 (= e!16102 (containsKey!25 (toList!297 e!15136) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4721 res!15126) b!24923))

(assert (=> d!4721 m!17389))

(assert (=> d!4721 m!17389))

(assert (=> d!4721 m!17391))

(declare-fun m!20085 () Bool)

(assert (=> d!4721 m!20085))

(declare-fun m!20087 () Bool)

(assert (=> d!4721 m!20087))

(assert (=> b!24923 m!17385))

(assert (=> b!23724 d!4721))

(assert (=> b!23724 d!4697))

(assert (=> b!23724 d!4699))

(declare-fun b!24926 () Bool)

(declare-fun e!16104 () Option!67)

(assert (=> b!24926 (= e!16104 (getValueByKey!61 (t!3229 (toList!297 lt!8621)) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))

(declare-fun b!24924 () Bool)

(declare-fun e!16103 () Option!67)

(assert (=> b!24924 (= e!16103 (Some!66 (_2!495 (h!1126 (toList!297 lt!8621)))))))

(declare-fun b!24927 () Bool)

(assert (=> b!24927 (= e!16104 None!65)))

(declare-fun d!4723 () Bool)

(declare-fun c!3411 () Bool)

(assert (=> d!4723 (= c!3411 (and ((_ is Cons!560) (toList!297 lt!8621)) (= (_1!495 (h!1126 (toList!297 lt!8621))) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))))))))))

(assert (=> d!4723 (= (getValueByKey!61 (toList!297 lt!8621) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))) e!16103)))

(declare-fun b!24925 () Bool)

(assert (=> b!24925 (= e!16103 e!16104)))

(declare-fun c!3412 () Bool)

(assert (=> b!24925 (= c!3412 (and ((_ is Cons!560) (toList!297 lt!8621)) (not (= (_1!495 (h!1126 (toList!297 lt!8621))) (_1!495 (ite c!3009 (ite c!3008 (tuple2!973 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (tuple2!973 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1602 (underlying!115 thiss!938))))))))))))

(assert (= (and d!4723 c!3411) b!24924))

(assert (= (and d!4723 (not c!3411)) b!24925))

(assert (= (and b!24925 c!3412) b!24926))

(assert (= (and b!24925 (not c!3412)) b!24927))

(declare-fun m!20089 () Bool)

(assert (=> b!24926 m!20089))

(assert (=> b!23649 d!4723))

(declare-fun d!4725 () Bool)

(assert (=> d!4725 (= (validKeyInArray!0 (select (arr!597 lt!8242) lt!8249)) (and (not (= (select (arr!597 lt!8242) lt!8249) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 lt!8242) lt!8249) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23603 d!4725))

(declare-fun d!4727 () Bool)

(assert (=> d!4727 (isDefined!23 (getValueByKey!61 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!9618 () Unit!522)

(assert (=> d!4727 (= lt!9618 (choose!212 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!16105 () Bool)

(assert (=> d!4727 e!16105))

(declare-fun res!15127 () Bool)

(assert (=> d!4727 (=> (not res!15127) (not e!16105))))

(assert (=> d!4727 (= res!15127 (isStrictlySorted!158 (toList!297 call!1944)))))

(assert (=> d!4727 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000) lt!9618)))

(declare-fun b!24928 () Bool)

(assert (=> b!24928 (= e!16105 (containsKey!25 (toList!297 call!1944) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4727 res!15127) b!24928))

(assert (=> d!4727 m!17192))

(assert (=> d!4727 m!17192))

(assert (=> d!4727 m!17194))

(declare-fun m!20091 () Bool)

(assert (=> d!4727 m!20091))

(declare-fun m!20093 () Bool)

(assert (=> d!4727 m!20093))

(assert (=> b!24928 m!17188))

(assert (=> b!23642 d!4727))

(assert (=> b!23642 d!4607))

(assert (=> b!23642 d!4609))

(assert (=> d!4071 d!4171))

(declare-fun d!4729 () Bool)

(declare-fun e!16107 () Bool)

(assert (=> d!4729 e!16107))

(declare-fun res!15128 () Bool)

(assert (=> d!4729 (=> res!15128 e!16107)))

(declare-fun lt!9620 () Bool)

(assert (=> d!4729 (= res!15128 (not lt!9620))))

(declare-fun lt!9621 () Bool)

(assert (=> d!4729 (= lt!9620 lt!9621)))

(declare-fun lt!9619 () Unit!522)

(declare-fun e!16106 () Unit!522)

(assert (=> d!4729 (= lt!9619 e!16106)))

(declare-fun c!3413 () Bool)

(assert (=> d!4729 (= c!3413 lt!9621)))

(assert (=> d!4729 (= lt!9621 (containsKey!25 (toList!297 (map!408 (_2!490 lt!8533))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4729 (= (contains!229 (map!408 (_2!490 lt!8533)) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!9620)))

(declare-fun b!24929 () Bool)

(declare-fun lt!9622 () Unit!522)

(assert (=> b!24929 (= e!16106 lt!9622)))

(assert (=> b!24929 (= lt!9622 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 (map!408 (_2!490 lt!8533))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24929 (isDefined!23 (getValueByKey!61 (toList!297 (map!408 (_2!490 lt!8533))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24930 () Bool)

(declare-fun Unit!599 () Unit!522)

(assert (=> b!24930 (= e!16106 Unit!599)))

(declare-fun b!24931 () Bool)

(assert (=> b!24931 (= e!16107 (isDefined!23 (getValueByKey!61 (toList!297 (map!408 (_2!490 lt!8533))) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4729 c!3413) b!24929))

(assert (= (and d!4729 (not c!3413)) b!24930))

(assert (= (and d!4729 (not res!15128)) b!24931))

(declare-fun m!20095 () Bool)

(assert (=> d!4729 m!20095))

(declare-fun m!20097 () Bool)

(assert (=> b!24929 m!20097))

(declare-fun m!20099 () Bool)

(assert (=> b!24929 m!20099))

(assert (=> b!24929 m!20099))

(declare-fun m!20101 () Bool)

(assert (=> b!24929 m!20101))

(assert (=> b!24931 m!20099))

(assert (=> b!24931 m!20099))

(assert (=> b!24931 m!20101))

(assert (=> b!23522 d!4729))

(assert (=> b!23522 d!4465))

(declare-fun d!4731 () Bool)

(assert (=> d!4731 (= (apply!29 lt!8565 (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000)) (get!391 (getValueByKey!61 (toList!297 lt!8565) (select (arr!597 (_keys!3163 (_2!490 lt!8142))) #b00000000000000000000000000000000))))))

(declare-fun bs!1043 () Bool)

(assert (= bs!1043 d!4731))

(assert (=> bs!1043 m!17080))

(assert (=> bs!1043 m!19551))

(assert (=> bs!1043 m!19551))

(declare-fun m!20103 () Bool)

(assert (=> bs!1043 m!20103))

(assert (=> b!23555 d!4731))

(declare-fun c!3414 () Bool)

(declare-fun d!4733 () Bool)

(assert (=> d!4733 (= c!3414 ((_ is ValueCellFull!311) (select (arr!596 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))) #b00000000000000000000000000000000)))))

(declare-fun e!16108 () V!1187)

(assert (=> d!4733 (= (get!390 (select (arr!596 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)) e!16108)))

(declare-fun b!24932 () Bool)

(assert (=> b!24932 (= e!16108 (get!392 (select (arr!596 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24933 () Bool)

(assert (=> b!24933 (= e!16108 (get!393 (select (arr!596 (ite (or c!3009 c!3007) (_values!1728 (_2!490 lt!8142)) (array!1262 (store (arr!596 (_values!1728 (_2!490 lt!8142))) (index!2338 lt!8356) (ValueCellFull!311 (minValue!1665 (v!1602 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!490 lt!8142)))))) #b00000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (_2!490 lt!8142)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4733 c!3414) b!24932))

(assert (= (and d!4733 (not c!3414)) b!24933))

(assert (=> b!24932 m!17074))

(assert (=> b!24932 m!17076))

(declare-fun m!20105 () Bool)

(assert (=> b!24932 m!20105))

(assert (=> b!24933 m!17074))

(assert (=> b!24933 m!17076))

(declare-fun m!20107 () Bool)

(assert (=> b!24933 m!20107))

(assert (=> b!23555 d!4733))

(declare-fun d!4735 () Bool)

(assert (=> d!4735 (= (+!44 (getCurrentListMap!127 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!973 (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (getCurrentListMap!127 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2338 lt!8329) (ValueCellFull!311 (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> d!4735 true))

(declare-fun _$5!56 () Unit!522)

(assert (=> d!4735 (= (choose!209 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2338 lt!8329) (ite (or c!2933 c!2931) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2933 c!2931) (zeroValue!1665 (v!1602 (underlying!115 thiss!938))) (minValue!1665 (v!1602 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) _$5!56)))

(declare-fun bs!1044 () Bool)

(assert (= bs!1044 d!4735))

(assert (=> bs!1044 m!16784))

(assert (=> bs!1044 m!16784))

(assert (=> bs!1044 m!17004))

(assert (=> bs!1044 m!16790))

(assert (=> bs!1044 m!17577))

(assert (=> d!4075 d!4735))

(assert (=> d!4075 d!4171))

(assert (=> bm!2018 d!4657))

(declare-fun d!4737 () Bool)

(declare-fun e!16110 () Bool)

(assert (=> d!4737 e!16110))

(declare-fun res!15129 () Bool)

(assert (=> d!4737 (=> res!15129 e!16110)))

(declare-fun lt!9624 () Bool)

(assert (=> d!4737 (= res!15129 (not lt!9624))))

(declare-fun lt!9625 () Bool)

(assert (=> d!4737 (= lt!9624 lt!9625)))

(declare-fun lt!9623 () Unit!522)

(declare-fun e!16109 () Unit!522)

(assert (=> d!4737 (= lt!9623 e!16109)))

(declare-fun c!3415 () Bool)

(assert (=> d!4737 (= c!3415 lt!9625)))

(assert (=> d!4737 (= lt!9625 (containsKey!25 (toList!297 lt!8642) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4737 (= (contains!229 lt!8642 #b1000000000000000000000000000000000000000000000000000000000000000) lt!9624)))

(declare-fun b!24934 () Bool)

(declare-fun lt!9626 () Unit!522)

(assert (=> b!24934 (= e!16109 lt!9626)))

(assert (=> b!24934 (= lt!9626 (lemmaContainsKeyImpliesGetValueByKeyDefined!22 (toList!297 lt!8642) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24934 (isDefined!23 (getValueByKey!61 (toList!297 lt!8642) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24935 () Bool)

(declare-fun Unit!600 () Unit!522)

(assert (=> b!24935 (= e!16109 Unit!600)))

(declare-fun b!24936 () Bool)

(assert (=> b!24936 (= e!16110 (isDefined!23 (getValueByKey!61 (toList!297 lt!8642) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4737 c!3415) b!24934))

(assert (= (and d!4737 (not c!3415)) b!24935))

(assert (= (and d!4737 (not res!15129)) b!24936))

(declare-fun m!20109 () Bool)

(assert (=> d!4737 m!20109))

(declare-fun m!20111 () Bool)

(assert (=> b!24934 m!20111))

(assert (=> b!24934 m!19293))

(assert (=> b!24934 m!19293))

(declare-fun m!20113 () Bool)

(assert (=> b!24934 m!20113))

(assert (=> b!24936 m!19293))

(assert (=> b!24936 m!19293))

(assert (=> b!24936 m!20113))

(assert (=> bm!2016 d!4737))

(declare-fun b!24937 () Bool)

(declare-fun e!16111 () Bool)

(declare-fun e!16112 () Bool)

(assert (=> b!24937 (= e!16111 e!16112)))

(declare-fun lt!9629 () (_ BitVec 64))

(assert (=> b!24937 (= lt!9629 (select (arr!597 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000))))

(declare-fun lt!9627 () Unit!522)

(assert (=> b!24937 (= lt!9627 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 (v!1602 (underlying!115 thiss!938))) lt!9629 #b00000000000000000000000000000000))))

(assert (=> b!24937 (arrayContainsKey!0 (_keys!3163 (v!1602 (underlying!115 thiss!938))) lt!9629 #b00000000000000000000000000000000)))

(declare-fun lt!9628 () Unit!522)

(assert (=> b!24937 (= lt!9628 lt!9627)))

(declare-fun res!15130 () Bool)

(assert (=> b!24937 (= res!15130 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000) (_keys!3163 (v!1602 (underlying!115 thiss!938))) (mask!4729 (v!1602 (underlying!115 thiss!938)))) (Found!54 #b00000000000000000000000000000000)))))

(assert (=> b!24937 (=> (not res!15130) (not e!16112))))

(declare-fun b!24938 () Bool)

(declare-fun call!2208 () Bool)

(assert (=> b!24938 (= e!16112 call!2208)))

(declare-fun bm!2205 () Bool)

(assert (=> bm!2205 (= call!2208 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 (v!1602 (underlying!115 thiss!938))) (mask!4729 (v!1602 (underlying!115 thiss!938)))))))

(declare-fun d!4739 () Bool)

(declare-fun res!15131 () Bool)

(declare-fun e!16113 () Bool)

(assert (=> d!4739 (=> res!15131 e!16113)))

(assert (=> d!4739 (= res!15131 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1602 (underlying!115 thiss!938))))))))

(assert (=> d!4739 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (v!1602 (underlying!115 thiss!938))) (mask!4729 (v!1602 (underlying!115 thiss!938)))) e!16113)))

(declare-fun b!24939 () Bool)

(assert (=> b!24939 (= e!16111 call!2208)))

(declare-fun b!24940 () Bool)

(assert (=> b!24940 (= e!16113 e!16111)))

(declare-fun c!3416 () Bool)

(assert (=> b!24940 (= c!3416 (validKeyInArray!0 (select (arr!597 (_keys!3163 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(assert (= (and d!4739 (not res!15131)) b!24940))

(assert (= (and b!24940 c!3416) b!24937))

(assert (= (and b!24940 (not c!3416)) b!24939))

(assert (= (and b!24937 res!15130) b!24938))

(assert (= (or b!24938 b!24939) bm!2205))

(assert (=> b!24937 m!18065))

(declare-fun m!20115 () Bool)

(assert (=> b!24937 m!20115))

(declare-fun m!20117 () Bool)

(assert (=> b!24937 m!20117))

(assert (=> b!24937 m!18065))

(declare-fun m!20119 () Bool)

(assert (=> b!24937 m!20119))

(declare-fun m!20121 () Bool)

(assert (=> bm!2205 m!20121))

(assert (=> b!24940 m!18065))

(assert (=> b!24940 m!18065))

(assert (=> b!24940 m!18067))

(assert (=> b!23547 d!4739))

(declare-fun d!4741 () Bool)

(declare-fun e!16116 () Bool)

(assert (=> d!4741 e!16116))

(declare-fun c!3419 () Bool)

(assert (=> d!4741 (= c!3419 (and (not (= (_1!495 lt!8244) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (_1!495 lt!8244) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4741 true))

(declare-fun _$15!77 () Unit!522)

(assert (=> d!4741 (= (choose!210 lt!8235 (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (computeNewMask!32 thiss!938 (mask!4729 (v!1602 (underlying!115 thiss!938))) (_vacant!149 (v!1602 (underlying!115 thiss!938))) (_size!149 (v!1602 (underlying!115 thiss!938)))) lt!8232 (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!140 (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (_1!495 lt!8244) (defaultEntry!1742 (v!1602 (underlying!115 thiss!938)))) _$15!77)))

(declare-fun b!24945 () Bool)

(assert (=> b!24945 (= e!16116 (arrayContainsKey!0 lt!8235 (_1!495 lt!8244) #b00000000000000000000000000000000))))

(declare-fun b!24946 () Bool)

(assert (=> b!24946 (= e!16116 (ite (= (_1!495 lt!8244) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand lt!8232 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8232 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!4741 c!3419) b!24945))

(assert (= (and d!4741 (not c!3419)) b!24946))

(assert (=> b!24945 m!16764))

(assert (=> d!4059 d!4741))

(assert (=> d!4059 d!4015))

(declare-fun b!24947 () Bool)

(declare-fun e!16117 () Bool)

(assert (=> b!24947 (= e!16117 tp_is_empty!1021)))

(declare-fun mapIsEmpty!1033 () Bool)

(declare-fun mapRes!1033 () Bool)

(assert (=> mapIsEmpty!1033 mapRes!1033))

(declare-fun mapNonEmpty!1033 () Bool)

(declare-fun tp!3535 () Bool)

(assert (=> mapNonEmpty!1033 (= mapRes!1033 (and tp!3535 e!16117))))

(declare-fun mapKey!1033 () (_ BitVec 32))

(declare-fun mapRest!1033 () (Array (_ BitVec 32) ValueCell!311))

(declare-fun mapValue!1033 () ValueCell!311)

(assert (=> mapNonEmpty!1033 (= mapRest!1032 (store mapRest!1033 mapKey!1033 mapValue!1033))))

(declare-fun b!24948 () Bool)

(declare-fun e!16118 () Bool)

(assert (=> b!24948 (= e!16118 tp_is_empty!1021)))

(declare-fun condMapEmpty!1033 () Bool)

(declare-fun mapDefault!1033 () ValueCell!311)

(assert (=> mapNonEmpty!1032 (= condMapEmpty!1033 (= mapRest!1032 ((as const (Array (_ BitVec 32) ValueCell!311)) mapDefault!1033)))))

(assert (=> mapNonEmpty!1032 (= tp!3534 (and e!16118 mapRes!1033))))

(assert (= (and mapNonEmpty!1032 condMapEmpty!1033) mapIsEmpty!1033))

(assert (= (and mapNonEmpty!1032 (not condMapEmpty!1033)) mapNonEmpty!1033))

(assert (= (and mapNonEmpty!1033 ((_ is ValueCellFull!311) mapValue!1033)) b!24947))

(assert (= (and mapNonEmpty!1032 ((_ is ValueCellFull!311) mapDefault!1033)) b!24948))

(declare-fun m!20123 () Bool)

(assert (=> mapNonEmpty!1033 m!20123))

(declare-fun b_lambda!1635 () Bool)

(assert (= b_lambda!1573 (or (and b!23087 b_free!757 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142)))) b_lambda!1635)))

(declare-fun b_lambda!1637 () Bool)

(assert (= b_lambda!1581 (or (and b!23087 b_free!757 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8141))) b_lambda!1637)))

(declare-fun b_lambda!1639 () Bool)

(assert (= b_lambda!1577 (or (and b!23087 b_free!757 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142)))) b_lambda!1639)))

(declare-fun b_lambda!1641 () Bool)

(assert (= b_lambda!1575 (or (and b!23087 b_free!757 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8141))) b_lambda!1641)))

(declare-fun b_lambda!1643 () Bool)

(assert (= b_lambda!1571 (or (and b!23087 b_free!757 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8141))) b_lambda!1643)))

(declare-fun b_lambda!1645 () Bool)

(assert (= b_lambda!1579 (or (and b!23087 b_free!757 (= (defaultEntry!1742 (v!1602 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!490 lt!8142)))) b_lambda!1645)))

(check-sat (not b!24560) (not b!24501) (not b!23864) (not d!4411) (not d!4251) (not d!4737) (not d!4283) (not bm!2125) (not d!4409) (not d!4135) (not b_lambda!1643) (not b!24226) (not d!4147) (not bm!2185) (not bm!2196) (not b!23869) (not d!4491) (not b_lambda!1599) (not b!24305) (not b!24205) (not b!24934) tp_is_empty!1021 (not d!4291) (not bm!2205) (not b!24875) (not b!24372) (not d!4307) (not b!24481) (not b!24565) (not b!24398) (not b!24432) (not b!24214) (not bm!2189) (not b!24355) (not b!24884) (not b!24695) (not b!24739) (not b!24183) (not d!4589) (not d!4473) (not b!23909) (not b!24052) (not bm!2102) (not b!24029) (not bm!2160) (not b!24347) (not b_lambda!1645) (not d!4117) (not b!23858) (not b!24480) (not d!4119) (not b!24034) (not b!24904) (not b!24837) (not d!4661) (not bm!2106) (not bm!2091) (not b!24367) (not bm!2069) (not b!24489) (not b!24376) (not d!4481) (not b!24128) (not b!24815) (not b!24384) (not b!24297) (not b!23887) (not b!24219) (not bm!2083) (not b!24781) (not bm!2135) (not d!4371) (not b!24417) (not b_next!757) (not b!24777) (not b!24258) (not d!4223) (not b!24216) (not d!4727) (not b!24342) (not b!24813) (not b!24264) (not bm!2150) (not b!24779) (not bm!2101) (not b!24273) (not b!24256) (not b!24747) (not d!4647) (not b!24069) (not bm!2145) (not d!4595) (not b_lambda!1625) (not b!24211) (not b!24351) (not b!24485) (not b!24673) (not d!4415) (not b_lambda!1629) (not bm!2133) (not b!24894) (not d!4551) (not b!24396) (not b!24570) (not d!4293) (not bm!2199) (not b!24234) (not b!24397) (not b!24529) (not b_lambda!1611) (not d!4357) (not d!4669) (not b_lambda!1591) (not b!24945) (not b!24129) (not d!4497) (not d!4157) (not d!4417) (not d!4525) (not b!24187) (not bm!2046) (not b!24616) (not b!24166) (not b!24906) (not d!4469) (not d!4605) (not b!23945) (not b!24124) (not b!24614) (not d!4363) (not b!24829) (not bm!2184) (not bm!2098) (not b!24155) (not b!24502) (not b!24041) (not d!4721) (not b_lambda!1637) (not b!23946) (not b!24937) (not b!24152) (not b!24659) (not bm!2127) (not b!24687) (not b!24232) (not d!4583) (not b!24302) (not d!4509) (not d!4297) (not b!24718) (not b!23829) (not b!24825) (not d!4731) (not bm!2173) (not b!24163) (not b!24118) (not b!24184) (not b!24201) (not b!24833) (not d!4633) (not d!4219) (not b!24763) (not d!4295) (not b!24864) (not b!24799) (not b!24130) (not d!4449) (not d!4467) (not bm!2144) (not b!24807) (not b!23828) (not d!4545) (not b!24470) (not d!4109) (not b!24407) (not b!23839) (not b!24804) (not b!24393) (not d!4151) (not b!24457) (not d!4651) (not d!4715) (not d!4393) (not b!24088) (not d!4245) (not b!24195) (not b!24620) (not b!24737) (not bm!2093) (not b!24856) (not b!24173) (not b!24680) (not b!24344) (not b!24046) (not b!24725) (not d!4115) (not b!24755) (not b!24449) (not bm!2137) (not d!4331) (not bm!2197) (not d!4719) (not b!24892) (not b_lambda!1613) (not b!24668) (not b!24882) (not b!24243) (not b!24164) (not b!23831) (not b!24782) (not d!4261) (not b!24721) (not bm!2136) (not d!4507) (not b!24752) (not b!23963) (not b!24584) (not bm!2070) (not b_lambda!1621) (not b!24196) (not d!4443) (not bm!2195) (not bm!2202) (not b!24423) (not b!24431) (not bm!2059) (not d!4281) (not b!24200) (not d!4373) (not d!4311) (not b!23895) (not b_lambda!1609) (not d!4735) (not d!4423) (not b!24368) (not b!24583) (not b!23925) (not bm!2094) (not b!24162) (not d!4455) (not b!24405) (not b!24873) (not d!4707) (not b!24808) (not b!24113) (not b!24255) (not d!4435) (not b!24602) (not d!4505) (not b!24076) (not b!24862) (not bm!2198) (not d!4681) b_and!1545 (not d!4399) (not b!24573) (not d!4207) (not b!24656) (not b!23939) (not b!23844) (not d!4285) (not d!4353) (not b!24547) (not b!23921) (not d!4359) (not d!4531) (not b!24063) (not b!24301) (not d!4559) (not d!4591) (not b!24770) (not b_lambda!1619) (not d!4407) (not b!24838) (not b!24877) (not d!4649) (not b!24017) (not bm!2200) (not b!24732) (not b!24172) (not d!4333) (not b!24758) (not d!4569) (not bm!2072) (not d!4103) (not d!4133) (not b!24788) (not d!4227) (not d!4603) (not d!4259) (not b!24651) (not d!4367) (not b!24926) (not bm!2055) (not bm!2134) (not b!24846) (not b!24766) (not b!24188) (not b!24429) (not d!4263) (not d!4575) (not b!23942) (not b!24532) (not d!4433) (not b!24684) (not d!4105) (not b!24916) (not bm!2078) (not d!4627) (not b!24727) (not b!24902) (not b!24703) (not d!4501) (not b_lambda!1587) (not b!24228) (not d!4477) (not b!24021) (not b!24309) (not b!24897) (not d!4527) (not d!4419) (not b!24427) (not d!4253) (not b!23825) (not d!4235) (not d!4539) (not d!4231) (not b_lambda!1595) (not b_lambda!1567) (not b!24908) (not d!4217) (not d!4335) (not b!24592) (not b!24814) (not b!24787) (not b!24685) (not d!4271) (not bm!2164) (not b!24575) (not b!24907) (not b_lambda!1601) (not b!24744) (not b!24707) (not b!24568) (not b!24640) (not b!24409) (not b!24419) (not bm!2109) (not b!24307) (not b!24874) (not d!4339) (not b!24406) (not b!24921) (not d!4177) (not b!24932) (not b!23908) (not b!24642) (not bm!2171) (not b!24192) (not b!24051) (not d!4319) (not bm!2108) (not b!24845) (not b!24749) (not d!4401) (not b!24828) (not bm!2045) (not b!24619) (not bm!2063) (not b!23899) (not d!4385) (not bm!2068) (not b!24174) (not b!24240) (not b!24623) (not b!24734) (not d!4701) (not b!24785) (not b!24190) (not d!4287) (not bm!2049) (not d!4269) (not b!23951) (not b!24780) (not bm!2182) (not b!23902) (not d!4123) (not bm!2161) (not b!24712) (not d!4451) (not mapNonEmpty!1033) (not b!23930) (not d!4265) (not bm!2071) (not b!24484) (not bm!2168) (not d!4517) (not d!4673) (not b!24802) (not b!24545) (not b!24621) (not d!4347) (not d!4395) (not bm!2090) (not d!4121) (not d!4555) (not b!24352) (not d!4675) (not d!4381) (not b!24729) (not b!24140) (not d!4679) (not d!4511) (not d!4249) (not b!24412) (not b!24434) (not b!24062) (not b!24562) (not bm!2079) (not bm!2159) (not bm!2123) (not b!24456) (not b!24849) (not d!4345) (not b!24886) (not b!24742) (not d!4573) (not b!23955) (not b!24710) (not b!24696) (not b!24852) (not b!24844) (not d!4461) (not b!24003) (not b!24936) (not d!4425) (not b!24391) (not b!23846) (not b!23997) (not bm!2130) (not b!24663) (not b!24909) (not bm!2088) (not b!24719) (not d!4655) (not b!24019) (not bm!2053) (not d!4441) (not b!24549) (not b!24816) (not b_lambda!1589) (not bm!2086) (not b_lambda!1627) (not d!4729) (not b!24312) (not d!4635) (not bm!2126) (not d!4341) (not d!4309) (not d!4173) (not b!24708) (not b!24266) (not d!4521) (not b!24622) (not b_lambda!1597) (not b!24126) (not b!24290) (not d!4377) (not b!24792) (not b!24123) (not d!4303) (not d!4225) (not d!4703) (not b!24016) (not d!4255) (not b!24042) (not d!4351) (not b!24933) (not b!24834) (not d!4429) (not b!24147) (not d!4445) (not b_lambda!1639) (not b!24288) (not b!24469) (not bm!2052) (not b!24401) (not b!24474) (not d!4213) (not d!4513) (not b!24876) (not b!24589) (not b!23879) (not b!24408) (not b!24831) (not d!4613) (not b!24363) (not b!24426) (not b!24595) (not b_lambda!1593) (not b!23856) (not d!4549) (not b!24672) (not bm!2117) (not b_lambda!1585) (not b!24066) (not bm!2167) (not b!24648) (not b!24209) (not b_lambda!1607) (not d!4671) (not d!4161) (not d!4365) (not b!23876) (not b!23848) (not d!4155) (not b!24420) (not d!4315) (not b!24237) (not d!4375) (not bm!2201) (not d!4153) (not b!24121) (not b!24404) (not b!24414) (not b!24482) (not b!24157) (not b!24318) (not b!24178) (not bm!2158) (not b!24546) (not d!4129) (not d!4577) (not b!24248) (not d!4301) (not d!4305) (not b!24030) (not b!24870) (not b!24298) (not b!24180) (not bm!2077) (not d!4211) (not b!24115) (not b!24500) (not b!24576) (not b!24551) (not bm!2204) (not d!4695) (not b!24928) (not d!4563) (not d!4329) (not b!24606) (not b!23949) (not b!24800) (not d!4495) (not b!24600) (not bm!2146) (not d!4601) (not b!23904) (not bm!2056) (not b!24548) (not d!4387) (not d!4313) (not d!4515) (not b!24285) (not b!24225) (not d!4257) (not bm!2192) (not b!24165) (not b!23974) (not d!4611) (not b!24476) (not b!24724) (not b!24006) (not b!24778) (not d!4543) (not bm!2054) (not b!24176) (not b!24637) (not b!24171) (not bm!2147) (not b!23913) (not d!4185) (not b!24625) (not d!4197) (not d!4653) (not d!4159) (not b!24215) (not b!24044) (not d!4667) (not b!24467) (not b_lambda!1623) (not bm!2082) (not b!24769) (not b!24461) (not b_lambda!1631) (not bm!2175) (not b!24079) (not b!24754) (not b!24267) (not b_lambda!1617) (not d!4243) (not b!24304) (not b!24377) (not d!4403) (not b!24149) (not d!4641) (not b!24940) (not b!24540) (not b!24075) (not b_lambda!1605) (not b!24286) (not d!4267) (not d!4607) (not b!24454) (not b!24199) (not bm!2062) (not b!24269) (not b!24542) (not d!4483) (not b!24274) (not d!4587) (not d!4529) (not d!4617) (not b!24880) (not d!4277) (not bm!2089) (not bm!2095) (not b!24281) (not b!24004) (not b!24883) (not bm!2183) (not b!23861) (not bm!2103) (not b!24132) (not b!23843) (not d!4499) (not b!24597) (not d!4241) (not d!4621) (not b!24059) (not d!4229) (not b!23916) (not b!24137) (not b!24851) (not b_lambda!1569) (not b_lambda!1633) (not b!24608) (not b!24072) (not b!24120) (not bm!2174) (not b!24735) (not b!24554) (not b!24899) (not bm!2156) (not b!24078) (not d!4663) (not b!24869) (not b!24630) (not bm!2120) (not d!4349) (not b!24207) (not b!24177) (not d!4665) (not d!4693) (not b!24460) (not b_lambda!1603) (not b!24626) (not b!24692) (not b!23888) (not d!4195) (not b!24479) (not b!24664) (not b!24026) (not b_lambda!1615) (not b!24535) (not d!4169) (not d!4457) (not b!24251) (not b!24772) (not b!24931) (not b!24224) (not b!23900) (not d!4533) (not b!24064) (not d!4191) (not b!24929) (not b!23940) (not b!24145) (not d!4689) (not d!4519) (not b!24027) (not b!24244) (not b!24159) (not b!23892) (not bm!2181) (not b!24053) (not d!4659) (not b!23957) (not b!24611) (not b!24389) (not d!4561) (not b!24381) (not b!24795) (not b!24263) (not b!24700) (not d!4705) (not b!24154) (not b!24293) (not b!24353) (not d!4677) (not b!24435) (not d!4657) (not d!4247) (not b!24472) (not bm!2132) (not b!24319) (not b!24077) (not b!24049) (not d!4593) (not bm!2166) (not b!24056) (not b!23883) (not d!4209) (not b!24475) (not b!24923) (not b!24890) (not b!24160) (not d!4199) (not b!24578) (not b_lambda!1583) (not b!24356) (not d!4687) (not d!4697) (not b!24647) (not bm!2100) (not d!4571) (not b!24853) (not b!24218) (not b!24881) (not b!24652) (not d!4193) (not d!4581) (not b!24403) (not b!24360) (not b!24208) (not b!24638) (not d!4141) (not bm!2051) (not b!24203) (not bm!2110) (not b!24198) (not b!24666) (not d!4137) (not b!24715) (not bm!2066) (not b!24912) (not b!23920) (not b!24848) (not b!24603) (not b!23832) (not b!24037) (not d!4369) (not bm!2092) (not d!4299) (not b!24370) (not b!24193) (not b!24074) (not b!24416) (not b!24217) (not bm!2194) (not b!24887) (not b!24617) (not b!24855) (not b!24424) (not d!4439) (not b!23878) (not d!4437) (not bm!2142) (not b!24760) (not bm!2188) (not b!24722) (not b!24841) (not d!4289) (not bm!2178) (not d!4421) (not b!24730) (not b!24527) (not b!24071) (not b!24133) (not d!4095) (not b!23954) (not b!24677) (not d!4599) (not bm!2061) (not b!24087) (not b!24388) (not d!4389) (not b!24299) (not d!4427) (not b!24185) (not b!23881) (not b!23923) (not bm!2203) (not b!24776) (not d!4465) (not b!24587) (not d!4107) (not bm!2180) (not d!4567) (not b_lambda!1635) (not d!4383) (not b!24210) (not b!24740) (not b!24872) (not d!4537) (not b!24116) (not bm!2143) (not d!4233) (not d!4201) (not b!24633) (not d!4623) (not b!23863) (not b!24278) (not bm!2075) (not b!24080) (not b!24914) (not b!23836) (not d!4713) (not b!24024) (not b!24860) (not b!24465) (not b!24169) (not d!4541) (not d!4093) (not b!24543) (not d!4179) (not b!24144) (not d!4585) (not b!24775) (not b!24865) (not b!24858) (not b!23871) (not b!24811) (not b!23868) (not d!4205) (not d!4279) (not b!24867) (not b!24239) (not b!24260) (not d!4203) (not d!4625) (not d!4221) (not b!24464) (not b!24733) (not b!24689) (not d!4131) (not d!4431) (not b!24411) (not b!24581) (not b!24023) (not d!4215) (not b_lambda!1641) (not bm!2153) (not b!24645) (not d!4579) (not b!24296))
(check-sat b_and!1545 (not b_next!757))
