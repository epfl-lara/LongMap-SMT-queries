; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!3482 () Bool)

(assert start!3482)

(declare-fun b!23067 () Bool)

(declare-fun b_free!757 () Bool)

(declare-fun b_next!757 () Bool)

(assert (=> b!23067 (= b_free!757 (not b_next!757))))

(declare-fun tp!3517 () Bool)

(declare-fun b_and!1473 () Bool)

(assert (=> b!23067 (= tp!3517 b_and!1473)))

(declare-fun b!23053 () Bool)

(declare-fun e!14977 () Bool)

(declare-datatypes ((V!1187 0))(
  ( (V!1188 (val!537 Int)) )
))
(declare-datatypes ((ValueCell!311 0))(
  ( (ValueCellFull!311 (v!1600 V!1187)) (EmptyCell!311) )
))
(declare-datatypes ((array!1261 0))(
  ( (array!1262 (arr!596 (Array (_ BitVec 32) ValueCell!311)) (size!692 (_ BitVec 32))) )
))
(declare-datatypes ((array!1263 0))(
  ( (array!1264 (arr!597 (Array (_ BitVec 32) (_ BitVec 64))) (size!693 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!208 0))(
  ( (LongMapFixedSize!209 (defaultEntry!1742 Int) (mask!4729 (_ BitVec 32)) (extraKeys!1640 (_ BitVec 32)) (zeroValue!1665 V!1187) (minValue!1665 V!1187) (_size!149 (_ BitVec 32)) (_keys!3163 array!1263) (_values!1728 array!1261) (_vacant!149 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!208 0))(
  ( (Cell!209 (v!1601 LongMapFixedSize!208)) )
))
(declare-datatypes ((LongMap!208 0))(
  ( (LongMap!209 (underlying!115 Cell!208)) )
))
(declare-fun thiss!938 () LongMap!208)

(assert (=> b!23053 (= e!14977 (not (= (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) (bvadd #b00000000000000000000000000000001 (mask!4729 (v!1601 (underlying!115 thiss!938)))))))))

(declare-datatypes ((tuple2!958 0))(
  ( (tuple2!959 (_1!487 Bool) (_2!487 LongMapFixedSize!208)) )
))
(declare-fun call!1850 () tuple2!958)

(declare-fun c!2921 () Bool)

(declare-fun bm!1846 () Bool)

(declare-fun lt!8141 () LongMapFixedSize!208)

(declare-fun c!2920 () Bool)

(declare-fun update!38 (LongMapFixedSize!208 (_ BitVec 64) V!1187) tuple2!958)

(assert (=> bm!1846 (= call!1850 (update!38 lt!8141 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun b!23054 () Bool)

(declare-fun lt!8140 () tuple2!958)

(declare-fun call!1849 () tuple2!958)

(assert (=> b!23054 (= lt!8140 call!1849)))

(declare-datatypes ((tuple2!960 0))(
  ( (tuple2!961 (_1!488 Bool) (_2!488 Cell!208)) )
))
(declare-fun e!14984 () tuple2!960)

(assert (=> b!23054 (= e!14984 (tuple2!961 (_1!487 lt!8140) (Cell!209 (_2!487 lt!8140))))))

(declare-fun b!23055 () Bool)

(declare-fun e!14980 () tuple2!960)

(declare-fun lt!8138 () tuple2!958)

(declare-fun lt!8139 () tuple2!958)

(assert (=> b!23055 (= e!14980 (tuple2!961 (and (_1!487 lt!8138) (_1!487 lt!8139)) (Cell!209 (_2!487 lt!8139))))))

(assert (=> b!23055 (= lt!8138 call!1850)))

(assert (=> b!23055 (= lt!8139 (update!38 (_2!487 lt!8138) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun b!23056 () Bool)

(declare-fun e!14975 () Bool)

(declare-fun tp_is_empty!1021 () Bool)

(assert (=> b!23056 (= e!14975 tp_is_empty!1021)))

(declare-fun b!23057 () Bool)

(declare-fun e!14978 () tuple2!960)

(assert (=> b!23057 (= e!14978 (tuple2!961 true (Cell!209 lt!8141)))))

(declare-fun mapIsEmpty!1022 () Bool)

(declare-fun mapRes!1022 () Bool)

(assert (=> mapIsEmpty!1022 mapRes!1022))

(declare-fun res!14292 () Bool)

(declare-fun e!14976 () Bool)

(assert (=> start!3482 (=> (not res!14292) (not e!14976))))

(declare-fun valid!114 (LongMap!208) Bool)

(assert (=> start!3482 (= res!14292 (valid!114 thiss!938))))

(assert (=> start!3482 e!14976))

(declare-fun e!14982 () Bool)

(assert (=> start!3482 e!14982))

(declare-fun b!23058 () Bool)

(declare-fun e!14979 () Bool)

(assert (=> b!23058 (= e!14979 tp_is_empty!1021)))

(declare-fun bm!1847 () Bool)

(assert (=> bm!1847 (= call!1849 call!1850)))

(declare-fun b!23059 () Bool)

(declare-fun e!14983 () Bool)

(declare-fun e!14974 () Bool)

(assert (=> b!23059 (= e!14983 e!14974)))

(declare-fun b!23060 () Bool)

(assert (=> b!23060 (= e!14982 e!14983)))

(declare-fun b!23061 () Bool)

(assert (=> b!23061 (= e!14976 e!14977)))

(declare-fun res!14291 () Bool)

(assert (=> b!23061 (=> (not res!14291) (not e!14977))))

(assert (=> b!23061 (= res!14291 (_1!488 e!14980))))

(declare-fun lt!8136 () Bool)

(assert (=> b!23061 (= c!2921 (and (not lt!8136) (not (= (bvand (extraKeys!1640 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> b!23061 (= lt!8136 (= (bvand (extraKeys!1640 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000001) #b00000000000000000000000000000000))))

(declare-fun getNewLongMapFixedSize!33 ((_ BitVec 32) Int) LongMapFixedSize!208)

(declare-fun computeNewMask!30 (LongMap!208 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!23061 (= lt!8141 (getNewLongMapFixedSize!33 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun b!23062 () Bool)

(declare-fun e!14981 () Bool)

(assert (=> b!23062 (= e!14981 (and e!14975 mapRes!1022))))

(declare-fun condMapEmpty!1022 () Bool)

(declare-fun mapDefault!1022 () ValueCell!311)

(assert (=> b!23062 (= condMapEmpty!1022 (= (arr!596 (_values!1728 (v!1601 (underlying!115 thiss!938)))) ((as const (Array (_ BitVec 32) ValueCell!311)) mapDefault!1022)))))

(declare-fun b!23063 () Bool)

(declare-fun res!14290 () Bool)

(assert (=> b!23063 (=> (not res!14290) (not e!14977))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!23063 (= res!14290 (validMask!0 (mask!4729 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun b!23064 () Bool)

(assert (=> b!23064 (= e!14980 e!14984)))

(assert (=> b!23064 (= c!2920 (and (not lt!8136) (= (bvand (extraKeys!1640 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun mapNonEmpty!1022 () Bool)

(declare-fun tp!3518 () Bool)

(assert (=> mapNonEmpty!1022 (= mapRes!1022 (and tp!3518 e!14979))))

(declare-fun mapValue!1022 () ValueCell!311)

(declare-fun mapRest!1022 () (Array (_ BitVec 32) ValueCell!311))

(declare-fun mapKey!1022 () (_ BitVec 32))

(assert (=> mapNonEmpty!1022 (= (arr!596 (_values!1728 (v!1601 (underlying!115 thiss!938)))) (store mapRest!1022 mapKey!1022 mapValue!1022))))

(declare-fun b!23065 () Bool)

(declare-fun lt!8137 () tuple2!958)

(assert (=> b!23065 (= e!14978 (tuple2!961 (_1!487 lt!8137) (Cell!209 (_2!487 lt!8137))))))

(assert (=> b!23065 (= lt!8137 call!1849)))

(declare-fun b!23066 () Bool)

(declare-fun c!2922 () Bool)

(assert (=> b!23066 (= c!2922 (and (not (= (bvand (extraKeys!1640 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) lt!8136))))

(assert (=> b!23066 (= e!14984 e!14978)))

(declare-fun array_inv!419 (array!1263) Bool)

(declare-fun array_inv!420 (array!1261) Bool)

(assert (=> b!23067 (= e!14974 (and tp!3517 tp_is_empty!1021 (array_inv!419 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) (array_inv!420 (_values!1728 (v!1601 (underlying!115 thiss!938)))) e!14981))))

(assert (= (and start!3482 res!14292) b!23061))

(assert (= (and b!23061 c!2921) b!23055))

(assert (= (and b!23061 (not c!2921)) b!23064))

(assert (= (and b!23064 c!2920) b!23054))

(assert (= (and b!23064 (not c!2920)) b!23066))

(assert (= (and b!23066 c!2922) b!23065))

(assert (= (and b!23066 (not c!2922)) b!23057))

(assert (= (or b!23054 b!23065) bm!1847))

(assert (= (or b!23055 bm!1847) bm!1846))

(assert (= (and b!23061 res!14291) b!23063))

(assert (= (and b!23063 res!14290) b!23053))

(assert (= (and b!23062 condMapEmpty!1022) mapIsEmpty!1022))

(assert (= (and b!23062 (not condMapEmpty!1022)) mapNonEmpty!1022))

(get-info :version)

(assert (= (and mapNonEmpty!1022 ((_ is ValueCellFull!311) mapValue!1022)) b!23058))

(assert (= (and b!23062 ((_ is ValueCellFull!311) mapDefault!1022)) b!23056))

(assert (= b!23067 b!23062))

(assert (= b!23059 b!23067))

(assert (= b!23060 b!23059))

(assert (= start!3482 b!23060))

(declare-fun m!16662 () Bool)

(assert (=> b!23061 m!16662))

(assert (=> b!23061 m!16662))

(declare-fun m!16664 () Bool)

(assert (=> b!23061 m!16664))

(declare-fun m!16666 () Bool)

(assert (=> start!3482 m!16666))

(declare-fun m!16668 () Bool)

(assert (=> bm!1846 m!16668))

(declare-fun m!16670 () Bool)

(assert (=> mapNonEmpty!1022 m!16670))

(declare-fun m!16672 () Bool)

(assert (=> b!23067 m!16672))

(declare-fun m!16674 () Bool)

(assert (=> b!23067 m!16674))

(declare-fun m!16676 () Bool)

(assert (=> b!23055 m!16676))

(declare-fun m!16678 () Bool)

(assert (=> b!23063 m!16678))

(check-sat tp_is_empty!1021 (not b!23055) (not b_next!757) (not b!23061) (not bm!1846) (not b!23063) (not b!23067) (not mapNonEmpty!1022) (not start!3482) b_and!1473)
(check-sat b_and!1473 (not b_next!757))
(get-model)

(declare-fun b!23238 () Bool)

(declare-datatypes ((SeekEntryResult!55 0))(
  ( (MissingZero!55 (index!2341 (_ BitVec 32))) (Found!55 (index!2342 (_ BitVec 32))) (Intermediate!55 (undefined!867 Bool) (index!2343 (_ BitVec 32)) (x!5577 (_ BitVec 32))) (Undefined!55) (MissingVacant!55 (index!2344 (_ BitVec 32))) )
))
(declare-fun lt!8252 () SeekEntryResult!55)

(declare-fun e!15100 () Bool)

(assert (=> b!23238 (= e!15100 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8252)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23239 () Bool)

(declare-fun res!14352 () Bool)

(declare-fun lt!8257 () SeekEntryResult!55)

(assert (=> b!23239 (= res!14352 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2344 lt!8257)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15115 () Bool)

(assert (=> b!23239 (=> (not res!14352) (not e!15115))))

(declare-fun call!1930 () SeekEntryResult!55)

(declare-fun bm!1908 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!1263 (_ BitVec 32)) SeekEntryResult!55)

(assert (=> bm!1908 (= call!1930 (seekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!23241 () Bool)

(declare-fun e!15109 () tuple2!958)

(declare-fun e!15099 () tuple2!958)

(assert (=> b!23241 (= e!15109 e!15099)))

(declare-fun lt!8240 () SeekEntryResult!55)

(assert (=> b!23241 (= lt!8240 (seekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun c!2973 () Bool)

(assert (=> b!23241 (= c!2973 ((_ is Undefined!55) lt!8240))))

(declare-fun bm!1909 () Bool)

(declare-fun call!1925 () Bool)

(declare-fun arrayContainsKey!0 (array!1263 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> bm!1909 (= call!1925 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun b!23242 () Bool)

(declare-fun res!14340 () Bool)

(declare-fun lt!8239 () SeekEntryResult!55)

(assert (=> b!23242 (= res!14340 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2344 lt!8239)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15113 () Bool)

(assert (=> b!23242 (=> (not res!14340) (not e!15113))))

(declare-fun bm!1910 () Bool)

(declare-fun call!1927 () Bool)

(assert (=> bm!1910 (= call!1927 call!1925)))

(declare-fun e!15112 () Bool)

(declare-fun lt!8248 () SeekEntryResult!55)

(declare-fun b!23243 () Bool)

(assert (=> b!23243 (= e!15112 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8248)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23244 () Bool)

(declare-fun e!15119 () tuple2!958)

(declare-fun e!15105 () tuple2!958)

(assert (=> b!23244 (= e!15119 e!15105)))

(declare-fun c!2974 () Bool)

(assert (=> b!23244 (= c!2974 ((_ is MissingZero!55) lt!8240))))

(declare-fun call!1914 () Bool)

(declare-fun c!2979 () Bool)

(declare-fun c!2972 () Bool)

(declare-fun bm!1911 () Bool)

(declare-fun c!2970 () Bool)

(declare-fun c!2975 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!1911 (= call!1914 (inRange!0 (ite c!2973 (ite c!2979 (index!2342 lt!8248) (ite c!2972 (index!2341 lt!8257) (index!2344 lt!8257))) (ite c!2970 (index!2342 lt!8252) (ite c!2975 (index!2341 lt!8239) (index!2344 lt!8239)))) (mask!4729 lt!8141)))))

(declare-fun bm!1912 () Bool)

(declare-fun call!1924 () Bool)

(declare-fun call!1917 () Bool)

(assert (=> bm!1912 (= call!1924 call!1917)))

(declare-fun b!23245 () Bool)

(declare-fun e!15102 () Bool)

(declare-fun e!15114 () Bool)

(assert (=> b!23245 (= e!15102 e!15114)))

(declare-fun res!14341 () Bool)

(declare-datatypes ((tuple2!970 0))(
  ( (tuple2!971 (_1!493 (_ BitVec 64)) (_2!493 V!1187)) )
))
(declare-datatypes ((List!565 0))(
  ( (Nil!562) (Cons!561 (h!1127 tuple2!970) (t!3229 List!565)) )
))
(declare-datatypes ((ListLongMap!565 0))(
  ( (ListLongMap!566 (toList!298 List!565)) )
))
(declare-fun call!1934 () ListLongMap!565)

(declare-fun contains!230 (ListLongMap!565 (_ BitVec 64)) Bool)

(assert (=> b!23245 (= res!14341 (contains!230 call!1934 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23245 (=> (not res!14341) (not e!15114))))

(declare-fun b!23246 () Bool)

(declare-fun lt!8241 () tuple2!958)

(assert (=> b!23246 (= e!15119 (tuple2!959 (_1!487 lt!8241) (_2!487 lt!8241)))))

(declare-fun call!1912 () tuple2!958)

(assert (=> b!23246 (= lt!8241 call!1912)))

(declare-fun bm!1913 () Bool)

(declare-fun call!1932 () Bool)

(assert (=> bm!1913 (= call!1932 call!1925)))

(declare-fun b!23247 () Bool)

(declare-fun e!15108 () ListLongMap!565)

(declare-fun call!1929 () ListLongMap!565)

(assert (=> b!23247 (= e!15108 call!1929)))

(declare-fun bm!1914 () Bool)

(declare-fun call!1916 () Bool)

(assert (=> bm!1914 (= call!1916 call!1914)))

(declare-fun b!23248 () Bool)

(declare-fun lt!8232 () tuple2!958)

(assert (=> b!23248 (= lt!8232 call!1912)))

(assert (=> b!23248 (= e!15105 (tuple2!959 (_1!487 lt!8232) (_2!487 lt!8232)))))

(declare-fun b!23249 () Bool)

(declare-fun res!14351 () Bool)

(declare-fun e!15101 () Bool)

(assert (=> b!23249 (=> (not res!14351) (not e!15101))))

(assert (=> b!23249 (= res!14351 call!1924)))

(declare-fun e!15111 () Bool)

(assert (=> b!23249 (= e!15111 e!15101)))

(declare-fun b!23250 () Bool)

(declare-fun res!14343 () Bool)

(assert (=> b!23250 (=> (not res!14343) (not e!15101))))

(assert (=> b!23250 (= res!14343 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2341 lt!8239)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!1915 () Bool)

(declare-fun lt!8234 () tuple2!958)

(declare-fun map!408 (LongMapFixedSize!208) ListLongMap!565)

(assert (=> bm!1915 (= call!1934 (map!408 (_2!487 lt!8234)))))

(declare-fun b!23251 () Bool)

(declare-fun res!14344 () Bool)

(declare-fun e!15118 () Bool)

(assert (=> b!23251 (=> (not res!14344) (not e!15118))))

(declare-fun call!1928 () Bool)

(assert (=> b!23251 (= res!14344 call!1928)))

(declare-fun e!15106 () Bool)

(assert (=> b!23251 (= e!15106 e!15118)))

(declare-fun b!23252 () Bool)

(declare-datatypes ((Unit!519 0))(
  ( (Unit!520) )
))
(declare-fun e!15103 () Unit!519)

(declare-fun Unit!521 () Unit!519)

(assert (=> b!23252 (= e!15103 Unit!521)))

(declare-fun lt!8254 () Unit!519)

(declare-fun call!1919 () Unit!519)

(assert (=> b!23252 (= lt!8254 call!1919)))

(declare-fun call!1923 () SeekEntryResult!55)

(assert (=> b!23252 (= lt!8239 call!1923)))

(assert (=> b!23252 (= c!2975 ((_ is MissingZero!55) lt!8239))))

(assert (=> b!23252 e!15111))

(declare-fun lt!8245 () Unit!519)

(assert (=> b!23252 (= lt!8245 lt!8254)))

(assert (=> b!23252 false))

(declare-fun bm!1916 () Bool)

(declare-fun call!1926 () ListLongMap!565)

(declare-fun call!1922 () ListLongMap!565)

(assert (=> bm!1916 (= call!1926 call!1922)))

(declare-fun bm!1917 () Bool)

(declare-fun call!1915 () ListLongMap!565)

(declare-fun call!1911 () ListLongMap!565)

(assert (=> bm!1917 (= call!1915 call!1911)))

(declare-fun b!23253 () Bool)

(declare-fun lt!8243 () Unit!519)

(declare-fun lt!8237 () Unit!519)

(assert (=> b!23253 (= lt!8243 lt!8237)))

(declare-fun lt!8236 () array!1261)

(declare-fun getCurrentListMap!129 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) Int) ListLongMap!565)

(assert (=> b!23253 (contains!230 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) Int) Unit!519)

(assert (=> b!23253 (= lt!8237 (lemmaValidKeyInArrayIsInListMap!10 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2342 lt!8240) (defaultEntry!1742 lt!8141)))))

(assert (=> b!23253 (= lt!8236 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))))

(declare-fun lt!8253 () Unit!519)

(declare-fun lt!8249 () Unit!519)

(assert (=> b!23253 (= lt!8253 lt!8249)))

(assert (=> b!23253 (= call!1911 call!1929)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) (_ BitVec 64) V!1187 Int) Unit!519)

(assert (=> b!23253 (= lt!8249 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2342 lt!8240) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8251 () Unit!519)

(assert (=> b!23253 (= lt!8251 e!15103)))

(declare-fun call!1920 () Bool)

(assert (=> b!23253 (= c!2970 call!1920)))

(assert (=> b!23253 (= e!15105 (tuple2!959 true (LongMapFixedSize!209 (defaultEntry!1742 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (_size!149 lt!8141) (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (_vacant!149 lt!8141))))))

(declare-fun b!23254 () Bool)

(declare-fun c!2976 () Bool)

(assert (=> b!23254 (= c!2976 ((_ is MissingVacant!55) lt!8240))))

(assert (=> b!23254 (= e!15099 e!15119)))

(declare-fun bm!1918 () Bool)

(assert (=> bm!1918 (= call!1928 call!1916)))

(declare-fun bm!1919 () Bool)

(declare-fun call!1931 () Unit!519)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!519)

(assert (=> bm!1919 (= call!1931 (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(declare-fun b!23255 () Bool)

(declare-fun e!15117 () Unit!519)

(declare-fun Unit!522 () Unit!519)

(assert (=> b!23255 (= e!15117 Unit!522)))

(declare-fun lt!8242 () Unit!519)

(assert (=> b!23255 (= lt!8242 call!1931)))

(declare-fun call!1921 () SeekEntryResult!55)

(assert (=> b!23255 (= lt!8248 call!1921)))

(declare-fun res!14342 () Bool)

(assert (=> b!23255 (= res!14342 ((_ is Found!55) lt!8248))))

(assert (=> b!23255 (=> (not res!14342) (not e!15112))))

(assert (=> b!23255 e!15112))

(declare-fun lt!8246 () Unit!519)

(assert (=> b!23255 (= lt!8246 lt!8242)))

(assert (=> b!23255 false))

(declare-fun b!23256 () Bool)

(declare-fun lt!8255 () Unit!519)

(assert (=> b!23256 (= lt!8255 e!15117)))

(assert (=> b!23256 (= c!2979 call!1920)))

(assert (=> b!23256 (= e!15099 (tuple2!959 false lt!8141))))

(declare-fun bm!1920 () Bool)

(declare-fun call!1933 () ListLongMap!565)

(assert (=> bm!1920 (= call!1933 (map!408 lt!8141))))

(declare-fun b!23257 () Bool)

(declare-fun e!15110 () Bool)

(assert (=> b!23257 (= e!15110 e!15102)))

(declare-fun c!2971 () Bool)

(assert (=> b!23257 (= c!2971 (_1!487 lt!8234))))

(declare-fun lt!8258 () (_ BitVec 32))

(declare-fun c!2967 () Bool)

(declare-fun lt!8238 () (_ BitVec 32))

(declare-fun c!2968 () Bool)

(declare-fun call!1913 () ListLongMap!565)

(declare-fun bm!1921 () Bool)

(assert (=> bm!1921 (= call!1913 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23258 () Bool)

(assert (=> b!23258 (= e!15101 (not call!1927))))

(declare-fun bm!1922 () Bool)

(assert (=> bm!1922 (= call!1921 call!1930)))

(declare-fun bm!1923 () Bool)

(declare-fun +!45 (ListLongMap!565 tuple2!970) ListLongMap!565)

(assert (=> bm!1923 (= call!1911 (+!45 (ite c!2967 call!1926 call!1913) (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!23259 () Bool)

(declare-fun lt!8247 () Unit!519)

(assert (=> b!23259 (= e!15117 lt!8247)))

(assert (=> b!23259 (= lt!8247 call!1919)))

(assert (=> b!23259 (= lt!8257 call!1921)))

(assert (=> b!23259 (= c!2972 ((_ is MissingZero!55) lt!8257))))

(assert (=> b!23259 e!15106))

(declare-fun b!23260 () Bool)

(assert (=> b!23260 (= e!15115 (not call!1932))))

(declare-fun b!23261 () Bool)

(assert (=> b!23261 (= e!15108 call!1913)))

(declare-fun b!23262 () Bool)

(assert (=> b!23262 (= e!15113 (not call!1927))))

(declare-fun b!23263 () Bool)

(declare-fun res!14346 () Bool)

(assert (=> b!23263 (=> (not res!14346) (not e!15118))))

(assert (=> b!23263 (= res!14346 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2341 lt!8257)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23264 () Bool)

(declare-fun res!14348 () Bool)

(assert (=> b!23264 (= res!14348 call!1917)))

(assert (=> b!23264 (=> (not res!14348) (not e!15100))))

(declare-fun b!23265 () Bool)

(assert (=> b!23265 (= e!15102 (= call!1934 call!1933))))

(declare-fun bm!1924 () Bool)

(declare-fun updateHelperNewKey!10 (LongMapFixedSize!208 (_ BitVec 64) V!1187 (_ BitVec 32)) tuple2!958)

(assert (=> bm!1924 (= call!1912 (updateHelperNewKey!10 lt!8141 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))))))

(declare-fun b!23266 () Bool)

(declare-fun e!15107 () Bool)

(assert (=> b!23266 (= e!15107 ((_ is Undefined!55) lt!8257))))

(declare-fun bm!1925 () Bool)

(assert (=> bm!1925 (= call!1923 call!1930)))

(declare-fun b!23267 () Bool)

(declare-fun c!2969 () Bool)

(assert (=> b!23267 (= c!2969 ((_ is MissingVacant!55) lt!8239))))

(declare-fun e!15116 () Bool)

(assert (=> b!23267 (= e!15111 e!15116)))

(declare-fun b!23268 () Bool)

(assert (=> b!23268 (= e!15116 e!15113)))

(declare-fun res!14345 () Bool)

(assert (=> b!23268 (= res!14345 call!1924)))

(assert (=> b!23268 (=> (not res!14345) (not e!15113))))

(declare-fun b!23269 () Bool)

(declare-fun lt!8256 () Unit!519)

(assert (=> b!23269 (= e!15103 lt!8256)))

(assert (=> b!23269 (= lt!8256 call!1931)))

(assert (=> b!23269 (= lt!8252 call!1923)))

(declare-fun res!14349 () Bool)

(assert (=> b!23269 (= res!14349 ((_ is Found!55) lt!8252))))

(assert (=> b!23269 (=> (not res!14349) (not e!15100))))

(assert (=> b!23269 e!15100))

(declare-fun bm!1926 () Bool)

(declare-fun c!2978 () Bool)

(assert (=> bm!1926 (= c!2978 c!2973)))

(assert (=> bm!1926 (= call!1920 (contains!230 e!15108 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23270 () Bool)

(assert (=> b!23270 (= e!15116 ((_ is Undefined!55) lt!8239))))

(declare-fun bm!1927 () Bool)

(assert (=> bm!1927 (= call!1922 (getCurrentListMap!129 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun bm!1928 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!519)

(assert (=> bm!1928 (= call!1919 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(declare-fun b!23271 () Bool)

(assert (=> b!23271 (= e!15118 (not call!1932))))

(declare-fun d!3947 () Bool)

(assert (=> d!3947 e!15110))

(declare-fun res!14339 () Bool)

(assert (=> d!3947 (=> (not res!14339) (not e!15110))))

(declare-fun valid!116 (LongMapFixedSize!208) Bool)

(assert (=> d!3947 (= res!14339 (valid!116 (_2!487 lt!8234)))))

(assert (=> d!3947 (= lt!8234 e!15109)))

(assert (=> d!3947 (= c!2967 (= (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvneg (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!3947 (valid!116 lt!8141)))

(assert (=> d!3947 (= (update!38 lt!8141 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!8234)))

(declare-fun b!23240 () Bool)

(declare-fun res!14347 () Bool)

(assert (=> b!23240 (= res!14347 call!1916)))

(assert (=> b!23240 (=> (not res!14347) (not e!15112))))

(declare-fun bm!1929 () Bool)

(assert (=> bm!1929 (= call!1917 call!1914)))

(declare-fun b!23272 () Bool)

(declare-fun e!15104 () tuple2!958)

(assert (=> b!23272 (= e!15109 e!15104)))

(assert (=> b!23272 (= c!2968 (= (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!1930 () Bool)

(assert (=> bm!1930 (= call!1929 call!1922)))

(declare-fun bm!1931 () Bool)

(declare-fun call!1918 () ListLongMap!565)

(assert (=> bm!1931 (= call!1918 call!1913)))

(declare-fun b!23273 () Bool)

(declare-fun c!2977 () Bool)

(assert (=> b!23273 (= c!2977 ((_ is MissingVacant!55) lt!8257))))

(assert (=> b!23273 (= e!15106 e!15107)))

(declare-fun b!23274 () Bool)

(assert (=> b!23274 (= e!15107 e!15115)))

(declare-fun res!14350 () Bool)

(assert (=> b!23274 (= res!14350 call!1928)))

(assert (=> b!23274 (=> (not res!14350) (not e!15115))))

(declare-fun b!23275 () Bool)

(declare-fun lt!8235 () Unit!519)

(declare-fun lt!8244 () Unit!519)

(assert (=> b!23275 (= lt!8235 lt!8244)))

(assert (=> b!23275 (= call!1915 call!1918)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 V!1187 Int) Unit!519)

(assert (=> b!23275 (= lt!8244 (lemmaChangeZeroKeyThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8238 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (defaultEntry!1742 lt!8141)))))

(assert (=> b!23275 (= lt!8238 (bvor (extraKeys!1640 lt!8141) #b00000000000000000000000000000001))))

(assert (=> b!23275 (= e!15104 (tuple2!959 true (LongMapFixedSize!209 (defaultEntry!1742 lt!8141) (mask!4729 lt!8141) (bvor (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (_size!149 lt!8141) (_keys!3163 lt!8141) (_values!1728 lt!8141) (_vacant!149 lt!8141))))))

(declare-fun b!23276 () Bool)

(assert (=> b!23276 (= e!15114 (= call!1934 (+!45 call!1933 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!23277 () Bool)

(declare-fun lt!8233 () Unit!519)

(declare-fun lt!8250 () Unit!519)

(assert (=> b!23277 (= lt!8233 lt!8250)))

(assert (=> b!23277 (= call!1915 call!1918)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 V!1187 Int) Unit!519)

(assert (=> b!23277 (= lt!8250 (lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(assert (=> b!23277 (= lt!8258 (bvor (extraKeys!1640 lt!8141) #b00000000000000000000000000000010))))

(assert (=> b!23277 (= e!15104 (tuple2!959 true (LongMapFixedSize!209 (defaultEntry!1742 lt!8141) (mask!4729 lt!8141) (bvor (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (_size!149 lt!8141) (_keys!3163 lt!8141) (_values!1728 lt!8141) (_vacant!149 lt!8141))))))

(assert (= (and d!3947 c!2967) b!23272))

(assert (= (and d!3947 (not c!2967)) b!23241))

(assert (= (and b!23272 c!2968) b!23275))

(assert (= (and b!23272 (not c!2968)) b!23277))

(assert (= (or b!23275 b!23277) bm!1931))

(assert (= (or b!23275 b!23277) bm!1916))

(assert (= (or b!23275 b!23277) bm!1917))

(assert (= (and b!23241 c!2973) b!23256))

(assert (= (and b!23241 (not c!2973)) b!23254))

(assert (= (and b!23256 c!2979) b!23255))

(assert (= (and b!23256 (not c!2979)) b!23259))

(assert (= (and b!23255 res!14342) b!23240))

(assert (= (and b!23240 res!14347) b!23243))

(assert (= (and b!23259 c!2972) b!23251))

(assert (= (and b!23259 (not c!2972)) b!23273))

(assert (= (and b!23251 res!14344) b!23263))

(assert (= (and b!23263 res!14346) b!23271))

(assert (= (and b!23273 c!2977) b!23274))

(assert (= (and b!23273 (not c!2977)) b!23266))

(assert (= (and b!23274 res!14350) b!23239))

(assert (= (and b!23239 res!14352) b!23260))

(assert (= (or b!23251 b!23274) bm!1918))

(assert (= (or b!23271 b!23260) bm!1913))

(assert (= (or b!23240 bm!1918) bm!1914))

(assert (= (or b!23255 b!23259) bm!1922))

(assert (= (and b!23254 c!2976) b!23246))

(assert (= (and b!23254 (not c!2976)) b!23244))

(assert (= (and b!23244 c!2974) b!23248))

(assert (= (and b!23244 (not c!2974)) b!23253))

(assert (= (and b!23253 c!2970) b!23269))

(assert (= (and b!23253 (not c!2970)) b!23252))

(assert (= (and b!23269 res!14349) b!23264))

(assert (= (and b!23264 res!14348) b!23238))

(assert (= (and b!23252 c!2975) b!23249))

(assert (= (and b!23252 (not c!2975)) b!23267))

(assert (= (and b!23249 res!14351) b!23250))

(assert (= (and b!23250 res!14343) b!23258))

(assert (= (and b!23267 c!2969) b!23268))

(assert (= (and b!23267 (not c!2969)) b!23270))

(assert (= (and b!23268 res!14345) b!23242))

(assert (= (and b!23242 res!14340) b!23262))

(assert (= (or b!23249 b!23268) bm!1912))

(assert (= (or b!23258 b!23262) bm!1910))

(assert (= (or b!23264 bm!1912) bm!1929))

(assert (= (or b!23269 b!23252) bm!1925))

(assert (= (or b!23246 b!23248) bm!1924))

(assert (= (or b!23259 b!23252) bm!1928))

(assert (= (or b!23256 b!23253) bm!1930))

(assert (= (or b!23255 b!23269) bm!1919))

(assert (= (or bm!1922 bm!1925) bm!1908))

(assert (= (or bm!1913 bm!1910) bm!1909))

(assert (= (or bm!1914 bm!1929) bm!1911))

(assert (= (or b!23256 b!23253) bm!1926))

(assert (= (and bm!1926 c!2978) b!23247))

(assert (= (and bm!1926 (not c!2978)) b!23261))

(assert (= (or bm!1916 bm!1930) bm!1927))

(assert (= (or bm!1931 b!23253 b!23261) bm!1921))

(assert (= (or bm!1917 b!23253) bm!1923))

(assert (= (and d!3947 res!14339) b!23257))

(assert (= (and b!23257 c!2971) b!23245))

(assert (= (and b!23257 (not c!2971)) b!23265))

(assert (= (and b!23245 res!14341) b!23276))

(assert (= (or b!23245 b!23276 b!23265) bm!1915))

(assert (= (or b!23276 b!23265) bm!1920))

(declare-fun m!16716 () Bool)

(assert (=> bm!1928 m!16716))

(declare-fun m!16718 () Bool)

(assert (=> bm!1911 m!16718))

(declare-fun m!16720 () Bool)

(assert (=> b!23253 m!16720))

(assert (=> b!23253 m!16720))

(declare-fun m!16722 () Bool)

(assert (=> b!23253 m!16722))

(declare-fun m!16724 () Bool)

(assert (=> b!23253 m!16724))

(declare-fun m!16726 () Bool)

(assert (=> b!23253 m!16726))

(assert (=> b!23253 m!16722))

(declare-fun m!16728 () Bool)

(assert (=> b!23253 m!16728))

(declare-fun m!16730 () Bool)

(assert (=> b!23253 m!16730))

(declare-fun m!16732 () Bool)

(assert (=> b!23263 m!16732))

(declare-fun m!16734 () Bool)

(assert (=> b!23245 m!16734))

(assert (=> bm!1927 m!16726))

(declare-fun m!16736 () Bool)

(assert (=> bm!1927 m!16736))

(declare-fun m!16738 () Bool)

(assert (=> b!23276 m!16738))

(declare-fun m!16740 () Bool)

(assert (=> b!23239 m!16740))

(declare-fun m!16742 () Bool)

(assert (=> b!23250 m!16742))

(declare-fun m!16744 () Bool)

(assert (=> b!23277 m!16744))

(declare-fun m!16746 () Bool)

(assert (=> bm!1924 m!16746))

(declare-fun m!16748 () Bool)

(assert (=> bm!1915 m!16748))

(declare-fun m!16750 () Bool)

(assert (=> b!23241 m!16750))

(assert (=> bm!1908 m!16750))

(declare-fun m!16752 () Bool)

(assert (=> b!23242 m!16752))

(declare-fun m!16754 () Bool)

(assert (=> bm!1926 m!16754))

(declare-fun m!16756 () Bool)

(assert (=> bm!1921 m!16756))

(declare-fun m!16758 () Bool)

(assert (=> d!3947 m!16758))

(declare-fun m!16760 () Bool)

(assert (=> d!3947 m!16760))

(declare-fun m!16762 () Bool)

(assert (=> bm!1923 m!16762))

(declare-fun m!16764 () Bool)

(assert (=> bm!1909 m!16764))

(declare-fun m!16766 () Bool)

(assert (=> bm!1919 m!16766))

(declare-fun m!16768 () Bool)

(assert (=> b!23238 m!16768))

(declare-fun m!16770 () Bool)

(assert (=> bm!1920 m!16770))

(declare-fun m!16772 () Bool)

(assert (=> b!23243 m!16772))

(declare-fun m!16774 () Bool)

(assert (=> b!23275 m!16774))

(assert (=> bm!1846 d!3947))

(declare-fun d!3949 () Bool)

(assert (=> d!3949 (= (valid!114 thiss!938) (valid!116 (v!1601 (underlying!115 thiss!938))))))

(declare-fun bs!947 () Bool)

(assert (= bs!947 d!3949))

(declare-fun m!16776 () Bool)

(assert (=> bs!947 m!16776))

(assert (=> start!3482 d!3949))

(declare-fun b!23290 () Bool)

(declare-fun e!15128 () Bool)

(declare-fun lt!8307 () array!1263)

(declare-fun lt!8312 () tuple2!970)

(assert (=> b!23290 (= e!15128 (arrayContainsKey!0 lt!8307 (_1!493 lt!8312) #b00000000000000000000000000000000))))

(declare-fun b!23291 () Bool)

(declare-fun e!15126 () Unit!519)

(declare-fun Unit!523 () Unit!519)

(assert (=> b!23291 (= e!15126 Unit!523)))

(declare-fun b!23292 () Bool)

(declare-fun lt!8318 () (_ BitVec 32))

(assert (=> b!23292 (= e!15128 (ite (= (_1!493 lt!8312) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand lt!8318 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8318 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(declare-fun b!23293 () Bool)

(declare-fun res!14358 () Bool)

(declare-fun e!15127 () Bool)

(assert (=> b!23293 (=> (not res!14358) (not e!15127))))

(declare-fun lt!8306 () LongMapFixedSize!208)

(assert (=> b!23293 (= res!14358 (= (mask!4729 lt!8306) (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun b!23294 () Bool)

(assert (=> b!23294 (= e!15127 (= (map!408 lt!8306) (ListLongMap!566 Nil!562)))))

(declare-fun b!23295 () Bool)

(declare-fun Unit!524 () Unit!519)

(assert (=> b!23295 (= e!15126 Unit!524)))

(declare-fun lt!8305 () LongMapFixedSize!208)

(declare-fun head!830 (List!565) tuple2!970)

(assert (=> b!23295 (= lt!8312 (head!830 (toList!298 (map!408 lt!8305))))))

(assert (=> b!23295 (= lt!8307 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))

(assert (=> b!23295 (= lt!8318 #b00000000000000000000000000000000)))

(declare-fun lt!8316 () Unit!519)

(declare-fun lemmaKeyInListMapIsInArray!97 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!519)

(declare-fun dynLambda!143 (Int (_ BitVec 64)) V!1187)

(assert (=> b!23295 (= lt!8316 (lemmaKeyInListMapIsInArray!97 lt!8307 (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8318 (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (_1!493 lt!8312) (defaultEntry!1742 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun c!2984 () Bool)

(assert (=> b!23295 (= c!2984 (and (not (= (_1!493 lt!8312) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (_1!493 lt!8312) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23295 e!15128))

(declare-fun lt!8320 () Unit!519)

(assert (=> b!23295 (= lt!8320 lt!8316)))

(declare-fun lt!8308 () (_ BitVec 32))

(declare-fun arrayScanForKey!0 (array!1263 (_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!23295 (= lt!8308 (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!493 lt!8312) #b00000000000000000000000000000000))))

(assert (=> b!23295 false))

(declare-fun d!3951 () Bool)

(assert (=> d!3951 e!15127))

(declare-fun res!14357 () Bool)

(assert (=> d!3951 (=> (not res!14357) (not e!15127))))

(assert (=> d!3951 (= res!14357 (valid!116 lt!8306))))

(assert (=> d!3951 (= lt!8306 lt!8305)))

(declare-fun lt!8311 () Unit!519)

(assert (=> d!3951 (= lt!8311 e!15126)))

(declare-fun c!2985 () Bool)

(assert (=> d!3951 (= c!2985 (not (= (map!408 lt!8305) (ListLongMap!566 Nil!562))))))

(declare-fun lt!8322 () Unit!519)

(declare-fun lt!8327 () Unit!519)

(assert (=> d!3951 (= lt!8322 lt!8327)))

(declare-fun lt!8321 () array!1263)

(declare-fun lt!8319 () (_ BitVec 32))

(declare-datatypes ((List!566 0))(
  ( (Nil!563) (Cons!562 (h!1128 (_ BitVec 64)) (t!3230 List!566)) )
))
(declare-fun lt!8325 () List!566)

(declare-fun arrayNoDuplicates!0 (array!1263 (_ BitVec 32) List!566) Bool)

(assert (=> d!3951 (arrayNoDuplicates!0 lt!8321 lt!8319 lt!8325)))

(declare-fun lemmaArrayNoDuplicatesInAll0Array!0 (array!1263 (_ BitVec 32) (_ BitVec 32) List!566) Unit!519)

(assert (=> d!3951 (= lt!8327 (lemmaArrayNoDuplicatesInAll0Array!0 lt!8321 lt!8319 (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001) lt!8325))))

(assert (=> d!3951 (= lt!8325 Nil!563)))

(assert (=> d!3951 (= lt!8319 #b00000000000000000000000000000000)))

(assert (=> d!3951 (= lt!8321 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))

(declare-fun lt!8317 () Unit!519)

(declare-fun lt!8309 () Unit!519)

(assert (=> d!3951 (= lt!8317 lt!8309)))

(declare-fun lt!8323 () (_ BitVec 32))

(declare-fun lt!8315 () array!1263)

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!1263 (_ BitVec 32)) Bool)

(assert (=> d!3951 (arrayForallSeekEntryOrOpenFound!0 lt!8323 lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun lemmaArrayForallSeekEntryOrOpenFoundAlwaysTrueFor0Array!0 (array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!519)

(assert (=> d!3951 (= lt!8309 (lemmaArrayForallSeekEntryOrOpenFoundAlwaysTrueFor0Array!0 lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8323))))

(assert (=> d!3951 (= lt!8323 #b00000000000000000000000000000000)))

(assert (=> d!3951 (= lt!8315 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))

(declare-fun lt!8310 () Unit!519)

(declare-fun lt!8326 () Unit!519)

(assert (=> d!3951 (= lt!8310 lt!8326)))

(declare-fun lt!8324 () array!1263)

(declare-fun lt!8313 () (_ BitVec 32))

(declare-fun lt!8314 () (_ BitVec 32))

(declare-fun arrayCountValidKeys!0 (array!1263 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!3951 (= (arrayCountValidKeys!0 lt!8324 lt!8313 lt!8314) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayCountValidKeysOfFilled0ArrayIs0!0 (array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!519)

(assert (=> d!3951 (= lt!8326 (lemmaArrayCountValidKeysOfFilled0ArrayIs0!0 lt!8324 lt!8313 lt!8314))))

(assert (=> d!3951 (= lt!8314 (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))))

(assert (=> d!3951 (= lt!8313 #b00000000000000000000000000000000)))

(assert (=> d!3951 (= lt!8324 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))

(assert (=> d!3951 (= lt!8305 (LongMapFixedSize!209 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) #b00000000000000000000000000000000))))

(assert (=> d!3951 (validMask!0 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(assert (=> d!3951 (= (getNewLongMapFixedSize!33 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 (v!1601 (underlying!115 thiss!938)))) lt!8306)))

(assert (= (and d!3951 c!2985) b!23295))

(assert (= (and d!3951 (not c!2985)) b!23291))

(assert (= (and b!23295 c!2984) b!23290))

(assert (= (and b!23295 (not c!2984)) b!23292))

(assert (= (and d!3951 res!14357) b!23293))

(assert (= (and b!23293 res!14358) b!23294))

(declare-fun b_lambda!1563 () Bool)

(assert (=> (not b_lambda!1563) (not b!23295)))

(declare-fun t!3228 () Bool)

(declare-fun tb!651 () Bool)

(assert (=> (and b!23067 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (v!1601 (underlying!115 thiss!938)))) t!3228) tb!651))

(declare-fun result!1087 () Bool)

(assert (=> tb!651 (= result!1087 tp_is_empty!1021)))

(assert (=> b!23295 t!3228))

(declare-fun b_and!1479 () Bool)

(assert (= b_and!1473 (and (=> t!3228 result!1087) b_and!1479)))

(declare-fun b_lambda!1565 () Bool)

(assert (=> (not b_lambda!1565) (not d!3951)))

(assert (=> d!3951 t!3228))

(declare-fun b_and!1481 () Bool)

(assert (= b_and!1479 (and (=> t!3228 result!1087) b_and!1481)))

(declare-fun m!16778 () Bool)

(assert (=> b!23290 m!16778))

(declare-fun m!16780 () Bool)

(assert (=> b!23294 m!16780))

(assert (=> b!23295 m!16662))

(declare-fun m!16782 () Bool)

(assert (=> b!23295 m!16782))

(assert (=> b!23295 m!16782))

(declare-fun m!16784 () Bool)

(assert (=> b!23295 m!16784))

(declare-fun m!16786 () Bool)

(assert (=> b!23295 m!16786))

(declare-fun m!16788 () Bool)

(assert (=> b!23295 m!16788))

(assert (=> b!23295 m!16782))

(declare-fun m!16790 () Bool)

(assert (=> b!23295 m!16790))

(declare-fun m!16792 () Bool)

(assert (=> d!3951 m!16792))

(assert (=> d!3951 m!16662))

(declare-fun m!16794 () Bool)

(assert (=> d!3951 m!16794))

(assert (=> d!3951 m!16662))

(declare-fun m!16796 () Bool)

(assert (=> d!3951 m!16796))

(assert (=> d!3951 m!16662))

(declare-fun m!16798 () Bool)

(assert (=> d!3951 m!16798))

(assert (=> d!3951 m!16782))

(declare-fun m!16800 () Bool)

(assert (=> d!3951 m!16800))

(declare-fun m!16802 () Bool)

(assert (=> d!3951 m!16802))

(assert (=> d!3951 m!16790))

(declare-fun m!16804 () Bool)

(assert (=> d!3951 m!16804))

(declare-fun m!16806 () Bool)

(assert (=> d!3951 m!16806))

(assert (=> b!23061 d!3951))

(declare-fun d!3953 () Bool)

(declare-fun e!15134 () Bool)

(assert (=> d!3953 e!15134))

(declare-fun res!14361 () Bool)

(assert (=> d!3953 (=> (not res!14361) (not e!15134))))

(declare-fun lt!8333 () (_ BitVec 32))

(assert (=> d!3953 (= res!14361 (validMask!0 lt!8333))))

(declare-datatypes ((tuple2!972 0))(
  ( (tuple2!973 (_1!494 Unit!519) (_2!494 (_ BitVec 32))) )
))
(declare-fun e!15133 () tuple2!972)

(assert (=> d!3953 (= lt!8333 (_2!494 e!15133))))

(declare-fun c!2988 () Bool)

(declare-fun lt!8332 () tuple2!972)

(assert (=> d!3953 (= c!2988 (and (bvsgt (_2!494 lt!8332) #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1601 (underlying!115 thiss!938)))) (_2!494 lt!8332)) (bvsge (bvadd (bvand (bvashr (_2!494 lt!8332) #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun Unit!525 () Unit!519)

(declare-fun Unit!526 () Unit!519)

(assert (=> d!3953 (= lt!8332 (ite (and (bvsge (bvmul #b00000000000000000000000000000010 (bvadd (_size!149 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))))) (mask!4729 (v!1601 (underlying!115 thiss!938)))) (bvsle (bvmul #b00000000000000000000000000000101 (_vacant!149 (v!1601 (underlying!115 thiss!938)))) (mask!4729 (v!1601 (underlying!115 thiss!938))))) (tuple2!973 Unit!525 (bvand (bvadd (bvshl (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000001) #b00000000000000000000000000000001) #b00111111111111111111111111111111)) (tuple2!973 Unit!526 (mask!4729 (v!1601 (underlying!115 thiss!938))))))))

(assert (=> d!3953 (validMask!0 (mask!4729 (v!1601 (underlying!115 thiss!938))))))

(assert (=> d!3953 (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8333)))

(declare-fun b!23304 () Bool)

(declare-fun computeNewMaskWhile!14 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) tuple2!972)

(assert (=> b!23304 (= e!15133 (computeNewMaskWhile!14 (_size!149 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (mask!4729 (v!1601 (underlying!115 thiss!938))) (_2!494 lt!8332)))))

(declare-fun b!23305 () Bool)

(declare-fun Unit!527 () Unit!519)

(assert (=> b!23305 (= e!15133 (tuple2!973 Unit!527 (_2!494 lt!8332)))))

(declare-fun b!23306 () Bool)

(assert (=> b!23306 (= e!15134 (bvsle (_size!149 (v!1601 (underlying!115 thiss!938))) (bvadd lt!8333 #b00000000000000000000000000000001)))))

(assert (= (and d!3953 c!2988) b!23304))

(assert (= (and d!3953 (not c!2988)) b!23305))

(assert (= (and d!3953 res!14361) b!23306))

(declare-fun m!16808 () Bool)

(assert (=> d!3953 m!16808))

(assert (=> d!3953 m!16678))

(declare-fun m!16810 () Bool)

(assert (=> b!23304 m!16810))

(assert (=> b!23061 d!3953))

(declare-fun d!3955 () Bool)

(assert (=> d!3955 (= (validMask!0 (mask!4729 (v!1601 (underlying!115 thiss!938)))) (and (or (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000001111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000011111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000001111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000011111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000001111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000011111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000001111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000011111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000001111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000011111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000001111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000011111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000111111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000001111111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000011111111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000111111111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000001111111111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000011111111111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000111111111111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00001111111111111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00011111111111111111111111111111) (= (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00111111111111111111111111111111)) (bvsle (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00111111111111111111111111111111)))))

(assert (=> b!23063 d!3955))

(declare-fun d!3957 () Bool)

(assert (=> d!3957 (= (array_inv!419 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) (bvsge (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000))))

(assert (=> b!23067 d!3957))

(declare-fun d!3959 () Bool)

(assert (=> d!3959 (= (array_inv!420 (_values!1728 (v!1601 (underlying!115 thiss!938)))) (bvsge (size!692 (_values!1728 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000))))

(assert (=> b!23067 d!3959))

(declare-fun b!23307 () Bool)

(declare-fun e!15136 () Bool)

(declare-fun lt!8354 () SeekEntryResult!55)

(assert (=> b!23307 (= e!15136 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8354)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23308 () Bool)

(declare-fun res!14375 () Bool)

(declare-fun lt!8359 () SeekEntryResult!55)

(assert (=> b!23308 (= res!14375 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2344 lt!8359)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15151 () Bool)

(assert (=> b!23308 (=> (not res!14375) (not e!15151))))

(declare-fun bm!1932 () Bool)

(declare-fun call!1954 () SeekEntryResult!55)

(assert (=> bm!1932 (= call!1954 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!23310 () Bool)

(declare-fun e!15145 () tuple2!958)

(declare-fun e!15135 () tuple2!958)

(assert (=> b!23310 (= e!15145 e!15135)))

(declare-fun lt!8342 () SeekEntryResult!55)

(assert (=> b!23310 (= lt!8342 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun c!2995 () Bool)

(assert (=> b!23310 (= c!2995 ((_ is Undefined!55) lt!8342))))

(declare-fun bm!1933 () Bool)

(declare-fun call!1949 () Bool)

(assert (=> bm!1933 (= call!1949 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun b!23311 () Bool)

(declare-fun res!14363 () Bool)

(declare-fun lt!8341 () SeekEntryResult!55)

(assert (=> b!23311 (= res!14363 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2344 lt!8341)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15149 () Bool)

(assert (=> b!23311 (=> (not res!14363) (not e!15149))))

(declare-fun bm!1934 () Bool)

(declare-fun call!1951 () Bool)

(assert (=> bm!1934 (= call!1951 call!1949)))

(declare-fun b!23312 () Bool)

(declare-fun e!15148 () Bool)

(declare-fun lt!8350 () SeekEntryResult!55)

(assert (=> b!23312 (= e!15148 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8350)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23313 () Bool)

(declare-fun e!15155 () tuple2!958)

(declare-fun e!15141 () tuple2!958)

(assert (=> b!23313 (= e!15155 e!15141)))

(declare-fun c!2996 () Bool)

(assert (=> b!23313 (= c!2996 ((_ is MissingZero!55) lt!8342))))

(declare-fun bm!1935 () Bool)

(declare-fun c!3001 () Bool)

(declare-fun call!1938 () Bool)

(declare-fun c!2997 () Bool)

(declare-fun c!2994 () Bool)

(declare-fun c!2992 () Bool)

(assert (=> bm!1935 (= call!1938 (inRange!0 (ite c!2995 (ite c!3001 (index!2342 lt!8350) (ite c!2994 (index!2341 lt!8359) (index!2344 lt!8359))) (ite c!2992 (index!2342 lt!8354) (ite c!2997 (index!2341 lt!8341) (index!2344 lt!8341)))) (mask!4729 (_2!487 lt!8138))))))

(declare-fun bm!1936 () Bool)

(declare-fun call!1948 () Bool)

(declare-fun call!1941 () Bool)

(assert (=> bm!1936 (= call!1948 call!1941)))

(declare-fun b!23314 () Bool)

(declare-fun e!15138 () Bool)

(declare-fun e!15150 () Bool)

(assert (=> b!23314 (= e!15138 e!15150)))

(declare-fun res!14364 () Bool)

(declare-fun call!1958 () ListLongMap!565)

(assert (=> b!23314 (= res!14364 (contains!230 call!1958 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23314 (=> (not res!14364) (not e!15150))))

(declare-fun b!23315 () Bool)

(declare-fun lt!8343 () tuple2!958)

(assert (=> b!23315 (= e!15155 (tuple2!959 (_1!487 lt!8343) (_2!487 lt!8343)))))

(declare-fun call!1936 () tuple2!958)

(assert (=> b!23315 (= lt!8343 call!1936)))

(declare-fun bm!1937 () Bool)

(declare-fun call!1956 () Bool)

(assert (=> bm!1937 (= call!1956 call!1949)))

(declare-fun b!23316 () Bool)

(declare-fun e!15144 () ListLongMap!565)

(declare-fun call!1953 () ListLongMap!565)

(assert (=> b!23316 (= e!15144 call!1953)))

(declare-fun bm!1938 () Bool)

(declare-fun call!1940 () Bool)

(assert (=> bm!1938 (= call!1940 call!1938)))

(declare-fun b!23317 () Bool)

(declare-fun lt!8334 () tuple2!958)

(assert (=> b!23317 (= lt!8334 call!1936)))

(assert (=> b!23317 (= e!15141 (tuple2!959 (_1!487 lt!8334) (_2!487 lt!8334)))))

(declare-fun b!23318 () Bool)

(declare-fun res!14374 () Bool)

(declare-fun e!15137 () Bool)

(assert (=> b!23318 (=> (not res!14374) (not e!15137))))

(assert (=> b!23318 (= res!14374 call!1948)))

(declare-fun e!15147 () Bool)

(assert (=> b!23318 (= e!15147 e!15137)))

(declare-fun b!23319 () Bool)

(declare-fun res!14366 () Bool)

(assert (=> b!23319 (=> (not res!14366) (not e!15137))))

(assert (=> b!23319 (= res!14366 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2341 lt!8341)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!1939 () Bool)

(declare-fun lt!8336 () tuple2!958)

(assert (=> bm!1939 (= call!1958 (map!408 (_2!487 lt!8336)))))

(declare-fun b!23320 () Bool)

(declare-fun res!14367 () Bool)

(declare-fun e!15154 () Bool)

(assert (=> b!23320 (=> (not res!14367) (not e!15154))))

(declare-fun call!1952 () Bool)

(assert (=> b!23320 (= res!14367 call!1952)))

(declare-fun e!15142 () Bool)

(assert (=> b!23320 (= e!15142 e!15154)))

(declare-fun b!23321 () Bool)

(declare-fun e!15139 () Unit!519)

(declare-fun Unit!528 () Unit!519)

(assert (=> b!23321 (= e!15139 Unit!528)))

(declare-fun lt!8356 () Unit!519)

(declare-fun call!1943 () Unit!519)

(assert (=> b!23321 (= lt!8356 call!1943)))

(declare-fun call!1947 () SeekEntryResult!55)

(assert (=> b!23321 (= lt!8341 call!1947)))

(assert (=> b!23321 (= c!2997 ((_ is MissingZero!55) lt!8341))))

(assert (=> b!23321 e!15147))

(declare-fun lt!8347 () Unit!519)

(assert (=> b!23321 (= lt!8347 lt!8356)))

(assert (=> b!23321 false))

(declare-fun bm!1940 () Bool)

(declare-fun call!1950 () ListLongMap!565)

(declare-fun call!1946 () ListLongMap!565)

(assert (=> bm!1940 (= call!1950 call!1946)))

(declare-fun bm!1941 () Bool)

(declare-fun call!1939 () ListLongMap!565)

(declare-fun call!1935 () ListLongMap!565)

(assert (=> bm!1941 (= call!1939 call!1935)))

(declare-fun b!23322 () Bool)

(declare-fun lt!8345 () Unit!519)

(declare-fun lt!8339 () Unit!519)

(assert (=> b!23322 (= lt!8345 lt!8339)))

(declare-fun lt!8338 () array!1261)

(assert (=> b!23322 (contains!230 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342)))))

(assert (=> b!23322 (= lt!8339 (lemmaValidKeyInArrayIsInListMap!10 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (index!2342 lt!8342) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> b!23322 (= lt!8338 (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))))

(declare-fun lt!8355 () Unit!519)

(declare-fun lt!8351 () Unit!519)

(assert (=> b!23322 (= lt!8355 lt!8351)))

(assert (=> b!23322 (= call!1935 call!1953)))

(assert (=> b!23322 (= lt!8351 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (index!2342 lt!8342) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8353 () Unit!519)

(assert (=> b!23322 (= lt!8353 e!15139)))

(declare-fun call!1944 () Bool)

(assert (=> b!23322 (= c!2992 call!1944)))

(assert (=> b!23322 (= e!15141 (tuple2!959 true (LongMapFixedSize!209 (defaultEntry!1742 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (_size!149 (_2!487 lt!8138)) (_keys!3163 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (_vacant!149 (_2!487 lt!8138)))))))

(declare-fun b!23323 () Bool)

(declare-fun c!2998 () Bool)

(assert (=> b!23323 (= c!2998 ((_ is MissingVacant!55) lt!8342))))

(assert (=> b!23323 (= e!15135 e!15155)))

(declare-fun bm!1942 () Bool)

(assert (=> bm!1942 (= call!1952 call!1940)))

(declare-fun bm!1943 () Bool)

(declare-fun call!1955 () Unit!519)

(assert (=> bm!1943 (= call!1955 (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!23324 () Bool)

(declare-fun e!15153 () Unit!519)

(declare-fun Unit!529 () Unit!519)

(assert (=> b!23324 (= e!15153 Unit!529)))

(declare-fun lt!8344 () Unit!519)

(assert (=> b!23324 (= lt!8344 call!1955)))

(declare-fun call!1945 () SeekEntryResult!55)

(assert (=> b!23324 (= lt!8350 call!1945)))

(declare-fun res!14365 () Bool)

(assert (=> b!23324 (= res!14365 ((_ is Found!55) lt!8350))))

(assert (=> b!23324 (=> (not res!14365) (not e!15148))))

(assert (=> b!23324 e!15148))

(declare-fun lt!8348 () Unit!519)

(assert (=> b!23324 (= lt!8348 lt!8344)))

(assert (=> b!23324 false))

(declare-fun b!23325 () Bool)

(declare-fun lt!8357 () Unit!519)

(assert (=> b!23325 (= lt!8357 e!15153)))

(assert (=> b!23325 (= c!3001 call!1944)))

(assert (=> b!23325 (= e!15135 (tuple2!959 false (_2!487 lt!8138)))))

(declare-fun bm!1944 () Bool)

(declare-fun call!1957 () ListLongMap!565)

(assert (=> bm!1944 (= call!1957 (map!408 (_2!487 lt!8138)))))

(declare-fun b!23326 () Bool)

(declare-fun e!15146 () Bool)

(assert (=> b!23326 (= e!15146 e!15138)))

(declare-fun c!2993 () Bool)

(assert (=> b!23326 (= c!2993 (_1!487 lt!8336))))

(declare-fun call!1937 () ListLongMap!565)

(declare-fun bm!1945 () Bool)

(declare-fun lt!8340 () (_ BitVec 32))

(declare-fun lt!8360 () (_ BitVec 32))

(declare-fun c!2990 () Bool)

(declare-fun c!2989 () Bool)

(assert (=> bm!1945 (= call!1937 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!23327 () Bool)

(assert (=> b!23327 (= e!15137 (not call!1951))))

(declare-fun bm!1946 () Bool)

(assert (=> bm!1946 (= call!1945 call!1954)))

(declare-fun bm!1947 () Bool)

(assert (=> bm!1947 (= call!1935 (+!45 (ite c!2989 call!1950 call!1937) (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!23328 () Bool)

(declare-fun lt!8349 () Unit!519)

(assert (=> b!23328 (= e!15153 lt!8349)))

(assert (=> b!23328 (= lt!8349 call!1943)))

(assert (=> b!23328 (= lt!8359 call!1945)))

(assert (=> b!23328 (= c!2994 ((_ is MissingZero!55) lt!8359))))

(assert (=> b!23328 e!15142))

(declare-fun b!23329 () Bool)

(assert (=> b!23329 (= e!15151 (not call!1956))))

(declare-fun b!23330 () Bool)

(assert (=> b!23330 (= e!15144 call!1937)))

(declare-fun b!23331 () Bool)

(assert (=> b!23331 (= e!15149 (not call!1951))))

(declare-fun b!23332 () Bool)

(declare-fun res!14369 () Bool)

(assert (=> b!23332 (=> (not res!14369) (not e!15154))))

(assert (=> b!23332 (= res!14369 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2341 lt!8359)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23333 () Bool)

(declare-fun res!14371 () Bool)

(assert (=> b!23333 (= res!14371 call!1941)))

(assert (=> b!23333 (=> (not res!14371) (not e!15136))))

(declare-fun b!23334 () Bool)

(assert (=> b!23334 (= e!15138 (= call!1958 call!1957))))

(declare-fun bm!1948 () Bool)

(assert (=> bm!1948 (= call!1936 (updateHelperNewKey!10 (_2!487 lt!8138) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))))))

(declare-fun b!23335 () Bool)

(declare-fun e!15143 () Bool)

(assert (=> b!23335 (= e!15143 ((_ is Undefined!55) lt!8359))))

(declare-fun bm!1949 () Bool)

(assert (=> bm!1949 (= call!1947 call!1954)))

(declare-fun b!23336 () Bool)

(declare-fun c!2991 () Bool)

(assert (=> b!23336 (= c!2991 ((_ is MissingVacant!55) lt!8341))))

(declare-fun e!15152 () Bool)

(assert (=> b!23336 (= e!15147 e!15152)))

(declare-fun b!23337 () Bool)

(assert (=> b!23337 (= e!15152 e!15149)))

(declare-fun res!14368 () Bool)

(assert (=> b!23337 (= res!14368 call!1948)))

(assert (=> b!23337 (=> (not res!14368) (not e!15149))))

(declare-fun b!23338 () Bool)

(declare-fun lt!8358 () Unit!519)

(assert (=> b!23338 (= e!15139 lt!8358)))

(assert (=> b!23338 (= lt!8358 call!1955)))

(assert (=> b!23338 (= lt!8354 call!1947)))

(declare-fun res!14372 () Bool)

(assert (=> b!23338 (= res!14372 ((_ is Found!55) lt!8354))))

(assert (=> b!23338 (=> (not res!14372) (not e!15136))))

(assert (=> b!23338 e!15136))

(declare-fun bm!1950 () Bool)

(declare-fun c!3000 () Bool)

(assert (=> bm!1950 (= c!3000 c!2995)))

(assert (=> bm!1950 (= call!1944 (contains!230 e!15144 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23339 () Bool)

(assert (=> b!23339 (= e!15152 ((_ is Undefined!55) lt!8341))))

(declare-fun bm!1951 () Bool)

(assert (=> bm!1951 (= call!1946 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun bm!1952 () Bool)

(assert (=> bm!1952 (= call!1943 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!23340 () Bool)

(assert (=> b!23340 (= e!15154 (not call!1956))))

(declare-fun d!3961 () Bool)

(assert (=> d!3961 e!15146))

(declare-fun res!14362 () Bool)

(assert (=> d!3961 (=> (not res!14362) (not e!15146))))

(assert (=> d!3961 (= res!14362 (valid!116 (_2!487 lt!8336)))))

(assert (=> d!3961 (= lt!8336 e!15145)))

(assert (=> d!3961 (= c!2989 (= #b1000000000000000000000000000000000000000000000000000000000000000 (bvneg #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!3961 (valid!116 (_2!487 lt!8138))))

(assert (=> d!3961 (= (update!38 (_2!487 lt!8138) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) lt!8336)))

(declare-fun b!23309 () Bool)

(declare-fun res!14370 () Bool)

(assert (=> b!23309 (= res!14370 call!1940)))

(assert (=> b!23309 (=> (not res!14370) (not e!15148))))

(declare-fun bm!1953 () Bool)

(assert (=> bm!1953 (= call!1941 call!1938)))

(declare-fun b!23341 () Bool)

(declare-fun e!15140 () tuple2!958)

(assert (=> b!23341 (= e!15145 e!15140)))

(assert (=> b!23341 (= c!2990 (= #b1000000000000000000000000000000000000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!1954 () Bool)

(assert (=> bm!1954 (= call!1953 call!1946)))

(declare-fun bm!1955 () Bool)

(declare-fun call!1942 () ListLongMap!565)

(assert (=> bm!1955 (= call!1942 call!1937)))

(declare-fun b!23342 () Bool)

(declare-fun c!2999 () Bool)

(assert (=> b!23342 (= c!2999 ((_ is MissingVacant!55) lt!8359))))

(assert (=> b!23342 (= e!15142 e!15143)))

(declare-fun b!23343 () Bool)

(assert (=> b!23343 (= e!15143 e!15151)))

(declare-fun res!14373 () Bool)

(assert (=> b!23343 (= res!14373 call!1952)))

(assert (=> b!23343 (=> (not res!14373) (not e!15151))))

(declare-fun b!23344 () Bool)

(declare-fun lt!8337 () Unit!519)

(declare-fun lt!8346 () Unit!519)

(assert (=> b!23344 (= lt!8337 lt!8346)))

(assert (=> b!23344 (= call!1939 call!1942)))

(assert (=> b!23344 (= lt!8346 (lemmaChangeZeroKeyThenAddPairToListMap!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) lt!8340 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> b!23344 (= lt!8340 (bvor (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001))))

(assert (=> b!23344 (= e!15140 (tuple2!959 true (LongMapFixedSize!209 (defaultEntry!1742 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (bvor (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) (_size!149 (_2!487 lt!8138)) (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (_vacant!149 (_2!487 lt!8138)))))))

(declare-fun b!23345 () Bool)

(assert (=> b!23345 (= e!15150 (= call!1958 (+!45 call!1957 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!23346 () Bool)

(declare-fun lt!8335 () Unit!519)

(declare-fun lt!8352 () Unit!519)

(assert (=> b!23346 (= lt!8335 lt!8352)))

(assert (=> b!23346 (= call!1939 call!1942)))

(assert (=> b!23346 (= lt!8352 (lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> b!23346 (= lt!8360 (bvor (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010))))

(assert (=> b!23346 (= e!15140 (tuple2!959 true (LongMapFixedSize!209 (defaultEntry!1742 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (bvor (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (_size!149 (_2!487 lt!8138)) (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (_vacant!149 (_2!487 lt!8138)))))))

(assert (= (and d!3961 c!2989) b!23341))

(assert (= (and d!3961 (not c!2989)) b!23310))

(assert (= (and b!23341 c!2990) b!23344))

(assert (= (and b!23341 (not c!2990)) b!23346))

(assert (= (or b!23344 b!23346) bm!1955))

(assert (= (or b!23344 b!23346) bm!1940))

(assert (= (or b!23344 b!23346) bm!1941))

(assert (= (and b!23310 c!2995) b!23325))

(assert (= (and b!23310 (not c!2995)) b!23323))

(assert (= (and b!23325 c!3001) b!23324))

(assert (= (and b!23325 (not c!3001)) b!23328))

(assert (= (and b!23324 res!14365) b!23309))

(assert (= (and b!23309 res!14370) b!23312))

(assert (= (and b!23328 c!2994) b!23320))

(assert (= (and b!23328 (not c!2994)) b!23342))

(assert (= (and b!23320 res!14367) b!23332))

(assert (= (and b!23332 res!14369) b!23340))

(assert (= (and b!23342 c!2999) b!23343))

(assert (= (and b!23342 (not c!2999)) b!23335))

(assert (= (and b!23343 res!14373) b!23308))

(assert (= (and b!23308 res!14375) b!23329))

(assert (= (or b!23320 b!23343) bm!1942))

(assert (= (or b!23340 b!23329) bm!1937))

(assert (= (or b!23309 bm!1942) bm!1938))

(assert (= (or b!23324 b!23328) bm!1946))

(assert (= (and b!23323 c!2998) b!23315))

(assert (= (and b!23323 (not c!2998)) b!23313))

(assert (= (and b!23313 c!2996) b!23317))

(assert (= (and b!23313 (not c!2996)) b!23322))

(assert (= (and b!23322 c!2992) b!23338))

(assert (= (and b!23322 (not c!2992)) b!23321))

(assert (= (and b!23338 res!14372) b!23333))

(assert (= (and b!23333 res!14371) b!23307))

(assert (= (and b!23321 c!2997) b!23318))

(assert (= (and b!23321 (not c!2997)) b!23336))

(assert (= (and b!23318 res!14374) b!23319))

(assert (= (and b!23319 res!14366) b!23327))

(assert (= (and b!23336 c!2991) b!23337))

(assert (= (and b!23336 (not c!2991)) b!23339))

(assert (= (and b!23337 res!14368) b!23311))

(assert (= (and b!23311 res!14363) b!23331))

(assert (= (or b!23318 b!23337) bm!1936))

(assert (= (or b!23327 b!23331) bm!1934))

(assert (= (or b!23333 bm!1936) bm!1953))

(assert (= (or b!23338 b!23321) bm!1949))

(assert (= (or b!23315 b!23317) bm!1948))

(assert (= (or b!23328 b!23321) bm!1952))

(assert (= (or b!23325 b!23322) bm!1954))

(assert (= (or b!23324 b!23338) bm!1943))

(assert (= (or bm!1946 bm!1949) bm!1932))

(assert (= (or bm!1937 bm!1934) bm!1933))

(assert (= (or bm!1938 bm!1953) bm!1935))

(assert (= (or b!23325 b!23322) bm!1950))

(assert (= (and bm!1950 c!3000) b!23316))

(assert (= (and bm!1950 (not c!3000)) b!23330))

(assert (= (or bm!1940 bm!1954) bm!1951))

(assert (= (or bm!1955 b!23322 b!23330) bm!1945))

(assert (= (or bm!1941 b!23322) bm!1947))

(assert (= (and d!3961 res!14362) b!23326))

(assert (= (and b!23326 c!2993) b!23314))

(assert (= (and b!23326 (not c!2993)) b!23334))

(assert (= (and b!23314 res!14364) b!23345))

(assert (= (or b!23314 b!23345 b!23334) bm!1939))

(assert (= (or b!23345 b!23334) bm!1944))

(declare-fun m!16812 () Bool)

(assert (=> bm!1952 m!16812))

(declare-fun m!16814 () Bool)

(assert (=> bm!1935 m!16814))

(declare-fun m!16816 () Bool)

(assert (=> b!23322 m!16816))

(assert (=> b!23322 m!16816))

(declare-fun m!16818 () Bool)

(assert (=> b!23322 m!16818))

(declare-fun m!16820 () Bool)

(assert (=> b!23322 m!16820))

(declare-fun m!16822 () Bool)

(assert (=> b!23322 m!16822))

(assert (=> b!23322 m!16818))

(declare-fun m!16824 () Bool)

(assert (=> b!23322 m!16824))

(declare-fun m!16826 () Bool)

(assert (=> b!23322 m!16826))

(declare-fun m!16828 () Bool)

(assert (=> b!23332 m!16828))

(declare-fun m!16830 () Bool)

(assert (=> b!23314 m!16830))

(assert (=> bm!1951 m!16822))

(declare-fun m!16832 () Bool)

(assert (=> bm!1951 m!16832))

(declare-fun m!16834 () Bool)

(assert (=> b!23345 m!16834))

(declare-fun m!16836 () Bool)

(assert (=> b!23308 m!16836))

(declare-fun m!16838 () Bool)

(assert (=> b!23319 m!16838))

(declare-fun m!16840 () Bool)

(assert (=> b!23346 m!16840))

(declare-fun m!16842 () Bool)

(assert (=> bm!1948 m!16842))

(declare-fun m!16844 () Bool)

(assert (=> bm!1939 m!16844))

(declare-fun m!16846 () Bool)

(assert (=> b!23310 m!16846))

(assert (=> bm!1932 m!16846))

(declare-fun m!16848 () Bool)

(assert (=> b!23311 m!16848))

(declare-fun m!16850 () Bool)

(assert (=> bm!1950 m!16850))

(declare-fun m!16852 () Bool)

(assert (=> bm!1945 m!16852))

(declare-fun m!16854 () Bool)

(assert (=> d!3961 m!16854))

(declare-fun m!16856 () Bool)

(assert (=> d!3961 m!16856))

(declare-fun m!16858 () Bool)

(assert (=> bm!1947 m!16858))

(declare-fun m!16860 () Bool)

(assert (=> bm!1933 m!16860))

(declare-fun m!16862 () Bool)

(assert (=> bm!1943 m!16862))

(declare-fun m!16864 () Bool)

(assert (=> b!23307 m!16864))

(declare-fun m!16866 () Bool)

(assert (=> bm!1944 m!16866))

(declare-fun m!16868 () Bool)

(assert (=> b!23312 m!16868))

(declare-fun m!16870 () Bool)

(assert (=> b!23344 m!16870))

(assert (=> b!23055 d!3961))

(declare-fun mapNonEmpty!1031 () Bool)

(declare-fun mapRes!1031 () Bool)

(declare-fun tp!3533 () Bool)

(declare-fun e!15161 () Bool)

(assert (=> mapNonEmpty!1031 (= mapRes!1031 (and tp!3533 e!15161))))

(declare-fun mapKey!1031 () (_ BitVec 32))

(declare-fun mapValue!1031 () ValueCell!311)

(declare-fun mapRest!1031 () (Array (_ BitVec 32) ValueCell!311))

(assert (=> mapNonEmpty!1031 (= mapRest!1022 (store mapRest!1031 mapKey!1031 mapValue!1031))))

(declare-fun mapIsEmpty!1031 () Bool)

(assert (=> mapIsEmpty!1031 mapRes!1031))

(declare-fun condMapEmpty!1031 () Bool)

(declare-fun mapDefault!1031 () ValueCell!311)

(assert (=> mapNonEmpty!1022 (= condMapEmpty!1031 (= mapRest!1022 ((as const (Array (_ BitVec 32) ValueCell!311)) mapDefault!1031)))))

(declare-fun e!15160 () Bool)

(assert (=> mapNonEmpty!1022 (= tp!3518 (and e!15160 mapRes!1031))))

(declare-fun b!23354 () Bool)

(assert (=> b!23354 (= e!15160 tp_is_empty!1021)))

(declare-fun b!23353 () Bool)

(assert (=> b!23353 (= e!15161 tp_is_empty!1021)))

(assert (= (and mapNonEmpty!1022 condMapEmpty!1031) mapIsEmpty!1031))

(assert (= (and mapNonEmpty!1022 (not condMapEmpty!1031)) mapNonEmpty!1031))

(assert (= (and mapNonEmpty!1031 ((_ is ValueCellFull!311) mapValue!1031)) b!23353))

(assert (= (and mapNonEmpty!1022 ((_ is ValueCellFull!311) mapDefault!1031)) b!23354))

(declare-fun m!16872 () Bool)

(assert (=> mapNonEmpty!1031 m!16872))

(declare-fun b_lambda!1567 () Bool)

(assert (= b_lambda!1563 (or (and b!23067 b_free!757) b_lambda!1567)))

(declare-fun b_lambda!1569 () Bool)

(assert (= b_lambda!1565 (or (and b!23067 b_free!757) b_lambda!1569)))

(check-sat (not bm!1908) (not bm!1927) (not bm!1952) (not b!23310) (not mapNonEmpty!1031) (not bm!1944) (not d!3953) (not bm!1932) (not d!3951) (not d!3949) (not b!23253) (not b!23294) (not bm!1909) (not bm!1919) (not b!23344) (not b!23346) tp_is_empty!1021 (not bm!1926) (not b!23241) (not bm!1951) (not bm!1920) (not bm!1911) (not bm!1943) (not b_next!757) (not bm!1924) (not bm!1923) (not bm!1933) (not b!23345) (not bm!1928) (not b!23314) b_and!1481 (not bm!1947) (not bm!1950) (not b!23322) (not bm!1948) (not b!23277) (not b!23245) (not b!23275) (not d!3961) (not b!23276) (not d!3947) (not b_lambda!1567) (not bm!1945) (not bm!1939) (not b!23295) (not bm!1935) (not b!23290) (not bm!1915) (not bm!1921) (not b_lambda!1569) (not b!23304))
(check-sat b_and!1481 (not b_next!757))
(get-model)

(declare-fun d!3963 () Bool)

(assert (=> d!3963 (= (inRange!0 (ite c!2995 (ite c!3001 (index!2342 lt!8350) (ite c!2994 (index!2341 lt!8359) (index!2344 lt!8359))) (ite c!2992 (index!2342 lt!8354) (ite c!2997 (index!2341 lt!8341) (index!2344 lt!8341)))) (mask!4729 (_2!487 lt!8138))) (and (bvsge (ite c!2995 (ite c!3001 (index!2342 lt!8350) (ite c!2994 (index!2341 lt!8359) (index!2344 lt!8359))) (ite c!2992 (index!2342 lt!8354) (ite c!2997 (index!2341 lt!8341) (index!2344 lt!8341)))) #b00000000000000000000000000000000) (bvslt (ite c!2995 (ite c!3001 (index!2342 lt!8350) (ite c!2994 (index!2341 lt!8359) (index!2344 lt!8359))) (ite c!2992 (index!2342 lt!8354) (ite c!2997 (index!2341 lt!8341) (index!2344 lt!8341)))) (bvadd (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000000001))))))

(assert (=> bm!1935 d!3963))

(declare-fun b!23371 () Bool)

(declare-fun e!15172 () Bool)

(declare-fun e!15173 () Bool)

(assert (=> b!23371 (= e!15172 e!15173)))

(declare-fun c!3007 () Bool)

(declare-fun lt!8366 () SeekEntryResult!55)

(assert (=> b!23371 (= c!3007 ((_ is MissingVacant!55) lt!8366))))

(declare-fun bm!1960 () Bool)

(declare-fun call!1964 () Bool)

(assert (=> bm!1960 (= call!1964 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun call!1963 () Bool)

(declare-fun bm!1961 () Bool)

(declare-fun c!3006 () Bool)

(assert (=> bm!1961 (= call!1963 (inRange!0 (ite c!3006 (index!2341 lt!8366) (index!2344 lt!8366)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!23372 () Bool)

(declare-fun e!15170 () Bool)

(assert (=> b!23372 (= e!15170 (not call!1964))))

(declare-fun b!23373 () Bool)

(assert (=> b!23373 (= e!15173 ((_ is Undefined!55) lt!8366))))

(declare-fun b!23375 () Bool)

(declare-fun res!14384 () Bool)

(declare-fun e!15171 () Bool)

(assert (=> b!23375 (=> (not res!14384) (not e!15171))))

(assert (=> b!23375 (= res!14384 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2344 lt!8366)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23375 (and (bvsge (index!2344 lt!8366) #b00000000000000000000000000000000) (bvslt (index!2344 lt!8366) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23376 () Bool)

(assert (=> b!23376 (= e!15172 e!15170)))

(declare-fun res!14385 () Bool)

(assert (=> b!23376 (= res!14385 call!1963)))

(assert (=> b!23376 (=> (not res!14385) (not e!15170))))

(declare-fun b!23377 () Bool)

(declare-fun res!14386 () Bool)

(assert (=> b!23377 (=> (not res!14386) (not e!15171))))

(assert (=> b!23377 (= res!14386 call!1963)))

(assert (=> b!23377 (= e!15173 e!15171)))

(declare-fun b!23378 () Bool)

(assert (=> b!23378 (and (bvsge (index!2341 lt!8366) #b00000000000000000000000000000000) (bvslt (index!2341 lt!8366) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun res!14387 () Bool)

(assert (=> b!23378 (= res!14387 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2341 lt!8366)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23378 (=> (not res!14387) (not e!15170))))

(declare-fun b!23374 () Bool)

(assert (=> b!23374 (= e!15171 (not call!1964))))

(declare-fun d!3965 () Bool)

(assert (=> d!3965 e!15172))

(assert (=> d!3965 (= c!3006 ((_ is MissingZero!55) lt!8366))))

(assert (=> d!3965 (= lt!8366 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun lt!8365 () Unit!519)

(declare-fun choose!203 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!519)

(assert (=> d!3965 (= lt!8365 (choose!203 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!3965 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!3965 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!8365)))

(assert (= (and d!3965 c!3006) b!23376))

(assert (= (and d!3965 (not c!3006)) b!23371))

(assert (= (and b!23376 res!14385) b!23378))

(assert (= (and b!23378 res!14387) b!23372))

(assert (= (and b!23371 c!3007) b!23377))

(assert (= (and b!23371 (not c!3007)) b!23373))

(assert (= (and b!23377 res!14386) b!23375))

(assert (= (and b!23375 res!14384) b!23374))

(assert (= (or b!23376 b!23377) bm!1961))

(assert (= (or b!23372 b!23374) bm!1960))

(assert (=> bm!1960 m!16860))

(declare-fun m!16874 () Bool)

(assert (=> b!23378 m!16874))

(assert (=> d!3965 m!16846))

(declare-fun m!16876 () Bool)

(assert (=> d!3965 m!16876))

(declare-fun m!16878 () Bool)

(assert (=> d!3965 m!16878))

(declare-fun m!16880 () Bool)

(assert (=> bm!1961 m!16880))

(declare-fun m!16882 () Bool)

(assert (=> b!23375 m!16882))

(assert (=> bm!1952 d!3965))

(declare-fun d!3967 () Bool)

(declare-fun e!15179 () Bool)

(assert (=> d!3967 e!15179))

(declare-fun res!14390 () Bool)

(assert (=> d!3967 (=> res!14390 e!15179)))

(declare-fun lt!8378 () Bool)

(assert (=> d!3967 (= res!14390 (not lt!8378))))

(declare-fun lt!8377 () Bool)

(assert (=> d!3967 (= lt!8378 lt!8377)))

(declare-fun lt!8376 () Unit!519)

(declare-fun e!15178 () Unit!519)

(assert (=> d!3967 (= lt!8376 e!15178)))

(declare-fun c!3010 () Bool)

(assert (=> d!3967 (= c!3010 lt!8377)))

(declare-fun containsKey!24 (List!565 (_ BitVec 64)) Bool)

(assert (=> d!3967 (= lt!8377 (containsKey!24 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!3967 (= (contains!230 call!1958 #b1000000000000000000000000000000000000000000000000000000000000000) lt!8378)))

(declare-fun b!23385 () Bool)

(declare-fun lt!8375 () Unit!519)

(assert (=> b!23385 (= e!15178 lt!8375)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!21 (List!565 (_ BitVec 64)) Unit!519)

(assert (=> b!23385 (= lt!8375 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-datatypes ((Option!66 0))(
  ( (Some!65 (v!1610 V!1187)) (None!64) )
))
(declare-fun isDefined!22 (Option!66) Bool)

(declare-fun getValueByKey!60 (List!565 (_ BitVec 64)) Option!66)

(assert (=> b!23385 (isDefined!22 (getValueByKey!60 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23386 () Bool)

(declare-fun Unit!530 () Unit!519)

(assert (=> b!23386 (= e!15178 Unit!530)))

(declare-fun b!23387 () Bool)

(assert (=> b!23387 (= e!15179 (isDefined!22 (getValueByKey!60 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!3967 c!3010) b!23385))

(assert (= (and d!3967 (not c!3010)) b!23386))

(assert (= (and d!3967 (not res!14390)) b!23387))

(declare-fun m!16884 () Bool)

(assert (=> d!3967 m!16884))

(declare-fun m!16886 () Bool)

(assert (=> b!23385 m!16886))

(declare-fun m!16888 () Bool)

(assert (=> b!23385 m!16888))

(assert (=> b!23385 m!16888))

(declare-fun m!16890 () Bool)

(assert (=> b!23385 m!16890))

(assert (=> b!23387 m!16888))

(assert (=> b!23387 m!16888))

(assert (=> b!23387 m!16890))

(assert (=> b!23314 d!3967))

(declare-fun d!3969 () Bool)

(declare-fun res!14397 () Bool)

(declare-fun e!15182 () Bool)

(assert (=> d!3969 (=> (not res!14397) (not e!15182))))

(declare-fun simpleValid!20 (LongMapFixedSize!208) Bool)

(assert (=> d!3969 (= res!14397 (simpleValid!20 (_2!487 lt!8234)))))

(assert (=> d!3969 (= (valid!116 (_2!487 lt!8234)) e!15182)))

(declare-fun b!23394 () Bool)

(declare-fun res!14398 () Bool)

(assert (=> b!23394 (=> (not res!14398) (not e!15182))))

(assert (=> b!23394 (= res!14398 (= (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8234)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))) (_size!149 (_2!487 lt!8234))))))

(declare-fun b!23395 () Bool)

(declare-fun res!14399 () Bool)

(assert (=> b!23395 (=> (not res!14399) (not e!15182))))

(assert (=> b!23395 (= res!14399 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234))))))

(declare-fun b!23396 () Bool)

(assert (=> b!23396 (= e!15182 (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8234)) #b00000000000000000000000000000000 Nil!563))))

(assert (= (and d!3969 res!14397) b!23394))

(assert (= (and b!23394 res!14398) b!23395))

(assert (= (and b!23395 res!14399) b!23396))

(declare-fun m!16892 () Bool)

(assert (=> d!3969 m!16892))

(declare-fun m!16894 () Bool)

(assert (=> b!23394 m!16894))

(declare-fun m!16896 () Bool)

(assert (=> b!23395 m!16896))

(declare-fun m!16898 () Bool)

(assert (=> b!23396 m!16898))

(assert (=> d!3947 d!3969))

(declare-fun d!3971 () Bool)

(declare-fun res!14400 () Bool)

(declare-fun e!15183 () Bool)

(assert (=> d!3971 (=> (not res!14400) (not e!15183))))

(assert (=> d!3971 (= res!14400 (simpleValid!20 lt!8141))))

(assert (=> d!3971 (= (valid!116 lt!8141) e!15183)))

(declare-fun b!23397 () Bool)

(declare-fun res!14401 () Bool)

(assert (=> b!23397 (=> (not res!14401) (not e!15183))))

(assert (=> b!23397 (= res!14401 (= (arrayCountValidKeys!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (_size!149 lt!8141)))))

(declare-fun b!23398 () Bool)

(declare-fun res!14402 () Bool)

(assert (=> b!23398 (=> (not res!14402) (not e!15183))))

(assert (=> b!23398 (= res!14402 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!23399 () Bool)

(assert (=> b!23399 (= e!15183 (arrayNoDuplicates!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 Nil!563))))

(assert (= (and d!3971 res!14400) b!23397))

(assert (= (and b!23397 res!14401) b!23398))

(assert (= (and b!23398 res!14402) b!23399))

(declare-fun m!16900 () Bool)

(assert (=> d!3971 m!16900))

(declare-fun m!16902 () Bool)

(assert (=> b!23397 m!16902))

(declare-fun m!16904 () Bool)

(assert (=> b!23398 m!16904))

(declare-fun m!16906 () Bool)

(assert (=> b!23399 m!16906))

(assert (=> d!3947 d!3971))

(declare-fun b!23442 () Bool)

(declare-fun e!15218 () ListLongMap!565)

(declare-fun call!1981 () ListLongMap!565)

(assert (=> b!23442 (= e!15218 call!1981)))

(declare-fun bm!1976 () Bool)

(declare-fun call!1982 () ListLongMap!565)

(declare-fun call!1984 () ListLongMap!565)

(assert (=> bm!1976 (= call!1982 call!1984)))

(declare-fun b!23443 () Bool)

(declare-fun e!15214 () Bool)

(declare-fun e!15222 () Bool)

(assert (=> b!23443 (= e!15214 e!15222)))

(declare-fun c!3024 () Bool)

(assert (=> b!23443 (= c!3024 (not (= (bvand (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23444 () Bool)

(declare-fun e!15213 () Bool)

(declare-fun lt!8427 () ListLongMap!565)

(declare-fun apply!29 (ListLongMap!565 (_ BitVec 64)) V!1187)

(declare-fun get!390 (ValueCell!311 V!1187) V!1187)

(assert (=> b!23444 (= e!15213 (= (apply!29 lt!8427 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23444 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!487 lt!8138)))))))

(assert (=> b!23444 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun bm!1977 () Bool)

(declare-fun c!3026 () Bool)

(declare-fun c!3025 () Bool)

(declare-fun call!1983 () ListLongMap!565)

(declare-fun call!1980 () ListLongMap!565)

(assert (=> bm!1977 (= call!1984 (+!45 (ite c!3025 call!1983 (ite c!3026 call!1980 call!1981)) (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!23445 () Bool)

(declare-fun res!14426 () Bool)

(assert (=> b!23445 (=> (not res!14426) (not e!15214))))

(declare-fun e!15219 () Bool)

(assert (=> b!23445 (= res!14426 e!15219)))

(declare-fun c!3023 () Bool)

(assert (=> b!23445 (= c!3023 (not (= (bvand (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!1978 () Bool)

(declare-fun call!1979 () Bool)

(assert (=> bm!1978 (= call!1979 (contains!230 lt!8427 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23446 () Bool)

(declare-fun e!15211 () Bool)

(assert (=> b!23446 (= e!15222 e!15211)))

(declare-fun res!14424 () Bool)

(declare-fun call!1985 () Bool)

(assert (=> b!23446 (= res!14424 call!1985)))

(assert (=> b!23446 (=> (not res!14424) (not e!15211))))

(declare-fun b!23447 () Bool)

(declare-fun e!15217 () Unit!519)

(declare-fun Unit!531 () Unit!519)

(assert (=> b!23447 (= e!15217 Unit!531)))

(declare-fun b!23448 () Bool)

(assert (=> b!23448 (= e!15222 (not call!1985))))

(declare-fun b!23449 () Bool)

(declare-fun e!15220 () Bool)

(assert (=> b!23449 (= e!15220 (= (apply!29 lt!8427 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))))

(declare-fun bm!1979 () Bool)

(assert (=> bm!1979 (= call!1985 (contains!230 lt!8427 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23450 () Bool)

(assert (=> b!23450 (= e!15219 (not call!1979))))

(declare-fun d!3973 () Bool)

(assert (=> d!3973 e!15214))

(declare-fun res!14423 () Bool)

(assert (=> d!3973 (=> (not res!14423) (not e!15214))))

(assert (=> d!3973 (= res!14423 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun lt!8442 () ListLongMap!565)

(assert (=> d!3973 (= lt!8427 lt!8442)))

(declare-fun lt!8434 () Unit!519)

(assert (=> d!3973 (= lt!8434 e!15217)))

(declare-fun c!3027 () Bool)

(declare-fun e!15221 () Bool)

(assert (=> d!3973 (= c!3027 e!15221)))

(declare-fun res!14427 () Bool)

(assert (=> d!3973 (=> (not res!14427) (not e!15221))))

(assert (=> d!3973 (= res!14427 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun e!15215 () ListLongMap!565)

(assert (=> d!3973 (= lt!8442 e!15215)))

(assert (=> d!3973 (= c!3025 (and (not (= (bvand (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!3973 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!3973 (= (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!8427)))

(declare-fun b!23451 () Bool)

(assert (=> b!23451 (= e!15211 (= (apply!29 lt!8427 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))

(declare-fun b!23452 () Bool)

(assert (=> b!23452 (= e!15215 (+!45 call!1984 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun b!23453 () Bool)

(declare-fun e!15216 () Bool)

(assert (=> b!23453 (= e!15216 e!15213)))

(declare-fun res!14428 () Bool)

(assert (=> b!23453 (=> (not res!14428) (not e!15213))))

(assert (=> b!23453 (= res!14428 (contains!230 lt!8427 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!23453 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23454 () Bool)

(declare-fun res!14425 () Bool)

(assert (=> b!23454 (=> (not res!14425) (not e!15214))))

(assert (=> b!23454 (= res!14425 e!15216)))

(declare-fun res!14429 () Bool)

(assert (=> b!23454 (=> res!14429 e!15216)))

(declare-fun e!15212 () Bool)

(assert (=> b!23454 (= res!14429 (not e!15212))))

(declare-fun res!14422 () Bool)

(assert (=> b!23454 (=> (not res!14422) (not e!15212))))

(assert (=> b!23454 (= res!14422 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23455 () Bool)

(assert (=> b!23455 (= e!15218 call!1982)))

(declare-fun b!23456 () Bool)

(declare-fun lt!8424 () Unit!519)

(assert (=> b!23456 (= e!15217 lt!8424)))

(declare-fun lt!8438 () ListLongMap!565)

(declare-fun getCurrentListMapNoExtraKeys!15 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) Int) ListLongMap!565)

(assert (=> b!23456 (= lt!8438 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8423 () (_ BitVec 64))

(assert (=> b!23456 (= lt!8423 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8437 () (_ BitVec 64))

(assert (=> b!23456 (= lt!8437 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8443 () Unit!519)

(declare-fun addStillContains!14 (ListLongMap!565 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!519)

(assert (=> b!23456 (= lt!8443 (addStillContains!14 lt!8438 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) lt!8437))))

(assert (=> b!23456 (contains!230 (+!45 lt!8438 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) lt!8437)))

(declare-fun lt!8440 () Unit!519)

(assert (=> b!23456 (= lt!8440 lt!8443)))

(declare-fun lt!8444 () ListLongMap!565)

(assert (=> b!23456 (= lt!8444 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8433 () (_ BitVec 64))

(assert (=> b!23456 (= lt!8433 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8429 () (_ BitVec 64))

(assert (=> b!23456 (= lt!8429 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8435 () Unit!519)

(declare-fun addApplyDifferent!14 (ListLongMap!565 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!519)

(assert (=> b!23456 (= lt!8435 (addApplyDifferent!14 lt!8444 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) lt!8429))))

(assert (=> b!23456 (= (apply!29 (+!45 lt!8444 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) lt!8429) (apply!29 lt!8444 lt!8429))))

(declare-fun lt!8425 () Unit!519)

(assert (=> b!23456 (= lt!8425 lt!8435)))

(declare-fun lt!8436 () ListLongMap!565)

(assert (=> b!23456 (= lt!8436 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8430 () (_ BitVec 64))

(assert (=> b!23456 (= lt!8430 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8432 () (_ BitVec 64))

(assert (=> b!23456 (= lt!8432 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8431 () Unit!519)

(assert (=> b!23456 (= lt!8431 (addApplyDifferent!14 lt!8436 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) lt!8432))))

(assert (=> b!23456 (= (apply!29 (+!45 lt!8436 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) lt!8432) (apply!29 lt!8436 lt!8432))))

(declare-fun lt!8426 () Unit!519)

(assert (=> b!23456 (= lt!8426 lt!8431)))

(declare-fun lt!8441 () ListLongMap!565)

(assert (=> b!23456 (= lt!8441 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8439 () (_ BitVec 64))

(assert (=> b!23456 (= lt!8439 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8428 () (_ BitVec 64))

(assert (=> b!23456 (= lt!8428 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(assert (=> b!23456 (= lt!8424 (addApplyDifferent!14 lt!8441 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) lt!8428))))

(assert (=> b!23456 (= (apply!29 (+!45 lt!8441 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) lt!8428) (apply!29 lt!8441 lt!8428))))

(declare-fun b!23457 () Bool)

(declare-fun e!15210 () ListLongMap!565)

(assert (=> b!23457 (= e!15210 call!1982)))

(declare-fun b!23458 () Bool)

(assert (=> b!23458 (= e!15215 e!15210)))

(assert (=> b!23458 (= c!3026 (and (not (= (bvand (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun c!3028 () Bool)

(declare-fun b!23459 () Bool)

(assert (=> b!23459 (= c!3028 (and (not (= (bvand (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23459 (= e!15210 e!15218)))

(declare-fun bm!1980 () Bool)

(assert (=> bm!1980 (= call!1981 call!1980)))

(declare-fun bm!1981 () Bool)

(assert (=> bm!1981 (= call!1980 call!1983)))

(declare-fun b!23460 () Bool)

(assert (=> b!23460 (= e!15219 e!15220)))

(declare-fun res!14421 () Bool)

(assert (=> b!23460 (= res!14421 call!1979)))

(assert (=> b!23460 (=> (not res!14421) (not e!15220))))

(declare-fun b!23461 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!23461 (= e!15221 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun bm!1982 () Bool)

(assert (=> bm!1982 (= call!1983 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!23462 () Bool)

(assert (=> b!23462 (= e!15212 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (= (and d!3973 c!3025) b!23452))

(assert (= (and d!3973 (not c!3025)) b!23458))

(assert (= (and b!23458 c!3026) b!23457))

(assert (= (and b!23458 (not c!3026)) b!23459))

(assert (= (and b!23459 c!3028) b!23455))

(assert (= (and b!23459 (not c!3028)) b!23442))

(assert (= (or b!23455 b!23442) bm!1980))

(assert (= (or b!23457 bm!1980) bm!1981))

(assert (= (or b!23457 b!23455) bm!1976))

(assert (= (or b!23452 bm!1981) bm!1982))

(assert (= (or b!23452 bm!1976) bm!1977))

(assert (= (and d!3973 res!14427) b!23461))

(assert (= (and d!3973 c!3027) b!23456))

(assert (= (and d!3973 (not c!3027)) b!23447))

(assert (= (and d!3973 res!14423) b!23454))

(assert (= (and b!23454 res!14422) b!23462))

(assert (= (and b!23454 (not res!14429)) b!23453))

(assert (= (and b!23453 res!14428) b!23444))

(assert (= (and b!23454 res!14425) b!23445))

(assert (= (and b!23445 c!3023) b!23460))

(assert (= (and b!23445 (not c!3023)) b!23450))

(assert (= (and b!23460 res!14421) b!23449))

(assert (= (or b!23460 b!23450) bm!1978))

(assert (= (and b!23445 res!14426) b!23443))

(assert (= (and b!23443 c!3024) b!23446))

(assert (= (and b!23443 (not c!3024)) b!23448))

(assert (= (and b!23446 res!14424) b!23451))

(assert (= (or b!23446 b!23448) bm!1979))

(declare-fun b_lambda!1571 () Bool)

(assert (=> (not b_lambda!1571) (not b!23444)))

(declare-fun t!3232 () Bool)

(declare-fun tb!653 () Bool)

(assert (=> (and b!23067 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))) t!3232) tb!653))

(declare-fun result!1093 () Bool)

(assert (=> tb!653 (= result!1093 tp_is_empty!1021)))

(assert (=> b!23444 t!3232))

(declare-fun b_and!1483 () Bool)

(assert (= b_and!1481 (and (=> t!3232 result!1093) b_and!1483)))

(declare-fun m!16908 () Bool)

(assert (=> b!23453 m!16908))

(assert (=> b!23453 m!16908))

(declare-fun m!16910 () Bool)

(assert (=> b!23453 m!16910))

(declare-fun m!16912 () Bool)

(assert (=> b!23452 m!16912))

(declare-fun m!16914 () Bool)

(assert (=> b!23444 m!16914))

(declare-fun m!16916 () Bool)

(assert (=> b!23444 m!16916))

(declare-fun m!16918 () Bool)

(assert (=> b!23444 m!16918))

(assert (=> b!23444 m!16908))

(declare-fun m!16920 () Bool)

(assert (=> b!23444 m!16920))

(assert (=> b!23444 m!16908))

(assert (=> b!23444 m!16914))

(assert (=> b!23444 m!16916))

(assert (=> b!23461 m!16908))

(assert (=> b!23461 m!16908))

(declare-fun m!16922 () Bool)

(assert (=> b!23461 m!16922))

(declare-fun m!16924 () Bool)

(assert (=> bm!1977 m!16924))

(assert (=> b!23462 m!16908))

(assert (=> b!23462 m!16908))

(assert (=> b!23462 m!16922))

(declare-fun m!16926 () Bool)

(assert (=> bm!1978 m!16926))

(declare-fun m!16928 () Bool)

(assert (=> b!23451 m!16928))

(declare-fun m!16930 () Bool)

(assert (=> bm!1979 m!16930))

(declare-fun m!16932 () Bool)

(assert (=> b!23449 m!16932))

(declare-fun m!16934 () Bool)

(assert (=> bm!1982 m!16934))

(assert (=> d!3973 m!16878))

(declare-fun m!16936 () Bool)

(assert (=> b!23456 m!16936))

(declare-fun m!16938 () Bool)

(assert (=> b!23456 m!16938))

(declare-fun m!16940 () Bool)

(assert (=> b!23456 m!16940))

(declare-fun m!16942 () Bool)

(assert (=> b!23456 m!16942))

(declare-fun m!16944 () Bool)

(assert (=> b!23456 m!16944))

(assert (=> b!23456 m!16934))

(assert (=> b!23456 m!16938))

(assert (=> b!23456 m!16908))

(declare-fun m!16946 () Bool)

(assert (=> b!23456 m!16946))

(declare-fun m!16948 () Bool)

(assert (=> b!23456 m!16948))

(declare-fun m!16950 () Bool)

(assert (=> b!23456 m!16950))

(assert (=> b!23456 m!16948))

(declare-fun m!16952 () Bool)

(assert (=> b!23456 m!16952))

(declare-fun m!16954 () Bool)

(assert (=> b!23456 m!16954))

(declare-fun m!16956 () Bool)

(assert (=> b!23456 m!16956))

(declare-fun m!16958 () Bool)

(assert (=> b!23456 m!16958))

(assert (=> b!23456 m!16958))

(declare-fun m!16960 () Bool)

(assert (=> b!23456 m!16960))

(assert (=> b!23456 m!16954))

(declare-fun m!16962 () Bool)

(assert (=> b!23456 m!16962))

(declare-fun m!16964 () Bool)

(assert (=> b!23456 m!16964))

(assert (=> bm!1945 d!3973))

(declare-fun d!3975 () Bool)

(declare-fun e!15224 () Bool)

(assert (=> d!3975 e!15224))

(declare-fun res!14430 () Bool)

(assert (=> d!3975 (=> res!14430 e!15224)))

(declare-fun lt!8448 () Bool)

(assert (=> d!3975 (= res!14430 (not lt!8448))))

(declare-fun lt!8447 () Bool)

(assert (=> d!3975 (= lt!8448 lt!8447)))

(declare-fun lt!8446 () Unit!519)

(declare-fun e!15223 () Unit!519)

(assert (=> d!3975 (= lt!8446 e!15223)))

(declare-fun c!3029 () Bool)

(assert (=> d!3975 (= c!3029 lt!8447)))

(assert (=> d!3975 (= lt!8447 (containsKey!24 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!3975 (= (contains!230 e!15144 #b1000000000000000000000000000000000000000000000000000000000000000) lt!8448)))

(declare-fun b!23463 () Bool)

(declare-fun lt!8445 () Unit!519)

(assert (=> b!23463 (= e!15223 lt!8445)))

(assert (=> b!23463 (= lt!8445 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23463 (isDefined!22 (getValueByKey!60 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23464 () Bool)

(declare-fun Unit!532 () Unit!519)

(assert (=> b!23464 (= e!15223 Unit!532)))

(declare-fun b!23465 () Bool)

(assert (=> b!23465 (= e!15224 (isDefined!22 (getValueByKey!60 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!3975 c!3029) b!23463))

(assert (= (and d!3975 (not c!3029)) b!23464))

(assert (= (and d!3975 (not res!14430)) b!23465))

(declare-fun m!16966 () Bool)

(assert (=> d!3975 m!16966))

(declare-fun m!16968 () Bool)

(assert (=> b!23463 m!16968))

(declare-fun m!16970 () Bool)

(assert (=> b!23463 m!16970))

(assert (=> b!23463 m!16970))

(declare-fun m!16972 () Bool)

(assert (=> b!23463 m!16972))

(assert (=> b!23465 m!16970))

(assert (=> b!23465 m!16970))

(assert (=> b!23465 m!16972))

(assert (=> bm!1950 d!3975))

(declare-fun d!3977 () Bool)

(assert (=> d!3977 (= (head!830 (toList!298 (map!408 lt!8305))) (h!1127 (toList!298 (map!408 lt!8305))))))

(assert (=> b!23295 d!3977))

(declare-fun d!3979 () Bool)

(assert (=> d!3979 (= (map!408 lt!8305) (getCurrentListMap!129 (_keys!3163 lt!8305) (_values!1728 lt!8305) (mask!4729 lt!8305) (extraKeys!1640 lt!8305) (zeroValue!1665 lt!8305) (minValue!1665 lt!8305) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8305)))))

(declare-fun bs!948 () Bool)

(assert (= bs!948 d!3979))

(declare-fun m!16974 () Bool)

(assert (=> bs!948 m!16974))

(assert (=> b!23295 d!3979))

(declare-fun d!3981 () Bool)

(declare-fun e!15227 () Bool)

(assert (=> d!3981 e!15227))

(declare-fun c!3032 () Bool)

(assert (=> d!3981 (= c!3032 (and (not (= (_1!493 lt!8312) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (_1!493 lt!8312) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!8451 () Unit!519)

(declare-fun choose!204 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!519)

(assert (=> d!3981 (= lt!8451 (choose!204 lt!8307 (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8318 (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (_1!493 lt!8312) (defaultEntry!1742 (v!1601 (underlying!115 thiss!938)))))))

(assert (=> d!3981 (validMask!0 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(assert (=> d!3981 (= (lemmaKeyInListMapIsInArray!97 lt!8307 (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8318 (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (_1!493 lt!8312) (defaultEntry!1742 (v!1601 (underlying!115 thiss!938)))) lt!8451)))

(declare-fun b!23470 () Bool)

(assert (=> b!23470 (= e!15227 (arrayContainsKey!0 lt!8307 (_1!493 lt!8312) #b00000000000000000000000000000000))))

(declare-fun b!23471 () Bool)

(assert (=> b!23471 (= e!15227 (ite (= (_1!493 lt!8312) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand lt!8318 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8318 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!3981 c!3032) b!23470))

(assert (= (and d!3981 (not c!3032)) b!23471))

(assert (=> d!3981 m!16662))

(assert (=> d!3981 m!16782))

(assert (=> d!3981 m!16782))

(declare-fun m!16976 () Bool)

(assert (=> d!3981 m!16976))

(assert (=> d!3981 m!16662))

(assert (=> d!3981 m!16794))

(assert (=> b!23470 m!16778))

(assert (=> b!23295 d!3981))

(declare-fun d!3983 () Bool)

(declare-fun lt!8454 () (_ BitVec 32))

(assert (=> d!3983 (and (or (bvslt lt!8454 #b00000000000000000000000000000000) (bvsge lt!8454 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (and (bvsge lt!8454 #b00000000000000000000000000000000) (bvslt lt!8454 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))) (bvsge lt!8454 #b00000000000000000000000000000000) (bvslt lt!8454 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (= (select (arr!597 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) lt!8454) (_1!493 lt!8312)))))

(declare-fun e!15230 () (_ BitVec 32))

(assert (=> d!3983 (= lt!8454 e!15230)))

(declare-fun c!3035 () Bool)

(assert (=> d!3983 (= c!3035 (= (select (arr!597 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) #b00000000000000000000000000000000) (_1!493 lt!8312)))))

(assert (=> d!3983 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (bvslt (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) #b01111111111111111111111111111111))))

(assert (=> d!3983 (= (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!493 lt!8312) #b00000000000000000000000000000000) lt!8454)))

(declare-fun b!23476 () Bool)

(assert (=> b!23476 (= e!15230 #b00000000000000000000000000000000)))

(declare-fun b!23477 () Bool)

(assert (=> b!23477 (= e!15230 (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!493 lt!8312) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!3983 c!3035) b!23476))

(assert (= (and d!3983 (not c!3035)) b!23477))

(declare-fun m!16978 () Bool)

(assert (=> d!3983 m!16978))

(declare-fun m!16980 () Bool)

(assert (=> d!3983 m!16980))

(declare-fun m!16982 () Bool)

(assert (=> b!23477 m!16982))

(assert (=> b!23295 d!3983))

(declare-fun b!23478 () Bool)

(declare-fun e!15239 () ListLongMap!565)

(declare-fun call!1988 () ListLongMap!565)

(assert (=> b!23478 (= e!15239 call!1988)))

(declare-fun bm!1983 () Bool)

(declare-fun call!1989 () ListLongMap!565)

(declare-fun call!1991 () ListLongMap!565)

(assert (=> bm!1983 (= call!1989 call!1991)))

(declare-fun b!23479 () Bool)

(declare-fun e!15235 () Bool)

(declare-fun e!15243 () Bool)

(assert (=> b!23479 (= e!15235 e!15243)))

(declare-fun c!3037 () Bool)

(assert (=> b!23479 (= c!3037 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun lt!8459 () ListLongMap!565)

(declare-fun e!15234 () Bool)

(declare-fun b!23480 () Bool)

(assert (=> b!23480 (= e!15234 (= (apply!29 lt!8459 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23480 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))))))))

(assert (=> b!23480 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun c!3038 () Bool)

(declare-fun c!3039 () Bool)

(declare-fun call!1990 () ListLongMap!565)

(declare-fun call!1987 () ListLongMap!565)

(declare-fun bm!1984 () Bool)

(assert (=> bm!1984 (= call!1991 (+!45 (ite c!3038 call!1990 (ite c!3039 call!1987 call!1988)) (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun b!23481 () Bool)

(declare-fun res!14436 () Bool)

(assert (=> b!23481 (=> (not res!14436) (not e!15235))))

(declare-fun e!15240 () Bool)

(assert (=> b!23481 (= res!14436 e!15240)))

(declare-fun c!3036 () Bool)

(assert (=> b!23481 (= c!3036 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!1985 () Bool)

(declare-fun call!1986 () Bool)

(assert (=> bm!1985 (= call!1986 (contains!230 lt!8459 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23482 () Bool)

(declare-fun e!15232 () Bool)

(assert (=> b!23482 (= e!15243 e!15232)))

(declare-fun res!14434 () Bool)

(declare-fun call!1992 () Bool)

(assert (=> b!23482 (= res!14434 call!1992)))

(assert (=> b!23482 (=> (not res!14434) (not e!15232))))

(declare-fun b!23483 () Bool)

(declare-fun e!15238 () Unit!519)

(declare-fun Unit!533 () Unit!519)

(assert (=> b!23483 (= e!15238 Unit!533)))

(declare-fun b!23484 () Bool)

(assert (=> b!23484 (= e!15243 (not call!1992))))

(declare-fun b!23485 () Bool)

(declare-fun e!15241 () Bool)

(assert (=> b!23485 (= e!15241 (= (apply!29 lt!8459 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!487 lt!8138))))))

(declare-fun bm!1986 () Bool)

(assert (=> bm!1986 (= call!1992 (contains!230 lt!8459 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23486 () Bool)

(assert (=> b!23486 (= e!15240 (not call!1986))))

(declare-fun d!3985 () Bool)

(assert (=> d!3985 e!15235))

(declare-fun res!14433 () Bool)

(assert (=> d!3985 (=> (not res!14433) (not e!15235))))

(assert (=> d!3985 (= res!14433 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun lt!8474 () ListLongMap!565)

(assert (=> d!3985 (= lt!8459 lt!8474)))

(declare-fun lt!8466 () Unit!519)

(assert (=> d!3985 (= lt!8466 e!15238)))

(declare-fun c!3040 () Bool)

(declare-fun e!15242 () Bool)

(assert (=> d!3985 (= c!3040 e!15242)))

(declare-fun res!14437 () Bool)

(assert (=> d!3985 (=> (not res!14437) (not e!15242))))

(assert (=> d!3985 (= res!14437 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun e!15236 () ListLongMap!565)

(assert (=> d!3985 (= lt!8474 e!15236)))

(assert (=> d!3985 (= c!3038 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!3985 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!3985 (= (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!8459)))

(declare-fun b!23487 () Bool)

(assert (=> b!23487 (= e!15232 (= (apply!29 lt!8459 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!487 lt!8138))))))

(declare-fun b!23488 () Bool)

(assert (=> b!23488 (= e!15236 (+!45 call!1991 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))

(declare-fun b!23489 () Bool)

(declare-fun e!15237 () Bool)

(assert (=> b!23489 (= e!15237 e!15234)))

(declare-fun res!14438 () Bool)

(assert (=> b!23489 (=> (not res!14438) (not e!15234))))

(assert (=> b!23489 (= res!14438 (contains!230 lt!8459 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!23489 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23490 () Bool)

(declare-fun res!14435 () Bool)

(assert (=> b!23490 (=> (not res!14435) (not e!15235))))

(assert (=> b!23490 (= res!14435 e!15237)))

(declare-fun res!14439 () Bool)

(assert (=> b!23490 (=> res!14439 e!15237)))

(declare-fun e!15233 () Bool)

(assert (=> b!23490 (= res!14439 (not e!15233))))

(declare-fun res!14432 () Bool)

(assert (=> b!23490 (=> (not res!14432) (not e!15233))))

(assert (=> b!23490 (= res!14432 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23491 () Bool)

(assert (=> b!23491 (= e!15239 call!1989)))

(declare-fun b!23492 () Bool)

(declare-fun lt!8456 () Unit!519)

(assert (=> b!23492 (= e!15238 lt!8456)))

(declare-fun lt!8470 () ListLongMap!565)

(assert (=> b!23492 (= lt!8470 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8455 () (_ BitVec 64))

(assert (=> b!23492 (= lt!8455 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8469 () (_ BitVec 64))

(assert (=> b!23492 (= lt!8469 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8475 () Unit!519)

(assert (=> b!23492 (= lt!8475 (addStillContains!14 lt!8470 lt!8455 (zeroValue!1665 (_2!487 lt!8138)) lt!8469))))

(assert (=> b!23492 (contains!230 (+!45 lt!8470 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138)))) lt!8469)))

(declare-fun lt!8472 () Unit!519)

(assert (=> b!23492 (= lt!8472 lt!8475)))

(declare-fun lt!8476 () ListLongMap!565)

(assert (=> b!23492 (= lt!8476 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8465 () (_ BitVec 64))

(assert (=> b!23492 (= lt!8465 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8461 () (_ BitVec 64))

(assert (=> b!23492 (= lt!8461 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8467 () Unit!519)

(assert (=> b!23492 (= lt!8467 (addApplyDifferent!14 lt!8476 lt!8465 (minValue!1665 (_2!487 lt!8138)) lt!8461))))

(assert (=> b!23492 (= (apply!29 (+!45 lt!8476 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138)))) lt!8461) (apply!29 lt!8476 lt!8461))))

(declare-fun lt!8457 () Unit!519)

(assert (=> b!23492 (= lt!8457 lt!8467)))

(declare-fun lt!8468 () ListLongMap!565)

(assert (=> b!23492 (= lt!8468 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8462 () (_ BitVec 64))

(assert (=> b!23492 (= lt!8462 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8464 () (_ BitVec 64))

(assert (=> b!23492 (= lt!8464 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8463 () Unit!519)

(assert (=> b!23492 (= lt!8463 (addApplyDifferent!14 lt!8468 lt!8462 (zeroValue!1665 (_2!487 lt!8138)) lt!8464))))

(assert (=> b!23492 (= (apply!29 (+!45 lt!8468 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138)))) lt!8464) (apply!29 lt!8468 lt!8464))))

(declare-fun lt!8458 () Unit!519)

(assert (=> b!23492 (= lt!8458 lt!8463)))

(declare-fun lt!8473 () ListLongMap!565)

(assert (=> b!23492 (= lt!8473 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8471 () (_ BitVec 64))

(assert (=> b!23492 (= lt!8471 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8460 () (_ BitVec 64))

(assert (=> b!23492 (= lt!8460 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(assert (=> b!23492 (= lt!8456 (addApplyDifferent!14 lt!8473 lt!8471 (minValue!1665 (_2!487 lt!8138)) lt!8460))))

(assert (=> b!23492 (= (apply!29 (+!45 lt!8473 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138)))) lt!8460) (apply!29 lt!8473 lt!8460))))

(declare-fun b!23493 () Bool)

(declare-fun e!15231 () ListLongMap!565)

(assert (=> b!23493 (= e!15231 call!1989)))

(declare-fun b!23494 () Bool)

(assert (=> b!23494 (= e!15236 e!15231)))

(assert (=> b!23494 (= c!3039 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23495 () Bool)

(declare-fun c!3041 () Bool)

(assert (=> b!23495 (= c!3041 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23495 (= e!15231 e!15239)))

(declare-fun bm!1987 () Bool)

(assert (=> bm!1987 (= call!1988 call!1987)))

(declare-fun bm!1988 () Bool)

(assert (=> bm!1988 (= call!1987 call!1990)))

(declare-fun b!23496 () Bool)

(assert (=> b!23496 (= e!15240 e!15241)))

(declare-fun res!14431 () Bool)

(assert (=> b!23496 (= res!14431 call!1986)))

(assert (=> b!23496 (=> (not res!14431) (not e!15241))))

(declare-fun b!23497 () Bool)

(assert (=> b!23497 (= e!15242 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun bm!1989 () Bool)

(assert (=> bm!1989 (= call!1990 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!23498 () Bool)

(assert (=> b!23498 (= e!15233 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (= (and d!3985 c!3038) b!23488))

(assert (= (and d!3985 (not c!3038)) b!23494))

(assert (= (and b!23494 c!3039) b!23493))

(assert (= (and b!23494 (not c!3039)) b!23495))

(assert (= (and b!23495 c!3041) b!23491))

(assert (= (and b!23495 (not c!3041)) b!23478))

(assert (= (or b!23491 b!23478) bm!1987))

(assert (= (or b!23493 bm!1987) bm!1988))

(assert (= (or b!23493 b!23491) bm!1983))

(assert (= (or b!23488 bm!1988) bm!1989))

(assert (= (or b!23488 bm!1983) bm!1984))

(assert (= (and d!3985 res!14437) b!23497))

(assert (= (and d!3985 c!3040) b!23492))

(assert (= (and d!3985 (not c!3040)) b!23483))

(assert (= (and d!3985 res!14433) b!23490))

(assert (= (and b!23490 res!14432) b!23498))

(assert (= (and b!23490 (not res!14439)) b!23489))

(assert (= (and b!23489 res!14438) b!23480))

(assert (= (and b!23490 res!14435) b!23481))

(assert (= (and b!23481 c!3036) b!23496))

(assert (= (and b!23481 (not c!3036)) b!23486))

(assert (= (and b!23496 res!14431) b!23485))

(assert (= (or b!23496 b!23486) bm!1985))

(assert (= (and b!23481 res!14436) b!23479))

(assert (= (and b!23479 c!3037) b!23482))

(assert (= (and b!23479 (not c!3037)) b!23484))

(assert (= (and b!23482 res!14434) b!23487))

(assert (= (or b!23482 b!23484) bm!1986))

(declare-fun b_lambda!1573 () Bool)

(assert (=> (not b_lambda!1573) (not b!23480)))

(assert (=> b!23480 t!3232))

(declare-fun b_and!1485 () Bool)

(assert (= b_and!1483 (and (=> t!3232 result!1093) b_and!1485)))

(assert (=> b!23489 m!16908))

(assert (=> b!23489 m!16908))

(declare-fun m!16984 () Bool)

(assert (=> b!23489 m!16984))

(declare-fun m!16986 () Bool)

(assert (=> b!23488 m!16986))

(declare-fun m!16988 () Bool)

(assert (=> b!23480 m!16988))

(assert (=> b!23480 m!16916))

(declare-fun m!16990 () Bool)

(assert (=> b!23480 m!16990))

(assert (=> b!23480 m!16908))

(declare-fun m!16992 () Bool)

(assert (=> b!23480 m!16992))

(assert (=> b!23480 m!16908))

(assert (=> b!23480 m!16988))

(assert (=> b!23480 m!16916))

(assert (=> b!23497 m!16908))

(assert (=> b!23497 m!16908))

(assert (=> b!23497 m!16922))

(declare-fun m!16994 () Bool)

(assert (=> bm!1984 m!16994))

(assert (=> b!23498 m!16908))

(assert (=> b!23498 m!16908))

(assert (=> b!23498 m!16922))

(declare-fun m!16996 () Bool)

(assert (=> bm!1985 m!16996))

(declare-fun m!16998 () Bool)

(assert (=> b!23487 m!16998))

(declare-fun m!17000 () Bool)

(assert (=> bm!1986 m!17000))

(declare-fun m!17002 () Bool)

(assert (=> b!23485 m!17002))

(declare-fun m!17004 () Bool)

(assert (=> bm!1989 m!17004))

(assert (=> d!3985 m!16878))

(declare-fun m!17006 () Bool)

(assert (=> b!23492 m!17006))

(declare-fun m!17008 () Bool)

(assert (=> b!23492 m!17008))

(declare-fun m!17010 () Bool)

(assert (=> b!23492 m!17010))

(declare-fun m!17012 () Bool)

(assert (=> b!23492 m!17012))

(declare-fun m!17014 () Bool)

(assert (=> b!23492 m!17014))

(assert (=> b!23492 m!17004))

(assert (=> b!23492 m!17008))

(assert (=> b!23492 m!16908))

(declare-fun m!17016 () Bool)

(assert (=> b!23492 m!17016))

(declare-fun m!17018 () Bool)

(assert (=> b!23492 m!17018))

(declare-fun m!17020 () Bool)

(assert (=> b!23492 m!17020))

(assert (=> b!23492 m!17018))

(declare-fun m!17022 () Bool)

(assert (=> b!23492 m!17022))

(declare-fun m!17024 () Bool)

(assert (=> b!23492 m!17024))

(declare-fun m!17026 () Bool)

(assert (=> b!23492 m!17026))

(declare-fun m!17028 () Bool)

(assert (=> b!23492 m!17028))

(assert (=> b!23492 m!17028))

(declare-fun m!17030 () Bool)

(assert (=> b!23492 m!17030))

(assert (=> b!23492 m!17024))

(declare-fun m!17032 () Bool)

(assert (=> b!23492 m!17032))

(declare-fun m!17034 () Bool)

(assert (=> b!23492 m!17034))

(assert (=> bm!1951 d!3985))

(declare-fun d!3987 () Bool)

(assert (=> d!3987 (= (map!408 (_2!487 lt!8138)) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun bs!949 () Bool)

(assert (= bs!949 d!3987))

(declare-fun m!17036 () Bool)

(assert (=> bs!949 m!17036))

(assert (=> bm!1944 d!3987))

(declare-fun d!3989 () Bool)

(declare-fun e!15246 () Bool)

(assert (=> d!3989 e!15246))

(declare-fun res!14444 () Bool)

(assert (=> d!3989 (=> (not res!14444) (not e!15246))))

(declare-fun lt!8487 () ListLongMap!565)

(assert (=> d!3989 (= res!14444 (contains!230 lt!8487 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun lt!8485 () List!565)

(assert (=> d!3989 (= lt!8487 (ListLongMap!566 lt!8485))))

(declare-fun lt!8486 () Unit!519)

(declare-fun lt!8488 () Unit!519)

(assert (=> d!3989 (= lt!8486 lt!8488)))

(assert (=> d!3989 (= (getValueByKey!60 lt!8485 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))) (Some!65 (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!18 (List!565 (_ BitVec 64) V!1187) Unit!519)

(assert (=> d!3989 (= lt!8488 (lemmaContainsTupThenGetReturnValue!18 lt!8485 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun insertStrictlySorted!18 (List!565 (_ BitVec 64) V!1187) List!565)

(assert (=> d!3989 (= lt!8485 (insertStrictlySorted!18 (toList!298 (ite c!2967 call!1926 call!1913)) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (=> d!3989 (= (+!45 (ite c!2967 call!1926 call!1913) (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) lt!8487)))

(declare-fun b!23503 () Bool)

(declare-fun res!14445 () Bool)

(assert (=> b!23503 (=> (not res!14445) (not e!15246))))

(assert (=> b!23503 (= res!14445 (= (getValueByKey!60 (toList!298 lt!8487) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))) (Some!65 (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun b!23504 () Bool)

(declare-fun contains!231 (List!565 tuple2!970) Bool)

(assert (=> b!23504 (= e!15246 (contains!231 (toList!298 lt!8487) (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (= (and d!3989 res!14444) b!23503))

(assert (= (and b!23503 res!14445) b!23504))

(declare-fun m!17038 () Bool)

(assert (=> d!3989 m!17038))

(declare-fun m!17040 () Bool)

(assert (=> d!3989 m!17040))

(declare-fun m!17042 () Bool)

(assert (=> d!3989 m!17042))

(declare-fun m!17044 () Bool)

(assert (=> d!3989 m!17044))

(declare-fun m!17046 () Bool)

(assert (=> b!23503 m!17046))

(declare-fun m!17048 () Bool)

(assert (=> b!23504 m!17048))

(assert (=> bm!1923 d!3989))

(declare-fun d!3991 () Bool)

(assert (=> d!3991 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8491 () Unit!519)

(declare-fun choose!205 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 V!1187 Int) Unit!519)

(assert (=> d!3991 (= lt!8491 (choose!205 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(assert (=> d!3991 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!3991 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) lt!8491)))

(declare-fun bs!950 () Bool)

(assert (= bs!950 d!3991))

(declare-fun m!17050 () Bool)

(assert (=> bs!950 m!17050))

(declare-fun m!17052 () Bool)

(assert (=> bs!950 m!17052))

(declare-fun m!17054 () Bool)

(assert (=> bs!950 m!17054))

(assert (=> bs!950 m!17054))

(declare-fun m!17056 () Bool)

(assert (=> bs!950 m!17056))

(declare-fun m!17058 () Bool)

(assert (=> bs!950 m!17058))

(assert (=> b!23277 d!3991))

(declare-fun bm!1998 () Bool)

(declare-fun call!2003 () Bool)

(declare-fun call!2002 () Bool)

(assert (=> bm!1998 (= call!2003 call!2002)))

(declare-fun b!23540 () Bool)

(declare-fun res!14464 () Bool)

(declare-fun e!15268 () Bool)

(assert (=> b!23540 (=> (not res!14464) (not e!15268))))

(assert (=> b!23540 (= res!14464 call!2003)))

(declare-fun e!15265 () Bool)

(assert (=> b!23540 (= e!15265 e!15268)))

(declare-fun b!23541 () Bool)

(declare-fun c!3050 () Bool)

(declare-fun lt!8568 () SeekEntryResult!55)

(assert (=> b!23541 (= c!3050 ((_ is MissingVacant!55) lt!8568))))

(declare-fun e!15269 () Bool)

(assert (=> b!23541 (= e!15265 e!15269)))

(declare-fun b!23542 () Bool)

(declare-fun res!14466 () Bool)

(declare-fun e!15267 () Bool)

(assert (=> b!23542 (=> (not res!14466) (not e!15267))))

(declare-fun lt!8557 () tuple2!958)

(assert (=> b!23542 (= res!14466 (contains!230 (map!408 (_2!487 lt!8557)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23543 () Bool)

(declare-fun e!15264 () Bool)

(declare-fun call!2001 () Bool)

(assert (=> b!23543 (= e!15264 (not call!2001))))

(declare-fun b!23544 () Bool)

(declare-fun res!14470 () Bool)

(assert (=> b!23544 (= res!14470 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2344 lt!8568)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23544 (=> (not res!14470) (not e!15264))))

(declare-fun bm!1999 () Bool)

(declare-fun call!2004 () SeekEntryResult!55)

(assert (=> bm!1999 (= call!2004 (seekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!23545 () Bool)

(declare-fun e!15270 () Unit!519)

(declare-fun lt!8555 () Unit!519)

(assert (=> b!23545 (= e!15270 lt!8555)))

(assert (=> b!23545 (= lt!8555 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(assert (=> b!23545 (= lt!8568 call!2004)))

(declare-fun c!3053 () Bool)

(assert (=> b!23545 (= c!3053 ((_ is MissingZero!55) lt!8568))))

(assert (=> b!23545 e!15265))

(declare-fun e!15266 () Bool)

(declare-fun b!23539 () Bool)

(declare-fun lt!8556 () SeekEntryResult!55)

(assert (=> b!23539 (= e!15266 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8556)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun d!3993 () Bool)

(assert (=> d!3993 e!15267))

(declare-fun res!14468 () Bool)

(assert (=> d!3993 (=> (not res!14468) (not e!15267))))

(assert (=> d!3993 (= res!14468 (_1!487 lt!8557))))

(assert (=> d!3993 (= lt!8557 (tuple2!959 true (LongMapFixedSize!209 (defaultEntry!1742 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd (_size!149 lt!8141) #b00000000000000000000000000000001) (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (_vacant!149 lt!8141))))))

(declare-fun lt!8561 () Unit!519)

(declare-fun lt!8554 () Unit!519)

(assert (=> d!3993 (= lt!8561 lt!8554)))

(declare-fun lt!8580 () array!1261)

(declare-fun lt!8558 () array!1263)

(assert (=> d!3993 (contains!230 (getCurrentListMap!129 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))))))

(assert (=> d!3993 (= lt!8554 (lemmaValidKeyInArrayIsInListMap!10 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (defaultEntry!1742 lt!8141)))))

(assert (=> d!3993 (= lt!8580 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))))

(assert (=> d!3993 (= lt!8558 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))

(declare-fun lt!8578 () Unit!519)

(declare-fun lt!8562 () Unit!519)

(assert (=> d!3993 (= lt!8578 lt!8562)))

(declare-fun lt!8560 () array!1263)

(assert (=> d!3993 (= (arrayCountValidKeys!0 lt!8560 (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (bvadd (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!1263 (_ BitVec 32)) Unit!519)

(assert (=> d!3993 (= lt!8562 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!8560 (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))))))

(assert (=> d!3993 (= lt!8560 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))

(declare-fun lt!8567 () Unit!519)

(declare-fun lt!8564 () Unit!519)

(assert (=> d!3993 (= lt!8567 lt!8564)))

(declare-fun lt!8553 () array!1263)

(assert (=> d!3993 (arrayContainsKey!0 lt!8553 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!1263 (_ BitVec 64) (_ BitVec 32)) Unit!519)

(assert (=> d!3993 (= lt!8564 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8553 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))))))

(assert (=> d!3993 (= lt!8553 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))

(declare-fun lt!8581 () Unit!519)

(declare-fun lt!8563 () Unit!519)

(assert (=> d!3993 (= lt!8581 lt!8563)))

(assert (=> d!3993 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (getCurrentListMap!129 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!3 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) (_ BitVec 64) V!1187 Int) Unit!519)

(assert (=> d!3993 (= lt!8563 (lemmaAddValidKeyToArrayThenAddPairToListMap!3 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8575 () Unit!519)

(declare-fun lt!8559 () Unit!519)

(assert (=> d!3993 (= lt!8575 lt!8559)))

(assert (=> d!3993 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!519)

(assert (=> d!3993 (= lt!8559 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (mask!4729 lt!8141)))))

(declare-fun lt!8571 () Unit!519)

(declare-fun lt!8577 () Unit!519)

(assert (=> d!3993 (= lt!8571 lt!8577)))

(assert (=> d!3993 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (bvadd (arrayCountValidKeys!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!1263 (_ BitVec 32) (_ BitVec 64)) Unit!519)

(assert (=> d!3993 (= lt!8577 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3163 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun lt!8576 () Unit!519)

(declare-fun lt!8570 () Unit!519)

(assert (=> d!3993 (= lt!8576 lt!8570)))

(declare-fun lt!8565 () List!566)

(declare-fun lt!8566 () (_ BitVec 32))

(assert (=> d!3993 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!8566 lt!8565)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!1263 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!566) Unit!519)

(assert (=> d!3993 (= lt!8570 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) lt!8566 lt!8565))))

(assert (=> d!3993 (= lt!8565 Nil!563)))

(assert (=> d!3993 (= lt!8566 #b00000000000000000000000000000000)))

(declare-fun lt!8569 () Unit!519)

(declare-fun e!15263 () Unit!519)

(assert (=> d!3993 (= lt!8569 e!15263)))

(declare-fun c!3052 () Bool)

(assert (=> d!3993 (= c!3052 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun lt!8574 () Unit!519)

(assert (=> d!3993 (= lt!8574 e!15270)))

(declare-fun c!3051 () Bool)

(assert (=> d!3993 (= c!3051 (contains!230 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!3993 (valid!116 lt!8141)))

(assert (=> d!3993 (= (updateHelperNewKey!10 lt!8141 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))) lt!8557)))

(declare-fun b!23546 () Bool)

(declare-fun Unit!534 () Unit!519)

(assert (=> b!23546 (= e!15263 Unit!534)))

(declare-fun lt!8552 () Unit!519)

(declare-fun lemmaArrayContainsKeyThenInListMap!3 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) (_ BitVec 32) Int) Unit!519)

(assert (=> b!23546 (= lt!8552 (lemmaArrayContainsKeyThenInListMap!3 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> b!23546 (contains!230 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!8572 () Unit!519)

(assert (=> b!23546 (= lt!8572 lt!8552)))

(assert (=> b!23546 false))

(declare-fun b!23547 () Bool)

(assert (=> b!23547 (= e!15269 e!15264)))

(declare-fun res!14472 () Bool)

(assert (=> b!23547 (= res!14472 call!2003)))

(assert (=> b!23547 (=> (not res!14472) (not e!15264))))

(declare-fun b!23548 () Bool)

(assert (=> b!23548 (= e!15268 (not call!2001))))

(declare-fun b!23549 () Bool)

(declare-fun res!14471 () Bool)

(assert (=> b!23549 (=> (not res!14471) (not e!15267))))

(assert (=> b!23549 (= res!14471 (valid!116 (_2!487 lt!8557)))))

(declare-fun bm!2000 () Bool)

(assert (=> bm!2000 (= call!2002 (inRange!0 (ite c!3051 (index!2342 lt!8556) (ite c!3053 (index!2341 lt!8568) (index!2344 lt!8568))) (mask!4729 lt!8141)))))

(declare-fun b!23550 () Bool)

(declare-fun res!14465 () Bool)

(assert (=> b!23550 (=> (not res!14465) (not e!15268))))

(assert (=> b!23550 (= res!14465 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2341 lt!8568)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23551 () Bool)

(declare-fun Unit!535 () Unit!519)

(assert (=> b!23551 (= e!15270 Unit!535)))

(declare-fun lt!8573 () Unit!519)

(assert (=> b!23551 (= lt!8573 (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(assert (=> b!23551 (= lt!8556 call!2004)))

(declare-fun res!14469 () Bool)

(assert (=> b!23551 (= res!14469 ((_ is Found!55) lt!8556))))

(assert (=> b!23551 (=> (not res!14469) (not e!15266))))

(assert (=> b!23551 e!15266))

(declare-fun lt!8579 () Unit!519)

(assert (=> b!23551 (= lt!8579 lt!8573)))

(assert (=> b!23551 false))

(declare-fun bm!2001 () Bool)

(assert (=> bm!2001 (= call!2001 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun b!23552 () Bool)

(assert (=> b!23552 (= e!15269 ((_ is Undefined!55) lt!8568))))

(declare-fun b!23553 () Bool)

(declare-fun res!14467 () Bool)

(assert (=> b!23553 (= res!14467 call!2002)))

(assert (=> b!23553 (=> (not res!14467) (not e!15266))))

(declare-fun b!23554 () Bool)

(assert (=> b!23554 (= e!15267 (= (map!408 (_2!487 lt!8557)) (+!45 (map!408 lt!8141) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!23555 () Bool)

(declare-fun Unit!536 () Unit!519)

(assert (=> b!23555 (= e!15263 Unit!536)))

(assert (= (and d!3993 c!3051) b!23551))

(assert (= (and d!3993 (not c!3051)) b!23545))

(assert (= (and b!23551 res!14469) b!23553))

(assert (= (and b!23553 res!14467) b!23539))

(assert (= (and b!23545 c!3053) b!23540))

(assert (= (and b!23545 (not c!3053)) b!23541))

(assert (= (and b!23540 res!14464) b!23550))

(assert (= (and b!23550 res!14465) b!23548))

(assert (= (and b!23541 c!3050) b!23547))

(assert (= (and b!23541 (not c!3050)) b!23552))

(assert (= (and b!23547 res!14472) b!23544))

(assert (= (and b!23544 res!14470) b!23543))

(assert (= (or b!23540 b!23547) bm!1998))

(assert (= (or b!23548 b!23543) bm!2001))

(assert (= (or b!23553 bm!1998) bm!2000))

(assert (= (or b!23551 b!23545) bm!1999))

(assert (= (and d!3993 c!3052) b!23546))

(assert (= (and d!3993 (not c!3052)) b!23555))

(assert (= (and d!3993 res!14468) b!23549))

(assert (= (and b!23549 res!14471) b!23542))

(assert (= (and b!23542 res!14466) b!23554))

(declare-fun m!17060 () Bool)

(assert (=> b!23549 m!17060))

(declare-fun m!17062 () Bool)

(assert (=> b!23539 m!17062))

(declare-fun m!17064 () Bool)

(assert (=> b!23542 m!17064))

(assert (=> b!23542 m!17064))

(declare-fun m!17066 () Bool)

(assert (=> b!23542 m!17066))

(assert (=> d!3993 m!16760))

(declare-fun m!17068 () Bool)

(assert (=> d!3993 m!17068))

(assert (=> d!3993 m!17054))

(declare-fun m!17070 () Bool)

(assert (=> d!3993 m!17070))

(declare-fun m!17072 () Bool)

(assert (=> d!3993 m!17072))

(declare-fun m!17074 () Bool)

(assert (=> d!3993 m!17074))

(assert (=> d!3993 m!16902))

(assert (=> d!3993 m!17054))

(declare-fun m!17076 () Bool)

(assert (=> d!3993 m!17076))

(declare-fun m!17078 () Bool)

(assert (=> d!3993 m!17078))

(declare-fun m!17080 () Bool)

(assert (=> d!3993 m!17080))

(declare-fun m!17082 () Bool)

(assert (=> d!3993 m!17082))

(declare-fun m!17084 () Bool)

(assert (=> d!3993 m!17084))

(declare-fun m!17086 () Bool)

(assert (=> d!3993 m!17086))

(declare-fun m!17088 () Bool)

(assert (=> d!3993 m!17088))

(assert (=> d!3993 m!17054))

(declare-fun m!17090 () Bool)

(assert (=> d!3993 m!17090))

(declare-fun m!17092 () Bool)

(assert (=> d!3993 m!17092))

(declare-fun m!17094 () Bool)

(assert (=> d!3993 m!17094))

(declare-fun m!17096 () Bool)

(assert (=> d!3993 m!17096))

(declare-fun m!17098 () Bool)

(assert (=> d!3993 m!17098))

(assert (=> d!3993 m!16764))

(declare-fun m!17100 () Bool)

(assert (=> d!3993 m!17100))

(assert (=> d!3993 m!17092))

(assert (=> d!3993 m!17096))

(declare-fun m!17102 () Bool)

(assert (=> d!3993 m!17102))

(declare-fun m!17104 () Bool)

(assert (=> d!3993 m!17104))

(declare-fun m!17106 () Bool)

(assert (=> d!3993 m!17106))

(declare-fun m!17108 () Bool)

(assert (=> b!23550 m!17108))

(declare-fun m!17110 () Bool)

(assert (=> b!23546 m!17110))

(assert (=> b!23546 m!17054))

(assert (=> b!23546 m!17054))

(assert (=> b!23546 m!17090))

(assert (=> b!23551 m!16766))

(assert (=> b!23554 m!17064))

(assert (=> b!23554 m!16770))

(assert (=> b!23554 m!16770))

(declare-fun m!17112 () Bool)

(assert (=> b!23554 m!17112))

(declare-fun m!17114 () Bool)

(assert (=> b!23544 m!17114))

(assert (=> bm!2001 m!16764))

(assert (=> bm!1999 m!16750))

(assert (=> b!23545 m!16716))

(declare-fun m!17116 () Bool)

(assert (=> bm!2000 m!17116))

(assert (=> bm!1924 d!3993))

(declare-fun d!3995 () Bool)

(assert (=> d!3995 (= (validMask!0 lt!8333) (and (or (= lt!8333 #b00000000000000000000000000000111) (= lt!8333 #b00000000000000000000000000001111) (= lt!8333 #b00000000000000000000000000011111) (= lt!8333 #b00000000000000000000000000111111) (= lt!8333 #b00000000000000000000000001111111) (= lt!8333 #b00000000000000000000000011111111) (= lt!8333 #b00000000000000000000000111111111) (= lt!8333 #b00000000000000000000001111111111) (= lt!8333 #b00000000000000000000011111111111) (= lt!8333 #b00000000000000000000111111111111) (= lt!8333 #b00000000000000000001111111111111) (= lt!8333 #b00000000000000000011111111111111) (= lt!8333 #b00000000000000000111111111111111) (= lt!8333 #b00000000000000001111111111111111) (= lt!8333 #b00000000000000011111111111111111) (= lt!8333 #b00000000000000111111111111111111) (= lt!8333 #b00000000000001111111111111111111) (= lt!8333 #b00000000000011111111111111111111) (= lt!8333 #b00000000000111111111111111111111) (= lt!8333 #b00000000001111111111111111111111) (= lt!8333 #b00000000011111111111111111111111) (= lt!8333 #b00000000111111111111111111111111) (= lt!8333 #b00000001111111111111111111111111) (= lt!8333 #b00000011111111111111111111111111) (= lt!8333 #b00000111111111111111111111111111) (= lt!8333 #b00001111111111111111111111111111) (= lt!8333 #b00011111111111111111111111111111) (= lt!8333 #b00111111111111111111111111111111)) (bvsle lt!8333 #b00111111111111111111111111111111)))))

(assert (=> d!3953 d!3995))

(assert (=> d!3953 d!3955))

(declare-fun d!3997 () Bool)

(assert (=> d!3997 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8238 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8584 () Unit!519)

(declare-fun choose!206 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 V!1187 Int) Unit!519)

(assert (=> d!3997 (= lt!8584 (choose!206 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8238 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (defaultEntry!1742 lt!8141)))))

(assert (=> d!3997 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!3997 (= (lemmaChangeZeroKeyThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8238 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (defaultEntry!1742 lt!8141)) lt!8584)))

(declare-fun bs!951 () Bool)

(assert (= bs!951 d!3997))

(declare-fun m!17118 () Bool)

(assert (=> bs!951 m!17118))

(assert (=> bs!951 m!17054))

(assert (=> bs!951 m!17050))

(assert (=> bs!951 m!17054))

(declare-fun m!17120 () Bool)

(assert (=> bs!951 m!17120))

(declare-fun m!17122 () Bool)

(assert (=> bs!951 m!17122))

(assert (=> b!23275 d!3997))

(declare-fun d!3999 () Bool)

(declare-fun res!14473 () Bool)

(declare-fun e!15271 () Bool)

(assert (=> d!3999 (=> (not res!14473) (not e!15271))))

(assert (=> d!3999 (= res!14473 (simpleValid!20 (v!1601 (underlying!115 thiss!938))))))

(assert (=> d!3999 (= (valid!116 (v!1601 (underlying!115 thiss!938))) e!15271)))

(declare-fun b!23556 () Bool)

(declare-fun res!14474 () Bool)

(assert (=> b!23556 (=> (not res!14474) (not e!15271))))

(assert (=> b!23556 (= res!14474 (= (arrayCountValidKeys!0 (_keys!3163 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938))))) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun b!23557 () Bool)

(declare-fun res!14475 () Bool)

(assert (=> b!23557 (=> (not res!14475) (not e!15271))))

(assert (=> b!23557 (= res!14475 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (v!1601 (underlying!115 thiss!938))) (mask!4729 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun b!23558 () Bool)

(assert (=> b!23558 (= e!15271 (arrayNoDuplicates!0 (_keys!3163 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 Nil!563))))

(assert (= (and d!3999 res!14473) b!23556))

(assert (= (and b!23556 res!14474) b!23557))

(assert (= (and b!23557 res!14475) b!23558))

(declare-fun m!17124 () Bool)

(assert (=> d!3999 m!17124))

(declare-fun m!17126 () Bool)

(assert (=> b!23556 m!17126))

(declare-fun m!17128 () Bool)

(assert (=> b!23557 m!17128))

(declare-fun m!17130 () Bool)

(assert (=> b!23558 m!17130))

(assert (=> d!3949 d!3999))

(declare-fun d!4001 () Bool)

(declare-fun e!15272 () Bool)

(assert (=> d!4001 e!15272))

(declare-fun res!14476 () Bool)

(assert (=> d!4001 (=> (not res!14476) (not e!15272))))

(declare-fun lt!8587 () ListLongMap!565)

(assert (=> d!4001 (= res!14476 (contains!230 lt!8587 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun lt!8585 () List!565)

(assert (=> d!4001 (= lt!8587 (ListLongMap!566 lt!8585))))

(declare-fun lt!8586 () Unit!519)

(declare-fun lt!8588 () Unit!519)

(assert (=> d!4001 (= lt!8586 lt!8588)))

(assert (=> d!4001 (= (getValueByKey!60 lt!8585 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4001 (= lt!8588 (lemmaContainsTupThenGetReturnValue!18 lt!8585 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4001 (= lt!8585 (insertStrictlySorted!18 (toList!298 (ite c!2989 call!1950 call!1937)) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4001 (= (+!45 (ite c!2989 call!1950 call!1937) (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!8587)))

(declare-fun b!23559 () Bool)

(declare-fun res!14477 () Bool)

(assert (=> b!23559 (=> (not res!14477) (not e!15272))))

(assert (=> b!23559 (= res!14477 (= (getValueByKey!60 (toList!298 lt!8587) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!23560 () Bool)

(assert (=> b!23560 (= e!15272 (contains!231 (toList!298 lt!8587) (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (= (and d!4001 res!14476) b!23559))

(assert (= (and b!23559 res!14477) b!23560))

(declare-fun m!17132 () Bool)

(assert (=> d!4001 m!17132))

(declare-fun m!17134 () Bool)

(assert (=> d!4001 m!17134))

(declare-fun m!17136 () Bool)

(assert (=> d!4001 m!17136))

(declare-fun m!17138 () Bool)

(assert (=> d!4001 m!17138))

(declare-fun m!17140 () Bool)

(assert (=> b!23559 m!17140))

(declare-fun m!17142 () Bool)

(assert (=> b!23560 m!17142))

(assert (=> bm!1947 d!4001))

(declare-fun d!4003 () Bool)

(assert (=> d!4003 (= (map!408 (_2!487 lt!8234)) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8234)) (_values!1728 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234)) (extraKeys!1640 (_2!487 lt!8234)) (zeroValue!1665 (_2!487 lt!8234)) (minValue!1665 (_2!487 lt!8234)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8234))))))

(declare-fun bs!952 () Bool)

(assert (= bs!952 d!4003))

(declare-fun m!17144 () Bool)

(assert (=> bs!952 m!17144))

(assert (=> bm!1915 d!4003))

(declare-fun d!4005 () Bool)

(declare-fun e!15273 () Bool)

(assert (=> d!4005 e!15273))

(declare-fun res!14478 () Bool)

(assert (=> d!4005 (=> (not res!14478) (not e!15273))))

(declare-fun lt!8591 () ListLongMap!565)

(assert (=> d!4005 (= res!14478 (contains!230 lt!8591 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun lt!8589 () List!565)

(assert (=> d!4005 (= lt!8591 (ListLongMap!566 lt!8589))))

(declare-fun lt!8590 () Unit!519)

(declare-fun lt!8592 () Unit!519)

(assert (=> d!4005 (= lt!8590 lt!8592)))

(assert (=> d!4005 (= (getValueByKey!60 lt!8589 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4005 (= lt!8592 (lemmaContainsTupThenGetReturnValue!18 lt!8589 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4005 (= lt!8589 (insertStrictlySorted!18 (toList!298 call!1933) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4005 (= (+!45 call!1933 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!8591)))

(declare-fun b!23561 () Bool)

(declare-fun res!14479 () Bool)

(assert (=> b!23561 (=> (not res!14479) (not e!15273))))

(assert (=> b!23561 (= res!14479 (= (getValueByKey!60 (toList!298 lt!8591) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!23562 () Bool)

(assert (=> b!23562 (= e!15273 (contains!231 (toList!298 lt!8591) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (= (and d!4005 res!14478) b!23561))

(assert (= (and b!23561 res!14479) b!23562))

(declare-fun m!17146 () Bool)

(assert (=> d!4005 m!17146))

(declare-fun m!17148 () Bool)

(assert (=> d!4005 m!17148))

(declare-fun m!17150 () Bool)

(assert (=> d!4005 m!17150))

(declare-fun m!17152 () Bool)

(assert (=> d!4005 m!17152))

(declare-fun m!17154 () Bool)

(assert (=> b!23561 m!17154))

(declare-fun m!17156 () Bool)

(assert (=> b!23562 m!17156))

(assert (=> b!23276 d!4005))

(declare-fun d!4007 () Bool)

(assert (=> d!4007 (arrayForallSeekEntryOrOpenFound!0 lt!8323 lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun lt!8595 () Unit!519)

(declare-fun choose!34 (array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!519)

(assert (=> d!4007 (= lt!8595 (choose!34 lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8323))))

(assert (=> d!4007 (validMask!0 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(assert (=> d!4007 (= (lemmaArrayForallSeekEntryOrOpenFoundAlwaysTrueFor0Array!0 lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8323) lt!8595)))

(declare-fun bs!953 () Bool)

(assert (= bs!953 d!4007))

(assert (=> bs!953 m!16662))

(assert (=> bs!953 m!16796))

(assert (=> bs!953 m!16662))

(declare-fun m!17158 () Bool)

(assert (=> bs!953 m!17158))

(assert (=> bs!953 m!16662))

(assert (=> bs!953 m!16794))

(assert (=> d!3951 d!4007))

(declare-fun b!23571 () Bool)

(declare-fun e!15278 () (_ BitVec 32))

(assert (=> b!23571 (= e!15278 #b00000000000000000000000000000000)))

(declare-fun b!23572 () Bool)

(declare-fun e!15279 () (_ BitVec 32))

(assert (=> b!23572 (= e!15278 e!15279)))

(declare-fun c!3059 () Bool)

(assert (=> b!23572 (= c!3059 (validKeyInArray!0 (select (arr!597 lt!8324) lt!8313)))))

(declare-fun b!23573 () Bool)

(declare-fun call!2007 () (_ BitVec 32))

(assert (=> b!23573 (= e!15279 (bvadd #b00000000000000000000000000000001 call!2007))))

(declare-fun b!23574 () Bool)

(assert (=> b!23574 (= e!15279 call!2007)))

(declare-fun bm!2004 () Bool)

(assert (=> bm!2004 (= call!2007 (arrayCountValidKeys!0 lt!8324 (bvadd lt!8313 #b00000000000000000000000000000001) lt!8314))))

(declare-fun d!4009 () Bool)

(declare-fun lt!8598 () (_ BitVec 32))

(assert (=> d!4009 (and (bvsge lt!8598 #b00000000000000000000000000000000) (bvsle lt!8598 (bvsub (size!693 lt!8324) lt!8313)))))

(assert (=> d!4009 (= lt!8598 e!15278)))

(declare-fun c!3058 () Bool)

(assert (=> d!4009 (= c!3058 (bvsge lt!8313 lt!8314))))

(assert (=> d!4009 (and (bvsle lt!8313 lt!8314) (bvsge lt!8313 #b00000000000000000000000000000000) (bvsle lt!8314 (size!693 lt!8324)))))

(assert (=> d!4009 (= (arrayCountValidKeys!0 lt!8324 lt!8313 lt!8314) lt!8598)))

(assert (= (and d!4009 c!3058) b!23571))

(assert (= (and d!4009 (not c!3058)) b!23572))

(assert (= (and b!23572 c!3059) b!23573))

(assert (= (and b!23572 (not c!3059)) b!23574))

(assert (= (or b!23573 b!23574) bm!2004))

(declare-fun m!17160 () Bool)

(assert (=> b!23572 m!17160))

(assert (=> b!23572 m!17160))

(declare-fun m!17162 () Bool)

(assert (=> b!23572 m!17162))

(declare-fun m!17164 () Bool)

(assert (=> bm!2004 m!17164))

(assert (=> d!3951 d!4009))

(declare-fun d!4011 () Bool)

(declare-fun res!14480 () Bool)

(declare-fun e!15280 () Bool)

(assert (=> d!4011 (=> (not res!14480) (not e!15280))))

(assert (=> d!4011 (= res!14480 (simpleValid!20 lt!8306))))

(assert (=> d!4011 (= (valid!116 lt!8306) e!15280)))

(declare-fun b!23575 () Bool)

(declare-fun res!14481 () Bool)

(assert (=> b!23575 (=> (not res!14481) (not e!15280))))

(assert (=> b!23575 (= res!14481 (= (arrayCountValidKeys!0 (_keys!3163 lt!8306) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))) (_size!149 lt!8306)))))

(declare-fun b!23576 () Bool)

(declare-fun res!14482 () Bool)

(assert (=> b!23576 (=> (not res!14482) (not e!15280))))

(assert (=> b!23576 (= res!14482 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 lt!8306) (mask!4729 lt!8306)))))

(declare-fun b!23577 () Bool)

(assert (=> b!23577 (= e!15280 (arrayNoDuplicates!0 (_keys!3163 lt!8306) #b00000000000000000000000000000000 Nil!563))))

(assert (= (and d!4011 res!14480) b!23575))

(assert (= (and b!23575 res!14481) b!23576))

(assert (= (and b!23576 res!14482) b!23577))

(declare-fun m!17166 () Bool)

(assert (=> d!4011 m!17166))

(declare-fun m!17168 () Bool)

(assert (=> b!23575 m!17168))

(declare-fun m!17170 () Bool)

(assert (=> b!23576 m!17170))

(declare-fun m!17172 () Bool)

(assert (=> b!23577 m!17172))

(assert (=> d!3951 d!4011))

(declare-fun d!4013 () Bool)

(assert (=> d!4013 (= (validMask!0 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))) (and (or (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000001111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000011111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000001111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000011111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000001111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000011111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000001111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000011111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000001111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000011111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000001111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000011111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000111111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000001111111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000011111111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000111111111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000001111111111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000011111111111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000111111111111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00001111111111111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00011111111111111111111111111111) (= (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00111111111111111111111111111111)) (bvsle (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00111111111111111111111111111111)))))

(assert (=> d!3951 d!4013))

(assert (=> d!3951 d!3979))

(declare-fun d!4015 () Bool)

(assert (=> d!4015 (arrayNoDuplicates!0 lt!8321 lt!8319 lt!8325)))

(declare-fun lt!8601 () Unit!519)

(declare-fun choose!111 (array!1263 (_ BitVec 32) (_ BitVec 32) List!566) Unit!519)

(assert (=> d!4015 (= lt!8601 (choose!111 lt!8321 lt!8319 (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001) lt!8325))))

(assert (=> d!4015 (= (size!693 lt!8321) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))))

(assert (=> d!4015 (= (lemmaArrayNoDuplicatesInAll0Array!0 lt!8321 lt!8319 (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001) lt!8325) lt!8601)))

(declare-fun bs!954 () Bool)

(assert (= bs!954 d!4015))

(assert (=> bs!954 m!16804))

(declare-fun m!17174 () Bool)

(assert (=> bs!954 m!17174))

(assert (=> d!3951 d!4015))

(declare-fun b!23588 () Bool)

(declare-fun e!15289 () Bool)

(declare-fun call!2010 () Bool)

(assert (=> b!23588 (= e!15289 call!2010)))

(declare-fun b!23589 () Bool)

(declare-fun e!15292 () Bool)

(assert (=> b!23589 (= e!15292 e!15289)))

(declare-fun c!3062 () Bool)

(assert (=> b!23589 (= c!3062 (validKeyInArray!0 (select (arr!597 lt!8321) lt!8319)))))

(declare-fun d!4017 () Bool)

(declare-fun res!14489 () Bool)

(declare-fun e!15290 () Bool)

(assert (=> d!4017 (=> res!14489 e!15290)))

(assert (=> d!4017 (= res!14489 (bvsge lt!8319 (size!693 lt!8321)))))

(assert (=> d!4017 (= (arrayNoDuplicates!0 lt!8321 lt!8319 lt!8325) e!15290)))

(declare-fun bm!2007 () Bool)

(assert (=> bm!2007 (= call!2010 (arrayNoDuplicates!0 lt!8321 (bvadd lt!8319 #b00000000000000000000000000000001) (ite c!3062 (Cons!562 (select (arr!597 lt!8321) lt!8319) lt!8325) lt!8325)))))

(declare-fun b!23590 () Bool)

(assert (=> b!23590 (= e!15289 call!2010)))

(declare-fun b!23591 () Bool)

(assert (=> b!23591 (= e!15290 e!15292)))

(declare-fun res!14491 () Bool)

(assert (=> b!23591 (=> (not res!14491) (not e!15292))))

(declare-fun e!15291 () Bool)

(assert (=> b!23591 (= res!14491 (not e!15291))))

(declare-fun res!14490 () Bool)

(assert (=> b!23591 (=> (not res!14490) (not e!15291))))

(assert (=> b!23591 (= res!14490 (validKeyInArray!0 (select (arr!597 lt!8321) lt!8319)))))

(declare-fun b!23592 () Bool)

(declare-fun contains!232 (List!566 (_ BitVec 64)) Bool)

(assert (=> b!23592 (= e!15291 (contains!232 lt!8325 (select (arr!597 lt!8321) lt!8319)))))

(assert (= (and d!4017 (not res!14489)) b!23591))

(assert (= (and b!23591 res!14490) b!23592))

(assert (= (and b!23591 res!14491) b!23589))

(assert (= (and b!23589 c!3062) b!23590))

(assert (= (and b!23589 (not c!3062)) b!23588))

(assert (= (or b!23590 b!23588) bm!2007))

(declare-fun m!17176 () Bool)

(assert (=> b!23589 m!17176))

(assert (=> b!23589 m!17176))

(declare-fun m!17178 () Bool)

(assert (=> b!23589 m!17178))

(assert (=> bm!2007 m!17176))

(declare-fun m!17180 () Bool)

(assert (=> bm!2007 m!17180))

(assert (=> b!23591 m!17176))

(assert (=> b!23591 m!17176))

(assert (=> b!23591 m!17178))

(assert (=> b!23592 m!17176))

(assert (=> b!23592 m!17176))

(declare-fun m!17182 () Bool)

(assert (=> b!23592 m!17182))

(assert (=> d!3951 d!4017))

(declare-fun d!4019 () Bool)

(assert (=> d!4019 (= (arrayCountValidKeys!0 lt!8324 lt!8313 lt!8314) #b00000000000000000000000000000000)))

(declare-fun lt!8604 () Unit!519)

(declare-fun choose!59 (array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!519)

(assert (=> d!4019 (= lt!8604 (choose!59 lt!8324 lt!8313 lt!8314))))

(assert (=> d!4019 (bvslt (size!693 lt!8324) #b01111111111111111111111111111111)))

(assert (=> d!4019 (= (lemmaArrayCountValidKeysOfFilled0ArrayIs0!0 lt!8324 lt!8313 lt!8314) lt!8604)))

(declare-fun bs!955 () Bool)

(assert (= bs!955 d!4019))

(assert (=> bs!955 m!16806))

(declare-fun m!17184 () Bool)

(assert (=> bs!955 m!17184))

(assert (=> d!3951 d!4019))

(declare-fun b!23601 () Bool)

(declare-fun e!15299 () Bool)

(declare-fun call!2013 () Bool)

(assert (=> b!23601 (= e!15299 call!2013)))

(declare-fun b!23602 () Bool)

(declare-fun e!15301 () Bool)

(assert (=> b!23602 (= e!15301 call!2013)))

(declare-fun b!23603 () Bool)

(declare-fun e!15300 () Bool)

(assert (=> b!23603 (= e!15300 e!15299)))

(declare-fun c!3065 () Bool)

(assert (=> b!23603 (= c!3065 (validKeyInArray!0 (select (arr!597 lt!8315) lt!8323)))))

(declare-fun d!4021 () Bool)

(declare-fun res!14497 () Bool)

(assert (=> d!4021 (=> res!14497 e!15300)))

(assert (=> d!4021 (= res!14497 (bvsge lt!8323 (size!693 lt!8315)))))

(assert (=> d!4021 (= (arrayForallSeekEntryOrOpenFound!0 lt!8323 lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))) e!15300)))

(declare-fun bm!2010 () Bool)

(assert (=> bm!2010 (= call!2013 (arrayForallSeekEntryOrOpenFound!0 (bvadd lt!8323 #b00000000000000000000000000000001) lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun b!23604 () Bool)

(assert (=> b!23604 (= e!15299 e!15301)))

(declare-fun lt!8611 () (_ BitVec 64))

(assert (=> b!23604 (= lt!8611 (select (arr!597 lt!8315) lt!8323))))

(declare-fun lt!8613 () Unit!519)

(assert (=> b!23604 (= lt!8613 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8315 lt!8611 lt!8323))))

(assert (=> b!23604 (arrayContainsKey!0 lt!8315 lt!8611 #b00000000000000000000000000000000)))

(declare-fun lt!8612 () Unit!519)

(assert (=> b!23604 (= lt!8612 lt!8613)))

(declare-fun res!14496 () Bool)

(assert (=> b!23604 (= res!14496 (= (seekEntryOrOpen!0 (select (arr!597 lt!8315) lt!8323) lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))) (Found!55 lt!8323)))))

(assert (=> b!23604 (=> (not res!14496) (not e!15301))))

(assert (= (and d!4021 (not res!14497)) b!23603))

(assert (= (and b!23603 c!3065) b!23604))

(assert (= (and b!23603 (not c!3065)) b!23601))

(assert (= (and b!23604 res!14496) b!23602))

(assert (= (or b!23602 b!23601) bm!2010))

(declare-fun m!17186 () Bool)

(assert (=> b!23603 m!17186))

(assert (=> b!23603 m!17186))

(declare-fun m!17188 () Bool)

(assert (=> b!23603 m!17188))

(assert (=> bm!2010 m!16662))

(declare-fun m!17190 () Bool)

(assert (=> bm!2010 m!17190))

(assert (=> b!23604 m!17186))

(declare-fun m!17192 () Bool)

(assert (=> b!23604 m!17192))

(declare-fun m!17194 () Bool)

(assert (=> b!23604 m!17194))

(assert (=> b!23604 m!17186))

(assert (=> b!23604 m!16662))

(declare-fun m!17196 () Bool)

(assert (=> b!23604 m!17196))

(assert (=> d!3951 d!4021))

(declare-fun d!4023 () Bool)

(declare-fun res!14502 () Bool)

(declare-fun e!15306 () Bool)

(assert (=> d!4023 (=> res!14502 e!15306)))

(assert (=> d!4023 (= res!14502 (= (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4023 (= (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000) e!15306)))

(declare-fun b!23609 () Bool)

(declare-fun e!15307 () Bool)

(assert (=> b!23609 (= e!15306 e!15307)))

(declare-fun res!14503 () Bool)

(assert (=> b!23609 (=> (not res!14503) (not e!15307))))

(assert (=> b!23609 (= res!14503 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23610 () Bool)

(assert (=> b!23610 (= e!15307 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4023 (not res!14502)) b!23609))

(assert (= (and b!23609 res!14503) b!23610))

(declare-fun m!17198 () Bool)

(assert (=> d!4023 m!17198))

(declare-fun m!17200 () Bool)

(assert (=> b!23610 m!17200))

(assert (=> bm!1909 d!4023))

(declare-fun bm!2011 () Bool)

(declare-fun call!2016 () Bool)

(declare-fun call!2015 () Bool)

(assert (=> bm!2011 (= call!2016 call!2015)))

(declare-fun b!23612 () Bool)

(declare-fun res!14504 () Bool)

(declare-fun e!15313 () Bool)

(assert (=> b!23612 (=> (not res!14504) (not e!15313))))

(assert (=> b!23612 (= res!14504 call!2016)))

(declare-fun e!15310 () Bool)

(assert (=> b!23612 (= e!15310 e!15313)))

(declare-fun b!23613 () Bool)

(declare-fun c!3066 () Bool)

(declare-fun lt!8630 () SeekEntryResult!55)

(assert (=> b!23613 (= c!3066 ((_ is MissingVacant!55) lt!8630))))

(declare-fun e!15314 () Bool)

(assert (=> b!23613 (= e!15310 e!15314)))

(declare-fun b!23614 () Bool)

(declare-fun res!14506 () Bool)

(declare-fun e!15312 () Bool)

(assert (=> b!23614 (=> (not res!14506) (not e!15312))))

(declare-fun lt!8619 () tuple2!958)

(assert (=> b!23614 (= res!14506 (contains!230 (map!408 (_2!487 lt!8619)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23615 () Bool)

(declare-fun e!15309 () Bool)

(declare-fun call!2014 () Bool)

(assert (=> b!23615 (= e!15309 (not call!2014))))

(declare-fun b!23616 () Bool)

(declare-fun res!14510 () Bool)

(assert (=> b!23616 (= res!14510 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2344 lt!8630)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23616 (=> (not res!14510) (not e!15309))))

(declare-fun bm!2012 () Bool)

(declare-fun call!2017 () SeekEntryResult!55)

(assert (=> bm!2012 (= call!2017 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!23617 () Bool)

(declare-fun e!15315 () Unit!519)

(declare-fun lt!8617 () Unit!519)

(assert (=> b!23617 (= e!15315 lt!8617)))

(assert (=> b!23617 (= lt!8617 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> b!23617 (= lt!8630 call!2017)))

(declare-fun c!3069 () Bool)

(assert (=> b!23617 (= c!3069 ((_ is MissingZero!55) lt!8630))))

(assert (=> b!23617 e!15310))

(declare-fun b!23611 () Bool)

(declare-fun e!15311 () Bool)

(declare-fun lt!8618 () SeekEntryResult!55)

(assert (=> b!23611 (= e!15311 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8618)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!4025 () Bool)

(assert (=> d!4025 e!15312))

(declare-fun res!14508 () Bool)

(assert (=> d!4025 (=> (not res!14508) (not e!15312))))

(assert (=> d!4025 (= res!14508 (_1!487 lt!8619))))

(assert (=> d!4025 (= lt!8619 (tuple2!959 true (LongMapFixedSize!209 (defaultEntry!1742 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (bvadd (_size!149 (_2!487 lt!8138)) #b00000000000000000000000000000001) (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (_vacant!149 (_2!487 lt!8138)))))))

(declare-fun lt!8623 () Unit!519)

(declare-fun lt!8616 () Unit!519)

(assert (=> d!4025 (= lt!8623 lt!8616)))

(declare-fun lt!8620 () array!1263)

(declare-fun lt!8642 () array!1261)

(assert (=> d!4025 (contains!230 (getCurrentListMap!129 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (select (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))))))

(assert (=> d!4025 (= lt!8616 (lemmaValidKeyInArrayIsInListMap!10 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4025 (= lt!8642 (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))))

(assert (=> d!4025 (= lt!8620 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun lt!8640 () Unit!519)

(declare-fun lt!8624 () Unit!519)

(assert (=> d!4025 (= lt!8640 lt!8624)))

(declare-fun lt!8622 () array!1263)

(assert (=> d!4025 (= (arrayCountValidKeys!0 lt!8622 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (bvadd (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(assert (=> d!4025 (= lt!8624 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!8622 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))))))

(assert (=> d!4025 (= lt!8622 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun lt!8629 () Unit!519)

(declare-fun lt!8626 () Unit!519)

(assert (=> d!4025 (= lt!8629 lt!8626)))

(declare-fun lt!8615 () array!1263)

(assert (=> d!4025 (arrayContainsKey!0 lt!8615 #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!4025 (= lt!8626 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8615 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))))))

(assert (=> d!4025 (= lt!8615 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun lt!8643 () Unit!519)

(declare-fun lt!8625 () Unit!519)

(assert (=> d!4025 (= lt!8643 lt!8625)))

(assert (=> d!4025 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (getCurrentListMap!129 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4025 (= lt!8625 (lemmaAddValidKeyToArrayThenAddPairToListMap!3 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8637 () Unit!519)

(declare-fun lt!8621 () Unit!519)

(assert (=> d!4025 (= lt!8637 lt!8621)))

(assert (=> d!4025 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4025 (= lt!8621 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun lt!8633 () Unit!519)

(declare-fun lt!8639 () Unit!519)

(assert (=> d!4025 (= lt!8633 lt!8639)))

(assert (=> d!4025 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (bvadd (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8138)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) #b00000000000000000000000000000001))))

(assert (=> d!4025 (= lt!8639 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3163 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!8638 () Unit!519)

(declare-fun lt!8632 () Unit!519)

(assert (=> d!4025 (= lt!8638 lt!8632)))

(declare-fun lt!8627 () List!566)

(declare-fun lt!8628 () (_ BitVec 32))

(assert (=> d!4025 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) lt!8628 lt!8627)))

(assert (=> d!4025 (= lt!8632 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) lt!8628 lt!8627))))

(assert (=> d!4025 (= lt!8627 Nil!563)))

(assert (=> d!4025 (= lt!8628 #b00000000000000000000000000000000)))

(declare-fun lt!8631 () Unit!519)

(declare-fun e!15308 () Unit!519)

(assert (=> d!4025 (= lt!8631 e!15308)))

(declare-fun c!3068 () Bool)

(assert (=> d!4025 (= c!3068 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun lt!8636 () Unit!519)

(assert (=> d!4025 (= lt!8636 e!15315)))

(declare-fun c!3067 () Bool)

(assert (=> d!4025 (= c!3067 (contains!230 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4025 (valid!116 (_2!487 lt!8138))))

(assert (=> d!4025 (= (updateHelperNewKey!10 (_2!487 lt!8138) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))) lt!8619)))

(declare-fun b!23618 () Bool)

(declare-fun Unit!537 () Unit!519)

(assert (=> b!23618 (= e!15308 Unit!537)))

(declare-fun lt!8614 () Unit!519)

(assert (=> b!23618 (= lt!8614 (lemmaArrayContainsKeyThenInListMap!3 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> b!23618 (contains!230 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8634 () Unit!519)

(assert (=> b!23618 (= lt!8634 lt!8614)))

(assert (=> b!23618 false))

(declare-fun b!23619 () Bool)

(assert (=> b!23619 (= e!15314 e!15309)))

(declare-fun res!14512 () Bool)

(assert (=> b!23619 (= res!14512 call!2016)))

(assert (=> b!23619 (=> (not res!14512) (not e!15309))))

(declare-fun b!23620 () Bool)

(assert (=> b!23620 (= e!15313 (not call!2014))))

(declare-fun b!23621 () Bool)

(declare-fun res!14511 () Bool)

(assert (=> b!23621 (=> (not res!14511) (not e!15312))))

(assert (=> b!23621 (= res!14511 (valid!116 (_2!487 lt!8619)))))

(declare-fun bm!2013 () Bool)

(assert (=> bm!2013 (= call!2015 (inRange!0 (ite c!3067 (index!2342 lt!8618) (ite c!3069 (index!2341 lt!8630) (index!2344 lt!8630))) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!23622 () Bool)

(declare-fun res!14505 () Bool)

(assert (=> b!23622 (=> (not res!14505) (not e!15313))))

(assert (=> b!23622 (= res!14505 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2341 lt!8630)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23623 () Bool)

(declare-fun Unit!538 () Unit!519)

(assert (=> b!23623 (= e!15315 Unit!538)))

(declare-fun lt!8635 () Unit!519)

(assert (=> b!23623 (= lt!8635 (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> b!23623 (= lt!8618 call!2017)))

(declare-fun res!14509 () Bool)

(assert (=> b!23623 (= res!14509 ((_ is Found!55) lt!8618))))

(assert (=> b!23623 (=> (not res!14509) (not e!15311))))

(assert (=> b!23623 e!15311))

(declare-fun lt!8641 () Unit!519)

(assert (=> b!23623 (= lt!8641 lt!8635)))

(assert (=> b!23623 false))

(declare-fun bm!2014 () Bool)

(assert (=> bm!2014 (= call!2014 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun b!23624 () Bool)

(assert (=> b!23624 (= e!15314 ((_ is Undefined!55) lt!8630))))

(declare-fun b!23625 () Bool)

(declare-fun res!14507 () Bool)

(assert (=> b!23625 (= res!14507 call!2015)))

(assert (=> b!23625 (=> (not res!14507) (not e!15311))))

(declare-fun b!23626 () Bool)

(assert (=> b!23626 (= e!15312 (= (map!408 (_2!487 lt!8619)) (+!45 (map!408 (_2!487 lt!8138)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!23627 () Bool)

(declare-fun Unit!539 () Unit!519)

(assert (=> b!23627 (= e!15308 Unit!539)))

(assert (= (and d!4025 c!3067) b!23623))

(assert (= (and d!4025 (not c!3067)) b!23617))

(assert (= (and b!23623 res!14509) b!23625))

(assert (= (and b!23625 res!14507) b!23611))

(assert (= (and b!23617 c!3069) b!23612))

(assert (= (and b!23617 (not c!3069)) b!23613))

(assert (= (and b!23612 res!14504) b!23622))

(assert (= (and b!23622 res!14505) b!23620))

(assert (= (and b!23613 c!3066) b!23619))

(assert (= (and b!23613 (not c!3066)) b!23624))

(assert (= (and b!23619 res!14512) b!23616))

(assert (= (and b!23616 res!14510) b!23615))

(assert (= (or b!23612 b!23619) bm!2011))

(assert (= (or b!23620 b!23615) bm!2014))

(assert (= (or b!23625 bm!2011) bm!2013))

(assert (= (or b!23623 b!23617) bm!2012))

(assert (= (and d!4025 c!3068) b!23618))

(assert (= (and d!4025 (not c!3068)) b!23627))

(assert (= (and d!4025 res!14508) b!23621))

(assert (= (and b!23621 res!14511) b!23614))

(assert (= (and b!23614 res!14506) b!23626))

(declare-fun m!17202 () Bool)

(assert (=> b!23621 m!17202))

(declare-fun m!17204 () Bool)

(assert (=> b!23611 m!17204))

(declare-fun m!17206 () Bool)

(assert (=> b!23614 m!17206))

(assert (=> b!23614 m!17206))

(declare-fun m!17208 () Bool)

(assert (=> b!23614 m!17208))

(assert (=> d!4025 m!16856))

(declare-fun m!17210 () Bool)

(assert (=> d!4025 m!17210))

(assert (=> d!4025 m!17036))

(declare-fun m!17212 () Bool)

(assert (=> d!4025 m!17212))

(declare-fun m!17214 () Bool)

(assert (=> d!4025 m!17214))

(declare-fun m!17216 () Bool)

(assert (=> d!4025 m!17216))

(declare-fun m!17218 () Bool)

(assert (=> d!4025 m!17218))

(assert (=> d!4025 m!17036))

(declare-fun m!17220 () Bool)

(assert (=> d!4025 m!17220))

(declare-fun m!17222 () Bool)

(assert (=> d!4025 m!17222))

(declare-fun m!17224 () Bool)

(assert (=> d!4025 m!17224))

(declare-fun m!17226 () Bool)

(assert (=> d!4025 m!17226))

(declare-fun m!17228 () Bool)

(assert (=> d!4025 m!17228))

(declare-fun m!17230 () Bool)

(assert (=> d!4025 m!17230))

(declare-fun m!17232 () Bool)

(assert (=> d!4025 m!17232))

(assert (=> d!4025 m!17036))

(declare-fun m!17234 () Bool)

(assert (=> d!4025 m!17234))

(declare-fun m!17236 () Bool)

(assert (=> d!4025 m!17236))

(declare-fun m!17238 () Bool)

(assert (=> d!4025 m!17238))

(declare-fun m!17240 () Bool)

(assert (=> d!4025 m!17240))

(declare-fun m!17242 () Bool)

(assert (=> d!4025 m!17242))

(assert (=> d!4025 m!16860))

(declare-fun m!17244 () Bool)

(assert (=> d!4025 m!17244))

(assert (=> d!4025 m!17236))

(assert (=> d!4025 m!17240))

(declare-fun m!17246 () Bool)

(assert (=> d!4025 m!17246))

(declare-fun m!17248 () Bool)

(assert (=> d!4025 m!17248))

(declare-fun m!17250 () Bool)

(assert (=> d!4025 m!17250))

(declare-fun m!17252 () Bool)

(assert (=> b!23622 m!17252))

(declare-fun m!17254 () Bool)

(assert (=> b!23618 m!17254))

(assert (=> b!23618 m!17036))

(assert (=> b!23618 m!17036))

(assert (=> b!23618 m!17234))

(assert (=> b!23623 m!16862))

(assert (=> b!23626 m!17206))

(assert (=> b!23626 m!16866))

(assert (=> b!23626 m!16866))

(declare-fun m!17256 () Bool)

(assert (=> b!23626 m!17256))

(declare-fun m!17258 () Bool)

(assert (=> b!23616 m!17258))

(assert (=> bm!2014 m!16860))

(assert (=> bm!2012 m!16846))

(assert (=> b!23617 m!16812))

(declare-fun m!17260 () Bool)

(assert (=> bm!2013 m!17260))

(assert (=> bm!1948 d!4025))

(declare-fun d!4027 () Bool)

(declare-fun e!15318 () Bool)

(assert (=> d!4027 e!15318))

(declare-fun res!14517 () Bool)

(assert (=> d!4027 (=> (not res!14517) (not e!15318))))

(declare-fun lt!8648 () SeekEntryResult!55)

(assert (=> d!4027 (= res!14517 ((_ is Found!55) lt!8648))))

(assert (=> d!4027 (= lt!8648 (seekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun lt!8649 () Unit!519)

(declare-fun choose!207 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) Int) Unit!519)

(assert (=> d!4027 (= lt!8649 (choose!207 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4027 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4027 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)) lt!8649)))

(declare-fun b!23632 () Bool)

(declare-fun res!14518 () Bool)

(assert (=> b!23632 (=> (not res!14518) (not e!15318))))

(assert (=> b!23632 (= res!14518 (inRange!0 (index!2342 lt!8648) (mask!4729 lt!8141)))))

(declare-fun b!23633 () Bool)

(assert (=> b!23633 (= e!15318 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8648)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23633 (and (bvsge (index!2342 lt!8648) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8648) (size!693 (_keys!3163 lt!8141))))))

(assert (= (and d!4027 res!14517) b!23632))

(assert (= (and b!23632 res!14518) b!23633))

(assert (=> d!4027 m!16750))

(declare-fun m!17262 () Bool)

(assert (=> d!4027 m!17262))

(assert (=> d!4027 m!17050))

(declare-fun m!17264 () Bool)

(assert (=> b!23632 m!17264))

(declare-fun m!17266 () Bool)

(assert (=> b!23633 m!17266))

(assert (=> bm!1919 d!4027))

(declare-fun d!4029 () Bool)

(assert (=> d!4029 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8340 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8650 () Unit!519)

(assert (=> d!4029 (= lt!8650 (choose!206 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) lt!8340 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4029 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4029 (= (lemmaChangeZeroKeyThenAddPairToListMap!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) lt!8340 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) (defaultEntry!1742 (_2!487 lt!8138))) lt!8650)))

(declare-fun bs!956 () Bool)

(assert (= bs!956 d!4029))

(declare-fun m!17268 () Bool)

(assert (=> bs!956 m!17268))

(assert (=> bs!956 m!17036))

(assert (=> bs!956 m!16878))

(assert (=> bs!956 m!17036))

(declare-fun m!17270 () Bool)

(assert (=> bs!956 m!17270))

(declare-fun m!17272 () Bool)

(assert (=> bs!956 m!17272))

(assert (=> b!23344 d!4029))

(declare-fun d!4031 () Bool)

(declare-fun lt!8657 () SeekEntryResult!55)

(assert (=> d!4031 (and (or ((_ is Undefined!55) lt!8657) (not ((_ is Found!55) lt!8657)) (and (bvsge (index!2342 lt!8657) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8657) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!55) lt!8657) ((_ is Found!55) lt!8657) (not ((_ is MissingZero!55) lt!8657)) (and (bvsge (index!2341 lt!8657) #b00000000000000000000000000000000) (bvslt (index!2341 lt!8657) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!55) lt!8657) ((_ is Found!55) lt!8657) ((_ is MissingZero!55) lt!8657) (not ((_ is MissingVacant!55) lt!8657)) (and (bvsge (index!2344 lt!8657) #b00000000000000000000000000000000) (bvslt (index!2344 lt!8657) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!55) lt!8657) (ite ((_ is Found!55) lt!8657) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8657)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite ((_ is MissingZero!55) lt!8657) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2341 lt!8657)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!55) lt!8657) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2344 lt!8657)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!15327 () SeekEntryResult!55)

(assert (=> d!4031 (= lt!8657 e!15327)))

(declare-fun c!3076 () Bool)

(declare-fun lt!8658 () SeekEntryResult!55)

(assert (=> d!4031 (= c!3076 (and ((_ is Intermediate!55) lt!8658) (undefined!867 lt!8658)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!1263 (_ BitVec 32)) SeekEntryResult!55)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!4031 (= lt!8658 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(assert (=> d!4031 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4031 (= (seekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)) lt!8657)))

(declare-fun b!23646 () Bool)

(declare-fun e!15326 () SeekEntryResult!55)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!1263 (_ BitVec 32)) SeekEntryResult!55)

(assert (=> b!23646 (= e!15326 (seekKeyOrZeroReturnVacant!0 (x!5577 lt!8658) (index!2343 lt!8658) (index!2343 lt!8658) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!23647 () Bool)

(declare-fun e!15325 () SeekEntryResult!55)

(assert (=> b!23647 (= e!15325 (Found!55 (index!2343 lt!8658)))))

(declare-fun b!23648 () Bool)

(declare-fun c!3078 () Bool)

(declare-fun lt!8659 () (_ BitVec 64))

(assert (=> b!23648 (= c!3078 (= lt!8659 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23648 (= e!15325 e!15326)))

(declare-fun b!23649 () Bool)

(assert (=> b!23649 (= e!15326 (MissingZero!55 (index!2343 lt!8658)))))

(declare-fun b!23650 () Bool)

(assert (=> b!23650 (= e!15327 Undefined!55)))

(declare-fun b!23651 () Bool)

(assert (=> b!23651 (= e!15327 e!15325)))

(assert (=> b!23651 (= lt!8659 (select (arr!597 (_keys!3163 lt!8141)) (index!2343 lt!8658)))))

(declare-fun c!3077 () Bool)

(assert (=> b!23651 (= c!3077 (= lt!8659 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4031 c!3076) b!23650))

(assert (= (and d!4031 (not c!3076)) b!23651))

(assert (= (and b!23651 c!3077) b!23647))

(assert (= (and b!23651 (not c!3077)) b!23648))

(assert (= (and b!23648 c!3078) b!23649))

(assert (= (and b!23648 (not c!3078)) b!23646))

(declare-fun m!17274 () Bool)

(assert (=> d!4031 m!17274))

(declare-fun m!17276 () Bool)

(assert (=> d!4031 m!17276))

(declare-fun m!17278 () Bool)

(assert (=> d!4031 m!17278))

(declare-fun m!17280 () Bool)

(assert (=> d!4031 m!17280))

(assert (=> d!4031 m!17050))

(assert (=> d!4031 m!17280))

(declare-fun m!17282 () Bool)

(assert (=> d!4031 m!17282))

(declare-fun m!17284 () Bool)

(assert (=> b!23646 m!17284))

(declare-fun m!17286 () Bool)

(assert (=> b!23651 m!17286))

(assert (=> bm!1908 d!4031))

(declare-fun d!4033 () Bool)

(assert (=> d!4033 (= (map!408 (_2!487 lt!8336)) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8336)) (_values!1728 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336)) (extraKeys!1640 (_2!487 lt!8336)) (zeroValue!1665 (_2!487 lt!8336)) (minValue!1665 (_2!487 lt!8336)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8336))))))

(declare-fun bs!957 () Bool)

(assert (= bs!957 d!4033))

(declare-fun m!17288 () Bool)

(assert (=> bs!957 m!17288))

(assert (=> bm!1939 d!4033))

(declare-fun d!4035 () Bool)

(declare-fun e!15329 () Bool)

(assert (=> d!4035 e!15329))

(declare-fun res!14519 () Bool)

(assert (=> d!4035 (=> res!14519 e!15329)))

(declare-fun lt!8663 () Bool)

(assert (=> d!4035 (= res!14519 (not lt!8663))))

(declare-fun lt!8662 () Bool)

(assert (=> d!4035 (= lt!8663 lt!8662)))

(declare-fun lt!8661 () Unit!519)

(declare-fun e!15328 () Unit!519)

(assert (=> d!4035 (= lt!8661 e!15328)))

(declare-fun c!3079 () Bool)

(assert (=> d!4035 (= c!3079 lt!8662)))

(assert (=> d!4035 (= lt!8662 (containsKey!24 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))

(assert (=> d!4035 (= (contains!230 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))) lt!8663)))

(declare-fun b!23652 () Bool)

(declare-fun lt!8660 () Unit!519)

(assert (=> b!23652 (= e!15328 lt!8660)))

(assert (=> b!23652 (= lt!8660 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))

(assert (=> b!23652 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))

(declare-fun b!23653 () Bool)

(declare-fun Unit!540 () Unit!519)

(assert (=> b!23653 (= e!15328 Unit!540)))

(declare-fun b!23654 () Bool)

(assert (=> b!23654 (= e!15329 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240)))))))

(assert (= (and d!4035 c!3079) b!23652))

(assert (= (and d!4035 (not c!3079)) b!23653))

(assert (= (and d!4035 (not res!14519)) b!23654))

(assert (=> d!4035 m!16722))

(declare-fun m!17290 () Bool)

(assert (=> d!4035 m!17290))

(assert (=> b!23652 m!16722))

(declare-fun m!17292 () Bool)

(assert (=> b!23652 m!17292))

(assert (=> b!23652 m!16722))

(declare-fun m!17294 () Bool)

(assert (=> b!23652 m!17294))

(assert (=> b!23652 m!17294))

(declare-fun m!17296 () Bool)

(assert (=> b!23652 m!17296))

(assert (=> b!23654 m!16722))

(assert (=> b!23654 m!17294))

(assert (=> b!23654 m!17294))

(assert (=> b!23654 m!17296))

(assert (=> b!23253 d!4035))

(declare-fun b!23655 () Bool)

(declare-fun e!15338 () ListLongMap!565)

(declare-fun call!2020 () ListLongMap!565)

(assert (=> b!23655 (= e!15338 call!2020)))

(declare-fun bm!2015 () Bool)

(declare-fun call!2021 () ListLongMap!565)

(declare-fun call!2023 () ListLongMap!565)

(assert (=> bm!2015 (= call!2021 call!2023)))

(declare-fun b!23656 () Bool)

(declare-fun e!15334 () Bool)

(declare-fun e!15342 () Bool)

(assert (=> b!23656 (= e!15334 e!15342)))

(declare-fun c!3081 () Bool)

(assert (=> b!23656 (= c!3081 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23657 () Bool)

(declare-fun e!15333 () Bool)

(declare-fun lt!8668 () ListLongMap!565)

(assert (=> b!23657 (= e!15333 (= (apply!29 lt!8668 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8236) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23657 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8236)))))

(assert (=> b!23657 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun c!3083 () Bool)

(declare-fun call!2022 () ListLongMap!565)

(declare-fun bm!2016 () Bool)

(declare-fun call!2019 () ListLongMap!565)

(declare-fun c!3082 () Bool)

(assert (=> bm!2016 (= call!2023 (+!45 (ite c!3082 call!2022 (ite c!3083 call!2019 call!2020)) (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!23658 () Bool)

(declare-fun res!14525 () Bool)

(assert (=> b!23658 (=> (not res!14525) (not e!15334))))

(declare-fun e!15339 () Bool)

(assert (=> b!23658 (= res!14525 e!15339)))

(declare-fun c!3080 () Bool)

(assert (=> b!23658 (= c!3080 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2017 () Bool)

(declare-fun call!2018 () Bool)

(assert (=> bm!2017 (= call!2018 (contains!230 lt!8668 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23659 () Bool)

(declare-fun e!15331 () Bool)

(assert (=> b!23659 (= e!15342 e!15331)))

(declare-fun res!14523 () Bool)

(declare-fun call!2024 () Bool)

(assert (=> b!23659 (= res!14523 call!2024)))

(assert (=> b!23659 (=> (not res!14523) (not e!15331))))

(declare-fun b!23660 () Bool)

(declare-fun e!15337 () Unit!519)

(declare-fun Unit!541 () Unit!519)

(assert (=> b!23660 (= e!15337 Unit!541)))

(declare-fun b!23661 () Bool)

(assert (=> b!23661 (= e!15342 (not call!2024))))

(declare-fun b!23662 () Bool)

(declare-fun e!15340 () Bool)

(assert (=> b!23662 (= e!15340 (= (apply!29 lt!8668 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun bm!2018 () Bool)

(assert (=> bm!2018 (= call!2024 (contains!230 lt!8668 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23663 () Bool)

(assert (=> b!23663 (= e!15339 (not call!2018))))

(declare-fun d!4037 () Bool)

(assert (=> d!4037 e!15334))

(declare-fun res!14522 () Bool)

(assert (=> d!4037 (=> (not res!14522) (not e!15334))))

(assert (=> d!4037 (= res!14522 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!8683 () ListLongMap!565)

(assert (=> d!4037 (= lt!8668 lt!8683)))

(declare-fun lt!8675 () Unit!519)

(assert (=> d!4037 (= lt!8675 e!15337)))

(declare-fun c!3084 () Bool)

(declare-fun e!15341 () Bool)

(assert (=> d!4037 (= c!3084 e!15341)))

(declare-fun res!14526 () Bool)

(assert (=> d!4037 (=> (not res!14526) (not e!15341))))

(assert (=> d!4037 (= res!14526 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun e!15335 () ListLongMap!565)

(assert (=> d!4037 (= lt!8683 e!15335)))

(assert (=> d!4037 (= c!3082 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4037 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4037 (= (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8668)))

(declare-fun b!23664 () Bool)

(assert (=> b!23664 (= e!15331 (= (apply!29 lt!8668 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!23665 () Bool)

(assert (=> b!23665 (= e!15335 (+!45 call!2023 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun b!23666 () Bool)

(declare-fun e!15336 () Bool)

(assert (=> b!23666 (= e!15336 e!15333)))

(declare-fun res!14527 () Bool)

(assert (=> b!23666 (=> (not res!14527) (not e!15333))))

(assert (=> b!23666 (= res!14527 (contains!230 lt!8668 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23666 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23667 () Bool)

(declare-fun res!14524 () Bool)

(assert (=> b!23667 (=> (not res!14524) (not e!15334))))

(assert (=> b!23667 (= res!14524 e!15336)))

(declare-fun res!14528 () Bool)

(assert (=> b!23667 (=> res!14528 e!15336)))

(declare-fun e!15332 () Bool)

(assert (=> b!23667 (= res!14528 (not e!15332))))

(declare-fun res!14521 () Bool)

(assert (=> b!23667 (=> (not res!14521) (not e!15332))))

(assert (=> b!23667 (= res!14521 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23668 () Bool)

(assert (=> b!23668 (= e!15338 call!2021)))

(declare-fun b!23669 () Bool)

(declare-fun lt!8665 () Unit!519)

(assert (=> b!23669 (= e!15337 lt!8665)))

(declare-fun lt!8679 () ListLongMap!565)

(assert (=> b!23669 (= lt!8679 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8664 () (_ BitVec 64))

(assert (=> b!23669 (= lt!8664 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8678 () (_ BitVec 64))

(assert (=> b!23669 (= lt!8678 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8684 () Unit!519)

(assert (=> b!23669 (= lt!8684 (addStillContains!14 lt!8679 lt!8664 (zeroValue!1665 lt!8141) lt!8678))))

(assert (=> b!23669 (contains!230 (+!45 lt!8679 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141))) lt!8678)))

(declare-fun lt!8681 () Unit!519)

(assert (=> b!23669 (= lt!8681 lt!8684)))

(declare-fun lt!8685 () ListLongMap!565)

(assert (=> b!23669 (= lt!8685 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8674 () (_ BitVec 64))

(assert (=> b!23669 (= lt!8674 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8670 () (_ BitVec 64))

(assert (=> b!23669 (= lt!8670 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8676 () Unit!519)

(assert (=> b!23669 (= lt!8676 (addApplyDifferent!14 lt!8685 lt!8674 (minValue!1665 lt!8141) lt!8670))))

(assert (=> b!23669 (= (apply!29 (+!45 lt!8685 (tuple2!971 lt!8674 (minValue!1665 lt!8141))) lt!8670) (apply!29 lt!8685 lt!8670))))

(declare-fun lt!8666 () Unit!519)

(assert (=> b!23669 (= lt!8666 lt!8676)))

(declare-fun lt!8677 () ListLongMap!565)

(assert (=> b!23669 (= lt!8677 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8671 () (_ BitVec 64))

(assert (=> b!23669 (= lt!8671 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8673 () (_ BitVec 64))

(assert (=> b!23669 (= lt!8673 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8672 () Unit!519)

(assert (=> b!23669 (= lt!8672 (addApplyDifferent!14 lt!8677 lt!8671 (zeroValue!1665 lt!8141) lt!8673))))

(assert (=> b!23669 (= (apply!29 (+!45 lt!8677 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141))) lt!8673) (apply!29 lt!8677 lt!8673))))

(declare-fun lt!8667 () Unit!519)

(assert (=> b!23669 (= lt!8667 lt!8672)))

(declare-fun lt!8682 () ListLongMap!565)

(assert (=> b!23669 (= lt!8682 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8680 () (_ BitVec 64))

(assert (=> b!23669 (= lt!8680 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8669 () (_ BitVec 64))

(assert (=> b!23669 (= lt!8669 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!23669 (= lt!8665 (addApplyDifferent!14 lt!8682 lt!8680 (minValue!1665 lt!8141) lt!8669))))

(assert (=> b!23669 (= (apply!29 (+!45 lt!8682 (tuple2!971 lt!8680 (minValue!1665 lt!8141))) lt!8669) (apply!29 lt!8682 lt!8669))))

(declare-fun b!23670 () Bool)

(declare-fun e!15330 () ListLongMap!565)

(assert (=> b!23670 (= e!15330 call!2021)))

(declare-fun b!23671 () Bool)

(assert (=> b!23671 (= e!15335 e!15330)))

(assert (=> b!23671 (= c!3083 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23672 () Bool)

(declare-fun c!3085 () Bool)

(assert (=> b!23672 (= c!3085 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23672 (= e!15330 e!15338)))

(declare-fun bm!2019 () Bool)

(assert (=> bm!2019 (= call!2020 call!2019)))

(declare-fun bm!2020 () Bool)

(assert (=> bm!2020 (= call!2019 call!2022)))

(declare-fun b!23673 () Bool)

(assert (=> b!23673 (= e!15339 e!15340)))

(declare-fun res!14520 () Bool)

(assert (=> b!23673 (= res!14520 call!2018)))

(assert (=> b!23673 (=> (not res!14520) (not e!15340))))

(declare-fun b!23674 () Bool)

(assert (=> b!23674 (= e!15341 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2021 () Bool)

(assert (=> bm!2021 (= call!2022 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23675 () Bool)

(assert (=> b!23675 (= e!15332 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (= (and d!4037 c!3082) b!23665))

(assert (= (and d!4037 (not c!3082)) b!23671))

(assert (= (and b!23671 c!3083) b!23670))

(assert (= (and b!23671 (not c!3083)) b!23672))

(assert (= (and b!23672 c!3085) b!23668))

(assert (= (and b!23672 (not c!3085)) b!23655))

(assert (= (or b!23668 b!23655) bm!2019))

(assert (= (or b!23670 bm!2019) bm!2020))

(assert (= (or b!23670 b!23668) bm!2015))

(assert (= (or b!23665 bm!2020) bm!2021))

(assert (= (or b!23665 bm!2015) bm!2016))

(assert (= (and d!4037 res!14526) b!23674))

(assert (= (and d!4037 c!3084) b!23669))

(assert (= (and d!4037 (not c!3084)) b!23660))

(assert (= (and d!4037 res!14522) b!23667))

(assert (= (and b!23667 res!14521) b!23675))

(assert (= (and b!23667 (not res!14528)) b!23666))

(assert (= (and b!23666 res!14527) b!23657))

(assert (= (and b!23667 res!14524) b!23658))

(assert (= (and b!23658 c!3080) b!23673))

(assert (= (and b!23658 (not c!3080)) b!23663))

(assert (= (and b!23673 res!14520) b!23662))

(assert (= (or b!23673 b!23663) bm!2017))

(assert (= (and b!23658 res!14525) b!23656))

(assert (= (and b!23656 c!3081) b!23659))

(assert (= (and b!23656 (not c!3081)) b!23661))

(assert (= (and b!23659 res!14523) b!23664))

(assert (= (or b!23659 b!23661) bm!2018))

(declare-fun b_lambda!1575 () Bool)

(assert (=> (not b_lambda!1575) (not b!23657)))

(declare-fun tb!655 () Bool)

(declare-fun t!3234 () Bool)

(assert (=> (and b!23067 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8141)) t!3234) tb!655))

(declare-fun result!1095 () Bool)

(assert (=> tb!655 (= result!1095 tp_is_empty!1021)))

(assert (=> b!23657 t!3234))

(declare-fun b_and!1487 () Bool)

(assert (= b_and!1485 (and (=> t!3234 result!1095) b_and!1487)))

(assert (=> b!23666 m!17198))

(assert (=> b!23666 m!17198))

(declare-fun m!17298 () Bool)

(assert (=> b!23666 m!17298))

(declare-fun m!17300 () Bool)

(assert (=> b!23665 m!17300))

(declare-fun m!17302 () Bool)

(assert (=> b!23657 m!17302))

(declare-fun m!17304 () Bool)

(assert (=> b!23657 m!17304))

(declare-fun m!17306 () Bool)

(assert (=> b!23657 m!17306))

(assert (=> b!23657 m!17198))

(declare-fun m!17308 () Bool)

(assert (=> b!23657 m!17308))

(assert (=> b!23657 m!17198))

(assert (=> b!23657 m!17302))

(assert (=> b!23657 m!17304))

(assert (=> b!23674 m!17198))

(assert (=> b!23674 m!17198))

(declare-fun m!17310 () Bool)

(assert (=> b!23674 m!17310))

(declare-fun m!17312 () Bool)

(assert (=> bm!2016 m!17312))

(assert (=> b!23675 m!17198))

(assert (=> b!23675 m!17198))

(assert (=> b!23675 m!17310))

(declare-fun m!17314 () Bool)

(assert (=> bm!2017 m!17314))

(declare-fun m!17316 () Bool)

(assert (=> b!23664 m!17316))

(declare-fun m!17318 () Bool)

(assert (=> bm!2018 m!17318))

(declare-fun m!17320 () Bool)

(assert (=> b!23662 m!17320))

(declare-fun m!17322 () Bool)

(assert (=> bm!2021 m!17322))

(assert (=> d!4037 m!17050))

(declare-fun m!17324 () Bool)

(assert (=> b!23669 m!17324))

(declare-fun m!17326 () Bool)

(assert (=> b!23669 m!17326))

(declare-fun m!17328 () Bool)

(assert (=> b!23669 m!17328))

(declare-fun m!17330 () Bool)

(assert (=> b!23669 m!17330))

(declare-fun m!17332 () Bool)

(assert (=> b!23669 m!17332))

(assert (=> b!23669 m!17322))

(assert (=> b!23669 m!17326))

(assert (=> b!23669 m!17198))

(declare-fun m!17334 () Bool)

(assert (=> b!23669 m!17334))

(declare-fun m!17336 () Bool)

(assert (=> b!23669 m!17336))

(declare-fun m!17338 () Bool)

(assert (=> b!23669 m!17338))

(assert (=> b!23669 m!17336))

(declare-fun m!17340 () Bool)

(assert (=> b!23669 m!17340))

(declare-fun m!17342 () Bool)

(assert (=> b!23669 m!17342))

(declare-fun m!17344 () Bool)

(assert (=> b!23669 m!17344))

(declare-fun m!17346 () Bool)

(assert (=> b!23669 m!17346))

(assert (=> b!23669 m!17346))

(declare-fun m!17348 () Bool)

(assert (=> b!23669 m!17348))

(assert (=> b!23669 m!17342))

(declare-fun m!17350 () Bool)

(assert (=> b!23669 m!17350))

(declare-fun m!17352 () Bool)

(assert (=> b!23669 m!17352))

(assert (=> b!23253 d!4037))

(declare-fun d!4039 () Bool)

(declare-fun e!15345 () Bool)

(assert (=> d!4039 e!15345))

(declare-fun res!14531 () Bool)

(assert (=> d!4039 (=> (not res!14531) (not e!15345))))

(assert (=> d!4039 (= res!14531 (and (bvsge (index!2342 lt!8240) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8240) (size!693 (_keys!3163 lt!8141)))))))

(declare-fun lt!8688 () Unit!519)

(declare-fun choose!208 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) Int) Unit!519)

(assert (=> d!4039 (= lt!8688 (choose!208 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2342 lt!8240) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4039 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4039 (= (lemmaValidKeyInArrayIsInListMap!10 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2342 lt!8240) (defaultEntry!1742 lt!8141)) lt!8688)))

(declare-fun b!23678 () Bool)

(assert (=> b!23678 (= e!15345 (contains!230 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))

(assert (= (and d!4039 res!14531) b!23678))

(declare-fun m!17354 () Bool)

(assert (=> d!4039 m!17354))

(assert (=> d!4039 m!17050))

(assert (=> b!23678 m!16720))

(assert (=> b!23678 m!16722))

(assert (=> b!23678 m!16720))

(assert (=> b!23678 m!16722))

(assert (=> b!23678 m!16724))

(assert (=> b!23253 d!4039))

(declare-fun d!4041 () Bool)

(declare-fun e!15348 () Bool)

(assert (=> d!4041 e!15348))

(declare-fun res!14534 () Bool)

(assert (=> d!4041 (=> (not res!14534) (not e!15348))))

(assert (=> d!4041 (= res!14534 (and (bvsge (index!2342 lt!8240) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8240) (size!692 (_values!1728 lt!8141)))))))

(declare-fun lt!8691 () Unit!519)

(declare-fun choose!209 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) (_ BitVec 64) V!1187 Int) Unit!519)

(assert (=> d!4041 (= lt!8691 (choose!209 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2342 lt!8240) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4041 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4041 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2342 lt!8240) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) lt!8691)))

(declare-fun b!23681 () Bool)

(assert (=> b!23681 (= e!15348 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (getCurrentListMap!129 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))))

(assert (= (and d!4041 res!14534) b!23681))

(declare-fun m!17356 () Bool)

(assert (=> d!4041 m!17356))

(assert (=> d!4041 m!17050))

(assert (=> b!23681 m!17054))

(assert (=> b!23681 m!17054))

(assert (=> b!23681 m!17070))

(assert (=> b!23681 m!16726))

(declare-fun m!17358 () Bool)

(assert (=> b!23681 m!17358))

(assert (=> b!23253 d!4041))

(declare-fun d!4043 () Bool)

(assert (=> d!4043 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8692 () Unit!519)

(assert (=> d!4043 (= lt!8692 (choose!205 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4043 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4043 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))) lt!8692)))

(declare-fun bs!958 () Bool)

(assert (= bs!958 d!4043))

(assert (=> bs!958 m!16878))

(declare-fun m!17360 () Bool)

(assert (=> bs!958 m!17360))

(assert (=> bs!958 m!17036))

(assert (=> bs!958 m!17036))

(assert (=> bs!958 m!17212))

(declare-fun m!17362 () Bool)

(assert (=> bs!958 m!17362))

(assert (=> b!23346 d!4043))

(assert (=> b!23241 d!4031))

(declare-fun d!4045 () Bool)

(declare-fun e!15349 () Bool)

(assert (=> d!4045 e!15349))

(declare-fun res!14535 () Bool)

(assert (=> d!4045 (=> (not res!14535) (not e!15349))))

(declare-fun lt!8695 () ListLongMap!565)

(assert (=> d!4045 (= res!14535 (contains!230 lt!8695 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun lt!8693 () List!565)

(assert (=> d!4045 (= lt!8695 (ListLongMap!566 lt!8693))))

(declare-fun lt!8694 () Unit!519)

(declare-fun lt!8696 () Unit!519)

(assert (=> d!4045 (= lt!8694 lt!8696)))

(assert (=> d!4045 (= (getValueByKey!60 lt!8693 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4045 (= lt!8696 (lemmaContainsTupThenGetReturnValue!18 lt!8693 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4045 (= lt!8693 (insertStrictlySorted!18 (toList!298 call!1957) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4045 (= (+!45 call!1957 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!8695)))

(declare-fun b!23682 () Bool)

(declare-fun res!14536 () Bool)

(assert (=> b!23682 (=> (not res!14536) (not e!15349))))

(assert (=> b!23682 (= res!14536 (= (getValueByKey!60 (toList!298 lt!8695) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!23683 () Bool)

(assert (=> b!23683 (= e!15349 (contains!231 (toList!298 lt!8695) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(assert (= (and d!4045 res!14535) b!23682))

(assert (= (and b!23682 res!14536) b!23683))

(declare-fun m!17364 () Bool)

(assert (=> d!4045 m!17364))

(declare-fun m!17366 () Bool)

(assert (=> d!4045 m!17366))

(declare-fun m!17368 () Bool)

(assert (=> d!4045 m!17368))

(declare-fun m!17370 () Bool)

(assert (=> d!4045 m!17370))

(declare-fun m!17372 () Bool)

(assert (=> b!23682 m!17372))

(declare-fun m!17374 () Bool)

(assert (=> b!23683 m!17374))

(assert (=> b!23345 d!4045))

(declare-fun b!23684 () Bool)

(declare-fun e!15352 () Bool)

(declare-fun e!15353 () Bool)

(assert (=> b!23684 (= e!15352 e!15353)))

(declare-fun c!3087 () Bool)

(declare-fun lt!8698 () SeekEntryResult!55)

(assert (=> b!23684 (= c!3087 ((_ is MissingVacant!55) lt!8698))))

(declare-fun bm!2022 () Bool)

(declare-fun call!2026 () Bool)

(assert (=> bm!2022 (= call!2026 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun bm!2023 () Bool)

(declare-fun call!2025 () Bool)

(declare-fun c!3086 () Bool)

(assert (=> bm!2023 (= call!2025 (inRange!0 (ite c!3086 (index!2341 lt!8698) (index!2344 lt!8698)) (mask!4729 lt!8141)))))

(declare-fun b!23685 () Bool)

(declare-fun e!15350 () Bool)

(assert (=> b!23685 (= e!15350 (not call!2026))))

(declare-fun b!23686 () Bool)

(assert (=> b!23686 (= e!15353 ((_ is Undefined!55) lt!8698))))

(declare-fun b!23688 () Bool)

(declare-fun res!14537 () Bool)

(declare-fun e!15351 () Bool)

(assert (=> b!23688 (=> (not res!14537) (not e!15351))))

(assert (=> b!23688 (= res!14537 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2344 lt!8698)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23688 (and (bvsge (index!2344 lt!8698) #b00000000000000000000000000000000) (bvslt (index!2344 lt!8698) (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23689 () Bool)

(assert (=> b!23689 (= e!15352 e!15350)))

(declare-fun res!14538 () Bool)

(assert (=> b!23689 (= res!14538 call!2025)))

(assert (=> b!23689 (=> (not res!14538) (not e!15350))))

(declare-fun b!23690 () Bool)

(declare-fun res!14539 () Bool)

(assert (=> b!23690 (=> (not res!14539) (not e!15351))))

(assert (=> b!23690 (= res!14539 call!2025)))

(assert (=> b!23690 (= e!15353 e!15351)))

(declare-fun b!23691 () Bool)

(assert (=> b!23691 (and (bvsge (index!2341 lt!8698) #b00000000000000000000000000000000) (bvslt (index!2341 lt!8698) (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14540 () Bool)

(assert (=> b!23691 (= res!14540 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2341 lt!8698)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23691 (=> (not res!14540) (not e!15350))))

(declare-fun b!23687 () Bool)

(assert (=> b!23687 (= e!15351 (not call!2026))))

(declare-fun d!4047 () Bool)

(assert (=> d!4047 e!15352))

(assert (=> d!4047 (= c!3086 ((_ is MissingZero!55) lt!8698))))

(assert (=> d!4047 (= lt!8698 (seekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun lt!8697 () Unit!519)

(assert (=> d!4047 (= lt!8697 (choose!203 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4047 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4047 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!10 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)) lt!8697)))

(assert (= (and d!4047 c!3086) b!23689))

(assert (= (and d!4047 (not c!3086)) b!23684))

(assert (= (and b!23689 res!14538) b!23691))

(assert (= (and b!23691 res!14540) b!23685))

(assert (= (and b!23684 c!3087) b!23690))

(assert (= (and b!23684 (not c!3087)) b!23686))

(assert (= (and b!23690 res!14539) b!23688))

(assert (= (and b!23688 res!14537) b!23687))

(assert (= (or b!23689 b!23690) bm!2023))

(assert (= (or b!23685 b!23687) bm!2022))

(assert (=> bm!2022 m!16764))

(declare-fun m!17376 () Bool)

(assert (=> b!23691 m!17376))

(assert (=> d!4047 m!16750))

(declare-fun m!17378 () Bool)

(assert (=> d!4047 m!17378))

(assert (=> d!4047 m!17050))

(declare-fun m!17380 () Bool)

(assert (=> bm!2023 m!17380))

(declare-fun m!17382 () Bool)

(assert (=> b!23688 m!17382))

(assert (=> bm!1928 d!4047))

(declare-fun d!4049 () Bool)

(assert (=> d!4049 (= (map!408 lt!8141) (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun bs!959 () Bool)

(assert (= bs!959 d!4049))

(assert (=> bs!959 m!17054))

(assert (=> bm!1920 d!4049))

(declare-fun d!4051 () Bool)

(declare-fun res!14541 () Bool)

(declare-fun e!15354 () Bool)

(assert (=> d!4051 (=> res!14541 e!15354)))

(assert (=> d!4051 (= res!14541 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4051 (= (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000) e!15354)))

(declare-fun b!23692 () Bool)

(declare-fun e!15355 () Bool)

(assert (=> b!23692 (= e!15354 e!15355)))

(declare-fun res!14542 () Bool)

(assert (=> b!23692 (=> (not res!14542) (not e!15355))))

(assert (=> b!23692 (= res!14542 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23693 () Bool)

(assert (=> b!23693 (= e!15355 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4051 (not res!14541)) b!23692))

(assert (= (and b!23692 res!14542) b!23693))

(assert (=> d!4051 m!16908))

(declare-fun m!17384 () Bool)

(assert (=> b!23693 m!17384))

(assert (=> bm!1933 d!4051))

(declare-fun d!4053 () Bool)

(declare-fun lt!8703 () tuple2!972)

(assert (=> d!4053 (or (bvsle (_2!494 lt!8703) #b00000000000000000000000000001000) (bvsge (bvmul #b00000000000000000000000000001000 (_size!149 (v!1601 (underlying!115 thiss!938)))) (_2!494 lt!8703)) (bvslt (bvadd (bvand (bvashr (_2!494 lt!8703) #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun e!15358 () tuple2!972)

(assert (=> d!4053 (= lt!8703 e!15358)))

(declare-fun c!3090 () Bool)

(declare-fun lt!8704 () (_ BitVec 32))

(assert (=> d!4053 (= c!3090 (and (bvsgt lt!8704 #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8704) (bvsge (bvadd (bvand (bvashr lt!8704 #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1601 (underlying!115 thiss!938))))))))

(assert (=> d!4053 (= lt!8704 (bvlshr (_2!494 lt!8332) #b00000000000000000000000000000001))))

(assert (=> d!4053 (and (bvsgt (_2!494 lt!8332) #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1601 (underlying!115 thiss!938)))) (_2!494 lt!8332)) (bvsge (bvadd (bvand (bvashr (_2!494 lt!8332) #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(assert (=> d!4053 (= (computeNewMaskWhile!14 (_size!149 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (mask!4729 (v!1601 (underlying!115 thiss!938))) (_2!494 lt!8332)) lt!8703)))

(declare-fun b!23698 () Bool)

(assert (=> b!23698 (= e!15358 (computeNewMaskWhile!14 (_size!149 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (mask!4729 (v!1601 (underlying!115 thiss!938))) lt!8704))))

(declare-fun b!23699 () Bool)

(declare-fun Unit!542 () Unit!519)

(assert (=> b!23699 (= e!15358 (tuple2!973 Unit!542 lt!8704))))

(assert (= (and d!4053 c!3090) b!23698))

(assert (= (and d!4053 (not c!3090)) b!23699))

(declare-fun m!17387 () Bool)

(assert (=> b!23698 m!17387))

(assert (=> b!23304 d!4053))

(declare-fun d!4055 () Bool)

(assert (=> d!4055 (= (inRange!0 (ite c!2973 (ite c!2979 (index!2342 lt!8248) (ite c!2972 (index!2341 lt!8257) (index!2344 lt!8257))) (ite c!2970 (index!2342 lt!8252) (ite c!2975 (index!2341 lt!8239) (index!2344 lt!8239)))) (mask!4729 lt!8141)) (and (bvsge (ite c!2973 (ite c!2979 (index!2342 lt!8248) (ite c!2972 (index!2341 lt!8257) (index!2344 lt!8257))) (ite c!2970 (index!2342 lt!8252) (ite c!2975 (index!2341 lt!8239) (index!2344 lt!8239)))) #b00000000000000000000000000000000) (bvslt (ite c!2973 (ite c!2979 (index!2342 lt!8248) (ite c!2972 (index!2341 lt!8257) (index!2344 lt!8257))) (ite c!2970 (index!2342 lt!8252) (ite c!2975 (index!2341 lt!8239) (index!2344 lt!8239)))) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(assert (=> bm!1911 d!4055))

(declare-fun d!4057 () Bool)

(declare-fun e!15359 () Bool)

(assert (=> d!4057 e!15359))

(declare-fun res!14543 () Bool)

(assert (=> d!4057 (=> (not res!14543) (not e!15359))))

(declare-fun lt!8705 () SeekEntryResult!55)

(assert (=> d!4057 (= res!14543 ((_ is Found!55) lt!8705))))

(assert (=> d!4057 (= lt!8705 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun lt!8706 () Unit!519)

(assert (=> d!4057 (= lt!8706 (choose!207 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4057 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4057 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!8706)))

(declare-fun b!23700 () Bool)

(declare-fun res!14544 () Bool)

(assert (=> b!23700 (=> (not res!14544) (not e!15359))))

(assert (=> b!23700 (= res!14544 (inRange!0 (index!2342 lt!8705) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!23701 () Bool)

(assert (=> b!23701 (= e!15359 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8705)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23701 (and (bvsge (index!2342 lt!8705) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8705) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (= (and d!4057 res!14543) b!23700))

(assert (= (and b!23700 res!14544) b!23701))

(assert (=> d!4057 m!16846))

(declare-fun m!17389 () Bool)

(assert (=> d!4057 m!17389))

(assert (=> d!4057 m!16878))

(declare-fun m!17391 () Bool)

(assert (=> b!23700 m!17391))

(declare-fun m!17393 () Bool)

(assert (=> b!23701 m!17393))

(assert (=> bm!1943 d!4057))

(declare-fun d!4059 () Bool)

(declare-fun res!14545 () Bool)

(declare-fun e!15360 () Bool)

(assert (=> d!4059 (=> (not res!14545) (not e!15360))))

(assert (=> d!4059 (= res!14545 (simpleValid!20 (_2!487 lt!8336)))))

(assert (=> d!4059 (= (valid!116 (_2!487 lt!8336)) e!15360)))

(declare-fun b!23702 () Bool)

(declare-fun res!14546 () Bool)

(assert (=> b!23702 (=> (not res!14546) (not e!15360))))

(assert (=> b!23702 (= res!14546 (= (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8336)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))) (_size!149 (_2!487 lt!8336))))))

(declare-fun b!23703 () Bool)

(declare-fun res!14547 () Bool)

(assert (=> b!23703 (=> (not res!14547) (not e!15360))))

(assert (=> b!23703 (= res!14547 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336))))))

(declare-fun b!23704 () Bool)

(assert (=> b!23704 (= e!15360 (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8336)) #b00000000000000000000000000000000 Nil!563))))

(assert (= (and d!4059 res!14545) b!23702))

(assert (= (and b!23702 res!14546) b!23703))

(assert (= (and b!23703 res!14547) b!23704))

(declare-fun m!17395 () Bool)

(assert (=> d!4059 m!17395))

(declare-fun m!17397 () Bool)

(assert (=> b!23702 m!17397))

(declare-fun m!17399 () Bool)

(assert (=> b!23703 m!17399))

(declare-fun m!17401 () Bool)

(assert (=> b!23704 m!17401))

(assert (=> d!3961 d!4059))

(declare-fun d!4061 () Bool)

(declare-fun res!14548 () Bool)

(declare-fun e!15361 () Bool)

(assert (=> d!4061 (=> (not res!14548) (not e!15361))))

(assert (=> d!4061 (= res!14548 (simpleValid!20 (_2!487 lt!8138)))))

(assert (=> d!4061 (= (valid!116 (_2!487 lt!8138)) e!15361)))

(declare-fun b!23705 () Bool)

(declare-fun res!14549 () Bool)

(assert (=> b!23705 (=> (not res!14549) (not e!15361))))

(assert (=> b!23705 (= res!14549 (= (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8138)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (_size!149 (_2!487 lt!8138))))))

(declare-fun b!23706 () Bool)

(declare-fun res!14550 () Bool)

(assert (=> b!23706 (=> (not res!14550) (not e!15361))))

(assert (=> b!23706 (= res!14550 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!23707 () Bool)

(assert (=> b!23707 (= e!15361 (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8138)) #b00000000000000000000000000000000 Nil!563))))

(assert (= (and d!4061 res!14548) b!23705))

(assert (= (and b!23705 res!14549) b!23706))

(assert (= (and b!23706 res!14550) b!23707))

(declare-fun m!17403 () Bool)

(assert (=> d!4061 m!17403))

(assert (=> b!23705 m!17218))

(declare-fun m!17405 () Bool)

(assert (=> b!23706 m!17405))

(declare-fun m!17407 () Bool)

(assert (=> b!23707 m!17407))

(assert (=> d!3961 d!4061))

(declare-fun b!23708 () Bool)

(declare-fun e!15370 () ListLongMap!565)

(declare-fun call!2029 () ListLongMap!565)

(assert (=> b!23708 (= e!15370 call!2029)))

(declare-fun bm!2024 () Bool)

(declare-fun call!2030 () ListLongMap!565)

(declare-fun call!2032 () ListLongMap!565)

(assert (=> bm!2024 (= call!2030 call!2032)))

(declare-fun b!23709 () Bool)

(declare-fun e!15366 () Bool)

(declare-fun e!15374 () Bool)

(assert (=> b!23709 (= e!15366 e!15374)))

(declare-fun c!3092 () Bool)

(assert (=> b!23709 (= c!3092 (not (= (bvand (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23710 () Bool)

(declare-fun e!15365 () Bool)

(declare-fun lt!8711 () ListLongMap!565)

(assert (=> b!23710 (= e!15365 (= (apply!29 lt!8711 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23710 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8141))))))

(assert (=> b!23710 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun bm!2025 () Bool)

(declare-fun call!2031 () ListLongMap!565)

(declare-fun call!2028 () ListLongMap!565)

(declare-fun c!3093 () Bool)

(declare-fun c!3094 () Bool)

(assert (=> bm!2025 (= call!2032 (+!45 (ite c!3093 call!2031 (ite c!3094 call!2028 call!2029)) (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(declare-fun b!23711 () Bool)

(declare-fun res!14556 () Bool)

(assert (=> b!23711 (=> (not res!14556) (not e!15366))))

(declare-fun e!15371 () Bool)

(assert (=> b!23711 (= res!14556 e!15371)))

(declare-fun c!3091 () Bool)

(assert (=> b!23711 (= c!3091 (not (= (bvand (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2026 () Bool)

(declare-fun call!2027 () Bool)

(assert (=> bm!2026 (= call!2027 (contains!230 lt!8711 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23712 () Bool)

(declare-fun e!15363 () Bool)

(assert (=> b!23712 (= e!15374 e!15363)))

(declare-fun res!14554 () Bool)

(declare-fun call!2033 () Bool)

(assert (=> b!23712 (= res!14554 call!2033)))

(assert (=> b!23712 (=> (not res!14554) (not e!15363))))

(declare-fun b!23713 () Bool)

(declare-fun e!15369 () Unit!519)

(declare-fun Unit!543 () Unit!519)

(assert (=> b!23713 (= e!15369 Unit!543)))

(declare-fun b!23714 () Bool)

(assert (=> b!23714 (= e!15374 (not call!2033))))

(declare-fun e!15372 () Bool)

(declare-fun b!23715 () Bool)

(assert (=> b!23715 (= e!15372 (= (apply!29 lt!8711 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))

(declare-fun bm!2027 () Bool)

(assert (=> bm!2027 (= call!2033 (contains!230 lt!8711 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23716 () Bool)

(assert (=> b!23716 (= e!15371 (not call!2027))))

(declare-fun d!4063 () Bool)

(assert (=> d!4063 e!15366))

(declare-fun res!14553 () Bool)

(assert (=> d!4063 (=> (not res!14553) (not e!15366))))

(assert (=> d!4063 (= res!14553 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!8726 () ListLongMap!565)

(assert (=> d!4063 (= lt!8711 lt!8726)))

(declare-fun lt!8718 () Unit!519)

(assert (=> d!4063 (= lt!8718 e!15369)))

(declare-fun c!3095 () Bool)

(declare-fun e!15373 () Bool)

(assert (=> d!4063 (= c!3095 e!15373)))

(declare-fun res!14557 () Bool)

(assert (=> d!4063 (=> (not res!14557) (not e!15373))))

(assert (=> d!4063 (= res!14557 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun e!15367 () ListLongMap!565)

(assert (=> d!4063 (= lt!8726 e!15367)))

(assert (=> d!4063 (= c!3093 (and (not (= (bvand (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4063 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4063 (= (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8711)))

(declare-fun b!23717 () Bool)

(assert (=> b!23717 (= e!15363 (= (apply!29 lt!8711 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))

(declare-fun b!23718 () Bool)

(assert (=> b!23718 (= e!15367 (+!45 call!2032 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))

(declare-fun b!23719 () Bool)

(declare-fun e!15368 () Bool)

(assert (=> b!23719 (= e!15368 e!15365)))

(declare-fun res!14558 () Bool)

(assert (=> b!23719 (=> (not res!14558) (not e!15365))))

(assert (=> b!23719 (= res!14558 (contains!230 lt!8711 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23719 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23720 () Bool)

(declare-fun res!14555 () Bool)

(assert (=> b!23720 (=> (not res!14555) (not e!15366))))

(assert (=> b!23720 (= res!14555 e!15368)))

(declare-fun res!14559 () Bool)

(assert (=> b!23720 (=> res!14559 e!15368)))

(declare-fun e!15364 () Bool)

(assert (=> b!23720 (= res!14559 (not e!15364))))

(declare-fun res!14552 () Bool)

(assert (=> b!23720 (=> (not res!14552) (not e!15364))))

(assert (=> b!23720 (= res!14552 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23721 () Bool)

(assert (=> b!23721 (= e!15370 call!2030)))

(declare-fun b!23722 () Bool)

(declare-fun lt!8708 () Unit!519)

(assert (=> b!23722 (= e!15369 lt!8708)))

(declare-fun lt!8722 () ListLongMap!565)

(assert (=> b!23722 (= lt!8722 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8707 () (_ BitVec 64))

(assert (=> b!23722 (= lt!8707 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8721 () (_ BitVec 64))

(assert (=> b!23722 (= lt!8721 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8727 () Unit!519)

(assert (=> b!23722 (= lt!8727 (addStillContains!14 lt!8722 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8721))))

(assert (=> b!23722 (contains!230 (+!45 lt!8722 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8721)))

(declare-fun lt!8724 () Unit!519)

(assert (=> b!23722 (= lt!8724 lt!8727)))

(declare-fun lt!8728 () ListLongMap!565)

(assert (=> b!23722 (= lt!8728 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8717 () (_ BitVec 64))

(assert (=> b!23722 (= lt!8717 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8713 () (_ BitVec 64))

(assert (=> b!23722 (= lt!8713 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8719 () Unit!519)

(assert (=> b!23722 (= lt!8719 (addApplyDifferent!14 lt!8728 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8713))))

(assert (=> b!23722 (= (apply!29 (+!45 lt!8728 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8713) (apply!29 lt!8728 lt!8713))))

(declare-fun lt!8709 () Unit!519)

(assert (=> b!23722 (= lt!8709 lt!8719)))

(declare-fun lt!8720 () ListLongMap!565)

(assert (=> b!23722 (= lt!8720 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8714 () (_ BitVec 64))

(assert (=> b!23722 (= lt!8714 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8716 () (_ BitVec 64))

(assert (=> b!23722 (= lt!8716 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8715 () Unit!519)

(assert (=> b!23722 (= lt!8715 (addApplyDifferent!14 lt!8720 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8716))))

(assert (=> b!23722 (= (apply!29 (+!45 lt!8720 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8716) (apply!29 lt!8720 lt!8716))))

(declare-fun lt!8710 () Unit!519)

(assert (=> b!23722 (= lt!8710 lt!8715)))

(declare-fun lt!8725 () ListLongMap!565)

(assert (=> b!23722 (= lt!8725 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8723 () (_ BitVec 64))

(assert (=> b!23722 (= lt!8723 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8712 () (_ BitVec 64))

(assert (=> b!23722 (= lt!8712 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!23722 (= lt!8708 (addApplyDifferent!14 lt!8725 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8712))))

(assert (=> b!23722 (= (apply!29 (+!45 lt!8725 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8712) (apply!29 lt!8725 lt!8712))))

(declare-fun b!23723 () Bool)

(declare-fun e!15362 () ListLongMap!565)

(assert (=> b!23723 (= e!15362 call!2030)))

(declare-fun b!23724 () Bool)

(assert (=> b!23724 (= e!15367 e!15362)))

(assert (=> b!23724 (= c!3094 (and (not (= (bvand (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun c!3096 () Bool)

(declare-fun b!23725 () Bool)

(assert (=> b!23725 (= c!3096 (and (not (= (bvand (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23725 (= e!15362 e!15370)))

(declare-fun bm!2028 () Bool)

(assert (=> bm!2028 (= call!2029 call!2028)))

(declare-fun bm!2029 () Bool)

(assert (=> bm!2029 (= call!2028 call!2031)))

(declare-fun b!23726 () Bool)

(assert (=> b!23726 (= e!15371 e!15372)))

(declare-fun res!14551 () Bool)

(assert (=> b!23726 (= res!14551 call!2027)))

(assert (=> b!23726 (=> (not res!14551) (not e!15372))))

(declare-fun b!23727 () Bool)

(assert (=> b!23727 (= e!15373 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2030 () Bool)

(assert (=> bm!2030 (= call!2031 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23728 () Bool)

(assert (=> b!23728 (= e!15364 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (= (and d!4063 c!3093) b!23718))

(assert (= (and d!4063 (not c!3093)) b!23724))

(assert (= (and b!23724 c!3094) b!23723))

(assert (= (and b!23724 (not c!3094)) b!23725))

(assert (= (and b!23725 c!3096) b!23721))

(assert (= (and b!23725 (not c!3096)) b!23708))

(assert (= (or b!23721 b!23708) bm!2028))

(assert (= (or b!23723 bm!2028) bm!2029))

(assert (= (or b!23723 b!23721) bm!2024))

(assert (= (or b!23718 bm!2029) bm!2030))

(assert (= (or b!23718 bm!2024) bm!2025))

(assert (= (and d!4063 res!14557) b!23727))

(assert (= (and d!4063 c!3095) b!23722))

(assert (= (and d!4063 (not c!3095)) b!23713))

(assert (= (and d!4063 res!14553) b!23720))

(assert (= (and b!23720 res!14552) b!23728))

(assert (= (and b!23720 (not res!14559)) b!23719))

(assert (= (and b!23719 res!14558) b!23710))

(assert (= (and b!23720 res!14555) b!23711))

(assert (= (and b!23711 c!3091) b!23726))

(assert (= (and b!23711 (not c!3091)) b!23716))

(assert (= (and b!23726 res!14551) b!23715))

(assert (= (or b!23726 b!23716) bm!2026))

(assert (= (and b!23711 res!14556) b!23709))

(assert (= (and b!23709 c!3092) b!23712))

(assert (= (and b!23709 (not c!3092)) b!23714))

(assert (= (and b!23712 res!14554) b!23717))

(assert (= (or b!23712 b!23714) bm!2027))

(declare-fun b_lambda!1577 () Bool)

(assert (=> (not b_lambda!1577) (not b!23710)))

(assert (=> b!23710 t!3234))

(declare-fun b_and!1489 () Bool)

(assert (= b_and!1487 (and (=> t!3234 result!1095) b_and!1489)))

(assert (=> b!23719 m!17198))

(assert (=> b!23719 m!17198))

(declare-fun m!17409 () Bool)

(assert (=> b!23719 m!17409))

(declare-fun m!17411 () Bool)

(assert (=> b!23718 m!17411))

(declare-fun m!17413 () Bool)

(assert (=> b!23710 m!17413))

(assert (=> b!23710 m!17304))

(declare-fun m!17415 () Bool)

(assert (=> b!23710 m!17415))

(assert (=> b!23710 m!17198))

(declare-fun m!17417 () Bool)

(assert (=> b!23710 m!17417))

(assert (=> b!23710 m!17198))

(assert (=> b!23710 m!17413))

(assert (=> b!23710 m!17304))

(assert (=> b!23727 m!17198))

(assert (=> b!23727 m!17198))

(assert (=> b!23727 m!17310))

(declare-fun m!17419 () Bool)

(assert (=> bm!2025 m!17419))

(assert (=> b!23728 m!17198))

(assert (=> b!23728 m!17198))

(assert (=> b!23728 m!17310))

(declare-fun m!17421 () Bool)

(assert (=> bm!2026 m!17421))

(declare-fun m!17423 () Bool)

(assert (=> b!23717 m!17423))

(declare-fun m!17425 () Bool)

(assert (=> bm!2027 m!17425))

(declare-fun m!17427 () Bool)

(assert (=> b!23715 m!17427))

(declare-fun m!17429 () Bool)

(assert (=> bm!2030 m!17429))

(assert (=> d!4063 m!17050))

(declare-fun m!17431 () Bool)

(assert (=> b!23722 m!17431))

(declare-fun m!17433 () Bool)

(assert (=> b!23722 m!17433))

(declare-fun m!17435 () Bool)

(assert (=> b!23722 m!17435))

(declare-fun m!17437 () Bool)

(assert (=> b!23722 m!17437))

(declare-fun m!17439 () Bool)

(assert (=> b!23722 m!17439))

(assert (=> b!23722 m!17429))

(assert (=> b!23722 m!17433))

(assert (=> b!23722 m!17198))

(declare-fun m!17441 () Bool)

(assert (=> b!23722 m!17441))

(declare-fun m!17443 () Bool)

(assert (=> b!23722 m!17443))

(declare-fun m!17445 () Bool)

(assert (=> b!23722 m!17445))

(assert (=> b!23722 m!17443))

(declare-fun m!17447 () Bool)

(assert (=> b!23722 m!17447))

(declare-fun m!17449 () Bool)

(assert (=> b!23722 m!17449))

(declare-fun m!17451 () Bool)

(assert (=> b!23722 m!17451))

(declare-fun m!17453 () Bool)

(assert (=> b!23722 m!17453))

(assert (=> b!23722 m!17453))

(declare-fun m!17455 () Bool)

(assert (=> b!23722 m!17455))

(assert (=> b!23722 m!17449))

(declare-fun m!17457 () Bool)

(assert (=> b!23722 m!17457))

(declare-fun m!17459 () Bool)

(assert (=> b!23722 m!17459))

(assert (=> bm!1921 d!4063))

(declare-fun d!4065 () Bool)

(declare-fun e!15376 () Bool)

(assert (=> d!4065 e!15376))

(declare-fun res!14560 () Bool)

(assert (=> d!4065 (=> res!14560 e!15376)))

(declare-fun lt!8732 () Bool)

(assert (=> d!4065 (= res!14560 (not lt!8732))))

(declare-fun lt!8731 () Bool)

(assert (=> d!4065 (= lt!8732 lt!8731)))

(declare-fun lt!8730 () Unit!519)

(declare-fun e!15375 () Unit!519)

(assert (=> d!4065 (= lt!8730 e!15375)))

(declare-fun c!3097 () Bool)

(assert (=> d!4065 (= c!3097 lt!8731)))

(assert (=> d!4065 (= lt!8731 (containsKey!24 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4065 (= (contains!230 call!1934 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!8732)))

(declare-fun b!23729 () Bool)

(declare-fun lt!8729 () Unit!519)

(assert (=> b!23729 (= e!15375 lt!8729)))

(assert (=> b!23729 (= lt!8729 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23729 (isDefined!22 (getValueByKey!60 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23730 () Bool)

(declare-fun Unit!544 () Unit!519)

(assert (=> b!23730 (= e!15375 Unit!544)))

(declare-fun b!23731 () Bool)

(assert (=> b!23731 (= e!15376 (isDefined!22 (getValueByKey!60 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4065 c!3097) b!23729))

(assert (= (and d!4065 (not c!3097)) b!23730))

(assert (= (and d!4065 (not res!14560)) b!23731))

(declare-fun m!17461 () Bool)

(assert (=> d!4065 m!17461))

(declare-fun m!17463 () Bool)

(assert (=> b!23729 m!17463))

(declare-fun m!17465 () Bool)

(assert (=> b!23729 m!17465))

(assert (=> b!23729 m!17465))

(declare-fun m!17467 () Bool)

(assert (=> b!23729 m!17467))

(assert (=> b!23731 m!17465))

(assert (=> b!23731 m!17465))

(assert (=> b!23731 m!17467))

(assert (=> b!23245 d!4065))

(declare-fun d!4067 () Bool)

(assert (=> d!4067 (= (map!408 lt!8306) (getCurrentListMap!129 (_keys!3163 lt!8306) (_values!1728 lt!8306) (mask!4729 lt!8306) (extraKeys!1640 lt!8306) (zeroValue!1665 lt!8306) (minValue!1665 lt!8306) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8306)))))

(declare-fun bs!960 () Bool)

(assert (= bs!960 d!4067))

(declare-fun m!17469 () Bool)

(assert (=> bs!960 m!17469))

(assert (=> b!23294 d!4067))

(declare-fun d!4069 () Bool)

(declare-fun lt!8733 () SeekEntryResult!55)

(assert (=> d!4069 (and (or ((_ is Undefined!55) lt!8733) (not ((_ is Found!55) lt!8733)) (and (bvsge (index!2342 lt!8733) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8733) (size!693 (_keys!3163 (_2!487 lt!8138)))))) (or ((_ is Undefined!55) lt!8733) ((_ is Found!55) lt!8733) (not ((_ is MissingZero!55) lt!8733)) (and (bvsge (index!2341 lt!8733) #b00000000000000000000000000000000) (bvslt (index!2341 lt!8733) (size!693 (_keys!3163 (_2!487 lt!8138)))))) (or ((_ is Undefined!55) lt!8733) ((_ is Found!55) lt!8733) ((_ is MissingZero!55) lt!8733) (not ((_ is MissingVacant!55) lt!8733)) (and (bvsge (index!2344 lt!8733) #b00000000000000000000000000000000) (bvslt (index!2344 lt!8733) (size!693 (_keys!3163 (_2!487 lt!8138)))))) (or ((_ is Undefined!55) lt!8733) (ite ((_ is Found!55) lt!8733) (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8733)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite ((_ is MissingZero!55) lt!8733) (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2341 lt!8733)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!55) lt!8733) (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2344 lt!8733)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!15379 () SeekEntryResult!55)

(assert (=> d!4069 (= lt!8733 e!15379)))

(declare-fun c!3098 () Bool)

(declare-fun lt!8734 () SeekEntryResult!55)

(assert (=> d!4069 (= c!3098 (and ((_ is Intermediate!55) lt!8734) (undefined!867 lt!8734)))))

(assert (=> d!4069 (= lt!8734 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!487 lt!8138))) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(assert (=> d!4069 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4069 (= (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))) lt!8733)))

(declare-fun b!23732 () Bool)

(declare-fun e!15378 () SeekEntryResult!55)

(assert (=> b!23732 (= e!15378 (seekKeyOrZeroReturnVacant!0 (x!5577 lt!8734) (index!2343 lt!8734) (index!2343 lt!8734) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!23733 () Bool)

(declare-fun e!15377 () SeekEntryResult!55)

(assert (=> b!23733 (= e!15377 (Found!55 (index!2343 lt!8734)))))

(declare-fun b!23734 () Bool)

(declare-fun c!3100 () Bool)

(declare-fun lt!8735 () (_ BitVec 64))

(assert (=> b!23734 (= c!3100 (= lt!8735 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23734 (= e!15377 e!15378)))

(declare-fun b!23735 () Bool)

(assert (=> b!23735 (= e!15378 (MissingZero!55 (index!2343 lt!8734)))))

(declare-fun b!23736 () Bool)

(assert (=> b!23736 (= e!15379 Undefined!55)))

(declare-fun b!23737 () Bool)

(assert (=> b!23737 (= e!15379 e!15377)))

(assert (=> b!23737 (= lt!8735 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2343 lt!8734)))))

(declare-fun c!3099 () Bool)

(assert (=> b!23737 (= c!3099 (= lt!8735 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4069 c!3098) b!23736))

(assert (= (and d!4069 (not c!3098)) b!23737))

(assert (= (and b!23737 c!3099) b!23733))

(assert (= (and b!23737 (not c!3099)) b!23734))

(assert (= (and b!23734 c!3100) b!23735))

(assert (= (and b!23734 (not c!3100)) b!23732))

(declare-fun m!17471 () Bool)

(assert (=> d!4069 m!17471))

(declare-fun m!17473 () Bool)

(assert (=> d!4069 m!17473))

(declare-fun m!17475 () Bool)

(assert (=> d!4069 m!17475))

(declare-fun m!17477 () Bool)

(assert (=> d!4069 m!17477))

(assert (=> d!4069 m!16878))

(assert (=> d!4069 m!17477))

(declare-fun m!17479 () Bool)

(assert (=> d!4069 m!17479))

(declare-fun m!17481 () Bool)

(assert (=> b!23732 m!17481))

(declare-fun m!17483 () Bool)

(assert (=> b!23737 m!17483))

(assert (=> bm!1932 d!4069))

(declare-fun d!4071 () Bool)

(declare-fun res!14561 () Bool)

(declare-fun e!15380 () Bool)

(assert (=> d!4071 (=> res!14561 e!15380)))

(assert (=> d!4071 (= res!14561 (= (select (arr!597 lt!8307) #b00000000000000000000000000000000) (_1!493 lt!8312)))))

(assert (=> d!4071 (= (arrayContainsKey!0 lt!8307 (_1!493 lt!8312) #b00000000000000000000000000000000) e!15380)))

(declare-fun b!23738 () Bool)

(declare-fun e!15381 () Bool)

(assert (=> b!23738 (= e!15380 e!15381)))

(declare-fun res!14562 () Bool)

(assert (=> b!23738 (=> (not res!14562) (not e!15381))))

(assert (=> b!23738 (= res!14562 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 lt!8307)))))

(declare-fun b!23739 () Bool)

(assert (=> b!23739 (= e!15381 (arrayContainsKey!0 lt!8307 (_1!493 lt!8312) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4071 (not res!14561)) b!23738))

(assert (= (and b!23738 res!14562) b!23739))

(declare-fun m!17485 () Bool)

(assert (=> d!4071 m!17485))

(declare-fun m!17487 () Bool)

(assert (=> b!23739 m!17487))

(assert (=> b!23290 d!4071))

(declare-fun d!4073 () Bool)

(declare-fun e!15383 () Bool)

(assert (=> d!4073 e!15383))

(declare-fun res!14563 () Bool)

(assert (=> d!4073 (=> res!14563 e!15383)))

(declare-fun lt!8739 () Bool)

(assert (=> d!4073 (= res!14563 (not lt!8739))))

(declare-fun lt!8738 () Bool)

(assert (=> d!4073 (= lt!8739 lt!8738)))

(declare-fun lt!8737 () Unit!519)

(declare-fun e!15382 () Unit!519)

(assert (=> d!4073 (= lt!8737 e!15382)))

(declare-fun c!3101 () Bool)

(assert (=> d!4073 (= c!3101 lt!8738)))

(assert (=> d!4073 (= lt!8738 (containsKey!24 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4073 (= (contains!230 e!15108 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!8739)))

(declare-fun b!23740 () Bool)

(declare-fun lt!8736 () Unit!519)

(assert (=> b!23740 (= e!15382 lt!8736)))

(assert (=> b!23740 (= lt!8736 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23740 (isDefined!22 (getValueByKey!60 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23741 () Bool)

(declare-fun Unit!545 () Unit!519)

(assert (=> b!23741 (= e!15382 Unit!545)))

(declare-fun b!23742 () Bool)

(assert (=> b!23742 (= e!15383 (isDefined!22 (getValueByKey!60 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4073 c!3101) b!23740))

(assert (= (and d!4073 (not c!3101)) b!23741))

(assert (= (and d!4073 (not res!14563)) b!23742))

(declare-fun m!17489 () Bool)

(assert (=> d!4073 m!17489))

(declare-fun m!17491 () Bool)

(assert (=> b!23740 m!17491))

(declare-fun m!17493 () Bool)

(assert (=> b!23740 m!17493))

(assert (=> b!23740 m!17493))

(declare-fun m!17495 () Bool)

(assert (=> b!23740 m!17495))

(assert (=> b!23742 m!17493))

(assert (=> b!23742 m!17493))

(assert (=> b!23742 m!17495))

(assert (=> bm!1926 d!4073))

(assert (=> b!23310 d!4069))

(declare-fun b!23743 () Bool)

(declare-fun e!15392 () ListLongMap!565)

(declare-fun call!2036 () ListLongMap!565)

(assert (=> b!23743 (= e!15392 call!2036)))

(declare-fun bm!2031 () Bool)

(declare-fun call!2037 () ListLongMap!565)

(declare-fun call!2039 () ListLongMap!565)

(assert (=> bm!2031 (= call!2037 call!2039)))

(declare-fun b!23744 () Bool)

(declare-fun e!15388 () Bool)

(declare-fun e!15396 () Bool)

(assert (=> b!23744 (= e!15388 e!15396)))

(declare-fun c!3103 () Bool)

(assert (=> b!23744 (= c!3103 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun lt!8744 () ListLongMap!565)

(declare-fun e!15387 () Bool)

(declare-fun b!23745 () Bool)

(assert (=> b!23745 (= e!15387 (= (apply!29 lt!8744 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23745 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))))))))

(assert (=> b!23745 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun c!3104 () Bool)

(declare-fun bm!2032 () Bool)

(declare-fun c!3105 () Bool)

(declare-fun call!2038 () ListLongMap!565)

(declare-fun call!2035 () ListLongMap!565)

(assert (=> bm!2032 (= call!2039 (+!45 (ite c!3104 call!2038 (ite c!3105 call!2035 call!2036)) (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!23746 () Bool)

(declare-fun res!14569 () Bool)

(assert (=> b!23746 (=> (not res!14569) (not e!15388))))

(declare-fun e!15393 () Bool)

(assert (=> b!23746 (= res!14569 e!15393)))

(declare-fun c!3102 () Bool)

(assert (=> b!23746 (= c!3102 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2033 () Bool)

(declare-fun call!2034 () Bool)

(assert (=> bm!2033 (= call!2034 (contains!230 lt!8744 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23747 () Bool)

(declare-fun e!15385 () Bool)

(assert (=> b!23747 (= e!15396 e!15385)))

(declare-fun res!14567 () Bool)

(declare-fun call!2040 () Bool)

(assert (=> b!23747 (= res!14567 call!2040)))

(assert (=> b!23747 (=> (not res!14567) (not e!15385))))

(declare-fun b!23748 () Bool)

(declare-fun e!15391 () Unit!519)

(declare-fun Unit!546 () Unit!519)

(assert (=> b!23748 (= e!15391 Unit!546)))

(declare-fun b!23749 () Bool)

(assert (=> b!23749 (= e!15396 (not call!2040))))

(declare-fun b!23750 () Bool)

(declare-fun e!15394 () Bool)

(assert (=> b!23750 (= e!15394 (= (apply!29 lt!8744 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun bm!2034 () Bool)

(assert (=> bm!2034 (= call!2040 (contains!230 lt!8744 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23751 () Bool)

(assert (=> b!23751 (= e!15393 (not call!2034))))

(declare-fun d!4075 () Bool)

(assert (=> d!4075 e!15388))

(declare-fun res!14566 () Bool)

(assert (=> d!4075 (=> (not res!14566) (not e!15388))))

(assert (=> d!4075 (= res!14566 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!8759 () ListLongMap!565)

(assert (=> d!4075 (= lt!8744 lt!8759)))

(declare-fun lt!8751 () Unit!519)

(assert (=> d!4075 (= lt!8751 e!15391)))

(declare-fun c!3106 () Bool)

(declare-fun e!15395 () Bool)

(assert (=> d!4075 (= c!3106 e!15395)))

(declare-fun res!14570 () Bool)

(assert (=> d!4075 (=> (not res!14570) (not e!15395))))

(assert (=> d!4075 (= res!14570 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun e!15389 () ListLongMap!565)

(assert (=> d!4075 (= lt!8759 e!15389)))

(assert (=> d!4075 (= c!3104 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4075 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4075 (= (getCurrentListMap!129 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8744)))

(declare-fun b!23752 () Bool)

(assert (=> b!23752 (= e!15385 (= (apply!29 lt!8744 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!23753 () Bool)

(assert (=> b!23753 (= e!15389 (+!45 call!2039 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun b!23754 () Bool)

(declare-fun e!15390 () Bool)

(assert (=> b!23754 (= e!15390 e!15387)))

(declare-fun res!14571 () Bool)

(assert (=> b!23754 (=> (not res!14571) (not e!15387))))

(assert (=> b!23754 (= res!14571 (contains!230 lt!8744 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23754 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23755 () Bool)

(declare-fun res!14568 () Bool)

(assert (=> b!23755 (=> (not res!14568) (not e!15388))))

(assert (=> b!23755 (= res!14568 e!15390)))

(declare-fun res!14572 () Bool)

(assert (=> b!23755 (=> res!14572 e!15390)))

(declare-fun e!15386 () Bool)

(assert (=> b!23755 (= res!14572 (not e!15386))))

(declare-fun res!14565 () Bool)

(assert (=> b!23755 (=> (not res!14565) (not e!15386))))

(assert (=> b!23755 (= res!14565 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23756 () Bool)

(assert (=> b!23756 (= e!15392 call!2037)))

(declare-fun b!23757 () Bool)

(declare-fun lt!8741 () Unit!519)

(assert (=> b!23757 (= e!15391 lt!8741)))

(declare-fun lt!8755 () ListLongMap!565)

(assert (=> b!23757 (= lt!8755 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8740 () (_ BitVec 64))

(assert (=> b!23757 (= lt!8740 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8754 () (_ BitVec 64))

(assert (=> b!23757 (= lt!8754 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8760 () Unit!519)

(assert (=> b!23757 (= lt!8760 (addStillContains!14 lt!8755 lt!8740 (zeroValue!1665 lt!8141) lt!8754))))

(assert (=> b!23757 (contains!230 (+!45 lt!8755 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141))) lt!8754)))

(declare-fun lt!8757 () Unit!519)

(assert (=> b!23757 (= lt!8757 lt!8760)))

(declare-fun lt!8761 () ListLongMap!565)

(assert (=> b!23757 (= lt!8761 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8750 () (_ BitVec 64))

(assert (=> b!23757 (= lt!8750 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8746 () (_ BitVec 64))

(assert (=> b!23757 (= lt!8746 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8752 () Unit!519)

(assert (=> b!23757 (= lt!8752 (addApplyDifferent!14 lt!8761 lt!8750 (minValue!1665 lt!8141) lt!8746))))

(assert (=> b!23757 (= (apply!29 (+!45 lt!8761 (tuple2!971 lt!8750 (minValue!1665 lt!8141))) lt!8746) (apply!29 lt!8761 lt!8746))))

(declare-fun lt!8742 () Unit!519)

(assert (=> b!23757 (= lt!8742 lt!8752)))

(declare-fun lt!8753 () ListLongMap!565)

(assert (=> b!23757 (= lt!8753 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8747 () (_ BitVec 64))

(assert (=> b!23757 (= lt!8747 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8749 () (_ BitVec 64))

(assert (=> b!23757 (= lt!8749 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8748 () Unit!519)

(assert (=> b!23757 (= lt!8748 (addApplyDifferent!14 lt!8753 lt!8747 (zeroValue!1665 lt!8141) lt!8749))))

(assert (=> b!23757 (= (apply!29 (+!45 lt!8753 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141))) lt!8749) (apply!29 lt!8753 lt!8749))))

(declare-fun lt!8743 () Unit!519)

(assert (=> b!23757 (= lt!8743 lt!8748)))

(declare-fun lt!8758 () ListLongMap!565)

(assert (=> b!23757 (= lt!8758 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8756 () (_ BitVec 64))

(assert (=> b!23757 (= lt!8756 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8745 () (_ BitVec 64))

(assert (=> b!23757 (= lt!8745 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!23757 (= lt!8741 (addApplyDifferent!14 lt!8758 lt!8756 (minValue!1665 lt!8141) lt!8745))))

(assert (=> b!23757 (= (apply!29 (+!45 lt!8758 (tuple2!971 lt!8756 (minValue!1665 lt!8141))) lt!8745) (apply!29 lt!8758 lt!8745))))

(declare-fun b!23758 () Bool)

(declare-fun e!15384 () ListLongMap!565)

(assert (=> b!23758 (= e!15384 call!2037)))

(declare-fun b!23759 () Bool)

(assert (=> b!23759 (= e!15389 e!15384)))

(assert (=> b!23759 (= c!3105 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23760 () Bool)

(declare-fun c!3107 () Bool)

(assert (=> b!23760 (= c!3107 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23760 (= e!15384 e!15392)))

(declare-fun bm!2035 () Bool)

(assert (=> bm!2035 (= call!2036 call!2035)))

(declare-fun bm!2036 () Bool)

(assert (=> bm!2036 (= call!2035 call!2038)))

(declare-fun b!23761 () Bool)

(assert (=> b!23761 (= e!15393 e!15394)))

(declare-fun res!14564 () Bool)

(assert (=> b!23761 (= res!14564 call!2034)))

(assert (=> b!23761 (=> (not res!14564) (not e!15394))))

(declare-fun b!23762 () Bool)

(assert (=> b!23762 (= e!15395 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2037 () Bool)

(assert (=> bm!2037 (= call!2038 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!23763 () Bool)

(assert (=> b!23763 (= e!15386 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (= (and d!4075 c!3104) b!23753))

(assert (= (and d!4075 (not c!3104)) b!23759))

(assert (= (and b!23759 c!3105) b!23758))

(assert (= (and b!23759 (not c!3105)) b!23760))

(assert (= (and b!23760 c!3107) b!23756))

(assert (= (and b!23760 (not c!3107)) b!23743))

(assert (= (or b!23756 b!23743) bm!2035))

(assert (= (or b!23758 bm!2035) bm!2036))

(assert (= (or b!23758 b!23756) bm!2031))

(assert (= (or b!23753 bm!2036) bm!2037))

(assert (= (or b!23753 bm!2031) bm!2032))

(assert (= (and d!4075 res!14570) b!23762))

(assert (= (and d!4075 c!3106) b!23757))

(assert (= (and d!4075 (not c!3106)) b!23748))

(assert (= (and d!4075 res!14566) b!23755))

(assert (= (and b!23755 res!14565) b!23763))

(assert (= (and b!23755 (not res!14572)) b!23754))

(assert (= (and b!23754 res!14571) b!23745))

(assert (= (and b!23755 res!14568) b!23746))

(assert (= (and b!23746 c!3102) b!23761))

(assert (= (and b!23746 (not c!3102)) b!23751))

(assert (= (and b!23761 res!14564) b!23750))

(assert (= (or b!23761 b!23751) bm!2033))

(assert (= (and b!23746 res!14569) b!23744))

(assert (= (and b!23744 c!3103) b!23747))

(assert (= (and b!23744 (not c!3103)) b!23749))

(assert (= (and b!23747 res!14567) b!23752))

(assert (= (or b!23747 b!23749) bm!2034))

(declare-fun b_lambda!1579 () Bool)

(assert (=> (not b_lambda!1579) (not b!23745)))

(assert (=> b!23745 t!3234))

(declare-fun b_and!1491 () Bool)

(assert (= b_and!1489 (and (=> t!3234 result!1095) b_and!1491)))

(assert (=> b!23754 m!17198))

(assert (=> b!23754 m!17198))

(declare-fun m!17497 () Bool)

(assert (=> b!23754 m!17497))

(declare-fun m!17499 () Bool)

(assert (=> b!23753 m!17499))

(declare-fun m!17501 () Bool)

(assert (=> b!23745 m!17501))

(assert (=> b!23745 m!17304))

(declare-fun m!17503 () Bool)

(assert (=> b!23745 m!17503))

(assert (=> b!23745 m!17198))

(declare-fun m!17505 () Bool)

(assert (=> b!23745 m!17505))

(assert (=> b!23745 m!17198))

(assert (=> b!23745 m!17501))

(assert (=> b!23745 m!17304))

(assert (=> b!23762 m!17198))

(assert (=> b!23762 m!17198))

(assert (=> b!23762 m!17310))

(declare-fun m!17507 () Bool)

(assert (=> bm!2032 m!17507))

(assert (=> b!23763 m!17198))

(assert (=> b!23763 m!17198))

(assert (=> b!23763 m!17310))

(declare-fun m!17509 () Bool)

(assert (=> bm!2033 m!17509))

(declare-fun m!17511 () Bool)

(assert (=> b!23752 m!17511))

(declare-fun m!17513 () Bool)

(assert (=> bm!2034 m!17513))

(declare-fun m!17515 () Bool)

(assert (=> b!23750 m!17515))

(declare-fun m!17517 () Bool)

(assert (=> bm!2037 m!17517))

(assert (=> d!4075 m!17050))

(declare-fun m!17519 () Bool)

(assert (=> b!23757 m!17519))

(declare-fun m!17521 () Bool)

(assert (=> b!23757 m!17521))

(declare-fun m!17523 () Bool)

(assert (=> b!23757 m!17523))

(declare-fun m!17525 () Bool)

(assert (=> b!23757 m!17525))

(declare-fun m!17527 () Bool)

(assert (=> b!23757 m!17527))

(assert (=> b!23757 m!17517))

(assert (=> b!23757 m!17521))

(assert (=> b!23757 m!17198))

(declare-fun m!17529 () Bool)

(assert (=> b!23757 m!17529))

(declare-fun m!17531 () Bool)

(assert (=> b!23757 m!17531))

(declare-fun m!17533 () Bool)

(assert (=> b!23757 m!17533))

(assert (=> b!23757 m!17531))

(declare-fun m!17535 () Bool)

(assert (=> b!23757 m!17535))

(declare-fun m!17537 () Bool)

(assert (=> b!23757 m!17537))

(declare-fun m!17539 () Bool)

(assert (=> b!23757 m!17539))

(declare-fun m!17541 () Bool)

(assert (=> b!23757 m!17541))

(assert (=> b!23757 m!17541))

(declare-fun m!17543 () Bool)

(assert (=> b!23757 m!17543))

(assert (=> b!23757 m!17537))

(declare-fun m!17545 () Bool)

(assert (=> b!23757 m!17545))

(declare-fun m!17547 () Bool)

(assert (=> b!23757 m!17547))

(assert (=> bm!1927 d!4075))

(declare-fun d!4077 () Bool)

(declare-fun e!15398 () Bool)

(assert (=> d!4077 e!15398))

(declare-fun res!14573 () Bool)

(assert (=> d!4077 (=> res!14573 e!15398)))

(declare-fun lt!8765 () Bool)

(assert (=> d!4077 (= res!14573 (not lt!8765))))

(declare-fun lt!8764 () Bool)

(assert (=> d!4077 (= lt!8765 lt!8764)))

(declare-fun lt!8763 () Unit!519)

(declare-fun e!15397 () Unit!519)

(assert (=> d!4077 (= lt!8763 e!15397)))

(declare-fun c!3108 () Bool)

(assert (=> d!4077 (= c!3108 lt!8764)))

(assert (=> d!4077 (= lt!8764 (containsKey!24 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))

(assert (=> d!4077 (= (contains!230 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))) lt!8765)))

(declare-fun b!23764 () Bool)

(declare-fun lt!8762 () Unit!519)

(assert (=> b!23764 (= e!15397 lt!8762)))

(assert (=> b!23764 (= lt!8762 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))

(assert (=> b!23764 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))

(declare-fun b!23765 () Bool)

(declare-fun Unit!547 () Unit!519)

(assert (=> b!23765 (= e!15397 Unit!547)))

(declare-fun b!23766 () Bool)

(assert (=> b!23766 (= e!15398 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342)))))))

(assert (= (and d!4077 c!3108) b!23764))

(assert (= (and d!4077 (not c!3108)) b!23765))

(assert (= (and d!4077 (not res!14573)) b!23766))

(assert (=> d!4077 m!16818))

(declare-fun m!17549 () Bool)

(assert (=> d!4077 m!17549))

(assert (=> b!23764 m!16818))

(declare-fun m!17551 () Bool)

(assert (=> b!23764 m!17551))

(assert (=> b!23764 m!16818))

(declare-fun m!17553 () Bool)

(assert (=> b!23764 m!17553))

(assert (=> b!23764 m!17553))

(declare-fun m!17555 () Bool)

(assert (=> b!23764 m!17555))

(assert (=> b!23766 m!16818))

(assert (=> b!23766 m!17553))

(assert (=> b!23766 m!17553))

(assert (=> b!23766 m!17555))

(assert (=> b!23322 d!4077))

(declare-fun b!23767 () Bool)

(declare-fun e!15407 () ListLongMap!565)

(declare-fun call!2043 () ListLongMap!565)

(assert (=> b!23767 (= e!15407 call!2043)))

(declare-fun bm!2038 () Bool)

(declare-fun call!2044 () ListLongMap!565)

(declare-fun call!2046 () ListLongMap!565)

(assert (=> bm!2038 (= call!2044 call!2046)))

(declare-fun b!23768 () Bool)

(declare-fun e!15403 () Bool)

(declare-fun e!15411 () Bool)

(assert (=> b!23768 (= e!15403 e!15411)))

(declare-fun c!3110 () Bool)

(assert (=> b!23768 (= c!3110 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun e!15402 () Bool)

(declare-fun lt!8770 () ListLongMap!565)

(declare-fun b!23769 () Bool)

(assert (=> b!23769 (= e!15402 (= (apply!29 lt!8770 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8338) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23769 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8338)))))

(assert (=> b!23769 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun c!3112 () Bool)

(declare-fun bm!2039 () Bool)

(declare-fun call!2042 () ListLongMap!565)

(declare-fun c!3111 () Bool)

(declare-fun call!2045 () ListLongMap!565)

(assert (=> bm!2039 (= call!2046 (+!45 (ite c!3111 call!2045 (ite c!3112 call!2042 call!2043)) (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun b!23770 () Bool)

(declare-fun res!14579 () Bool)

(assert (=> b!23770 (=> (not res!14579) (not e!15403))))

(declare-fun e!15408 () Bool)

(assert (=> b!23770 (= res!14579 e!15408)))

(declare-fun c!3109 () Bool)

(assert (=> b!23770 (= c!3109 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2040 () Bool)

(declare-fun call!2041 () Bool)

(assert (=> bm!2040 (= call!2041 (contains!230 lt!8770 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23771 () Bool)

(declare-fun e!15400 () Bool)

(assert (=> b!23771 (= e!15411 e!15400)))

(declare-fun res!14577 () Bool)

(declare-fun call!2047 () Bool)

(assert (=> b!23771 (= res!14577 call!2047)))

(assert (=> b!23771 (=> (not res!14577) (not e!15400))))

(declare-fun b!23772 () Bool)

(declare-fun e!15406 () Unit!519)

(declare-fun Unit!548 () Unit!519)

(assert (=> b!23772 (= e!15406 Unit!548)))

(declare-fun b!23773 () Bool)

(assert (=> b!23773 (= e!15411 (not call!2047))))

(declare-fun b!23774 () Bool)

(declare-fun e!15409 () Bool)

(assert (=> b!23774 (= e!15409 (= (apply!29 lt!8770 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!487 lt!8138))))))

(declare-fun bm!2041 () Bool)

(assert (=> bm!2041 (= call!2047 (contains!230 lt!8770 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23775 () Bool)

(assert (=> b!23775 (= e!15408 (not call!2041))))

(declare-fun d!4079 () Bool)

(assert (=> d!4079 e!15403))

(declare-fun res!14576 () Bool)

(assert (=> d!4079 (=> (not res!14576) (not e!15403))))

(assert (=> d!4079 (= res!14576 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun lt!8785 () ListLongMap!565)

(assert (=> d!4079 (= lt!8770 lt!8785)))

(declare-fun lt!8777 () Unit!519)

(assert (=> d!4079 (= lt!8777 e!15406)))

(declare-fun c!3113 () Bool)

(declare-fun e!15410 () Bool)

(assert (=> d!4079 (= c!3113 e!15410)))

(declare-fun res!14580 () Bool)

(assert (=> d!4079 (=> (not res!14580) (not e!15410))))

(assert (=> d!4079 (= res!14580 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun e!15404 () ListLongMap!565)

(assert (=> d!4079 (= lt!8785 e!15404)))

(assert (=> d!4079 (= c!3111 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4079 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4079 (= (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!8770)))

(declare-fun b!23776 () Bool)

(assert (=> b!23776 (= e!15400 (= (apply!29 lt!8770 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!487 lt!8138))))))

(declare-fun b!23777 () Bool)

(assert (=> b!23777 (= e!15404 (+!45 call!2046 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))

(declare-fun b!23778 () Bool)

(declare-fun e!15405 () Bool)

(assert (=> b!23778 (= e!15405 e!15402)))

(declare-fun res!14581 () Bool)

(assert (=> b!23778 (=> (not res!14581) (not e!15402))))

(assert (=> b!23778 (= res!14581 (contains!230 lt!8770 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!23778 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23779 () Bool)

(declare-fun res!14578 () Bool)

(assert (=> b!23779 (=> (not res!14578) (not e!15403))))

(assert (=> b!23779 (= res!14578 e!15405)))

(declare-fun res!14582 () Bool)

(assert (=> b!23779 (=> res!14582 e!15405)))

(declare-fun e!15401 () Bool)

(assert (=> b!23779 (= res!14582 (not e!15401))))

(declare-fun res!14575 () Bool)

(assert (=> b!23779 (=> (not res!14575) (not e!15401))))

(assert (=> b!23779 (= res!14575 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23780 () Bool)

(assert (=> b!23780 (= e!15407 call!2044)))

(declare-fun b!23781 () Bool)

(declare-fun lt!8767 () Unit!519)

(assert (=> b!23781 (= e!15406 lt!8767)))

(declare-fun lt!8781 () ListLongMap!565)

(assert (=> b!23781 (= lt!8781 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8766 () (_ BitVec 64))

(assert (=> b!23781 (= lt!8766 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8780 () (_ BitVec 64))

(assert (=> b!23781 (= lt!8780 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8786 () Unit!519)

(assert (=> b!23781 (= lt!8786 (addStillContains!14 lt!8781 lt!8766 (zeroValue!1665 (_2!487 lt!8138)) lt!8780))))

(assert (=> b!23781 (contains!230 (+!45 lt!8781 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138)))) lt!8780)))

(declare-fun lt!8783 () Unit!519)

(assert (=> b!23781 (= lt!8783 lt!8786)))

(declare-fun lt!8787 () ListLongMap!565)

(assert (=> b!23781 (= lt!8787 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8776 () (_ BitVec 64))

(assert (=> b!23781 (= lt!8776 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8772 () (_ BitVec 64))

(assert (=> b!23781 (= lt!8772 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8778 () Unit!519)

(assert (=> b!23781 (= lt!8778 (addApplyDifferent!14 lt!8787 lt!8776 (minValue!1665 (_2!487 lt!8138)) lt!8772))))

(assert (=> b!23781 (= (apply!29 (+!45 lt!8787 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138)))) lt!8772) (apply!29 lt!8787 lt!8772))))

(declare-fun lt!8768 () Unit!519)

(assert (=> b!23781 (= lt!8768 lt!8778)))

(declare-fun lt!8779 () ListLongMap!565)

(assert (=> b!23781 (= lt!8779 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8773 () (_ BitVec 64))

(assert (=> b!23781 (= lt!8773 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8775 () (_ BitVec 64))

(assert (=> b!23781 (= lt!8775 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8774 () Unit!519)

(assert (=> b!23781 (= lt!8774 (addApplyDifferent!14 lt!8779 lt!8773 (zeroValue!1665 (_2!487 lt!8138)) lt!8775))))

(assert (=> b!23781 (= (apply!29 (+!45 lt!8779 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138)))) lt!8775) (apply!29 lt!8779 lt!8775))))

(declare-fun lt!8769 () Unit!519)

(assert (=> b!23781 (= lt!8769 lt!8774)))

(declare-fun lt!8784 () ListLongMap!565)

(assert (=> b!23781 (= lt!8784 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8782 () (_ BitVec 64))

(assert (=> b!23781 (= lt!8782 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8771 () (_ BitVec 64))

(assert (=> b!23781 (= lt!8771 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(assert (=> b!23781 (= lt!8767 (addApplyDifferent!14 lt!8784 lt!8782 (minValue!1665 (_2!487 lt!8138)) lt!8771))))

(assert (=> b!23781 (= (apply!29 (+!45 lt!8784 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138)))) lt!8771) (apply!29 lt!8784 lt!8771))))

(declare-fun b!23782 () Bool)

(declare-fun e!15399 () ListLongMap!565)

(assert (=> b!23782 (= e!15399 call!2044)))

(declare-fun b!23783 () Bool)

(assert (=> b!23783 (= e!15404 e!15399)))

(assert (=> b!23783 (= c!3112 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23784 () Bool)

(declare-fun c!3114 () Bool)

(assert (=> b!23784 (= c!3114 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23784 (= e!15399 e!15407)))

(declare-fun bm!2042 () Bool)

(assert (=> bm!2042 (= call!2043 call!2042)))

(declare-fun bm!2043 () Bool)

(assert (=> bm!2043 (= call!2042 call!2045)))

(declare-fun b!23785 () Bool)

(assert (=> b!23785 (= e!15408 e!15409)))

(declare-fun res!14574 () Bool)

(assert (=> b!23785 (= res!14574 call!2041)))

(assert (=> b!23785 (=> (not res!14574) (not e!15409))))

(declare-fun b!23786 () Bool)

(assert (=> b!23786 (= e!15410 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun bm!2044 () Bool)

(assert (=> bm!2044 (= call!2045 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!23787 () Bool)

(assert (=> b!23787 (= e!15401 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (= (and d!4079 c!3111) b!23777))

(assert (= (and d!4079 (not c!3111)) b!23783))

(assert (= (and b!23783 c!3112) b!23782))

(assert (= (and b!23783 (not c!3112)) b!23784))

(assert (= (and b!23784 c!3114) b!23780))

(assert (= (and b!23784 (not c!3114)) b!23767))

(assert (= (or b!23780 b!23767) bm!2042))

(assert (= (or b!23782 bm!2042) bm!2043))

(assert (= (or b!23782 b!23780) bm!2038))

(assert (= (or b!23777 bm!2043) bm!2044))

(assert (= (or b!23777 bm!2038) bm!2039))

(assert (= (and d!4079 res!14580) b!23786))

(assert (= (and d!4079 c!3113) b!23781))

(assert (= (and d!4079 (not c!3113)) b!23772))

(assert (= (and d!4079 res!14576) b!23779))

(assert (= (and b!23779 res!14575) b!23787))

(assert (= (and b!23779 (not res!14582)) b!23778))

(assert (= (and b!23778 res!14581) b!23769))

(assert (= (and b!23779 res!14578) b!23770))

(assert (= (and b!23770 c!3109) b!23785))

(assert (= (and b!23770 (not c!3109)) b!23775))

(assert (= (and b!23785 res!14574) b!23774))

(assert (= (or b!23785 b!23775) bm!2040))

(assert (= (and b!23770 res!14579) b!23768))

(assert (= (and b!23768 c!3110) b!23771))

(assert (= (and b!23768 (not c!3110)) b!23773))

(assert (= (and b!23771 res!14577) b!23776))

(assert (= (or b!23771 b!23773) bm!2041))

(declare-fun b_lambda!1581 () Bool)

(assert (=> (not b_lambda!1581) (not b!23769)))

(assert (=> b!23769 t!3232))

(declare-fun b_and!1493 () Bool)

(assert (= b_and!1491 (and (=> t!3232 result!1093) b_and!1493)))

(assert (=> b!23778 m!16908))

(assert (=> b!23778 m!16908))

(declare-fun m!17557 () Bool)

(assert (=> b!23778 m!17557))

(declare-fun m!17559 () Bool)

(assert (=> b!23777 m!17559))

(declare-fun m!17561 () Bool)

(assert (=> b!23769 m!17561))

(assert (=> b!23769 m!16916))

(declare-fun m!17563 () Bool)

(assert (=> b!23769 m!17563))

(assert (=> b!23769 m!16908))

(declare-fun m!17565 () Bool)

(assert (=> b!23769 m!17565))

(assert (=> b!23769 m!16908))

(assert (=> b!23769 m!17561))

(assert (=> b!23769 m!16916))

(assert (=> b!23786 m!16908))

(assert (=> b!23786 m!16908))

(assert (=> b!23786 m!16922))

(declare-fun m!17567 () Bool)

(assert (=> bm!2039 m!17567))

(assert (=> b!23787 m!16908))

(assert (=> b!23787 m!16908))

(assert (=> b!23787 m!16922))

(declare-fun m!17569 () Bool)

(assert (=> bm!2040 m!17569))

(declare-fun m!17571 () Bool)

(assert (=> b!23776 m!17571))

(declare-fun m!17573 () Bool)

(assert (=> bm!2041 m!17573))

(declare-fun m!17575 () Bool)

(assert (=> b!23774 m!17575))

(declare-fun m!17577 () Bool)

(assert (=> bm!2044 m!17577))

(assert (=> d!4079 m!16878))

(declare-fun m!17579 () Bool)

(assert (=> b!23781 m!17579))

(declare-fun m!17581 () Bool)

(assert (=> b!23781 m!17581))

(declare-fun m!17583 () Bool)

(assert (=> b!23781 m!17583))

(declare-fun m!17585 () Bool)

(assert (=> b!23781 m!17585))

(declare-fun m!17587 () Bool)

(assert (=> b!23781 m!17587))

(assert (=> b!23781 m!17577))

(assert (=> b!23781 m!17581))

(assert (=> b!23781 m!16908))

(declare-fun m!17589 () Bool)

(assert (=> b!23781 m!17589))

(declare-fun m!17591 () Bool)

(assert (=> b!23781 m!17591))

(declare-fun m!17593 () Bool)

(assert (=> b!23781 m!17593))

(assert (=> b!23781 m!17591))

(declare-fun m!17595 () Bool)

(assert (=> b!23781 m!17595))

(declare-fun m!17597 () Bool)

(assert (=> b!23781 m!17597))

(declare-fun m!17599 () Bool)

(assert (=> b!23781 m!17599))

(declare-fun m!17601 () Bool)

(assert (=> b!23781 m!17601))

(assert (=> b!23781 m!17601))

(declare-fun m!17603 () Bool)

(assert (=> b!23781 m!17603))

(assert (=> b!23781 m!17597))

(declare-fun m!17605 () Bool)

(assert (=> b!23781 m!17605))

(declare-fun m!17607 () Bool)

(assert (=> b!23781 m!17607))

(assert (=> b!23322 d!4079))

(declare-fun d!4081 () Bool)

(declare-fun e!15412 () Bool)

(assert (=> d!4081 e!15412))

(declare-fun res!14583 () Bool)

(assert (=> d!4081 (=> (not res!14583) (not e!15412))))

(assert (=> d!4081 (= res!14583 (and (bvsge (index!2342 lt!8342) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8342) (size!693 (_keys!3163 (_2!487 lt!8138))))))))

(declare-fun lt!8788 () Unit!519)

(assert (=> d!4081 (= lt!8788 (choose!208 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (index!2342 lt!8342) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4081 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4081 (= (lemmaValidKeyInArrayIsInListMap!10 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (index!2342 lt!8342) (defaultEntry!1742 (_2!487 lt!8138))) lt!8788)))

(declare-fun b!23788 () Bool)

(assert (=> b!23788 (= e!15412 (contains!230 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))

(assert (= (and d!4081 res!14583) b!23788))

(declare-fun m!17609 () Bool)

(assert (=> d!4081 m!17609))

(assert (=> d!4081 m!16878))

(assert (=> b!23788 m!16816))

(assert (=> b!23788 m!16818))

(assert (=> b!23788 m!16816))

(assert (=> b!23788 m!16818))

(assert (=> b!23788 m!16820))

(assert (=> b!23322 d!4081))

(declare-fun d!4083 () Bool)

(declare-fun e!15413 () Bool)

(assert (=> d!4083 e!15413))

(declare-fun res!14584 () Bool)

(assert (=> d!4083 (=> (not res!14584) (not e!15413))))

(assert (=> d!4083 (= res!14584 (and (bvsge (index!2342 lt!8342) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8342) (size!692 (_values!1728 (_2!487 lt!8138))))))))

(declare-fun lt!8789 () Unit!519)

(assert (=> d!4083 (= lt!8789 (choose!209 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (index!2342 lt!8342) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4083 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4083 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!10 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (index!2342 lt!8342) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))) lt!8789)))

(declare-fun b!23789 () Bool)

(assert (=> b!23789 (= e!15413 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))))))

(assert (= (and d!4083 res!14584) b!23789))

(declare-fun m!17611 () Bool)

(assert (=> d!4083 m!17611))

(assert (=> d!4083 m!16878))

(assert (=> b!23789 m!17036))

(assert (=> b!23789 m!17036))

(assert (=> b!23789 m!17212))

(assert (=> b!23789 m!16822))

(declare-fun m!17613 () Bool)

(assert (=> b!23789 m!17613))

(assert (=> b!23322 d!4083))

(declare-fun mapNonEmpty!1032 () Bool)

(declare-fun mapRes!1032 () Bool)

(declare-fun tp!3534 () Bool)

(declare-fun e!15415 () Bool)

(assert (=> mapNonEmpty!1032 (= mapRes!1032 (and tp!3534 e!15415))))

(declare-fun mapValue!1032 () ValueCell!311)

(declare-fun mapKey!1032 () (_ BitVec 32))

(declare-fun mapRest!1032 () (Array (_ BitVec 32) ValueCell!311))

(assert (=> mapNonEmpty!1032 (= mapRest!1031 (store mapRest!1032 mapKey!1032 mapValue!1032))))

(declare-fun mapIsEmpty!1032 () Bool)

(assert (=> mapIsEmpty!1032 mapRes!1032))

(declare-fun condMapEmpty!1032 () Bool)

(declare-fun mapDefault!1032 () ValueCell!311)

(assert (=> mapNonEmpty!1031 (= condMapEmpty!1032 (= mapRest!1031 ((as const (Array (_ BitVec 32) ValueCell!311)) mapDefault!1032)))))

(declare-fun e!15414 () Bool)

(assert (=> mapNonEmpty!1031 (= tp!3533 (and e!15414 mapRes!1032))))

(declare-fun b!23791 () Bool)

(assert (=> b!23791 (= e!15414 tp_is_empty!1021)))

(declare-fun b!23790 () Bool)

(assert (=> b!23790 (= e!15415 tp_is_empty!1021)))

(assert (= (and mapNonEmpty!1031 condMapEmpty!1032) mapIsEmpty!1032))

(assert (= (and mapNonEmpty!1031 (not condMapEmpty!1032)) mapNonEmpty!1032))

(assert (= (and mapNonEmpty!1032 ((_ is ValueCellFull!311) mapValue!1032)) b!23790))

(assert (= (and mapNonEmpty!1031 ((_ is ValueCellFull!311) mapDefault!1032)) b!23791))

(declare-fun m!17615 () Bool)

(assert (=> mapNonEmpty!1032 m!17615))

(check-sat (not d!4011) (not b!23604) (not bm!1999) (not bm!1960) (not b!23654) (not d!4043) tp_is_empty!1021 (not d!4081) (not bm!1989) (not b!23560) (not bm!2012) (not b!23789) (not d!4037) (not b!23683) (not b!23698) (not d!3989) (not b!23397) (not bm!2027) (not b!23610) (not d!3971) (not d!4073) (not bm!1986) (not d!3969) (not b!23662) (not d!4041) (not d!4035) (not b_lambda!1571) (not b!23788) (not b!23394) (not d!3979) (not d!4029) (not b!23480) (not bm!2010) (not b!23614) (not b!23674) (not b!23703) (not d!3965) (not b!23778) (not b!23678) (not b!23504) (not b!23774) (not b!23710) (not bm!2026) (not bm!1977) (not b!23666) (not b!23498) (not d!4031) (not bm!2014) (not d!4059) (not b!23546) (not b!23652) (not d!4083) (not bm!2034) (not d!4025) (not bm!2041) (not b!23693) (not b!23470) (not b!23715) (not b_next!757) (not b!23545) (not b!23453) (not bm!2001) (not b!23559) (not d!4061) (not d!4039) (not bm!2025) (not b!23542) (not b!23617) (not d!4045) (not b!23757) (not b!23727) (not b!23623) (not b!23465) (not b!23618) (not b!23451) (not bm!2017) (not d!4033) (not bm!1978) (not d!3999) (not b!23762) (not d!3991) b_and!1493 (not bm!2037) (not b!23764) (not b!23489) (not b!23449) (not b!23787) (not bm!2013) (not bm!2021) (not bm!2004) (not b!23675) (not b!23777) (not b!23739) (not b!23456) (not b!23387) (not d!4057) (not bm!1984) (not b!23682) (not b!23492) (not b_lambda!1581) (not d!3973) (not bm!2033) (not b!23781) (not b!23592) (not b!23626) (not b!23732) (not b!23462) (not bm!2030) (not b!23657) (not bm!2016) (not bm!2022) (not b!23704) (not b!23557) (not b!23554) (not b!23750) (not b!23575) (not b!23754) (not b!23763) (not d!3997) (not bm!2007) (not b!23549) (not b!23385) (not b!23646) (not b_lambda!1567) (not bm!1985) (not b!23444) (not bm!2032) (not b!23706) (not b!23556) (not b!23717) (not d!4019) (not b!23664) (not bm!2044) (not b!23669) (not b!23700) (not d!3981) (not b!23719) (not b!23707) (not mapNonEmpty!1032) (not b!23702) (not b!23740) (not d!4065) (not b!23558) (not d!4077) (not bm!1982) (not d!4063) (not b!23731) (not b!23503) (not b!23752) (not b!23632) (not d!3985) (not b!23461) (not b!23769) (not b_lambda!1577) (not d!4067) (not d!4049) (not d!3987) (not d!4015) (not b!23463) (not b!23477) (not b!23728) (not d!3993) (not d!4069) (not d!3975) (not bm!2000) (not bm!2018) (not bm!1961) (not b!23561) (not b!23576) (not b!23452) (not d!4075) (not b!23742) (not b!23603) (not b!23753) (not d!3967) (not b!23718) (not b!23745) (not b!23396) (not d!4005) (not b!23729) (not b_lambda!1573) (not b!23776) (not b!23705) (not b!23722) (not d!4079) (not b!23487) (not d!4001) (not b!23572) (not bm!2023) (not b!23589) (not bm!2039) (not d!4027) (not b!23399) (not b!23562) (not b!23398) (not b!23488) (not b!23621) (not b_lambda!1569) (not d!4007) (not b!23485) (not b!23766) (not b!23497) (not bm!1979) (not b!23551) (not b!23665) (not b!23681) (not b!23395) (not d!4047) (not b!23591) (not b_lambda!1575) (not b_lambda!1579) (not bm!2040) (not b!23577) (not b!23786) (not d!4003))
(check-sat b_and!1493 (not b_next!757))
(get-model)

(declare-fun d!4085 () Bool)

(assert (=> d!4085 (contains!230 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240)))))

(assert (=> d!4085 true))

(declare-fun _$16!71 () Unit!519)

(assert (=> d!4085 (= (choose!208 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2342 lt!8240) (defaultEntry!1742 lt!8141)) _$16!71)))

(declare-fun bs!961 () Bool)

(assert (= bs!961 d!4085))

(assert (=> bs!961 m!16720))

(assert (=> bs!961 m!16722))

(assert (=> bs!961 m!16720))

(assert (=> bs!961 m!16722))

(assert (=> bs!961 m!16724))

(assert (=> d!4039 d!4085))

(declare-fun d!4087 () Bool)

(assert (=> d!4087 (= (validMask!0 (mask!4729 lt!8141)) (and (or (= (mask!4729 lt!8141) #b00000000000000000000000000000111) (= (mask!4729 lt!8141) #b00000000000000000000000000001111) (= (mask!4729 lt!8141) #b00000000000000000000000000011111) (= (mask!4729 lt!8141) #b00000000000000000000000000111111) (= (mask!4729 lt!8141) #b00000000000000000000000001111111) (= (mask!4729 lt!8141) #b00000000000000000000000011111111) (= (mask!4729 lt!8141) #b00000000000000000000000111111111) (= (mask!4729 lt!8141) #b00000000000000000000001111111111) (= (mask!4729 lt!8141) #b00000000000000000000011111111111) (= (mask!4729 lt!8141) #b00000000000000000000111111111111) (= (mask!4729 lt!8141) #b00000000000000000001111111111111) (= (mask!4729 lt!8141) #b00000000000000000011111111111111) (= (mask!4729 lt!8141) #b00000000000000000111111111111111) (= (mask!4729 lt!8141) #b00000000000000001111111111111111) (= (mask!4729 lt!8141) #b00000000000000011111111111111111) (= (mask!4729 lt!8141) #b00000000000000111111111111111111) (= (mask!4729 lt!8141) #b00000000000001111111111111111111) (= (mask!4729 lt!8141) #b00000000000011111111111111111111) (= (mask!4729 lt!8141) #b00000000000111111111111111111111) (= (mask!4729 lt!8141) #b00000000001111111111111111111111) (= (mask!4729 lt!8141) #b00000000011111111111111111111111) (= (mask!4729 lt!8141) #b00000000111111111111111111111111) (= (mask!4729 lt!8141) #b00000001111111111111111111111111) (= (mask!4729 lt!8141) #b00000011111111111111111111111111) (= (mask!4729 lt!8141) #b00000111111111111111111111111111) (= (mask!4729 lt!8141) #b00001111111111111111111111111111) (= (mask!4729 lt!8141) #b00011111111111111111111111111111) (= (mask!4729 lt!8141) #b00111111111111111111111111111111)) (bvsle (mask!4729 lt!8141) #b00111111111111111111111111111111)))))

(assert (=> d!4039 d!4087))

(declare-fun b!23792 () Bool)

(declare-fun e!15416 () Bool)

(declare-fun call!2048 () Bool)

(assert (=> b!23792 (= e!15416 call!2048)))

(declare-fun b!23793 () Bool)

(declare-fun e!15419 () Bool)

(assert (=> b!23793 (= e!15419 e!15416)))

(declare-fun c!3115 () Bool)

(assert (=> b!23793 (= c!3115 (validKeyInArray!0 (select (arr!597 lt!8321) (bvadd lt!8319 #b00000000000000000000000000000001))))))

(declare-fun d!4089 () Bool)

(declare-fun res!14585 () Bool)

(declare-fun e!15417 () Bool)

(assert (=> d!4089 (=> res!14585 e!15417)))

(assert (=> d!4089 (= res!14585 (bvsge (bvadd lt!8319 #b00000000000000000000000000000001) (size!693 lt!8321)))))

(assert (=> d!4089 (= (arrayNoDuplicates!0 lt!8321 (bvadd lt!8319 #b00000000000000000000000000000001) (ite c!3062 (Cons!562 (select (arr!597 lt!8321) lt!8319) lt!8325) lt!8325)) e!15417)))

(declare-fun bm!2045 () Bool)

(assert (=> bm!2045 (= call!2048 (arrayNoDuplicates!0 lt!8321 (bvadd lt!8319 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!3115 (Cons!562 (select (arr!597 lt!8321) (bvadd lt!8319 #b00000000000000000000000000000001)) (ite c!3062 (Cons!562 (select (arr!597 lt!8321) lt!8319) lt!8325) lt!8325)) (ite c!3062 (Cons!562 (select (arr!597 lt!8321) lt!8319) lt!8325) lt!8325))))))

(declare-fun b!23794 () Bool)

(assert (=> b!23794 (= e!15416 call!2048)))

(declare-fun b!23795 () Bool)

(assert (=> b!23795 (= e!15417 e!15419)))

(declare-fun res!14587 () Bool)

(assert (=> b!23795 (=> (not res!14587) (not e!15419))))

(declare-fun e!15418 () Bool)

(assert (=> b!23795 (= res!14587 (not e!15418))))

(declare-fun res!14586 () Bool)

(assert (=> b!23795 (=> (not res!14586) (not e!15418))))

(assert (=> b!23795 (= res!14586 (validKeyInArray!0 (select (arr!597 lt!8321) (bvadd lt!8319 #b00000000000000000000000000000001))))))

(declare-fun b!23796 () Bool)

(assert (=> b!23796 (= e!15418 (contains!232 (ite c!3062 (Cons!562 (select (arr!597 lt!8321) lt!8319) lt!8325) lt!8325) (select (arr!597 lt!8321) (bvadd lt!8319 #b00000000000000000000000000000001))))))

(assert (= (and d!4089 (not res!14585)) b!23795))

(assert (= (and b!23795 res!14586) b!23796))

(assert (= (and b!23795 res!14587) b!23793))

(assert (= (and b!23793 c!3115) b!23794))

(assert (= (and b!23793 (not c!3115)) b!23792))

(assert (= (or b!23794 b!23792) bm!2045))

(declare-fun m!17617 () Bool)

(assert (=> b!23793 m!17617))

(assert (=> b!23793 m!17617))

(declare-fun m!17619 () Bool)

(assert (=> b!23793 m!17619))

(assert (=> bm!2045 m!17617))

(declare-fun m!17621 () Bool)

(assert (=> bm!2045 m!17621))

(assert (=> b!23795 m!17617))

(assert (=> b!23795 m!17617))

(assert (=> b!23795 m!17619))

(assert (=> b!23796 m!17617))

(assert (=> b!23796 m!17617))

(declare-fun m!17623 () Bool)

(assert (=> b!23796 m!17623))

(assert (=> bm!2007 d!4089))

(declare-fun d!4091 () Bool)

(declare-fun e!15421 () Bool)

(assert (=> d!4091 e!15421))

(declare-fun res!14588 () Bool)

(assert (=> d!4091 (=> res!14588 e!15421)))

(declare-fun lt!8793 () Bool)

(assert (=> d!4091 (= res!14588 (not lt!8793))))

(declare-fun lt!8792 () Bool)

(assert (=> d!4091 (= lt!8793 lt!8792)))

(declare-fun lt!8791 () Unit!519)

(declare-fun e!15420 () Unit!519)

(assert (=> d!4091 (= lt!8791 e!15420)))

(declare-fun c!3116 () Bool)

(assert (=> d!4091 (= c!3116 lt!8792)))

(assert (=> d!4091 (= lt!8792 (containsKey!24 (toList!298 lt!8668) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4091 (= (contains!230 lt!8668 #b1000000000000000000000000000000000000000000000000000000000000000) lt!8793)))

(declare-fun b!23797 () Bool)

(declare-fun lt!8790 () Unit!519)

(assert (=> b!23797 (= e!15420 lt!8790)))

(assert (=> b!23797 (= lt!8790 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8668) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23797 (isDefined!22 (getValueByKey!60 (toList!298 lt!8668) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23798 () Bool)

(declare-fun Unit!549 () Unit!519)

(assert (=> b!23798 (= e!15420 Unit!549)))

(declare-fun b!23799 () Bool)

(assert (=> b!23799 (= e!15421 (isDefined!22 (getValueByKey!60 (toList!298 lt!8668) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4091 c!3116) b!23797))

(assert (= (and d!4091 (not c!3116)) b!23798))

(assert (= (and d!4091 (not res!14588)) b!23799))

(declare-fun m!17625 () Bool)

(assert (=> d!4091 m!17625))

(declare-fun m!17627 () Bool)

(assert (=> b!23797 m!17627))

(declare-fun m!17629 () Bool)

(assert (=> b!23797 m!17629))

(assert (=> b!23797 m!17629))

(declare-fun m!17631 () Bool)

(assert (=> b!23797 m!17631))

(assert (=> b!23799 m!17629))

(assert (=> b!23799 m!17629))

(assert (=> b!23799 m!17631))

(assert (=> bm!2018 d!4091))

(declare-fun d!4093 () Bool)

(declare-fun e!15423 () Bool)

(assert (=> d!4093 e!15423))

(declare-fun res!14589 () Bool)

(assert (=> d!4093 (=> res!14589 e!15423)))

(declare-fun lt!8797 () Bool)

(assert (=> d!4093 (= res!14589 (not lt!8797))))

(declare-fun lt!8796 () Bool)

(assert (=> d!4093 (= lt!8797 lt!8796)))

(declare-fun lt!8795 () Unit!519)

(declare-fun e!15422 () Unit!519)

(assert (=> d!4093 (= lt!8795 e!15422)))

(declare-fun c!3117 () Bool)

(assert (=> d!4093 (= c!3117 lt!8796)))

(assert (=> d!4093 (= lt!8796 (containsKey!24 (toList!298 lt!8711) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> d!4093 (= (contains!230 lt!8711 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) lt!8797)))

(declare-fun b!23800 () Bool)

(declare-fun lt!8794 () Unit!519)

(assert (=> b!23800 (= e!15422 lt!8794)))

(assert (=> b!23800 (= lt!8794 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8711) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23800 (isDefined!22 (getValueByKey!60 (toList!298 lt!8711) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!23801 () Bool)

(declare-fun Unit!550 () Unit!519)

(assert (=> b!23801 (= e!15422 Unit!550)))

(declare-fun b!23802 () Bool)

(assert (=> b!23802 (= e!15423 (isDefined!22 (getValueByKey!60 (toList!298 lt!8711) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(assert (= (and d!4093 c!3117) b!23800))

(assert (= (and d!4093 (not c!3117)) b!23801))

(assert (= (and d!4093 (not res!14589)) b!23802))

(assert (=> d!4093 m!17198))

(declare-fun m!17633 () Bool)

(assert (=> d!4093 m!17633))

(assert (=> b!23800 m!17198))

(declare-fun m!17635 () Bool)

(assert (=> b!23800 m!17635))

(assert (=> b!23800 m!17198))

(declare-fun m!17637 () Bool)

(assert (=> b!23800 m!17637))

(assert (=> b!23800 m!17637))

(declare-fun m!17639 () Bool)

(assert (=> b!23800 m!17639))

(assert (=> b!23802 m!17198))

(assert (=> b!23802 m!17637))

(assert (=> b!23802 m!17637))

(assert (=> b!23802 m!17639))

(assert (=> b!23719 d!4093))

(declare-fun d!4095 () Bool)

(declare-fun e!15424 () Bool)

(assert (=> d!4095 e!15424))

(declare-fun res!14590 () Bool)

(assert (=> d!4095 (=> (not res!14590) (not e!15424))))

(declare-fun lt!8800 () ListLongMap!565)

(assert (=> d!4095 (= res!14590 (contains!230 lt!8800 (_1!493 (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun lt!8798 () List!565)

(assert (=> d!4095 (= lt!8800 (ListLongMap!566 lt!8798))))

(declare-fun lt!8799 () Unit!519)

(declare-fun lt!8801 () Unit!519)

(assert (=> d!4095 (= lt!8799 lt!8801)))

(assert (=> d!4095 (= (getValueByKey!60 lt!8798 (_1!493 (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4095 (= lt!8801 (lemmaContainsTupThenGetReturnValue!18 lt!8798 (_1!493 (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) (_2!493 (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4095 (= lt!8798 (insertStrictlySorted!18 (toList!298 (ite c!3111 call!2045 (ite c!3112 call!2042 call!2043))) (_1!493 (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) (_2!493 (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4095 (= (+!45 (ite c!3111 call!2045 (ite c!3112 call!2042 call!2043)) (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) lt!8800)))

(declare-fun b!23803 () Bool)

(declare-fun res!14591 () Bool)

(assert (=> b!23803 (=> (not res!14591) (not e!15424))))

(assert (=> b!23803 (= res!14591 (= (getValueByKey!60 (toList!298 lt!8800) (_1!493 (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))))

(declare-fun b!23804 () Bool)

(assert (=> b!23804 (= e!15424 (contains!231 (toList!298 lt!8800) (ite (or c!3111 c!3112) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(assert (= (and d!4095 res!14590) b!23803))

(assert (= (and b!23803 res!14591) b!23804))

(declare-fun m!17641 () Bool)

(assert (=> d!4095 m!17641))

(declare-fun m!17643 () Bool)

(assert (=> d!4095 m!17643))

(declare-fun m!17645 () Bool)

(assert (=> d!4095 m!17645))

(declare-fun m!17647 () Bool)

(assert (=> d!4095 m!17647))

(declare-fun m!17649 () Bool)

(assert (=> b!23803 m!17649))

(declare-fun m!17651 () Bool)

(assert (=> b!23804 m!17651))

(assert (=> bm!2039 d!4095))

(declare-fun d!4097 () Bool)

(declare-fun res!14596 () Bool)

(declare-fun e!15429 () Bool)

(assert (=> d!4097 (=> res!14596 e!15429)))

(assert (=> d!4097 (= res!14596 (and ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))) (= (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342)))))))

(assert (=> d!4097 (= (containsKey!24 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))) e!15429)))

(declare-fun b!23809 () Bool)

(declare-fun e!15430 () Bool)

(assert (=> b!23809 (= e!15429 e!15430)))

(declare-fun res!14597 () Bool)

(assert (=> b!23809 (=> (not res!14597) (not e!15430))))

(assert (=> b!23809 (= res!14597 (and (or (not ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))))) (bvsle (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342)))) ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))) (bvslt (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342)))))))

(declare-fun b!23810 () Bool)

(assert (=> b!23810 (= e!15430 (containsKey!24 (t!3229 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))

(assert (= (and d!4097 (not res!14596)) b!23809))

(assert (= (and b!23809 res!14597) b!23810))

(assert (=> b!23810 m!16818))

(declare-fun m!17653 () Bool)

(assert (=> b!23810 m!17653))

(assert (=> d!4077 d!4097))

(declare-fun d!4099 () Bool)

(declare-fun get!391 (Option!66) V!1187)

(assert (=> d!4099 (= (apply!29 lt!8668 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!391 (getValueByKey!60 (toList!298 lt!8668) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(declare-fun bs!962 () Bool)

(assert (= bs!962 d!4099))

(assert (=> bs!962 m!17198))

(declare-fun m!17655 () Bool)

(assert (=> bs!962 m!17655))

(assert (=> bs!962 m!17655))

(declare-fun m!17657 () Bool)

(assert (=> bs!962 m!17657))

(assert (=> b!23657 d!4099))

(declare-fun d!4101 () Bool)

(declare-fun c!3120 () Bool)

(assert (=> d!4101 (= c!3120 ((_ is ValueCellFull!311) (select (arr!596 lt!8236) #b00000000000000000000000000000000)))))

(declare-fun e!15433 () V!1187)

(assert (=> d!4101 (= (get!390 (select (arr!596 lt!8236) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)) e!15433)))

(declare-fun b!23815 () Bool)

(declare-fun get!392 (ValueCell!311 V!1187) V!1187)

(assert (=> b!23815 (= e!15433 (get!392 (select (arr!596 lt!8236) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23816 () Bool)

(declare-fun get!393 (ValueCell!311 V!1187) V!1187)

(assert (=> b!23816 (= e!15433 (get!393 (select (arr!596 lt!8236) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4101 c!3120) b!23815))

(assert (= (and d!4101 (not c!3120)) b!23816))

(assert (=> b!23815 m!17302))

(assert (=> b!23815 m!17304))

(declare-fun m!17659 () Bool)

(assert (=> b!23815 m!17659))

(assert (=> b!23816 m!17302))

(assert (=> b!23816 m!17304))

(declare-fun m!17661 () Bool)

(assert (=> b!23816 m!17661))

(assert (=> b!23657 d!4101))

(declare-fun b!23817 () Bool)

(declare-fun e!15434 () (_ BitVec 32))

(assert (=> b!23817 (= e!15434 #b00000000000000000000000000000000)))

(declare-fun b!23818 () Bool)

(declare-fun e!15435 () (_ BitVec 32))

(assert (=> b!23818 (= e!15434 e!15435)))

(declare-fun c!3122 () Bool)

(assert (=> b!23818 (= c!3122 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)))))

(declare-fun b!23819 () Bool)

(declare-fun call!2049 () (_ BitVec 32))

(assert (=> b!23819 (= e!15435 (bvadd #b00000000000000000000000000000001 call!2049))))

(declare-fun b!23820 () Bool)

(assert (=> b!23820 (= e!15435 call!2049)))

(declare-fun bm!2046 () Bool)

(assert (=> bm!2046 (= call!2049 (arrayCountValidKeys!0 (_keys!3163 lt!8306) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8306))))))

(declare-fun d!4103 () Bool)

(declare-fun lt!8802 () (_ BitVec 32))

(assert (=> d!4103 (and (bvsge lt!8802 #b00000000000000000000000000000000) (bvsle lt!8802 (bvsub (size!693 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)))))

(assert (=> d!4103 (= lt!8802 e!15434)))

(declare-fun c!3121 () Bool)

(assert (=> d!4103 (= c!3121 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))))))

(assert (=> d!4103 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 lt!8306)) (size!693 (_keys!3163 lt!8306))))))

(assert (=> d!4103 (= (arrayCountValidKeys!0 (_keys!3163 lt!8306) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))) lt!8802)))

(assert (= (and d!4103 c!3121) b!23817))

(assert (= (and d!4103 (not c!3121)) b!23818))

(assert (= (and b!23818 c!3122) b!23819))

(assert (= (and b!23818 (not c!3122)) b!23820))

(assert (= (or b!23819 b!23820) bm!2046))

(declare-fun m!17663 () Bool)

(assert (=> b!23818 m!17663))

(assert (=> b!23818 m!17663))

(declare-fun m!17665 () Bool)

(assert (=> b!23818 m!17665))

(declare-fun m!17667 () Bool)

(assert (=> bm!2046 m!17667))

(assert (=> b!23575 d!4103))

(declare-fun b!23821 () Bool)

(declare-fun e!15436 () Bool)

(declare-fun call!2050 () Bool)

(assert (=> b!23821 (= e!15436 call!2050)))

(declare-fun b!23822 () Bool)

(declare-fun e!15438 () Bool)

(assert (=> b!23822 (= e!15438 call!2050)))

(declare-fun b!23823 () Bool)

(declare-fun e!15437 () Bool)

(assert (=> b!23823 (= e!15437 e!15436)))

(declare-fun c!3123 () Bool)

(assert (=> b!23823 (= c!3123 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun d!4105 () Bool)

(declare-fun res!14599 () Bool)

(assert (=> d!4105 (=> res!14599 e!15437)))

(assert (=> d!4105 (= res!14599 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4105 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 lt!8141) (mask!4729 lt!8141)) e!15437)))

(declare-fun bm!2047 () Bool)

(assert (=> bm!2047 (= call!2050 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!23824 () Bool)

(assert (=> b!23824 (= e!15436 e!15438)))

(declare-fun lt!8803 () (_ BitVec 64))

(assert (=> b!23824 (= lt!8803 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!8805 () Unit!519)

(assert (=> b!23824 (= lt!8805 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 lt!8141) lt!8803 #b00000000000000000000000000000000))))

(assert (=> b!23824 (arrayContainsKey!0 (_keys!3163 lt!8141) lt!8803 #b00000000000000000000000000000000)))

(declare-fun lt!8804 () Unit!519)

(assert (=> b!23824 (= lt!8804 lt!8805)))

(declare-fun res!14598 () Bool)

(assert (=> b!23824 (= res!14598 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)) (Found!55 #b00000000000000000000000000000000)))))

(assert (=> b!23824 (=> (not res!14598) (not e!15438))))

(assert (= (and d!4105 (not res!14599)) b!23823))

(assert (= (and b!23823 c!3123) b!23824))

(assert (= (and b!23823 (not c!3123)) b!23821))

(assert (= (and b!23824 res!14598) b!23822))

(assert (= (or b!23822 b!23821) bm!2047))

(assert (=> b!23823 m!17198))

(assert (=> b!23823 m!17198))

(assert (=> b!23823 m!17310))

(declare-fun m!17669 () Bool)

(assert (=> bm!2047 m!17669))

(assert (=> b!23824 m!17198))

(declare-fun m!17671 () Bool)

(assert (=> b!23824 m!17671))

(declare-fun m!17673 () Bool)

(assert (=> b!23824 m!17673))

(assert (=> b!23824 m!17198))

(declare-fun m!17675 () Bool)

(assert (=> b!23824 m!17675))

(assert (=> b!23398 d!4105))

(declare-fun b!23825 () Bool)

(declare-fun e!15439 () (_ BitVec 32))

(assert (=> b!23825 (= e!15439 #b00000000000000000000000000000000)))

(declare-fun b!23826 () Bool)

(declare-fun e!15440 () (_ BitVec 32))

(assert (=> b!23826 (= e!15439 e!15440)))

(declare-fun c!3125 () Bool)

(assert (=> b!23826 (= c!3125 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)))))

(declare-fun b!23827 () Bool)

(declare-fun call!2051 () (_ BitVec 32))

(assert (=> b!23827 (= e!15440 (bvadd #b00000000000000000000000000000001 call!2051))))

(declare-fun b!23828 () Bool)

(assert (=> b!23828 (= e!15440 call!2051)))

(declare-fun bm!2048 () Bool)

(assert (=> bm!2048 (= call!2051 (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8336)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!487 lt!8336)))))))

(declare-fun d!4107 () Bool)

(declare-fun lt!8806 () (_ BitVec 32))

(assert (=> d!4107 (and (bvsge lt!8806 #b00000000000000000000000000000000) (bvsle lt!8806 (bvsub (size!693 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)))))

(assert (=> d!4107 (= lt!8806 e!15439)))

(declare-fun c!3124 () Bool)

(assert (=> d!4107 (= c!3124 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))))))

(assert (=> d!4107 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (_2!487 lt!8336))) (size!693 (_keys!3163 (_2!487 lt!8336)))))))

(assert (=> d!4107 (= (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8336)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))) lt!8806)))

(assert (= (and d!4107 c!3124) b!23825))

(assert (= (and d!4107 (not c!3124)) b!23826))

(assert (= (and b!23826 c!3125) b!23827))

(assert (= (and b!23826 (not c!3125)) b!23828))

(assert (= (or b!23827 b!23828) bm!2048))

(declare-fun m!17677 () Bool)

(assert (=> b!23826 m!17677))

(assert (=> b!23826 m!17677))

(declare-fun m!17679 () Bool)

(assert (=> b!23826 m!17679))

(declare-fun m!17681 () Bool)

(assert (=> bm!2048 m!17681))

(assert (=> b!23702 d!4107))

(declare-fun d!4109 () Bool)

(assert (=> d!4109 (arrayContainsKey!0 lt!8315 lt!8611 #b00000000000000000000000000000000)))

(declare-fun lt!8809 () Unit!519)

(declare-fun choose!13 (array!1263 (_ BitVec 64) (_ BitVec 32)) Unit!519)

(assert (=> d!4109 (= lt!8809 (choose!13 lt!8315 lt!8611 lt!8323))))

(assert (=> d!4109 (bvsge lt!8323 #b00000000000000000000000000000000)))

(assert (=> d!4109 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8315 lt!8611 lt!8323) lt!8809)))

(declare-fun bs!963 () Bool)

(assert (= bs!963 d!4109))

(assert (=> bs!963 m!17194))

(declare-fun m!17683 () Bool)

(assert (=> bs!963 m!17683))

(assert (=> b!23604 d!4109))

(declare-fun d!4111 () Bool)

(declare-fun res!14600 () Bool)

(declare-fun e!15441 () Bool)

(assert (=> d!4111 (=> res!14600 e!15441)))

(assert (=> d!4111 (= res!14600 (= (select (arr!597 lt!8315) #b00000000000000000000000000000000) lt!8611))))

(assert (=> d!4111 (= (arrayContainsKey!0 lt!8315 lt!8611 #b00000000000000000000000000000000) e!15441)))

(declare-fun b!23829 () Bool)

(declare-fun e!15442 () Bool)

(assert (=> b!23829 (= e!15441 e!15442)))

(declare-fun res!14601 () Bool)

(assert (=> b!23829 (=> (not res!14601) (not e!15442))))

(assert (=> b!23829 (= res!14601 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 lt!8315)))))

(declare-fun b!23830 () Bool)

(assert (=> b!23830 (= e!15442 (arrayContainsKey!0 lt!8315 lt!8611 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4111 (not res!14600)) b!23829))

(assert (= (and b!23829 res!14601) b!23830))

(declare-fun m!17685 () Bool)

(assert (=> d!4111 m!17685))

(declare-fun m!17687 () Bool)

(assert (=> b!23830 m!17687))

(assert (=> b!23604 d!4111))

(declare-fun d!4113 () Bool)

(declare-fun lt!8810 () SeekEntryResult!55)

(assert (=> d!4113 (and (or ((_ is Undefined!55) lt!8810) (not ((_ is Found!55) lt!8810)) (and (bvsge (index!2342 lt!8810) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8810) (size!693 lt!8315)))) (or ((_ is Undefined!55) lt!8810) ((_ is Found!55) lt!8810) (not ((_ is MissingZero!55) lt!8810)) (and (bvsge (index!2341 lt!8810) #b00000000000000000000000000000000) (bvslt (index!2341 lt!8810) (size!693 lt!8315)))) (or ((_ is Undefined!55) lt!8810) ((_ is Found!55) lt!8810) ((_ is MissingZero!55) lt!8810) (not ((_ is MissingVacant!55) lt!8810)) (and (bvsge (index!2344 lt!8810) #b00000000000000000000000000000000) (bvslt (index!2344 lt!8810) (size!693 lt!8315)))) (or ((_ is Undefined!55) lt!8810) (ite ((_ is Found!55) lt!8810) (= (select (arr!597 lt!8315) (index!2342 lt!8810)) (select (arr!597 lt!8315) lt!8323)) (ite ((_ is MissingZero!55) lt!8810) (= (select (arr!597 lt!8315) (index!2341 lt!8810)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!55) lt!8810) (= (select (arr!597 lt!8315) (index!2344 lt!8810)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!15445 () SeekEntryResult!55)

(assert (=> d!4113 (= lt!8810 e!15445)))

(declare-fun c!3126 () Bool)

(declare-fun lt!8811 () SeekEntryResult!55)

(assert (=> d!4113 (= c!3126 (and ((_ is Intermediate!55) lt!8811) (undefined!867 lt!8811)))))

(assert (=> d!4113 (= lt!8811 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!597 lt!8315) lt!8323) (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))) (select (arr!597 lt!8315) lt!8323) lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))))))

(assert (=> d!4113 (validMask!0 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(assert (=> d!4113 (= (seekEntryOrOpen!0 (select (arr!597 lt!8315) lt!8323) lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))) lt!8810)))

(declare-fun e!15444 () SeekEntryResult!55)

(declare-fun b!23831 () Bool)

(assert (=> b!23831 (= e!15444 (seekKeyOrZeroReturnVacant!0 (x!5577 lt!8811) (index!2343 lt!8811) (index!2343 lt!8811) (select (arr!597 lt!8315) lt!8323) lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun b!23832 () Bool)

(declare-fun e!15443 () SeekEntryResult!55)

(assert (=> b!23832 (= e!15443 (Found!55 (index!2343 lt!8811)))))

(declare-fun b!23833 () Bool)

(declare-fun c!3128 () Bool)

(declare-fun lt!8812 () (_ BitVec 64))

(assert (=> b!23833 (= c!3128 (= lt!8812 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23833 (= e!15443 e!15444)))

(declare-fun b!23834 () Bool)

(assert (=> b!23834 (= e!15444 (MissingZero!55 (index!2343 lt!8811)))))

(declare-fun b!23835 () Bool)

(assert (=> b!23835 (= e!15445 Undefined!55)))

(declare-fun b!23836 () Bool)

(assert (=> b!23836 (= e!15445 e!15443)))

(assert (=> b!23836 (= lt!8812 (select (arr!597 lt!8315) (index!2343 lt!8811)))))

(declare-fun c!3127 () Bool)

(assert (=> b!23836 (= c!3127 (= lt!8812 (select (arr!597 lt!8315) lt!8323)))))

(assert (= (and d!4113 c!3126) b!23835))

(assert (= (and d!4113 (not c!3126)) b!23836))

(assert (= (and b!23836 c!3127) b!23832))

(assert (= (and b!23836 (not c!3127)) b!23833))

(assert (= (and b!23833 c!3128) b!23834))

(assert (= (and b!23833 (not c!3128)) b!23831))

(declare-fun m!17689 () Bool)

(assert (=> d!4113 m!17689))

(declare-fun m!17691 () Bool)

(assert (=> d!4113 m!17691))

(declare-fun m!17693 () Bool)

(assert (=> d!4113 m!17693))

(assert (=> d!4113 m!17186))

(assert (=> d!4113 m!16662))

(declare-fun m!17695 () Bool)

(assert (=> d!4113 m!17695))

(assert (=> d!4113 m!16662))

(assert (=> d!4113 m!16794))

(assert (=> d!4113 m!17695))

(assert (=> d!4113 m!17186))

(assert (=> d!4113 m!16662))

(declare-fun m!17697 () Bool)

(assert (=> d!4113 m!17697))

(assert (=> b!23831 m!17186))

(assert (=> b!23831 m!16662))

(declare-fun m!17699 () Bool)

(assert (=> b!23831 m!17699))

(declare-fun m!17701 () Bool)

(assert (=> b!23836 m!17701))

(assert (=> b!23604 d!4113))

(declare-fun b!23837 () Bool)

(declare-fun e!15446 () Bool)

(declare-fun call!2052 () Bool)

(assert (=> b!23837 (= e!15446 call!2052)))

(declare-fun b!23838 () Bool)

(declare-fun e!15448 () Bool)

(assert (=> b!23838 (= e!15448 call!2052)))

(declare-fun b!23839 () Bool)

(declare-fun e!15447 () Bool)

(assert (=> b!23839 (= e!15447 e!15446)))

(declare-fun c!3129 () Bool)

(assert (=> b!23839 (= c!3129 (validKeyInArray!0 (select (arr!597 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(declare-fun d!4115 () Bool)

(declare-fun res!14603 () Bool)

(assert (=> d!4115 (=> res!14603 e!15447)))

(assert (=> d!4115 (= res!14603 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938))))))))

(assert (=> d!4115 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (v!1601 (underlying!115 thiss!938))) (mask!4729 (v!1601 (underlying!115 thiss!938)))) e!15447)))

(declare-fun bm!2049 () Bool)

(assert (=> bm!2049 (= call!2052 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 (v!1601 (underlying!115 thiss!938))) (mask!4729 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun b!23840 () Bool)

(assert (=> b!23840 (= e!15446 e!15448)))

(declare-fun lt!8813 () (_ BitVec 64))

(assert (=> b!23840 (= lt!8813 (select (arr!597 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000))))

(declare-fun lt!8815 () Unit!519)

(assert (=> b!23840 (= lt!8815 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 (v!1601 (underlying!115 thiss!938))) lt!8813 #b00000000000000000000000000000000))))

(assert (=> b!23840 (arrayContainsKey!0 (_keys!3163 (v!1601 (underlying!115 thiss!938))) lt!8813 #b00000000000000000000000000000000)))

(declare-fun lt!8814 () Unit!519)

(assert (=> b!23840 (= lt!8814 lt!8815)))

(declare-fun res!14602 () Bool)

(assert (=> b!23840 (= res!14602 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000) (_keys!3163 (v!1601 (underlying!115 thiss!938))) (mask!4729 (v!1601 (underlying!115 thiss!938)))) (Found!55 #b00000000000000000000000000000000)))))

(assert (=> b!23840 (=> (not res!14602) (not e!15448))))

(assert (= (and d!4115 (not res!14603)) b!23839))

(assert (= (and b!23839 c!3129) b!23840))

(assert (= (and b!23839 (not c!3129)) b!23837))

(assert (= (and b!23840 res!14602) b!23838))

(assert (= (or b!23838 b!23837) bm!2049))

(declare-fun m!17703 () Bool)

(assert (=> b!23839 m!17703))

(assert (=> b!23839 m!17703))

(declare-fun m!17705 () Bool)

(assert (=> b!23839 m!17705))

(declare-fun m!17707 () Bool)

(assert (=> bm!2049 m!17707))

(assert (=> b!23840 m!17703))

(declare-fun m!17709 () Bool)

(assert (=> b!23840 m!17709))

(declare-fun m!17711 () Bool)

(assert (=> b!23840 m!17711))

(assert (=> b!23840 m!17703))

(declare-fun m!17713 () Bool)

(assert (=> b!23840 m!17713))

(assert (=> b!23557 d!4115))

(assert (=> d!4075 d!4087))

(declare-fun d!4117 () Bool)

(declare-fun e!15449 () Bool)

(assert (=> d!4117 e!15449))

(declare-fun res!14604 () Bool)

(assert (=> d!4117 (=> (not res!14604) (not e!15449))))

(declare-fun lt!8818 () ListLongMap!565)

(assert (=> d!4117 (= res!14604 (contains!230 lt!8818 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun lt!8816 () List!565)

(assert (=> d!4117 (= lt!8818 (ListLongMap!566 lt!8816))))

(declare-fun lt!8817 () Unit!519)

(declare-fun lt!8819 () Unit!519)

(assert (=> d!4117 (= lt!8817 lt!8819)))

(assert (=> d!4117 (= (getValueByKey!60 lt!8816 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4117 (= lt!8819 (lemmaContainsTupThenGetReturnValue!18 lt!8816 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4117 (= lt!8816 (insertStrictlySorted!18 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4117 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!8818)))

(declare-fun b!23841 () Bool)

(declare-fun res!14605 () Bool)

(assert (=> b!23841 (=> (not res!14605) (not e!15449))))

(assert (=> b!23841 (= res!14605 (= (getValueByKey!60 (toList!298 lt!8818) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!23842 () Bool)

(assert (=> b!23842 (= e!15449 (contains!231 (toList!298 lt!8818) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(assert (= (and d!4117 res!14604) b!23841))

(assert (= (and b!23841 res!14605) b!23842))

(declare-fun m!17715 () Bool)

(assert (=> d!4117 m!17715))

(declare-fun m!17717 () Bool)

(assert (=> d!4117 m!17717))

(declare-fun m!17719 () Bool)

(assert (=> d!4117 m!17719))

(declare-fun m!17721 () Bool)

(assert (=> d!4117 m!17721))

(declare-fun m!17723 () Bool)

(assert (=> b!23841 m!17723))

(declare-fun m!17725 () Bool)

(assert (=> b!23842 m!17725))

(assert (=> b!23789 d!4117))

(declare-fun b!23843 () Bool)

(declare-fun e!15458 () ListLongMap!565)

(declare-fun call!2055 () ListLongMap!565)

(assert (=> b!23843 (= e!15458 call!2055)))

(declare-fun bm!2050 () Bool)

(declare-fun call!2056 () ListLongMap!565)

(declare-fun call!2058 () ListLongMap!565)

(assert (=> bm!2050 (= call!2056 call!2058)))

(declare-fun b!23844 () Bool)

(declare-fun e!15454 () Bool)

(declare-fun e!15462 () Bool)

(assert (=> b!23844 (= e!15454 e!15462)))

(declare-fun c!3131 () Bool)

(assert (=> b!23844 (= c!3131 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23845 () Bool)

(declare-fun e!15453 () Bool)

(declare-fun lt!8824 () ListLongMap!565)

(assert (=> b!23845 (= e!15453 (= (apply!29 lt!8824 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23845 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!487 lt!8138)))))))

(assert (=> b!23845 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun call!2057 () ListLongMap!565)

(declare-fun call!2054 () ListLongMap!565)

(declare-fun c!3133 () Bool)

(declare-fun c!3132 () Bool)

(declare-fun bm!2051 () Bool)

(assert (=> bm!2051 (= call!2058 (+!45 (ite c!3132 call!2057 (ite c!3133 call!2054 call!2055)) (ite (or c!3132 c!3133) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun b!23846 () Bool)

(declare-fun res!14611 () Bool)

(assert (=> b!23846 (=> (not res!14611) (not e!15454))))

(declare-fun e!15459 () Bool)

(assert (=> b!23846 (= res!14611 e!15459)))

(declare-fun c!3130 () Bool)

(assert (=> b!23846 (= c!3130 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2052 () Bool)

(declare-fun call!2053 () Bool)

(assert (=> bm!2052 (= call!2053 (contains!230 lt!8824 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23847 () Bool)

(declare-fun e!15451 () Bool)

(assert (=> b!23847 (= e!15462 e!15451)))

(declare-fun res!14609 () Bool)

(declare-fun call!2059 () Bool)

(assert (=> b!23847 (= res!14609 call!2059)))

(assert (=> b!23847 (=> (not res!14609) (not e!15451))))

(declare-fun b!23848 () Bool)

(declare-fun e!15457 () Unit!519)

(declare-fun Unit!551 () Unit!519)

(assert (=> b!23848 (= e!15457 Unit!551)))

(declare-fun b!23849 () Bool)

(assert (=> b!23849 (= e!15462 (not call!2059))))

(declare-fun b!23850 () Bool)

(declare-fun e!15460 () Bool)

(assert (=> b!23850 (= e!15460 (= (apply!29 lt!8824 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!487 lt!8138))))))

(declare-fun bm!2053 () Bool)

(assert (=> bm!2053 (= call!2059 (contains!230 lt!8824 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23851 () Bool)

(assert (=> b!23851 (= e!15459 (not call!2053))))

(declare-fun d!4119 () Bool)

(assert (=> d!4119 e!15454))

(declare-fun res!14608 () Bool)

(assert (=> d!4119 (=> (not res!14608) (not e!15454))))

(assert (=> d!4119 (= res!14608 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun lt!8839 () ListLongMap!565)

(assert (=> d!4119 (= lt!8824 lt!8839)))

(declare-fun lt!8831 () Unit!519)

(assert (=> d!4119 (= lt!8831 e!15457)))

(declare-fun c!3134 () Bool)

(declare-fun e!15461 () Bool)

(assert (=> d!4119 (= c!3134 e!15461)))

(declare-fun res!14612 () Bool)

(assert (=> d!4119 (=> (not res!14612) (not e!15461))))

(assert (=> d!4119 (= res!14612 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun e!15455 () ListLongMap!565)

(assert (=> d!4119 (= lt!8839 e!15455)))

(assert (=> d!4119 (= c!3132 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4119 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4119 (= (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!8824)))

(declare-fun b!23852 () Bool)

(assert (=> b!23852 (= e!15451 (= (apply!29 lt!8824 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!487 lt!8138))))))

(declare-fun b!23853 () Bool)

(assert (=> b!23853 (= e!15455 (+!45 call!2058 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))

(declare-fun b!23854 () Bool)

(declare-fun e!15456 () Bool)

(assert (=> b!23854 (= e!15456 e!15453)))

(declare-fun res!14613 () Bool)

(assert (=> b!23854 (=> (not res!14613) (not e!15453))))

(assert (=> b!23854 (= res!14613 (contains!230 lt!8824 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!23854 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23855 () Bool)

(declare-fun res!14610 () Bool)

(assert (=> b!23855 (=> (not res!14610) (not e!15454))))

(assert (=> b!23855 (= res!14610 e!15456)))

(declare-fun res!14614 () Bool)

(assert (=> b!23855 (=> res!14614 e!15456)))

(declare-fun e!15452 () Bool)

(assert (=> b!23855 (= res!14614 (not e!15452))))

(declare-fun res!14607 () Bool)

(assert (=> b!23855 (=> (not res!14607) (not e!15452))))

(assert (=> b!23855 (= res!14607 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23856 () Bool)

(assert (=> b!23856 (= e!15458 call!2056)))

(declare-fun b!23857 () Bool)

(declare-fun lt!8821 () Unit!519)

(assert (=> b!23857 (= e!15457 lt!8821)))

(declare-fun lt!8835 () ListLongMap!565)

(assert (=> b!23857 (= lt!8835 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8820 () (_ BitVec 64))

(assert (=> b!23857 (= lt!8820 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8834 () (_ BitVec 64))

(assert (=> b!23857 (= lt!8834 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8840 () Unit!519)

(assert (=> b!23857 (= lt!8840 (addStillContains!14 lt!8835 lt!8820 (zeroValue!1665 (_2!487 lt!8138)) lt!8834))))

(assert (=> b!23857 (contains!230 (+!45 lt!8835 (tuple2!971 lt!8820 (zeroValue!1665 (_2!487 lt!8138)))) lt!8834)))

(declare-fun lt!8837 () Unit!519)

(assert (=> b!23857 (= lt!8837 lt!8840)))

(declare-fun lt!8841 () ListLongMap!565)

(assert (=> b!23857 (= lt!8841 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8830 () (_ BitVec 64))

(assert (=> b!23857 (= lt!8830 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8826 () (_ BitVec 64))

(assert (=> b!23857 (= lt!8826 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8832 () Unit!519)

(assert (=> b!23857 (= lt!8832 (addApplyDifferent!14 lt!8841 lt!8830 (minValue!1665 (_2!487 lt!8138)) lt!8826))))

(assert (=> b!23857 (= (apply!29 (+!45 lt!8841 (tuple2!971 lt!8830 (minValue!1665 (_2!487 lt!8138)))) lt!8826) (apply!29 lt!8841 lt!8826))))

(declare-fun lt!8822 () Unit!519)

(assert (=> b!23857 (= lt!8822 lt!8832)))

(declare-fun lt!8833 () ListLongMap!565)

(assert (=> b!23857 (= lt!8833 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8827 () (_ BitVec 64))

(assert (=> b!23857 (= lt!8827 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8829 () (_ BitVec 64))

(assert (=> b!23857 (= lt!8829 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8828 () Unit!519)

(assert (=> b!23857 (= lt!8828 (addApplyDifferent!14 lt!8833 lt!8827 (zeroValue!1665 (_2!487 lt!8138)) lt!8829))))

(assert (=> b!23857 (= (apply!29 (+!45 lt!8833 (tuple2!971 lt!8827 (zeroValue!1665 (_2!487 lt!8138)))) lt!8829) (apply!29 lt!8833 lt!8829))))

(declare-fun lt!8823 () Unit!519)

(assert (=> b!23857 (= lt!8823 lt!8828)))

(declare-fun lt!8838 () ListLongMap!565)

(assert (=> b!23857 (= lt!8838 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8836 () (_ BitVec 64))

(assert (=> b!23857 (= lt!8836 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8825 () (_ BitVec 64))

(assert (=> b!23857 (= lt!8825 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(assert (=> b!23857 (= lt!8821 (addApplyDifferent!14 lt!8838 lt!8836 (minValue!1665 (_2!487 lt!8138)) lt!8825))))

(assert (=> b!23857 (= (apply!29 (+!45 lt!8838 (tuple2!971 lt!8836 (minValue!1665 (_2!487 lt!8138)))) lt!8825) (apply!29 lt!8838 lt!8825))))

(declare-fun b!23858 () Bool)

(declare-fun e!15450 () ListLongMap!565)

(assert (=> b!23858 (= e!15450 call!2056)))

(declare-fun b!23859 () Bool)

(assert (=> b!23859 (= e!15455 e!15450)))

(assert (=> b!23859 (= c!3133 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23860 () Bool)

(declare-fun c!3135 () Bool)

(assert (=> b!23860 (= c!3135 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23860 (= e!15450 e!15458)))

(declare-fun bm!2054 () Bool)

(assert (=> bm!2054 (= call!2055 call!2054)))

(declare-fun bm!2055 () Bool)

(assert (=> bm!2055 (= call!2054 call!2057)))

(declare-fun b!23861 () Bool)

(assert (=> b!23861 (= e!15459 e!15460)))

(declare-fun res!14606 () Bool)

(assert (=> b!23861 (= res!14606 call!2053)))

(assert (=> b!23861 (=> (not res!14606) (not e!15460))))

(declare-fun b!23862 () Bool)

(assert (=> b!23862 (= e!15461 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun bm!2056 () Bool)

(assert (=> bm!2056 (= call!2057 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!23863 () Bool)

(assert (=> b!23863 (= e!15452 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (= (and d!4119 c!3132) b!23853))

(assert (= (and d!4119 (not c!3132)) b!23859))

(assert (= (and b!23859 c!3133) b!23858))

(assert (= (and b!23859 (not c!3133)) b!23860))

(assert (= (and b!23860 c!3135) b!23856))

(assert (= (and b!23860 (not c!3135)) b!23843))

(assert (= (or b!23856 b!23843) bm!2054))

(assert (= (or b!23858 bm!2054) bm!2055))

(assert (= (or b!23858 b!23856) bm!2050))

(assert (= (or b!23853 bm!2055) bm!2056))

(assert (= (or b!23853 bm!2050) bm!2051))

(assert (= (and d!4119 res!14612) b!23862))

(assert (= (and d!4119 c!3134) b!23857))

(assert (= (and d!4119 (not c!3134)) b!23848))

(assert (= (and d!4119 res!14608) b!23855))

(assert (= (and b!23855 res!14607) b!23863))

(assert (= (and b!23855 (not res!14614)) b!23854))

(assert (= (and b!23854 res!14613) b!23845))

(assert (= (and b!23855 res!14610) b!23846))

(assert (= (and b!23846 c!3130) b!23861))

(assert (= (and b!23846 (not c!3130)) b!23851))

(assert (= (and b!23861 res!14606) b!23850))

(assert (= (or b!23861 b!23851) bm!2052))

(assert (= (and b!23846 res!14611) b!23844))

(assert (= (and b!23844 c!3131) b!23847))

(assert (= (and b!23844 (not c!3131)) b!23849))

(assert (= (and b!23847 res!14609) b!23852))

(assert (= (or b!23847 b!23849) bm!2053))

(declare-fun b_lambda!1583 () Bool)

(assert (=> (not b_lambda!1583) (not b!23845)))

(assert (=> b!23845 t!3232))

(declare-fun b_and!1495 () Bool)

(assert (= b_and!1493 (and (=> t!3232 result!1093) b_and!1495)))

(assert (=> b!23854 m!16908))

(assert (=> b!23854 m!16908))

(declare-fun m!17727 () Bool)

(assert (=> b!23854 m!17727))

(declare-fun m!17729 () Bool)

(assert (=> b!23853 m!17729))

(assert (=> b!23845 m!16914))

(assert (=> b!23845 m!16916))

(assert (=> b!23845 m!16918))

(assert (=> b!23845 m!16908))

(declare-fun m!17731 () Bool)

(assert (=> b!23845 m!17731))

(assert (=> b!23845 m!16908))

(assert (=> b!23845 m!16914))

(assert (=> b!23845 m!16916))

(assert (=> b!23862 m!16908))

(assert (=> b!23862 m!16908))

(assert (=> b!23862 m!16922))

(declare-fun m!17733 () Bool)

(assert (=> bm!2051 m!17733))

(assert (=> b!23863 m!16908))

(assert (=> b!23863 m!16908))

(assert (=> b!23863 m!16922))

(declare-fun m!17735 () Bool)

(assert (=> bm!2052 m!17735))

(declare-fun m!17737 () Bool)

(assert (=> b!23852 m!17737))

(declare-fun m!17739 () Bool)

(assert (=> bm!2053 m!17739))

(declare-fun m!17741 () Bool)

(assert (=> b!23850 m!17741))

(declare-fun m!17743 () Bool)

(assert (=> bm!2056 m!17743))

(assert (=> d!4119 m!16878))

(declare-fun m!17745 () Bool)

(assert (=> b!23857 m!17745))

(declare-fun m!17747 () Bool)

(assert (=> b!23857 m!17747))

(declare-fun m!17749 () Bool)

(assert (=> b!23857 m!17749))

(declare-fun m!17751 () Bool)

(assert (=> b!23857 m!17751))

(declare-fun m!17753 () Bool)

(assert (=> b!23857 m!17753))

(assert (=> b!23857 m!17743))

(assert (=> b!23857 m!17747))

(assert (=> b!23857 m!16908))

(declare-fun m!17755 () Bool)

(assert (=> b!23857 m!17755))

(declare-fun m!17757 () Bool)

(assert (=> b!23857 m!17757))

(declare-fun m!17759 () Bool)

(assert (=> b!23857 m!17759))

(assert (=> b!23857 m!17757))

(declare-fun m!17761 () Bool)

(assert (=> b!23857 m!17761))

(declare-fun m!17763 () Bool)

(assert (=> b!23857 m!17763))

(declare-fun m!17765 () Bool)

(assert (=> b!23857 m!17765))

(declare-fun m!17767 () Bool)

(assert (=> b!23857 m!17767))

(assert (=> b!23857 m!17767))

(declare-fun m!17769 () Bool)

(assert (=> b!23857 m!17769))

(assert (=> b!23857 m!17763))

(declare-fun m!17771 () Bool)

(assert (=> b!23857 m!17771))

(declare-fun m!17773 () Bool)

(assert (=> b!23857 m!17773))

(assert (=> b!23789 d!4119))

(declare-fun b!23864 () Bool)

(declare-fun e!15471 () ListLongMap!565)

(declare-fun call!2062 () ListLongMap!565)

(assert (=> b!23864 (= e!15471 call!2062)))

(declare-fun bm!2057 () Bool)

(declare-fun call!2063 () ListLongMap!565)

(declare-fun call!2065 () ListLongMap!565)

(assert (=> bm!2057 (= call!2063 call!2065)))

(declare-fun b!23865 () Bool)

(declare-fun e!15467 () Bool)

(declare-fun e!15475 () Bool)

(assert (=> b!23865 (= e!15467 e!15475)))

(declare-fun c!3137 () Bool)

(assert (=> b!23865 (= c!3137 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun e!15466 () Bool)

(declare-fun lt!8846 () ListLongMap!565)

(declare-fun b!23866 () Bool)

(assert (=> b!23866 (= e!15466 (= (apply!29 lt!8846 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23866 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))))))

(assert (=> b!23866 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun call!2061 () ListLongMap!565)

(declare-fun c!3138 () Bool)

(declare-fun bm!2058 () Bool)

(declare-fun c!3139 () Bool)

(declare-fun call!2064 () ListLongMap!565)

(assert (=> bm!2058 (= call!2065 (+!45 (ite c!3138 call!2064 (ite c!3139 call!2061 call!2062)) (ite (or c!3138 c!3139) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun b!23867 () Bool)

(declare-fun res!14620 () Bool)

(assert (=> b!23867 (=> (not res!14620) (not e!15467))))

(declare-fun e!15472 () Bool)

(assert (=> b!23867 (= res!14620 e!15472)))

(declare-fun c!3136 () Bool)

(assert (=> b!23867 (= c!3136 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2059 () Bool)

(declare-fun call!2060 () Bool)

(assert (=> bm!2059 (= call!2060 (contains!230 lt!8846 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23868 () Bool)

(declare-fun e!15464 () Bool)

(assert (=> b!23868 (= e!15475 e!15464)))

(declare-fun res!14618 () Bool)

(declare-fun call!2066 () Bool)

(assert (=> b!23868 (= res!14618 call!2066)))

(assert (=> b!23868 (=> (not res!14618) (not e!15464))))

(declare-fun b!23869 () Bool)

(declare-fun e!15470 () Unit!519)

(declare-fun Unit!552 () Unit!519)

(assert (=> b!23869 (= e!15470 Unit!552)))

(declare-fun b!23870 () Bool)

(assert (=> b!23870 (= e!15475 (not call!2066))))

(declare-fun b!23871 () Bool)

(declare-fun e!15473 () Bool)

(assert (=> b!23871 (= e!15473 (= (apply!29 lt!8846 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!487 lt!8138))))))

(declare-fun bm!2060 () Bool)

(assert (=> bm!2060 (= call!2066 (contains!230 lt!8846 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23872 () Bool)

(assert (=> b!23872 (= e!15472 (not call!2060))))

(declare-fun d!4121 () Bool)

(assert (=> d!4121 e!15467))

(declare-fun res!14617 () Bool)

(assert (=> d!4121 (=> (not res!14617) (not e!15467))))

(assert (=> d!4121 (= res!14617 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun lt!8861 () ListLongMap!565)

(assert (=> d!4121 (= lt!8846 lt!8861)))

(declare-fun lt!8853 () Unit!519)

(assert (=> d!4121 (= lt!8853 e!15470)))

(declare-fun c!3140 () Bool)

(declare-fun e!15474 () Bool)

(assert (=> d!4121 (= c!3140 e!15474)))

(declare-fun res!14621 () Bool)

(assert (=> d!4121 (=> (not res!14621) (not e!15474))))

(assert (=> d!4121 (= res!14621 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun e!15468 () ListLongMap!565)

(assert (=> d!4121 (= lt!8861 e!15468)))

(assert (=> d!4121 (= c!3138 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4121 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4121 (= (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!8846)))

(declare-fun b!23873 () Bool)

(assert (=> b!23873 (= e!15464 (= (apply!29 lt!8846 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!487 lt!8138))))))

(declare-fun b!23874 () Bool)

(assert (=> b!23874 (= e!15468 (+!45 call!2065 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))

(declare-fun b!23875 () Bool)

(declare-fun e!15469 () Bool)

(assert (=> b!23875 (= e!15469 e!15466)))

(declare-fun res!14622 () Bool)

(assert (=> b!23875 (=> (not res!14622) (not e!15466))))

(assert (=> b!23875 (= res!14622 (contains!230 lt!8846 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!23875 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23876 () Bool)

(declare-fun res!14619 () Bool)

(assert (=> b!23876 (=> (not res!14619) (not e!15467))))

(assert (=> b!23876 (= res!14619 e!15469)))

(declare-fun res!14623 () Bool)

(assert (=> b!23876 (=> res!14623 e!15469)))

(declare-fun e!15465 () Bool)

(assert (=> b!23876 (= res!14623 (not e!15465))))

(declare-fun res!14616 () Bool)

(assert (=> b!23876 (=> (not res!14616) (not e!15465))))

(assert (=> b!23876 (= res!14616 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23877 () Bool)

(assert (=> b!23877 (= e!15471 call!2063)))

(declare-fun b!23878 () Bool)

(declare-fun lt!8843 () Unit!519)

(assert (=> b!23878 (= e!15470 lt!8843)))

(declare-fun lt!8857 () ListLongMap!565)

(assert (=> b!23878 (= lt!8857 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8842 () (_ BitVec 64))

(assert (=> b!23878 (= lt!8842 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8856 () (_ BitVec 64))

(assert (=> b!23878 (= lt!8856 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8862 () Unit!519)

(assert (=> b!23878 (= lt!8862 (addStillContains!14 lt!8857 lt!8842 (zeroValue!1665 (_2!487 lt!8138)) lt!8856))))

(assert (=> b!23878 (contains!230 (+!45 lt!8857 (tuple2!971 lt!8842 (zeroValue!1665 (_2!487 lt!8138)))) lt!8856)))

(declare-fun lt!8859 () Unit!519)

(assert (=> b!23878 (= lt!8859 lt!8862)))

(declare-fun lt!8863 () ListLongMap!565)

(assert (=> b!23878 (= lt!8863 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8852 () (_ BitVec 64))

(assert (=> b!23878 (= lt!8852 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8848 () (_ BitVec 64))

(assert (=> b!23878 (= lt!8848 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8854 () Unit!519)

(assert (=> b!23878 (= lt!8854 (addApplyDifferent!14 lt!8863 lt!8852 (minValue!1665 (_2!487 lt!8138)) lt!8848))))

(assert (=> b!23878 (= (apply!29 (+!45 lt!8863 (tuple2!971 lt!8852 (minValue!1665 (_2!487 lt!8138)))) lt!8848) (apply!29 lt!8863 lt!8848))))

(declare-fun lt!8844 () Unit!519)

(assert (=> b!23878 (= lt!8844 lt!8854)))

(declare-fun lt!8855 () ListLongMap!565)

(assert (=> b!23878 (= lt!8855 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8849 () (_ BitVec 64))

(assert (=> b!23878 (= lt!8849 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8851 () (_ BitVec 64))

(assert (=> b!23878 (= lt!8851 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!8850 () Unit!519)

(assert (=> b!23878 (= lt!8850 (addApplyDifferent!14 lt!8855 lt!8849 (zeroValue!1665 (_2!487 lt!8138)) lt!8851))))

(assert (=> b!23878 (= (apply!29 (+!45 lt!8855 (tuple2!971 lt!8849 (zeroValue!1665 (_2!487 lt!8138)))) lt!8851) (apply!29 lt!8855 lt!8851))))

(declare-fun lt!8845 () Unit!519)

(assert (=> b!23878 (= lt!8845 lt!8850)))

(declare-fun lt!8860 () ListLongMap!565)

(assert (=> b!23878 (= lt!8860 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!8858 () (_ BitVec 64))

(assert (=> b!23878 (= lt!8858 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8847 () (_ BitVec 64))

(assert (=> b!23878 (= lt!8847 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(assert (=> b!23878 (= lt!8843 (addApplyDifferent!14 lt!8860 lt!8858 (minValue!1665 (_2!487 lt!8138)) lt!8847))))

(assert (=> b!23878 (= (apply!29 (+!45 lt!8860 (tuple2!971 lt!8858 (minValue!1665 (_2!487 lt!8138)))) lt!8847) (apply!29 lt!8860 lt!8847))))

(declare-fun b!23879 () Bool)

(declare-fun e!15463 () ListLongMap!565)

(assert (=> b!23879 (= e!15463 call!2063)))

(declare-fun b!23880 () Bool)

(assert (=> b!23880 (= e!15468 e!15463)))

(assert (=> b!23880 (= c!3139 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!23881 () Bool)

(declare-fun c!3141 () Bool)

(assert (=> b!23881 (= c!3141 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!23881 (= e!15463 e!15471)))

(declare-fun bm!2061 () Bool)

(assert (=> bm!2061 (= call!2062 call!2061)))

(declare-fun bm!2062 () Bool)

(assert (=> bm!2062 (= call!2061 call!2064)))

(declare-fun b!23882 () Bool)

(assert (=> b!23882 (= e!15472 e!15473)))

(declare-fun res!14615 () Bool)

(assert (=> b!23882 (= res!14615 call!2060)))

(assert (=> b!23882 (=> (not res!14615) (not e!15473))))

(declare-fun b!23883 () Bool)

(assert (=> b!23883 (= e!15474 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun bm!2063 () Bool)

(assert (=> bm!2063 (= call!2064 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!23884 () Bool)

(assert (=> b!23884 (= e!15465 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (= (and d!4121 c!3138) b!23874))

(assert (= (and d!4121 (not c!3138)) b!23880))

(assert (= (and b!23880 c!3139) b!23879))

(assert (= (and b!23880 (not c!3139)) b!23881))

(assert (= (and b!23881 c!3141) b!23877))

(assert (= (and b!23881 (not c!3141)) b!23864))

(assert (= (or b!23877 b!23864) bm!2061))

(assert (= (or b!23879 bm!2061) bm!2062))

(assert (= (or b!23879 b!23877) bm!2057))

(assert (= (or b!23874 bm!2062) bm!2063))

(assert (= (or b!23874 bm!2057) bm!2058))

(assert (= (and d!4121 res!14621) b!23883))

(assert (= (and d!4121 c!3140) b!23878))

(assert (= (and d!4121 (not c!3140)) b!23869))

(assert (= (and d!4121 res!14617) b!23876))

(assert (= (and b!23876 res!14616) b!23884))

(assert (= (and b!23876 (not res!14623)) b!23875))

(assert (= (and b!23875 res!14622) b!23866))

(assert (= (and b!23876 res!14619) b!23867))

(assert (= (and b!23867 c!3136) b!23882))

(assert (= (and b!23867 (not c!3136)) b!23872))

(assert (= (and b!23882 res!14615) b!23871))

(assert (= (or b!23882 b!23872) bm!2059))

(assert (= (and b!23867 res!14620) b!23865))

(assert (= (and b!23865 c!3137) b!23868))

(assert (= (and b!23865 (not c!3137)) b!23870))

(assert (= (and b!23868 res!14618) b!23873))

(assert (= (or b!23868 b!23870) bm!2060))

(declare-fun b_lambda!1585 () Bool)

(assert (=> (not b_lambda!1585) (not b!23866)))

(assert (=> b!23866 t!3232))

(declare-fun b_and!1497 () Bool)

(assert (= b_and!1495 (and (=> t!3232 result!1093) b_and!1497)))

(assert (=> b!23875 m!16908))

(assert (=> b!23875 m!16908))

(declare-fun m!17775 () Bool)

(assert (=> b!23875 m!17775))

(declare-fun m!17777 () Bool)

(assert (=> b!23874 m!17777))

(declare-fun m!17779 () Bool)

(assert (=> b!23866 m!17779))

(assert (=> b!23866 m!16916))

(declare-fun m!17781 () Bool)

(assert (=> b!23866 m!17781))

(assert (=> b!23866 m!16908))

(declare-fun m!17783 () Bool)

(assert (=> b!23866 m!17783))

(assert (=> b!23866 m!16908))

(assert (=> b!23866 m!17779))

(assert (=> b!23866 m!16916))

(assert (=> b!23883 m!16908))

(assert (=> b!23883 m!16908))

(assert (=> b!23883 m!16922))

(declare-fun m!17785 () Bool)

(assert (=> bm!2058 m!17785))

(assert (=> b!23884 m!16908))

(assert (=> b!23884 m!16908))

(assert (=> b!23884 m!16922))

(declare-fun m!17787 () Bool)

(assert (=> bm!2059 m!17787))

(declare-fun m!17789 () Bool)

(assert (=> b!23873 m!17789))

(declare-fun m!17791 () Bool)

(assert (=> bm!2060 m!17791))

(declare-fun m!17793 () Bool)

(assert (=> b!23871 m!17793))

(declare-fun m!17795 () Bool)

(assert (=> bm!2063 m!17795))

(assert (=> d!4121 m!16878))

(declare-fun m!17797 () Bool)

(assert (=> b!23878 m!17797))

(declare-fun m!17799 () Bool)

(assert (=> b!23878 m!17799))

(declare-fun m!17801 () Bool)

(assert (=> b!23878 m!17801))

(declare-fun m!17803 () Bool)

(assert (=> b!23878 m!17803))

(declare-fun m!17805 () Bool)

(assert (=> b!23878 m!17805))

(assert (=> b!23878 m!17795))

(assert (=> b!23878 m!17799))

(assert (=> b!23878 m!16908))

(declare-fun m!17807 () Bool)

(assert (=> b!23878 m!17807))

(declare-fun m!17809 () Bool)

(assert (=> b!23878 m!17809))

(declare-fun m!17811 () Bool)

(assert (=> b!23878 m!17811))

(assert (=> b!23878 m!17809))

(declare-fun m!17813 () Bool)

(assert (=> b!23878 m!17813))

(declare-fun m!17815 () Bool)

(assert (=> b!23878 m!17815))

(declare-fun m!17817 () Bool)

(assert (=> b!23878 m!17817))

(declare-fun m!17819 () Bool)

(assert (=> b!23878 m!17819))

(assert (=> b!23878 m!17819))

(declare-fun m!17821 () Bool)

(assert (=> b!23878 m!17821))

(assert (=> b!23878 m!17815))

(declare-fun m!17823 () Bool)

(assert (=> b!23878 m!17823))

(declare-fun m!17825 () Bool)

(assert (=> b!23878 m!17825))

(assert (=> b!23789 d!4121))

(declare-fun d!4123 () Bool)

(assert (=> d!4123 (= (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (and (not (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23497 d!4123))

(declare-fun b!23909 () Bool)

(declare-fun res!14632 () Bool)

(declare-fun e!15490 () Bool)

(assert (=> b!23909 (=> (not res!14632) (not e!15490))))

(declare-fun lt!8879 () ListLongMap!565)

(assert (=> b!23909 (= res!14632 (not (contains!230 lt!8879 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23910 () Bool)

(assert (=> b!23910 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> b!23910 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))))))))

(declare-fun e!15491 () Bool)

(assert (=> b!23910 (= e!15491 (= (apply!29 lt!8879 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!23911 () Bool)

(declare-fun lt!8881 () Unit!519)

(declare-fun lt!8883 () Unit!519)

(assert (=> b!23911 (= lt!8881 lt!8883)))

(declare-fun lt!8884 () V!1187)

(declare-fun lt!8882 () (_ BitVec 64))

(declare-fun lt!8880 () ListLongMap!565)

(declare-fun lt!8878 () (_ BitVec 64))

(assert (=> b!23911 (not (contains!230 (+!45 lt!8880 (tuple2!971 lt!8882 lt!8884)) lt!8878))))

(declare-fun addStillNotContains!2 (ListLongMap!565 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!519)

(assert (=> b!23911 (= lt!8883 (addStillNotContains!2 lt!8880 lt!8882 lt!8884 lt!8878))))

(assert (=> b!23911 (= lt!8878 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!23911 (= lt!8884 (get!390 (select (arr!596 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23911 (= lt!8882 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun call!2069 () ListLongMap!565)

(assert (=> b!23911 (= lt!8880 call!2069)))

(declare-fun e!15495 () ListLongMap!565)

(assert (=> b!23911 (= e!15495 (+!45 call!2069 (tuple2!971 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (get!390 (select (arr!596 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!15492 () Bool)

(declare-fun b!23912 () Bool)

(assert (=> b!23912 (= e!15492 (= lt!8879 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141))))))

(declare-fun b!23913 () Bool)

(assert (=> b!23913 (= e!15495 call!2069)))

(declare-fun b!23914 () Bool)

(declare-fun e!15494 () Bool)

(assert (=> b!23914 (= e!15494 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23914 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!4125 () Bool)

(assert (=> d!4125 e!15490))

(declare-fun res!14635 () Bool)

(assert (=> d!4125 (=> (not res!14635) (not e!15490))))

(assert (=> d!4125 (= res!14635 (not (contains!230 lt!8879 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15496 () ListLongMap!565)

(assert (=> d!4125 (= lt!8879 e!15496)))

(declare-fun c!3153 () Bool)

(assert (=> d!4125 (= c!3153 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4125 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4125 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8879)))

(declare-fun b!23915 () Bool)

(assert (=> b!23915 (= e!15496 e!15495)))

(declare-fun c!3151 () Bool)

(assert (=> b!23915 (= c!3151 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!23916 () Bool)

(declare-fun isEmpty!172 (ListLongMap!565) Bool)

(assert (=> b!23916 (= e!15492 (isEmpty!172 lt!8879))))

(declare-fun b!23917 () Bool)

(declare-fun e!15493 () Bool)

(assert (=> b!23917 (= e!15493 e!15491)))

(assert (=> b!23917 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14633 () Bool)

(assert (=> b!23917 (= res!14633 (contains!230 lt!8879 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23917 (=> (not res!14633) (not e!15491))))

(declare-fun bm!2066 () Bool)

(assert (=> bm!2066 (= call!2069 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141)))))

(declare-fun b!23918 () Bool)

(assert (=> b!23918 (= e!15493 e!15492)))

(declare-fun c!3152 () Bool)

(assert (=> b!23918 (= c!3152 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23919 () Bool)

(assert (=> b!23919 (= e!15496 (ListLongMap!566 Nil!562))))

(declare-fun b!23920 () Bool)

(assert (=> b!23920 (= e!15490 e!15493)))

(declare-fun c!3150 () Bool)

(assert (=> b!23920 (= c!3150 e!15494)))

(declare-fun res!14634 () Bool)

(assert (=> b!23920 (=> (not res!14634) (not e!15494))))

(assert (=> b!23920 (= res!14634 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (= (and d!4125 c!3153) b!23919))

(assert (= (and d!4125 (not c!3153)) b!23915))

(assert (= (and b!23915 c!3151) b!23911))

(assert (= (and b!23915 (not c!3151)) b!23913))

(assert (= (or b!23911 b!23913) bm!2066))

(assert (= (and d!4125 res!14635) b!23909))

(assert (= (and b!23909 res!14632) b!23920))

(assert (= (and b!23920 res!14634) b!23914))

(assert (= (and b!23920 c!3150) b!23917))

(assert (= (and b!23920 (not c!3150)) b!23918))

(assert (= (and b!23917 res!14633) b!23910))

(assert (= (and b!23918 c!3152) b!23912))

(assert (= (and b!23918 (not c!3152)) b!23916))

(declare-fun b_lambda!1587 () Bool)

(assert (=> (not b_lambda!1587) (not b!23910)))

(assert (=> b!23910 t!3234))

(declare-fun b_and!1499 () Bool)

(assert (= b_and!1497 (and (=> t!3234 result!1095) b_and!1499)))

(declare-fun b_lambda!1589 () Bool)

(assert (=> (not b_lambda!1589) (not b!23911)))

(assert (=> b!23911 t!3234))

(declare-fun b_and!1501 () Bool)

(assert (= b_and!1499 (and (=> t!3234 result!1095) b_and!1501)))

(assert (=> b!23915 m!17198))

(assert (=> b!23915 m!17198))

(assert (=> b!23915 m!17310))

(assert (=> b!23910 m!17304))

(assert (=> b!23910 m!17198))

(declare-fun m!17827 () Bool)

(assert (=> b!23910 m!17827))

(assert (=> b!23910 m!17198))

(assert (=> b!23910 m!17501))

(assert (=> b!23910 m!17304))

(assert (=> b!23910 m!17503))

(assert (=> b!23910 m!17501))

(declare-fun m!17829 () Bool)

(assert (=> b!23912 m!17829))

(assert (=> b!23914 m!17198))

(assert (=> b!23914 m!17198))

(assert (=> b!23914 m!17310))

(declare-fun m!17831 () Bool)

(assert (=> b!23916 m!17831))

(assert (=> b!23917 m!17198))

(assert (=> b!23917 m!17198))

(declare-fun m!17833 () Bool)

(assert (=> b!23917 m!17833))

(declare-fun m!17835 () Bool)

(assert (=> b!23909 m!17835))

(assert (=> bm!2066 m!17829))

(assert (=> b!23911 m!17304))

(declare-fun m!17837 () Bool)

(assert (=> b!23911 m!17837))

(declare-fun m!17839 () Bool)

(assert (=> b!23911 m!17839))

(assert (=> b!23911 m!17198))

(assert (=> b!23911 m!17837))

(declare-fun m!17841 () Bool)

(assert (=> b!23911 m!17841))

(assert (=> b!23911 m!17501))

(assert (=> b!23911 m!17304))

(assert (=> b!23911 m!17503))

(assert (=> b!23911 m!17501))

(declare-fun m!17843 () Bool)

(assert (=> b!23911 m!17843))

(declare-fun m!17845 () Bool)

(assert (=> d!4125 m!17845))

(assert (=> d!4125 m!17050))

(assert (=> bm!2037 d!4125))

(declare-fun d!4127 () Bool)

(declare-fun e!15498 () Bool)

(assert (=> d!4127 e!15498))

(declare-fun res!14636 () Bool)

(assert (=> d!4127 (=> res!14636 e!15498)))

(declare-fun lt!8888 () Bool)

(assert (=> d!4127 (= res!14636 (not lt!8888))))

(declare-fun lt!8887 () Bool)

(assert (=> d!4127 (= lt!8888 lt!8887)))

(declare-fun lt!8886 () Unit!519)

(declare-fun e!15497 () Unit!519)

(assert (=> d!4127 (= lt!8886 e!15497)))

(declare-fun c!3154 () Bool)

(assert (=> d!4127 (= c!3154 lt!8887)))

(assert (=> d!4127 (= lt!8887 (containsKey!24 (toList!298 lt!8427) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4127 (= (contains!230 lt!8427 #b1000000000000000000000000000000000000000000000000000000000000000) lt!8888)))

(declare-fun b!23921 () Bool)

(declare-fun lt!8885 () Unit!519)

(assert (=> b!23921 (= e!15497 lt!8885)))

(assert (=> b!23921 (= lt!8885 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8427) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!23921 (isDefined!22 (getValueByKey!60 (toList!298 lt!8427) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23922 () Bool)

(declare-fun Unit!553 () Unit!519)

(assert (=> b!23922 (= e!15497 Unit!553)))

(declare-fun b!23923 () Bool)

(assert (=> b!23923 (= e!15498 (isDefined!22 (getValueByKey!60 (toList!298 lt!8427) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4127 c!3154) b!23921))

(assert (= (and d!4127 (not c!3154)) b!23922))

(assert (= (and d!4127 (not res!14636)) b!23923))

(declare-fun m!17847 () Bool)

(assert (=> d!4127 m!17847))

(declare-fun m!17849 () Bool)

(assert (=> b!23921 m!17849))

(declare-fun m!17851 () Bool)

(assert (=> b!23921 m!17851))

(assert (=> b!23921 m!17851))

(declare-fun m!17853 () Bool)

(assert (=> b!23921 m!17853))

(assert (=> b!23923 m!17851))

(assert (=> b!23923 m!17851))

(assert (=> b!23923 m!17853))

(assert (=> bm!1979 d!4127))

(declare-fun b!23924 () Bool)

(declare-fun e!15499 () Bool)

(declare-fun call!2070 () Bool)

(assert (=> b!23924 (= e!15499 call!2070)))

(declare-fun b!23925 () Bool)

(declare-fun e!15501 () Bool)

(assert (=> b!23925 (= e!15501 call!2070)))

(declare-fun b!23926 () Bool)

(declare-fun e!15500 () Bool)

(assert (=> b!23926 (= e!15500 e!15499)))

(declare-fun c!3155 () Bool)

(assert (=> b!23926 (= c!3155 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)))))

(declare-fun d!4129 () Bool)

(declare-fun res!14638 () Bool)

(assert (=> d!4129 (=> res!14638 e!15500)))

(assert (=> d!4129 (= res!14638 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))))))

(assert (=> d!4129 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234))) e!15500)))

(declare-fun bm!2067 () Bool)

(assert (=> bm!2067 (= call!2070 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234))))))

(declare-fun b!23927 () Bool)

(assert (=> b!23927 (= e!15499 e!15501)))

(declare-fun lt!8889 () (_ BitVec 64))

(assert (=> b!23927 (= lt!8889 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000))))

(declare-fun lt!8891 () Unit!519)

(assert (=> b!23927 (= lt!8891 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 (_2!487 lt!8234)) lt!8889 #b00000000000000000000000000000000))))

(assert (=> b!23927 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8234)) lt!8889 #b00000000000000000000000000000000)))

(declare-fun lt!8890 () Unit!519)

(assert (=> b!23927 (= lt!8890 lt!8891)))

(declare-fun res!14637 () Bool)

(assert (=> b!23927 (= res!14637 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000) (_keys!3163 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234))) (Found!55 #b00000000000000000000000000000000)))))

(assert (=> b!23927 (=> (not res!14637) (not e!15501))))

(assert (= (and d!4129 (not res!14638)) b!23926))

(assert (= (and b!23926 c!3155) b!23927))

(assert (= (and b!23926 (not c!3155)) b!23924))

(assert (= (and b!23927 res!14637) b!23925))

(assert (= (or b!23925 b!23924) bm!2067))

(declare-fun m!17855 () Bool)

(assert (=> b!23926 m!17855))

(assert (=> b!23926 m!17855))

(declare-fun m!17857 () Bool)

(assert (=> b!23926 m!17857))

(declare-fun m!17859 () Bool)

(assert (=> bm!2067 m!17859))

(assert (=> b!23927 m!17855))

(declare-fun m!17861 () Bool)

(assert (=> b!23927 m!17861))

(declare-fun m!17863 () Bool)

(assert (=> b!23927 m!17863))

(assert (=> b!23927 m!17855))

(declare-fun m!17865 () Bool)

(assert (=> b!23927 m!17865))

(assert (=> b!23395 d!4129))

(declare-fun d!4131 () Bool)

(assert (=> d!4131 (= (apply!29 lt!8770 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8770) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!964 () Bool)

(assert (= bs!964 d!4131))

(declare-fun m!17867 () Bool)

(assert (=> bs!964 m!17867))

(assert (=> bs!964 m!17867))

(declare-fun m!17869 () Bool)

(assert (=> bs!964 m!17869))

(assert (=> b!23776 d!4131))

(declare-fun d!4133 () Bool)

(assert (=> d!4133 (isDefined!22 (getValueByKey!60 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!8894 () Unit!519)

(declare-fun choose!210 (List!565 (_ BitVec 64)) Unit!519)

(assert (=> d!4133 (= lt!8894 (choose!210 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15504 () Bool)

(assert (=> d!4133 e!15504))

(declare-fun res!14641 () Bool)

(assert (=> d!4133 (=> (not res!14641) (not e!15504))))

(declare-fun isStrictlySorted!165 (List!565) Bool)

(assert (=> d!4133 (= res!14641 (isStrictlySorted!165 (toList!298 call!1958)))))

(assert (=> d!4133 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000) lt!8894)))

(declare-fun b!23930 () Bool)

(assert (=> b!23930 (= e!15504 (containsKey!24 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4133 res!14641) b!23930))

(assert (=> d!4133 m!16888))

(assert (=> d!4133 m!16888))

(assert (=> d!4133 m!16890))

(declare-fun m!17871 () Bool)

(assert (=> d!4133 m!17871))

(declare-fun m!17873 () Bool)

(assert (=> d!4133 m!17873))

(assert (=> b!23930 m!16884))

(assert (=> b!23385 d!4133))

(declare-fun d!4135 () Bool)

(declare-fun isEmpty!173 (Option!66) Bool)

(assert (=> d!4135 (= (isDefined!22 (getValueByKey!60 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!173 (getValueByKey!60 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!965 () Bool)

(assert (= bs!965 d!4135))

(assert (=> bs!965 m!16888))

(declare-fun m!17875 () Bool)

(assert (=> bs!965 m!17875))

(assert (=> b!23385 d!4135))

(declare-fun b!23939 () Bool)

(declare-fun e!15509 () Option!66)

(assert (=> b!23939 (= e!15509 (Some!65 (_2!493 (h!1127 (toList!298 call!1958)))))))

(declare-fun b!23942 () Bool)

(declare-fun e!15510 () Option!66)

(assert (=> b!23942 (= e!15510 None!64)))

(declare-fun b!23941 () Bool)

(assert (=> b!23941 (= e!15510 (getValueByKey!60 (t!3229 (toList!298 call!1958)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!23940 () Bool)

(assert (=> b!23940 (= e!15509 e!15510)))

(declare-fun c!3161 () Bool)

(assert (=> b!23940 (= c!3161 (and ((_ is Cons!561) (toList!298 call!1958)) (not (= (_1!493 (h!1127 (toList!298 call!1958))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!4137 () Bool)

(declare-fun c!3160 () Bool)

(assert (=> d!4137 (= c!3160 (and ((_ is Cons!561) (toList!298 call!1958)) (= (_1!493 (h!1127 (toList!298 call!1958))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4137 (= (getValueByKey!60 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000) e!15509)))

(assert (= (and d!4137 c!3160) b!23939))

(assert (= (and d!4137 (not c!3160)) b!23940))

(assert (= (and b!23940 c!3161) b!23941))

(assert (= (and b!23940 (not c!3161)) b!23942))

(declare-fun m!17877 () Bool)

(assert (=> b!23941 m!17877))

(assert (=> b!23385 d!4137))

(declare-fun d!4139 () Bool)

(assert (=> d!4139 (= (apply!29 lt!8668 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8668) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!966 () Bool)

(assert (= bs!966 d!4139))

(declare-fun m!17879 () Bool)

(assert (=> bs!966 m!17879))

(assert (=> bs!966 m!17879))

(declare-fun m!17881 () Bool)

(assert (=> bs!966 m!17881))

(assert (=> b!23662 d!4139))

(declare-fun d!4141 () Bool)

(assert (=> d!4141 (= (apply!29 (+!45 lt!8436 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) lt!8432) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8436 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))) lt!8432)))))

(declare-fun bs!967 () Bool)

(assert (= bs!967 d!4141))

(declare-fun m!17883 () Bool)

(assert (=> bs!967 m!17883))

(assert (=> bs!967 m!17883))

(declare-fun m!17885 () Bool)

(assert (=> bs!967 m!17885))

(assert (=> b!23456 d!4141))

(declare-fun d!4143 () Bool)

(assert (=> d!4143 (= (apply!29 (+!45 lt!8444 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) lt!8429) (apply!29 lt!8444 lt!8429))))

(declare-fun lt!8897 () Unit!519)

(declare-fun choose!211 (ListLongMap!565 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!519)

(assert (=> d!4143 (= lt!8897 (choose!211 lt!8444 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) lt!8429))))

(declare-fun e!15513 () Bool)

(assert (=> d!4143 e!15513))

(declare-fun res!14644 () Bool)

(assert (=> d!4143 (=> (not res!14644) (not e!15513))))

(assert (=> d!4143 (= res!14644 (contains!230 lt!8444 lt!8429))))

(assert (=> d!4143 (= (addApplyDifferent!14 lt!8444 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) lt!8429) lt!8897)))

(declare-fun b!23946 () Bool)

(assert (=> b!23946 (= e!15513 (not (= lt!8429 lt!8433)))))

(assert (= (and d!4143 res!14644) b!23946))

(assert (=> d!4143 m!16964))

(declare-fun m!17887 () Bool)

(assert (=> d!4143 m!17887))

(assert (=> d!4143 m!16954))

(declare-fun m!17889 () Bool)

(assert (=> d!4143 m!17889))

(assert (=> d!4143 m!16954))

(assert (=> d!4143 m!16962))

(assert (=> b!23456 d!4143))

(declare-fun d!4145 () Bool)

(assert (=> d!4145 (= (apply!29 lt!8441 lt!8428) (get!391 (getValueByKey!60 (toList!298 lt!8441) lt!8428)))))

(declare-fun bs!968 () Bool)

(assert (= bs!968 d!4145))

(declare-fun m!17891 () Bool)

(assert (=> bs!968 m!17891))

(assert (=> bs!968 m!17891))

(declare-fun m!17893 () Bool)

(assert (=> bs!968 m!17893))

(assert (=> b!23456 d!4145))

(declare-fun d!4147 () Bool)

(assert (=> d!4147 (contains!230 (+!45 lt!8438 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) lt!8437)))

(declare-fun lt!8900 () Unit!519)

(declare-fun choose!212 (ListLongMap!565 (_ BitVec 64) V!1187 (_ BitVec 64)) Unit!519)

(assert (=> d!4147 (= lt!8900 (choose!212 lt!8438 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) lt!8437))))

(assert (=> d!4147 (contains!230 lt!8438 lt!8437)))

(assert (=> d!4147 (= (addStillContains!14 lt!8438 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) lt!8437) lt!8900)))

(declare-fun bs!969 () Bool)

(assert (= bs!969 d!4147))

(assert (=> bs!969 m!16958))

(assert (=> bs!969 m!16958))

(assert (=> bs!969 m!16960))

(declare-fun m!17895 () Bool)

(assert (=> bs!969 m!17895))

(declare-fun m!17897 () Bool)

(assert (=> bs!969 m!17897))

(assert (=> b!23456 d!4147))

(declare-fun d!4149 () Bool)

(declare-fun e!15515 () Bool)

(assert (=> d!4149 e!15515))

(declare-fun res!14645 () Bool)

(assert (=> d!4149 (=> res!14645 e!15515)))

(declare-fun lt!8904 () Bool)

(assert (=> d!4149 (= res!14645 (not lt!8904))))

(declare-fun lt!8903 () Bool)

(assert (=> d!4149 (= lt!8904 lt!8903)))

(declare-fun lt!8902 () Unit!519)

(declare-fun e!15514 () Unit!519)

(assert (=> d!4149 (= lt!8902 e!15514)))

(declare-fun c!3162 () Bool)

(assert (=> d!4149 (= c!3162 lt!8903)))

(assert (=> d!4149 (= lt!8903 (containsKey!24 (toList!298 (+!45 lt!8438 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))) lt!8437))))

(assert (=> d!4149 (= (contains!230 (+!45 lt!8438 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) lt!8437) lt!8904)))

(declare-fun b!23948 () Bool)

(declare-fun lt!8901 () Unit!519)

(assert (=> b!23948 (= e!15514 lt!8901)))

(assert (=> b!23948 (= lt!8901 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (+!45 lt!8438 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))) lt!8437))))

(assert (=> b!23948 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8438 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))) lt!8437))))

(declare-fun b!23949 () Bool)

(declare-fun Unit!554 () Unit!519)

(assert (=> b!23949 (= e!15514 Unit!554)))

(declare-fun b!23950 () Bool)

(assert (=> b!23950 (= e!15515 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8438 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))) lt!8437)))))

(assert (= (and d!4149 c!3162) b!23948))

(assert (= (and d!4149 (not c!3162)) b!23949))

(assert (= (and d!4149 (not res!14645)) b!23950))

(declare-fun m!17899 () Bool)

(assert (=> d!4149 m!17899))

(declare-fun m!17901 () Bool)

(assert (=> b!23948 m!17901))

(declare-fun m!17903 () Bool)

(assert (=> b!23948 m!17903))

(assert (=> b!23948 m!17903))

(declare-fun m!17905 () Bool)

(assert (=> b!23948 m!17905))

(assert (=> b!23950 m!17903))

(assert (=> b!23950 m!17903))

(assert (=> b!23950 m!17905))

(assert (=> b!23456 d!4149))

(declare-fun d!4151 () Bool)

(declare-fun e!15516 () Bool)

(assert (=> d!4151 e!15516))

(declare-fun res!14646 () Bool)

(assert (=> d!4151 (=> (not res!14646) (not e!15516))))

(declare-fun lt!8907 () ListLongMap!565)

(assert (=> d!4151 (= res!14646 (contains!230 lt!8907 (_1!493 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))))))

(declare-fun lt!8905 () List!565)

(assert (=> d!4151 (= lt!8907 (ListLongMap!566 lt!8905))))

(declare-fun lt!8906 () Unit!519)

(declare-fun lt!8908 () Unit!519)

(assert (=> d!4151 (= lt!8906 lt!8908)))

(assert (=> d!4151 (= (getValueByKey!60 lt!8905 (_1!493 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4151 (= lt!8908 (lemmaContainsTupThenGetReturnValue!18 lt!8905 (_1!493 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4151 (= lt!8905 (insertStrictlySorted!18 (toList!298 lt!8438) (_1!493 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4151 (= (+!45 lt!8438 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) lt!8907)))

(declare-fun b!23951 () Bool)

(declare-fun res!14647 () Bool)

(assert (=> b!23951 (=> (not res!14647) (not e!15516))))

(assert (=> b!23951 (= res!14647 (= (getValueByKey!60 (toList!298 lt!8907) (_1!493 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))))))))

(declare-fun b!23952 () Bool)

(assert (=> b!23952 (= e!15516 (contains!231 (toList!298 lt!8907) (tuple2!971 lt!8423 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (= (and d!4151 res!14646) b!23951))

(assert (= (and b!23951 res!14647) b!23952))

(declare-fun m!17907 () Bool)

(assert (=> d!4151 m!17907))

(declare-fun m!17909 () Bool)

(assert (=> d!4151 m!17909))

(declare-fun m!17911 () Bool)

(assert (=> d!4151 m!17911))

(declare-fun m!17913 () Bool)

(assert (=> d!4151 m!17913))

(declare-fun m!17915 () Bool)

(assert (=> b!23951 m!17915))

(declare-fun m!17917 () Bool)

(assert (=> b!23952 m!17917))

(assert (=> b!23456 d!4151))

(declare-fun d!4153 () Bool)

(assert (=> d!4153 (= (apply!29 (+!45 lt!8444 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) lt!8429) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8444 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) lt!8429)))))

(declare-fun bs!970 () Bool)

(assert (= bs!970 d!4153))

(declare-fun m!17919 () Bool)

(assert (=> bs!970 m!17919))

(assert (=> bs!970 m!17919))

(declare-fun m!17921 () Bool)

(assert (=> bs!970 m!17921))

(assert (=> b!23456 d!4153))

(declare-fun d!4155 () Bool)

(declare-fun e!15517 () Bool)

(assert (=> d!4155 e!15517))

(declare-fun res!14648 () Bool)

(assert (=> d!4155 (=> (not res!14648) (not e!15517))))

(declare-fun lt!8911 () ListLongMap!565)

(assert (=> d!4155 (= res!14648 (contains!230 lt!8911 (_1!493 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun lt!8909 () List!565)

(assert (=> d!4155 (= lt!8911 (ListLongMap!566 lt!8909))))

(declare-fun lt!8910 () Unit!519)

(declare-fun lt!8912 () Unit!519)

(assert (=> d!4155 (= lt!8910 lt!8912)))

(assert (=> d!4155 (= (getValueByKey!60 lt!8909 (_1!493 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4155 (= lt!8912 (lemmaContainsTupThenGetReturnValue!18 lt!8909 (_1!493 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4155 (= lt!8909 (insertStrictlySorted!18 (toList!298 lt!8444) (_1!493 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4155 (= (+!45 lt!8444 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) lt!8911)))

(declare-fun b!23953 () Bool)

(declare-fun res!14649 () Bool)

(assert (=> b!23953 (=> (not res!14649) (not e!15517))))

(assert (=> b!23953 (= res!14649 (= (getValueByKey!60 (toList!298 lt!8911) (_1!493 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))))

(declare-fun b!23954 () Bool)

(assert (=> b!23954 (= e!15517 (contains!231 (toList!298 lt!8911) (tuple2!971 lt!8433 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))

(assert (= (and d!4155 res!14648) b!23953))

(assert (= (and b!23953 res!14649) b!23954))

(declare-fun m!17923 () Bool)

(assert (=> d!4155 m!17923))

(declare-fun m!17925 () Bool)

(assert (=> d!4155 m!17925))

(declare-fun m!17927 () Bool)

(assert (=> d!4155 m!17927))

(declare-fun m!17929 () Bool)

(assert (=> d!4155 m!17929))

(declare-fun m!17931 () Bool)

(assert (=> b!23953 m!17931))

(declare-fun m!17933 () Bool)

(assert (=> b!23954 m!17933))

(assert (=> b!23456 d!4155))

(declare-fun b!23955 () Bool)

(declare-fun res!14650 () Bool)

(declare-fun e!15518 () Bool)

(assert (=> b!23955 (=> (not res!14650) (not e!15518))))

(declare-fun lt!8914 () ListLongMap!565)

(assert (=> b!23955 (= res!14650 (not (contains!230 lt!8914 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23956 () Bool)

(assert (=> b!23956 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> b!23956 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!487 lt!8138)))))))

(declare-fun e!15519 () Bool)

(assert (=> b!23956 (= e!15519 (= (apply!29 lt!8914 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!23957 () Bool)

(declare-fun lt!8916 () Unit!519)

(declare-fun lt!8918 () Unit!519)

(assert (=> b!23957 (= lt!8916 lt!8918)))

(declare-fun lt!8913 () (_ BitVec 64))

(declare-fun lt!8917 () (_ BitVec 64))

(declare-fun lt!8915 () ListLongMap!565)

(declare-fun lt!8919 () V!1187)

(assert (=> b!23957 (not (contains!230 (+!45 lt!8915 (tuple2!971 lt!8917 lt!8919)) lt!8913))))

(assert (=> b!23957 (= lt!8918 (addStillNotContains!2 lt!8915 lt!8917 lt!8919 lt!8913))))

(assert (=> b!23957 (= lt!8913 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!23957 (= lt!8919 (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23957 (= lt!8917 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun call!2071 () ListLongMap!565)

(assert (=> b!23957 (= lt!8915 call!2071)))

(declare-fun e!15523 () ListLongMap!565)

(assert (=> b!23957 (= e!15523 (+!45 call!2071 (tuple2!971 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000) (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!15520 () Bool)

(declare-fun b!23958 () Bool)

(assert (=> b!23958 (= e!15520 (= lt!8914 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!487 lt!8138)))))))

(declare-fun b!23959 () Bool)

(assert (=> b!23959 (= e!15523 call!2071)))

(declare-fun b!23960 () Bool)

(declare-fun e!15522 () Bool)

(assert (=> b!23960 (= e!15522 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!23960 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!4157 () Bool)

(assert (=> d!4157 e!15518))

(declare-fun res!14653 () Bool)

(assert (=> d!4157 (=> (not res!14653) (not e!15518))))

(assert (=> d!4157 (= res!14653 (not (contains!230 lt!8914 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15524 () ListLongMap!565)

(assert (=> d!4157 (= lt!8914 e!15524)))

(declare-fun c!3166 () Bool)

(assert (=> d!4157 (= c!3166 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> d!4157 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4157 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!8914)))

(declare-fun b!23961 () Bool)

(assert (=> b!23961 (= e!15524 e!15523)))

(declare-fun c!3164 () Bool)

(assert (=> b!23961 (= c!3164 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun b!23962 () Bool)

(assert (=> b!23962 (= e!15520 (isEmpty!172 lt!8914))))

(declare-fun b!23963 () Bool)

(declare-fun e!15521 () Bool)

(assert (=> b!23963 (= e!15521 e!15519)))

(assert (=> b!23963 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun res!14651 () Bool)

(assert (=> b!23963 (= res!14651 (contains!230 lt!8914 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!23963 (=> (not res!14651) (not e!15519))))

(declare-fun bm!2068 () Bool)

(assert (=> bm!2068 (= call!2071 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (ite c!2989 (ite c!2990 lt!8340 lt!8360) (extraKeys!1640 (_2!487 lt!8138))) (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!23964 () Bool)

(assert (=> b!23964 (= e!15521 e!15520)))

(declare-fun c!3165 () Bool)

(assert (=> b!23964 (= c!3165 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!23965 () Bool)

(assert (=> b!23965 (= e!15524 (ListLongMap!566 Nil!562))))

(declare-fun b!23966 () Bool)

(assert (=> b!23966 (= e!15518 e!15521)))

(declare-fun c!3163 () Bool)

(assert (=> b!23966 (= c!3163 e!15522)))

(declare-fun res!14652 () Bool)

(assert (=> b!23966 (=> (not res!14652) (not e!15522))))

(assert (=> b!23966 (= res!14652 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (= (and d!4157 c!3166) b!23965))

(assert (= (and d!4157 (not c!3166)) b!23961))

(assert (= (and b!23961 c!3164) b!23957))

(assert (= (and b!23961 (not c!3164)) b!23959))

(assert (= (or b!23957 b!23959) bm!2068))

(assert (= (and d!4157 res!14653) b!23955))

(assert (= (and b!23955 res!14650) b!23966))

(assert (= (and b!23966 res!14652) b!23960))

(assert (= (and b!23966 c!3163) b!23963))

(assert (= (and b!23966 (not c!3163)) b!23964))

(assert (= (and b!23963 res!14651) b!23956))

(assert (= (and b!23964 c!3165) b!23958))

(assert (= (and b!23964 (not c!3165)) b!23962))

(declare-fun b_lambda!1591 () Bool)

(assert (=> (not b_lambda!1591) (not b!23956)))

(assert (=> b!23956 t!3232))

(declare-fun b_and!1503 () Bool)

(assert (= b_and!1501 (and (=> t!3232 result!1093) b_and!1503)))

(declare-fun b_lambda!1593 () Bool)

(assert (=> (not b_lambda!1593) (not b!23957)))

(assert (=> b!23957 t!3232))

(declare-fun b_and!1505 () Bool)

(assert (= b_and!1503 (and (=> t!3232 result!1093) b_and!1505)))

(assert (=> b!23961 m!16908))

(assert (=> b!23961 m!16908))

(assert (=> b!23961 m!16922))

(assert (=> b!23956 m!16916))

(assert (=> b!23956 m!16908))

(declare-fun m!17935 () Bool)

(assert (=> b!23956 m!17935))

(assert (=> b!23956 m!16908))

(assert (=> b!23956 m!16914))

(assert (=> b!23956 m!16916))

(assert (=> b!23956 m!16918))

(assert (=> b!23956 m!16914))

(declare-fun m!17937 () Bool)

(assert (=> b!23958 m!17937))

(assert (=> b!23960 m!16908))

(assert (=> b!23960 m!16908))

(assert (=> b!23960 m!16922))

(declare-fun m!17939 () Bool)

(assert (=> b!23962 m!17939))

(assert (=> b!23963 m!16908))

(assert (=> b!23963 m!16908))

(declare-fun m!17941 () Bool)

(assert (=> b!23963 m!17941))

(declare-fun m!17943 () Bool)

(assert (=> b!23955 m!17943))

(assert (=> bm!2068 m!17937))

(assert (=> b!23957 m!16916))

(declare-fun m!17945 () Bool)

(assert (=> b!23957 m!17945))

(declare-fun m!17947 () Bool)

(assert (=> b!23957 m!17947))

(assert (=> b!23957 m!16908))

(assert (=> b!23957 m!17945))

(declare-fun m!17949 () Bool)

(assert (=> b!23957 m!17949))

(assert (=> b!23957 m!16914))

(assert (=> b!23957 m!16916))

(assert (=> b!23957 m!16918))

(assert (=> b!23957 m!16914))

(declare-fun m!17951 () Bool)

(assert (=> b!23957 m!17951))

(declare-fun m!17953 () Bool)

(assert (=> d!4157 m!17953))

(assert (=> d!4157 m!16878))

(assert (=> b!23456 d!4157))

(declare-fun d!4159 () Bool)

(assert (=> d!4159 (= (apply!29 (+!45 lt!8441 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) lt!8428) (apply!29 lt!8441 lt!8428))))

(declare-fun lt!8920 () Unit!519)

(assert (=> d!4159 (= lt!8920 (choose!211 lt!8441 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) lt!8428))))

(declare-fun e!15525 () Bool)

(assert (=> d!4159 e!15525))

(declare-fun res!14654 () Bool)

(assert (=> d!4159 (=> (not res!14654) (not e!15525))))

(assert (=> d!4159 (= res!14654 (contains!230 lt!8441 lt!8428))))

(assert (=> d!4159 (= (addApplyDifferent!14 lt!8441 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))) lt!8428) lt!8920)))

(declare-fun b!23967 () Bool)

(assert (=> b!23967 (= e!15525 (not (= lt!8428 lt!8439)))))

(assert (= (and d!4159 res!14654) b!23967))

(assert (=> d!4159 m!16944))

(declare-fun m!17955 () Bool)

(assert (=> d!4159 m!17955))

(assert (=> d!4159 m!16948))

(declare-fun m!17957 () Bool)

(assert (=> d!4159 m!17957))

(assert (=> d!4159 m!16948))

(assert (=> d!4159 m!16950))

(assert (=> b!23456 d!4159))

(declare-fun d!4161 () Bool)

(declare-fun e!15526 () Bool)

(assert (=> d!4161 e!15526))

(declare-fun res!14655 () Bool)

(assert (=> d!4161 (=> (not res!14655) (not e!15526))))

(declare-fun lt!8923 () ListLongMap!565)

(assert (=> d!4161 (= res!14655 (contains!230 lt!8923 (_1!493 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun lt!8921 () List!565)

(assert (=> d!4161 (= lt!8923 (ListLongMap!566 lt!8921))))

(declare-fun lt!8922 () Unit!519)

(declare-fun lt!8924 () Unit!519)

(assert (=> d!4161 (= lt!8922 lt!8924)))

(assert (=> d!4161 (= (getValueByKey!60 lt!8921 (_1!493 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4161 (= lt!8924 (lemmaContainsTupThenGetReturnValue!18 lt!8921 (_1!493 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4161 (= lt!8921 (insertStrictlySorted!18 (toList!298 lt!8441) (_1!493 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4161 (= (+!45 lt!8441 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) lt!8923)))

(declare-fun b!23968 () Bool)

(declare-fun res!14656 () Bool)

(assert (=> b!23968 (=> (not res!14656) (not e!15526))))

(assert (=> b!23968 (= res!14656 (= (getValueByKey!60 (toList!298 lt!8923) (_1!493 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))))

(declare-fun b!23969 () Bool)

(assert (=> b!23969 (= e!15526 (contains!231 (toList!298 lt!8923) (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))

(assert (= (and d!4161 res!14655) b!23968))

(assert (= (and b!23968 res!14656) b!23969))

(declare-fun m!17959 () Bool)

(assert (=> d!4161 m!17959))

(declare-fun m!17961 () Bool)

(assert (=> d!4161 m!17961))

(declare-fun m!17963 () Bool)

(assert (=> d!4161 m!17963))

(declare-fun m!17965 () Bool)

(assert (=> d!4161 m!17965))

(declare-fun m!17967 () Bool)

(assert (=> b!23968 m!17967))

(declare-fun m!17969 () Bool)

(assert (=> b!23969 m!17969))

(assert (=> b!23456 d!4161))

(declare-fun d!4163 () Bool)

(assert (=> d!4163 (= (apply!29 (+!45 lt!8436 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) lt!8432) (apply!29 lt!8436 lt!8432))))

(declare-fun lt!8925 () Unit!519)

(assert (=> d!4163 (= lt!8925 (choose!211 lt!8436 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) lt!8432))))

(declare-fun e!15527 () Bool)

(assert (=> d!4163 e!15527))

(declare-fun res!14657 () Bool)

(assert (=> d!4163 (=> (not res!14657) (not e!15527))))

(assert (=> d!4163 (= res!14657 (contains!230 lt!8436 lt!8432))))

(assert (=> d!4163 (= (addApplyDifferent!14 lt!8436 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))) lt!8432) lt!8925)))

(declare-fun b!23970 () Bool)

(assert (=> b!23970 (= e!15527 (not (= lt!8432 lt!8430)))))

(assert (= (and d!4163 res!14657) b!23970))

(assert (=> d!4163 m!16952))

(declare-fun m!17971 () Bool)

(assert (=> d!4163 m!17971))

(assert (=> d!4163 m!16938))

(declare-fun m!17973 () Bool)

(assert (=> d!4163 m!17973))

(assert (=> d!4163 m!16938))

(assert (=> d!4163 m!16940))

(assert (=> b!23456 d!4163))

(declare-fun d!4165 () Bool)

(assert (=> d!4165 (= (apply!29 lt!8436 lt!8432) (get!391 (getValueByKey!60 (toList!298 lt!8436) lt!8432)))))

(declare-fun bs!971 () Bool)

(assert (= bs!971 d!4165))

(declare-fun m!17975 () Bool)

(assert (=> bs!971 m!17975))

(assert (=> bs!971 m!17975))

(declare-fun m!17977 () Bool)

(assert (=> bs!971 m!17977))

(assert (=> b!23456 d!4165))

(declare-fun d!4167 () Bool)

(assert (=> d!4167 (= (apply!29 (+!45 lt!8441 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) lt!8428) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8441 (tuple2!971 lt!8439 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) lt!8428)))))

(declare-fun bs!972 () Bool)

(assert (= bs!972 d!4167))

(declare-fun m!17979 () Bool)

(assert (=> bs!972 m!17979))

(assert (=> bs!972 m!17979))

(declare-fun m!17981 () Bool)

(assert (=> bs!972 m!17981))

(assert (=> b!23456 d!4167))

(declare-fun d!4169 () Bool)

(declare-fun e!15528 () Bool)

(assert (=> d!4169 e!15528))

(declare-fun res!14658 () Bool)

(assert (=> d!4169 (=> (not res!14658) (not e!15528))))

(declare-fun lt!8928 () ListLongMap!565)

(assert (=> d!4169 (= res!14658 (contains!230 lt!8928 (_1!493 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))))))

(declare-fun lt!8926 () List!565)

(assert (=> d!4169 (= lt!8928 (ListLongMap!566 lt!8926))))

(declare-fun lt!8927 () Unit!519)

(declare-fun lt!8929 () Unit!519)

(assert (=> d!4169 (= lt!8927 lt!8929)))

(assert (=> d!4169 (= (getValueByKey!60 lt!8926 (_1!493 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4169 (= lt!8929 (lemmaContainsTupThenGetReturnValue!18 lt!8926 (_1!493 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4169 (= lt!8926 (insertStrictlySorted!18 (toList!298 lt!8436) (_1!493 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4169 (= (+!45 lt!8436 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))) lt!8928)))

(declare-fun b!23971 () Bool)

(declare-fun res!14659 () Bool)

(assert (=> b!23971 (=> (not res!14659) (not e!15528))))

(assert (=> b!23971 (= res!14659 (= (getValueByKey!60 (toList!298 lt!8928) (_1!493 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))))))))

(declare-fun b!23972 () Bool)

(assert (=> b!23972 (= e!15528 (contains!231 (toList!298 lt!8928) (tuple2!971 lt!8430 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (= (and d!4169 res!14658) b!23971))

(assert (= (and b!23971 res!14659) b!23972))

(declare-fun m!17983 () Bool)

(assert (=> d!4169 m!17983))

(declare-fun m!17985 () Bool)

(assert (=> d!4169 m!17985))

(declare-fun m!17987 () Bool)

(assert (=> d!4169 m!17987))

(declare-fun m!17989 () Bool)

(assert (=> d!4169 m!17989))

(declare-fun m!17991 () Bool)

(assert (=> b!23971 m!17991))

(declare-fun m!17993 () Bool)

(assert (=> b!23972 m!17993))

(assert (=> b!23456 d!4169))

(declare-fun d!4171 () Bool)

(assert (=> d!4171 (= (apply!29 lt!8444 lt!8429) (get!391 (getValueByKey!60 (toList!298 lt!8444) lt!8429)))))

(declare-fun bs!973 () Bool)

(assert (= bs!973 d!4171))

(declare-fun m!17995 () Bool)

(assert (=> bs!973 m!17995))

(assert (=> bs!973 m!17995))

(declare-fun m!17997 () Bool)

(assert (=> bs!973 m!17997))

(assert (=> b!23456 d!4171))

(declare-fun d!4173 () Bool)

(assert (=> d!4173 (= (apply!29 (+!45 lt!8677 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141))) lt!8673) (apply!29 lt!8677 lt!8673))))

(declare-fun lt!8930 () Unit!519)

(assert (=> d!4173 (= lt!8930 (choose!211 lt!8677 lt!8671 (zeroValue!1665 lt!8141) lt!8673))))

(declare-fun e!15529 () Bool)

(assert (=> d!4173 e!15529))

(declare-fun res!14660 () Bool)

(assert (=> d!4173 (=> (not res!14660) (not e!15529))))

(assert (=> d!4173 (= res!14660 (contains!230 lt!8677 lt!8673))))

(assert (=> d!4173 (= (addApplyDifferent!14 lt!8677 lt!8671 (zeroValue!1665 lt!8141) lt!8673) lt!8930)))

(declare-fun b!23973 () Bool)

(assert (=> b!23973 (= e!15529 (not (= lt!8673 lt!8671)))))

(assert (= (and d!4173 res!14660) b!23973))

(assert (=> d!4173 m!17340))

(declare-fun m!17999 () Bool)

(assert (=> d!4173 m!17999))

(assert (=> d!4173 m!17326))

(declare-fun m!18001 () Bool)

(assert (=> d!4173 m!18001))

(assert (=> d!4173 m!17326))

(assert (=> d!4173 m!17328))

(assert (=> b!23669 d!4173))

(declare-fun d!4175 () Bool)

(assert (=> d!4175 (= (apply!29 (+!45 lt!8685 (tuple2!971 lt!8674 (minValue!1665 lt!8141))) lt!8670) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8685 (tuple2!971 lt!8674 (minValue!1665 lt!8141)))) lt!8670)))))

(declare-fun bs!974 () Bool)

(assert (= bs!974 d!4175))

(declare-fun m!18003 () Bool)

(assert (=> bs!974 m!18003))

(assert (=> bs!974 m!18003))

(declare-fun m!18005 () Bool)

(assert (=> bs!974 m!18005))

(assert (=> b!23669 d!4175))

(declare-fun d!4177 () Bool)

(assert (=> d!4177 (contains!230 (+!45 lt!8679 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141))) lt!8678)))

(declare-fun lt!8931 () Unit!519)

(assert (=> d!4177 (= lt!8931 (choose!212 lt!8679 lt!8664 (zeroValue!1665 lt!8141) lt!8678))))

(assert (=> d!4177 (contains!230 lt!8679 lt!8678)))

(assert (=> d!4177 (= (addStillContains!14 lt!8679 lt!8664 (zeroValue!1665 lt!8141) lt!8678) lt!8931)))

(declare-fun bs!975 () Bool)

(assert (= bs!975 d!4177))

(assert (=> bs!975 m!17346))

(assert (=> bs!975 m!17346))

(assert (=> bs!975 m!17348))

(declare-fun m!18007 () Bool)

(assert (=> bs!975 m!18007))

(declare-fun m!18009 () Bool)

(assert (=> bs!975 m!18009))

(assert (=> b!23669 d!4177))

(declare-fun d!4179 () Bool)

(declare-fun e!15530 () Bool)

(assert (=> d!4179 e!15530))

(declare-fun res!14661 () Bool)

(assert (=> d!4179 (=> (not res!14661) (not e!15530))))

(declare-fun lt!8934 () ListLongMap!565)

(assert (=> d!4179 (= res!14661 (contains!230 lt!8934 (_1!493 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141)))))))

(declare-fun lt!8932 () List!565)

(assert (=> d!4179 (= lt!8934 (ListLongMap!566 lt!8932))))

(declare-fun lt!8933 () Unit!519)

(declare-fun lt!8935 () Unit!519)

(assert (=> d!4179 (= lt!8933 lt!8935)))

(assert (=> d!4179 (= (getValueByKey!60 lt!8932 (_1!493 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4179 (= lt!8935 (lemmaContainsTupThenGetReturnValue!18 lt!8932 (_1!493 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4179 (= lt!8932 (insertStrictlySorted!18 (toList!298 lt!8677) (_1!493 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4179 (= (+!45 lt!8677 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141))) lt!8934)))

(declare-fun b!23974 () Bool)

(declare-fun res!14662 () Bool)

(assert (=> b!23974 (=> (not res!14662) (not e!15530))))

(assert (=> b!23974 (= res!14662 (= (getValueByKey!60 (toList!298 lt!8934) (_1!493 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141))))))))

(declare-fun b!23975 () Bool)

(assert (=> b!23975 (= e!15530 (contains!231 (toList!298 lt!8934) (tuple2!971 lt!8671 (zeroValue!1665 lt!8141))))))

(assert (= (and d!4179 res!14661) b!23974))

(assert (= (and b!23974 res!14662) b!23975))

(declare-fun m!18011 () Bool)

(assert (=> d!4179 m!18011))

(declare-fun m!18013 () Bool)

(assert (=> d!4179 m!18013))

(declare-fun m!18015 () Bool)

(assert (=> d!4179 m!18015))

(declare-fun m!18017 () Bool)

(assert (=> d!4179 m!18017))

(declare-fun m!18019 () Bool)

(assert (=> b!23974 m!18019))

(declare-fun m!18021 () Bool)

(assert (=> b!23975 m!18021))

(assert (=> b!23669 d!4179))

(declare-fun d!4181 () Bool)

(declare-fun e!15531 () Bool)

(assert (=> d!4181 e!15531))

(declare-fun res!14663 () Bool)

(assert (=> d!4181 (=> (not res!14663) (not e!15531))))

(declare-fun lt!8938 () ListLongMap!565)

(assert (=> d!4181 (= res!14663 (contains!230 lt!8938 (_1!493 (tuple2!971 lt!8680 (minValue!1665 lt!8141)))))))

(declare-fun lt!8936 () List!565)

(assert (=> d!4181 (= lt!8938 (ListLongMap!566 lt!8936))))

(declare-fun lt!8937 () Unit!519)

(declare-fun lt!8939 () Unit!519)

(assert (=> d!4181 (= lt!8937 lt!8939)))

(assert (=> d!4181 (= (getValueByKey!60 lt!8936 (_1!493 (tuple2!971 lt!8680 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8680 (minValue!1665 lt!8141)))))))

(assert (=> d!4181 (= lt!8939 (lemmaContainsTupThenGetReturnValue!18 lt!8936 (_1!493 (tuple2!971 lt!8680 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8680 (minValue!1665 lt!8141)))))))

(assert (=> d!4181 (= lt!8936 (insertStrictlySorted!18 (toList!298 lt!8682) (_1!493 (tuple2!971 lt!8680 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8680 (minValue!1665 lt!8141)))))))

(assert (=> d!4181 (= (+!45 lt!8682 (tuple2!971 lt!8680 (minValue!1665 lt!8141))) lt!8938)))

(declare-fun b!23976 () Bool)

(declare-fun res!14664 () Bool)

(assert (=> b!23976 (=> (not res!14664) (not e!15531))))

(assert (=> b!23976 (= res!14664 (= (getValueByKey!60 (toList!298 lt!8938) (_1!493 (tuple2!971 lt!8680 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8680 (minValue!1665 lt!8141))))))))

(declare-fun b!23977 () Bool)

(assert (=> b!23977 (= e!15531 (contains!231 (toList!298 lt!8938) (tuple2!971 lt!8680 (minValue!1665 lt!8141))))))

(assert (= (and d!4181 res!14663) b!23976))

(assert (= (and b!23976 res!14664) b!23977))

(declare-fun m!18023 () Bool)

(assert (=> d!4181 m!18023))

(declare-fun m!18025 () Bool)

(assert (=> d!4181 m!18025))

(declare-fun m!18027 () Bool)

(assert (=> d!4181 m!18027))

(declare-fun m!18029 () Bool)

(assert (=> d!4181 m!18029))

(declare-fun m!18031 () Bool)

(assert (=> b!23976 m!18031))

(declare-fun m!18033 () Bool)

(assert (=> b!23977 m!18033))

(assert (=> b!23669 d!4181))

(declare-fun d!4183 () Bool)

(assert (=> d!4183 (= (apply!29 (+!45 lt!8685 (tuple2!971 lt!8674 (minValue!1665 lt!8141))) lt!8670) (apply!29 lt!8685 lt!8670))))

(declare-fun lt!8940 () Unit!519)

(assert (=> d!4183 (= lt!8940 (choose!211 lt!8685 lt!8674 (minValue!1665 lt!8141) lt!8670))))

(declare-fun e!15532 () Bool)

(assert (=> d!4183 e!15532))

(declare-fun res!14665 () Bool)

(assert (=> d!4183 (=> (not res!14665) (not e!15532))))

(assert (=> d!4183 (= res!14665 (contains!230 lt!8685 lt!8670))))

(assert (=> d!4183 (= (addApplyDifferent!14 lt!8685 lt!8674 (minValue!1665 lt!8141) lt!8670) lt!8940)))

(declare-fun b!23978 () Bool)

(assert (=> b!23978 (= e!15532 (not (= lt!8670 lt!8674)))))

(assert (= (and d!4183 res!14665) b!23978))

(assert (=> d!4183 m!17352))

(declare-fun m!18035 () Bool)

(assert (=> d!4183 m!18035))

(assert (=> d!4183 m!17342))

(declare-fun m!18037 () Bool)

(assert (=> d!4183 m!18037))

(assert (=> d!4183 m!17342))

(assert (=> d!4183 m!17350))

(assert (=> b!23669 d!4183))

(declare-fun d!4185 () Bool)

(assert (=> d!4185 (= (apply!29 lt!8677 lt!8673) (get!391 (getValueByKey!60 (toList!298 lt!8677) lt!8673)))))

(declare-fun bs!976 () Bool)

(assert (= bs!976 d!4185))

(declare-fun m!18039 () Bool)

(assert (=> bs!976 m!18039))

(assert (=> bs!976 m!18039))

(declare-fun m!18041 () Bool)

(assert (=> bs!976 m!18041))

(assert (=> b!23669 d!4185))

(declare-fun d!4187 () Bool)

(assert (=> d!4187 (= (apply!29 (+!45 lt!8682 (tuple2!971 lt!8680 (minValue!1665 lt!8141))) lt!8669) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8682 (tuple2!971 lt!8680 (minValue!1665 lt!8141)))) lt!8669)))))

(declare-fun bs!977 () Bool)

(assert (= bs!977 d!4187))

(declare-fun m!18043 () Bool)

(assert (=> bs!977 m!18043))

(assert (=> bs!977 m!18043))

(declare-fun m!18045 () Bool)

(assert (=> bs!977 m!18045))

(assert (=> b!23669 d!4187))

(declare-fun d!4189 () Bool)

(declare-fun e!15533 () Bool)

(assert (=> d!4189 e!15533))

(declare-fun res!14666 () Bool)

(assert (=> d!4189 (=> (not res!14666) (not e!15533))))

(declare-fun lt!8943 () ListLongMap!565)

(assert (=> d!4189 (= res!14666 (contains!230 lt!8943 (_1!493 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))))))

(declare-fun lt!8941 () List!565)

(assert (=> d!4189 (= lt!8943 (ListLongMap!566 lt!8941))))

(declare-fun lt!8942 () Unit!519)

(declare-fun lt!8944 () Unit!519)

(assert (=> d!4189 (= lt!8942 lt!8944)))

(assert (=> d!4189 (= (getValueByKey!60 lt!8941 (_1!493 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4189 (= lt!8944 (lemmaContainsTupThenGetReturnValue!18 lt!8941 (_1!493 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4189 (= lt!8941 (insertStrictlySorted!18 (toList!298 lt!8679) (_1!493 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4189 (= (+!45 lt!8679 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141))) lt!8943)))

(declare-fun b!23979 () Bool)

(declare-fun res!14667 () Bool)

(assert (=> b!23979 (=> (not res!14667) (not e!15533))))

(assert (=> b!23979 (= res!14667 (= (getValueByKey!60 (toList!298 lt!8943) (_1!493 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141))))))))

(declare-fun b!23980 () Bool)

(assert (=> b!23980 (= e!15533 (contains!231 (toList!298 lt!8943) (tuple2!971 lt!8664 (zeroValue!1665 lt!8141))))))

(assert (= (and d!4189 res!14666) b!23979))

(assert (= (and b!23979 res!14667) b!23980))

(declare-fun m!18047 () Bool)

(assert (=> d!4189 m!18047))

(declare-fun m!18049 () Bool)

(assert (=> d!4189 m!18049))

(declare-fun m!18051 () Bool)

(assert (=> d!4189 m!18051))

(declare-fun m!18053 () Bool)

(assert (=> d!4189 m!18053))

(declare-fun m!18055 () Bool)

(assert (=> b!23979 m!18055))

(declare-fun m!18057 () Bool)

(assert (=> b!23980 m!18057))

(assert (=> b!23669 d!4189))

(declare-fun d!4191 () Bool)

(assert (=> d!4191 (= (apply!29 (+!45 lt!8682 (tuple2!971 lt!8680 (minValue!1665 lt!8141))) lt!8669) (apply!29 lt!8682 lt!8669))))

(declare-fun lt!8945 () Unit!519)

(assert (=> d!4191 (= lt!8945 (choose!211 lt!8682 lt!8680 (minValue!1665 lt!8141) lt!8669))))

(declare-fun e!15534 () Bool)

(assert (=> d!4191 e!15534))

(declare-fun res!14668 () Bool)

(assert (=> d!4191 (=> (not res!14668) (not e!15534))))

(assert (=> d!4191 (= res!14668 (contains!230 lt!8682 lt!8669))))

(assert (=> d!4191 (= (addApplyDifferent!14 lt!8682 lt!8680 (minValue!1665 lt!8141) lt!8669) lt!8945)))

(declare-fun b!23981 () Bool)

(assert (=> b!23981 (= e!15534 (not (= lt!8669 lt!8680)))))

(assert (= (and d!4191 res!14668) b!23981))

(assert (=> d!4191 m!17332))

(declare-fun m!18059 () Bool)

(assert (=> d!4191 m!18059))

(assert (=> d!4191 m!17336))

(declare-fun m!18061 () Bool)

(assert (=> d!4191 m!18061))

(assert (=> d!4191 m!17336))

(assert (=> d!4191 m!17338))

(assert (=> b!23669 d!4191))

(declare-fun b!23982 () Bool)

(declare-fun res!14669 () Bool)

(declare-fun e!15535 () Bool)

(assert (=> b!23982 (=> (not res!14669) (not e!15535))))

(declare-fun lt!8947 () ListLongMap!565)

(assert (=> b!23982 (= res!14669 (not (contains!230 lt!8947 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!23983 () Bool)

(assert (=> b!23983 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> b!23983 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8236)))))

(declare-fun e!15536 () Bool)

(assert (=> b!23983 (= e!15536 (= (apply!29 lt!8947 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8236) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!23984 () Bool)

(declare-fun lt!8949 () Unit!519)

(declare-fun lt!8951 () Unit!519)

(assert (=> b!23984 (= lt!8949 lt!8951)))

(declare-fun lt!8948 () ListLongMap!565)

(declare-fun lt!8952 () V!1187)

(declare-fun lt!8950 () (_ BitVec 64))

(declare-fun lt!8946 () (_ BitVec 64))

(assert (=> b!23984 (not (contains!230 (+!45 lt!8948 (tuple2!971 lt!8950 lt!8952)) lt!8946))))

(assert (=> b!23984 (= lt!8951 (addStillNotContains!2 lt!8948 lt!8950 lt!8952 lt!8946))))

(assert (=> b!23984 (= lt!8946 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!23984 (= lt!8952 (get!390 (select (arr!596 lt!8236) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!23984 (= lt!8950 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun call!2072 () ListLongMap!565)

(assert (=> b!23984 (= lt!8948 call!2072)))

(declare-fun e!15540 () ListLongMap!565)

(assert (=> b!23984 (= e!15540 (+!45 call!2072 (tuple2!971 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (get!390 (select (arr!596 lt!8236) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!23985 () Bool)

(declare-fun e!15537 () Bool)

(assert (=> b!23985 (= e!15537 (= lt!8947 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141))))))

(declare-fun b!23986 () Bool)

(assert (=> b!23986 (= e!15540 call!2072)))

(declare-fun b!23987 () Bool)

(declare-fun e!15539 () Bool)

(assert (=> b!23987 (= e!15539 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23987 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!4193 () Bool)

(assert (=> d!4193 e!15535))

(declare-fun res!14672 () Bool)

(assert (=> d!4193 (=> (not res!14672) (not e!15535))))

(assert (=> d!4193 (= res!14672 (not (contains!230 lt!8947 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15541 () ListLongMap!565)

(assert (=> d!4193 (= lt!8947 e!15541)))

(declare-fun c!3170 () Bool)

(assert (=> d!4193 (= c!3170 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4193 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4193 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8947)))

(declare-fun b!23988 () Bool)

(assert (=> b!23988 (= e!15541 e!15540)))

(declare-fun c!3168 () Bool)

(assert (=> b!23988 (= c!3168 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!23989 () Bool)

(assert (=> b!23989 (= e!15537 (isEmpty!172 lt!8947))))

(declare-fun b!23990 () Bool)

(declare-fun e!15538 () Bool)

(assert (=> b!23990 (= e!15538 e!15536)))

(assert (=> b!23990 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14670 () Bool)

(assert (=> b!23990 (= res!14670 (contains!230 lt!8947 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!23990 (=> (not res!14670) (not e!15536))))

(declare-fun bm!2069 () Bool)

(assert (=> bm!2069 (= call!2072 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141)))))

(declare-fun b!23991 () Bool)

(assert (=> b!23991 (= e!15538 e!15537)))

(declare-fun c!3169 () Bool)

(assert (=> b!23991 (= c!3169 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!23992 () Bool)

(assert (=> b!23992 (= e!15541 (ListLongMap!566 Nil!562))))

(declare-fun b!23993 () Bool)

(assert (=> b!23993 (= e!15535 e!15538)))

(declare-fun c!3167 () Bool)

(assert (=> b!23993 (= c!3167 e!15539)))

(declare-fun res!14671 () Bool)

(assert (=> b!23993 (=> (not res!14671) (not e!15539))))

(assert (=> b!23993 (= res!14671 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (= (and d!4193 c!3170) b!23992))

(assert (= (and d!4193 (not c!3170)) b!23988))

(assert (= (and b!23988 c!3168) b!23984))

(assert (= (and b!23988 (not c!3168)) b!23986))

(assert (= (or b!23984 b!23986) bm!2069))

(assert (= (and d!4193 res!14672) b!23982))

(assert (= (and b!23982 res!14669) b!23993))

(assert (= (and b!23993 res!14671) b!23987))

(assert (= (and b!23993 c!3167) b!23990))

(assert (= (and b!23993 (not c!3167)) b!23991))

(assert (= (and b!23990 res!14670) b!23983))

(assert (= (and b!23991 c!3169) b!23985))

(assert (= (and b!23991 (not c!3169)) b!23989))

(declare-fun b_lambda!1595 () Bool)

(assert (=> (not b_lambda!1595) (not b!23983)))

(assert (=> b!23983 t!3234))

(declare-fun b_and!1507 () Bool)

(assert (= b_and!1505 (and (=> t!3234 result!1095) b_and!1507)))

(declare-fun b_lambda!1597 () Bool)

(assert (=> (not b_lambda!1597) (not b!23984)))

(assert (=> b!23984 t!3234))

(declare-fun b_and!1509 () Bool)

(assert (= b_and!1507 (and (=> t!3234 result!1095) b_and!1509)))

(assert (=> b!23988 m!17198))

(assert (=> b!23988 m!17198))

(assert (=> b!23988 m!17310))

(assert (=> b!23983 m!17304))

(assert (=> b!23983 m!17198))

(declare-fun m!18063 () Bool)

(assert (=> b!23983 m!18063))

(assert (=> b!23983 m!17198))

(assert (=> b!23983 m!17302))

(assert (=> b!23983 m!17304))

(assert (=> b!23983 m!17306))

(assert (=> b!23983 m!17302))

(declare-fun m!18065 () Bool)

(assert (=> b!23985 m!18065))

(assert (=> b!23987 m!17198))

(assert (=> b!23987 m!17198))

(assert (=> b!23987 m!17310))

(declare-fun m!18067 () Bool)

(assert (=> b!23989 m!18067))

(assert (=> b!23990 m!17198))

(assert (=> b!23990 m!17198))

(declare-fun m!18069 () Bool)

(assert (=> b!23990 m!18069))

(declare-fun m!18071 () Bool)

(assert (=> b!23982 m!18071))

(assert (=> bm!2069 m!18065))

(assert (=> b!23984 m!17304))

(declare-fun m!18073 () Bool)

(assert (=> b!23984 m!18073))

(declare-fun m!18075 () Bool)

(assert (=> b!23984 m!18075))

(assert (=> b!23984 m!17198))

(assert (=> b!23984 m!18073))

(declare-fun m!18077 () Bool)

(assert (=> b!23984 m!18077))

(assert (=> b!23984 m!17302))

(assert (=> b!23984 m!17304))

(assert (=> b!23984 m!17306))

(assert (=> b!23984 m!17302))

(declare-fun m!18079 () Bool)

(assert (=> b!23984 m!18079))

(declare-fun m!18081 () Bool)

(assert (=> d!4193 m!18081))

(assert (=> d!4193 m!17050))

(assert (=> b!23669 d!4193))

(declare-fun d!4195 () Bool)

(declare-fun e!15542 () Bool)

(assert (=> d!4195 e!15542))

(declare-fun res!14673 () Bool)

(assert (=> d!4195 (=> (not res!14673) (not e!15542))))

(declare-fun lt!8955 () ListLongMap!565)

(assert (=> d!4195 (= res!14673 (contains!230 lt!8955 (_1!493 (tuple2!971 lt!8674 (minValue!1665 lt!8141)))))))

(declare-fun lt!8953 () List!565)

(assert (=> d!4195 (= lt!8955 (ListLongMap!566 lt!8953))))

(declare-fun lt!8954 () Unit!519)

(declare-fun lt!8956 () Unit!519)

(assert (=> d!4195 (= lt!8954 lt!8956)))

(assert (=> d!4195 (= (getValueByKey!60 lt!8953 (_1!493 (tuple2!971 lt!8674 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8674 (minValue!1665 lt!8141)))))))

(assert (=> d!4195 (= lt!8956 (lemmaContainsTupThenGetReturnValue!18 lt!8953 (_1!493 (tuple2!971 lt!8674 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8674 (minValue!1665 lt!8141)))))))

(assert (=> d!4195 (= lt!8953 (insertStrictlySorted!18 (toList!298 lt!8685) (_1!493 (tuple2!971 lt!8674 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8674 (minValue!1665 lt!8141)))))))

(assert (=> d!4195 (= (+!45 lt!8685 (tuple2!971 lt!8674 (minValue!1665 lt!8141))) lt!8955)))

(declare-fun b!23994 () Bool)

(declare-fun res!14674 () Bool)

(assert (=> b!23994 (=> (not res!14674) (not e!15542))))

(assert (=> b!23994 (= res!14674 (= (getValueByKey!60 (toList!298 lt!8955) (_1!493 (tuple2!971 lt!8674 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8674 (minValue!1665 lt!8141))))))))

(declare-fun b!23995 () Bool)

(assert (=> b!23995 (= e!15542 (contains!231 (toList!298 lt!8955) (tuple2!971 lt!8674 (minValue!1665 lt!8141))))))

(assert (= (and d!4195 res!14673) b!23994))

(assert (= (and b!23994 res!14674) b!23995))

(declare-fun m!18083 () Bool)

(assert (=> d!4195 m!18083))

(declare-fun m!18085 () Bool)

(assert (=> d!4195 m!18085))

(declare-fun m!18087 () Bool)

(assert (=> d!4195 m!18087))

(declare-fun m!18089 () Bool)

(assert (=> d!4195 m!18089))

(declare-fun m!18091 () Bool)

(assert (=> b!23994 m!18091))

(declare-fun m!18093 () Bool)

(assert (=> b!23995 m!18093))

(assert (=> b!23669 d!4195))

(declare-fun d!4197 () Bool)

(assert (=> d!4197 (= (apply!29 lt!8685 lt!8670) (get!391 (getValueByKey!60 (toList!298 lt!8685) lt!8670)))))

(declare-fun bs!978 () Bool)

(assert (= bs!978 d!4197))

(declare-fun m!18095 () Bool)

(assert (=> bs!978 m!18095))

(assert (=> bs!978 m!18095))

(declare-fun m!18097 () Bool)

(assert (=> bs!978 m!18097))

(assert (=> b!23669 d!4197))

(declare-fun d!4199 () Bool)

(assert (=> d!4199 (= (apply!29 (+!45 lt!8677 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141))) lt!8673) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8677 (tuple2!971 lt!8671 (zeroValue!1665 lt!8141)))) lt!8673)))))

(declare-fun bs!979 () Bool)

(assert (= bs!979 d!4199))

(declare-fun m!18099 () Bool)

(assert (=> bs!979 m!18099))

(assert (=> bs!979 m!18099))

(declare-fun m!18101 () Bool)

(assert (=> bs!979 m!18101))

(assert (=> b!23669 d!4199))

(declare-fun d!4201 () Bool)

(assert (=> d!4201 (= (apply!29 lt!8682 lt!8669) (get!391 (getValueByKey!60 (toList!298 lt!8682) lt!8669)))))

(declare-fun bs!980 () Bool)

(assert (= bs!980 d!4201))

(declare-fun m!18103 () Bool)

(assert (=> bs!980 m!18103))

(assert (=> bs!980 m!18103))

(declare-fun m!18105 () Bool)

(assert (=> bs!980 m!18105))

(assert (=> b!23669 d!4201))

(declare-fun d!4203 () Bool)

(declare-fun e!15544 () Bool)

(assert (=> d!4203 e!15544))

(declare-fun res!14675 () Bool)

(assert (=> d!4203 (=> res!14675 e!15544)))

(declare-fun lt!8960 () Bool)

(assert (=> d!4203 (= res!14675 (not lt!8960))))

(declare-fun lt!8959 () Bool)

(assert (=> d!4203 (= lt!8960 lt!8959)))

(declare-fun lt!8958 () Unit!519)

(declare-fun e!15543 () Unit!519)

(assert (=> d!4203 (= lt!8958 e!15543)))

(declare-fun c!3171 () Bool)

(assert (=> d!4203 (= c!3171 lt!8959)))

(assert (=> d!4203 (= lt!8959 (containsKey!24 (toList!298 (+!45 lt!8679 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))) lt!8678))))

(assert (=> d!4203 (= (contains!230 (+!45 lt!8679 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141))) lt!8678) lt!8960)))

(declare-fun b!23996 () Bool)

(declare-fun lt!8957 () Unit!519)

(assert (=> b!23996 (= e!15543 lt!8957)))

(assert (=> b!23996 (= lt!8957 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (+!45 lt!8679 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))) lt!8678))))

(assert (=> b!23996 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8679 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))) lt!8678))))

(declare-fun b!23997 () Bool)

(declare-fun Unit!555 () Unit!519)

(assert (=> b!23997 (= e!15543 Unit!555)))

(declare-fun b!23998 () Bool)

(assert (=> b!23998 (= e!15544 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8679 (tuple2!971 lt!8664 (zeroValue!1665 lt!8141)))) lt!8678)))))

(assert (= (and d!4203 c!3171) b!23996))

(assert (= (and d!4203 (not c!3171)) b!23997))

(assert (= (and d!4203 (not res!14675)) b!23998))

(declare-fun m!18107 () Bool)

(assert (=> d!4203 m!18107))

(declare-fun m!18109 () Bool)

(assert (=> b!23996 m!18109))

(declare-fun m!18111 () Bool)

(assert (=> b!23996 m!18111))

(assert (=> b!23996 m!18111))

(declare-fun m!18113 () Bool)

(assert (=> b!23996 m!18113))

(assert (=> b!23998 m!18111))

(assert (=> b!23998 m!18111))

(assert (=> b!23998 m!18113))

(assert (=> b!23669 d!4203))

(declare-fun d!4205 () Bool)

(declare-fun e!15545 () Bool)

(assert (=> d!4205 e!15545))

(declare-fun res!14676 () Bool)

(assert (=> d!4205 (=> (not res!14676) (not e!15545))))

(declare-fun lt!8963 () ListLongMap!565)

(assert (=> d!4205 (= res!14676 (contains!230 lt!8963 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(declare-fun lt!8961 () List!565)

(assert (=> d!4205 (= lt!8963 (ListLongMap!566 lt!8961))))

(declare-fun lt!8962 () Unit!519)

(declare-fun lt!8964 () Unit!519)

(assert (=> d!4205 (= lt!8962 lt!8964)))

(assert (=> d!4205 (= (getValueByKey!60 lt!8961 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4205 (= lt!8964 (lemmaContainsTupThenGetReturnValue!18 lt!8961 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4205 (= lt!8961 (insertStrictlySorted!18 (toList!298 call!2032) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4205 (= (+!45 call!2032 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8963)))

(declare-fun b!23999 () Bool)

(declare-fun res!14677 () Bool)

(assert (=> b!23999 (=> (not res!14677) (not e!15545))))

(assert (=> b!23999 (= res!14677 (= (getValueByKey!60 (toList!298 lt!8963) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(declare-fun b!24000 () Bool)

(assert (=> b!24000 (= e!15545 (contains!231 (toList!298 lt!8963) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))

(assert (= (and d!4205 res!14676) b!23999))

(assert (= (and b!23999 res!14677) b!24000))

(declare-fun m!18115 () Bool)

(assert (=> d!4205 m!18115))

(declare-fun m!18117 () Bool)

(assert (=> d!4205 m!18117))

(declare-fun m!18119 () Bool)

(assert (=> d!4205 m!18119))

(declare-fun m!18121 () Bool)

(assert (=> d!4205 m!18121))

(declare-fun m!18123 () Bool)

(assert (=> b!23999 m!18123))

(declare-fun m!18125 () Bool)

(assert (=> b!24000 m!18125))

(assert (=> b!23718 d!4205))

(declare-fun d!4207 () Bool)

(declare-fun e!15547 () Bool)

(assert (=> d!4207 e!15547))

(declare-fun res!14678 () Bool)

(assert (=> d!4207 (=> res!14678 e!15547)))

(declare-fun lt!8968 () Bool)

(assert (=> d!4207 (= res!14678 (not lt!8968))))

(declare-fun lt!8967 () Bool)

(assert (=> d!4207 (= lt!8968 lt!8967)))

(declare-fun lt!8966 () Unit!519)

(declare-fun e!15546 () Unit!519)

(assert (=> d!4207 (= lt!8966 e!15546)))

(declare-fun c!3172 () Bool)

(assert (=> d!4207 (= c!3172 lt!8967)))

(assert (=> d!4207 (= lt!8967 (containsKey!24 (toList!298 lt!8459) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> d!4207 (= (contains!230 lt!8459 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) lt!8968)))

(declare-fun b!24001 () Bool)

(declare-fun lt!8965 () Unit!519)

(assert (=> b!24001 (= e!15546 lt!8965)))

(assert (=> b!24001 (= lt!8965 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8459) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!24001 (isDefined!22 (getValueByKey!60 (toList!298 lt!8459) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun b!24002 () Bool)

(declare-fun Unit!556 () Unit!519)

(assert (=> b!24002 (= e!15546 Unit!556)))

(declare-fun b!24003 () Bool)

(assert (=> b!24003 (= e!15547 (isDefined!22 (getValueByKey!60 (toList!298 lt!8459) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))))

(assert (= (and d!4207 c!3172) b!24001))

(assert (= (and d!4207 (not c!3172)) b!24002))

(assert (= (and d!4207 (not res!14678)) b!24003))

(assert (=> d!4207 m!16908))

(declare-fun m!18127 () Bool)

(assert (=> d!4207 m!18127))

(assert (=> b!24001 m!16908))

(declare-fun m!18129 () Bool)

(assert (=> b!24001 m!18129))

(assert (=> b!24001 m!16908))

(declare-fun m!18131 () Bool)

(assert (=> b!24001 m!18131))

(assert (=> b!24001 m!18131))

(declare-fun m!18133 () Bool)

(assert (=> b!24001 m!18133))

(assert (=> b!24003 m!16908))

(assert (=> b!24003 m!18131))

(assert (=> b!24003 m!18131))

(assert (=> b!24003 m!18133))

(assert (=> b!23489 d!4207))

(assert (=> bm!1982 d!4157))

(declare-fun d!4209 () Bool)

(declare-fun lt!8971 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!15 (List!565) (InoxSet tuple2!970))

(assert (=> d!4209 (= lt!8971 (select (content!15 (toList!298 lt!8695)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun e!15552 () Bool)

(assert (=> d!4209 (= lt!8971 e!15552)))

(declare-fun res!14683 () Bool)

(assert (=> d!4209 (=> (not res!14683) (not e!15552))))

(assert (=> d!4209 (= res!14683 ((_ is Cons!561) (toList!298 lt!8695)))))

(assert (=> d!4209 (= (contains!231 (toList!298 lt!8695) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!8971)))

(declare-fun b!24008 () Bool)

(declare-fun e!15553 () Bool)

(assert (=> b!24008 (= e!15552 e!15553)))

(declare-fun res!14684 () Bool)

(assert (=> b!24008 (=> res!14684 e!15553)))

(assert (=> b!24008 (= res!14684 (= (h!1127 (toList!298 lt!8695)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun b!24009 () Bool)

(assert (=> b!24009 (= e!15553 (contains!231 (t!3229 (toList!298 lt!8695)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(assert (= (and d!4209 res!14683) b!24008))

(assert (= (and b!24008 (not res!14684)) b!24009))

(declare-fun m!18135 () Bool)

(assert (=> d!4209 m!18135))

(declare-fun m!18137 () Bool)

(assert (=> d!4209 m!18137))

(declare-fun m!18139 () Bool)

(assert (=> b!24009 m!18139))

(assert (=> b!23683 d!4209))

(declare-fun d!4211 () Bool)

(assert (=> d!4211 (= (apply!29 lt!8770 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!391 (getValueByKey!60 (toList!298 lt!8770) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))))

(declare-fun bs!981 () Bool)

(assert (= bs!981 d!4211))

(assert (=> bs!981 m!16908))

(declare-fun m!18141 () Bool)

(assert (=> bs!981 m!18141))

(assert (=> bs!981 m!18141))

(declare-fun m!18143 () Bool)

(assert (=> bs!981 m!18143))

(assert (=> b!23769 d!4211))

(declare-fun d!4213 () Bool)

(declare-fun c!3173 () Bool)

(assert (=> d!4213 (= c!3173 ((_ is ValueCellFull!311) (select (arr!596 lt!8338) #b00000000000000000000000000000000)))))

(declare-fun e!15554 () V!1187)

(assert (=> d!4213 (= (get!390 (select (arr!596 lt!8338) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)) e!15554)))

(declare-fun b!24010 () Bool)

(assert (=> b!24010 (= e!15554 (get!392 (select (arr!596 lt!8338) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24011 () Bool)

(assert (=> b!24011 (= e!15554 (get!393 (select (arr!596 lt!8338) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4213 c!3173) b!24010))

(assert (= (and d!4213 (not c!3173)) b!24011))

(assert (=> b!24010 m!17561))

(assert (=> b!24010 m!16916))

(declare-fun m!18145 () Bool)

(assert (=> b!24010 m!18145))

(assert (=> b!24011 m!17561))

(assert (=> b!24011 m!16916))

(declare-fun m!18147 () Bool)

(assert (=> b!24011 m!18147))

(assert (=> b!23769 d!4213))

(declare-fun d!4215 () Bool)

(declare-fun lt!8972 () tuple2!972)

(assert (=> d!4215 (or (bvsle (_2!494 lt!8972) #b00000000000000000000000000001000) (bvsge (bvmul #b00000000000000000000000000001000 (_size!149 (v!1601 (underlying!115 thiss!938)))) (_2!494 lt!8972)) (bvslt (bvadd (bvand (bvashr (_2!494 lt!8972) #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun e!15555 () tuple2!972)

(assert (=> d!4215 (= lt!8972 e!15555)))

(declare-fun c!3174 () Bool)

(declare-fun lt!8973 () (_ BitVec 32))

(assert (=> d!4215 (= c!3174 (and (bvsgt lt!8973 #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8973) (bvsge (bvadd (bvand (bvashr lt!8973 #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1601 (underlying!115 thiss!938))))))))

(assert (=> d!4215 (= lt!8973 (bvlshr lt!8704 #b00000000000000000000000000000001))))

(assert (=> d!4215 (and (bvsgt lt!8704 #b00000000000000000000000000001000) (bvslt (bvmul #b00000000000000000000000000001000 (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8704) (bvsge (bvadd (bvand (bvashr lt!8704 #b00000000000000000000000000000001) #b00111111111111111111111111111111) #b00000000000000000000000000000001) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(assert (=> d!4215 (= (computeNewMaskWhile!14 (_size!149 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (mask!4729 (v!1601 (underlying!115 thiss!938))) lt!8704) lt!8972)))

(declare-fun b!24012 () Bool)

(assert (=> b!24012 (= e!15555 (computeNewMaskWhile!14 (_size!149 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (mask!4729 (v!1601 (underlying!115 thiss!938))) lt!8973))))

(declare-fun b!24013 () Bool)

(declare-fun Unit!557 () Unit!519)

(assert (=> b!24013 (= e!15555 (tuple2!973 Unit!557 lt!8973))))

(assert (= (and d!4215 c!3174) b!24012))

(assert (= (and d!4215 (not c!3174)) b!24013))

(declare-fun m!18149 () Bool)

(assert (=> b!24012 m!18149))

(assert (=> b!23698 d!4215))

(declare-fun d!4217 () Bool)

(assert (=> d!4217 (= (isDefined!22 (getValueByKey!60 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))) (not (isEmpty!173 (getValueByKey!60 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bs!982 () Bool)

(assert (= bs!982 d!4217))

(assert (=> bs!982 m!17493))

(declare-fun m!18151 () Bool)

(assert (=> bs!982 m!18151))

(assert (=> b!23742 d!4217))

(declare-fun b!24014 () Bool)

(declare-fun e!15556 () Option!66)

(assert (=> b!24014 (= e!15556 (Some!65 (_2!493 (h!1127 (toList!298 e!15108)))))))

(declare-fun b!24017 () Bool)

(declare-fun e!15557 () Option!66)

(assert (=> b!24017 (= e!15557 None!64)))

(declare-fun b!24016 () Bool)

(assert (=> b!24016 (= e!15557 (getValueByKey!60 (t!3229 (toList!298 e!15108)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24015 () Bool)

(assert (=> b!24015 (= e!15556 e!15557)))

(declare-fun c!3176 () Bool)

(assert (=> b!24015 (= c!3176 (and ((_ is Cons!561) (toList!298 e!15108)) (not (= (_1!493 (h!1127 (toList!298 e!15108))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun d!4219 () Bool)

(declare-fun c!3175 () Bool)

(assert (=> d!4219 (= c!3175 (and ((_ is Cons!561) (toList!298 e!15108)) (= (_1!493 (h!1127 (toList!298 e!15108))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4219 (= (getValueByKey!60 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) e!15556)))

(assert (= (and d!4219 c!3175) b!24014))

(assert (= (and d!4219 (not c!3175)) b!24015))

(assert (= (and b!24015 c!3176) b!24016))

(assert (= (and b!24015 (not c!3176)) b!24017))

(declare-fun m!18153 () Bool)

(assert (=> b!24016 m!18153))

(assert (=> b!23742 d!4219))

(declare-fun d!4221 () Bool)

(assert (=> d!4221 (contains!230 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!8976 () Unit!519)

(declare-fun choose!213 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 64) (_ BitVec 32) Int) Unit!519)

(assert (=> d!4221 (= lt!8976 (choose!213 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4221 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4221 (= (lemmaArrayContainsKeyThenInListMap!3 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!8976)))

(declare-fun bs!983 () Bool)

(assert (= bs!983 d!4221))

(assert (=> bs!983 m!17036))

(assert (=> bs!983 m!17036))

(assert (=> bs!983 m!17234))

(declare-fun m!18155 () Bool)

(assert (=> bs!983 m!18155))

(assert (=> bs!983 m!16878))

(assert (=> b!23618 d!4221))

(declare-fun d!4223 () Bool)

(declare-fun e!15559 () Bool)

(assert (=> d!4223 e!15559))

(declare-fun res!14685 () Bool)

(assert (=> d!4223 (=> res!14685 e!15559)))

(declare-fun lt!8980 () Bool)

(assert (=> d!4223 (= res!14685 (not lt!8980))))

(declare-fun lt!8979 () Bool)

(assert (=> d!4223 (= lt!8980 lt!8979)))

(declare-fun lt!8978 () Unit!519)

(declare-fun e!15558 () Unit!519)

(assert (=> d!4223 (= lt!8978 e!15558)))

(declare-fun c!3177 () Bool)

(assert (=> d!4223 (= c!3177 lt!8979)))

(assert (=> d!4223 (= lt!8979 (containsKey!24 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4223 (= (contains!230 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) #b1000000000000000000000000000000000000000000000000000000000000000) lt!8980)))

(declare-fun b!24018 () Bool)

(declare-fun lt!8977 () Unit!519)

(assert (=> b!24018 (= e!15558 lt!8977)))

(assert (=> b!24018 (= lt!8977 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24018 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24019 () Bool)

(declare-fun Unit!558 () Unit!519)

(assert (=> b!24019 (= e!15558 Unit!558)))

(declare-fun b!24020 () Bool)

(assert (=> b!24020 (= e!15559 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4223 c!3177) b!24018))

(assert (= (and d!4223 (not c!3177)) b!24019))

(assert (= (and d!4223 (not res!14685)) b!24020))

(declare-fun m!18157 () Bool)

(assert (=> d!4223 m!18157))

(declare-fun m!18159 () Bool)

(assert (=> b!24018 m!18159))

(declare-fun m!18161 () Bool)

(assert (=> b!24018 m!18161))

(assert (=> b!24018 m!18161))

(declare-fun m!18163 () Bool)

(assert (=> b!24018 m!18163))

(assert (=> b!24020 m!18161))

(assert (=> b!24020 m!18161))

(assert (=> b!24020 m!18163))

(assert (=> b!23618 d!4223))

(assert (=> b!23618 d!4119))

(declare-fun b!24021 () Bool)

(declare-fun e!15560 () (_ BitVec 32))

(assert (=> b!24021 (= e!15560 #b00000000000000000000000000000000)))

(declare-fun b!24022 () Bool)

(declare-fun e!15561 () (_ BitVec 32))

(assert (=> b!24022 (= e!15560 e!15561)))

(declare-fun c!3179 () Bool)

(assert (=> b!24022 (= c!3179 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)))))

(declare-fun b!24023 () Bool)

(declare-fun call!2073 () (_ BitVec 32))

(assert (=> b!24023 (= e!15561 (bvadd #b00000000000000000000000000000001 call!2073))))

(declare-fun b!24024 () Bool)

(assert (=> b!24024 (= e!15561 call!2073)))

(declare-fun bm!2070 () Bool)

(assert (=> bm!2070 (= call!2073 (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8234)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!487 lt!8234)))))))

(declare-fun d!4225 () Bool)

(declare-fun lt!8981 () (_ BitVec 32))

(assert (=> d!4225 (and (bvsge lt!8981 #b00000000000000000000000000000000) (bvsle lt!8981 (bvsub (size!693 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)))))

(assert (=> d!4225 (= lt!8981 e!15560)))

(declare-fun c!3178 () Bool)

(assert (=> d!4225 (= c!3178 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))))))

(assert (=> d!4225 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (_2!487 lt!8234))) (size!693 (_keys!3163 (_2!487 lt!8234)))))))

(assert (=> d!4225 (= (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8234)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))) lt!8981)))

(assert (= (and d!4225 c!3178) b!24021))

(assert (= (and d!4225 (not c!3178)) b!24022))

(assert (= (and b!24022 c!3179) b!24023))

(assert (= (and b!24022 (not c!3179)) b!24024))

(assert (= (or b!24023 b!24024) bm!2070))

(assert (=> b!24022 m!17855))

(assert (=> b!24022 m!17855))

(assert (=> b!24022 m!17857))

(declare-fun m!18165 () Bool)

(assert (=> bm!2070 m!18165))

(assert (=> b!23394 d!4225))

(declare-fun d!4227 () Bool)

(assert (=> d!4227 (= (apply!29 lt!8427 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8427) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!984 () Bool)

(assert (= bs!984 d!4227))

(declare-fun m!18167 () Bool)

(assert (=> bs!984 m!18167))

(assert (=> bs!984 m!18167))

(declare-fun m!18169 () Bool)

(assert (=> bs!984 m!18169))

(assert (=> b!23449 d!4227))

(assert (=> b!23462 d!4123))

(declare-fun b!24025 () Bool)

(declare-fun e!15562 () (_ BitVec 32))

(assert (=> b!24025 (= e!15562 #b00000000000000000000000000000000)))

(declare-fun b!24026 () Bool)

(declare-fun e!15563 () (_ BitVec 32))

(assert (=> b!24026 (= e!15562 e!15563)))

(declare-fun c!3181 () Bool)

(assert (=> b!24026 (= c!3181 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24027 () Bool)

(declare-fun call!2074 () (_ BitVec 32))

(assert (=> b!24027 (= e!15563 (bvadd #b00000000000000000000000000000001 call!2074))))

(declare-fun b!24028 () Bool)

(assert (=> b!24028 (= e!15563 call!2074)))

(declare-fun bm!2071 () Bool)

(assert (=> bm!2071 (= call!2074 (arrayCountValidKeys!0 (_keys!3163 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8141))))))

(declare-fun d!4229 () Bool)

(declare-fun lt!8982 () (_ BitVec 32))

(assert (=> d!4229 (and (bvsge lt!8982 #b00000000000000000000000000000000) (bvsle lt!8982 (bvsub (size!693 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> d!4229 (= lt!8982 e!15562)))

(declare-fun c!3180 () Bool)

(assert (=> d!4229 (= c!3180 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4229 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 lt!8141)) (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4229 (= (arrayCountValidKeys!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) lt!8982)))

(assert (= (and d!4229 c!3180) b!24025))

(assert (= (and d!4229 (not c!3180)) b!24026))

(assert (= (and b!24026 c!3181) b!24027))

(assert (= (and b!24026 (not c!3181)) b!24028))

(assert (= (or b!24027 b!24028) bm!2071))

(assert (=> b!24026 m!17198))

(assert (=> b!24026 m!17198))

(assert (=> b!24026 m!17310))

(declare-fun m!18171 () Bool)

(assert (=> bm!2071 m!18171))

(assert (=> b!23397 d!4229))

(declare-fun b!24029 () Bool)

(declare-fun e!15564 () Bool)

(declare-fun call!2075 () Bool)

(assert (=> b!24029 (= e!15564 call!2075)))

(declare-fun b!24030 () Bool)

(declare-fun e!15566 () Bool)

(assert (=> b!24030 (= e!15566 call!2075)))

(declare-fun b!24031 () Bool)

(declare-fun e!15565 () Bool)

(assert (=> b!24031 (= e!15565 e!15564)))

(declare-fun c!3182 () Bool)

(assert (=> b!24031 (= c!3182 (validKeyInArray!0 (select (arr!597 lt!8315) (bvadd lt!8323 #b00000000000000000000000000000001))))))

(declare-fun d!4231 () Bool)

(declare-fun res!14687 () Bool)

(assert (=> d!4231 (=> res!14687 e!15565)))

(assert (=> d!4231 (= res!14687 (bvsge (bvadd lt!8323 #b00000000000000000000000000000001) (size!693 lt!8315)))))

(assert (=> d!4231 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd lt!8323 #b00000000000000000000000000000001) lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))) e!15565)))

(declare-fun bm!2072 () Bool)

(assert (=> bm!2072 (= call!2075 (arrayForallSeekEntryOrOpenFound!0 (bvadd lt!8323 #b00000000000000000000000000000001 #b00000000000000000000000000000001) lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun b!24032 () Bool)

(assert (=> b!24032 (= e!15564 e!15566)))

(declare-fun lt!8983 () (_ BitVec 64))

(assert (=> b!24032 (= lt!8983 (select (arr!597 lt!8315) (bvadd lt!8323 #b00000000000000000000000000000001)))))

(declare-fun lt!8985 () Unit!519)

(assert (=> b!24032 (= lt!8985 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8315 lt!8983 (bvadd lt!8323 #b00000000000000000000000000000001)))))

(assert (=> b!24032 (arrayContainsKey!0 lt!8315 lt!8983 #b00000000000000000000000000000000)))

(declare-fun lt!8984 () Unit!519)

(assert (=> b!24032 (= lt!8984 lt!8985)))

(declare-fun res!14686 () Bool)

(assert (=> b!24032 (= res!14686 (= (seekEntryOrOpen!0 (select (arr!597 lt!8315) (bvadd lt!8323 #b00000000000000000000000000000001)) lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938))))) (Found!55 (bvadd lt!8323 #b00000000000000000000000000000001))))))

(assert (=> b!24032 (=> (not res!14686) (not e!15566))))

(assert (= (and d!4231 (not res!14687)) b!24031))

(assert (= (and b!24031 c!3182) b!24032))

(assert (= (and b!24031 (not c!3182)) b!24029))

(assert (= (and b!24032 res!14686) b!24030))

(assert (= (or b!24030 b!24029) bm!2072))

(declare-fun m!18173 () Bool)

(assert (=> b!24031 m!18173))

(assert (=> b!24031 m!18173))

(declare-fun m!18175 () Bool)

(assert (=> b!24031 m!18175))

(assert (=> bm!2072 m!16662))

(declare-fun m!18177 () Bool)

(assert (=> bm!2072 m!18177))

(assert (=> b!24032 m!18173))

(declare-fun m!18179 () Bool)

(assert (=> b!24032 m!18179))

(declare-fun m!18181 () Bool)

(assert (=> b!24032 m!18181))

(assert (=> b!24032 m!18173))

(assert (=> b!24032 m!16662))

(declare-fun m!18183 () Bool)

(assert (=> b!24032 m!18183))

(assert (=> bm!2010 d!4231))

(declare-fun b!24033 () Bool)

(declare-fun e!15567 () (_ BitVec 32))

(assert (=> b!24033 (= e!15567 #b00000000000000000000000000000000)))

(declare-fun b!24034 () Bool)

(declare-fun e!15568 () (_ BitVec 32))

(assert (=> b!24034 (= e!15567 e!15568)))

(declare-fun c!3184 () Bool)

(assert (=> b!24034 (= c!3184 (validKeyInArray!0 (select (arr!597 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(declare-fun b!24035 () Bool)

(declare-fun call!2076 () (_ BitVec 32))

(assert (=> b!24035 (= e!15568 (bvadd #b00000000000000000000000000000001 call!2076))))

(declare-fun b!24036 () Bool)

(assert (=> b!24036 (= e!15568 call!2076)))

(declare-fun bm!2073 () Bool)

(assert (=> bm!2073 (= call!2076 (arrayCountValidKeys!0 (_keys!3163 (v!1601 (underlying!115 thiss!938))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun d!4233 () Bool)

(declare-fun lt!8986 () (_ BitVec 32))

(assert (=> d!4233 (and (bvsge lt!8986 #b00000000000000000000000000000000) (bvsle lt!8986 (bvsub (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(assert (=> d!4233 (= lt!8986 e!15567)))

(declare-fun c!3183 () Bool)

(assert (=> d!4233 (= c!3183 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938))))))))

(assert (=> d!4233 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938))))))))

(assert (=> d!4233 (= (arrayCountValidKeys!0 (_keys!3163 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938))))) lt!8986)))

(assert (= (and d!4233 c!3183) b!24033))

(assert (= (and d!4233 (not c!3183)) b!24034))

(assert (= (and b!24034 c!3184) b!24035))

(assert (= (and b!24034 (not c!3184)) b!24036))

(assert (= (or b!24035 b!24036) bm!2073))

(assert (=> b!24034 m!17703))

(assert (=> b!24034 m!17703))

(assert (=> b!24034 m!17705))

(declare-fun m!18185 () Bool)

(assert (=> bm!2073 m!18185))

(assert (=> b!23556 d!4233))

(declare-fun d!4235 () Bool)

(assert (=> d!4235 (= (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (and (not (= (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23675 d!4235))

(declare-fun d!4237 () Bool)

(assert (=> d!4237 (= (validKeyInArray!0 (select (arr!597 lt!8321) lt!8319)) (and (not (= (select (arr!597 lt!8321) lt!8319) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 lt!8321) lt!8319) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23589 d!4237))

(assert (=> b!23762 d!4235))

(declare-fun d!4239 () Bool)

(declare-fun e!15570 () Bool)

(assert (=> d!4239 e!15570))

(declare-fun res!14688 () Bool)

(assert (=> d!4239 (=> res!14688 e!15570)))

(declare-fun lt!8990 () Bool)

(assert (=> d!4239 (= res!14688 (not lt!8990))))

(declare-fun lt!8989 () Bool)

(assert (=> d!4239 (= lt!8990 lt!8989)))

(declare-fun lt!8988 () Unit!519)

(declare-fun e!15569 () Unit!519)

(assert (=> d!4239 (= lt!8988 e!15569)))

(declare-fun c!3185 () Bool)

(assert (=> d!4239 (= c!3185 lt!8989)))

(assert (=> d!4239 (= lt!8989 (containsKey!24 (toList!298 lt!8711) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4239 (= (contains!230 lt!8711 #b0000000000000000000000000000000000000000000000000000000000000000) lt!8990)))

(declare-fun b!24037 () Bool)

(declare-fun lt!8987 () Unit!519)

(assert (=> b!24037 (= e!15569 lt!8987)))

(assert (=> b!24037 (= lt!8987 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8711) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24037 (isDefined!22 (getValueByKey!60 (toList!298 lt!8711) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24038 () Bool)

(declare-fun Unit!559 () Unit!519)

(assert (=> b!24038 (= e!15569 Unit!559)))

(declare-fun b!24039 () Bool)

(assert (=> b!24039 (= e!15570 (isDefined!22 (getValueByKey!60 (toList!298 lt!8711) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4239 c!3185) b!24037))

(assert (= (and d!4239 (not c!3185)) b!24038))

(assert (= (and d!4239 (not res!14688)) b!24039))

(declare-fun m!18187 () Bool)

(assert (=> d!4239 m!18187))

(declare-fun m!18189 () Bool)

(assert (=> b!24037 m!18189))

(declare-fun m!18191 () Bool)

(assert (=> b!24037 m!18191))

(assert (=> b!24037 m!18191))

(declare-fun m!18193 () Bool)

(assert (=> b!24037 m!18193))

(assert (=> b!24039 m!18191))

(assert (=> b!24039 m!18191))

(assert (=> b!24039 m!18193))

(assert (=> bm!2026 d!4239))

(declare-fun d!4241 () Bool)

(assert (=> d!4241 (contains!230 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!8991 () Unit!519)

(assert (=> d!4241 (= lt!8991 (choose!213 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> d!4241 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4241 (= (lemmaArrayContainsKeyThenInListMap!3 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!8991)))

(declare-fun bs!985 () Bool)

(assert (= bs!985 d!4241))

(assert (=> bs!985 m!17054))

(assert (=> bs!985 m!17054))

(assert (=> bs!985 m!17090))

(declare-fun m!18195 () Bool)

(assert (=> bs!985 m!18195))

(assert (=> bs!985 m!17050))

(assert (=> b!23546 d!4241))

(declare-fun d!4243 () Bool)

(declare-fun e!15572 () Bool)

(assert (=> d!4243 e!15572))

(declare-fun res!14689 () Bool)

(assert (=> d!4243 (=> res!14689 e!15572)))

(declare-fun lt!8995 () Bool)

(assert (=> d!4243 (= res!14689 (not lt!8995))))

(declare-fun lt!8994 () Bool)

(assert (=> d!4243 (= lt!8995 lt!8994)))

(declare-fun lt!8993 () Unit!519)

(declare-fun e!15571 () Unit!519)

(assert (=> d!4243 (= lt!8993 e!15571)))

(declare-fun c!3186 () Bool)

(assert (=> d!4243 (= c!3186 lt!8994)))

(assert (=> d!4243 (= lt!8994 (containsKey!24 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4243 (= (contains!230 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!8995)))

(declare-fun b!24040 () Bool)

(declare-fun lt!8992 () Unit!519)

(assert (=> b!24040 (= e!15571 lt!8992)))

(assert (=> b!24040 (= lt!8992 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24040 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24041 () Bool)

(declare-fun Unit!560 () Unit!519)

(assert (=> b!24041 (= e!15571 Unit!560)))

(declare-fun b!24042 () Bool)

(assert (=> b!24042 (= e!15572 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4243 c!3186) b!24040))

(assert (= (and d!4243 (not c!3186)) b!24041))

(assert (= (and d!4243 (not res!14689)) b!24042))

(declare-fun m!18197 () Bool)

(assert (=> d!4243 m!18197))

(declare-fun m!18199 () Bool)

(assert (=> b!24040 m!18199))

(declare-fun m!18201 () Bool)

(assert (=> b!24040 m!18201))

(assert (=> b!24040 m!18201))

(declare-fun m!18203 () Bool)

(assert (=> b!24040 m!18203))

(assert (=> b!24042 m!18201))

(assert (=> b!24042 m!18201))

(assert (=> b!24042 m!18203))

(assert (=> b!23546 d!4243))

(declare-fun b!24043 () Bool)

(declare-fun e!15581 () ListLongMap!565)

(declare-fun call!2079 () ListLongMap!565)

(assert (=> b!24043 (= e!15581 call!2079)))

(declare-fun bm!2074 () Bool)

(declare-fun call!2080 () ListLongMap!565)

(declare-fun call!2082 () ListLongMap!565)

(assert (=> bm!2074 (= call!2080 call!2082)))

(declare-fun b!24044 () Bool)

(declare-fun e!15577 () Bool)

(declare-fun e!15585 () Bool)

(assert (=> b!24044 (= e!15577 e!15585)))

(declare-fun c!3188 () Bool)

(assert (=> b!24044 (= c!3188 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24045 () Bool)

(declare-fun e!15576 () Bool)

(declare-fun lt!9000 () ListLongMap!565)

(assert (=> b!24045 (= e!15576 (= (apply!29 lt!9000 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24045 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8141))))))

(assert (=> b!24045 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun c!3190 () Bool)

(declare-fun call!2078 () ListLongMap!565)

(declare-fun c!3189 () Bool)

(declare-fun call!2081 () ListLongMap!565)

(declare-fun bm!2075 () Bool)

(assert (=> bm!2075 (= call!2082 (+!45 (ite c!3189 call!2081 (ite c!3190 call!2078 call!2079)) (ite (or c!3189 c!3190) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!24046 () Bool)

(declare-fun res!14695 () Bool)

(assert (=> b!24046 (=> (not res!14695) (not e!15577))))

(declare-fun e!15582 () Bool)

(assert (=> b!24046 (= res!14695 e!15582)))

(declare-fun c!3187 () Bool)

(assert (=> b!24046 (= c!3187 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2076 () Bool)

(declare-fun call!2077 () Bool)

(assert (=> bm!2076 (= call!2077 (contains!230 lt!9000 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24047 () Bool)

(declare-fun e!15574 () Bool)

(assert (=> b!24047 (= e!15585 e!15574)))

(declare-fun res!14693 () Bool)

(declare-fun call!2083 () Bool)

(assert (=> b!24047 (= res!14693 call!2083)))

(assert (=> b!24047 (=> (not res!14693) (not e!15574))))

(declare-fun b!24048 () Bool)

(declare-fun e!15580 () Unit!519)

(declare-fun Unit!561 () Unit!519)

(assert (=> b!24048 (= e!15580 Unit!561)))

(declare-fun b!24049 () Bool)

(assert (=> b!24049 (= e!15585 (not call!2083))))

(declare-fun b!24050 () Bool)

(declare-fun e!15583 () Bool)

(assert (=> b!24050 (= e!15583 (= (apply!29 lt!9000 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun bm!2077 () Bool)

(assert (=> bm!2077 (= call!2083 (contains!230 lt!9000 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24051 () Bool)

(assert (=> b!24051 (= e!15582 (not call!2077))))

(declare-fun d!4245 () Bool)

(assert (=> d!4245 e!15577))

(declare-fun res!14692 () Bool)

(assert (=> d!4245 (=> (not res!14692) (not e!15577))))

(assert (=> d!4245 (= res!14692 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!9015 () ListLongMap!565)

(assert (=> d!4245 (= lt!9000 lt!9015)))

(declare-fun lt!9007 () Unit!519)

(assert (=> d!4245 (= lt!9007 e!15580)))

(declare-fun c!3191 () Bool)

(declare-fun e!15584 () Bool)

(assert (=> d!4245 (= c!3191 e!15584)))

(declare-fun res!14696 () Bool)

(assert (=> d!4245 (=> (not res!14696) (not e!15584))))

(assert (=> d!4245 (= res!14696 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun e!15578 () ListLongMap!565)

(assert (=> d!4245 (= lt!9015 e!15578)))

(assert (=> d!4245 (= c!3189 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4245 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4245 (= (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9000)))

(declare-fun b!24052 () Bool)

(assert (=> b!24052 (= e!15574 (= (apply!29 lt!9000 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!24053 () Bool)

(assert (=> b!24053 (= e!15578 (+!45 call!2082 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun b!24054 () Bool)

(declare-fun e!15579 () Bool)

(assert (=> b!24054 (= e!15579 e!15576)))

(declare-fun res!14697 () Bool)

(assert (=> b!24054 (=> (not res!14697) (not e!15576))))

(assert (=> b!24054 (= res!14697 (contains!230 lt!9000 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24054 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24055 () Bool)

(declare-fun res!14694 () Bool)

(assert (=> b!24055 (=> (not res!14694) (not e!15577))))

(assert (=> b!24055 (= res!14694 e!15579)))

(declare-fun res!14698 () Bool)

(assert (=> b!24055 (=> res!14698 e!15579)))

(declare-fun e!15575 () Bool)

(assert (=> b!24055 (= res!14698 (not e!15575))))

(declare-fun res!14691 () Bool)

(assert (=> b!24055 (=> (not res!14691) (not e!15575))))

(assert (=> b!24055 (= res!14691 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24056 () Bool)

(assert (=> b!24056 (= e!15581 call!2080)))

(declare-fun b!24057 () Bool)

(declare-fun lt!8997 () Unit!519)

(assert (=> b!24057 (= e!15580 lt!8997)))

(declare-fun lt!9011 () ListLongMap!565)

(assert (=> b!24057 (= lt!9011 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!8996 () (_ BitVec 64))

(assert (=> b!24057 (= lt!8996 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9010 () (_ BitVec 64))

(assert (=> b!24057 (= lt!9010 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9016 () Unit!519)

(assert (=> b!24057 (= lt!9016 (addStillContains!14 lt!9011 lt!8996 (zeroValue!1665 lt!8141) lt!9010))))

(assert (=> b!24057 (contains!230 (+!45 lt!9011 (tuple2!971 lt!8996 (zeroValue!1665 lt!8141))) lt!9010)))

(declare-fun lt!9013 () Unit!519)

(assert (=> b!24057 (= lt!9013 lt!9016)))

(declare-fun lt!9017 () ListLongMap!565)

(assert (=> b!24057 (= lt!9017 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9006 () (_ BitVec 64))

(assert (=> b!24057 (= lt!9006 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9002 () (_ BitVec 64))

(assert (=> b!24057 (= lt!9002 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9008 () Unit!519)

(assert (=> b!24057 (= lt!9008 (addApplyDifferent!14 lt!9017 lt!9006 (minValue!1665 lt!8141) lt!9002))))

(assert (=> b!24057 (= (apply!29 (+!45 lt!9017 (tuple2!971 lt!9006 (minValue!1665 lt!8141))) lt!9002) (apply!29 lt!9017 lt!9002))))

(declare-fun lt!8998 () Unit!519)

(assert (=> b!24057 (= lt!8998 lt!9008)))

(declare-fun lt!9009 () ListLongMap!565)

(assert (=> b!24057 (= lt!9009 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9003 () (_ BitVec 64))

(assert (=> b!24057 (= lt!9003 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9005 () (_ BitVec 64))

(assert (=> b!24057 (= lt!9005 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9004 () Unit!519)

(assert (=> b!24057 (= lt!9004 (addApplyDifferent!14 lt!9009 lt!9003 (zeroValue!1665 lt!8141) lt!9005))))

(assert (=> b!24057 (= (apply!29 (+!45 lt!9009 (tuple2!971 lt!9003 (zeroValue!1665 lt!8141))) lt!9005) (apply!29 lt!9009 lt!9005))))

(declare-fun lt!8999 () Unit!519)

(assert (=> b!24057 (= lt!8999 lt!9004)))

(declare-fun lt!9014 () ListLongMap!565)

(assert (=> b!24057 (= lt!9014 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9012 () (_ BitVec 64))

(assert (=> b!24057 (= lt!9012 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9001 () (_ BitVec 64))

(assert (=> b!24057 (= lt!9001 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24057 (= lt!8997 (addApplyDifferent!14 lt!9014 lt!9012 (minValue!1665 lt!8141) lt!9001))))

(assert (=> b!24057 (= (apply!29 (+!45 lt!9014 (tuple2!971 lt!9012 (minValue!1665 lt!8141))) lt!9001) (apply!29 lt!9014 lt!9001))))

(declare-fun b!24058 () Bool)

(declare-fun e!15573 () ListLongMap!565)

(assert (=> b!24058 (= e!15573 call!2080)))

(declare-fun b!24059 () Bool)

(assert (=> b!24059 (= e!15578 e!15573)))

(assert (=> b!24059 (= c!3190 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24060 () Bool)

(declare-fun c!3192 () Bool)

(assert (=> b!24060 (= c!3192 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24060 (= e!15573 e!15581)))

(declare-fun bm!2078 () Bool)

(assert (=> bm!2078 (= call!2079 call!2078)))

(declare-fun bm!2079 () Bool)

(assert (=> bm!2079 (= call!2078 call!2081)))

(declare-fun b!24061 () Bool)

(assert (=> b!24061 (= e!15582 e!15583)))

(declare-fun res!14690 () Bool)

(assert (=> b!24061 (= res!14690 call!2077)))

(assert (=> b!24061 (=> (not res!14690) (not e!15583))))

(declare-fun b!24062 () Bool)

(assert (=> b!24062 (= e!15584 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2080 () Bool)

(assert (=> bm!2080 (= call!2081 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!24063 () Bool)

(assert (=> b!24063 (= e!15575 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (= (and d!4245 c!3189) b!24053))

(assert (= (and d!4245 (not c!3189)) b!24059))

(assert (= (and b!24059 c!3190) b!24058))

(assert (= (and b!24059 (not c!3190)) b!24060))

(assert (= (and b!24060 c!3192) b!24056))

(assert (= (and b!24060 (not c!3192)) b!24043))

(assert (= (or b!24056 b!24043) bm!2078))

(assert (= (or b!24058 bm!2078) bm!2079))

(assert (= (or b!24058 b!24056) bm!2074))

(assert (= (or b!24053 bm!2079) bm!2080))

(assert (= (or b!24053 bm!2074) bm!2075))

(assert (= (and d!4245 res!14696) b!24062))

(assert (= (and d!4245 c!3191) b!24057))

(assert (= (and d!4245 (not c!3191)) b!24048))

(assert (= (and d!4245 res!14692) b!24055))

(assert (= (and b!24055 res!14691) b!24063))

(assert (= (and b!24055 (not res!14698)) b!24054))

(assert (= (and b!24054 res!14697) b!24045))

(assert (= (and b!24055 res!14694) b!24046))

(assert (= (and b!24046 c!3187) b!24061))

(assert (= (and b!24046 (not c!3187)) b!24051))

(assert (= (and b!24061 res!14690) b!24050))

(assert (= (or b!24061 b!24051) bm!2076))

(assert (= (and b!24046 res!14695) b!24044))

(assert (= (and b!24044 c!3188) b!24047))

(assert (= (and b!24044 (not c!3188)) b!24049))

(assert (= (and b!24047 res!14693) b!24052))

(assert (= (or b!24047 b!24049) bm!2077))

(declare-fun b_lambda!1599 () Bool)

(assert (=> (not b_lambda!1599) (not b!24045)))

(assert (=> b!24045 t!3234))

(declare-fun b_and!1511 () Bool)

(assert (= b_and!1509 (and (=> t!3234 result!1095) b_and!1511)))

(assert (=> b!24054 m!17198))

(assert (=> b!24054 m!17198))

(declare-fun m!18205 () Bool)

(assert (=> b!24054 m!18205))

(declare-fun m!18207 () Bool)

(assert (=> b!24053 m!18207))

(assert (=> b!24045 m!17413))

(assert (=> b!24045 m!17304))

(assert (=> b!24045 m!17415))

(assert (=> b!24045 m!17198))

(declare-fun m!18209 () Bool)

(assert (=> b!24045 m!18209))

(assert (=> b!24045 m!17198))

(assert (=> b!24045 m!17413))

(assert (=> b!24045 m!17304))

(assert (=> b!24062 m!17198))

(assert (=> b!24062 m!17198))

(assert (=> b!24062 m!17310))

(declare-fun m!18211 () Bool)

(assert (=> bm!2075 m!18211))

(assert (=> b!24063 m!17198))

(assert (=> b!24063 m!17198))

(assert (=> b!24063 m!17310))

(declare-fun m!18213 () Bool)

(assert (=> bm!2076 m!18213))

(declare-fun m!18215 () Bool)

(assert (=> b!24052 m!18215))

(declare-fun m!18217 () Bool)

(assert (=> bm!2077 m!18217))

(declare-fun m!18219 () Bool)

(assert (=> b!24050 m!18219))

(declare-fun m!18221 () Bool)

(assert (=> bm!2080 m!18221))

(assert (=> d!4245 m!17050))

(declare-fun m!18223 () Bool)

(assert (=> b!24057 m!18223))

(declare-fun m!18225 () Bool)

(assert (=> b!24057 m!18225))

(declare-fun m!18227 () Bool)

(assert (=> b!24057 m!18227))

(declare-fun m!18229 () Bool)

(assert (=> b!24057 m!18229))

(declare-fun m!18231 () Bool)

(assert (=> b!24057 m!18231))

(assert (=> b!24057 m!18221))

(assert (=> b!24057 m!18225))

(assert (=> b!24057 m!17198))

(declare-fun m!18233 () Bool)

(assert (=> b!24057 m!18233))

(declare-fun m!18235 () Bool)

(assert (=> b!24057 m!18235))

(declare-fun m!18237 () Bool)

(assert (=> b!24057 m!18237))

(assert (=> b!24057 m!18235))

(declare-fun m!18239 () Bool)

(assert (=> b!24057 m!18239))

(declare-fun m!18241 () Bool)

(assert (=> b!24057 m!18241))

(declare-fun m!18243 () Bool)

(assert (=> b!24057 m!18243))

(declare-fun m!18245 () Bool)

(assert (=> b!24057 m!18245))

(assert (=> b!24057 m!18245))

(declare-fun m!18247 () Bool)

(assert (=> b!24057 m!18247))

(assert (=> b!24057 m!18241))

(declare-fun m!18249 () Bool)

(assert (=> b!24057 m!18249))

(declare-fun m!18251 () Bool)

(assert (=> b!24057 m!18251))

(assert (=> b!23546 d!4245))

(assert (=> bm!2001 d!4023))

(assert (=> d!4015 d!4017))

(declare-fun d!4247 () Bool)

(assert (=> d!4247 (arrayNoDuplicates!0 lt!8321 lt!8319 lt!8325)))

(assert (=> d!4247 true))

(declare-fun res!14701 () Unit!519)

(assert (=> d!4247 (= (choose!111 lt!8321 lt!8319 (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001) lt!8325) res!14701)))

(declare-fun bs!986 () Bool)

(assert (= bs!986 d!4247))

(assert (=> bs!986 m!16804))

(assert (=> d!4015 d!4247))

(declare-fun d!4249 () Bool)

(declare-fun e!15587 () Bool)

(assert (=> d!4249 e!15587))

(declare-fun res!14702 () Bool)

(assert (=> d!4249 (=> res!14702 e!15587)))

(declare-fun lt!9021 () Bool)

(assert (=> d!4249 (= res!14702 (not lt!9021))))

(declare-fun lt!9020 () Bool)

(assert (=> d!4249 (= lt!9021 lt!9020)))

(declare-fun lt!9019 () Unit!519)

(declare-fun e!15586 () Unit!519)

(assert (=> d!4249 (= lt!9019 e!15586)))

(declare-fun c!3193 () Bool)

(assert (=> d!4249 (= c!3193 lt!9020)))

(assert (=> d!4249 (= lt!9020 (containsKey!24 (toList!298 lt!8695) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4249 (= (contains!230 lt!8695 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9021)))

(declare-fun b!24064 () Bool)

(declare-fun lt!9018 () Unit!519)

(assert (=> b!24064 (= e!15586 lt!9018)))

(assert (=> b!24064 (= lt!9018 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8695) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> b!24064 (isDefined!22 (getValueByKey!60 (toList!298 lt!8695) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24065 () Bool)

(declare-fun Unit!562 () Unit!519)

(assert (=> b!24065 (= e!15586 Unit!562)))

(declare-fun b!24066 () Bool)

(assert (=> b!24066 (= e!15587 (isDefined!22 (getValueByKey!60 (toList!298 lt!8695) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (= (and d!4249 c!3193) b!24064))

(assert (= (and d!4249 (not c!3193)) b!24065))

(assert (= (and d!4249 (not res!14702)) b!24066))

(declare-fun m!18253 () Bool)

(assert (=> d!4249 m!18253))

(declare-fun m!18255 () Bool)

(assert (=> b!24064 m!18255))

(assert (=> b!24064 m!17372))

(assert (=> b!24064 m!17372))

(declare-fun m!18257 () Bool)

(assert (=> b!24064 m!18257))

(assert (=> b!24066 m!17372))

(assert (=> b!24066 m!17372))

(assert (=> b!24066 m!18257))

(assert (=> d!4045 d!4249))

(declare-fun b!24067 () Bool)

(declare-fun e!15588 () Option!66)

(assert (=> b!24067 (= e!15588 (Some!65 (_2!493 (h!1127 lt!8693))))))

(declare-fun b!24070 () Bool)

(declare-fun e!15589 () Option!66)

(assert (=> b!24070 (= e!15589 None!64)))

(declare-fun b!24069 () Bool)

(assert (=> b!24069 (= e!15589 (getValueByKey!60 (t!3229 lt!8693) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24068 () Bool)

(assert (=> b!24068 (= e!15588 e!15589)))

(declare-fun c!3195 () Bool)

(assert (=> b!24068 (= c!3195 (and ((_ is Cons!561) lt!8693) (not (= (_1!493 (h!1127 lt!8693)) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun d!4251 () Bool)

(declare-fun c!3194 () Bool)

(assert (=> d!4251 (= c!3194 (and ((_ is Cons!561) lt!8693) (= (_1!493 (h!1127 lt!8693)) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4251 (= (getValueByKey!60 lt!8693 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) e!15588)))

(assert (= (and d!4251 c!3194) b!24067))

(assert (= (and d!4251 (not c!3194)) b!24068))

(assert (= (and b!24068 c!3195) b!24069))

(assert (= (and b!24068 (not c!3195)) b!24070))

(declare-fun m!18259 () Bool)

(assert (=> b!24069 m!18259))

(assert (=> d!4045 d!4251))

(declare-fun d!4253 () Bool)

(assert (=> d!4253 (= (getValueByKey!60 lt!8693 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun lt!9024 () Unit!519)

(declare-fun choose!214 (List!565 (_ BitVec 64) V!1187) Unit!519)

(assert (=> d!4253 (= lt!9024 (choose!214 lt!8693 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun e!15592 () Bool)

(assert (=> d!4253 e!15592))

(declare-fun res!14707 () Bool)

(assert (=> d!4253 (=> (not res!14707) (not e!15592))))

(assert (=> d!4253 (= res!14707 (isStrictlySorted!165 lt!8693))))

(assert (=> d!4253 (= (lemmaContainsTupThenGetReturnValue!18 lt!8693 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9024)))

(declare-fun b!24075 () Bool)

(declare-fun res!14708 () Bool)

(assert (=> b!24075 (=> (not res!14708) (not e!15592))))

(assert (=> b!24075 (= res!14708 (containsKey!24 lt!8693 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24076 () Bool)

(assert (=> b!24076 (= e!15592 (contains!231 lt!8693 (tuple2!971 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (= (and d!4253 res!14707) b!24075))

(assert (= (and b!24075 res!14708) b!24076))

(assert (=> d!4253 m!17366))

(declare-fun m!18261 () Bool)

(assert (=> d!4253 m!18261))

(declare-fun m!18263 () Bool)

(assert (=> d!4253 m!18263))

(declare-fun m!18265 () Bool)

(assert (=> b!24075 m!18265))

(declare-fun m!18267 () Bool)

(assert (=> b!24076 m!18267))

(assert (=> d!4045 d!4253))

(declare-fun b!24097 () Bool)

(declare-fun e!15604 () List!565)

(assert (=> b!24097 (= e!15604 (insertStrictlySorted!18 (t!3229 (toList!298 call!1957)) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24098 () Bool)

(declare-fun e!15607 () List!565)

(declare-fun call!2091 () List!565)

(assert (=> b!24098 (= e!15607 call!2091)))

(declare-fun b!24099 () Bool)

(declare-fun e!15605 () Bool)

(declare-fun lt!9027 () List!565)

(assert (=> b!24099 (= e!15605 (contains!231 lt!9027 (tuple2!971 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun bm!2087 () Bool)

(declare-fun call!2090 () List!565)

(assert (=> bm!2087 (= call!2091 call!2090)))

(declare-fun call!2092 () List!565)

(declare-fun bm!2088 () Bool)

(declare-fun c!3207 () Bool)

(declare-fun $colon$colon!30 (List!565 tuple2!970) List!565)

(assert (=> bm!2088 (= call!2092 ($colon$colon!30 e!15604 (ite c!3207 (h!1127 (toList!298 call!1957)) (tuple2!971 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun c!3206 () Bool)

(assert (=> bm!2088 (= c!3206 c!3207)))

(declare-fun b!24100 () Bool)

(declare-fun c!3205 () Bool)

(assert (=> b!24100 (= c!3205 (and ((_ is Cons!561) (toList!298 call!1957)) (bvsgt (_1!493 (h!1127 (toList!298 call!1957))) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun e!15606 () List!565)

(assert (=> b!24100 (= e!15606 e!15607)))

(declare-fun b!24101 () Bool)

(declare-fun e!15603 () List!565)

(assert (=> b!24101 (= e!15603 call!2092)))

(declare-fun b!24102 () Bool)

(declare-fun res!14713 () Bool)

(assert (=> b!24102 (=> (not res!14713) (not e!15605))))

(assert (=> b!24102 (= res!14713 (containsKey!24 lt!9027 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24103 () Bool)

(assert (=> b!24103 (= e!15603 e!15606)))

(declare-fun c!3204 () Bool)

(assert (=> b!24103 (= c!3204 (and ((_ is Cons!561) (toList!298 call!1957)) (= (_1!493 (h!1127 (toList!298 call!1957))) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24104 () Bool)

(assert (=> b!24104 (= e!15607 call!2091)))

(declare-fun b!24105 () Bool)

(assert (=> b!24105 (= e!15604 (ite c!3204 (t!3229 (toList!298 call!1957)) (ite c!3205 (Cons!561 (h!1127 (toList!298 call!1957)) (t!3229 (toList!298 call!1957))) Nil!562)))))

(declare-fun d!4255 () Bool)

(assert (=> d!4255 e!15605))

(declare-fun res!14714 () Bool)

(assert (=> d!4255 (=> (not res!14714) (not e!15605))))

(assert (=> d!4255 (= res!14714 (isStrictlySorted!165 lt!9027))))

(assert (=> d!4255 (= lt!9027 e!15603)))

(assert (=> d!4255 (= c!3207 (and ((_ is Cons!561) (toList!298 call!1957)) (bvslt (_1!493 (h!1127 (toList!298 call!1957))) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4255 (isStrictlySorted!165 (toList!298 call!1957))))

(assert (=> d!4255 (= (insertStrictlySorted!18 (toList!298 call!1957) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9027)))

(declare-fun b!24106 () Bool)

(assert (=> b!24106 (= e!15606 call!2090)))

(declare-fun bm!2089 () Bool)

(assert (=> bm!2089 (= call!2090 call!2092)))

(assert (= (and d!4255 c!3207) b!24101))

(assert (= (and d!4255 (not c!3207)) b!24103))

(assert (= (and b!24103 c!3204) b!24106))

(assert (= (and b!24103 (not c!3204)) b!24100))

(assert (= (and b!24100 c!3205) b!24104))

(assert (= (and b!24100 (not c!3205)) b!24098))

(assert (= (or b!24104 b!24098) bm!2087))

(assert (= (or b!24106 bm!2087) bm!2089))

(assert (= (or b!24101 bm!2089) bm!2088))

(assert (= (and bm!2088 c!3206) b!24097))

(assert (= (and bm!2088 (not c!3206)) b!24105))

(assert (= (and d!4255 res!14714) b!24102))

(assert (= (and b!24102 res!14713) b!24099))

(declare-fun m!18269 () Bool)

(assert (=> d!4255 m!18269))

(declare-fun m!18271 () Bool)

(assert (=> d!4255 m!18271))

(declare-fun m!18273 () Bool)

(assert (=> b!24102 m!18273))

(declare-fun m!18275 () Bool)

(assert (=> b!24099 m!18275))

(declare-fun m!18277 () Bool)

(assert (=> bm!2088 m!18277))

(declare-fun m!18279 () Bool)

(assert (=> b!24097 m!18279))

(assert (=> d!4045 d!4255))

(declare-fun d!4257 () Bool)

(declare-fun e!15609 () Bool)

(assert (=> d!4257 e!15609))

(declare-fun res!14715 () Bool)

(assert (=> d!4257 (=> res!14715 e!15609)))

(declare-fun lt!9031 () Bool)

(assert (=> d!4257 (= res!14715 (not lt!9031))))

(declare-fun lt!9030 () Bool)

(assert (=> d!4257 (= lt!9031 lt!9030)))

(declare-fun lt!9029 () Unit!519)

(declare-fun e!15608 () Unit!519)

(assert (=> d!4257 (= lt!9029 e!15608)))

(declare-fun c!3208 () Bool)

(assert (=> d!4257 (= c!3208 lt!9030)))

(assert (=> d!4257 (= lt!9030 (containsKey!24 (toList!298 lt!8487) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (=> d!4257 (= (contains!230 lt!8487 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))) lt!9031)))

(declare-fun b!24107 () Bool)

(declare-fun lt!9028 () Unit!519)

(assert (=> b!24107 (= e!15608 lt!9028)))

(assert (=> b!24107 (= lt!9028 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8487) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (=> b!24107 (isDefined!22 (getValueByKey!60 (toList!298 lt!8487) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24108 () Bool)

(declare-fun Unit!563 () Unit!519)

(assert (=> b!24108 (= e!15608 Unit!563)))

(declare-fun b!24109 () Bool)

(assert (=> b!24109 (= e!15609 (isDefined!22 (getValueByKey!60 (toList!298 lt!8487) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(assert (= (and d!4257 c!3208) b!24107))

(assert (= (and d!4257 (not c!3208)) b!24108))

(assert (= (and d!4257 (not res!14715)) b!24109))

(declare-fun m!18281 () Bool)

(assert (=> d!4257 m!18281))

(declare-fun m!18283 () Bool)

(assert (=> b!24107 m!18283))

(assert (=> b!24107 m!17046))

(assert (=> b!24107 m!17046))

(declare-fun m!18285 () Bool)

(assert (=> b!24107 m!18285))

(assert (=> b!24109 m!17046))

(assert (=> b!24109 m!17046))

(assert (=> b!24109 m!18285))

(assert (=> d!3989 d!4257))

(declare-fun b!24110 () Bool)

(declare-fun e!15610 () Option!66)

(assert (=> b!24110 (= e!15610 (Some!65 (_2!493 (h!1127 lt!8485))))))

(declare-fun b!24113 () Bool)

(declare-fun e!15611 () Option!66)

(assert (=> b!24113 (= e!15611 None!64)))

(declare-fun b!24112 () Bool)

(assert (=> b!24112 (= e!15611 (getValueByKey!60 (t!3229 lt!8485) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24111 () Bool)

(assert (=> b!24111 (= e!15610 e!15611)))

(declare-fun c!3210 () Bool)

(assert (=> b!24111 (= c!3210 (and ((_ is Cons!561) lt!8485) (not (= (_1!493 (h!1127 lt!8485)) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))))

(declare-fun c!3209 () Bool)

(declare-fun d!4259 () Bool)

(assert (=> d!4259 (= c!3209 (and ((_ is Cons!561) lt!8485) (= (_1!493 (h!1127 lt!8485)) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(assert (=> d!4259 (= (getValueByKey!60 lt!8485 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))) e!15610)))

(assert (= (and d!4259 c!3209) b!24110))

(assert (= (and d!4259 (not c!3209)) b!24111))

(assert (= (and b!24111 c!3210) b!24112))

(assert (= (and b!24111 (not c!3210)) b!24113))

(declare-fun m!18287 () Bool)

(assert (=> b!24112 m!18287))

(assert (=> d!3989 d!4259))

(declare-fun d!4261 () Bool)

(assert (=> d!4261 (= (getValueByKey!60 lt!8485 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))) (Some!65 (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun lt!9032 () Unit!519)

(assert (=> d!4261 (= lt!9032 (choose!214 lt!8485 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun e!15612 () Bool)

(assert (=> d!4261 e!15612))

(declare-fun res!14716 () Bool)

(assert (=> d!4261 (=> (not res!14716) (not e!15612))))

(assert (=> d!4261 (= res!14716 (isStrictlySorted!165 lt!8485))))

(assert (=> d!4261 (= (lemmaContainsTupThenGetReturnValue!18 lt!8485 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))) lt!9032)))

(declare-fun b!24114 () Bool)

(declare-fun res!14717 () Bool)

(assert (=> b!24114 (=> (not res!14717) (not e!15612))))

(assert (=> b!24114 (= res!14717 (containsKey!24 lt!8485 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24115 () Bool)

(assert (=> b!24115 (= e!15612 (contains!231 lt!8485 (tuple2!971 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(assert (= (and d!4261 res!14716) b!24114))

(assert (= (and b!24114 res!14717) b!24115))

(assert (=> d!4261 m!17040))

(declare-fun m!18289 () Bool)

(assert (=> d!4261 m!18289))

(declare-fun m!18291 () Bool)

(assert (=> d!4261 m!18291))

(declare-fun m!18293 () Bool)

(assert (=> b!24114 m!18293))

(declare-fun m!18295 () Bool)

(assert (=> b!24115 m!18295))

(assert (=> d!3989 d!4261))

(declare-fun b!24116 () Bool)

(declare-fun e!15614 () List!565)

(assert (=> b!24116 (= e!15614 (insertStrictlySorted!18 (t!3229 (toList!298 (ite c!2967 call!1926 call!1913))) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24117 () Bool)

(declare-fun e!15617 () List!565)

(declare-fun call!2094 () List!565)

(assert (=> b!24117 (= e!15617 call!2094)))

(declare-fun b!24118 () Bool)

(declare-fun e!15615 () Bool)

(declare-fun lt!9033 () List!565)

(assert (=> b!24118 (= e!15615 (contains!231 lt!9033 (tuple2!971 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun bm!2090 () Bool)

(declare-fun call!2093 () List!565)

(assert (=> bm!2090 (= call!2094 call!2093)))

(declare-fun bm!2091 () Bool)

(declare-fun c!3214 () Bool)

(declare-fun call!2095 () List!565)

(assert (=> bm!2091 (= call!2095 ($colon$colon!30 e!15614 (ite c!3214 (h!1127 (toList!298 (ite c!2967 call!1926 call!1913))) (tuple2!971 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))))

(declare-fun c!3213 () Bool)

(assert (=> bm!2091 (= c!3213 c!3214)))

(declare-fun b!24119 () Bool)

(declare-fun c!3212 () Bool)

(assert (=> b!24119 (= c!3212 (and ((_ is Cons!561) (toList!298 (ite c!2967 call!1926 call!1913))) (bvsgt (_1!493 (h!1127 (toList!298 (ite c!2967 call!1926 call!1913)))) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun e!15616 () List!565)

(assert (=> b!24119 (= e!15616 e!15617)))

(declare-fun b!24120 () Bool)

(declare-fun e!15613 () List!565)

(assert (=> b!24120 (= e!15613 call!2095)))

(declare-fun b!24121 () Bool)

(declare-fun res!14718 () Bool)

(assert (=> b!24121 (=> (not res!14718) (not e!15615))))

(assert (=> b!24121 (= res!14718 (containsKey!24 lt!9033 (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24122 () Bool)

(assert (=> b!24122 (= e!15613 e!15616)))

(declare-fun c!3211 () Bool)

(assert (=> b!24122 (= c!3211 (and ((_ is Cons!561) (toList!298 (ite c!2967 call!1926 call!1913))) (= (_1!493 (h!1127 (toList!298 (ite c!2967 call!1926 call!1913)))) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun b!24123 () Bool)

(assert (=> b!24123 (= e!15617 call!2094)))

(declare-fun b!24124 () Bool)

(assert (=> b!24124 (= e!15614 (ite c!3211 (t!3229 (toList!298 (ite c!2967 call!1926 call!1913))) (ite c!3212 (Cons!561 (h!1127 (toList!298 (ite c!2967 call!1926 call!1913))) (t!3229 (toList!298 (ite c!2967 call!1926 call!1913)))) Nil!562)))))

(declare-fun d!4263 () Bool)

(assert (=> d!4263 e!15615))

(declare-fun res!14719 () Bool)

(assert (=> d!4263 (=> (not res!14719) (not e!15615))))

(assert (=> d!4263 (= res!14719 (isStrictlySorted!165 lt!9033))))

(assert (=> d!4263 (= lt!9033 e!15613)))

(assert (=> d!4263 (= c!3214 (and ((_ is Cons!561) (toList!298 (ite c!2967 call!1926 call!1913))) (bvslt (_1!493 (h!1127 (toList!298 (ite c!2967 call!1926 call!1913)))) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(assert (=> d!4263 (isStrictlySorted!165 (toList!298 (ite c!2967 call!1926 call!1913)))))

(assert (=> d!4263 (= (insertStrictlySorted!18 (toList!298 (ite c!2967 call!1926 call!1913)) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (_2!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))) lt!9033)))

(declare-fun b!24125 () Bool)

(assert (=> b!24125 (= e!15616 call!2093)))

(declare-fun bm!2092 () Bool)

(assert (=> bm!2092 (= call!2093 call!2095)))

(assert (= (and d!4263 c!3214) b!24120))

(assert (= (and d!4263 (not c!3214)) b!24122))

(assert (= (and b!24122 c!3211) b!24125))

(assert (= (and b!24122 (not c!3211)) b!24119))

(assert (= (and b!24119 c!3212) b!24123))

(assert (= (and b!24119 (not c!3212)) b!24117))

(assert (= (or b!24123 b!24117) bm!2090))

(assert (= (or b!24125 bm!2090) bm!2092))

(assert (= (or b!24120 bm!2092) bm!2091))

(assert (= (and bm!2091 c!3213) b!24116))

(assert (= (and bm!2091 (not c!3213)) b!24124))

(assert (= (and d!4263 res!14719) b!24121))

(assert (= (and b!24121 res!14718) b!24118))

(declare-fun m!18297 () Bool)

(assert (=> d!4263 m!18297))

(declare-fun m!18299 () Bool)

(assert (=> d!4263 m!18299))

(declare-fun m!18301 () Bool)

(assert (=> b!24121 m!18301))

(declare-fun m!18303 () Bool)

(assert (=> b!24118 m!18303))

(declare-fun m!18305 () Bool)

(assert (=> bm!2091 m!18305))

(declare-fun m!18307 () Bool)

(assert (=> b!24116 m!18307))

(assert (=> d!3989 d!4263))

(declare-fun d!4265 () Bool)

(declare-fun e!15619 () Bool)

(assert (=> d!4265 e!15619))

(declare-fun res!14720 () Bool)

(assert (=> d!4265 (=> res!14720 e!15619)))

(declare-fun lt!9037 () Bool)

(assert (=> d!4265 (= res!14720 (not lt!9037))))

(declare-fun lt!9036 () Bool)

(assert (=> d!4265 (= lt!9037 lt!9036)))

(declare-fun lt!9035 () Unit!519)

(declare-fun e!15618 () Unit!519)

(assert (=> d!4265 (= lt!9035 e!15618)))

(declare-fun c!3215 () Bool)

(assert (=> d!4265 (= c!3215 lt!9036)))

(assert (=> d!4265 (= lt!9036 (containsKey!24 (toList!298 lt!8459) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4265 (= (contains!230 lt!8459 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9037)))

(declare-fun b!24126 () Bool)

(declare-fun lt!9034 () Unit!519)

(assert (=> b!24126 (= e!15618 lt!9034)))

(assert (=> b!24126 (= lt!9034 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8459) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24126 (isDefined!22 (getValueByKey!60 (toList!298 lt!8459) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24127 () Bool)

(declare-fun Unit!564 () Unit!519)

(assert (=> b!24127 (= e!15618 Unit!564)))

(declare-fun b!24128 () Bool)

(assert (=> b!24128 (= e!15619 (isDefined!22 (getValueByKey!60 (toList!298 lt!8459) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4265 c!3215) b!24126))

(assert (= (and d!4265 (not c!3215)) b!24127))

(assert (= (and d!4265 (not res!14720)) b!24128))

(declare-fun m!18309 () Bool)

(assert (=> d!4265 m!18309))

(declare-fun m!18311 () Bool)

(assert (=> b!24126 m!18311))

(declare-fun m!18313 () Bool)

(assert (=> b!24126 m!18313))

(assert (=> b!24126 m!18313))

(declare-fun m!18315 () Bool)

(assert (=> b!24126 m!18315))

(assert (=> b!24128 m!18313))

(assert (=> b!24128 m!18313))

(assert (=> b!24128 m!18315))

(assert (=> bm!1985 d!4265))

(assert (=> b!23461 d!4123))

(declare-fun d!4267 () Bool)

(declare-fun e!15621 () Bool)

(assert (=> d!4267 e!15621))

(declare-fun res!14721 () Bool)

(assert (=> d!4267 (=> res!14721 e!15621)))

(declare-fun lt!9041 () Bool)

(assert (=> d!4267 (= res!14721 (not lt!9041))))

(declare-fun lt!9040 () Bool)

(assert (=> d!4267 (= lt!9041 lt!9040)))

(declare-fun lt!9039 () Unit!519)

(declare-fun e!15620 () Unit!519)

(assert (=> d!4267 (= lt!9039 e!15620)))

(declare-fun c!3216 () Bool)

(assert (=> d!4267 (= c!3216 lt!9040)))

(assert (=> d!4267 (= lt!9040 (containsKey!24 (toList!298 lt!8591) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4267 (= (contains!230 lt!8591 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) lt!9041)))

(declare-fun b!24129 () Bool)

(declare-fun lt!9038 () Unit!519)

(assert (=> b!24129 (= e!15620 lt!9038)))

(assert (=> b!24129 (= lt!9038 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8591) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> b!24129 (isDefined!22 (getValueByKey!60 (toList!298 lt!8591) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24130 () Bool)

(declare-fun Unit!565 () Unit!519)

(assert (=> b!24130 (= e!15620 Unit!565)))

(declare-fun b!24131 () Bool)

(assert (=> b!24131 (= e!15621 (isDefined!22 (getValueByKey!60 (toList!298 lt!8591) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4267 c!3216) b!24129))

(assert (= (and d!4267 (not c!3216)) b!24130))

(assert (= (and d!4267 (not res!14721)) b!24131))

(declare-fun m!18317 () Bool)

(assert (=> d!4267 m!18317))

(declare-fun m!18319 () Bool)

(assert (=> b!24129 m!18319))

(assert (=> b!24129 m!17154))

(assert (=> b!24129 m!17154))

(declare-fun m!18321 () Bool)

(assert (=> b!24129 m!18321))

(assert (=> b!24131 m!17154))

(assert (=> b!24131 m!17154))

(assert (=> b!24131 m!18321))

(assert (=> d!4005 d!4267))

(declare-fun b!24132 () Bool)

(declare-fun e!15622 () Option!66)

(assert (=> b!24132 (= e!15622 (Some!65 (_2!493 (h!1127 lt!8589))))))

(declare-fun b!24135 () Bool)

(declare-fun e!15623 () Option!66)

(assert (=> b!24135 (= e!15623 None!64)))

(declare-fun b!24134 () Bool)

(assert (=> b!24134 (= e!15623 (getValueByKey!60 (t!3229 lt!8589) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24133 () Bool)

(assert (=> b!24133 (= e!15622 e!15623)))

(declare-fun c!3218 () Bool)

(assert (=> b!24133 (= c!3218 (and ((_ is Cons!561) lt!8589) (not (= (_1!493 (h!1127 lt!8589)) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun c!3217 () Bool)

(declare-fun d!4269 () Bool)

(assert (=> d!4269 (= c!3217 (and ((_ is Cons!561) lt!8589) (= (_1!493 (h!1127 lt!8589)) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (=> d!4269 (= (getValueByKey!60 lt!8589 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) e!15622)))

(assert (= (and d!4269 c!3217) b!24132))

(assert (= (and d!4269 (not c!3217)) b!24133))

(assert (= (and b!24133 c!3218) b!24134))

(assert (= (and b!24133 (not c!3218)) b!24135))

(declare-fun m!18323 () Bool)

(assert (=> b!24134 m!18323))

(assert (=> d!4005 d!4269))

(declare-fun d!4271 () Bool)

(assert (=> d!4271 (= (getValueByKey!60 lt!8589 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun lt!9042 () Unit!519)

(assert (=> d!4271 (= lt!9042 (choose!214 lt!8589 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun e!15624 () Bool)

(assert (=> d!4271 e!15624))

(declare-fun res!14722 () Bool)

(assert (=> d!4271 (=> (not res!14722) (not e!15624))))

(assert (=> d!4271 (= res!14722 (isStrictlySorted!165 lt!8589))))

(assert (=> d!4271 (= (lemmaContainsTupThenGetReturnValue!18 lt!8589 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) lt!9042)))

(declare-fun b!24136 () Bool)

(declare-fun res!14723 () Bool)

(assert (=> b!24136 (=> (not res!14723) (not e!15624))))

(assert (=> b!24136 (= res!14723 (containsKey!24 lt!8589 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24137 () Bool)

(assert (=> b!24137 (= e!15624 (contains!231 lt!8589 (tuple2!971 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4271 res!14722) b!24136))

(assert (= (and b!24136 res!14723) b!24137))

(assert (=> d!4271 m!17148))

(declare-fun m!18325 () Bool)

(assert (=> d!4271 m!18325))

(declare-fun m!18327 () Bool)

(assert (=> d!4271 m!18327))

(declare-fun m!18329 () Bool)

(assert (=> b!24136 m!18329))

(declare-fun m!18331 () Bool)

(assert (=> b!24137 m!18331))

(assert (=> d!4005 d!4271))

(declare-fun e!15626 () List!565)

(declare-fun b!24138 () Bool)

(assert (=> b!24138 (= e!15626 (insertStrictlySorted!18 (t!3229 (toList!298 call!1933)) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24139 () Bool)

(declare-fun e!15629 () List!565)

(declare-fun call!2097 () List!565)

(assert (=> b!24139 (= e!15629 call!2097)))

(declare-fun b!24140 () Bool)

(declare-fun e!15627 () Bool)

(declare-fun lt!9043 () List!565)

(assert (=> b!24140 (= e!15627 (contains!231 lt!9043 (tuple2!971 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun bm!2093 () Bool)

(declare-fun call!2096 () List!565)

(assert (=> bm!2093 (= call!2097 call!2096)))

(declare-fun bm!2094 () Bool)

(declare-fun c!3222 () Bool)

(declare-fun call!2098 () List!565)

(assert (=> bm!2094 (= call!2098 ($colon$colon!30 e!15626 (ite c!3222 (h!1127 (toList!298 call!1933)) (tuple2!971 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun c!3221 () Bool)

(assert (=> bm!2094 (= c!3221 c!3222)))

(declare-fun b!24141 () Bool)

(declare-fun c!3220 () Bool)

(assert (=> b!24141 (= c!3220 (and ((_ is Cons!561) (toList!298 call!1933)) (bvsgt (_1!493 (h!1127 (toList!298 call!1933))) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun e!15628 () List!565)

(assert (=> b!24141 (= e!15628 e!15629)))

(declare-fun b!24142 () Bool)

(declare-fun e!15625 () List!565)

(assert (=> b!24142 (= e!15625 call!2098)))

(declare-fun b!24143 () Bool)

(declare-fun res!14724 () Bool)

(assert (=> b!24143 (=> (not res!14724) (not e!15627))))

(assert (=> b!24143 (= res!14724 (containsKey!24 lt!9043 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24144 () Bool)

(assert (=> b!24144 (= e!15625 e!15628)))

(declare-fun c!3219 () Bool)

(assert (=> b!24144 (= c!3219 (and ((_ is Cons!561) (toList!298 call!1933)) (= (_1!493 (h!1127 (toList!298 call!1933))) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24145 () Bool)

(assert (=> b!24145 (= e!15629 call!2097)))

(declare-fun b!24146 () Bool)

(assert (=> b!24146 (= e!15626 (ite c!3219 (t!3229 (toList!298 call!1933)) (ite c!3220 (Cons!561 (h!1127 (toList!298 call!1933)) (t!3229 (toList!298 call!1933))) Nil!562)))))

(declare-fun d!4273 () Bool)

(assert (=> d!4273 e!15627))

(declare-fun res!14725 () Bool)

(assert (=> d!4273 (=> (not res!14725) (not e!15627))))

(assert (=> d!4273 (= res!14725 (isStrictlySorted!165 lt!9043))))

(assert (=> d!4273 (= lt!9043 e!15625)))

(assert (=> d!4273 (= c!3222 (and ((_ is Cons!561) (toList!298 call!1933)) (bvslt (_1!493 (h!1127 (toList!298 call!1933))) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (=> d!4273 (isStrictlySorted!165 (toList!298 call!1933))))

(assert (=> d!4273 (= (insertStrictlySorted!18 (toList!298 call!1933) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) lt!9043)))

(declare-fun b!24147 () Bool)

(assert (=> b!24147 (= e!15628 call!2096)))

(declare-fun bm!2095 () Bool)

(assert (=> bm!2095 (= call!2096 call!2098)))

(assert (= (and d!4273 c!3222) b!24142))

(assert (= (and d!4273 (not c!3222)) b!24144))

(assert (= (and b!24144 c!3219) b!24147))

(assert (= (and b!24144 (not c!3219)) b!24141))

(assert (= (and b!24141 c!3220) b!24145))

(assert (= (and b!24141 (not c!3220)) b!24139))

(assert (= (or b!24145 b!24139) bm!2093))

(assert (= (or b!24147 bm!2093) bm!2095))

(assert (= (or b!24142 bm!2095) bm!2094))

(assert (= (and bm!2094 c!3221) b!24138))

(assert (= (and bm!2094 (not c!3221)) b!24146))

(assert (= (and d!4273 res!14725) b!24143))

(assert (= (and b!24143 res!14724) b!24140))

(declare-fun m!18333 () Bool)

(assert (=> d!4273 m!18333))

(declare-fun m!18335 () Bool)

(assert (=> d!4273 m!18335))

(declare-fun m!18337 () Bool)

(assert (=> b!24143 m!18337))

(declare-fun m!18339 () Bool)

(assert (=> b!24140 m!18339))

(declare-fun m!18341 () Bool)

(assert (=> bm!2094 m!18341))

(declare-fun m!18343 () Bool)

(assert (=> b!24138 m!18343))

(assert (=> d!4005 d!4273))

(declare-fun d!4275 () Bool)

(declare-fun e!15630 () Bool)

(assert (=> d!4275 e!15630))

(declare-fun res!14726 () Bool)

(assert (=> d!4275 (=> (not res!14726) (not e!15630))))

(declare-fun lt!9046 () ListLongMap!565)

(assert (=> d!4275 (= res!14726 (contains!230 lt!9046 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9044 () List!565)

(assert (=> d!4275 (= lt!9046 (ListLongMap!566 lt!9044))))

(declare-fun lt!9045 () Unit!519)

(declare-fun lt!9047 () Unit!519)

(assert (=> d!4275 (= lt!9045 lt!9047)))

(assert (=> d!4275 (= (getValueByKey!60 lt!9044 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4275 (= lt!9047 (lemmaContainsTupThenGetReturnValue!18 lt!9044 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4275 (= lt!9044 (insertStrictlySorted!18 (toList!298 call!1991) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4275 (= (+!45 call!1991 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))) lt!9046)))

(declare-fun b!24148 () Bool)

(declare-fun res!14727 () Bool)

(assert (=> b!24148 (=> (not res!14727) (not e!15630))))

(assert (=> b!24148 (= res!14727 (= (getValueByKey!60 (toList!298 lt!9046) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24149 () Bool)

(assert (=> b!24149 (= e!15630 (contains!231 (toList!298 lt!9046) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4275 res!14726) b!24148))

(assert (= (and b!24148 res!14727) b!24149))

(declare-fun m!18345 () Bool)

(assert (=> d!4275 m!18345))

(declare-fun m!18347 () Bool)

(assert (=> d!4275 m!18347))

(declare-fun m!18349 () Bool)

(assert (=> d!4275 m!18349))

(declare-fun m!18351 () Bool)

(assert (=> d!4275 m!18351))

(declare-fun m!18353 () Bool)

(assert (=> b!24148 m!18353))

(declare-fun m!18355 () Bool)

(assert (=> b!24149 m!18355))

(assert (=> b!23488 d!4275))

(declare-fun d!4277 () Bool)

(declare-fun e!15632 () Bool)

(assert (=> d!4277 e!15632))

(declare-fun res!14728 () Bool)

(assert (=> d!4277 (=> res!14728 e!15632)))

(declare-fun lt!9051 () Bool)

(assert (=> d!4277 (= res!14728 (not lt!9051))))

(declare-fun lt!9050 () Bool)

(assert (=> d!4277 (= lt!9051 lt!9050)))

(declare-fun lt!9049 () Unit!519)

(declare-fun e!15631 () Unit!519)

(assert (=> d!4277 (= lt!9049 e!15631)))

(declare-fun c!3223 () Bool)

(assert (=> d!4277 (= c!3223 lt!9050)))

(assert (=> d!4277 (= lt!9050 (containsKey!24 (toList!298 lt!8744) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> d!4277 (= (contains!230 lt!8744 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) lt!9051)))

(declare-fun b!24150 () Bool)

(declare-fun lt!9048 () Unit!519)

(assert (=> b!24150 (= e!15631 lt!9048)))

(assert (=> b!24150 (= lt!9048 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8744) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24150 (isDefined!22 (getValueByKey!60 (toList!298 lt!8744) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24151 () Bool)

(declare-fun Unit!566 () Unit!519)

(assert (=> b!24151 (= e!15631 Unit!566)))

(declare-fun b!24152 () Bool)

(assert (=> b!24152 (= e!15632 (isDefined!22 (getValueByKey!60 (toList!298 lt!8744) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(assert (= (and d!4277 c!3223) b!24150))

(assert (= (and d!4277 (not c!3223)) b!24151))

(assert (= (and d!4277 (not res!14728)) b!24152))

(assert (=> d!4277 m!17198))

(declare-fun m!18357 () Bool)

(assert (=> d!4277 m!18357))

(assert (=> b!24150 m!17198))

(declare-fun m!18359 () Bool)

(assert (=> b!24150 m!18359))

(assert (=> b!24150 m!17198))

(declare-fun m!18361 () Bool)

(assert (=> b!24150 m!18361))

(assert (=> b!24150 m!18361))

(declare-fun m!18363 () Bool)

(assert (=> b!24150 m!18363))

(assert (=> b!24152 m!17198))

(assert (=> b!24152 m!18361))

(assert (=> b!24152 m!18361))

(assert (=> b!24152 m!18363))

(assert (=> b!23754 d!4277))

(declare-fun d!4279 () Bool)

(assert (=> d!4279 (= (apply!29 lt!8711 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8711) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!987 () Bool)

(assert (= bs!987 d!4279))

(declare-fun m!18365 () Bool)

(assert (=> bs!987 m!18365))

(assert (=> bs!987 m!18365))

(declare-fun m!18367 () Bool)

(assert (=> bs!987 m!18367))

(assert (=> b!23717 d!4279))

(declare-fun b!24153 () Bool)

(declare-fun e!15633 () Option!66)

(assert (=> b!24153 (= e!15633 (Some!65 (_2!493 (h!1127 (toList!298 lt!8695)))))))

(declare-fun b!24156 () Bool)

(declare-fun e!15634 () Option!66)

(assert (=> b!24156 (= e!15634 None!64)))

(declare-fun b!24155 () Bool)

(assert (=> b!24155 (= e!15634 (getValueByKey!60 (t!3229 (toList!298 lt!8695)) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24154 () Bool)

(assert (=> b!24154 (= e!15633 e!15634)))

(declare-fun c!3225 () Bool)

(assert (=> b!24154 (= c!3225 (and ((_ is Cons!561) (toList!298 lt!8695)) (not (= (_1!493 (h!1127 (toList!298 lt!8695))) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun d!4281 () Bool)

(declare-fun c!3224 () Bool)

(assert (=> d!4281 (= c!3224 (and ((_ is Cons!561) (toList!298 lt!8695)) (= (_1!493 (h!1127 (toList!298 lt!8695))) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4281 (= (getValueByKey!60 (toList!298 lt!8695) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) e!15633)))

(assert (= (and d!4281 c!3224) b!24153))

(assert (= (and d!4281 (not c!3224)) b!24154))

(assert (= (and b!24154 c!3225) b!24155))

(assert (= (and b!24154 (not c!3225)) b!24156))

(declare-fun m!18369 () Bool)

(assert (=> b!24155 m!18369))

(assert (=> b!23682 d!4281))

(declare-fun d!4283 () Bool)

(declare-fun res!14729 () Bool)

(declare-fun e!15635 () Bool)

(assert (=> d!4283 (=> res!14729 e!15635)))

(assert (=> d!4283 (= res!14729 (= (select (arr!597 lt!8307) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_1!493 lt!8312)))))

(assert (=> d!4283 (= (arrayContainsKey!0 lt!8307 (_1!493 lt!8312) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!15635)))

(declare-fun b!24157 () Bool)

(declare-fun e!15636 () Bool)

(assert (=> b!24157 (= e!15635 e!15636)))

(declare-fun res!14730 () Bool)

(assert (=> b!24157 (=> (not res!14730) (not e!15636))))

(assert (=> b!24157 (= res!14730 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!693 lt!8307)))))

(declare-fun b!24158 () Bool)

(assert (=> b!24158 (= e!15636 (arrayContainsKey!0 lt!8307 (_1!493 lt!8312) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!4283 (not res!14729)) b!24157))

(assert (= (and b!24157 res!14730) b!24158))

(declare-fun m!18371 () Bool)

(assert (=> d!4283 m!18371))

(declare-fun m!18373 () Bool)

(assert (=> b!24158 m!18373))

(assert (=> b!23739 d!4283))

(declare-fun d!4285 () Bool)

(assert (=> d!4285 (= (validKeyInArray!0 (select (arr!597 lt!8315) lt!8323)) (and (not (= (select (arr!597 lt!8315) lt!8323) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 lt!8315) lt!8323) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23603 d!4285))

(assert (=> d!4043 d!4117))

(assert (=> d!4043 d!4119))

(declare-fun d!4287 () Bool)

(assert (=> d!4287 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4287 true))

(declare-fun _$8!39 () Unit!519)

(assert (=> d!4287 (= (choose!205 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))) _$8!39)))

(declare-fun bs!988 () Bool)

(assert (= bs!988 d!4287))

(assert (=> bs!988 m!17036))

(assert (=> bs!988 m!17036))

(assert (=> bs!988 m!17212))

(assert (=> bs!988 m!17362))

(assert (=> d!4043 d!4287))

(declare-fun b!24159 () Bool)

(declare-fun e!15645 () ListLongMap!565)

(declare-fun call!2101 () ListLongMap!565)

(assert (=> b!24159 (= e!15645 call!2101)))

(declare-fun bm!2096 () Bool)

(declare-fun call!2102 () ListLongMap!565)

(declare-fun call!2104 () ListLongMap!565)

(assert (=> bm!2096 (= call!2102 call!2104)))

(declare-fun b!24160 () Bool)

(declare-fun e!15641 () Bool)

(declare-fun e!15649 () Bool)

(assert (=> b!24160 (= e!15641 e!15649)))

(declare-fun c!3227 () Bool)

(assert (=> b!24160 (= c!3227 (not (= (bvand lt!8360 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24161 () Bool)

(declare-fun e!15640 () Bool)

(declare-fun lt!9056 () ListLongMap!565)

(assert (=> b!24161 (= e!15640 (= (apply!29 lt!9056 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24161 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!487 lt!8138)))))))

(assert (=> b!24161 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun c!3229 () Bool)

(declare-fun call!2103 () ListLongMap!565)

(declare-fun call!2100 () ListLongMap!565)

(declare-fun c!3228 () Bool)

(declare-fun bm!2097 () Bool)

(assert (=> bm!2097 (= call!2104 (+!45 (ite c!3228 call!2103 (ite c!3229 call!2100 call!2101)) (ite (or c!3228 c!3229) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24162 () Bool)

(declare-fun res!14736 () Bool)

(assert (=> b!24162 (=> (not res!14736) (not e!15641))))

(declare-fun e!15646 () Bool)

(assert (=> b!24162 (= res!14736 e!15646)))

(declare-fun c!3226 () Bool)

(assert (=> b!24162 (= c!3226 (not (= (bvand lt!8360 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2098 () Bool)

(declare-fun call!2099 () Bool)

(assert (=> bm!2098 (= call!2099 (contains!230 lt!9056 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24163 () Bool)

(declare-fun e!15638 () Bool)

(assert (=> b!24163 (= e!15649 e!15638)))

(declare-fun res!14734 () Bool)

(declare-fun call!2105 () Bool)

(assert (=> b!24163 (= res!14734 call!2105)))

(assert (=> b!24163 (=> (not res!14734) (not e!15638))))

(declare-fun b!24164 () Bool)

(declare-fun e!15644 () Unit!519)

(declare-fun Unit!567 () Unit!519)

(assert (=> b!24164 (= e!15644 Unit!567)))

(declare-fun b!24165 () Bool)

(assert (=> b!24165 (= e!15649 (not call!2105))))

(declare-fun b!24166 () Bool)

(declare-fun e!15647 () Bool)

(assert (=> b!24166 (= e!15647 (= (apply!29 lt!9056 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!487 lt!8138))))))

(declare-fun bm!2099 () Bool)

(assert (=> bm!2099 (= call!2105 (contains!230 lt!9056 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24167 () Bool)

(assert (=> b!24167 (= e!15646 (not call!2099))))

(declare-fun d!4289 () Bool)

(assert (=> d!4289 e!15641))

(declare-fun res!14733 () Bool)

(assert (=> d!4289 (=> (not res!14733) (not e!15641))))

(assert (=> d!4289 (= res!14733 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun lt!9071 () ListLongMap!565)

(assert (=> d!4289 (= lt!9056 lt!9071)))

(declare-fun lt!9063 () Unit!519)

(assert (=> d!4289 (= lt!9063 e!15644)))

(declare-fun c!3230 () Bool)

(declare-fun e!15648 () Bool)

(assert (=> d!4289 (= c!3230 e!15648)))

(declare-fun res!14737 () Bool)

(assert (=> d!4289 (=> (not res!14737) (not e!15648))))

(assert (=> d!4289 (= res!14737 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun e!15642 () ListLongMap!565)

(assert (=> d!4289 (= lt!9071 e!15642)))

(assert (=> d!4289 (= c!3228 (and (not (= (bvand lt!8360 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8360 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4289 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4289 (= (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!9056)))

(declare-fun b!24168 () Bool)

(assert (=> b!24168 (= e!15638 (= (apply!29 lt!9056 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun b!24169 () Bool)

(assert (=> b!24169 (= e!15642 (+!45 call!2104 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun b!24170 () Bool)

(declare-fun e!15643 () Bool)

(assert (=> b!24170 (= e!15643 e!15640)))

(declare-fun res!14738 () Bool)

(assert (=> b!24170 (=> (not res!14738) (not e!15640))))

(assert (=> b!24170 (= res!14738 (contains!230 lt!9056 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!24170 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!24171 () Bool)

(declare-fun res!14735 () Bool)

(assert (=> b!24171 (=> (not res!14735) (not e!15641))))

(assert (=> b!24171 (= res!14735 e!15643)))

(declare-fun res!14739 () Bool)

(assert (=> b!24171 (=> res!14739 e!15643)))

(declare-fun e!15639 () Bool)

(assert (=> b!24171 (= res!14739 (not e!15639))))

(declare-fun res!14732 () Bool)

(assert (=> b!24171 (=> (not res!14732) (not e!15639))))

(assert (=> b!24171 (= res!14732 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!24172 () Bool)

(assert (=> b!24172 (= e!15645 call!2102)))

(declare-fun b!24173 () Bool)

(declare-fun lt!9053 () Unit!519)

(assert (=> b!24173 (= e!15644 lt!9053)))

(declare-fun lt!9067 () ListLongMap!565)

(assert (=> b!24173 (= lt!9067 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9052 () (_ BitVec 64))

(assert (=> b!24173 (= lt!9052 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9066 () (_ BitVec 64))

(assert (=> b!24173 (= lt!9066 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!9072 () Unit!519)

(assert (=> b!24173 (= lt!9072 (addStillContains!14 lt!9067 lt!9052 (zeroValue!1665 (_2!487 lt!8138)) lt!9066))))

(assert (=> b!24173 (contains!230 (+!45 lt!9067 (tuple2!971 lt!9052 (zeroValue!1665 (_2!487 lt!8138)))) lt!9066)))

(declare-fun lt!9069 () Unit!519)

(assert (=> b!24173 (= lt!9069 lt!9072)))

(declare-fun lt!9073 () ListLongMap!565)

(assert (=> b!24173 (= lt!9073 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9062 () (_ BitVec 64))

(assert (=> b!24173 (= lt!9062 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9058 () (_ BitVec 64))

(assert (=> b!24173 (= lt!9058 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!9064 () Unit!519)

(assert (=> b!24173 (= lt!9064 (addApplyDifferent!14 lt!9073 lt!9062 (minValue!1665 (v!1601 (underlying!115 thiss!938))) lt!9058))))

(assert (=> b!24173 (= (apply!29 (+!45 lt!9073 (tuple2!971 lt!9062 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!9058) (apply!29 lt!9073 lt!9058))))

(declare-fun lt!9054 () Unit!519)

(assert (=> b!24173 (= lt!9054 lt!9064)))

(declare-fun lt!9065 () ListLongMap!565)

(assert (=> b!24173 (= lt!9065 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9059 () (_ BitVec 64))

(assert (=> b!24173 (= lt!9059 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9061 () (_ BitVec 64))

(assert (=> b!24173 (= lt!9061 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!9060 () Unit!519)

(assert (=> b!24173 (= lt!9060 (addApplyDifferent!14 lt!9065 lt!9059 (zeroValue!1665 (_2!487 lt!8138)) lt!9061))))

(assert (=> b!24173 (= (apply!29 (+!45 lt!9065 (tuple2!971 lt!9059 (zeroValue!1665 (_2!487 lt!8138)))) lt!9061) (apply!29 lt!9065 lt!9061))))

(declare-fun lt!9055 () Unit!519)

(assert (=> b!24173 (= lt!9055 lt!9060)))

(declare-fun lt!9070 () ListLongMap!565)

(assert (=> b!24173 (= lt!9070 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9068 () (_ BitVec 64))

(assert (=> b!24173 (= lt!9068 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9057 () (_ BitVec 64))

(assert (=> b!24173 (= lt!9057 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(assert (=> b!24173 (= lt!9053 (addApplyDifferent!14 lt!9070 lt!9068 (minValue!1665 (v!1601 (underlying!115 thiss!938))) lt!9057))))

(assert (=> b!24173 (= (apply!29 (+!45 lt!9070 (tuple2!971 lt!9068 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!9057) (apply!29 lt!9070 lt!9057))))

(declare-fun b!24174 () Bool)

(declare-fun e!15637 () ListLongMap!565)

(assert (=> b!24174 (= e!15637 call!2102)))

(declare-fun b!24175 () Bool)

(assert (=> b!24175 (= e!15642 e!15637)))

(assert (=> b!24175 (= c!3229 (and (not (= (bvand lt!8360 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!8360 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24176 () Bool)

(declare-fun c!3231 () Bool)

(assert (=> b!24176 (= c!3231 (and (not (= (bvand lt!8360 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!8360 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24176 (= e!15637 e!15645)))

(declare-fun bm!2100 () Bool)

(assert (=> bm!2100 (= call!2101 call!2100)))

(declare-fun bm!2101 () Bool)

(assert (=> bm!2101 (= call!2100 call!2103)))

(declare-fun b!24177 () Bool)

(assert (=> b!24177 (= e!15646 e!15647)))

(declare-fun res!14731 () Bool)

(assert (=> b!24177 (= res!14731 call!2099)))

(assert (=> b!24177 (=> (not res!14731) (not e!15647))))

(declare-fun b!24178 () Bool)

(assert (=> b!24178 (= e!15648 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun bm!2102 () Bool)

(assert (=> bm!2102 (= call!2103 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8360 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!24179 () Bool)

(assert (=> b!24179 (= e!15639 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (= (and d!4289 c!3228) b!24169))

(assert (= (and d!4289 (not c!3228)) b!24175))

(assert (= (and b!24175 c!3229) b!24174))

(assert (= (and b!24175 (not c!3229)) b!24176))

(assert (= (and b!24176 c!3231) b!24172))

(assert (= (and b!24176 (not c!3231)) b!24159))

(assert (= (or b!24172 b!24159) bm!2100))

(assert (= (or b!24174 bm!2100) bm!2101))

(assert (= (or b!24174 b!24172) bm!2096))

(assert (= (or b!24169 bm!2101) bm!2102))

(assert (= (or b!24169 bm!2096) bm!2097))

(assert (= (and d!4289 res!14737) b!24178))

(assert (= (and d!4289 c!3230) b!24173))

(assert (= (and d!4289 (not c!3230)) b!24164))

(assert (= (and d!4289 res!14733) b!24171))

(assert (= (and b!24171 res!14732) b!24179))

(assert (= (and b!24171 (not res!14739)) b!24170))

(assert (= (and b!24170 res!14738) b!24161))

(assert (= (and b!24171 res!14735) b!24162))

(assert (= (and b!24162 c!3226) b!24177))

(assert (= (and b!24162 (not c!3226)) b!24167))

(assert (= (and b!24177 res!14731) b!24166))

(assert (= (or b!24177 b!24167) bm!2098))

(assert (= (and b!24162 res!14736) b!24160))

(assert (= (and b!24160 c!3227) b!24163))

(assert (= (and b!24160 (not c!3227)) b!24165))

(assert (= (and b!24163 res!14734) b!24168))

(assert (= (or b!24163 b!24165) bm!2099))

(declare-fun b_lambda!1601 () Bool)

(assert (=> (not b_lambda!1601) (not b!24161)))

(assert (=> b!24161 t!3232))

(declare-fun b_and!1513 () Bool)

(assert (= b_and!1511 (and (=> t!3232 result!1093) b_and!1513)))

(assert (=> b!24170 m!16908))

(assert (=> b!24170 m!16908))

(declare-fun m!18375 () Bool)

(assert (=> b!24170 m!18375))

(declare-fun m!18377 () Bool)

(assert (=> b!24169 m!18377))

(assert (=> b!24161 m!16914))

(assert (=> b!24161 m!16916))

(assert (=> b!24161 m!16918))

(assert (=> b!24161 m!16908))

(declare-fun m!18379 () Bool)

(assert (=> b!24161 m!18379))

(assert (=> b!24161 m!16908))

(assert (=> b!24161 m!16914))

(assert (=> b!24161 m!16916))

(assert (=> b!24178 m!16908))

(assert (=> b!24178 m!16908))

(assert (=> b!24178 m!16922))

(declare-fun m!18381 () Bool)

(assert (=> bm!2097 m!18381))

(assert (=> b!24179 m!16908))

(assert (=> b!24179 m!16908))

(assert (=> b!24179 m!16922))

(declare-fun m!18383 () Bool)

(assert (=> bm!2098 m!18383))

(declare-fun m!18385 () Bool)

(assert (=> b!24168 m!18385))

(declare-fun m!18387 () Bool)

(assert (=> bm!2099 m!18387))

(declare-fun m!18389 () Bool)

(assert (=> b!24166 m!18389))

(declare-fun m!18391 () Bool)

(assert (=> bm!2102 m!18391))

(assert (=> d!4289 m!16878))

(declare-fun m!18393 () Bool)

(assert (=> b!24173 m!18393))

(declare-fun m!18395 () Bool)

(assert (=> b!24173 m!18395))

(declare-fun m!18397 () Bool)

(assert (=> b!24173 m!18397))

(declare-fun m!18399 () Bool)

(assert (=> b!24173 m!18399))

(declare-fun m!18401 () Bool)

(assert (=> b!24173 m!18401))

(assert (=> b!24173 m!18391))

(assert (=> b!24173 m!18395))

(assert (=> b!24173 m!16908))

(declare-fun m!18403 () Bool)

(assert (=> b!24173 m!18403))

(declare-fun m!18405 () Bool)

(assert (=> b!24173 m!18405))

(declare-fun m!18407 () Bool)

(assert (=> b!24173 m!18407))

(assert (=> b!24173 m!18405))

(declare-fun m!18409 () Bool)

(assert (=> b!24173 m!18409))

(declare-fun m!18411 () Bool)

(assert (=> b!24173 m!18411))

(declare-fun m!18413 () Bool)

(assert (=> b!24173 m!18413))

(declare-fun m!18415 () Bool)

(assert (=> b!24173 m!18415))

(assert (=> b!24173 m!18415))

(declare-fun m!18417 () Bool)

(assert (=> b!24173 m!18417))

(assert (=> b!24173 m!18411))

(declare-fun m!18419 () Bool)

(assert (=> b!24173 m!18419))

(declare-fun m!18421 () Bool)

(assert (=> b!24173 m!18421))

(assert (=> d!4043 d!4289))

(declare-fun d!4291 () Bool)

(assert (=> d!4291 (= (validMask!0 (mask!4729 (_2!487 lt!8138))) (and (or (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000000111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000001111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000011111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000001111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000011111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000001111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000011111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000000111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000001111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000011111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000000111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000001111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000011111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000000111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000001111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000011111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000000111111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000001111111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000011111111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000000111111111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000001111111111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000011111111111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00000111111111111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00001111111111111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00011111111111111111111111111111) (= (mask!4729 (_2!487 lt!8138)) #b00111111111111111111111111111111)) (bvsle (mask!4729 (_2!487 lt!8138)) #b00111111111111111111111111111111)))))

(assert (=> d!4043 d!4291))

(assert (=> b!23617 d!3965))

(declare-fun b!24180 () Bool)

(declare-fun e!15658 () ListLongMap!565)

(declare-fun call!2108 () ListLongMap!565)

(assert (=> b!24180 (= e!15658 call!2108)))

(declare-fun bm!2103 () Bool)

(declare-fun call!2109 () ListLongMap!565)

(declare-fun call!2111 () ListLongMap!565)

(assert (=> bm!2103 (= call!2109 call!2111)))

(declare-fun b!24181 () Bool)

(declare-fun e!15654 () Bool)

(declare-fun e!15662 () Bool)

(assert (=> b!24181 (= e!15654 e!15662)))

(declare-fun c!3233 () Bool)

(assert (=> b!24181 (= c!3233 (not (= (bvand (extraKeys!1640 lt!8306) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24182 () Bool)

(declare-fun e!15653 () Bool)

(declare-fun lt!9078 () ListLongMap!565)

(assert (=> b!24182 (= e!15653 (= (apply!29 lt!9078 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8306)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8306) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24182 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8306))))))

(assert (=> b!24182 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))))))

(declare-fun call!2107 () ListLongMap!565)

(declare-fun bm!2104 () Bool)

(declare-fun c!3234 () Bool)

(declare-fun c!3235 () Bool)

(declare-fun call!2110 () ListLongMap!565)

(assert (=> bm!2104 (= call!2111 (+!45 (ite c!3234 call!2110 (ite c!3235 call!2107 call!2108)) (ite (or c!3234 c!3235) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8306)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8306)))))))

(declare-fun b!24183 () Bool)

(declare-fun res!14745 () Bool)

(assert (=> b!24183 (=> (not res!14745) (not e!15654))))

(declare-fun e!15659 () Bool)

(assert (=> b!24183 (= res!14745 e!15659)))

(declare-fun c!3232 () Bool)

(assert (=> b!24183 (= c!3232 (not (= (bvand (extraKeys!1640 lt!8306) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2105 () Bool)

(declare-fun call!2106 () Bool)

(assert (=> bm!2105 (= call!2106 (contains!230 lt!9078 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24184 () Bool)

(declare-fun e!15651 () Bool)

(assert (=> b!24184 (= e!15662 e!15651)))

(declare-fun res!14743 () Bool)

(declare-fun call!2112 () Bool)

(assert (=> b!24184 (= res!14743 call!2112)))

(assert (=> b!24184 (=> (not res!14743) (not e!15651))))

(declare-fun b!24185 () Bool)

(declare-fun e!15657 () Unit!519)

(declare-fun Unit!568 () Unit!519)

(assert (=> b!24185 (= e!15657 Unit!568)))

(declare-fun b!24186 () Bool)

(assert (=> b!24186 (= e!15662 (not call!2112))))

(declare-fun b!24187 () Bool)

(declare-fun e!15660 () Bool)

(assert (=> b!24187 (= e!15660 (= (apply!29 lt!9078 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8306)))))

(declare-fun bm!2106 () Bool)

(assert (=> bm!2106 (= call!2112 (contains!230 lt!9078 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24188 () Bool)

(assert (=> b!24188 (= e!15659 (not call!2106))))

(declare-fun d!4293 () Bool)

(assert (=> d!4293 e!15654))

(declare-fun res!14742 () Bool)

(assert (=> d!4293 (=> (not res!14742) (not e!15654))))

(assert (=> d!4293 (= res!14742 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))))))))

(declare-fun lt!9093 () ListLongMap!565)

(assert (=> d!4293 (= lt!9078 lt!9093)))

(declare-fun lt!9085 () Unit!519)

(assert (=> d!4293 (= lt!9085 e!15657)))

(declare-fun c!3236 () Bool)

(declare-fun e!15661 () Bool)

(assert (=> d!4293 (= c!3236 e!15661)))

(declare-fun res!14746 () Bool)

(assert (=> d!4293 (=> (not res!14746) (not e!15661))))

(assert (=> d!4293 (= res!14746 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))))))

(declare-fun e!15655 () ListLongMap!565)

(assert (=> d!4293 (= lt!9093 e!15655)))

(assert (=> d!4293 (= c!3234 (and (not (= (bvand (extraKeys!1640 lt!8306) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8306) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4293 (validMask!0 (mask!4729 lt!8306))))

(assert (=> d!4293 (= (getCurrentListMap!129 (_keys!3163 lt!8306) (_values!1728 lt!8306) (mask!4729 lt!8306) (extraKeys!1640 lt!8306) (zeroValue!1665 lt!8306) (minValue!1665 lt!8306) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8306)) lt!9078)))

(declare-fun b!24189 () Bool)

(assert (=> b!24189 (= e!15651 (= (apply!29 lt!9078 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8306)))))

(declare-fun b!24190 () Bool)

(assert (=> b!24190 (= e!15655 (+!45 call!2111 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8306))))))

(declare-fun b!24191 () Bool)

(declare-fun e!15656 () Bool)

(assert (=> b!24191 (= e!15656 e!15653)))

(declare-fun res!14747 () Bool)

(assert (=> b!24191 (=> (not res!14747) (not e!15653))))

(assert (=> b!24191 (= res!14747 (contains!230 lt!9078 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)))))

(assert (=> b!24191 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))))))

(declare-fun b!24192 () Bool)

(declare-fun res!14744 () Bool)

(assert (=> b!24192 (=> (not res!14744) (not e!15654))))

(assert (=> b!24192 (= res!14744 e!15656)))

(declare-fun res!14748 () Bool)

(assert (=> b!24192 (=> res!14748 e!15656)))

(declare-fun e!15652 () Bool)

(assert (=> b!24192 (= res!14748 (not e!15652))))

(declare-fun res!14741 () Bool)

(assert (=> b!24192 (=> (not res!14741) (not e!15652))))

(assert (=> b!24192 (= res!14741 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))))))

(declare-fun b!24193 () Bool)

(assert (=> b!24193 (= e!15658 call!2109)))

(declare-fun b!24194 () Bool)

(declare-fun lt!9075 () Unit!519)

(assert (=> b!24194 (= e!15657 lt!9075)))

(declare-fun lt!9089 () ListLongMap!565)

(assert (=> b!24194 (= lt!9089 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8306) (_values!1728 lt!8306) (mask!4729 lt!8306) (extraKeys!1640 lt!8306) (zeroValue!1665 lt!8306) (minValue!1665 lt!8306) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8306)))))

(declare-fun lt!9074 () (_ BitVec 64))

(assert (=> b!24194 (= lt!9074 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9088 () (_ BitVec 64))

(assert (=> b!24194 (= lt!9088 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000))))

(declare-fun lt!9094 () Unit!519)

(assert (=> b!24194 (= lt!9094 (addStillContains!14 lt!9089 lt!9074 (zeroValue!1665 lt!8306) lt!9088))))

(assert (=> b!24194 (contains!230 (+!45 lt!9089 (tuple2!971 lt!9074 (zeroValue!1665 lt!8306))) lt!9088)))

(declare-fun lt!9091 () Unit!519)

(assert (=> b!24194 (= lt!9091 lt!9094)))

(declare-fun lt!9095 () ListLongMap!565)

(assert (=> b!24194 (= lt!9095 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8306) (_values!1728 lt!8306) (mask!4729 lt!8306) (extraKeys!1640 lt!8306) (zeroValue!1665 lt!8306) (minValue!1665 lt!8306) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8306)))))

(declare-fun lt!9084 () (_ BitVec 64))

(assert (=> b!24194 (= lt!9084 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9080 () (_ BitVec 64))

(assert (=> b!24194 (= lt!9080 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000))))

(declare-fun lt!9086 () Unit!519)

(assert (=> b!24194 (= lt!9086 (addApplyDifferent!14 lt!9095 lt!9084 (minValue!1665 lt!8306) lt!9080))))

(assert (=> b!24194 (= (apply!29 (+!45 lt!9095 (tuple2!971 lt!9084 (minValue!1665 lt!8306))) lt!9080) (apply!29 lt!9095 lt!9080))))

(declare-fun lt!9076 () Unit!519)

(assert (=> b!24194 (= lt!9076 lt!9086)))

(declare-fun lt!9087 () ListLongMap!565)

(assert (=> b!24194 (= lt!9087 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8306) (_values!1728 lt!8306) (mask!4729 lt!8306) (extraKeys!1640 lt!8306) (zeroValue!1665 lt!8306) (minValue!1665 lt!8306) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8306)))))

(declare-fun lt!9081 () (_ BitVec 64))

(assert (=> b!24194 (= lt!9081 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9083 () (_ BitVec 64))

(assert (=> b!24194 (= lt!9083 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000))))

(declare-fun lt!9082 () Unit!519)

(assert (=> b!24194 (= lt!9082 (addApplyDifferent!14 lt!9087 lt!9081 (zeroValue!1665 lt!8306) lt!9083))))

(assert (=> b!24194 (= (apply!29 (+!45 lt!9087 (tuple2!971 lt!9081 (zeroValue!1665 lt!8306))) lt!9083) (apply!29 lt!9087 lt!9083))))

(declare-fun lt!9077 () Unit!519)

(assert (=> b!24194 (= lt!9077 lt!9082)))

(declare-fun lt!9092 () ListLongMap!565)

(assert (=> b!24194 (= lt!9092 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8306) (_values!1728 lt!8306) (mask!4729 lt!8306) (extraKeys!1640 lt!8306) (zeroValue!1665 lt!8306) (minValue!1665 lt!8306) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8306)))))

(declare-fun lt!9090 () (_ BitVec 64))

(assert (=> b!24194 (= lt!9090 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9079 () (_ BitVec 64))

(assert (=> b!24194 (= lt!9079 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000))))

(assert (=> b!24194 (= lt!9075 (addApplyDifferent!14 lt!9092 lt!9090 (minValue!1665 lt!8306) lt!9079))))

(assert (=> b!24194 (= (apply!29 (+!45 lt!9092 (tuple2!971 lt!9090 (minValue!1665 lt!8306))) lt!9079) (apply!29 lt!9092 lt!9079))))

(declare-fun b!24195 () Bool)

(declare-fun e!15650 () ListLongMap!565)

(assert (=> b!24195 (= e!15650 call!2109)))

(declare-fun b!24196 () Bool)

(assert (=> b!24196 (= e!15655 e!15650)))

(assert (=> b!24196 (= c!3235 (and (not (= (bvand (extraKeys!1640 lt!8306) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8306) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24197 () Bool)

(declare-fun c!3237 () Bool)

(assert (=> b!24197 (= c!3237 (and (not (= (bvand (extraKeys!1640 lt!8306) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8306) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24197 (= e!15650 e!15658)))

(declare-fun bm!2107 () Bool)

(assert (=> bm!2107 (= call!2108 call!2107)))

(declare-fun bm!2108 () Bool)

(assert (=> bm!2108 (= call!2107 call!2110)))

(declare-fun b!24198 () Bool)

(assert (=> b!24198 (= e!15659 e!15660)))

(declare-fun res!14740 () Bool)

(assert (=> b!24198 (= res!14740 call!2106)))

(assert (=> b!24198 (=> (not res!14740) (not e!15660))))

(declare-fun b!24199 () Bool)

(assert (=> b!24199 (= e!15661 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)))))

(declare-fun bm!2109 () Bool)

(assert (=> bm!2109 (= call!2110 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8306) (_values!1728 lt!8306) (mask!4729 lt!8306) (extraKeys!1640 lt!8306) (zeroValue!1665 lt!8306) (minValue!1665 lt!8306) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8306)))))

(declare-fun b!24200 () Bool)

(assert (=> b!24200 (= e!15652 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)))))

(assert (= (and d!4293 c!3234) b!24190))

(assert (= (and d!4293 (not c!3234)) b!24196))

(assert (= (and b!24196 c!3235) b!24195))

(assert (= (and b!24196 (not c!3235)) b!24197))

(assert (= (and b!24197 c!3237) b!24193))

(assert (= (and b!24197 (not c!3237)) b!24180))

(assert (= (or b!24193 b!24180) bm!2107))

(assert (= (or b!24195 bm!2107) bm!2108))

(assert (= (or b!24195 b!24193) bm!2103))

(assert (= (or b!24190 bm!2108) bm!2109))

(assert (= (or b!24190 bm!2103) bm!2104))

(assert (= (and d!4293 res!14746) b!24199))

(assert (= (and d!4293 c!3236) b!24194))

(assert (= (and d!4293 (not c!3236)) b!24185))

(assert (= (and d!4293 res!14742) b!24192))

(assert (= (and b!24192 res!14741) b!24200))

(assert (= (and b!24192 (not res!14748)) b!24191))

(assert (= (and b!24191 res!14747) b!24182))

(assert (= (and b!24192 res!14744) b!24183))

(assert (= (and b!24183 c!3232) b!24198))

(assert (= (and b!24183 (not c!3232)) b!24188))

(assert (= (and b!24198 res!14740) b!24187))

(assert (= (or b!24198 b!24188) bm!2105))

(assert (= (and b!24183 res!14745) b!24181))

(assert (= (and b!24181 c!3233) b!24184))

(assert (= (and b!24181 (not c!3233)) b!24186))

(assert (= (and b!24184 res!14743) b!24189))

(assert (= (or b!24184 b!24186) bm!2106))

(declare-fun b_lambda!1603 () Bool)

(assert (=> (not b_lambda!1603) (not b!24182)))

(declare-fun tb!657 () Bool)

(declare-fun t!3236 () Bool)

(assert (=> (and b!23067 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8306)) t!3236) tb!657))

(declare-fun result!1097 () Bool)

(assert (=> tb!657 (= result!1097 tp_is_empty!1021)))

(assert (=> b!24182 t!3236))

(declare-fun b_and!1515 () Bool)

(assert (= b_and!1513 (and (=> t!3236 result!1097) b_and!1515)))

(assert (=> b!24191 m!17663))

(assert (=> b!24191 m!17663))

(declare-fun m!18423 () Bool)

(assert (=> b!24191 m!18423))

(declare-fun m!18425 () Bool)

(assert (=> b!24190 m!18425))

(declare-fun m!18427 () Bool)

(assert (=> b!24182 m!18427))

(declare-fun m!18429 () Bool)

(assert (=> b!24182 m!18429))

(declare-fun m!18431 () Bool)

(assert (=> b!24182 m!18431))

(assert (=> b!24182 m!17663))

(declare-fun m!18433 () Bool)

(assert (=> b!24182 m!18433))

(assert (=> b!24182 m!17663))

(assert (=> b!24182 m!18427))

(assert (=> b!24182 m!18429))

(assert (=> b!24199 m!17663))

(assert (=> b!24199 m!17663))

(assert (=> b!24199 m!17665))

(declare-fun m!18435 () Bool)

(assert (=> bm!2104 m!18435))

(assert (=> b!24200 m!17663))

(assert (=> b!24200 m!17663))

(assert (=> b!24200 m!17665))

(declare-fun m!18437 () Bool)

(assert (=> bm!2105 m!18437))

(declare-fun m!18439 () Bool)

(assert (=> b!24189 m!18439))

(declare-fun m!18441 () Bool)

(assert (=> bm!2106 m!18441))

(declare-fun m!18443 () Bool)

(assert (=> b!24187 m!18443))

(declare-fun m!18445 () Bool)

(assert (=> bm!2109 m!18445))

(declare-fun m!18447 () Bool)

(assert (=> d!4293 m!18447))

(declare-fun m!18449 () Bool)

(assert (=> b!24194 m!18449))

(declare-fun m!18451 () Bool)

(assert (=> b!24194 m!18451))

(declare-fun m!18453 () Bool)

(assert (=> b!24194 m!18453))

(declare-fun m!18455 () Bool)

(assert (=> b!24194 m!18455))

(declare-fun m!18457 () Bool)

(assert (=> b!24194 m!18457))

(assert (=> b!24194 m!18445))

(assert (=> b!24194 m!18451))

(assert (=> b!24194 m!17663))

(declare-fun m!18459 () Bool)

(assert (=> b!24194 m!18459))

(declare-fun m!18461 () Bool)

(assert (=> b!24194 m!18461))

(declare-fun m!18463 () Bool)

(assert (=> b!24194 m!18463))

(assert (=> b!24194 m!18461))

(declare-fun m!18465 () Bool)

(assert (=> b!24194 m!18465))

(declare-fun m!18467 () Bool)

(assert (=> b!24194 m!18467))

(declare-fun m!18469 () Bool)

(assert (=> b!24194 m!18469))

(declare-fun m!18471 () Bool)

(assert (=> b!24194 m!18471))

(assert (=> b!24194 m!18471))

(declare-fun m!18473 () Bool)

(assert (=> b!24194 m!18473))

(assert (=> b!24194 m!18467))

(declare-fun m!18475 () Bool)

(assert (=> b!24194 m!18475))

(declare-fun m!18477 () Bool)

(assert (=> b!24194 m!18477))

(assert (=> d!4067 d!4293))

(declare-fun d!4295 () Bool)

(declare-fun e!15664 () Bool)

(assert (=> d!4295 e!15664))

(declare-fun res!14749 () Bool)

(assert (=> d!4295 (=> res!14749 e!15664)))

(declare-fun lt!9099 () Bool)

(assert (=> d!4295 (= res!14749 (not lt!9099))))

(declare-fun lt!9098 () Bool)

(assert (=> d!4295 (= lt!9099 lt!9098)))

(declare-fun lt!9097 () Unit!519)

(declare-fun e!15663 () Unit!519)

(assert (=> d!4295 (= lt!9097 e!15663)))

(declare-fun c!3238 () Bool)

(assert (=> d!4295 (= c!3238 lt!9098)))

(assert (=> d!4295 (= lt!9098 (containsKey!24 (toList!298 lt!8770) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4295 (= (contains!230 lt!8770 #b1000000000000000000000000000000000000000000000000000000000000000) lt!9099)))

(declare-fun b!24201 () Bool)

(declare-fun lt!9096 () Unit!519)

(assert (=> b!24201 (= e!15663 lt!9096)))

(assert (=> b!24201 (= lt!9096 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8770) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24201 (isDefined!22 (getValueByKey!60 (toList!298 lt!8770) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24202 () Bool)

(declare-fun Unit!569 () Unit!519)

(assert (=> b!24202 (= e!15663 Unit!569)))

(declare-fun b!24203 () Bool)

(assert (=> b!24203 (= e!15664 (isDefined!22 (getValueByKey!60 (toList!298 lt!8770) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4295 c!3238) b!24201))

(assert (= (and d!4295 (not c!3238)) b!24202))

(assert (= (and d!4295 (not res!14749)) b!24203))

(declare-fun m!18479 () Bool)

(assert (=> d!4295 m!18479))

(declare-fun m!18481 () Bool)

(assert (=> b!24201 m!18481))

(assert (=> b!24201 m!17867))

(assert (=> b!24201 m!17867))

(declare-fun m!18483 () Bool)

(assert (=> b!24201 m!18483))

(assert (=> b!24203 m!17867))

(assert (=> b!24203 m!17867))

(assert (=> b!24203 m!18483))

(assert (=> bm!2041 d!4295))

(assert (=> bm!2021 d!4193))

(assert (=> bm!2014 d!4051))

(assert (=> b!23545 d!4047))

(assert (=> d!4037 d!4087))

(declare-fun lt!9100 () Bool)

(declare-fun d!4297 () Bool)

(assert (=> d!4297 (= lt!9100 (select (content!15 (toList!298 lt!8591)) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun e!15665 () Bool)

(assert (=> d!4297 (= lt!9100 e!15665)))

(declare-fun res!14750 () Bool)

(assert (=> d!4297 (=> (not res!14750) (not e!15665))))

(assert (=> d!4297 (= res!14750 ((_ is Cons!561) (toList!298 lt!8591)))))

(assert (=> d!4297 (= (contains!231 (toList!298 lt!8591) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9100)))

(declare-fun b!24204 () Bool)

(declare-fun e!15666 () Bool)

(assert (=> b!24204 (= e!15665 e!15666)))

(declare-fun res!14751 () Bool)

(assert (=> b!24204 (=> res!14751 e!15666)))

(assert (=> b!24204 (= res!14751 (= (h!1127 (toList!298 lt!8591)) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24205 () Bool)

(assert (=> b!24205 (= e!15666 (contains!231 (t!3229 (toList!298 lt!8591)) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (= (and d!4297 res!14750) b!24204))

(assert (= (and b!24204 (not res!14751)) b!24205))

(declare-fun m!18485 () Bool)

(assert (=> d!4297 m!18485))

(declare-fun m!18487 () Bool)

(assert (=> d!4297 m!18487))

(declare-fun m!18489 () Bool)

(assert (=> b!24205 m!18489))

(assert (=> b!23562 d!4297))

(declare-fun d!4299 () Bool)

(assert (=> d!4299 (= (apply!29 lt!8779 lt!8775) (get!391 (getValueByKey!60 (toList!298 lt!8779) lt!8775)))))

(declare-fun bs!989 () Bool)

(assert (= bs!989 d!4299))

(declare-fun m!18491 () Bool)

(assert (=> bs!989 m!18491))

(assert (=> bs!989 m!18491))

(declare-fun m!18493 () Bool)

(assert (=> bs!989 m!18493))

(assert (=> b!23781 d!4299))

(declare-fun d!4301 () Bool)

(declare-fun e!15667 () Bool)

(assert (=> d!4301 e!15667))

(declare-fun res!14752 () Bool)

(assert (=> d!4301 (=> (not res!14752) (not e!15667))))

(declare-fun lt!9103 () ListLongMap!565)

(assert (=> d!4301 (= res!14752 (contains!230 lt!9103 (_1!493 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9101 () List!565)

(assert (=> d!4301 (= lt!9103 (ListLongMap!566 lt!9101))))

(declare-fun lt!9102 () Unit!519)

(declare-fun lt!9104 () Unit!519)

(assert (=> d!4301 (= lt!9102 lt!9104)))

(assert (=> d!4301 (= (getValueByKey!60 lt!9101 (_1!493 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4301 (= lt!9104 (lemmaContainsTupThenGetReturnValue!18 lt!9101 (_1!493 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4301 (= lt!9101 (insertStrictlySorted!18 (toList!298 lt!8787) (_1!493 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4301 (= (+!45 lt!8787 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138)))) lt!9103)))

(declare-fun b!24206 () Bool)

(declare-fun res!14753 () Bool)

(assert (=> b!24206 (=> (not res!14753) (not e!15667))))

(assert (=> b!24206 (= res!14753 (= (getValueByKey!60 (toList!298 lt!9103) (_1!493 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24207 () Bool)

(assert (=> b!24207 (= e!15667 (contains!231 (toList!298 lt!9103) (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4301 res!14752) b!24206))

(assert (= (and b!24206 res!14753) b!24207))

(declare-fun m!18495 () Bool)

(assert (=> d!4301 m!18495))

(declare-fun m!18497 () Bool)

(assert (=> d!4301 m!18497))

(declare-fun m!18499 () Bool)

(assert (=> d!4301 m!18499))

(declare-fun m!18501 () Bool)

(assert (=> d!4301 m!18501))

(declare-fun m!18503 () Bool)

(assert (=> b!24206 m!18503))

(declare-fun m!18505 () Bool)

(assert (=> b!24207 m!18505))

(assert (=> b!23781 d!4301))

(declare-fun d!4303 () Bool)

(assert (=> d!4303 (= (apply!29 (+!45 lt!8787 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138)))) lt!8772) (apply!29 lt!8787 lt!8772))))

(declare-fun lt!9105 () Unit!519)

(assert (=> d!4303 (= lt!9105 (choose!211 lt!8787 lt!8776 (minValue!1665 (_2!487 lt!8138)) lt!8772))))

(declare-fun e!15668 () Bool)

(assert (=> d!4303 e!15668))

(declare-fun res!14754 () Bool)

(assert (=> d!4303 (=> (not res!14754) (not e!15668))))

(assert (=> d!4303 (= res!14754 (contains!230 lt!8787 lt!8772))))

(assert (=> d!4303 (= (addApplyDifferent!14 lt!8787 lt!8776 (minValue!1665 (_2!487 lt!8138)) lt!8772) lt!9105)))

(declare-fun b!24208 () Bool)

(assert (=> b!24208 (= e!15668 (not (= lt!8772 lt!8776)))))

(assert (= (and d!4303 res!14754) b!24208))

(assert (=> d!4303 m!17607))

(declare-fun m!18507 () Bool)

(assert (=> d!4303 m!18507))

(assert (=> d!4303 m!17597))

(declare-fun m!18509 () Bool)

(assert (=> d!4303 m!18509))

(assert (=> d!4303 m!17597))

(assert (=> d!4303 m!17605))

(assert (=> b!23781 d!4303))

(declare-fun d!4305 () Bool)

(assert (=> d!4305 (= (apply!29 lt!8784 lt!8771) (get!391 (getValueByKey!60 (toList!298 lt!8784) lt!8771)))))

(declare-fun bs!990 () Bool)

(assert (= bs!990 d!4305))

(declare-fun m!18511 () Bool)

(assert (=> bs!990 m!18511))

(assert (=> bs!990 m!18511))

(declare-fun m!18513 () Bool)

(assert (=> bs!990 m!18513))

(assert (=> b!23781 d!4305))

(declare-fun d!4307 () Bool)

(declare-fun e!15669 () Bool)

(assert (=> d!4307 e!15669))

(declare-fun res!14755 () Bool)

(assert (=> d!4307 (=> (not res!14755) (not e!15669))))

(declare-fun lt!9108 () ListLongMap!565)

(assert (=> d!4307 (= res!14755 (contains!230 lt!9108 (_1!493 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9106 () List!565)

(assert (=> d!4307 (= lt!9108 (ListLongMap!566 lt!9106))))

(declare-fun lt!9107 () Unit!519)

(declare-fun lt!9109 () Unit!519)

(assert (=> d!4307 (= lt!9107 lt!9109)))

(assert (=> d!4307 (= (getValueByKey!60 lt!9106 (_1!493 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4307 (= lt!9109 (lemmaContainsTupThenGetReturnValue!18 lt!9106 (_1!493 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4307 (= lt!9106 (insertStrictlySorted!18 (toList!298 lt!8784) (_1!493 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4307 (= (+!45 lt!8784 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138)))) lt!9108)))

(declare-fun b!24209 () Bool)

(declare-fun res!14756 () Bool)

(assert (=> b!24209 (=> (not res!14756) (not e!15669))))

(assert (=> b!24209 (= res!14756 (= (getValueByKey!60 (toList!298 lt!9108) (_1!493 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24210 () Bool)

(assert (=> b!24210 (= e!15669 (contains!231 (toList!298 lt!9108) (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4307 res!14755) b!24209))

(assert (= (and b!24209 res!14756) b!24210))

(declare-fun m!18515 () Bool)

(assert (=> d!4307 m!18515))

(declare-fun m!18517 () Bool)

(assert (=> d!4307 m!18517))

(declare-fun m!18519 () Bool)

(assert (=> d!4307 m!18519))

(declare-fun m!18521 () Bool)

(assert (=> d!4307 m!18521))

(declare-fun m!18523 () Bool)

(assert (=> b!24209 m!18523))

(declare-fun m!18525 () Bool)

(assert (=> b!24210 m!18525))

(assert (=> b!23781 d!4307))

(declare-fun d!4309 () Bool)

(assert (=> d!4309 (= (apply!29 (+!45 lt!8779 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138)))) lt!8775) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8779 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138))))) lt!8775)))))

(declare-fun bs!991 () Bool)

(assert (= bs!991 d!4309))

(declare-fun m!18527 () Bool)

(assert (=> bs!991 m!18527))

(assert (=> bs!991 m!18527))

(declare-fun m!18529 () Bool)

(assert (=> bs!991 m!18529))

(assert (=> b!23781 d!4309))

(declare-fun d!4311 () Bool)

(assert (=> d!4311 (= (apply!29 (+!45 lt!8787 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138)))) lt!8772) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8787 (tuple2!971 lt!8776 (minValue!1665 (_2!487 lt!8138))))) lt!8772)))))

(declare-fun bs!992 () Bool)

(assert (= bs!992 d!4311))

(declare-fun m!18531 () Bool)

(assert (=> bs!992 m!18531))

(assert (=> bs!992 m!18531))

(declare-fun m!18533 () Bool)

(assert (=> bs!992 m!18533))

(assert (=> b!23781 d!4311))

(declare-fun d!4313 () Bool)

(declare-fun e!15670 () Bool)

(assert (=> d!4313 e!15670))

(declare-fun res!14757 () Bool)

(assert (=> d!4313 (=> (not res!14757) (not e!15670))))

(declare-fun lt!9112 () ListLongMap!565)

(assert (=> d!4313 (= res!14757 (contains!230 lt!9112 (_1!493 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9110 () List!565)

(assert (=> d!4313 (= lt!9112 (ListLongMap!566 lt!9110))))

(declare-fun lt!9111 () Unit!519)

(declare-fun lt!9113 () Unit!519)

(assert (=> d!4313 (= lt!9111 lt!9113)))

(assert (=> d!4313 (= (getValueByKey!60 lt!9110 (_1!493 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4313 (= lt!9113 (lemmaContainsTupThenGetReturnValue!18 lt!9110 (_1!493 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4313 (= lt!9110 (insertStrictlySorted!18 (toList!298 lt!8781) (_1!493 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4313 (= (+!45 lt!8781 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138)))) lt!9112)))

(declare-fun b!24211 () Bool)

(declare-fun res!14758 () Bool)

(assert (=> b!24211 (=> (not res!14758) (not e!15670))))

(assert (=> b!24211 (= res!14758 (= (getValueByKey!60 (toList!298 lt!9112) (_1!493 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24212 () Bool)

(assert (=> b!24212 (= e!15670 (contains!231 (toList!298 lt!9112) (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4313 res!14757) b!24211))

(assert (= (and b!24211 res!14758) b!24212))

(declare-fun m!18535 () Bool)

(assert (=> d!4313 m!18535))

(declare-fun m!18537 () Bool)

(assert (=> d!4313 m!18537))

(declare-fun m!18539 () Bool)

(assert (=> d!4313 m!18539))

(declare-fun m!18541 () Bool)

(assert (=> d!4313 m!18541))

(declare-fun m!18543 () Bool)

(assert (=> b!24211 m!18543))

(declare-fun m!18545 () Bool)

(assert (=> b!24212 m!18545))

(assert (=> b!23781 d!4313))

(declare-fun d!4315 () Bool)

(assert (=> d!4315 (= (apply!29 lt!8787 lt!8772) (get!391 (getValueByKey!60 (toList!298 lt!8787) lt!8772)))))

(declare-fun bs!993 () Bool)

(assert (= bs!993 d!4315))

(declare-fun m!18547 () Bool)

(assert (=> bs!993 m!18547))

(assert (=> bs!993 m!18547))

(declare-fun m!18549 () Bool)

(assert (=> bs!993 m!18549))

(assert (=> b!23781 d!4315))

(declare-fun d!4317 () Bool)

(declare-fun e!15671 () Bool)

(assert (=> d!4317 e!15671))

(declare-fun res!14759 () Bool)

(assert (=> d!4317 (=> (not res!14759) (not e!15671))))

(declare-fun lt!9116 () ListLongMap!565)

(assert (=> d!4317 (= res!14759 (contains!230 lt!9116 (_1!493 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9114 () List!565)

(assert (=> d!4317 (= lt!9116 (ListLongMap!566 lt!9114))))

(declare-fun lt!9115 () Unit!519)

(declare-fun lt!9117 () Unit!519)

(assert (=> d!4317 (= lt!9115 lt!9117)))

(assert (=> d!4317 (= (getValueByKey!60 lt!9114 (_1!493 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4317 (= lt!9117 (lemmaContainsTupThenGetReturnValue!18 lt!9114 (_1!493 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4317 (= lt!9114 (insertStrictlySorted!18 (toList!298 lt!8779) (_1!493 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4317 (= (+!45 lt!8779 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138)))) lt!9116)))

(declare-fun b!24213 () Bool)

(declare-fun res!14760 () Bool)

(assert (=> b!24213 (=> (not res!14760) (not e!15671))))

(assert (=> b!24213 (= res!14760 (= (getValueByKey!60 (toList!298 lt!9116) (_1!493 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24214 () Bool)

(assert (=> b!24214 (= e!15671 (contains!231 (toList!298 lt!9116) (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4317 res!14759) b!24213))

(assert (= (and b!24213 res!14760) b!24214))

(declare-fun m!18551 () Bool)

(assert (=> d!4317 m!18551))

(declare-fun m!18553 () Bool)

(assert (=> d!4317 m!18553))

(declare-fun m!18555 () Bool)

(assert (=> d!4317 m!18555))

(declare-fun m!18557 () Bool)

(assert (=> d!4317 m!18557))

(declare-fun m!18559 () Bool)

(assert (=> b!24213 m!18559))

(declare-fun m!18561 () Bool)

(assert (=> b!24214 m!18561))

(assert (=> b!23781 d!4317))

(declare-fun d!4319 () Bool)

(assert (=> d!4319 (= (apply!29 (+!45 lt!8784 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138)))) lt!8771) (apply!29 lt!8784 lt!8771))))

(declare-fun lt!9118 () Unit!519)

(assert (=> d!4319 (= lt!9118 (choose!211 lt!8784 lt!8782 (minValue!1665 (_2!487 lt!8138)) lt!8771))))

(declare-fun e!15672 () Bool)

(assert (=> d!4319 e!15672))

(declare-fun res!14761 () Bool)

(assert (=> d!4319 (=> (not res!14761) (not e!15672))))

(assert (=> d!4319 (= res!14761 (contains!230 lt!8784 lt!8771))))

(assert (=> d!4319 (= (addApplyDifferent!14 lt!8784 lt!8782 (minValue!1665 (_2!487 lt!8138)) lt!8771) lt!9118)))

(declare-fun b!24215 () Bool)

(assert (=> b!24215 (= e!15672 (not (= lt!8771 lt!8782)))))

(assert (= (and d!4319 res!14761) b!24215))

(assert (=> d!4319 m!17587))

(declare-fun m!18563 () Bool)

(assert (=> d!4319 m!18563))

(assert (=> d!4319 m!17591))

(declare-fun m!18565 () Bool)

(assert (=> d!4319 m!18565))

(assert (=> d!4319 m!17591))

(assert (=> d!4319 m!17593))

(assert (=> b!23781 d!4319))

(declare-fun d!4321 () Bool)

(assert (=> d!4321 (= (apply!29 (+!45 lt!8784 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138)))) lt!8771) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8784 (tuple2!971 lt!8782 (minValue!1665 (_2!487 lt!8138))))) lt!8771)))))

(declare-fun bs!994 () Bool)

(assert (= bs!994 d!4321))

(declare-fun m!18567 () Bool)

(assert (=> bs!994 m!18567))

(assert (=> bs!994 m!18567))

(declare-fun m!18569 () Bool)

(assert (=> bs!994 m!18569))

(assert (=> b!23781 d!4321))

(declare-fun d!4323 () Bool)

(assert (=> d!4323 (contains!230 (+!45 lt!8781 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138)))) lt!8780)))

(declare-fun lt!9119 () Unit!519)

(assert (=> d!4323 (= lt!9119 (choose!212 lt!8781 lt!8766 (zeroValue!1665 (_2!487 lt!8138)) lt!8780))))

(assert (=> d!4323 (contains!230 lt!8781 lt!8780)))

(assert (=> d!4323 (= (addStillContains!14 lt!8781 lt!8766 (zeroValue!1665 (_2!487 lt!8138)) lt!8780) lt!9119)))

(declare-fun bs!995 () Bool)

(assert (= bs!995 d!4323))

(assert (=> bs!995 m!17601))

(assert (=> bs!995 m!17601))

(assert (=> bs!995 m!17603))

(declare-fun m!18571 () Bool)

(assert (=> bs!995 m!18571))

(declare-fun m!18573 () Bool)

(assert (=> bs!995 m!18573))

(assert (=> b!23781 d!4323))

(declare-fun b!24216 () Bool)

(declare-fun res!14762 () Bool)

(declare-fun e!15673 () Bool)

(assert (=> b!24216 (=> (not res!14762) (not e!15673))))

(declare-fun lt!9121 () ListLongMap!565)

(assert (=> b!24216 (= res!14762 (not (contains!230 lt!9121 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24217 () Bool)

(assert (=> b!24217 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> b!24217 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8338)))))

(declare-fun e!15674 () Bool)

(assert (=> b!24217 (= e!15674 (= (apply!29 lt!9121 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8338) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24218 () Bool)

(declare-fun lt!9123 () Unit!519)

(declare-fun lt!9125 () Unit!519)

(assert (=> b!24218 (= lt!9123 lt!9125)))

(declare-fun lt!9122 () ListLongMap!565)

(declare-fun lt!9126 () V!1187)

(declare-fun lt!9120 () (_ BitVec 64))

(declare-fun lt!9124 () (_ BitVec 64))

(assert (=> b!24218 (not (contains!230 (+!45 lt!9122 (tuple2!971 lt!9124 lt!9126)) lt!9120))))

(assert (=> b!24218 (= lt!9125 (addStillNotContains!2 lt!9122 lt!9124 lt!9126 lt!9120))))

(assert (=> b!24218 (= lt!9120 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!24218 (= lt!9126 (get!390 (select (arr!596 lt!8338) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24218 (= lt!9124 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun call!2113 () ListLongMap!565)

(assert (=> b!24218 (= lt!9122 call!2113)))

(declare-fun e!15678 () ListLongMap!565)

(assert (=> b!24218 (= e!15678 (+!45 call!2113 (tuple2!971 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000) (get!390 (select (arr!596 lt!8338) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!15675 () Bool)

(declare-fun b!24219 () Bool)

(assert (=> b!24219 (= e!15675 (= lt!9121 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!487 lt!8138)))))))

(declare-fun b!24220 () Bool)

(assert (=> b!24220 (= e!15678 call!2113)))

(declare-fun b!24221 () Bool)

(declare-fun e!15677 () Bool)

(assert (=> b!24221 (= e!15677 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!24221 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!4325 () Bool)

(assert (=> d!4325 e!15673))

(declare-fun res!14765 () Bool)

(assert (=> d!4325 (=> (not res!14765) (not e!15673))))

(assert (=> d!4325 (= res!14765 (not (contains!230 lt!9121 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15679 () ListLongMap!565)

(assert (=> d!4325 (= lt!9121 e!15679)))

(declare-fun c!3242 () Bool)

(assert (=> d!4325 (= c!3242 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> d!4325 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4325 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!9121)))

(declare-fun b!24222 () Bool)

(assert (=> b!24222 (= e!15679 e!15678)))

(declare-fun c!3240 () Bool)

(assert (=> b!24222 (= c!3240 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun b!24223 () Bool)

(assert (=> b!24223 (= e!15675 (isEmpty!172 lt!9121))))

(declare-fun b!24224 () Bool)

(declare-fun e!15676 () Bool)

(assert (=> b!24224 (= e!15676 e!15674)))

(assert (=> b!24224 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun res!14763 () Bool)

(assert (=> b!24224 (= res!14763 (contains!230 lt!9121 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!24224 (=> (not res!14763) (not e!15674))))

(declare-fun bm!2110 () Bool)

(assert (=> bm!2110 (= call!2113 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!24225 () Bool)

(assert (=> b!24225 (= e!15676 e!15675)))

(declare-fun c!3241 () Bool)

(assert (=> b!24225 (= c!3241 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!24226 () Bool)

(assert (=> b!24226 (= e!15679 (ListLongMap!566 Nil!562))))

(declare-fun b!24227 () Bool)

(assert (=> b!24227 (= e!15673 e!15676)))

(declare-fun c!3239 () Bool)

(assert (=> b!24227 (= c!3239 e!15677)))

(declare-fun res!14764 () Bool)

(assert (=> b!24227 (=> (not res!14764) (not e!15677))))

(assert (=> b!24227 (= res!14764 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (= (and d!4325 c!3242) b!24226))

(assert (= (and d!4325 (not c!3242)) b!24222))

(assert (= (and b!24222 c!3240) b!24218))

(assert (= (and b!24222 (not c!3240)) b!24220))

(assert (= (or b!24218 b!24220) bm!2110))

(assert (= (and d!4325 res!14765) b!24216))

(assert (= (and b!24216 res!14762) b!24227))

(assert (= (and b!24227 res!14764) b!24221))

(assert (= (and b!24227 c!3239) b!24224))

(assert (= (and b!24227 (not c!3239)) b!24225))

(assert (= (and b!24224 res!14763) b!24217))

(assert (= (and b!24225 c!3241) b!24219))

(assert (= (and b!24225 (not c!3241)) b!24223))

(declare-fun b_lambda!1605 () Bool)

(assert (=> (not b_lambda!1605) (not b!24217)))

(assert (=> b!24217 t!3232))

(declare-fun b_and!1517 () Bool)

(assert (= b_and!1515 (and (=> t!3232 result!1093) b_and!1517)))

(declare-fun b_lambda!1607 () Bool)

(assert (=> (not b_lambda!1607) (not b!24218)))

(assert (=> b!24218 t!3232))

(declare-fun b_and!1519 () Bool)

(assert (= b_and!1517 (and (=> t!3232 result!1093) b_and!1519)))

(assert (=> b!24222 m!16908))

(assert (=> b!24222 m!16908))

(assert (=> b!24222 m!16922))

(assert (=> b!24217 m!16916))

(assert (=> b!24217 m!16908))

(declare-fun m!18575 () Bool)

(assert (=> b!24217 m!18575))

(assert (=> b!24217 m!16908))

(assert (=> b!24217 m!17561))

(assert (=> b!24217 m!16916))

(assert (=> b!24217 m!17563))

(assert (=> b!24217 m!17561))

(declare-fun m!18577 () Bool)

(assert (=> b!24219 m!18577))

(assert (=> b!24221 m!16908))

(assert (=> b!24221 m!16908))

(assert (=> b!24221 m!16922))

(declare-fun m!18579 () Bool)

(assert (=> b!24223 m!18579))

(assert (=> b!24224 m!16908))

(assert (=> b!24224 m!16908))

(declare-fun m!18581 () Bool)

(assert (=> b!24224 m!18581))

(declare-fun m!18583 () Bool)

(assert (=> b!24216 m!18583))

(assert (=> bm!2110 m!18577))

(assert (=> b!24218 m!16916))

(declare-fun m!18585 () Bool)

(assert (=> b!24218 m!18585))

(declare-fun m!18587 () Bool)

(assert (=> b!24218 m!18587))

(assert (=> b!24218 m!16908))

(assert (=> b!24218 m!18585))

(declare-fun m!18589 () Bool)

(assert (=> b!24218 m!18589))

(assert (=> b!24218 m!17561))

(assert (=> b!24218 m!16916))

(assert (=> b!24218 m!17563))

(assert (=> b!24218 m!17561))

(declare-fun m!18591 () Bool)

(assert (=> b!24218 m!18591))

(declare-fun m!18593 () Bool)

(assert (=> d!4325 m!18593))

(assert (=> d!4325 m!16878))

(assert (=> b!23781 d!4325))

(declare-fun d!4327 () Bool)

(declare-fun e!15681 () Bool)

(assert (=> d!4327 e!15681))

(declare-fun res!14766 () Bool)

(assert (=> d!4327 (=> res!14766 e!15681)))

(declare-fun lt!9130 () Bool)

(assert (=> d!4327 (= res!14766 (not lt!9130))))

(declare-fun lt!9129 () Bool)

(assert (=> d!4327 (= lt!9130 lt!9129)))

(declare-fun lt!9128 () Unit!519)

(declare-fun e!15680 () Unit!519)

(assert (=> d!4327 (= lt!9128 e!15680)))

(declare-fun c!3243 () Bool)

(assert (=> d!4327 (= c!3243 lt!9129)))

(assert (=> d!4327 (= lt!9129 (containsKey!24 (toList!298 (+!45 lt!8781 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))) lt!8780))))

(assert (=> d!4327 (= (contains!230 (+!45 lt!8781 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138)))) lt!8780) lt!9130)))

(declare-fun b!24228 () Bool)

(declare-fun lt!9127 () Unit!519)

(assert (=> b!24228 (= e!15680 lt!9127)))

(assert (=> b!24228 (= lt!9127 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (+!45 lt!8781 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))) lt!8780))))

(assert (=> b!24228 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8781 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))) lt!8780))))

(declare-fun b!24229 () Bool)

(declare-fun Unit!570 () Unit!519)

(assert (=> b!24229 (= e!15680 Unit!570)))

(declare-fun b!24230 () Bool)

(assert (=> b!24230 (= e!15681 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8781 (tuple2!971 lt!8766 (zeroValue!1665 (_2!487 lt!8138))))) lt!8780)))))

(assert (= (and d!4327 c!3243) b!24228))

(assert (= (and d!4327 (not c!3243)) b!24229))

(assert (= (and d!4327 (not res!14766)) b!24230))

(declare-fun m!18595 () Bool)

(assert (=> d!4327 m!18595))

(declare-fun m!18597 () Bool)

(assert (=> b!24228 m!18597))

(declare-fun m!18599 () Bool)

(assert (=> b!24228 m!18599))

(assert (=> b!24228 m!18599))

(declare-fun m!18601 () Bool)

(assert (=> b!24228 m!18601))

(assert (=> b!24230 m!18599))

(assert (=> b!24230 m!18599))

(assert (=> b!24230 m!18601))

(assert (=> b!23781 d!4327))

(declare-fun d!4329 () Bool)

(assert (=> d!4329 (= (apply!29 (+!45 lt!8779 (tuple2!971 lt!8773 (zeroValue!1665 (_2!487 lt!8138)))) lt!8775) (apply!29 lt!8779 lt!8775))))

(declare-fun lt!9131 () Unit!519)

(assert (=> d!4329 (= lt!9131 (choose!211 lt!8779 lt!8773 (zeroValue!1665 (_2!487 lt!8138)) lt!8775))))

(declare-fun e!15682 () Bool)

(assert (=> d!4329 e!15682))

(declare-fun res!14767 () Bool)

(assert (=> d!4329 (=> (not res!14767) (not e!15682))))

(assert (=> d!4329 (= res!14767 (contains!230 lt!8779 lt!8775))))

(assert (=> d!4329 (= (addApplyDifferent!14 lt!8779 lt!8773 (zeroValue!1665 (_2!487 lt!8138)) lt!8775) lt!9131)))

(declare-fun b!24231 () Bool)

(assert (=> b!24231 (= e!15682 (not (= lt!8775 lt!8773)))))

(assert (= (and d!4329 res!14767) b!24231))

(assert (=> d!4329 m!17595))

(declare-fun m!18603 () Bool)

(assert (=> d!4329 m!18603))

(assert (=> d!4329 m!17581))

(declare-fun m!18605 () Bool)

(assert (=> d!4329 m!18605))

(assert (=> d!4329 m!17581))

(assert (=> d!4329 m!17583))

(assert (=> b!23781 d!4329))

(assert (=> b!23678 d!4035))

(assert (=> b!23678 d!4037))

(declare-fun d!4331 () Bool)

(declare-fun e!15683 () Bool)

(assert (=> d!4331 e!15683))

(declare-fun res!14768 () Bool)

(assert (=> d!4331 (=> (not res!14768) (not e!15683))))

(declare-fun lt!9134 () ListLongMap!565)

(assert (=> d!4331 (= res!14768 (contains!230 lt!9134 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun lt!9132 () List!565)

(assert (=> d!4331 (= lt!9134 (ListLongMap!566 lt!9132))))

(declare-fun lt!9133 () Unit!519)

(declare-fun lt!9135 () Unit!519)

(assert (=> d!4331 (= lt!9133 lt!9135)))

(assert (=> d!4331 (= (getValueByKey!60 lt!9132 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4331 (= lt!9135 (lemmaContainsTupThenGetReturnValue!18 lt!9132 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4331 (= lt!9132 (insertStrictlySorted!18 (toList!298 call!2039) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4331 (= (+!45 call!2039 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) lt!9134)))

(declare-fun b!24232 () Bool)

(declare-fun res!14769 () Bool)

(assert (=> b!24232 (=> (not res!14769) (not e!15683))))

(assert (=> b!24232 (= res!14769 (= (getValueByKey!60 (toList!298 lt!9134) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(declare-fun b!24233 () Bool)

(assert (=> b!24233 (= e!15683 (contains!231 (toList!298 lt!9134) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(assert (= (and d!4331 res!14768) b!24232))

(assert (= (and b!24232 res!14769) b!24233))

(declare-fun m!18607 () Bool)

(assert (=> d!4331 m!18607))

(declare-fun m!18609 () Bool)

(assert (=> d!4331 m!18609))

(declare-fun m!18611 () Bool)

(assert (=> d!4331 m!18611))

(declare-fun m!18613 () Bool)

(assert (=> d!4331 m!18613))

(declare-fun m!18615 () Bool)

(assert (=> b!24232 m!18615))

(declare-fun m!18617 () Bool)

(assert (=> b!24233 m!18617))

(assert (=> b!23753 d!4331))

(assert (=> d!4027 d!4031))

(declare-fun d!4333 () Bool)

(declare-fun e!15686 () Bool)

(assert (=> d!4333 e!15686))

(declare-fun res!14774 () Bool)

(assert (=> d!4333 (=> (not res!14774) (not e!15686))))

(declare-fun lt!9138 () SeekEntryResult!55)

(assert (=> d!4333 (= res!14774 ((_ is Found!55) lt!9138))))

(assert (=> d!4333 (= lt!9138 (seekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(assert (=> d!4333 true))

(declare-fun _$33!35 () Unit!519)

(assert (=> d!4333 (= (choose!207 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)) _$33!35)))

(declare-fun b!24238 () Bool)

(declare-fun res!14775 () Bool)

(assert (=> b!24238 (=> (not res!14775) (not e!15686))))

(assert (=> b!24238 (= res!14775 (inRange!0 (index!2342 lt!9138) (mask!4729 lt!8141)))))

(declare-fun b!24239 () Bool)

(assert (=> b!24239 (= e!15686 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!9138)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4333 res!14774) b!24238))

(assert (= (and b!24238 res!14775) b!24239))

(assert (=> d!4333 m!16750))

(declare-fun m!18619 () Bool)

(assert (=> b!24238 m!18619))

(declare-fun m!18621 () Bool)

(assert (=> b!24239 m!18621))

(assert (=> d!4027 d!4333))

(assert (=> d!4027 d!4087))

(declare-fun d!4335 () Bool)

(assert (=> d!4335 (= (isDefined!22 (getValueByKey!60 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))) (not (isEmpty!173 (getValueByKey!60 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bs!996 () Bool)

(assert (= bs!996 d!4335))

(assert (=> bs!996 m!17465))

(declare-fun m!18623 () Bool)

(assert (=> bs!996 m!18623))

(assert (=> b!23731 d!4335))

(declare-fun b!24240 () Bool)

(declare-fun e!15687 () Option!66)

(assert (=> b!24240 (= e!15687 (Some!65 (_2!493 (h!1127 (toList!298 call!1934)))))))

(declare-fun b!24243 () Bool)

(declare-fun e!15688 () Option!66)

(assert (=> b!24243 (= e!15688 None!64)))

(declare-fun b!24242 () Bool)

(assert (=> b!24242 (= e!15688 (getValueByKey!60 (t!3229 (toList!298 call!1934)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24241 () Bool)

(assert (=> b!24241 (= e!15687 e!15688)))

(declare-fun c!3245 () Bool)

(assert (=> b!24241 (= c!3245 (and ((_ is Cons!561) (toList!298 call!1934)) (not (= (_1!493 (h!1127 (toList!298 call!1934))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun d!4337 () Bool)

(declare-fun c!3244 () Bool)

(assert (=> d!4337 (= c!3244 (and ((_ is Cons!561) (toList!298 call!1934)) (= (_1!493 (h!1127 (toList!298 call!1934))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4337 (= (getValueByKey!60 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) e!15687)))

(assert (= (and d!4337 c!3244) b!24240))

(assert (= (and d!4337 (not c!3244)) b!24241))

(assert (= (and b!24241 c!3245) b!24242))

(assert (= (and b!24241 (not c!3245)) b!24243))

(declare-fun m!18625 () Bool)

(assert (=> b!24242 m!18625))

(assert (=> b!23731 d!4337))

(declare-fun d!4339 () Bool)

(declare-fun res!14776 () Bool)

(declare-fun e!15689 () Bool)

(assert (=> d!4339 (=> res!14776 e!15689)))

(assert (=> d!4339 (= res!14776 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4339 (= (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!15689)))

(declare-fun b!24244 () Bool)

(declare-fun e!15690 () Bool)

(assert (=> b!24244 (= e!15689 e!15690)))

(declare-fun res!14777 () Bool)

(assert (=> b!24244 (=> (not res!14777) (not e!15690))))

(assert (=> b!24244 (= res!14777 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!24245 () Bool)

(assert (=> b!24245 (= e!15690 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!4339 (not res!14776)) b!24244))

(assert (= (and b!24244 res!14777) b!24245))

(declare-fun m!18627 () Bool)

(assert (=> d!4339 m!18627))

(declare-fun m!18629 () Bool)

(assert (=> b!24245 m!18629))

(assert (=> b!23693 d!4339))

(assert (=> b!23551 d!4027))

(declare-fun d!4341 () Bool)

(assert (=> d!4341 (= (apply!29 lt!8459 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8459) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!997 () Bool)

(assert (= bs!997 d!4341))

(declare-fun m!18631 () Bool)

(assert (=> bs!997 m!18631))

(assert (=> bs!997 m!18631))

(declare-fun m!18633 () Bool)

(assert (=> bs!997 m!18633))

(assert (=> b!23487 d!4341))

(declare-fun b!24258 () Bool)

(declare-fun e!15698 () SeekEntryResult!55)

(assert (=> b!24258 (= e!15698 (MissingVacant!55 (index!2343 lt!8734)))))

(declare-fun b!24259 () Bool)

(declare-fun e!15697 () SeekEntryResult!55)

(assert (=> b!24259 (= e!15697 Undefined!55)))

(declare-fun b!24260 () Bool)

(declare-fun e!15699 () SeekEntryResult!55)

(assert (=> b!24260 (= e!15697 e!15699)))

(declare-fun c!3253 () Bool)

(declare-fun lt!9144 () (_ BitVec 64))

(assert (=> b!24260 (= c!3253 (= lt!9144 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24261 () Bool)

(assert (=> b!24261 (= e!15699 (Found!55 (index!2343 lt!8734)))))

(declare-fun d!4343 () Bool)

(declare-fun lt!9143 () SeekEntryResult!55)

(assert (=> d!4343 (and (or ((_ is Undefined!55) lt!9143) (not ((_ is Found!55) lt!9143)) (and (bvsge (index!2342 lt!9143) #b00000000000000000000000000000000) (bvslt (index!2342 lt!9143) (size!693 (_keys!3163 (_2!487 lt!8138)))))) (or ((_ is Undefined!55) lt!9143) ((_ is Found!55) lt!9143) (not ((_ is MissingVacant!55) lt!9143)) (not (= (index!2344 lt!9143) (index!2343 lt!8734))) (and (bvsge (index!2344 lt!9143) #b00000000000000000000000000000000) (bvslt (index!2344 lt!9143) (size!693 (_keys!3163 (_2!487 lt!8138)))))) (or ((_ is Undefined!55) lt!9143) (ite ((_ is Found!55) lt!9143) (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!9143)) #b1000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!55) lt!9143) (= (index!2344 lt!9143) (index!2343 lt!8734)) (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2344 lt!9143)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!4343 (= lt!9143 e!15697)))

(declare-fun c!3254 () Bool)

(assert (=> d!4343 (= c!3254 (bvsge (x!5577 lt!8734) #b01111111111111111111111111111110))))

(assert (=> d!4343 (= lt!9144 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2343 lt!8734)))))

(assert (=> d!4343 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4343 (= (seekKeyOrZeroReturnVacant!0 (x!5577 lt!8734) (index!2343 lt!8734) (index!2343 lt!8734) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))) lt!9143)))

(declare-fun b!24262 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!24262 (= e!15698 (seekKeyOrZeroReturnVacant!0 (bvadd (x!5577 lt!8734) #b00000000000000000000000000000001) (nextIndex!0 (index!2343 lt!8734) (x!5577 lt!8734) (mask!4729 (_2!487 lt!8138))) (index!2343 lt!8734) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!24263 () Bool)

(declare-fun c!3252 () Bool)

(assert (=> b!24263 (= c!3252 (= lt!9144 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24263 (= e!15699 e!15698)))

(assert (= (and d!4343 c!3254) b!24259))

(assert (= (and d!4343 (not c!3254)) b!24260))

(assert (= (and b!24260 c!3253) b!24261))

(assert (= (and b!24260 (not c!3253)) b!24263))

(assert (= (and b!24263 c!3252) b!24258))

(assert (= (and b!24263 (not c!3252)) b!24262))

(declare-fun m!18635 () Bool)

(assert (=> d!4343 m!18635))

(declare-fun m!18637 () Bool)

(assert (=> d!4343 m!18637))

(assert (=> d!4343 m!17483))

(assert (=> d!4343 m!16878))

(declare-fun m!18639 () Bool)

(assert (=> b!24262 m!18639))

(assert (=> b!24262 m!18639))

(declare-fun m!18641 () Bool)

(assert (=> b!24262 m!18641))

(assert (=> b!23732 d!4343))

(declare-fun d!4345 () Bool)

(assert (=> d!4345 (isDefined!22 (getValueByKey!60 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun lt!9145 () Unit!519)

(assert (=> d!4345 (= lt!9145 (choose!210 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15700 () Bool)

(assert (=> d!4345 e!15700))

(declare-fun res!14778 () Bool)

(assert (=> d!4345 (=> (not res!14778) (not e!15700))))

(assert (=> d!4345 (= res!14778 (isStrictlySorted!165 (toList!298 e!15108)))))

(assert (=> d!4345 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!9145)))

(declare-fun b!24264 () Bool)

(assert (=> b!24264 (= e!15700 (containsKey!24 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4345 res!14778) b!24264))

(assert (=> d!4345 m!17493))

(assert (=> d!4345 m!17493))

(assert (=> d!4345 m!17495))

(declare-fun m!18643 () Bool)

(assert (=> d!4345 m!18643))

(declare-fun m!18645 () Bool)

(assert (=> d!4345 m!18645))

(assert (=> b!24264 m!17489))

(assert (=> b!23740 d!4345))

(assert (=> b!23740 d!4217))

(assert (=> b!23740 d!4219))

(declare-fun d!4347 () Bool)

(assert (=> d!4347 (contains!230 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342)))))

(assert (=> d!4347 true))

(declare-fun _$16!72 () Unit!519)

(assert (=> d!4347 (= (choose!208 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (index!2342 lt!8342) (defaultEntry!1742 (_2!487 lt!8138))) _$16!72)))

(declare-fun bs!998 () Bool)

(assert (= bs!998 d!4347))

(assert (=> bs!998 m!16816))

(assert (=> bs!998 m!16818))

(assert (=> bs!998 m!16816))

(assert (=> bs!998 m!16818))

(assert (=> bs!998 m!16820))

(assert (=> d!4081 d!4347))

(assert (=> d!4081 d!4291))

(declare-fun d!4349 () Bool)

(declare-fun e!15701 () Bool)

(assert (=> d!4349 e!15701))

(declare-fun res!14779 () Bool)

(assert (=> d!4349 (=> (not res!14779) (not e!15701))))

(declare-fun lt!9148 () ListLongMap!565)

(assert (=> d!4349 (= res!14779 (contains!230 lt!9148 (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun lt!9146 () List!565)

(assert (=> d!4349 (= lt!9148 (ListLongMap!566 lt!9146))))

(declare-fun lt!9147 () Unit!519)

(declare-fun lt!9149 () Unit!519)

(assert (=> d!4349 (= lt!9147 lt!9149)))

(assert (=> d!4349 (= (getValueByKey!60 lt!9146 (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4349 (= lt!9149 (lemmaContainsTupThenGetReturnValue!18 lt!9146 (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4349 (= lt!9146 (insertStrictlySorted!18 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4349 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9148)))

(declare-fun b!24265 () Bool)

(declare-fun res!14780 () Bool)

(assert (=> b!24265 (=> (not res!14780) (not e!15701))))

(assert (=> b!24265 (= res!14780 (= (getValueByKey!60 (toList!298 lt!9148) (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24266 () Bool)

(assert (=> b!24266 (= e!15701 (contains!231 (toList!298 lt!9148) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (= (and d!4349 res!14779) b!24265))

(assert (= (and b!24265 res!14780) b!24266))

(declare-fun m!18647 () Bool)

(assert (=> d!4349 m!18647))

(declare-fun m!18649 () Bool)

(assert (=> d!4349 m!18649))

(declare-fun m!18651 () Bool)

(assert (=> d!4349 m!18651))

(declare-fun m!18653 () Bool)

(assert (=> d!4349 m!18653))

(declare-fun m!18655 () Bool)

(assert (=> b!24265 m!18655))

(declare-fun m!18657 () Bool)

(assert (=> b!24266 m!18657))

(assert (=> d!3997 d!4349))

(assert (=> d!3997 d!4245))

(declare-fun b!24267 () Bool)

(declare-fun e!15710 () ListLongMap!565)

(declare-fun call!2116 () ListLongMap!565)

(assert (=> b!24267 (= e!15710 call!2116)))

(declare-fun bm!2111 () Bool)

(declare-fun call!2117 () ListLongMap!565)

(declare-fun call!2119 () ListLongMap!565)

(assert (=> bm!2111 (= call!2117 call!2119)))

(declare-fun b!24268 () Bool)

(declare-fun e!15706 () Bool)

(declare-fun e!15714 () Bool)

(assert (=> b!24268 (= e!15706 e!15714)))

(declare-fun c!3256 () Bool)

(assert (=> b!24268 (= c!3256 (not (= (bvand lt!8238 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24269 () Bool)

(declare-fun e!15705 () Bool)

(declare-fun lt!9154 () ListLongMap!565)

(assert (=> b!24269 (= e!15705 (= (apply!29 lt!9154 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24269 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8141))))))

(assert (=> b!24269 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun c!3257 () Bool)

(declare-fun c!3258 () Bool)

(declare-fun bm!2112 () Bool)

(declare-fun call!2115 () ListLongMap!565)

(declare-fun call!2118 () ListLongMap!565)

(assert (=> bm!2112 (= call!2119 (+!45 (ite c!3257 call!2118 (ite c!3258 call!2115 call!2116)) (ite (or c!3257 c!3258) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!24270 () Bool)

(declare-fun res!14786 () Bool)

(assert (=> b!24270 (=> (not res!14786) (not e!15706))))

(declare-fun e!15711 () Bool)

(assert (=> b!24270 (= res!14786 e!15711)))

(declare-fun c!3255 () Bool)

(assert (=> b!24270 (= c!3255 (not (= (bvand lt!8238 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2113 () Bool)

(declare-fun call!2114 () Bool)

(assert (=> bm!2113 (= call!2114 (contains!230 lt!9154 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24271 () Bool)

(declare-fun e!15703 () Bool)

(assert (=> b!24271 (= e!15714 e!15703)))

(declare-fun res!14784 () Bool)

(declare-fun call!2120 () Bool)

(assert (=> b!24271 (= res!14784 call!2120)))

(assert (=> b!24271 (=> (not res!14784) (not e!15703))))

(declare-fun b!24272 () Bool)

(declare-fun e!15709 () Unit!519)

(declare-fun Unit!571 () Unit!519)

(assert (=> b!24272 (= e!15709 Unit!571)))

(declare-fun b!24273 () Bool)

(assert (=> b!24273 (= e!15714 (not call!2120))))

(declare-fun e!15712 () Bool)

(declare-fun b!24274 () Bool)

(assert (=> b!24274 (= e!15712 (= (apply!29 lt!9154 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun bm!2114 () Bool)

(assert (=> bm!2114 (= call!2120 (contains!230 lt!9154 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24275 () Bool)

(assert (=> b!24275 (= e!15711 (not call!2114))))

(declare-fun d!4351 () Bool)

(assert (=> d!4351 e!15706))

(declare-fun res!14783 () Bool)

(assert (=> d!4351 (=> (not res!14783) (not e!15706))))

(assert (=> d!4351 (= res!14783 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!9169 () ListLongMap!565)

(assert (=> d!4351 (= lt!9154 lt!9169)))

(declare-fun lt!9161 () Unit!519)

(assert (=> d!4351 (= lt!9161 e!15709)))

(declare-fun c!3259 () Bool)

(declare-fun e!15713 () Bool)

(assert (=> d!4351 (= c!3259 e!15713)))

(declare-fun res!14787 () Bool)

(assert (=> d!4351 (=> (not res!14787) (not e!15713))))

(assert (=> d!4351 (= res!14787 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun e!15707 () ListLongMap!565)

(assert (=> d!4351 (= lt!9169 e!15707)))

(assert (=> d!4351 (= c!3257 (and (not (= (bvand lt!8238 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8238 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4351 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4351 (= (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8238 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9154)))

(declare-fun b!24276 () Bool)

(assert (=> b!24276 (= e!15703 (= (apply!29 lt!9154 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!24277 () Bool)

(assert (=> b!24277 (= e!15707 (+!45 call!2119 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun b!24278 () Bool)

(declare-fun e!15708 () Bool)

(assert (=> b!24278 (= e!15708 e!15705)))

(declare-fun res!14788 () Bool)

(assert (=> b!24278 (=> (not res!14788) (not e!15705))))

(assert (=> b!24278 (= res!14788 (contains!230 lt!9154 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24278 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24279 () Bool)

(declare-fun res!14785 () Bool)

(assert (=> b!24279 (=> (not res!14785) (not e!15706))))

(assert (=> b!24279 (= res!14785 e!15708)))

(declare-fun res!14789 () Bool)

(assert (=> b!24279 (=> res!14789 e!15708)))

(declare-fun e!15704 () Bool)

(assert (=> b!24279 (= res!14789 (not e!15704))))

(declare-fun res!14782 () Bool)

(assert (=> b!24279 (=> (not res!14782) (not e!15704))))

(assert (=> b!24279 (= res!14782 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24280 () Bool)

(assert (=> b!24280 (= e!15710 call!2117)))

(declare-fun b!24281 () Bool)

(declare-fun lt!9151 () Unit!519)

(assert (=> b!24281 (= e!15709 lt!9151)))

(declare-fun lt!9165 () ListLongMap!565)

(assert (=> b!24281 (= lt!9165 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8238 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9150 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9150 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9164 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9164 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9170 () Unit!519)

(assert (=> b!24281 (= lt!9170 (addStillContains!14 lt!9165 lt!9150 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) lt!9164))))

(assert (=> b!24281 (contains!230 (+!45 lt!9165 (tuple2!971 lt!9150 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9164)))

(declare-fun lt!9167 () Unit!519)

(assert (=> b!24281 (= lt!9167 lt!9170)))

(declare-fun lt!9171 () ListLongMap!565)

(assert (=> b!24281 (= lt!9171 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8238 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9160 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9160 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9156 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9156 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9162 () Unit!519)

(assert (=> b!24281 (= lt!9162 (addApplyDifferent!14 lt!9171 lt!9160 (minValue!1665 lt!8141) lt!9156))))

(assert (=> b!24281 (= (apply!29 (+!45 lt!9171 (tuple2!971 lt!9160 (minValue!1665 lt!8141))) lt!9156) (apply!29 lt!9171 lt!9156))))

(declare-fun lt!9152 () Unit!519)

(assert (=> b!24281 (= lt!9152 lt!9162)))

(declare-fun lt!9163 () ListLongMap!565)

(assert (=> b!24281 (= lt!9163 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8238 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9157 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9157 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9159 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9159 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9158 () Unit!519)

(assert (=> b!24281 (= lt!9158 (addApplyDifferent!14 lt!9163 lt!9157 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) lt!9159))))

(assert (=> b!24281 (= (apply!29 (+!45 lt!9163 (tuple2!971 lt!9157 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9159) (apply!29 lt!9163 lt!9159))))

(declare-fun lt!9153 () Unit!519)

(assert (=> b!24281 (= lt!9153 lt!9158)))

(declare-fun lt!9168 () ListLongMap!565)

(assert (=> b!24281 (= lt!9168 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8238 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9166 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9166 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9155 () (_ BitVec 64))

(assert (=> b!24281 (= lt!9155 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24281 (= lt!9151 (addApplyDifferent!14 lt!9168 lt!9166 (minValue!1665 lt!8141) lt!9155))))

(assert (=> b!24281 (= (apply!29 (+!45 lt!9168 (tuple2!971 lt!9166 (minValue!1665 lt!8141))) lt!9155) (apply!29 lt!9168 lt!9155))))

(declare-fun b!24282 () Bool)

(declare-fun e!15702 () ListLongMap!565)

(assert (=> b!24282 (= e!15702 call!2117)))

(declare-fun b!24283 () Bool)

(assert (=> b!24283 (= e!15707 e!15702)))

(assert (=> b!24283 (= c!3258 (and (not (= (bvand lt!8238 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!8238 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24284 () Bool)

(declare-fun c!3260 () Bool)

(assert (=> b!24284 (= c!3260 (and (not (= (bvand lt!8238 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!8238 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24284 (= e!15702 e!15710)))

(declare-fun bm!2115 () Bool)

(assert (=> bm!2115 (= call!2116 call!2115)))

(declare-fun bm!2116 () Bool)

(assert (=> bm!2116 (= call!2115 call!2118)))

(declare-fun b!24285 () Bool)

(assert (=> b!24285 (= e!15711 e!15712)))

(declare-fun res!14781 () Bool)

(assert (=> b!24285 (= res!14781 call!2114)))

(assert (=> b!24285 (=> (not res!14781) (not e!15712))))

(declare-fun b!24286 () Bool)

(assert (=> b!24286 (= e!15713 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2117 () Bool)

(assert (=> bm!2117 (= call!2118 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8238 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!24287 () Bool)

(assert (=> b!24287 (= e!15704 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (= (and d!4351 c!3257) b!24277))

(assert (= (and d!4351 (not c!3257)) b!24283))

(assert (= (and b!24283 c!3258) b!24282))

(assert (= (and b!24283 (not c!3258)) b!24284))

(assert (= (and b!24284 c!3260) b!24280))

(assert (= (and b!24284 (not c!3260)) b!24267))

(assert (= (or b!24280 b!24267) bm!2115))

(assert (= (or b!24282 bm!2115) bm!2116))

(assert (= (or b!24282 b!24280) bm!2111))

(assert (= (or b!24277 bm!2116) bm!2117))

(assert (= (or b!24277 bm!2111) bm!2112))

(assert (= (and d!4351 res!14787) b!24286))

(assert (= (and d!4351 c!3259) b!24281))

(assert (= (and d!4351 (not c!3259)) b!24272))

(assert (= (and d!4351 res!14783) b!24279))

(assert (= (and b!24279 res!14782) b!24287))

(assert (= (and b!24279 (not res!14789)) b!24278))

(assert (= (and b!24278 res!14788) b!24269))

(assert (= (and b!24279 res!14785) b!24270))

(assert (= (and b!24270 c!3255) b!24285))

(assert (= (and b!24270 (not c!3255)) b!24275))

(assert (= (and b!24285 res!14781) b!24274))

(assert (= (or b!24285 b!24275) bm!2113))

(assert (= (and b!24270 res!14786) b!24268))

(assert (= (and b!24268 c!3256) b!24271))

(assert (= (and b!24268 (not c!3256)) b!24273))

(assert (= (and b!24271 res!14784) b!24276))

(assert (= (or b!24271 b!24273) bm!2114))

(declare-fun b_lambda!1609 () Bool)

(assert (=> (not b_lambda!1609) (not b!24269)))

(assert (=> b!24269 t!3234))

(declare-fun b_and!1521 () Bool)

(assert (= b_and!1519 (and (=> t!3234 result!1095) b_and!1521)))

(assert (=> b!24278 m!17198))

(assert (=> b!24278 m!17198))

(declare-fun m!18659 () Bool)

(assert (=> b!24278 m!18659))

(declare-fun m!18661 () Bool)

(assert (=> b!24277 m!18661))

(assert (=> b!24269 m!17413))

(assert (=> b!24269 m!17304))

(assert (=> b!24269 m!17415))

(assert (=> b!24269 m!17198))

(declare-fun m!18663 () Bool)

(assert (=> b!24269 m!18663))

(assert (=> b!24269 m!17198))

(assert (=> b!24269 m!17413))

(assert (=> b!24269 m!17304))

(assert (=> b!24286 m!17198))

(assert (=> b!24286 m!17198))

(assert (=> b!24286 m!17310))

(declare-fun m!18665 () Bool)

(assert (=> bm!2112 m!18665))

(assert (=> b!24287 m!17198))

(assert (=> b!24287 m!17198))

(assert (=> b!24287 m!17310))

(declare-fun m!18667 () Bool)

(assert (=> bm!2113 m!18667))

(declare-fun m!18669 () Bool)

(assert (=> b!24276 m!18669))

(declare-fun m!18671 () Bool)

(assert (=> bm!2114 m!18671))

(declare-fun m!18673 () Bool)

(assert (=> b!24274 m!18673))

(declare-fun m!18675 () Bool)

(assert (=> bm!2117 m!18675))

(assert (=> d!4351 m!17050))

(declare-fun m!18677 () Bool)

(assert (=> b!24281 m!18677))

(declare-fun m!18679 () Bool)

(assert (=> b!24281 m!18679))

(declare-fun m!18681 () Bool)

(assert (=> b!24281 m!18681))

(declare-fun m!18683 () Bool)

(assert (=> b!24281 m!18683))

(declare-fun m!18685 () Bool)

(assert (=> b!24281 m!18685))

(assert (=> b!24281 m!18675))

(assert (=> b!24281 m!18679))

(assert (=> b!24281 m!17198))

(declare-fun m!18687 () Bool)

(assert (=> b!24281 m!18687))

(declare-fun m!18689 () Bool)

(assert (=> b!24281 m!18689))

(declare-fun m!18691 () Bool)

(assert (=> b!24281 m!18691))

(assert (=> b!24281 m!18689))

(declare-fun m!18693 () Bool)

(assert (=> b!24281 m!18693))

(declare-fun m!18695 () Bool)

(assert (=> b!24281 m!18695))

(declare-fun m!18697 () Bool)

(assert (=> b!24281 m!18697))

(declare-fun m!18699 () Bool)

(assert (=> b!24281 m!18699))

(assert (=> b!24281 m!18699))

(declare-fun m!18701 () Bool)

(assert (=> b!24281 m!18701))

(assert (=> b!24281 m!18695))

(declare-fun m!18703 () Bool)

(assert (=> b!24281 m!18703))

(declare-fun m!18705 () Bool)

(assert (=> b!24281 m!18705))

(assert (=> d!3997 d!4351))

(declare-fun d!4353 () Bool)

(assert (=> d!4353 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8238 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> d!4353 true))

(declare-fun _$7!37 () Unit!519)

(assert (=> d!4353 (= (choose!206 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8238 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 lt!8141) (defaultEntry!1742 lt!8141)) _$7!37)))

(declare-fun bs!999 () Bool)

(assert (= bs!999 d!4353))

(assert (=> bs!999 m!17054))

(assert (=> bs!999 m!17054))

(assert (=> bs!999 m!17120))

(assert (=> bs!999 m!17122))

(assert (=> d!3997 d!4353))

(assert (=> d!3997 d!4087))

(assert (=> bm!2044 d!4325))

(declare-fun d!4355 () Bool)

(assert (=> d!4355 (= (isDefined!22 (getValueByKey!60 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!173 (getValueByKey!60 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!1000 () Bool)

(assert (= bs!1000 d!4355))

(assert (=> bs!1000 m!16970))

(declare-fun m!18707 () Bool)

(assert (=> bs!1000 m!18707))

(assert (=> b!23465 d!4355))

(declare-fun b!24288 () Bool)

(declare-fun e!15715 () Option!66)

(assert (=> b!24288 (= e!15715 (Some!65 (_2!493 (h!1127 (toList!298 e!15144)))))))

(declare-fun b!24291 () Bool)

(declare-fun e!15716 () Option!66)

(assert (=> b!24291 (= e!15716 None!64)))

(declare-fun b!24290 () Bool)

(assert (=> b!24290 (= e!15716 (getValueByKey!60 (t!3229 (toList!298 e!15144)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24289 () Bool)

(assert (=> b!24289 (= e!15715 e!15716)))

(declare-fun c!3262 () Bool)

(assert (=> b!24289 (= c!3262 (and ((_ is Cons!561) (toList!298 e!15144)) (not (= (_1!493 (h!1127 (toList!298 e!15144))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!4357 () Bool)

(declare-fun c!3261 () Bool)

(assert (=> d!4357 (= c!3261 (and ((_ is Cons!561) (toList!298 e!15144)) (= (_1!493 (h!1127 (toList!298 e!15144))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4357 (= (getValueByKey!60 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000) e!15715)))

(assert (= (and d!4357 c!3261) b!24288))

(assert (= (and d!4357 (not c!3261)) b!24289))

(assert (= (and b!24289 c!3262) b!24290))

(assert (= (and b!24289 (not c!3262)) b!24291))

(declare-fun m!18709 () Bool)

(assert (=> b!24290 m!18709))

(assert (=> b!23465 d!4357))

(declare-fun d!4359 () Bool)

(assert (=> d!4359 (= (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240)))) (not (isEmpty!173 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))))

(declare-fun bs!1001 () Bool)

(assert (= bs!1001 d!4359))

(assert (=> bs!1001 m!17294))

(declare-fun m!18711 () Bool)

(assert (=> bs!1001 m!18711))

(assert (=> b!23654 d!4359))

(declare-fun b!24292 () Bool)

(declare-fun e!15717 () Option!66)

(assert (=> b!24292 (= e!15717 (Some!65 (_2!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))))))

(declare-fun b!24295 () Bool)

(declare-fun e!15718 () Option!66)

(assert (=> b!24295 (= e!15718 None!64)))

(declare-fun b!24294 () Bool)

(assert (=> b!24294 (= e!15718 (getValueByKey!60 (t!3229 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))

(declare-fun b!24293 () Bool)

(assert (=> b!24293 (= e!15717 e!15718)))

(declare-fun c!3264 () Bool)

(assert (=> b!24293 (= c!3264 (and ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (not (= (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))))

(declare-fun d!4361 () Bool)

(declare-fun c!3263 () Bool)

(assert (=> d!4361 (= c!3263 (and ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (= (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240)))))))

(assert (=> d!4361 (= (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))) e!15717)))

(assert (= (and d!4361 c!3263) b!24292))

(assert (= (and d!4361 (not c!3263)) b!24293))

(assert (= (and b!24293 c!3264) b!24294))

(assert (= (and b!24293 (not c!3264)) b!24295))

(assert (=> b!24294 m!16722))

(declare-fun m!18713 () Bool)

(assert (=> b!24294 m!18713))

(assert (=> b!23654 d!4361))

(assert (=> b!23787 d!4123))

(assert (=> bm!1999 d!4031))

(declare-fun d!4363 () Bool)

(assert (=> d!4363 (= (apply!29 lt!8770 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8770) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1002 () Bool)

(assert (= bs!1002 d!4363))

(declare-fun m!18715 () Bool)

(assert (=> bs!1002 m!18715))

(assert (=> bs!1002 m!18715))

(declare-fun m!18717 () Bool)

(assert (=> bs!1002 m!18717))

(assert (=> b!23774 d!4363))

(assert (=> d!4057 d!4069))

(declare-fun d!4365 () Bool)

(declare-fun e!15719 () Bool)

(assert (=> d!4365 e!15719))

(declare-fun res!14790 () Bool)

(assert (=> d!4365 (=> (not res!14790) (not e!15719))))

(declare-fun lt!9172 () SeekEntryResult!55)

(assert (=> d!4365 (= res!14790 ((_ is Found!55) lt!9172))))

(assert (=> d!4365 (= lt!9172 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(assert (=> d!4365 true))

(declare-fun _$33!36 () Unit!519)

(assert (=> d!4365 (= (choose!207 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) _$33!36)))

(declare-fun b!24296 () Bool)

(declare-fun res!14791 () Bool)

(assert (=> b!24296 (=> (not res!14791) (not e!15719))))

(assert (=> b!24296 (= res!14791 (inRange!0 (index!2342 lt!9172) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!24297 () Bool)

(assert (=> b!24297 (= e!15719 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!9172)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4365 res!14790) b!24296))

(assert (= (and b!24296 res!14791) b!24297))

(assert (=> d!4365 m!16846))

(declare-fun m!18719 () Bool)

(assert (=> b!24296 m!18719))

(declare-fun m!18721 () Bool)

(assert (=> b!24297 m!18721))

(assert (=> d!4057 d!4365))

(assert (=> d!4057 d!4291))

(declare-fun d!4367 () Bool)

(declare-fun res!14792 () Bool)

(declare-fun e!15720 () Bool)

(assert (=> d!4367 (=> res!14792 e!15720)))

(assert (=> d!4367 (= res!14792 (and ((_ is Cons!561) (toList!298 call!1958)) (= (_1!493 (h!1127 (toList!298 call!1958))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4367 (= (containsKey!24 (toList!298 call!1958) #b1000000000000000000000000000000000000000000000000000000000000000) e!15720)))

(declare-fun b!24298 () Bool)

(declare-fun e!15721 () Bool)

(assert (=> b!24298 (= e!15720 e!15721)))

(declare-fun res!14793 () Bool)

(assert (=> b!24298 (=> (not res!14793) (not e!15721))))

(assert (=> b!24298 (= res!14793 (and (or (not ((_ is Cons!561) (toList!298 call!1958))) (bvsle (_1!493 (h!1127 (toList!298 call!1958))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!561) (toList!298 call!1958)) (bvslt (_1!493 (h!1127 (toList!298 call!1958))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24299 () Bool)

(assert (=> b!24299 (= e!15721 (containsKey!24 (t!3229 (toList!298 call!1958)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4367 (not res!14792)) b!24298))

(assert (= (and b!24298 res!14793) b!24299))

(declare-fun m!18723 () Bool)

(assert (=> b!24299 m!18723))

(assert (=> d!3967 d!4367))

(assert (=> b!23674 d!4235))

(assert (=> bm!2012 d!4069))

(declare-fun b!24300 () Bool)

(declare-fun e!15730 () ListLongMap!565)

(declare-fun call!2123 () ListLongMap!565)

(assert (=> b!24300 (= e!15730 call!2123)))

(declare-fun bm!2118 () Bool)

(declare-fun call!2124 () ListLongMap!565)

(declare-fun call!2126 () ListLongMap!565)

(assert (=> bm!2118 (= call!2124 call!2126)))

(declare-fun b!24301 () Bool)

(declare-fun e!15726 () Bool)

(declare-fun e!15734 () Bool)

(assert (=> b!24301 (= e!15726 e!15734)))

(declare-fun c!3266 () Bool)

(assert (=> b!24301 (= c!3266 (not (= (bvand (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24302 () Bool)

(declare-fun e!15725 () Bool)

(declare-fun lt!9177 () ListLongMap!565)

(assert (=> b!24302 (= e!15725 (= (apply!29 lt!9177 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8336))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8336)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24302 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!487 lt!8336)))))))

(assert (=> b!24302 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))))))

(declare-fun bm!2119 () Bool)

(declare-fun c!3267 () Bool)

(declare-fun call!2125 () ListLongMap!565)

(declare-fun c!3268 () Bool)

(declare-fun call!2122 () ListLongMap!565)

(assert (=> bm!2119 (= call!2126 (+!45 (ite c!3267 call!2125 (ite c!3268 call!2122 call!2123)) (ite (or c!3267 c!3268) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8336))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8336))))))))

(declare-fun b!24303 () Bool)

(declare-fun res!14799 () Bool)

(assert (=> b!24303 (=> (not res!14799) (not e!15726))))

(declare-fun e!15731 () Bool)

(assert (=> b!24303 (= res!14799 e!15731)))

(declare-fun c!3265 () Bool)

(assert (=> b!24303 (= c!3265 (not (= (bvand (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2120 () Bool)

(declare-fun call!2121 () Bool)

(assert (=> bm!2120 (= call!2121 (contains!230 lt!9177 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24304 () Bool)

(declare-fun e!15723 () Bool)

(assert (=> b!24304 (= e!15734 e!15723)))

(declare-fun res!14797 () Bool)

(declare-fun call!2127 () Bool)

(assert (=> b!24304 (= res!14797 call!2127)))

(assert (=> b!24304 (=> (not res!14797) (not e!15723))))

(declare-fun b!24305 () Bool)

(declare-fun e!15729 () Unit!519)

(declare-fun Unit!572 () Unit!519)

(assert (=> b!24305 (= e!15729 Unit!572)))

(declare-fun b!24306 () Bool)

(assert (=> b!24306 (= e!15734 (not call!2127))))

(declare-fun b!24307 () Bool)

(declare-fun e!15732 () Bool)

(assert (=> b!24307 (= e!15732 (= (apply!29 lt!9177 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!487 lt!8336))))))

(declare-fun bm!2121 () Bool)

(assert (=> bm!2121 (= call!2127 (contains!230 lt!9177 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24308 () Bool)

(assert (=> b!24308 (= e!15731 (not call!2121))))

(declare-fun d!4369 () Bool)

(assert (=> d!4369 e!15726))

(declare-fun res!14796 () Bool)

(assert (=> d!4369 (=> (not res!14796) (not e!15726))))

(assert (=> d!4369 (= res!14796 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))))))))

(declare-fun lt!9192 () ListLongMap!565)

(assert (=> d!4369 (= lt!9177 lt!9192)))

(declare-fun lt!9184 () Unit!519)

(assert (=> d!4369 (= lt!9184 e!15729)))

(declare-fun c!3269 () Bool)

(declare-fun e!15733 () Bool)

(assert (=> d!4369 (= c!3269 e!15733)))

(declare-fun res!14800 () Bool)

(assert (=> d!4369 (=> (not res!14800) (not e!15733))))

(assert (=> d!4369 (= res!14800 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))))))

(declare-fun e!15727 () ListLongMap!565)

(assert (=> d!4369 (= lt!9192 e!15727)))

(assert (=> d!4369 (= c!3267 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4369 (validMask!0 (mask!4729 (_2!487 lt!8336)))))

(assert (=> d!4369 (= (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8336)) (_values!1728 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336)) (extraKeys!1640 (_2!487 lt!8336)) (zeroValue!1665 (_2!487 lt!8336)) (minValue!1665 (_2!487 lt!8336)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8336))) lt!9177)))

(declare-fun b!24309 () Bool)

(assert (=> b!24309 (= e!15723 (= (apply!29 lt!9177 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!487 lt!8336))))))

(declare-fun b!24310 () Bool)

(assert (=> b!24310 (= e!15727 (+!45 call!2126 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8336)))))))

(declare-fun b!24311 () Bool)

(declare-fun e!15728 () Bool)

(assert (=> b!24311 (= e!15728 e!15725)))

(declare-fun res!14801 () Bool)

(assert (=> b!24311 (=> (not res!14801) (not e!15725))))

(assert (=> b!24311 (= res!14801 (contains!230 lt!9177 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)))))

(assert (=> b!24311 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))))))

(declare-fun b!24312 () Bool)

(declare-fun res!14798 () Bool)

(assert (=> b!24312 (=> (not res!14798) (not e!15726))))

(assert (=> b!24312 (= res!14798 e!15728)))

(declare-fun res!14802 () Bool)

(assert (=> b!24312 (=> res!14802 e!15728)))

(declare-fun e!15724 () Bool)

(assert (=> b!24312 (= res!14802 (not e!15724))))

(declare-fun res!14795 () Bool)

(assert (=> b!24312 (=> (not res!14795) (not e!15724))))

(assert (=> b!24312 (= res!14795 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))))))

(declare-fun b!24313 () Bool)

(assert (=> b!24313 (= e!15730 call!2124)))

(declare-fun b!24314 () Bool)

(declare-fun lt!9174 () Unit!519)

(assert (=> b!24314 (= e!15729 lt!9174)))

(declare-fun lt!9188 () ListLongMap!565)

(assert (=> b!24314 (= lt!9188 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8336)) (_values!1728 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336)) (extraKeys!1640 (_2!487 lt!8336)) (zeroValue!1665 (_2!487 lt!8336)) (minValue!1665 (_2!487 lt!8336)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8336))))))

(declare-fun lt!9173 () (_ BitVec 64))

(assert (=> b!24314 (= lt!9173 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9187 () (_ BitVec 64))

(assert (=> b!24314 (= lt!9187 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000))))

(declare-fun lt!9193 () Unit!519)

(assert (=> b!24314 (= lt!9193 (addStillContains!14 lt!9188 lt!9173 (zeroValue!1665 (_2!487 lt!8336)) lt!9187))))

(assert (=> b!24314 (contains!230 (+!45 lt!9188 (tuple2!971 lt!9173 (zeroValue!1665 (_2!487 lt!8336)))) lt!9187)))

(declare-fun lt!9190 () Unit!519)

(assert (=> b!24314 (= lt!9190 lt!9193)))

(declare-fun lt!9194 () ListLongMap!565)

(assert (=> b!24314 (= lt!9194 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8336)) (_values!1728 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336)) (extraKeys!1640 (_2!487 lt!8336)) (zeroValue!1665 (_2!487 lt!8336)) (minValue!1665 (_2!487 lt!8336)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8336))))))

(declare-fun lt!9183 () (_ BitVec 64))

(assert (=> b!24314 (= lt!9183 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9179 () (_ BitVec 64))

(assert (=> b!24314 (= lt!9179 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000))))

(declare-fun lt!9185 () Unit!519)

(assert (=> b!24314 (= lt!9185 (addApplyDifferent!14 lt!9194 lt!9183 (minValue!1665 (_2!487 lt!8336)) lt!9179))))

(assert (=> b!24314 (= (apply!29 (+!45 lt!9194 (tuple2!971 lt!9183 (minValue!1665 (_2!487 lt!8336)))) lt!9179) (apply!29 lt!9194 lt!9179))))

(declare-fun lt!9175 () Unit!519)

(assert (=> b!24314 (= lt!9175 lt!9185)))

(declare-fun lt!9186 () ListLongMap!565)

(assert (=> b!24314 (= lt!9186 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8336)) (_values!1728 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336)) (extraKeys!1640 (_2!487 lt!8336)) (zeroValue!1665 (_2!487 lt!8336)) (minValue!1665 (_2!487 lt!8336)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8336))))))

(declare-fun lt!9180 () (_ BitVec 64))

(assert (=> b!24314 (= lt!9180 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9182 () (_ BitVec 64))

(assert (=> b!24314 (= lt!9182 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000))))

(declare-fun lt!9181 () Unit!519)

(assert (=> b!24314 (= lt!9181 (addApplyDifferent!14 lt!9186 lt!9180 (zeroValue!1665 (_2!487 lt!8336)) lt!9182))))

(assert (=> b!24314 (= (apply!29 (+!45 lt!9186 (tuple2!971 lt!9180 (zeroValue!1665 (_2!487 lt!8336)))) lt!9182) (apply!29 lt!9186 lt!9182))))

(declare-fun lt!9176 () Unit!519)

(assert (=> b!24314 (= lt!9176 lt!9181)))

(declare-fun lt!9191 () ListLongMap!565)

(assert (=> b!24314 (= lt!9191 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8336)) (_values!1728 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336)) (extraKeys!1640 (_2!487 lt!8336)) (zeroValue!1665 (_2!487 lt!8336)) (minValue!1665 (_2!487 lt!8336)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8336))))))

(declare-fun lt!9189 () (_ BitVec 64))

(assert (=> b!24314 (= lt!9189 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9178 () (_ BitVec 64))

(assert (=> b!24314 (= lt!9178 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000))))

(assert (=> b!24314 (= lt!9174 (addApplyDifferent!14 lt!9191 lt!9189 (minValue!1665 (_2!487 lt!8336)) lt!9178))))

(assert (=> b!24314 (= (apply!29 (+!45 lt!9191 (tuple2!971 lt!9189 (minValue!1665 (_2!487 lt!8336)))) lt!9178) (apply!29 lt!9191 lt!9178))))

(declare-fun b!24315 () Bool)

(declare-fun e!15722 () ListLongMap!565)

(assert (=> b!24315 (= e!15722 call!2124)))

(declare-fun b!24316 () Bool)

(assert (=> b!24316 (= e!15727 e!15722)))

(assert (=> b!24316 (= c!3268 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24317 () Bool)

(declare-fun c!3270 () Bool)

(assert (=> b!24317 (= c!3270 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24317 (= e!15722 e!15730)))

(declare-fun bm!2122 () Bool)

(assert (=> bm!2122 (= call!2123 call!2122)))

(declare-fun bm!2123 () Bool)

(assert (=> bm!2123 (= call!2122 call!2125)))

(declare-fun b!24318 () Bool)

(assert (=> b!24318 (= e!15731 e!15732)))

(declare-fun res!14794 () Bool)

(assert (=> b!24318 (= res!14794 call!2121)))

(assert (=> b!24318 (=> (not res!14794) (not e!15732))))

(declare-fun b!24319 () Bool)

(assert (=> b!24319 (= e!15733 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)))))

(declare-fun bm!2124 () Bool)

(assert (=> bm!2124 (= call!2125 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8336)) (_values!1728 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336)) (extraKeys!1640 (_2!487 lt!8336)) (zeroValue!1665 (_2!487 lt!8336)) (minValue!1665 (_2!487 lt!8336)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8336))))))

(declare-fun b!24320 () Bool)

(assert (=> b!24320 (= e!15724 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)))))

(assert (= (and d!4369 c!3267) b!24310))

(assert (= (and d!4369 (not c!3267)) b!24316))

(assert (= (and b!24316 c!3268) b!24315))

(assert (= (and b!24316 (not c!3268)) b!24317))

(assert (= (and b!24317 c!3270) b!24313))

(assert (= (and b!24317 (not c!3270)) b!24300))

(assert (= (or b!24313 b!24300) bm!2122))

(assert (= (or b!24315 bm!2122) bm!2123))

(assert (= (or b!24315 b!24313) bm!2118))

(assert (= (or b!24310 bm!2123) bm!2124))

(assert (= (or b!24310 bm!2118) bm!2119))

(assert (= (and d!4369 res!14800) b!24319))

(assert (= (and d!4369 c!3269) b!24314))

(assert (= (and d!4369 (not c!3269)) b!24305))

(assert (= (and d!4369 res!14796) b!24312))

(assert (= (and b!24312 res!14795) b!24320))

(assert (= (and b!24312 (not res!14802)) b!24311))

(assert (= (and b!24311 res!14801) b!24302))

(assert (= (and b!24312 res!14798) b!24303))

(assert (= (and b!24303 c!3265) b!24318))

(assert (= (and b!24303 (not c!3265)) b!24308))

(assert (= (and b!24318 res!14794) b!24307))

(assert (= (or b!24318 b!24308) bm!2120))

(assert (= (and b!24303 res!14799) b!24301))

(assert (= (and b!24301 c!3266) b!24304))

(assert (= (and b!24301 (not c!3266)) b!24306))

(assert (= (and b!24304 res!14797) b!24309))

(assert (= (or b!24304 b!24306) bm!2121))

(declare-fun b_lambda!1611 () Bool)

(assert (=> (not b_lambda!1611) (not b!24302)))

(declare-fun tb!659 () Bool)

(declare-fun t!3238 () Bool)

(assert (=> (and b!23067 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8336))) t!3238) tb!659))

(declare-fun result!1099 () Bool)

(assert (=> tb!659 (= result!1099 tp_is_empty!1021)))

(assert (=> b!24302 t!3238))

(declare-fun b_and!1523 () Bool)

(assert (= b_and!1521 (and (=> t!3238 result!1099) b_and!1523)))

(assert (=> b!24311 m!17677))

(assert (=> b!24311 m!17677))

(declare-fun m!18725 () Bool)

(assert (=> b!24311 m!18725))

(declare-fun m!18727 () Bool)

(assert (=> b!24310 m!18727))

(declare-fun m!18729 () Bool)

(assert (=> b!24302 m!18729))

(declare-fun m!18731 () Bool)

(assert (=> b!24302 m!18731))

(declare-fun m!18733 () Bool)

(assert (=> b!24302 m!18733))

(assert (=> b!24302 m!17677))

(declare-fun m!18735 () Bool)

(assert (=> b!24302 m!18735))

(assert (=> b!24302 m!17677))

(assert (=> b!24302 m!18729))

(assert (=> b!24302 m!18731))

(assert (=> b!24319 m!17677))

(assert (=> b!24319 m!17677))

(assert (=> b!24319 m!17679))

(declare-fun m!18737 () Bool)

(assert (=> bm!2119 m!18737))

(assert (=> b!24320 m!17677))

(assert (=> b!24320 m!17677))

(assert (=> b!24320 m!17679))

(declare-fun m!18739 () Bool)

(assert (=> bm!2120 m!18739))

(declare-fun m!18741 () Bool)

(assert (=> b!24309 m!18741))

(declare-fun m!18743 () Bool)

(assert (=> bm!2121 m!18743))

(declare-fun m!18745 () Bool)

(assert (=> b!24307 m!18745))

(declare-fun m!18747 () Bool)

(assert (=> bm!2124 m!18747))

(declare-fun m!18749 () Bool)

(assert (=> d!4369 m!18749))

(declare-fun m!18751 () Bool)

(assert (=> b!24314 m!18751))

(declare-fun m!18753 () Bool)

(assert (=> b!24314 m!18753))

(declare-fun m!18755 () Bool)

(assert (=> b!24314 m!18755))

(declare-fun m!18757 () Bool)

(assert (=> b!24314 m!18757))

(declare-fun m!18759 () Bool)

(assert (=> b!24314 m!18759))

(assert (=> b!24314 m!18747))

(assert (=> b!24314 m!18753))

(assert (=> b!24314 m!17677))

(declare-fun m!18761 () Bool)

(assert (=> b!24314 m!18761))

(declare-fun m!18763 () Bool)

(assert (=> b!24314 m!18763))

(declare-fun m!18765 () Bool)

(assert (=> b!24314 m!18765))

(assert (=> b!24314 m!18763))

(declare-fun m!18767 () Bool)

(assert (=> b!24314 m!18767))

(declare-fun m!18769 () Bool)

(assert (=> b!24314 m!18769))

(declare-fun m!18771 () Bool)

(assert (=> b!24314 m!18771))

(declare-fun m!18773 () Bool)

(assert (=> b!24314 m!18773))

(assert (=> b!24314 m!18773))

(declare-fun m!18775 () Bool)

(assert (=> b!24314 m!18775))

(assert (=> b!24314 m!18769))

(declare-fun m!18777 () Bool)

(assert (=> b!24314 m!18777))

(declare-fun m!18779 () Bool)

(assert (=> b!24314 m!18779))

(assert (=> d!4033 d!4369))

(declare-fun d!4371 () Bool)

(declare-fun e!15736 () Bool)

(assert (=> d!4371 e!15736))

(declare-fun res!14803 () Bool)

(assert (=> d!4371 (=> res!14803 e!15736)))

(declare-fun lt!9198 () Bool)

(assert (=> d!4371 (= res!14803 (not lt!9198))))

(declare-fun lt!9197 () Bool)

(assert (=> d!4371 (= lt!9198 lt!9197)))

(declare-fun lt!9196 () Unit!519)

(declare-fun e!15735 () Unit!519)

(assert (=> d!4371 (= lt!9196 e!15735)))

(declare-fun c!3271 () Bool)

(assert (=> d!4371 (= c!3271 lt!9197)))

(assert (=> d!4371 (= lt!9197 (containsKey!24 (toList!298 lt!8744) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4371 (= (contains!230 lt!8744 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9198)))

(declare-fun b!24321 () Bool)

(declare-fun lt!9195 () Unit!519)

(assert (=> b!24321 (= e!15735 lt!9195)))

(assert (=> b!24321 (= lt!9195 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8744) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24321 (isDefined!22 (getValueByKey!60 (toList!298 lt!8744) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24322 () Bool)

(declare-fun Unit!573 () Unit!519)

(assert (=> b!24322 (= e!15735 Unit!573)))

(declare-fun b!24323 () Bool)

(assert (=> b!24323 (= e!15736 (isDefined!22 (getValueByKey!60 (toList!298 lt!8744) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4371 c!3271) b!24321))

(assert (= (and d!4371 (not c!3271)) b!24322))

(assert (= (and d!4371 (not res!14803)) b!24323))

(declare-fun m!18781 () Bool)

(assert (=> d!4371 m!18781))

(declare-fun m!18783 () Bool)

(assert (=> b!24321 m!18783))

(declare-fun m!18785 () Bool)

(assert (=> b!24321 m!18785))

(assert (=> b!24321 m!18785))

(declare-fun m!18787 () Bool)

(assert (=> b!24321 m!18787))

(assert (=> b!24323 m!18785))

(assert (=> b!24323 m!18785))

(assert (=> b!24323 m!18787))

(assert (=> bm!2033 d!4371))

(declare-fun d!4373 () Bool)

(declare-fun e!15737 () Bool)

(assert (=> d!4373 e!15737))

(declare-fun res!14804 () Bool)

(assert (=> d!4373 (=> (not res!14804) (not e!15737))))

(declare-fun lt!9201 () ListLongMap!565)

(assert (=> d!4373 (= res!14804 (contains!230 lt!9201 (_1!493 (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(declare-fun lt!9199 () List!565)

(assert (=> d!4373 (= lt!9201 (ListLongMap!566 lt!9199))))

(declare-fun lt!9200 () Unit!519)

(declare-fun lt!9202 () Unit!519)

(assert (=> d!4373 (= lt!9200 lt!9202)))

(assert (=> d!4373 (= (getValueByKey!60 lt!9199 (_1!493 (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))) (Some!65 (_2!493 (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(assert (=> d!4373 (= lt!9202 (lemmaContainsTupThenGetReturnValue!18 lt!9199 (_1!493 (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (_2!493 (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(assert (=> d!4373 (= lt!9199 (insertStrictlySorted!18 (toList!298 (ite c!3093 call!2031 (ite c!3094 call!2028 call!2029))) (_1!493 (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (_2!493 (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(assert (=> d!4373 (= (+!45 (ite c!3093 call!2031 (ite c!3094 call!2028 call!2029)) (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) lt!9201)))

(declare-fun b!24324 () Bool)

(declare-fun res!14805 () Bool)

(assert (=> b!24324 (=> (not res!14805) (not e!15737))))

(assert (=> b!24324 (= res!14805 (= (getValueByKey!60 (toList!298 lt!9201) (_1!493 (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))) (Some!65 (_2!493 (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))))

(declare-fun b!24325 () Bool)

(assert (=> b!24325 (= e!15737 (contains!231 (toList!298 lt!9201) (ite (or c!3093 c!3094) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (= (and d!4373 res!14804) b!24324))

(assert (= (and b!24324 res!14805) b!24325))

(declare-fun m!18789 () Bool)

(assert (=> d!4373 m!18789))

(declare-fun m!18791 () Bool)

(assert (=> d!4373 m!18791))

(declare-fun m!18793 () Bool)

(assert (=> d!4373 m!18793))

(declare-fun m!18795 () Bool)

(assert (=> d!4373 m!18795))

(declare-fun m!18797 () Bool)

(assert (=> b!24324 m!18797))

(declare-fun m!18799 () Bool)

(assert (=> b!24325 m!18799))

(assert (=> bm!2025 d!4373))

(assert (=> b!23623 d!4057))

(declare-fun b!24326 () Bool)

(declare-fun e!15738 () Option!66)

(assert (=> b!24326 (= e!15738 (Some!65 (_2!493 (h!1127 (toList!298 lt!8591)))))))

(declare-fun b!24329 () Bool)

(declare-fun e!15739 () Option!66)

(assert (=> b!24329 (= e!15739 None!64)))

(declare-fun b!24328 () Bool)

(assert (=> b!24328 (= e!15739 (getValueByKey!60 (t!3229 (toList!298 lt!8591)) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24327 () Bool)

(assert (=> b!24327 (= e!15738 e!15739)))

(declare-fun c!3273 () Bool)

(assert (=> b!24327 (= c!3273 (and ((_ is Cons!561) (toList!298 lt!8591)) (not (= (_1!493 (h!1127 (toList!298 lt!8591))) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun d!4375 () Bool)

(declare-fun c!3272 () Bool)

(assert (=> d!4375 (= c!3272 (and ((_ is Cons!561) (toList!298 lt!8591)) (= (_1!493 (h!1127 (toList!298 lt!8591))) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (=> d!4375 (= (getValueByKey!60 (toList!298 lt!8591) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) e!15738)))

(assert (= (and d!4375 c!3272) b!24326))

(assert (= (and d!4375 (not c!3272)) b!24327))

(assert (= (and b!24327 c!3273) b!24328))

(assert (= (and b!24327 (not c!3273)) b!24329))

(declare-fun m!18801 () Bool)

(assert (=> b!24328 m!18801))

(assert (=> b!23561 d!4375))

(declare-fun b!24338 () Bool)

(declare-fun res!14817 () Bool)

(declare-fun e!15742 () Bool)

(assert (=> b!24338 (=> (not res!14817) (not e!15742))))

(assert (=> b!24338 (= res!14817 (and (= (size!692 (_values!1728 (_2!487 lt!8138))) (bvadd (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 (_2!487 lt!8138))) (size!692 (_values!1728 (_2!487 lt!8138)))) (bvsge (_size!149 (_2!487 lt!8138)) #b00000000000000000000000000000000) (bvsle (_size!149 (_2!487 lt!8138)) (bvadd (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000000001))))))

(declare-fun b!24339 () Bool)

(declare-fun res!14814 () Bool)

(assert (=> b!24339 (=> (not res!14814) (not e!15742))))

(declare-fun size!702 (LongMapFixedSize!208) (_ BitVec 32))

(assert (=> b!24339 (= res!14814 (bvsge (size!702 (_2!487 lt!8138)) (_size!149 (_2!487 lt!8138))))))

(declare-fun b!24340 () Bool)

(declare-fun res!14815 () Bool)

(assert (=> b!24340 (=> (not res!14815) (not e!15742))))

(assert (=> b!24340 (= res!14815 (= (size!702 (_2!487 lt!8138)) (bvadd (_size!149 (_2!487 lt!8138)) (bvsdiv (bvadd (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!4377 () Bool)

(declare-fun res!14816 () Bool)

(assert (=> d!4377 (=> (not res!14816) (not e!15742))))

(assert (=> d!4377 (= res!14816 (validMask!0 (mask!4729 (_2!487 lt!8138))))))

(assert (=> d!4377 (= (simpleValid!20 (_2!487 lt!8138)) e!15742)))

(declare-fun b!24341 () Bool)

(assert (=> b!24341 (= e!15742 (and (bvsge (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000011) (bvsge (_vacant!149 (_2!487 lt!8138)) #b00000000000000000000000000000000)))))

(assert (= (and d!4377 res!14816) b!24338))

(assert (= (and b!24338 res!14817) b!24339))

(assert (= (and b!24339 res!14814) b!24340))

(assert (= (and b!24340 res!14815) b!24341))

(declare-fun m!18803 () Bool)

(assert (=> b!24339 m!18803))

(assert (=> b!24340 m!18803))

(assert (=> d!4377 m!16878))

(assert (=> d!4061 d!4377))

(declare-fun d!4379 () Bool)

(assert (=> d!4379 (= (apply!29 lt!8744 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8744) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1003 () Bool)

(assert (= bs!1003 d!4379))

(declare-fun m!18805 () Bool)

(assert (=> bs!1003 m!18805))

(assert (=> bs!1003 m!18805))

(declare-fun m!18807 () Bool)

(assert (=> bs!1003 m!18807))

(assert (=> b!23752 d!4379))

(declare-fun d!4381 () Bool)

(declare-fun e!15744 () Bool)

(assert (=> d!4381 e!15744))

(declare-fun res!14818 () Bool)

(assert (=> d!4381 (=> res!14818 e!15744)))

(declare-fun lt!9206 () Bool)

(assert (=> d!4381 (= res!14818 (not lt!9206))))

(declare-fun lt!9205 () Bool)

(assert (=> d!4381 (= lt!9206 lt!9205)))

(declare-fun lt!9204 () Unit!519)

(declare-fun e!15743 () Unit!519)

(assert (=> d!4381 (= lt!9204 e!15743)))

(declare-fun c!3274 () Bool)

(assert (=> d!4381 (= c!3274 lt!9205)))

(assert (=> d!4381 (= lt!9205 (containsKey!24 (toList!298 lt!8711) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4381 (= (contains!230 lt!8711 #b1000000000000000000000000000000000000000000000000000000000000000) lt!9206)))

(declare-fun b!24342 () Bool)

(declare-fun lt!9203 () Unit!519)

(assert (=> b!24342 (= e!15743 lt!9203)))

(assert (=> b!24342 (= lt!9203 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8711) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24342 (isDefined!22 (getValueByKey!60 (toList!298 lt!8711) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24343 () Bool)

(declare-fun Unit!574 () Unit!519)

(assert (=> b!24343 (= e!15743 Unit!574)))

(declare-fun b!24344 () Bool)

(assert (=> b!24344 (= e!15744 (isDefined!22 (getValueByKey!60 (toList!298 lt!8711) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4381 c!3274) b!24342))

(assert (= (and d!4381 (not c!3274)) b!24343))

(assert (= (and d!4381 (not res!14818)) b!24344))

(declare-fun m!18809 () Bool)

(assert (=> d!4381 m!18809))

(declare-fun m!18811 () Bool)

(assert (=> b!24342 m!18811))

(assert (=> b!24342 m!18365))

(assert (=> b!24342 m!18365))

(declare-fun m!18813 () Bool)

(assert (=> b!24342 m!18813))

(assert (=> b!24344 m!18365))

(assert (=> b!24344 m!18365))

(assert (=> b!24344 m!18813))

(assert (=> bm!2027 d!4381))

(assert (=> d!3965 d!4069))

(declare-fun b!24361 () Bool)

(declare-fun e!15756 () Bool)

(declare-fun e!15754 () Bool)

(assert (=> b!24361 (= e!15756 e!15754)))

(declare-fun res!14829 () Bool)

(declare-fun call!2133 () Bool)

(assert (=> b!24361 (= res!14829 call!2133)))

(assert (=> b!24361 (=> (not res!14829) (not e!15754))))

(declare-fun b!24362 () Bool)

(declare-fun e!15753 () Bool)

(declare-fun call!2132 () Bool)

(assert (=> b!24362 (= e!15753 (not call!2132))))

(declare-fun bm!2129 () Bool)

(assert (=> bm!2129 (= call!2132 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000))))

(declare-fun lt!9209 () SeekEntryResult!55)

(declare-fun bm!2130 () Bool)

(declare-fun c!3279 () Bool)

(assert (=> bm!2130 (= call!2133 (inRange!0 (ite c!3279 (index!2341 lt!9209) (index!2344 lt!9209)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!24363 () Bool)

(declare-fun res!14830 () Bool)

(assert (=> b!24363 (= res!14830 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2341 lt!9209)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24363 (=> (not res!14830) (not e!15754))))

(declare-fun d!4383 () Bool)

(assert (=> d!4383 e!15756))

(assert (=> d!4383 (= c!3279 ((_ is MissingZero!55) lt!9209))))

(assert (=> d!4383 (= lt!9209 (seekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(assert (=> d!4383 true))

(declare-fun _$34!747 () Unit!519)

(assert (=> d!4383 (= (choose!203 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) _$34!747)))

(declare-fun b!24364 () Bool)

(declare-fun e!15755 () Bool)

(assert (=> b!24364 (= e!15755 ((_ is Undefined!55) lt!9209))))

(declare-fun b!24365 () Bool)

(assert (=> b!24365 (= e!15754 (not call!2132))))

(declare-fun b!24366 () Bool)

(assert (=> b!24366 (= e!15756 e!15755)))

(declare-fun c!3280 () Bool)

(assert (=> b!24366 (= c!3280 ((_ is MissingVacant!55) lt!9209))))

(declare-fun b!24367 () Bool)

(declare-fun res!14828 () Bool)

(assert (=> b!24367 (=> (not res!14828) (not e!15753))))

(assert (=> b!24367 (= res!14828 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2344 lt!9209)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24368 () Bool)

(declare-fun res!14827 () Bool)

(assert (=> b!24368 (=> (not res!14827) (not e!15753))))

(assert (=> b!24368 (= res!14827 call!2133)))

(assert (=> b!24368 (= e!15755 e!15753)))

(assert (= (and d!4383 c!3279) b!24361))

(assert (= (and d!4383 (not c!3279)) b!24366))

(assert (= (and b!24361 res!14829) b!24363))

(assert (= (and b!24363 res!14830) b!24365))

(assert (= (and b!24366 c!3280) b!24368))

(assert (= (and b!24366 (not c!3280)) b!24364))

(assert (= (and b!24368 res!14827) b!24367))

(assert (= (and b!24367 res!14828) b!24362))

(assert (= (or b!24361 b!24368) bm!2130))

(assert (= (or b!24365 b!24362) bm!2129))

(assert (=> bm!2129 m!16860))

(assert (=> d!4383 m!16846))

(declare-fun m!18815 () Bool)

(assert (=> b!24367 m!18815))

(declare-fun m!18817 () Bool)

(assert (=> bm!2130 m!18817))

(declare-fun m!18819 () Bool)

(assert (=> b!24363 m!18819))

(assert (=> d!3965 d!4383))

(assert (=> d!3965 d!4291))

(assert (=> d!4047 d!4031))

(declare-fun b!24369 () Bool)

(declare-fun e!15760 () Bool)

(declare-fun e!15758 () Bool)

(assert (=> b!24369 (= e!15760 e!15758)))

(declare-fun res!14833 () Bool)

(declare-fun call!2135 () Bool)

(assert (=> b!24369 (= res!14833 call!2135)))

(assert (=> b!24369 (=> (not res!14833) (not e!15758))))

(declare-fun b!24370 () Bool)

(declare-fun e!15757 () Bool)

(declare-fun call!2134 () Bool)

(assert (=> b!24370 (= e!15757 (not call!2134))))

(declare-fun bm!2131 () Bool)

(assert (=> bm!2131 (= call!2134 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000))))

(declare-fun lt!9210 () SeekEntryResult!55)

(declare-fun c!3281 () Bool)

(declare-fun bm!2132 () Bool)

(assert (=> bm!2132 (= call!2135 (inRange!0 (ite c!3281 (index!2341 lt!9210) (index!2344 lt!9210)) (mask!4729 lt!8141)))))

(declare-fun b!24371 () Bool)

(declare-fun res!14834 () Bool)

(assert (=> b!24371 (= res!14834 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2341 lt!9210)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24371 (=> (not res!14834) (not e!15758))))

(declare-fun d!4385 () Bool)

(assert (=> d!4385 e!15760))

(assert (=> d!4385 (= c!3281 ((_ is MissingZero!55) lt!9210))))

(assert (=> d!4385 (= lt!9210 (seekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(assert (=> d!4385 true))

(declare-fun _$34!748 () Unit!519)

(assert (=> d!4385 (= (choose!203 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (defaultEntry!1742 lt!8141)) _$34!748)))

(declare-fun b!24372 () Bool)

(declare-fun e!15759 () Bool)

(assert (=> b!24372 (= e!15759 ((_ is Undefined!55) lt!9210))))

(declare-fun b!24373 () Bool)

(assert (=> b!24373 (= e!15758 (not call!2134))))

(declare-fun b!24374 () Bool)

(assert (=> b!24374 (= e!15760 e!15759)))

(declare-fun c!3282 () Bool)

(assert (=> b!24374 (= c!3282 ((_ is MissingVacant!55) lt!9210))))

(declare-fun b!24375 () Bool)

(declare-fun res!14832 () Bool)

(assert (=> b!24375 (=> (not res!14832) (not e!15757))))

(assert (=> b!24375 (= res!14832 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2344 lt!9210)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24376 () Bool)

(declare-fun res!14831 () Bool)

(assert (=> b!24376 (=> (not res!14831) (not e!15757))))

(assert (=> b!24376 (= res!14831 call!2135)))

(assert (=> b!24376 (= e!15759 e!15757)))

(assert (= (and d!4385 c!3281) b!24369))

(assert (= (and d!4385 (not c!3281)) b!24374))

(assert (= (and b!24369 res!14833) b!24371))

(assert (= (and b!24371 res!14834) b!24373))

(assert (= (and b!24374 c!3282) b!24376))

(assert (= (and b!24374 (not c!3282)) b!24372))

(assert (= (and b!24376 res!14831) b!24375))

(assert (= (and b!24375 res!14832) b!24370))

(assert (= (or b!24369 b!24376) bm!2132))

(assert (= (or b!24373 b!24370) bm!2131))

(assert (=> bm!2131 m!16764))

(assert (=> d!4385 m!16750))

(declare-fun m!18821 () Bool)

(assert (=> b!24375 m!18821))

(declare-fun m!18823 () Bool)

(assert (=> bm!2132 m!18823))

(declare-fun m!18825 () Bool)

(assert (=> b!24371 m!18825))

(assert (=> d!4047 d!4385))

(assert (=> d!4047 d!4087))

(declare-fun b!24395 () Bool)

(declare-fun e!15772 () SeekEntryResult!55)

(assert (=> b!24395 (= e!15772 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) #b00000000000000000000000000000000 (mask!4729 lt!8141)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!24396 () Bool)

(declare-fun e!15771 () SeekEntryResult!55)

(assert (=> b!24396 (= e!15771 e!15772)))

(declare-fun lt!9216 () (_ BitVec 64))

(declare-fun c!3290 () Bool)

(assert (=> b!24396 (= c!3290 (or (= lt!9216 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (= (bvadd lt!9216 lt!9216) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24397 () Bool)

(assert (=> b!24397 (= e!15771 (Intermediate!55 true (toIndex!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun b!24399 () Bool)

(declare-fun e!15774 () Bool)

(declare-fun lt!9215 () SeekEntryResult!55)

(assert (=> b!24399 (= e!15774 (bvsge (x!5577 lt!9215) #b01111111111111111111111111111110))))

(declare-fun b!24400 () Bool)

(assert (=> b!24400 (and (bvsge (index!2343 lt!9215) #b00000000000000000000000000000000) (bvslt (index!2343 lt!9215) (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14842 () Bool)

(assert (=> b!24400 (= res!14842 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2343 lt!9215)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15775 () Bool)

(assert (=> b!24400 (=> res!14842 e!15775)))

(declare-fun e!15773 () Bool)

(assert (=> b!24400 (= e!15773 e!15775)))

(declare-fun b!24401 () Bool)

(assert (=> b!24401 (and (bvsge (index!2343 lt!9215) #b00000000000000000000000000000000) (bvslt (index!2343 lt!9215) (size!693 (_keys!3163 lt!8141))))))

(assert (=> b!24401 (= e!15775 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2343 lt!9215)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24398 () Bool)

(assert (=> b!24398 (= e!15774 e!15773)))

(declare-fun res!14841 () Bool)

(assert (=> b!24398 (= res!14841 (and ((_ is Intermediate!55) lt!9215) (not (undefined!867 lt!9215)) (bvslt (x!5577 lt!9215) #b01111111111111111111111111111110) (bvsge (x!5577 lt!9215) #b00000000000000000000000000000000) (bvsge (x!5577 lt!9215) #b00000000000000000000000000000000)))))

(assert (=> b!24398 (=> (not res!14841) (not e!15773))))

(declare-fun d!4387 () Bool)

(assert (=> d!4387 e!15774))

(declare-fun c!3289 () Bool)

(assert (=> d!4387 (= c!3289 (and ((_ is Intermediate!55) lt!9215) (undefined!867 lt!9215)))))

(assert (=> d!4387 (= lt!9215 e!15771)))

(declare-fun c!3291 () Bool)

(assert (=> d!4387 (= c!3291 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!4387 (= lt!9216 (select (arr!597 (_keys!3163 lt!8141)) (toIndex!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141))))))

(assert (=> d!4387 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4387 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)) lt!9215)))

(declare-fun b!24402 () Bool)

(assert (=> b!24402 (and (bvsge (index!2343 lt!9215) #b00000000000000000000000000000000) (bvslt (index!2343 lt!9215) (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14843 () Bool)

(assert (=> b!24402 (= res!14843 (= (select (arr!597 (_keys!3163 lt!8141)) (index!2343 lt!9215)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24402 (=> res!14843 e!15775)))

(declare-fun b!24403 () Bool)

(assert (=> b!24403 (= e!15772 (Intermediate!55 false (toIndex!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) #b00000000000000000000000000000000))))

(assert (= (and d!4387 c!3291) b!24397))

(assert (= (and d!4387 (not c!3291)) b!24396))

(assert (= (and b!24396 c!3290) b!24403))

(assert (= (and b!24396 (not c!3290)) b!24395))

(assert (= (and d!4387 c!3289) b!24399))

(assert (= (and d!4387 (not c!3289)) b!24398))

(assert (= (and b!24398 res!14841) b!24400))

(assert (= (and b!24400 (not res!14842)) b!24402))

(assert (= (and b!24402 (not res!14843)) b!24401))

(assert (=> b!24395 m!17280))

(declare-fun m!18827 () Bool)

(assert (=> b!24395 m!18827))

(assert (=> b!24395 m!18827))

(declare-fun m!18829 () Bool)

(assert (=> b!24395 m!18829))

(assert (=> d!4387 m!17280))

(declare-fun m!18831 () Bool)

(assert (=> d!4387 m!18831))

(assert (=> d!4387 m!17050))

(declare-fun m!18833 () Bool)

(assert (=> b!24402 m!18833))

(assert (=> b!24401 m!18833))

(assert (=> b!24400 m!18833))

(assert (=> d!4031 d!4387))

(declare-fun d!4389 () Bool)

(declare-fun lt!9222 () (_ BitVec 32))

(declare-fun lt!9221 () (_ BitVec 32))

(assert (=> d!4389 (= lt!9222 (bvmul (bvxor lt!9221 (bvlshr lt!9221 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!4389 (= lt!9221 ((_ extract 31 0) (bvand (bvxor (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvlshr (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!4389 (and (bvsge (mask!4729 lt!8141) #b00000000000000000000000000000000) (let ((res!14844 (let ((h!1129 ((_ extract 31 0) (bvand (bvxor (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvlshr (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!5837 (bvmul (bvxor h!1129 (bvlshr h!1129 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!5837 (bvlshr x!5837 #b00000000000000000000000000001101)) (mask!4729 lt!8141)))))) (and (bvslt res!14844 (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001)) (bvsge res!14844 #b00000000000000000000000000000000))))))

(assert (=> d!4389 (= (toIndex!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (mask!4729 lt!8141)) (bvand (bvxor lt!9222 (bvlshr lt!9222 #b00000000000000000000000000001101)) (mask!4729 lt!8141)))))

(assert (=> d!4031 d!4389))

(assert (=> d!4031 d!4087))

(declare-fun d!4391 () Bool)

(declare-fun lt!9223 () Bool)

(assert (=> d!4391 (= lt!9223 (select (content!15 (toList!298 lt!8487)) (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun e!15776 () Bool)

(assert (=> d!4391 (= lt!9223 e!15776)))

(declare-fun res!14845 () Bool)

(assert (=> d!4391 (=> (not res!14845) (not e!15776))))

(assert (=> d!4391 (= res!14845 ((_ is Cons!561) (toList!298 lt!8487)))))

(assert (=> d!4391 (= (contains!231 (toList!298 lt!8487) (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) lt!9223)))

(declare-fun b!24404 () Bool)

(declare-fun e!15777 () Bool)

(assert (=> b!24404 (= e!15776 e!15777)))

(declare-fun res!14846 () Bool)

(assert (=> b!24404 (=> res!14846 e!15777)))

(assert (=> b!24404 (= res!14846 (= (h!1127 (toList!298 lt!8487)) (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24405 () Bool)

(assert (=> b!24405 (= e!15777 (contains!231 (t!3229 (toList!298 lt!8487)) (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (= (and d!4391 res!14845) b!24404))

(assert (= (and b!24404 (not res!14846)) b!24405))

(declare-fun m!18835 () Bool)

(assert (=> d!4391 m!18835))

(declare-fun m!18837 () Bool)

(assert (=> d!4391 m!18837))

(declare-fun m!18839 () Bool)

(assert (=> b!24405 m!18839))

(assert (=> b!23504 d!4391))

(declare-fun d!4393 () Bool)

(declare-fun e!15779 () Bool)

(assert (=> d!4393 e!15779))

(declare-fun res!14847 () Bool)

(assert (=> d!4393 (=> res!14847 e!15779)))

(declare-fun lt!9227 () Bool)

(assert (=> d!4393 (= res!14847 (not lt!9227))))

(declare-fun lt!9226 () Bool)

(assert (=> d!4393 (= lt!9227 lt!9226)))

(declare-fun lt!9225 () Unit!519)

(declare-fun e!15778 () Unit!519)

(assert (=> d!4393 (= lt!9225 e!15778)))

(declare-fun c!3292 () Bool)

(assert (=> d!4393 (= c!3292 lt!9226)))

(assert (=> d!4393 (= lt!9226 (containsKey!24 (toList!298 lt!8668) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> d!4393 (= (contains!230 lt!8668 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) lt!9227)))

(declare-fun b!24406 () Bool)

(declare-fun lt!9224 () Unit!519)

(assert (=> b!24406 (= e!15778 lt!9224)))

(assert (=> b!24406 (= lt!9224 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8668) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24406 (isDefined!22 (getValueByKey!60 (toList!298 lt!8668) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24407 () Bool)

(declare-fun Unit!575 () Unit!519)

(assert (=> b!24407 (= e!15778 Unit!575)))

(declare-fun b!24408 () Bool)

(assert (=> b!24408 (= e!15779 (isDefined!22 (getValueByKey!60 (toList!298 lt!8668) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(assert (= (and d!4393 c!3292) b!24406))

(assert (= (and d!4393 (not c!3292)) b!24407))

(assert (= (and d!4393 (not res!14847)) b!24408))

(assert (=> d!4393 m!17198))

(declare-fun m!18841 () Bool)

(assert (=> d!4393 m!18841))

(assert (=> b!24406 m!17198))

(declare-fun m!18843 () Bool)

(assert (=> b!24406 m!18843))

(assert (=> b!24406 m!17198))

(assert (=> b!24406 m!17655))

(assert (=> b!24406 m!17655))

(declare-fun m!18845 () Bool)

(assert (=> b!24406 m!18845))

(assert (=> b!24408 m!17198))

(assert (=> b!24408 m!17655))

(assert (=> b!24408 m!17655))

(assert (=> b!24408 m!18845))

(assert (=> b!23666 d!4393))

(declare-fun b!24409 () Bool)

(declare-fun res!14851 () Bool)

(declare-fun e!15780 () Bool)

(assert (=> b!24409 (=> (not res!14851) (not e!15780))))

(assert (=> b!24409 (= res!14851 (and (= (size!692 (_values!1728 lt!8306)) (bvadd (mask!4729 lt!8306) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 lt!8306)) (size!692 (_values!1728 lt!8306))) (bvsge (_size!149 lt!8306) #b00000000000000000000000000000000) (bvsle (_size!149 lt!8306) (bvadd (mask!4729 lt!8306) #b00000000000000000000000000000001))))))

(declare-fun b!24410 () Bool)

(declare-fun res!14848 () Bool)

(assert (=> b!24410 (=> (not res!14848) (not e!15780))))

(assert (=> b!24410 (= res!14848 (bvsge (size!702 lt!8306) (_size!149 lt!8306)))))

(declare-fun b!24411 () Bool)

(declare-fun res!14849 () Bool)

(assert (=> b!24411 (=> (not res!14849) (not e!15780))))

(assert (=> b!24411 (= res!14849 (= (size!702 lt!8306) (bvadd (_size!149 lt!8306) (bvsdiv (bvadd (extraKeys!1640 lt!8306) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!4395 () Bool)

(declare-fun res!14850 () Bool)

(assert (=> d!4395 (=> (not res!14850) (not e!15780))))

(assert (=> d!4395 (= res!14850 (validMask!0 (mask!4729 lt!8306)))))

(assert (=> d!4395 (= (simpleValid!20 lt!8306) e!15780)))

(declare-fun b!24412 () Bool)

(assert (=> b!24412 (= e!15780 (and (bvsge (extraKeys!1640 lt!8306) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 lt!8306) #b00000000000000000000000000000011) (bvsge (_vacant!149 lt!8306) #b00000000000000000000000000000000)))))

(assert (= (and d!4395 res!14850) b!24409))

(assert (= (and b!24409 res!14851) b!24410))

(assert (= (and b!24410 res!14848) b!24411))

(assert (= (and b!24411 res!14849) b!24412))

(declare-fun m!18847 () Bool)

(assert (=> b!24410 m!18847))

(assert (=> b!24411 m!18847))

(assert (=> d!4395 m!18447))

(assert (=> d!4011 d!4395))

(assert (=> b!23786 d!4123))

(declare-fun b!24413 () Bool)

(declare-fun res!14855 () Bool)

(declare-fun e!15781 () Bool)

(assert (=> b!24413 (=> (not res!14855) (not e!15781))))

(assert (=> b!24413 (= res!14855 (and (= (size!692 (_values!1728 (_2!487 lt!8336))) (bvadd (mask!4729 (_2!487 lt!8336)) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 (_2!487 lt!8336))) (size!692 (_values!1728 (_2!487 lt!8336)))) (bvsge (_size!149 (_2!487 lt!8336)) #b00000000000000000000000000000000) (bvsle (_size!149 (_2!487 lt!8336)) (bvadd (mask!4729 (_2!487 lt!8336)) #b00000000000000000000000000000001))))))

(declare-fun b!24414 () Bool)

(declare-fun res!14852 () Bool)

(assert (=> b!24414 (=> (not res!14852) (not e!15781))))

(assert (=> b!24414 (= res!14852 (bvsge (size!702 (_2!487 lt!8336)) (_size!149 (_2!487 lt!8336))))))

(declare-fun b!24415 () Bool)

(declare-fun res!14853 () Bool)

(assert (=> b!24415 (=> (not res!14853) (not e!15781))))

(assert (=> b!24415 (= res!14853 (= (size!702 (_2!487 lt!8336)) (bvadd (_size!149 (_2!487 lt!8336)) (bvsdiv (bvadd (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!4397 () Bool)

(declare-fun res!14854 () Bool)

(assert (=> d!4397 (=> (not res!14854) (not e!15781))))

(assert (=> d!4397 (= res!14854 (validMask!0 (mask!4729 (_2!487 lt!8336))))))

(assert (=> d!4397 (= (simpleValid!20 (_2!487 lt!8336)) e!15781)))

(declare-fun b!24416 () Bool)

(assert (=> b!24416 (= e!15781 (and (bvsge (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 (_2!487 lt!8336)) #b00000000000000000000000000000011) (bvsge (_vacant!149 (_2!487 lt!8336)) #b00000000000000000000000000000000)))))

(assert (= (and d!4397 res!14854) b!24413))

(assert (= (and b!24413 res!14855) b!24414))

(assert (= (and b!24414 res!14852) b!24415))

(assert (= (and b!24415 res!14853) b!24416))

(declare-fun m!18849 () Bool)

(assert (=> b!24414 m!18849))

(assert (=> b!24415 m!18849))

(assert (=> d!4397 m!18749))

(assert (=> d!4059 d!4397))

(declare-fun d!4399 () Bool)

(declare-fun res!14856 () Bool)

(declare-fun e!15782 () Bool)

(assert (=> d!4399 (=> res!14856 e!15782)))

(assert (=> d!4399 (= res!14856 (= (select (arr!597 (_keys!3163 lt!8141)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4399 (= (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!15782)))

(declare-fun b!24417 () Bool)

(declare-fun e!15783 () Bool)

(assert (=> b!24417 (= e!15782 e!15783)))

(declare-fun res!14857 () Bool)

(assert (=> b!24417 (=> (not res!14857) (not e!15783))))

(assert (=> b!24417 (= res!14857 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24418 () Bool)

(assert (=> b!24418 (= e!15783 (arrayContainsKey!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!4399 (not res!14856)) b!24417))

(assert (= (and b!24417 res!14857) b!24418))

(declare-fun m!18851 () Bool)

(assert (=> d!4399 m!18851))

(declare-fun m!18853 () Bool)

(assert (=> b!24418 m!18853))

(assert (=> b!23610 d!4399))

(assert (=> d!4019 d!4009))

(declare-fun d!4401 () Bool)

(assert (=> d!4401 (= (arrayCountValidKeys!0 lt!8324 lt!8313 lt!8314) #b00000000000000000000000000000000)))

(assert (=> d!4401 true))

(declare-fun _$88!16 () Unit!519)

(assert (=> d!4401 (= (choose!59 lt!8324 lt!8313 lt!8314) _$88!16)))

(declare-fun bs!1004 () Bool)

(assert (= bs!1004 d!4401))

(assert (=> bs!1004 m!16806))

(assert (=> d!4019 d!4401))

(assert (=> d!4079 d!4291))

(assert (=> d!4049 d!4245))

(declare-fun d!4403 () Bool)

(assert (=> d!4403 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4403 true))

(declare-fun _$5!55 () Unit!519)

(assert (=> d!4403 (= (choose!209 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (index!2342 lt!8342) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))) _$5!55)))

(declare-fun bs!1005 () Bool)

(assert (= bs!1005 d!4403))

(assert (=> bs!1005 m!17036))

(assert (=> bs!1005 m!17036))

(assert (=> bs!1005 m!17212))

(assert (=> bs!1005 m!16822))

(assert (=> bs!1005 m!17613))

(assert (=> d!4083 d!4403))

(assert (=> d!4083 d!4291))

(declare-fun b!24419 () Bool)

(declare-fun e!15784 () (_ BitVec 32))

(assert (=> b!24419 (= e!15784 #b00000000000000000000000000000000)))

(declare-fun b!24420 () Bool)

(declare-fun e!15785 () (_ BitVec 32))

(assert (=> b!24420 (= e!15784 e!15785)))

(declare-fun c!3294 () Bool)

(assert (=> b!24420 (= c!3294 (validKeyInArray!0 (select (arr!597 lt!8324) (bvadd lt!8313 #b00000000000000000000000000000001))))))

(declare-fun b!24421 () Bool)

(declare-fun call!2136 () (_ BitVec 32))

(assert (=> b!24421 (= e!15785 (bvadd #b00000000000000000000000000000001 call!2136))))

(declare-fun b!24422 () Bool)

(assert (=> b!24422 (= e!15785 call!2136)))

(declare-fun bm!2133 () Bool)

(assert (=> bm!2133 (= call!2136 (arrayCountValidKeys!0 lt!8324 (bvadd lt!8313 #b00000000000000000000000000000001 #b00000000000000000000000000000001) lt!8314))))

(declare-fun d!4405 () Bool)

(declare-fun lt!9228 () (_ BitVec 32))

(assert (=> d!4405 (and (bvsge lt!9228 #b00000000000000000000000000000000) (bvsle lt!9228 (bvsub (size!693 lt!8324) (bvadd lt!8313 #b00000000000000000000000000000001))))))

(assert (=> d!4405 (= lt!9228 e!15784)))

(declare-fun c!3293 () Bool)

(assert (=> d!4405 (= c!3293 (bvsge (bvadd lt!8313 #b00000000000000000000000000000001) lt!8314))))

(assert (=> d!4405 (and (bvsle (bvadd lt!8313 #b00000000000000000000000000000001) lt!8314) (bvsge (bvadd lt!8313 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle lt!8314 (size!693 lt!8324)))))

(assert (=> d!4405 (= (arrayCountValidKeys!0 lt!8324 (bvadd lt!8313 #b00000000000000000000000000000001) lt!8314) lt!9228)))

(assert (= (and d!4405 c!3293) b!24419))

(assert (= (and d!4405 (not c!3293)) b!24420))

(assert (= (and b!24420 c!3294) b!24421))

(assert (= (and b!24420 (not c!3294)) b!24422))

(assert (= (or b!24421 b!24422) bm!2133))

(declare-fun m!18855 () Bool)

(assert (=> b!24420 m!18855))

(assert (=> b!24420 m!18855))

(declare-fun m!18857 () Bool)

(assert (=> b!24420 m!18857))

(declare-fun m!18859 () Bool)

(assert (=> bm!2133 m!18859))

(assert (=> bm!2004 d!4405))

(declare-fun d!4407 () Bool)

(declare-fun e!15787 () Bool)

(assert (=> d!4407 e!15787))

(declare-fun res!14858 () Bool)

(assert (=> d!4407 (=> res!14858 e!15787)))

(declare-fun lt!9232 () Bool)

(assert (=> d!4407 (= res!14858 (not lt!9232))))

(declare-fun lt!9231 () Bool)

(assert (=> d!4407 (= lt!9232 lt!9231)))

(declare-fun lt!9230 () Unit!519)

(declare-fun e!15786 () Unit!519)

(assert (=> d!4407 (= lt!9230 e!15786)))

(declare-fun c!3295 () Bool)

(assert (=> d!4407 (= c!3295 lt!9231)))

(assert (=> d!4407 (= lt!9231 (containsKey!24 (toList!298 lt!8427) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> d!4407 (= (contains!230 lt!8427 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) lt!9232)))

(declare-fun b!24423 () Bool)

(declare-fun lt!9229 () Unit!519)

(assert (=> b!24423 (= e!15786 lt!9229)))

(assert (=> b!24423 (= lt!9229 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8427) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!24423 (isDefined!22 (getValueByKey!60 (toList!298 lt!8427) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun b!24424 () Bool)

(declare-fun Unit!576 () Unit!519)

(assert (=> b!24424 (= e!15786 Unit!576)))

(declare-fun b!24425 () Bool)

(assert (=> b!24425 (= e!15787 (isDefined!22 (getValueByKey!60 (toList!298 lt!8427) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))))

(assert (= (and d!4407 c!3295) b!24423))

(assert (= (and d!4407 (not c!3295)) b!24424))

(assert (= (and d!4407 (not res!14858)) b!24425))

(assert (=> d!4407 m!16908))

(declare-fun m!18861 () Bool)

(assert (=> d!4407 m!18861))

(assert (=> b!24423 m!16908))

(declare-fun m!18863 () Bool)

(assert (=> b!24423 m!18863))

(assert (=> b!24423 m!16908))

(declare-fun m!18865 () Bool)

(assert (=> b!24423 m!18865))

(assert (=> b!24423 m!18865))

(declare-fun m!18867 () Bool)

(assert (=> b!24423 m!18867))

(assert (=> b!24425 m!16908))

(assert (=> b!24425 m!18865))

(assert (=> b!24425 m!18865))

(assert (=> b!24425 m!18867))

(assert (=> b!23453 d!4407))

(declare-fun d!4409 () Bool)

(assert (=> d!4409 (= (apply!29 lt!8711 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!391 (getValueByKey!60 (toList!298 lt!8711) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(declare-fun bs!1006 () Bool)

(assert (= bs!1006 d!4409))

(assert (=> bs!1006 m!17198))

(assert (=> bs!1006 m!17637))

(assert (=> bs!1006 m!17637))

(declare-fun m!18869 () Bool)

(assert (=> bs!1006 m!18869))

(assert (=> b!23710 d!4409))

(declare-fun d!4411 () Bool)

(declare-fun c!3296 () Bool)

(assert (=> d!4411 (= c!3296 ((_ is ValueCellFull!311) (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun e!15788 () V!1187)

(assert (=> d!4411 (= (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)) e!15788)))

(declare-fun b!24426 () Bool)

(assert (=> b!24426 (= e!15788 (get!392 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24427 () Bool)

(assert (=> b!24427 (= e!15788 (get!393 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4411 c!3296) b!24426))

(assert (= (and d!4411 (not c!3296)) b!24427))

(assert (=> b!24426 m!17413))

(assert (=> b!24426 m!17304))

(declare-fun m!18871 () Bool)

(assert (=> b!24426 m!18871))

(assert (=> b!24427 m!17413))

(assert (=> b!24427 m!17304))

(declare-fun m!18873 () Bool)

(assert (=> b!24427 m!18873))

(assert (=> b!23710 d!4411))

(declare-fun d!4413 () Bool)

(declare-fun e!15789 () Bool)

(assert (=> d!4413 e!15789))

(declare-fun res!14859 () Bool)

(assert (=> d!4413 (=> (not res!14859) (not e!15789))))

(declare-fun lt!9235 () ListLongMap!565)

(assert (=> d!4413 (= res!14859 (contains!230 lt!9235 (_1!493 (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun lt!9233 () List!565)

(assert (=> d!4413 (= lt!9235 (ListLongMap!566 lt!9233))))

(declare-fun lt!9234 () Unit!519)

(declare-fun lt!9236 () Unit!519)

(assert (=> d!4413 (= lt!9234 lt!9236)))

(assert (=> d!4413 (= (getValueByKey!60 lt!9233 (_1!493 (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4413 (= lt!9236 (lemmaContainsTupThenGetReturnValue!18 lt!9233 (_1!493 (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) (_2!493 (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4413 (= lt!9233 (insertStrictlySorted!18 (toList!298 (ite c!3038 call!1990 (ite c!3039 call!1987 call!1988))) (_1!493 (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) (_2!493 (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4413 (= (+!45 (ite c!3038 call!1990 (ite c!3039 call!1987 call!1988)) (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) lt!9235)))

(declare-fun b!24428 () Bool)

(declare-fun res!14860 () Bool)

(assert (=> b!24428 (=> (not res!14860) (not e!15789))))

(assert (=> b!24428 (= res!14860 (= (getValueByKey!60 (toList!298 lt!9235) (_1!493 (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))))

(declare-fun b!24429 () Bool)

(assert (=> b!24429 (= e!15789 (contains!231 (toList!298 lt!9235) (ite (or c!3038 c!3039) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(assert (= (and d!4413 res!14859) b!24428))

(assert (= (and b!24428 res!14860) b!24429))

(declare-fun m!18875 () Bool)

(assert (=> d!4413 m!18875))

(declare-fun m!18877 () Bool)

(assert (=> d!4413 m!18877))

(declare-fun m!18879 () Bool)

(assert (=> d!4413 m!18879))

(declare-fun m!18881 () Bool)

(assert (=> d!4413 m!18881))

(declare-fun m!18883 () Bool)

(assert (=> b!24428 m!18883))

(declare-fun m!18885 () Bool)

(assert (=> b!24429 m!18885))

(assert (=> bm!1984 d!4413))

(declare-fun d!4415 () Bool)

(assert (=> d!4415 (= (inRange!0 (ite c!3086 (index!2341 lt!8698) (index!2344 lt!8698)) (mask!4729 lt!8141)) (and (bvsge (ite c!3086 (index!2341 lt!8698) (index!2344 lt!8698)) #b00000000000000000000000000000000) (bvslt (ite c!3086 (index!2341 lt!8698) (index!2344 lt!8698)) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(assert (=> bm!2023 d!4415))

(declare-fun d!4417 () Bool)

(declare-fun res!14861 () Bool)

(declare-fun e!15790 () Bool)

(assert (=> d!4417 (=> res!14861 e!15790)))

(assert (=> d!4417 (= res!14861 (and ((_ is Cons!561) (toList!298 e!15108)) (= (_1!493 (h!1127 (toList!298 e!15108))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4417 (= (containsKey!24 (toList!298 e!15108) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) e!15790)))

(declare-fun b!24430 () Bool)

(declare-fun e!15791 () Bool)

(assert (=> b!24430 (= e!15790 e!15791)))

(declare-fun res!14862 () Bool)

(assert (=> b!24430 (=> (not res!14862) (not e!15791))))

(assert (=> b!24430 (= res!14862 (and (or (not ((_ is Cons!561) (toList!298 e!15108))) (bvsle (_1!493 (h!1127 (toList!298 e!15108))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))) ((_ is Cons!561) (toList!298 e!15108)) (bvslt (_1!493 (h!1127 (toList!298 e!15108))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24431 () Bool)

(assert (=> b!24431 (= e!15791 (containsKey!24 (t!3229 (toList!298 e!15108)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4417 (not res!14861)) b!24430))

(assert (= (and b!24430 res!14862) b!24431))

(declare-fun m!18887 () Bool)

(assert (=> b!24431 m!18887))

(assert (=> d!4073 d!4417))

(declare-fun d!4419 () Bool)

(declare-fun e!15793 () Bool)

(assert (=> d!4419 e!15793))

(declare-fun res!14863 () Bool)

(assert (=> d!4419 (=> res!14863 e!15793)))

(declare-fun lt!9240 () Bool)

(assert (=> d!4419 (= res!14863 (not lt!9240))))

(declare-fun lt!9239 () Bool)

(assert (=> d!4419 (= lt!9240 lt!9239)))

(declare-fun lt!9238 () Unit!519)

(declare-fun e!15792 () Unit!519)

(assert (=> d!4419 (= lt!9238 e!15792)))

(declare-fun c!3297 () Bool)

(assert (=> d!4419 (= c!3297 lt!9239)))

(assert (=> d!4419 (= lt!9239 (containsKey!24 (toList!298 lt!8587) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4419 (= (contains!230 lt!8587 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) lt!9240)))

(declare-fun b!24432 () Bool)

(declare-fun lt!9237 () Unit!519)

(assert (=> b!24432 (= e!15792 lt!9237)))

(assert (=> b!24432 (= lt!9237 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8587) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> b!24432 (isDefined!22 (getValueByKey!60 (toList!298 lt!8587) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24433 () Bool)

(declare-fun Unit!577 () Unit!519)

(assert (=> b!24433 (= e!15792 Unit!577)))

(declare-fun b!24434 () Bool)

(assert (=> b!24434 (= e!15793 (isDefined!22 (getValueByKey!60 (toList!298 lt!8587) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4419 c!3297) b!24432))

(assert (= (and d!4419 (not c!3297)) b!24433))

(assert (= (and d!4419 (not res!14863)) b!24434))

(declare-fun m!18889 () Bool)

(assert (=> d!4419 m!18889))

(declare-fun m!18891 () Bool)

(assert (=> b!24432 m!18891))

(assert (=> b!24432 m!17140))

(assert (=> b!24432 m!17140))

(declare-fun m!18893 () Bool)

(assert (=> b!24432 m!18893))

(assert (=> b!24434 m!17140))

(assert (=> b!24434 m!17140))

(assert (=> b!24434 m!18893))

(assert (=> d!4001 d!4419))

(declare-fun b!24435 () Bool)

(declare-fun e!15794 () Option!66)

(assert (=> b!24435 (= e!15794 (Some!65 (_2!493 (h!1127 lt!8585))))))

(declare-fun b!24438 () Bool)

(declare-fun e!15795 () Option!66)

(assert (=> b!24438 (= e!15795 None!64)))

(declare-fun b!24437 () Bool)

(assert (=> b!24437 (= e!15795 (getValueByKey!60 (t!3229 lt!8585) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24436 () Bool)

(assert (=> b!24436 (= e!15794 e!15795)))

(declare-fun c!3299 () Bool)

(assert (=> b!24436 (= c!3299 (and ((_ is Cons!561) lt!8585) (not (= (_1!493 (h!1127 lt!8585)) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun c!3298 () Bool)

(declare-fun d!4421 () Bool)

(assert (=> d!4421 (= c!3298 (and ((_ is Cons!561) lt!8585) (= (_1!493 (h!1127 lt!8585)) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (=> d!4421 (= (getValueByKey!60 lt!8585 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) e!15794)))

(assert (= (and d!4421 c!3298) b!24435))

(assert (= (and d!4421 (not c!3298)) b!24436))

(assert (= (and b!24436 c!3299) b!24437))

(assert (= (and b!24436 (not c!3299)) b!24438))

(declare-fun m!18895 () Bool)

(assert (=> b!24437 m!18895))

(assert (=> d!4001 d!4421))

(declare-fun d!4423 () Bool)

(assert (=> d!4423 (= (getValueByKey!60 lt!8585 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun lt!9241 () Unit!519)

(assert (=> d!4423 (= lt!9241 (choose!214 lt!8585 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun e!15796 () Bool)

(assert (=> d!4423 e!15796))

(declare-fun res!14864 () Bool)

(assert (=> d!4423 (=> (not res!14864) (not e!15796))))

(assert (=> d!4423 (= res!14864 (isStrictlySorted!165 lt!8585))))

(assert (=> d!4423 (= (lemmaContainsTupThenGetReturnValue!18 lt!8585 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) lt!9241)))

(declare-fun b!24439 () Bool)

(declare-fun res!14865 () Bool)

(assert (=> b!24439 (=> (not res!14865) (not e!15796))))

(assert (=> b!24439 (= res!14865 (containsKey!24 lt!8585 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24440 () Bool)

(assert (=> b!24440 (= e!15796 (contains!231 lt!8585 (tuple2!971 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (= (and d!4423 res!14864) b!24439))

(assert (= (and b!24439 res!14865) b!24440))

(assert (=> d!4423 m!17134))

(declare-fun m!18897 () Bool)

(assert (=> d!4423 m!18897))

(declare-fun m!18899 () Bool)

(assert (=> d!4423 m!18899))

(declare-fun m!18901 () Bool)

(assert (=> b!24439 m!18901))

(declare-fun m!18903 () Bool)

(assert (=> b!24440 m!18903))

(assert (=> d!4001 d!4423))

(declare-fun b!24441 () Bool)

(declare-fun e!15798 () List!565)

(assert (=> b!24441 (= e!15798 (insertStrictlySorted!18 (t!3229 (toList!298 (ite c!2989 call!1950 call!1937))) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24442 () Bool)

(declare-fun e!15801 () List!565)

(declare-fun call!2138 () List!565)

(assert (=> b!24442 (= e!15801 call!2138)))

(declare-fun lt!9242 () List!565)

(declare-fun b!24443 () Bool)

(declare-fun e!15799 () Bool)

(assert (=> b!24443 (= e!15799 (contains!231 lt!9242 (tuple2!971 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun bm!2134 () Bool)

(declare-fun call!2137 () List!565)

(assert (=> bm!2134 (= call!2138 call!2137)))

(declare-fun call!2139 () List!565)

(declare-fun bm!2135 () Bool)

(declare-fun c!3303 () Bool)

(assert (=> bm!2135 (= call!2139 ($colon$colon!30 e!15798 (ite c!3303 (h!1127 (toList!298 (ite c!2989 call!1950 call!1937))) (tuple2!971 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun c!3302 () Bool)

(assert (=> bm!2135 (= c!3302 c!3303)))

(declare-fun b!24444 () Bool)

(declare-fun c!3301 () Bool)

(assert (=> b!24444 (= c!3301 (and ((_ is Cons!561) (toList!298 (ite c!2989 call!1950 call!1937))) (bvsgt (_1!493 (h!1127 (toList!298 (ite c!2989 call!1950 call!1937)))) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun e!15800 () List!565)

(assert (=> b!24444 (= e!15800 e!15801)))

(declare-fun b!24445 () Bool)

(declare-fun e!15797 () List!565)

(assert (=> b!24445 (= e!15797 call!2139)))

(declare-fun b!24446 () Bool)

(declare-fun res!14866 () Bool)

(assert (=> b!24446 (=> (not res!14866) (not e!15799))))

(assert (=> b!24446 (= res!14866 (containsKey!24 lt!9242 (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24447 () Bool)

(assert (=> b!24447 (= e!15797 e!15800)))

(declare-fun c!3300 () Bool)

(assert (=> b!24447 (= c!3300 (and ((_ is Cons!561) (toList!298 (ite c!2989 call!1950 call!1937))) (= (_1!493 (h!1127 (toList!298 (ite c!2989 call!1950 call!1937)))) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24448 () Bool)

(assert (=> b!24448 (= e!15801 call!2138)))

(declare-fun b!24449 () Bool)

(assert (=> b!24449 (= e!15798 (ite c!3300 (t!3229 (toList!298 (ite c!2989 call!1950 call!1937))) (ite c!3301 (Cons!561 (h!1127 (toList!298 (ite c!2989 call!1950 call!1937))) (t!3229 (toList!298 (ite c!2989 call!1950 call!1937)))) Nil!562)))))

(declare-fun d!4425 () Bool)

(assert (=> d!4425 e!15799))

(declare-fun res!14867 () Bool)

(assert (=> d!4425 (=> (not res!14867) (not e!15799))))

(assert (=> d!4425 (= res!14867 (isStrictlySorted!165 lt!9242))))

(assert (=> d!4425 (= lt!9242 e!15797)))

(assert (=> d!4425 (= c!3303 (and ((_ is Cons!561) (toList!298 (ite c!2989 call!1950 call!1937))) (bvslt (_1!493 (h!1127 (toList!298 (ite c!2989 call!1950 call!1937)))) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (=> d!4425 (isStrictlySorted!165 (toList!298 (ite c!2989 call!1950 call!1937)))))

(assert (=> d!4425 (= (insertStrictlySorted!18 (toList!298 (ite c!2989 call!1950 call!1937)) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) lt!9242)))

(declare-fun b!24450 () Bool)

(assert (=> b!24450 (= e!15800 call!2137)))

(declare-fun bm!2136 () Bool)

(assert (=> bm!2136 (= call!2137 call!2139)))

(assert (= (and d!4425 c!3303) b!24445))

(assert (= (and d!4425 (not c!3303)) b!24447))

(assert (= (and b!24447 c!3300) b!24450))

(assert (= (and b!24447 (not c!3300)) b!24444))

(assert (= (and b!24444 c!3301) b!24448))

(assert (= (and b!24444 (not c!3301)) b!24442))

(assert (= (or b!24448 b!24442) bm!2134))

(assert (= (or b!24450 bm!2134) bm!2136))

(assert (= (or b!24445 bm!2136) bm!2135))

(assert (= (and bm!2135 c!3302) b!24441))

(assert (= (and bm!2135 (not c!3302)) b!24449))

(assert (= (and d!4425 res!14867) b!24446))

(assert (= (and b!24446 res!14866) b!24443))

(declare-fun m!18905 () Bool)

(assert (=> d!4425 m!18905))

(declare-fun m!18907 () Bool)

(assert (=> d!4425 m!18907))

(declare-fun m!18909 () Bool)

(assert (=> b!24446 m!18909))

(declare-fun m!18911 () Bool)

(assert (=> b!24443 m!18911))

(declare-fun m!18913 () Bool)

(assert (=> bm!2135 m!18913))

(declare-fun m!18915 () Bool)

(assert (=> b!24441 m!18915))

(assert (=> d!4001 d!4425))

(declare-fun d!4427 () Bool)

(assert (=> d!4427 (= (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342)))) (not (isEmpty!173 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))))

(declare-fun bs!1007 () Bool)

(assert (= bs!1007 d!4427))

(assert (=> bs!1007 m!17553))

(declare-fun m!18917 () Bool)

(assert (=> bs!1007 m!18917))

(assert (=> b!23766 d!4427))

(declare-fun b!24451 () Bool)

(declare-fun e!15802 () Option!66)

(assert (=> b!24451 (= e!15802 (Some!65 (_2!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))))))

(declare-fun b!24454 () Bool)

(declare-fun e!15803 () Option!66)

(assert (=> b!24454 (= e!15803 None!64)))

(declare-fun b!24453 () Bool)

(assert (=> b!24453 (= e!15803 (getValueByKey!60 (t!3229 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))

(declare-fun b!24452 () Bool)

(assert (=> b!24452 (= e!15802 e!15803)))

(declare-fun c!3305 () Bool)

(assert (=> b!24452 (= c!3305 (and ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))) (not (= (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))))

(declare-fun d!4429 () Bool)

(declare-fun c!3304 () Bool)

(assert (=> d!4429 (= c!3304 (and ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))) (= (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342)))))))

(assert (=> d!4429 (= (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))) e!15802)))

(assert (= (and d!4429 c!3304) b!24451))

(assert (= (and d!4429 (not c!3304)) b!24452))

(assert (= (and b!24452 c!3305) b!24453))

(assert (= (and b!24452 (not c!3305)) b!24454))

(assert (=> b!24453 m!16818))

(declare-fun m!18919 () Bool)

(assert (=> b!24453 m!18919))

(assert (=> b!23766 d!4429))

(declare-fun lt!9245 () Bool)

(declare-fun d!4431 () Bool)

(declare-fun content!16 (List!566) (InoxSet (_ BitVec 64)))

(assert (=> d!4431 (= lt!9245 (select (content!16 lt!8325) (select (arr!597 lt!8321) lt!8319)))))

(declare-fun e!15808 () Bool)

(assert (=> d!4431 (= lt!9245 e!15808)))

(declare-fun res!14872 () Bool)

(assert (=> d!4431 (=> (not res!14872) (not e!15808))))

(assert (=> d!4431 (= res!14872 ((_ is Cons!562) lt!8325))))

(assert (=> d!4431 (= (contains!232 lt!8325 (select (arr!597 lt!8321) lt!8319)) lt!9245)))

(declare-fun b!24459 () Bool)

(declare-fun e!15809 () Bool)

(assert (=> b!24459 (= e!15808 e!15809)))

(declare-fun res!14873 () Bool)

(assert (=> b!24459 (=> res!14873 e!15809)))

(assert (=> b!24459 (= res!14873 (= (h!1128 lt!8325) (select (arr!597 lt!8321) lt!8319)))))

(declare-fun b!24460 () Bool)

(assert (=> b!24460 (= e!15809 (contains!232 (t!3230 lt!8325) (select (arr!597 lt!8321) lt!8319)))))

(assert (= (and d!4431 res!14872) b!24459))

(assert (= (and b!24459 (not res!14873)) b!24460))

(declare-fun m!18921 () Bool)

(assert (=> d!4431 m!18921))

(assert (=> d!4431 m!17176))

(declare-fun m!18923 () Bool)

(assert (=> d!4431 m!18923))

(assert (=> b!24460 m!17176))

(declare-fun m!18925 () Bool)

(assert (=> b!24460 m!18925))

(assert (=> b!23592 d!4431))

(declare-fun d!4433 () Bool)

(assert (=> d!4433 (isDefined!22 (getValueByKey!60 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun lt!9246 () Unit!519)

(assert (=> d!4433 (= lt!9246 (choose!210 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15810 () Bool)

(assert (=> d!4433 e!15810))

(declare-fun res!14874 () Bool)

(assert (=> d!4433 (=> (not res!14874) (not e!15810))))

(assert (=> d!4433 (= res!14874 (isStrictlySorted!165 (toList!298 call!1934)))))

(assert (=> d!4433 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!9246)))

(declare-fun b!24461 () Bool)

(assert (=> b!24461 (= e!15810 (containsKey!24 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4433 res!14874) b!24461))

(assert (=> d!4433 m!17465))

(assert (=> d!4433 m!17465))

(assert (=> d!4433 m!17467))

(declare-fun m!18927 () Bool)

(assert (=> d!4433 m!18927))

(declare-fun m!18929 () Bool)

(assert (=> d!4433 m!18929))

(assert (=> b!24461 m!17461))

(assert (=> b!23729 d!4433))

(assert (=> b!23729 d!4335))

(assert (=> b!23729 d!4337))

(declare-fun d!4435 () Bool)

(declare-fun e!15811 () Bool)

(assert (=> d!4435 e!15811))

(declare-fun res!14875 () Bool)

(assert (=> d!4435 (=> (not res!14875) (not e!15811))))

(declare-fun lt!9249 () ListLongMap!565)

(assert (=> d!4435 (= res!14875 (contains!230 lt!9249 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun lt!9247 () List!565)

(assert (=> d!4435 (= lt!9249 (ListLongMap!566 lt!9247))))

(declare-fun lt!9248 () Unit!519)

(declare-fun lt!9250 () Unit!519)

(assert (=> d!4435 (= lt!9248 lt!9250)))

(assert (=> d!4435 (= (getValueByKey!60 lt!9247 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4435 (= lt!9250 (lemmaContainsTupThenGetReturnValue!18 lt!9247 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4435 (= lt!9247 (insertStrictlySorted!18 (toList!298 call!2023) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (=> d!4435 (= (+!45 call!2023 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))) lt!9249)))

(declare-fun b!24462 () Bool)

(declare-fun res!14876 () Bool)

(assert (=> b!24462 (=> (not res!14876) (not e!15811))))

(assert (=> b!24462 (= res!14876 (= (getValueByKey!60 (toList!298 lt!9249) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(declare-fun b!24463 () Bool)

(assert (=> b!24463 (= e!15811 (contains!231 (toList!298 lt!9249) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(assert (= (and d!4435 res!14875) b!24462))

(assert (= (and b!24462 res!14876) b!24463))

(declare-fun m!18931 () Bool)

(assert (=> d!4435 m!18931))

(declare-fun m!18933 () Bool)

(assert (=> d!4435 m!18933))

(declare-fun m!18935 () Bool)

(assert (=> d!4435 m!18935))

(declare-fun m!18937 () Bool)

(assert (=> d!4435 m!18937))

(declare-fun m!18939 () Bool)

(assert (=> b!24462 m!18939))

(declare-fun m!18941 () Bool)

(assert (=> b!24463 m!18941))

(assert (=> b!23665 d!4435))

(declare-fun d!4437 () Bool)

(assert (=> d!4437 (= (inRange!0 (index!2342 lt!8705) (mask!4729 (_2!487 lt!8138))) (and (bvsge (index!2342 lt!8705) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8705) (bvadd (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000000001))))))

(assert (=> b!23700 d!4437))

(declare-fun d!4439 () Bool)

(assert (=> d!4439 (isDefined!22 (getValueByKey!60 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!9251 () Unit!519)

(assert (=> d!4439 (= lt!9251 (choose!210 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15812 () Bool)

(assert (=> d!4439 e!15812))

(declare-fun res!14877 () Bool)

(assert (=> d!4439 (=> (not res!14877) (not e!15812))))

(assert (=> d!4439 (= res!14877 (isStrictlySorted!165 (toList!298 e!15144)))))

(assert (=> d!4439 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000) lt!9251)))

(declare-fun b!24464 () Bool)

(assert (=> b!24464 (= e!15812 (containsKey!24 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4439 res!14877) b!24464))

(assert (=> d!4439 m!16970))

(assert (=> d!4439 m!16970))

(assert (=> d!4439 m!16972))

(declare-fun m!18943 () Bool)

(assert (=> d!4439 m!18943))

(declare-fun m!18945 () Bool)

(assert (=> d!4439 m!18945))

(assert (=> b!24464 m!16966))

(assert (=> b!23463 d!4439))

(assert (=> b!23463 d!4355))

(assert (=> b!23463 d!4357))

(declare-fun b!24465 () Bool)

(declare-fun e!15821 () ListLongMap!565)

(declare-fun call!2142 () ListLongMap!565)

(assert (=> b!24465 (= e!15821 call!2142)))

(declare-fun bm!2137 () Bool)

(declare-fun call!2143 () ListLongMap!565)

(declare-fun call!2145 () ListLongMap!565)

(assert (=> bm!2137 (= call!2143 call!2145)))

(declare-fun b!24466 () Bool)

(declare-fun e!15817 () Bool)

(declare-fun e!15825 () Bool)

(assert (=> b!24466 (= e!15817 e!15825)))

(declare-fun c!3307 () Bool)

(assert (=> b!24466 (= c!3307 (not (= (bvand (extraKeys!1640 lt!8305) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24467 () Bool)

(declare-fun e!15816 () Bool)

(declare-fun lt!9256 () ListLongMap!565)

(assert (=> b!24467 (= e!15816 (= (apply!29 lt!9256 (select (arr!597 (_keys!3163 lt!8305)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8305)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8305) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24467 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8305))))))

(assert (=> b!24467 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8305))))))

(declare-fun call!2144 () ListLongMap!565)

(declare-fun bm!2138 () Bool)

(declare-fun c!3309 () Bool)

(declare-fun call!2141 () ListLongMap!565)

(declare-fun c!3308 () Bool)

(assert (=> bm!2138 (= call!2145 (+!45 (ite c!3308 call!2144 (ite c!3309 call!2141 call!2142)) (ite (or c!3308 c!3309) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8305)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8305)))))))

(declare-fun b!24468 () Bool)

(declare-fun res!14883 () Bool)

(assert (=> b!24468 (=> (not res!14883) (not e!15817))))

(declare-fun e!15822 () Bool)

(assert (=> b!24468 (= res!14883 e!15822)))

(declare-fun c!3306 () Bool)

(assert (=> b!24468 (= c!3306 (not (= (bvand (extraKeys!1640 lt!8305) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2139 () Bool)

(declare-fun call!2140 () Bool)

(assert (=> bm!2139 (= call!2140 (contains!230 lt!9256 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24469 () Bool)

(declare-fun e!15814 () Bool)

(assert (=> b!24469 (= e!15825 e!15814)))

(declare-fun res!14881 () Bool)

(declare-fun call!2146 () Bool)

(assert (=> b!24469 (= res!14881 call!2146)))

(assert (=> b!24469 (=> (not res!14881) (not e!15814))))

(declare-fun b!24470 () Bool)

(declare-fun e!15820 () Unit!519)

(declare-fun Unit!578 () Unit!519)

(assert (=> b!24470 (= e!15820 Unit!578)))

(declare-fun b!24471 () Bool)

(assert (=> b!24471 (= e!15825 (not call!2146))))

(declare-fun b!24472 () Bool)

(declare-fun e!15823 () Bool)

(assert (=> b!24472 (= e!15823 (= (apply!29 lt!9256 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8305)))))

(declare-fun bm!2140 () Bool)

(assert (=> bm!2140 (= call!2146 (contains!230 lt!9256 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24473 () Bool)

(assert (=> b!24473 (= e!15822 (not call!2140))))

(declare-fun d!4441 () Bool)

(assert (=> d!4441 e!15817))

(declare-fun res!14880 () Bool)

(assert (=> d!4441 (=> (not res!14880) (not e!15817))))

(assert (=> d!4441 (= res!14880 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8305))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8305))))))))

(declare-fun lt!9271 () ListLongMap!565)

(assert (=> d!4441 (= lt!9256 lt!9271)))

(declare-fun lt!9263 () Unit!519)

(assert (=> d!4441 (= lt!9263 e!15820)))

(declare-fun c!3310 () Bool)

(declare-fun e!15824 () Bool)

(assert (=> d!4441 (= c!3310 e!15824)))

(declare-fun res!14884 () Bool)

(assert (=> d!4441 (=> (not res!14884) (not e!15824))))

(assert (=> d!4441 (= res!14884 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8305))))))

(declare-fun e!15818 () ListLongMap!565)

(assert (=> d!4441 (= lt!9271 e!15818)))

(assert (=> d!4441 (= c!3308 (and (not (= (bvand (extraKeys!1640 lt!8305) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8305) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4441 (validMask!0 (mask!4729 lt!8305))))

(assert (=> d!4441 (= (getCurrentListMap!129 (_keys!3163 lt!8305) (_values!1728 lt!8305) (mask!4729 lt!8305) (extraKeys!1640 lt!8305) (zeroValue!1665 lt!8305) (minValue!1665 lt!8305) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8305)) lt!9256)))

(declare-fun b!24474 () Bool)

(assert (=> b!24474 (= e!15814 (= (apply!29 lt!9256 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8305)))))

(declare-fun b!24475 () Bool)

(assert (=> b!24475 (= e!15818 (+!45 call!2145 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8305))))))

(declare-fun b!24476 () Bool)

(declare-fun e!15819 () Bool)

(assert (=> b!24476 (= e!15819 e!15816)))

(declare-fun res!14885 () Bool)

(assert (=> b!24476 (=> (not res!14885) (not e!15816))))

(assert (=> b!24476 (= res!14885 (contains!230 lt!9256 (select (arr!597 (_keys!3163 lt!8305)) #b00000000000000000000000000000000)))))

(assert (=> b!24476 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8305))))))

(declare-fun b!24477 () Bool)

(declare-fun res!14882 () Bool)

(assert (=> b!24477 (=> (not res!14882) (not e!15817))))

(assert (=> b!24477 (= res!14882 e!15819)))

(declare-fun res!14886 () Bool)

(assert (=> b!24477 (=> res!14886 e!15819)))

(declare-fun e!15815 () Bool)

(assert (=> b!24477 (= res!14886 (not e!15815))))

(declare-fun res!14879 () Bool)

(assert (=> b!24477 (=> (not res!14879) (not e!15815))))

(assert (=> b!24477 (= res!14879 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8305))))))

(declare-fun b!24478 () Bool)

(assert (=> b!24478 (= e!15821 call!2143)))

(declare-fun b!24479 () Bool)

(declare-fun lt!9253 () Unit!519)

(assert (=> b!24479 (= e!15820 lt!9253)))

(declare-fun lt!9267 () ListLongMap!565)

(assert (=> b!24479 (= lt!9267 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8305) (_values!1728 lt!8305) (mask!4729 lt!8305) (extraKeys!1640 lt!8305) (zeroValue!1665 lt!8305) (minValue!1665 lt!8305) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8305)))))

(declare-fun lt!9252 () (_ BitVec 64))

(assert (=> b!24479 (= lt!9252 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9266 () (_ BitVec 64))

(assert (=> b!24479 (= lt!9266 (select (arr!597 (_keys!3163 lt!8305)) #b00000000000000000000000000000000))))

(declare-fun lt!9272 () Unit!519)

(assert (=> b!24479 (= lt!9272 (addStillContains!14 lt!9267 lt!9252 (zeroValue!1665 lt!8305) lt!9266))))

(assert (=> b!24479 (contains!230 (+!45 lt!9267 (tuple2!971 lt!9252 (zeroValue!1665 lt!8305))) lt!9266)))

(declare-fun lt!9269 () Unit!519)

(assert (=> b!24479 (= lt!9269 lt!9272)))

(declare-fun lt!9273 () ListLongMap!565)

(assert (=> b!24479 (= lt!9273 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8305) (_values!1728 lt!8305) (mask!4729 lt!8305) (extraKeys!1640 lt!8305) (zeroValue!1665 lt!8305) (minValue!1665 lt!8305) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8305)))))

(declare-fun lt!9262 () (_ BitVec 64))

(assert (=> b!24479 (= lt!9262 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9258 () (_ BitVec 64))

(assert (=> b!24479 (= lt!9258 (select (arr!597 (_keys!3163 lt!8305)) #b00000000000000000000000000000000))))

(declare-fun lt!9264 () Unit!519)

(assert (=> b!24479 (= lt!9264 (addApplyDifferent!14 lt!9273 lt!9262 (minValue!1665 lt!8305) lt!9258))))

(assert (=> b!24479 (= (apply!29 (+!45 lt!9273 (tuple2!971 lt!9262 (minValue!1665 lt!8305))) lt!9258) (apply!29 lt!9273 lt!9258))))

(declare-fun lt!9254 () Unit!519)

(assert (=> b!24479 (= lt!9254 lt!9264)))

(declare-fun lt!9265 () ListLongMap!565)

(assert (=> b!24479 (= lt!9265 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8305) (_values!1728 lt!8305) (mask!4729 lt!8305) (extraKeys!1640 lt!8305) (zeroValue!1665 lt!8305) (minValue!1665 lt!8305) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8305)))))

(declare-fun lt!9259 () (_ BitVec 64))

(assert (=> b!24479 (= lt!9259 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9261 () (_ BitVec 64))

(assert (=> b!24479 (= lt!9261 (select (arr!597 (_keys!3163 lt!8305)) #b00000000000000000000000000000000))))

(declare-fun lt!9260 () Unit!519)

(assert (=> b!24479 (= lt!9260 (addApplyDifferent!14 lt!9265 lt!9259 (zeroValue!1665 lt!8305) lt!9261))))

(assert (=> b!24479 (= (apply!29 (+!45 lt!9265 (tuple2!971 lt!9259 (zeroValue!1665 lt!8305))) lt!9261) (apply!29 lt!9265 lt!9261))))

(declare-fun lt!9255 () Unit!519)

(assert (=> b!24479 (= lt!9255 lt!9260)))

(declare-fun lt!9270 () ListLongMap!565)

(assert (=> b!24479 (= lt!9270 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8305) (_values!1728 lt!8305) (mask!4729 lt!8305) (extraKeys!1640 lt!8305) (zeroValue!1665 lt!8305) (minValue!1665 lt!8305) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8305)))))

(declare-fun lt!9268 () (_ BitVec 64))

(assert (=> b!24479 (= lt!9268 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9257 () (_ BitVec 64))

(assert (=> b!24479 (= lt!9257 (select (arr!597 (_keys!3163 lt!8305)) #b00000000000000000000000000000000))))

(assert (=> b!24479 (= lt!9253 (addApplyDifferent!14 lt!9270 lt!9268 (minValue!1665 lt!8305) lt!9257))))

(assert (=> b!24479 (= (apply!29 (+!45 lt!9270 (tuple2!971 lt!9268 (minValue!1665 lt!8305))) lt!9257) (apply!29 lt!9270 lt!9257))))

(declare-fun b!24480 () Bool)

(declare-fun e!15813 () ListLongMap!565)

(assert (=> b!24480 (= e!15813 call!2143)))

(declare-fun b!24481 () Bool)

(assert (=> b!24481 (= e!15818 e!15813)))

(assert (=> b!24481 (= c!3309 (and (not (= (bvand (extraKeys!1640 lt!8305) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8305) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24482 () Bool)

(declare-fun c!3311 () Bool)

(assert (=> b!24482 (= c!3311 (and (not (= (bvand (extraKeys!1640 lt!8305) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8305) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24482 (= e!15813 e!15821)))

(declare-fun bm!2141 () Bool)

(assert (=> bm!2141 (= call!2142 call!2141)))

(declare-fun bm!2142 () Bool)

(assert (=> bm!2142 (= call!2141 call!2144)))

(declare-fun b!24483 () Bool)

(assert (=> b!24483 (= e!15822 e!15823)))

(declare-fun res!14878 () Bool)

(assert (=> b!24483 (= res!14878 call!2140)))

(assert (=> b!24483 (=> (not res!14878) (not e!15823))))

(declare-fun b!24484 () Bool)

(assert (=> b!24484 (= e!15824 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8305)) #b00000000000000000000000000000000)))))

(declare-fun bm!2143 () Bool)

(assert (=> bm!2143 (= call!2144 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8305) (_values!1728 lt!8305) (mask!4729 lt!8305) (extraKeys!1640 lt!8305) (zeroValue!1665 lt!8305) (minValue!1665 lt!8305) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8305)))))

(declare-fun b!24485 () Bool)

(assert (=> b!24485 (= e!15815 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8305)) #b00000000000000000000000000000000)))))

(assert (= (and d!4441 c!3308) b!24475))

(assert (= (and d!4441 (not c!3308)) b!24481))

(assert (= (and b!24481 c!3309) b!24480))

(assert (= (and b!24481 (not c!3309)) b!24482))

(assert (= (and b!24482 c!3311) b!24478))

(assert (= (and b!24482 (not c!3311)) b!24465))

(assert (= (or b!24478 b!24465) bm!2141))

(assert (= (or b!24480 bm!2141) bm!2142))

(assert (= (or b!24480 b!24478) bm!2137))

(assert (= (or b!24475 bm!2142) bm!2143))

(assert (= (or b!24475 bm!2137) bm!2138))

(assert (= (and d!4441 res!14884) b!24484))

(assert (= (and d!4441 c!3310) b!24479))

(assert (= (and d!4441 (not c!3310)) b!24470))

(assert (= (and d!4441 res!14880) b!24477))

(assert (= (and b!24477 res!14879) b!24485))

(assert (= (and b!24477 (not res!14886)) b!24476))

(assert (= (and b!24476 res!14885) b!24467))

(assert (= (and b!24477 res!14882) b!24468))

(assert (= (and b!24468 c!3306) b!24483))

(assert (= (and b!24468 (not c!3306)) b!24473))

(assert (= (and b!24483 res!14878) b!24472))

(assert (= (or b!24483 b!24473) bm!2139))

(assert (= (and b!24468 res!14883) b!24466))

(assert (= (and b!24466 c!3307) b!24469))

(assert (= (and b!24466 (not c!3307)) b!24471))

(assert (= (and b!24469 res!14881) b!24474))

(assert (= (or b!24469 b!24471) bm!2140))

(declare-fun b_lambda!1613 () Bool)

(assert (=> (not b_lambda!1613) (not b!24467)))

(declare-fun tb!661 () Bool)

(declare-fun t!3240 () Bool)

(assert (=> (and b!23067 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8305)) t!3240) tb!661))

(declare-fun result!1101 () Bool)

(assert (=> tb!661 (= result!1101 tp_is_empty!1021)))

(assert (=> b!24467 t!3240))

(declare-fun b_and!1525 () Bool)

(assert (= b_and!1523 (and (=> t!3240 result!1101) b_and!1525)))

(declare-fun m!18947 () Bool)

(assert (=> b!24476 m!18947))

(assert (=> b!24476 m!18947))

(declare-fun m!18949 () Bool)

(assert (=> b!24476 m!18949))

(declare-fun m!18951 () Bool)

(assert (=> b!24475 m!18951))

(declare-fun m!18953 () Bool)

(assert (=> b!24467 m!18953))

(declare-fun m!18955 () Bool)

(assert (=> b!24467 m!18955))

(declare-fun m!18957 () Bool)

(assert (=> b!24467 m!18957))

(assert (=> b!24467 m!18947))

(declare-fun m!18959 () Bool)

(assert (=> b!24467 m!18959))

(assert (=> b!24467 m!18947))

(assert (=> b!24467 m!18953))

(assert (=> b!24467 m!18955))

(assert (=> b!24484 m!18947))

(assert (=> b!24484 m!18947))

(declare-fun m!18961 () Bool)

(assert (=> b!24484 m!18961))

(declare-fun m!18963 () Bool)

(assert (=> bm!2138 m!18963))

(assert (=> b!24485 m!18947))

(assert (=> b!24485 m!18947))

(assert (=> b!24485 m!18961))

(declare-fun m!18965 () Bool)

(assert (=> bm!2139 m!18965))

(declare-fun m!18967 () Bool)

(assert (=> b!24474 m!18967))

(declare-fun m!18969 () Bool)

(assert (=> bm!2140 m!18969))

(declare-fun m!18971 () Bool)

(assert (=> b!24472 m!18971))

(declare-fun m!18973 () Bool)

(assert (=> bm!2143 m!18973))

(declare-fun m!18975 () Bool)

(assert (=> d!4441 m!18975))

(declare-fun m!18977 () Bool)

(assert (=> b!24479 m!18977))

(declare-fun m!18979 () Bool)

(assert (=> b!24479 m!18979))

(declare-fun m!18981 () Bool)

(assert (=> b!24479 m!18981))

(declare-fun m!18983 () Bool)

(assert (=> b!24479 m!18983))

(declare-fun m!18985 () Bool)

(assert (=> b!24479 m!18985))

(assert (=> b!24479 m!18973))

(assert (=> b!24479 m!18979))

(assert (=> b!24479 m!18947))

(declare-fun m!18987 () Bool)

(assert (=> b!24479 m!18987))

(declare-fun m!18989 () Bool)

(assert (=> b!24479 m!18989))

(declare-fun m!18991 () Bool)

(assert (=> b!24479 m!18991))

(assert (=> b!24479 m!18989))

(declare-fun m!18993 () Bool)

(assert (=> b!24479 m!18993))

(declare-fun m!18995 () Bool)

(assert (=> b!24479 m!18995))

(declare-fun m!18997 () Bool)

(assert (=> b!24479 m!18997))

(declare-fun m!18999 () Bool)

(assert (=> b!24479 m!18999))

(assert (=> b!24479 m!18999))

(declare-fun m!19001 () Bool)

(assert (=> b!24479 m!19001))

(assert (=> b!24479 m!18995))

(declare-fun m!19003 () Bool)

(assert (=> b!24479 m!19003))

(declare-fun m!19005 () Bool)

(assert (=> b!24479 m!19005))

(assert (=> d!3979 d!4441))

(declare-fun d!4443 () Bool)

(assert (=> d!4443 (= (inRange!0 (ite c!3051 (index!2342 lt!8556) (ite c!3053 (index!2341 lt!8568) (index!2344 lt!8568))) (mask!4729 lt!8141)) (and (bvsge (ite c!3051 (index!2342 lt!8556) (ite c!3053 (index!2341 lt!8568) (index!2344 lt!8568))) #b00000000000000000000000000000000) (bvslt (ite c!3051 (index!2342 lt!8556) (ite c!3053 (index!2341 lt!8568) (index!2344 lt!8568))) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(assert (=> bm!2000 d!4443))

(assert (=> d!3973 d!4291))

(declare-fun d!4445 () Bool)

(assert (=> d!4445 (= (apply!29 lt!8711 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8711) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1008 () Bool)

(assert (= bs!1008 d!4445))

(assert (=> bs!1008 m!18191))

(assert (=> bs!1008 m!18191))

(declare-fun m!19007 () Bool)

(assert (=> bs!1008 m!19007))

(assert (=> b!23715 d!4445))

(declare-fun d!4447 () Bool)

(declare-fun e!15828 () Bool)

(assert (=> d!4447 e!15828))

(declare-fun c!3314 () Bool)

(assert (=> d!4447 (= c!3314 (and (not (= (_1!493 lt!8312) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (_1!493 lt!8312) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4447 true))

(declare-fun _$15!77 () Unit!519)

(assert (=> d!4447 (= (choose!204 lt!8307 (array!1262 ((as const (Array (_ BitVec 32) ValueCell!311)) EmptyCell!311) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8318 (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) #b0000000000000000000000000000000000000000000000000000000000000000) (_1!493 lt!8312) (defaultEntry!1742 (v!1601 (underlying!115 thiss!938)))) _$15!77)))

(declare-fun b!24490 () Bool)

(assert (=> b!24490 (= e!15828 (arrayContainsKey!0 lt!8307 (_1!493 lt!8312) #b00000000000000000000000000000000))))

(declare-fun b!24491 () Bool)

(assert (=> b!24491 (= e!15828 (ite (= (_1!493 lt!8312) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand lt!8318 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8318 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!4447 c!3314) b!24490))

(assert (= (and d!4447 (not c!3314)) b!24491))

(assert (=> b!24490 m!16778))

(assert (=> d!3981 d!4447))

(assert (=> d!3981 d!4013))

(declare-fun b!24492 () Bool)

(declare-fun e!15837 () ListLongMap!565)

(declare-fun call!2149 () ListLongMap!565)

(assert (=> b!24492 (= e!15837 call!2149)))

(declare-fun bm!2144 () Bool)

(declare-fun call!2150 () ListLongMap!565)

(declare-fun call!2152 () ListLongMap!565)

(assert (=> bm!2144 (= call!2150 call!2152)))

(declare-fun b!24493 () Bool)

(declare-fun e!15833 () Bool)

(declare-fun e!15841 () Bool)

(assert (=> b!24493 (= e!15833 e!15841)))

(declare-fun c!3316 () Bool)

(assert (=> b!24493 (= c!3316 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun lt!9278 () ListLongMap!565)

(declare-fun e!15832 () Bool)

(declare-fun b!24494 () Bool)

(assert (=> b!24494 (= e!15832 (= (apply!29 lt!9278 (select (arr!597 lt!8558) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8580) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24494 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8580)))))

(assert (=> b!24494 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8558)))))

(declare-fun bm!2145 () Bool)

(declare-fun c!3317 () Bool)

(declare-fun call!2148 () ListLongMap!565)

(declare-fun c!3318 () Bool)

(declare-fun call!2151 () ListLongMap!565)

(assert (=> bm!2145 (= call!2152 (+!45 (ite c!3317 call!2151 (ite c!3318 call!2148 call!2149)) (ite (or c!3317 c!3318) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!24495 () Bool)

(declare-fun res!14892 () Bool)

(assert (=> b!24495 (=> (not res!14892) (not e!15833))))

(declare-fun e!15838 () Bool)

(assert (=> b!24495 (= res!14892 e!15838)))

(declare-fun c!3315 () Bool)

(assert (=> b!24495 (= c!3315 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2146 () Bool)

(declare-fun call!2147 () Bool)

(assert (=> bm!2146 (= call!2147 (contains!230 lt!9278 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24496 () Bool)

(declare-fun e!15830 () Bool)

(assert (=> b!24496 (= e!15841 e!15830)))

(declare-fun res!14890 () Bool)

(declare-fun call!2153 () Bool)

(assert (=> b!24496 (= res!14890 call!2153)))

(assert (=> b!24496 (=> (not res!14890) (not e!15830))))

(declare-fun b!24497 () Bool)

(declare-fun e!15836 () Unit!519)

(declare-fun Unit!579 () Unit!519)

(assert (=> b!24497 (= e!15836 Unit!579)))

(declare-fun b!24498 () Bool)

(assert (=> b!24498 (= e!15841 (not call!2153))))

(declare-fun b!24499 () Bool)

(declare-fun e!15839 () Bool)

(assert (=> b!24499 (= e!15839 (= (apply!29 lt!9278 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun bm!2147 () Bool)

(assert (=> bm!2147 (= call!2153 (contains!230 lt!9278 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24500 () Bool)

(assert (=> b!24500 (= e!15838 (not call!2147))))

(declare-fun d!4449 () Bool)

(assert (=> d!4449 e!15833))

(declare-fun res!14889 () Bool)

(assert (=> d!4449 (=> (not res!14889) (not e!15833))))

(assert (=> d!4449 (= res!14889 (or (bvsge #b00000000000000000000000000000000 (size!693 lt!8558)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8558)))))))

(declare-fun lt!9293 () ListLongMap!565)

(assert (=> d!4449 (= lt!9278 lt!9293)))

(declare-fun lt!9285 () Unit!519)

(assert (=> d!4449 (= lt!9285 e!15836)))

(declare-fun c!3319 () Bool)

(declare-fun e!15840 () Bool)

(assert (=> d!4449 (= c!3319 e!15840)))

(declare-fun res!14893 () Bool)

(assert (=> d!4449 (=> (not res!14893) (not e!15840))))

(assert (=> d!4449 (= res!14893 (bvslt #b00000000000000000000000000000000 (size!693 lt!8558)))))

(declare-fun e!15834 () ListLongMap!565)

(assert (=> d!4449 (= lt!9293 e!15834)))

(assert (=> d!4449 (= c!3317 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4449 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4449 (= (getCurrentListMap!129 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9278)))

(declare-fun b!24501 () Bool)

(assert (=> b!24501 (= e!15830 (= (apply!29 lt!9278 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!24502 () Bool)

(assert (=> b!24502 (= e!15834 (+!45 call!2152 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun b!24503 () Bool)

(declare-fun e!15835 () Bool)

(assert (=> b!24503 (= e!15835 e!15832)))

(declare-fun res!14894 () Bool)

(assert (=> b!24503 (=> (not res!14894) (not e!15832))))

(assert (=> b!24503 (= res!14894 (contains!230 lt!9278 (select (arr!597 lt!8558) #b00000000000000000000000000000000)))))

(assert (=> b!24503 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8558)))))

(declare-fun b!24504 () Bool)

(declare-fun res!14891 () Bool)

(assert (=> b!24504 (=> (not res!14891) (not e!15833))))

(assert (=> b!24504 (= res!14891 e!15835)))

(declare-fun res!14895 () Bool)

(assert (=> b!24504 (=> res!14895 e!15835)))

(declare-fun e!15831 () Bool)

(assert (=> b!24504 (= res!14895 (not e!15831))))

(declare-fun res!14888 () Bool)

(assert (=> b!24504 (=> (not res!14888) (not e!15831))))

(assert (=> b!24504 (= res!14888 (bvslt #b00000000000000000000000000000000 (size!693 lt!8558)))))

(declare-fun b!24505 () Bool)

(assert (=> b!24505 (= e!15837 call!2150)))

(declare-fun b!24506 () Bool)

(declare-fun lt!9275 () Unit!519)

(assert (=> b!24506 (= e!15836 lt!9275)))

(declare-fun lt!9289 () ListLongMap!565)

(assert (=> b!24506 (= lt!9289 (getCurrentListMapNoExtraKeys!15 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9274 () (_ BitVec 64))

(assert (=> b!24506 (= lt!9274 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9288 () (_ BitVec 64))

(assert (=> b!24506 (= lt!9288 (select (arr!597 lt!8558) #b00000000000000000000000000000000))))

(declare-fun lt!9294 () Unit!519)

(assert (=> b!24506 (= lt!9294 (addStillContains!14 lt!9289 lt!9274 (zeroValue!1665 lt!8141) lt!9288))))

(assert (=> b!24506 (contains!230 (+!45 lt!9289 (tuple2!971 lt!9274 (zeroValue!1665 lt!8141))) lt!9288)))

(declare-fun lt!9291 () Unit!519)

(assert (=> b!24506 (= lt!9291 lt!9294)))

(declare-fun lt!9295 () ListLongMap!565)

(assert (=> b!24506 (= lt!9295 (getCurrentListMapNoExtraKeys!15 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9284 () (_ BitVec 64))

(assert (=> b!24506 (= lt!9284 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9280 () (_ BitVec 64))

(assert (=> b!24506 (= lt!9280 (select (arr!597 lt!8558) #b00000000000000000000000000000000))))

(declare-fun lt!9286 () Unit!519)

(assert (=> b!24506 (= lt!9286 (addApplyDifferent!14 lt!9295 lt!9284 (minValue!1665 lt!8141) lt!9280))))

(assert (=> b!24506 (= (apply!29 (+!45 lt!9295 (tuple2!971 lt!9284 (minValue!1665 lt!8141))) lt!9280) (apply!29 lt!9295 lt!9280))))

(declare-fun lt!9276 () Unit!519)

(assert (=> b!24506 (= lt!9276 lt!9286)))

(declare-fun lt!9287 () ListLongMap!565)

(assert (=> b!24506 (= lt!9287 (getCurrentListMapNoExtraKeys!15 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9281 () (_ BitVec 64))

(assert (=> b!24506 (= lt!9281 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9283 () (_ BitVec 64))

(assert (=> b!24506 (= lt!9283 (select (arr!597 lt!8558) #b00000000000000000000000000000000))))

(declare-fun lt!9282 () Unit!519)

(assert (=> b!24506 (= lt!9282 (addApplyDifferent!14 lt!9287 lt!9281 (zeroValue!1665 lt!8141) lt!9283))))

(assert (=> b!24506 (= (apply!29 (+!45 lt!9287 (tuple2!971 lt!9281 (zeroValue!1665 lt!8141))) lt!9283) (apply!29 lt!9287 lt!9283))))

(declare-fun lt!9277 () Unit!519)

(assert (=> b!24506 (= lt!9277 lt!9282)))

(declare-fun lt!9292 () ListLongMap!565)

(assert (=> b!24506 (= lt!9292 (getCurrentListMapNoExtraKeys!15 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9290 () (_ BitVec 64))

(assert (=> b!24506 (= lt!9290 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9279 () (_ BitVec 64))

(assert (=> b!24506 (= lt!9279 (select (arr!597 lt!8558) #b00000000000000000000000000000000))))

(assert (=> b!24506 (= lt!9275 (addApplyDifferent!14 lt!9292 lt!9290 (minValue!1665 lt!8141) lt!9279))))

(assert (=> b!24506 (= (apply!29 (+!45 lt!9292 (tuple2!971 lt!9290 (minValue!1665 lt!8141))) lt!9279) (apply!29 lt!9292 lt!9279))))

(declare-fun b!24507 () Bool)

(declare-fun e!15829 () ListLongMap!565)

(assert (=> b!24507 (= e!15829 call!2150)))

(declare-fun b!24508 () Bool)

(assert (=> b!24508 (= e!15834 e!15829)))

(assert (=> b!24508 (= c!3318 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24509 () Bool)

(declare-fun c!3320 () Bool)

(assert (=> b!24509 (= c!3320 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24509 (= e!15829 e!15837)))

(declare-fun bm!2148 () Bool)

(assert (=> bm!2148 (= call!2149 call!2148)))

(declare-fun bm!2149 () Bool)

(assert (=> bm!2149 (= call!2148 call!2151)))

(declare-fun b!24510 () Bool)

(assert (=> b!24510 (= e!15838 e!15839)))

(declare-fun res!14887 () Bool)

(assert (=> b!24510 (= res!14887 call!2147)))

(assert (=> b!24510 (=> (not res!14887) (not e!15839))))

(declare-fun b!24511 () Bool)

(assert (=> b!24511 (= e!15840 (validKeyInArray!0 (select (arr!597 lt!8558) #b00000000000000000000000000000000)))))

(declare-fun bm!2150 () Bool)

(assert (=> bm!2150 (= call!2151 (getCurrentListMapNoExtraKeys!15 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!24512 () Bool)

(assert (=> b!24512 (= e!15831 (validKeyInArray!0 (select (arr!597 lt!8558) #b00000000000000000000000000000000)))))

(assert (= (and d!4449 c!3317) b!24502))

(assert (= (and d!4449 (not c!3317)) b!24508))

(assert (= (and b!24508 c!3318) b!24507))

(assert (= (and b!24508 (not c!3318)) b!24509))

(assert (= (and b!24509 c!3320) b!24505))

(assert (= (and b!24509 (not c!3320)) b!24492))

(assert (= (or b!24505 b!24492) bm!2148))

(assert (= (or b!24507 bm!2148) bm!2149))

(assert (= (or b!24507 b!24505) bm!2144))

(assert (= (or b!24502 bm!2149) bm!2150))

(assert (= (or b!24502 bm!2144) bm!2145))

(assert (= (and d!4449 res!14893) b!24511))

(assert (= (and d!4449 c!3319) b!24506))

(assert (= (and d!4449 (not c!3319)) b!24497))

(assert (= (and d!4449 res!14889) b!24504))

(assert (= (and b!24504 res!14888) b!24512))

(assert (= (and b!24504 (not res!14895)) b!24503))

(assert (= (and b!24503 res!14894) b!24494))

(assert (= (and b!24504 res!14891) b!24495))

(assert (= (and b!24495 c!3315) b!24510))

(assert (= (and b!24495 (not c!3315)) b!24500))

(assert (= (and b!24510 res!14887) b!24499))

(assert (= (or b!24510 b!24500) bm!2146))

(assert (= (and b!24495 res!14892) b!24493))

(assert (= (and b!24493 c!3316) b!24496))

(assert (= (and b!24493 (not c!3316)) b!24498))

(assert (= (and b!24496 res!14890) b!24501))

(assert (= (or b!24496 b!24498) bm!2147))

(declare-fun b_lambda!1615 () Bool)

(assert (=> (not b_lambda!1615) (not b!24494)))

(assert (=> b!24494 t!3234))

(declare-fun b_and!1527 () Bool)

(assert (= b_and!1525 (and (=> t!3234 result!1095) b_and!1527)))

(declare-fun m!19009 () Bool)

(assert (=> b!24503 m!19009))

(assert (=> b!24503 m!19009))

(declare-fun m!19011 () Bool)

(assert (=> b!24503 m!19011))

(declare-fun m!19013 () Bool)

(assert (=> b!24502 m!19013))

(declare-fun m!19015 () Bool)

(assert (=> b!24494 m!19015))

(assert (=> b!24494 m!17304))

(declare-fun m!19017 () Bool)

(assert (=> b!24494 m!19017))

(assert (=> b!24494 m!19009))

(declare-fun m!19019 () Bool)

(assert (=> b!24494 m!19019))

(assert (=> b!24494 m!19009))

(assert (=> b!24494 m!19015))

(assert (=> b!24494 m!17304))

(assert (=> b!24511 m!19009))

(assert (=> b!24511 m!19009))

(declare-fun m!19021 () Bool)

(assert (=> b!24511 m!19021))

(declare-fun m!19023 () Bool)

(assert (=> bm!2145 m!19023))

(assert (=> b!24512 m!19009))

(assert (=> b!24512 m!19009))

(assert (=> b!24512 m!19021))

(declare-fun m!19025 () Bool)

(assert (=> bm!2146 m!19025))

(declare-fun m!19027 () Bool)

(assert (=> b!24501 m!19027))

(declare-fun m!19029 () Bool)

(assert (=> bm!2147 m!19029))

(declare-fun m!19031 () Bool)

(assert (=> b!24499 m!19031))

(declare-fun m!19033 () Bool)

(assert (=> bm!2150 m!19033))

(assert (=> d!4449 m!17050))

(declare-fun m!19035 () Bool)

(assert (=> b!24506 m!19035))

(declare-fun m!19037 () Bool)

(assert (=> b!24506 m!19037))

(declare-fun m!19039 () Bool)

(assert (=> b!24506 m!19039))

(declare-fun m!19041 () Bool)

(assert (=> b!24506 m!19041))

(declare-fun m!19043 () Bool)

(assert (=> b!24506 m!19043))

(assert (=> b!24506 m!19033))

(assert (=> b!24506 m!19037))

(assert (=> b!24506 m!19009))

(declare-fun m!19045 () Bool)

(assert (=> b!24506 m!19045))

(declare-fun m!19047 () Bool)

(assert (=> b!24506 m!19047))

(declare-fun m!19049 () Bool)

(assert (=> b!24506 m!19049))

(assert (=> b!24506 m!19047))

(declare-fun m!19051 () Bool)

(assert (=> b!24506 m!19051))

(declare-fun m!19053 () Bool)

(assert (=> b!24506 m!19053))

(declare-fun m!19055 () Bool)

(assert (=> b!24506 m!19055))

(declare-fun m!19057 () Bool)

(assert (=> b!24506 m!19057))

(assert (=> b!24506 m!19057))

(declare-fun m!19059 () Bool)

(assert (=> b!24506 m!19059))

(assert (=> b!24506 m!19053))

(declare-fun m!19061 () Bool)

(assert (=> b!24506 m!19061))

(declare-fun m!19063 () Bool)

(assert (=> b!24506 m!19063))

(assert (=> d!3993 d!4449))

(declare-fun d!4451 () Bool)

(declare-fun e!15846 () Bool)

(assert (=> d!4451 e!15846))

(declare-fun res!14904 () Bool)

(assert (=> d!4451 (=> (not res!14904) (not e!15846))))

(assert (=> d!4451 (= res!14904 (and (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000000) (bvslt (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (size!693 (_keys!3163 lt!8141)))))))

(declare-fun lt!9298 () Unit!519)

(declare-fun choose!1 (array!1263 (_ BitVec 32) (_ BitVec 64)) Unit!519)

(assert (=> d!4451 (= lt!9298 (choose!1 (_keys!3163 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15847 () Bool)

(assert (=> d!4451 e!15847))

(declare-fun res!14906 () Bool)

(assert (=> d!4451 (=> (not res!14906) (not e!15847))))

(assert (=> d!4451 (= res!14906 (and (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000000) (bvslt (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (size!693 (_keys!3163 lt!8141)))))))

(assert (=> d!4451 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3163 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!9298)))

(declare-fun b!24522 () Bool)

(declare-fun res!14907 () Bool)

(assert (=> b!24522 (=> (not res!14907) (not e!15847))))

(assert (=> b!24522 (= res!14907 (validKeyInArray!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24521 () Bool)

(declare-fun res!14905 () Bool)

(assert (=> b!24521 (=> (not res!14905) (not e!15847))))

(assert (=> b!24521 (= res!14905 (not (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))))))))

(declare-fun b!24523 () Bool)

(assert (=> b!24523 (= e!15847 (bvslt (size!693 (_keys!3163 lt!8141)) #b01111111111111111111111111111111))))

(declare-fun b!24524 () Bool)

(assert (=> b!24524 (= e!15846 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (bvadd (arrayCountValidKeys!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000001)))))

(assert (= (and d!4451 res!14906) b!24521))

(assert (= (and b!24521 res!14905) b!24522))

(assert (= (and b!24522 res!14907) b!24523))

(assert (= (and d!4451 res!14904) b!24524))

(declare-fun m!19065 () Bool)

(assert (=> d!4451 m!19065))

(declare-fun m!19067 () Bool)

(assert (=> b!24522 m!19067))

(declare-fun m!19069 () Bool)

(assert (=> b!24521 m!19069))

(assert (=> b!24521 m!19069))

(declare-fun m!19071 () Bool)

(assert (=> b!24521 m!19071))

(assert (=> b!24524 m!17086))

(assert (=> b!24524 m!17098))

(assert (=> b!24524 m!16902))

(assert (=> d!3993 d!4451))

(declare-fun d!4453 () Bool)

(declare-fun e!15848 () Bool)

(assert (=> d!4453 e!15848))

(declare-fun res!14908 () Bool)

(assert (=> d!4453 (=> (not res!14908) (not e!15848))))

(declare-fun lt!9301 () ListLongMap!565)

(assert (=> d!4453 (= res!14908 (contains!230 lt!9301 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun lt!9299 () List!565)

(assert (=> d!4453 (= lt!9301 (ListLongMap!566 lt!9299))))

(declare-fun lt!9300 () Unit!519)

(declare-fun lt!9302 () Unit!519)

(assert (=> d!4453 (= lt!9300 lt!9302)))

(assert (=> d!4453 (= (getValueByKey!60 lt!9299 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4453 (= lt!9302 (lemmaContainsTupThenGetReturnValue!18 lt!9299 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4453 (= lt!9299 (insertStrictlySorted!18 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4453 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9301)))

(declare-fun b!24525 () Bool)

(declare-fun res!14909 () Bool)

(assert (=> b!24525 (=> (not res!14909) (not e!15848))))

(assert (=> b!24525 (= res!14909 (= (getValueByKey!60 (toList!298 lt!9301) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24526 () Bool)

(assert (=> b!24526 (= e!15848 (contains!231 (toList!298 lt!9301) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (= (and d!4453 res!14908) b!24525))

(assert (= (and b!24525 res!14909) b!24526))

(declare-fun m!19073 () Bool)

(assert (=> d!4453 m!19073))

(declare-fun m!19075 () Bool)

(assert (=> d!4453 m!19075))

(declare-fun m!19077 () Bool)

(assert (=> d!4453 m!19077))

(declare-fun m!19079 () Bool)

(assert (=> d!4453 m!19079))

(declare-fun m!19081 () Bool)

(assert (=> b!24525 m!19081))

(declare-fun m!19083 () Bool)

(assert (=> b!24526 m!19083))

(assert (=> d!3993 d!4453))

(declare-fun d!4455 () Bool)

(declare-fun e!15851 () Bool)

(assert (=> d!4455 e!15851))

(declare-fun res!14912 () Bool)

(assert (=> d!4455 (=> (not res!14912) (not e!15851))))

(assert (=> d!4455 (= res!14912 (and (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000000) (bvslt (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (size!693 (_keys!3163 lt!8141))) (bvslt (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (size!692 (_values!1728 lt!8141)))))))

(declare-fun lt!9305 () Unit!519)

(declare-fun choose!215 (array!1263 array!1261 (_ BitVec 32) (_ BitVec 32) V!1187 V!1187 (_ BitVec 32) (_ BitVec 64) V!1187 Int) Unit!519)

(assert (=> d!4455 (= lt!9305 (choose!215 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4455 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4455 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!3 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) lt!9305)))

(declare-fun b!24529 () Bool)

(assert (=> b!24529 (= e!15851 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (getCurrentListMap!129 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))))

(assert (= (and d!4455 res!14912) b!24529))

(declare-fun m!19085 () Bool)

(assert (=> d!4455 m!19085))

(assert (=> d!4455 m!17050))

(assert (=> b!24529 m!17054))

(assert (=> b!24529 m!17070))

(assert (=> b!24529 m!17054))

(assert (=> b!24529 m!17086))

(assert (=> b!24529 m!17084))

(assert (=> b!24529 m!17080))

(assert (=> d!3993 d!4455))

(assert (=> d!3993 d!4245))

(declare-fun d!4457 () Bool)

(assert (=> d!4457 (arrayContainsKey!0 lt!8553 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000)))

(declare-fun lt!9306 () Unit!519)

(assert (=> d!4457 (= lt!9306 (choose!13 lt!8553 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))))))

(assert (=> d!4457 (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000000)))

(assert (=> d!4457 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8553 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))) lt!9306)))

(declare-fun bs!1009 () Bool)

(assert (= bs!1009 d!4457))

(assert (=> bs!1009 m!17082))

(declare-fun m!19087 () Bool)

(assert (=> bs!1009 m!19087))

(assert (=> d!3993 d!4457))

(declare-fun d!4459 () Bool)

(declare-fun e!15853 () Bool)

(assert (=> d!4459 e!15853))

(declare-fun res!14913 () Bool)

(assert (=> d!4459 (=> res!14913 e!15853)))

(declare-fun lt!9310 () Bool)

(assert (=> d!4459 (= res!14913 (not lt!9310))))

(declare-fun lt!9309 () Bool)

(assert (=> d!4459 (= lt!9310 lt!9309)))

(declare-fun lt!9308 () Unit!519)

(declare-fun e!15852 () Unit!519)

(assert (=> d!4459 (= lt!9308 e!15852)))

(declare-fun c!3321 () Bool)

(assert (=> d!4459 (= c!3321 lt!9309)))

(assert (=> d!4459 (= lt!9309 (containsKey!24 (toList!298 (getCurrentListMap!129 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)))))))

(assert (=> d!4459 (= (contains!230 (getCurrentListMap!129 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)))) lt!9310)))

(declare-fun b!24530 () Bool)

(declare-fun lt!9307 () Unit!519)

(assert (=> b!24530 (= e!15852 lt!9307)))

(assert (=> b!24530 (= lt!9307 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (getCurrentListMap!129 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)))))))

(assert (=> b!24530 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)))))))

(declare-fun b!24531 () Bool)

(declare-fun Unit!580 () Unit!519)

(assert (=> b!24531 (= e!15852 Unit!580)))

(declare-fun b!24532 () Bool)

(assert (=> b!24532 (= e!15853 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))))))))

(assert (= (and d!4459 c!3321) b!24530))

(assert (= (and d!4459 (not c!3321)) b!24531))

(assert (= (and d!4459 (not res!14913)) b!24532))

(assert (=> d!4459 m!17096))

(declare-fun m!19089 () Bool)

(assert (=> d!4459 m!19089))

(assert (=> b!24530 m!17096))

(declare-fun m!19091 () Bool)

(assert (=> b!24530 m!19091))

(assert (=> b!24530 m!17096))

(declare-fun m!19093 () Bool)

(assert (=> b!24530 m!19093))

(assert (=> b!24530 m!19093))

(declare-fun m!19095 () Bool)

(assert (=> b!24530 m!19095))

(assert (=> b!24532 m!17096))

(assert (=> b!24532 m!19093))

(assert (=> b!24532 m!19093))

(assert (=> b!24532 m!19095))

(assert (=> d!3993 d!4459))

(declare-fun d!4461 () Bool)

(declare-fun res!14914 () Bool)

(declare-fun e!15854 () Bool)

(assert (=> d!4461 (=> res!14914 e!15854)))

(assert (=> d!4461 (= res!14914 (= (select (arr!597 lt!8553) #b00000000000000000000000000000000) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4461 (= (arrayContainsKey!0 lt!8553 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000) e!15854)))

(declare-fun b!24533 () Bool)

(declare-fun e!15855 () Bool)

(assert (=> b!24533 (= e!15854 e!15855)))

(declare-fun res!14915 () Bool)

(assert (=> b!24533 (=> (not res!14915) (not e!15855))))

(assert (=> b!24533 (= res!14915 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 lt!8553)))))

(declare-fun b!24534 () Bool)

(assert (=> b!24534 (= e!15855 (arrayContainsKey!0 lt!8553 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4461 (not res!14914)) b!24533))

(assert (= (and b!24533 res!14915) b!24534))

(declare-fun m!19097 () Bool)

(assert (=> d!4461 m!19097))

(declare-fun m!19099 () Bool)

(assert (=> b!24534 m!19099))

(assert (=> d!3993 d!4461))

(assert (=> d!3993 d!4243))

(declare-fun d!4463 () Bool)

(declare-fun e!15856 () Bool)

(assert (=> d!4463 e!15856))

(declare-fun res!14916 () Bool)

(assert (=> d!4463 (=> (not res!14916) (not e!15856))))

(assert (=> d!4463 (= res!14916 (and (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000000) (bvslt (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (size!693 lt!8558))))))

(declare-fun lt!9311 () Unit!519)

(assert (=> d!4463 (= lt!9311 (choose!208 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (defaultEntry!1742 lt!8141)))))

(assert (=> d!4463 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4463 (= (lemmaValidKeyInArrayIsInListMap!10 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (defaultEntry!1742 lt!8141)) lt!9311)))

(declare-fun b!24535 () Bool)

(assert (=> b!24535 (= e!15856 (contains!230 (getCurrentListMap!129 lt!8558 lt!8580 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (select (arr!597 lt!8558) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)))))))

(assert (= (and d!4463 res!14916) b!24535))

(declare-fun m!19101 () Bool)

(assert (=> d!4463 m!19101))

(assert (=> d!4463 m!17050))

(assert (=> b!24535 m!17092))

(declare-fun m!19103 () Bool)

(assert (=> b!24535 m!19103))

(assert (=> b!24535 m!17092))

(assert (=> b!24535 m!19103))

(declare-fun m!19105 () Bool)

(assert (=> b!24535 m!19105))

(assert (=> d!3993 d!4463))

(declare-fun b!24536 () Bool)

(declare-fun e!15857 () Bool)

(declare-fun call!2154 () Bool)

(assert (=> b!24536 (= e!15857 call!2154)))

(declare-fun b!24537 () Bool)

(declare-fun e!15860 () Bool)

(assert (=> b!24537 (= e!15860 e!15857)))

(declare-fun c!3322 () Bool)

(assert (=> b!24537 (= c!3322 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) lt!8566)))))

(declare-fun d!4465 () Bool)

(declare-fun res!14917 () Bool)

(declare-fun e!15858 () Bool)

(assert (=> d!4465 (=> res!14917 e!15858)))

(assert (=> d!4465 (= res!14917 (bvsge lt!8566 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(assert (=> d!4465 (= (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!8566 lt!8565) e!15858)))

(declare-fun bm!2151 () Bool)

(assert (=> bm!2151 (= call!2154 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (bvadd lt!8566 #b00000000000000000000000000000001) (ite c!3322 (Cons!562 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) lt!8566) lt!8565) lt!8565)))))

(declare-fun b!24538 () Bool)

(assert (=> b!24538 (= e!15857 call!2154)))

(declare-fun b!24539 () Bool)

(assert (=> b!24539 (= e!15858 e!15860)))

(declare-fun res!14919 () Bool)

(assert (=> b!24539 (=> (not res!14919) (not e!15860))))

(declare-fun e!15859 () Bool)

(assert (=> b!24539 (= res!14919 (not e!15859))))

(declare-fun res!14918 () Bool)

(assert (=> b!24539 (=> (not res!14918) (not e!15859))))

(assert (=> b!24539 (= res!14918 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) lt!8566)))))

(declare-fun b!24540 () Bool)

(assert (=> b!24540 (= e!15859 (contains!232 lt!8565 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) lt!8566)))))

(assert (= (and d!4465 (not res!14917)) b!24539))

(assert (= (and b!24539 res!14918) b!24540))

(assert (= (and b!24539 res!14919) b!24537))

(assert (= (and b!24537 c!3322) b!24538))

(assert (= (and b!24537 (not c!3322)) b!24536))

(assert (= (or b!24538 b!24536) bm!2151))

(declare-fun m!19107 () Bool)

(assert (=> b!24537 m!19107))

(assert (=> b!24537 m!19107))

(declare-fun m!19109 () Bool)

(assert (=> b!24537 m!19109))

(assert (=> bm!2151 m!19107))

(declare-fun m!19111 () Bool)

(assert (=> bm!2151 m!19111))

(assert (=> b!24539 m!19107))

(assert (=> b!24539 m!19107))

(assert (=> b!24539 m!19109))

(assert (=> b!24540 m!19107))

(assert (=> b!24540 m!19107))

(declare-fun m!19113 () Bool)

(assert (=> b!24540 m!19113))

(assert (=> d!3993 d!4465))

(declare-fun d!4467 () Bool)

(assert (=> d!4467 (= (arrayCountValidKeys!0 lt!8560 (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (bvadd (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!9314 () Unit!519)

(declare-fun choose!2 (array!1263 (_ BitVec 32)) Unit!519)

(assert (=> d!4467 (= lt!9314 (choose!2 lt!8560 (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))))))

(declare-fun e!15863 () Bool)

(assert (=> d!4467 e!15863))

(declare-fun res!14924 () Bool)

(assert (=> d!4467 (=> (not res!14924) (not e!15863))))

(assert (=> d!4467 (= res!14924 (and (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000000) (bvslt (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (size!693 lt!8560))))))

(assert (=> d!4467 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!8560 (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240))) lt!9314)))

(declare-fun b!24545 () Bool)

(declare-fun res!14925 () Bool)

(assert (=> b!24545 (=> (not res!14925) (not e!15863))))

(assert (=> b!24545 (= res!14925 (validKeyInArray!0 (select (arr!597 lt!8560) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)))))))

(declare-fun b!24546 () Bool)

(assert (=> b!24546 (= e!15863 (bvslt (size!693 lt!8560) #b01111111111111111111111111111111))))

(assert (= (and d!4467 res!14924) b!24545))

(assert (= (and b!24545 res!14925) b!24546))

(assert (=> d!4467 m!17104))

(declare-fun m!19115 () Bool)

(assert (=> d!4467 m!19115))

(declare-fun m!19117 () Bool)

(assert (=> b!24545 m!19117))

(assert (=> b!24545 m!19117))

(declare-fun m!19119 () Bool)

(assert (=> b!24545 m!19119))

(assert (=> d!3993 d!4467))

(declare-fun b!24547 () Bool)

(declare-fun e!15864 () Bool)

(declare-fun call!2155 () Bool)

(assert (=> b!24547 (= e!15864 call!2155)))

(declare-fun b!24548 () Bool)

(declare-fun e!15866 () Bool)

(assert (=> b!24548 (= e!15866 call!2155)))

(declare-fun b!24549 () Bool)

(declare-fun e!15865 () Bool)

(assert (=> b!24549 (= e!15865 e!15864)))

(declare-fun c!3323 () Bool)

(assert (=> b!24549 (= c!3323 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(declare-fun d!4469 () Bool)

(declare-fun res!14927 () Bool)

(assert (=> d!4469 (=> res!14927 e!15865)))

(assert (=> d!4469 (= res!14927 (bvsge #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(assert (=> d!4469 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141)) e!15865)))

(declare-fun bm!2152 () Bool)

(assert (=> bm!2152 (= call!2155 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141)))))

(declare-fun b!24550 () Bool)

(assert (=> b!24550 (= e!15864 e!15866)))

(declare-fun lt!9315 () (_ BitVec 64))

(assert (=> b!24550 (= lt!9315 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(declare-fun lt!9317 () Unit!519)

(assert (=> b!24550 (= lt!9317 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!9315 #b00000000000000000000000000000000))))

(assert (=> b!24550 (arrayContainsKey!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!9315 #b00000000000000000000000000000000)))

(declare-fun lt!9316 () Unit!519)

(assert (=> b!24550 (= lt!9316 lt!9317)))

(declare-fun res!14926 () Bool)

(assert (=> b!24550 (= res!14926 (= (seekEntryOrOpen!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000) (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141)) (Found!55 #b00000000000000000000000000000000)))))

(assert (=> b!24550 (=> (not res!14926) (not e!15866))))

(assert (= (and d!4469 (not res!14927)) b!24549))

(assert (= (and b!24549 c!3323) b!24550))

(assert (= (and b!24549 (not c!3323)) b!24547))

(assert (= (and b!24550 res!14926) b!24548))

(assert (= (or b!24548 b!24547) bm!2152))

(declare-fun m!19121 () Bool)

(assert (=> b!24549 m!19121))

(assert (=> b!24549 m!19121))

(declare-fun m!19123 () Bool)

(assert (=> b!24549 m!19123))

(declare-fun m!19125 () Bool)

(assert (=> bm!2152 m!19125))

(assert (=> b!24550 m!19121))

(declare-fun m!19127 () Bool)

(assert (=> b!24550 m!19127))

(declare-fun m!19129 () Bool)

(assert (=> b!24550 m!19129))

(assert (=> b!24550 m!19121))

(declare-fun m!19131 () Bool)

(assert (=> b!24550 m!19131))

(assert (=> d!3993 d!4469))

(declare-fun b!24551 () Bool)

(declare-fun e!15867 () (_ BitVec 32))

(assert (=> b!24551 (= e!15867 #b00000000000000000000000000000000)))

(declare-fun b!24552 () Bool)

(declare-fun e!15868 () (_ BitVec 32))

(assert (=> b!24552 (= e!15867 e!15868)))

(declare-fun c!3325 () Bool)

(assert (=> b!24552 (= c!3325 (validKeyInArray!0 (select (arr!597 lt!8560) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)))))))

(declare-fun b!24553 () Bool)

(declare-fun call!2156 () (_ BitVec 32))

(assert (=> b!24553 (= e!15868 (bvadd #b00000000000000000000000000000001 call!2156))))

(declare-fun b!24554 () Bool)

(assert (=> b!24554 (= e!15868 call!2156)))

(declare-fun bm!2153 () Bool)

(assert (=> bm!2153 (= call!2156 (arrayCountValidKeys!0 lt!8560 (bvadd (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000001) (bvadd (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000001)))))

(declare-fun lt!9318 () (_ BitVec 32))

(declare-fun d!4471 () Bool)

(assert (=> d!4471 (and (bvsge lt!9318 #b00000000000000000000000000000000) (bvsle lt!9318 (bvsub (size!693 lt!8560) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)))))))

(assert (=> d!4471 (= lt!9318 e!15867)))

(declare-fun c!3324 () Bool)

(assert (=> d!4471 (= c!3324 (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (bvadd (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000001)))))

(assert (=> d!4471 (and (bvsle (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (bvadd (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000001)) (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000001) (size!693 lt!8560)))))

(assert (=> d!4471 (= (arrayCountValidKeys!0 lt!8560 (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (bvadd (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000001)) lt!9318)))

(assert (= (and d!4471 c!3324) b!24551))

(assert (= (and d!4471 (not c!3324)) b!24552))

(assert (= (and b!24552 c!3325) b!24553))

(assert (= (and b!24552 (not c!3325)) b!24554))

(assert (= (or b!24553 b!24554) bm!2153))

(assert (=> b!24552 m!19117))

(assert (=> b!24552 m!19117))

(assert (=> b!24552 m!19119))

(declare-fun m!19133 () Bool)

(assert (=> bm!2153 m!19133))

(assert (=> d!3993 d!4471))

(declare-fun b!24555 () Bool)

(declare-fun e!15869 () (_ BitVec 32))

(assert (=> b!24555 (= e!15869 #b00000000000000000000000000000000)))

(declare-fun b!24556 () Bool)

(declare-fun e!15870 () (_ BitVec 32))

(assert (=> b!24556 (= e!15869 e!15870)))

(declare-fun c!3327 () Bool)

(assert (=> b!24556 (= c!3327 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(declare-fun b!24557 () Bool)

(declare-fun call!2157 () (_ BitVec 32))

(assert (=> b!24557 (= e!15870 (bvadd #b00000000000000000000000000000001 call!2157))))

(declare-fun b!24558 () Bool)

(assert (=> b!24558 (= e!15870 call!2157)))

(declare-fun bm!2154 () Bool)

(assert (=> bm!2154 (= call!2157 (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 lt!8141))))))

(declare-fun d!4473 () Bool)

(declare-fun lt!9319 () (_ BitVec 32))

(assert (=> d!4473 (and (bvsge lt!9319 #b00000000000000000000000000000000) (bvsle lt!9319 (bvsub (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(assert (=> d!4473 (= lt!9319 e!15869)))

(declare-fun c!3326 () Bool)

(assert (=> d!4473 (= c!3326 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4473 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 lt!8141)) (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(assert (=> d!4473 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) lt!9319)))

(assert (= (and d!4473 c!3326) b!24555))

(assert (= (and d!4473 (not c!3326)) b!24556))

(assert (= (and b!24556 c!3327) b!24557))

(assert (= (and b!24556 (not c!3327)) b!24558))

(assert (= (or b!24557 b!24558) bm!2154))

(assert (=> b!24556 m!19121))

(assert (=> b!24556 m!19121))

(assert (=> b!24556 m!19123))

(declare-fun m!19135 () Bool)

(assert (=> bm!2154 m!19135))

(assert (=> d!3993 d!4473))

(assert (=> d!3993 d!4023))

(assert (=> d!3993 d!4229))

(assert (=> d!3993 d!3971))

(declare-fun b!24559 () Bool)

(declare-fun e!15879 () ListLongMap!565)

(declare-fun call!2160 () ListLongMap!565)

(assert (=> b!24559 (= e!15879 call!2160)))

(declare-fun bm!2155 () Bool)

(declare-fun call!2161 () ListLongMap!565)

(declare-fun call!2163 () ListLongMap!565)

(assert (=> bm!2155 (= call!2161 call!2163)))

(declare-fun b!24560 () Bool)

(declare-fun e!15875 () Bool)

(declare-fun e!15883 () Bool)

(assert (=> b!24560 (= e!15875 e!15883)))

(declare-fun c!3329 () Bool)

(assert (=> b!24560 (= c!3329 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24561 () Bool)

(declare-fun e!15874 () Bool)

(declare-fun lt!9324 () ListLongMap!565)

(assert (=> b!24561 (= e!15874 (= (apply!29 lt!9324 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24561 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))))))

(assert (=> b!24561 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(declare-fun bm!2156 () Bool)

(declare-fun c!3330 () Bool)

(declare-fun call!2159 () ListLongMap!565)

(declare-fun call!2162 () ListLongMap!565)

(declare-fun c!3331 () Bool)

(assert (=> bm!2156 (= call!2163 (+!45 (ite c!3330 call!2162 (ite c!3331 call!2159 call!2160)) (ite (or c!3330 c!3331) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!24562 () Bool)

(declare-fun res!14933 () Bool)

(assert (=> b!24562 (=> (not res!14933) (not e!15875))))

(declare-fun e!15880 () Bool)

(assert (=> b!24562 (= res!14933 e!15880)))

(declare-fun c!3328 () Bool)

(assert (=> b!24562 (= c!3328 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2157 () Bool)

(declare-fun call!2158 () Bool)

(assert (=> bm!2157 (= call!2158 (contains!230 lt!9324 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24563 () Bool)

(declare-fun e!15872 () Bool)

(assert (=> b!24563 (= e!15883 e!15872)))

(declare-fun res!14931 () Bool)

(declare-fun call!2164 () Bool)

(assert (=> b!24563 (= res!14931 call!2164)))

(assert (=> b!24563 (=> (not res!14931) (not e!15872))))

(declare-fun b!24564 () Bool)

(declare-fun e!15878 () Unit!519)

(declare-fun Unit!581 () Unit!519)

(assert (=> b!24564 (= e!15878 Unit!581)))

(declare-fun b!24565 () Bool)

(assert (=> b!24565 (= e!15883 (not call!2164))))

(declare-fun b!24566 () Bool)

(declare-fun e!15881 () Bool)

(assert (=> b!24566 (= e!15881 (= (apply!29 lt!9324 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun bm!2158 () Bool)

(assert (=> bm!2158 (= call!2164 (contains!230 lt!9324 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24567 () Bool)

(assert (=> b!24567 (= e!15880 (not call!2158))))

(declare-fun d!4475 () Bool)

(assert (=> d!4475 e!15875))

(declare-fun res!14930 () Bool)

(assert (=> d!4475 (=> (not res!14930) (not e!15875))))

(assert (=> d!4475 (= res!14930 (or (bvsge #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))))

(declare-fun lt!9339 () ListLongMap!565)

(assert (=> d!4475 (= lt!9324 lt!9339)))

(declare-fun lt!9331 () Unit!519)

(assert (=> d!4475 (= lt!9331 e!15878)))

(declare-fun c!3332 () Bool)

(declare-fun e!15882 () Bool)

(assert (=> d!4475 (= c!3332 e!15882)))

(declare-fun res!14934 () Bool)

(assert (=> d!4475 (=> (not res!14934) (not e!15882))))

(assert (=> d!4475 (= res!14934 (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(declare-fun e!15876 () ListLongMap!565)

(assert (=> d!4475 (= lt!9339 e!15876)))

(assert (=> d!4475 (= c!3330 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4475 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4475 (= (getCurrentListMap!129 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9324)))

(declare-fun b!24568 () Bool)

(assert (=> b!24568 (= e!15872 (= (apply!29 lt!9324 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!24569 () Bool)

(assert (=> b!24569 (= e!15876 (+!45 call!2163 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun b!24570 () Bool)

(declare-fun e!15877 () Bool)

(assert (=> b!24570 (= e!15877 e!15874)))

(declare-fun res!14935 () Bool)

(assert (=> b!24570 (=> (not res!14935) (not e!15874))))

(assert (=> b!24570 (= res!14935 (contains!230 lt!9324 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(assert (=> b!24570 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(declare-fun b!24571 () Bool)

(declare-fun res!14932 () Bool)

(assert (=> b!24571 (=> (not res!14932) (not e!15875))))

(assert (=> b!24571 (= res!14932 e!15877)))

(declare-fun res!14936 () Bool)

(assert (=> b!24571 (=> res!14936 e!15877)))

(declare-fun e!15873 () Bool)

(assert (=> b!24571 (= res!14936 (not e!15873))))

(declare-fun res!14929 () Bool)

(assert (=> b!24571 (=> (not res!14929) (not e!15873))))

(assert (=> b!24571 (= res!14929 (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))))))))

(declare-fun b!24572 () Bool)

(assert (=> b!24572 (= e!15879 call!2161)))

(declare-fun b!24573 () Bool)

(declare-fun lt!9321 () Unit!519)

(assert (=> b!24573 (= e!15878 lt!9321)))

(declare-fun lt!9335 () ListLongMap!565)

(assert (=> b!24573 (= lt!9335 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9320 () (_ BitVec 64))

(assert (=> b!24573 (= lt!9320 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9334 () (_ BitVec 64))

(assert (=> b!24573 (= lt!9334 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(declare-fun lt!9340 () Unit!519)

(assert (=> b!24573 (= lt!9340 (addStillContains!14 lt!9335 lt!9320 (zeroValue!1665 lt!8141) lt!9334))))

(assert (=> b!24573 (contains!230 (+!45 lt!9335 (tuple2!971 lt!9320 (zeroValue!1665 lt!8141))) lt!9334)))

(declare-fun lt!9337 () Unit!519)

(assert (=> b!24573 (= lt!9337 lt!9340)))

(declare-fun lt!9341 () ListLongMap!565)

(assert (=> b!24573 (= lt!9341 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9330 () (_ BitVec 64))

(assert (=> b!24573 (= lt!9330 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9326 () (_ BitVec 64))

(assert (=> b!24573 (= lt!9326 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(declare-fun lt!9332 () Unit!519)

(assert (=> b!24573 (= lt!9332 (addApplyDifferent!14 lt!9341 lt!9330 (minValue!1665 lt!8141) lt!9326))))

(assert (=> b!24573 (= (apply!29 (+!45 lt!9341 (tuple2!971 lt!9330 (minValue!1665 lt!8141))) lt!9326) (apply!29 lt!9341 lt!9326))))

(declare-fun lt!9322 () Unit!519)

(assert (=> b!24573 (= lt!9322 lt!9332)))

(declare-fun lt!9333 () ListLongMap!565)

(assert (=> b!24573 (= lt!9333 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9327 () (_ BitVec 64))

(assert (=> b!24573 (= lt!9327 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9329 () (_ BitVec 64))

(assert (=> b!24573 (= lt!9329 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(declare-fun lt!9328 () Unit!519)

(assert (=> b!24573 (= lt!9328 (addApplyDifferent!14 lt!9333 lt!9327 (zeroValue!1665 lt!8141) lt!9329))))

(assert (=> b!24573 (= (apply!29 (+!45 lt!9333 (tuple2!971 lt!9327 (zeroValue!1665 lt!8141))) lt!9329) (apply!29 lt!9333 lt!9329))))

(declare-fun lt!9323 () Unit!519)

(assert (=> b!24573 (= lt!9323 lt!9328)))

(declare-fun lt!9338 () ListLongMap!565)

(assert (=> b!24573 (= lt!9338 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9336 () (_ BitVec 64))

(assert (=> b!24573 (= lt!9336 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9325 () (_ BitVec 64))

(assert (=> b!24573 (= lt!9325 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000))))

(assert (=> b!24573 (= lt!9321 (addApplyDifferent!14 lt!9338 lt!9336 (minValue!1665 lt!8141) lt!9325))))

(assert (=> b!24573 (= (apply!29 (+!45 lt!9338 (tuple2!971 lt!9336 (minValue!1665 lt!8141))) lt!9325) (apply!29 lt!9338 lt!9325))))

(declare-fun b!24574 () Bool)

(declare-fun e!15871 () ListLongMap!565)

(assert (=> b!24574 (= e!15871 call!2161)))

(declare-fun b!24575 () Bool)

(assert (=> b!24575 (= e!15876 e!15871)))

(assert (=> b!24575 (= c!3331 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24576 () Bool)

(declare-fun c!3333 () Bool)

(assert (=> b!24576 (= c!3333 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24576 (= e!15871 e!15879)))

(declare-fun bm!2159 () Bool)

(assert (=> bm!2159 (= call!2160 call!2159)))

(declare-fun bm!2160 () Bool)

(assert (=> bm!2160 (= call!2159 call!2162)))

(declare-fun b!24577 () Bool)

(assert (=> b!24577 (= e!15880 e!15881)))

(declare-fun res!14928 () Bool)

(assert (=> b!24577 (= res!14928 call!2158)))

(assert (=> b!24577 (=> (not res!14928) (not e!15881))))

(declare-fun b!24578 () Bool)

(assert (=> b!24578 (= e!15882 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(declare-fun bm!2161 () Bool)

(assert (=> bm!2161 (= call!2162 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!24579 () Bool)

(assert (=> b!24579 (= e!15873 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141)))) #b00000000000000000000000000000000)))))

(assert (= (and d!4475 c!3330) b!24569))

(assert (= (and d!4475 (not c!3330)) b!24575))

(assert (= (and b!24575 c!3331) b!24574))

(assert (= (and b!24575 (not c!3331)) b!24576))

(assert (= (and b!24576 c!3333) b!24572))

(assert (= (and b!24576 (not c!3333)) b!24559))

(assert (= (or b!24572 b!24559) bm!2159))

(assert (= (or b!24574 bm!2159) bm!2160))

(assert (= (or b!24574 b!24572) bm!2155))

(assert (= (or b!24569 bm!2160) bm!2161))

(assert (= (or b!24569 bm!2155) bm!2156))

(assert (= (and d!4475 res!14934) b!24578))

(assert (= (and d!4475 c!3332) b!24573))

(assert (= (and d!4475 (not c!3332)) b!24564))

(assert (= (and d!4475 res!14930) b!24571))

(assert (= (and b!24571 res!14929) b!24579))

(assert (= (and b!24571 (not res!14936)) b!24570))

(assert (= (and b!24570 res!14935) b!24561))

(assert (= (and b!24571 res!14932) b!24562))

(assert (= (and b!24562 c!3328) b!24577))

(assert (= (and b!24562 (not c!3328)) b!24567))

(assert (= (and b!24577 res!14928) b!24566))

(assert (= (or b!24577 b!24567) bm!2157))

(assert (= (and b!24562 res!14933) b!24560))

(assert (= (and b!24560 c!3329) b!24563))

(assert (= (and b!24560 (not c!3329)) b!24565))

(assert (= (and b!24563 res!14931) b!24568))

(assert (= (or b!24563 b!24565) bm!2158))

(declare-fun b_lambda!1617 () Bool)

(assert (=> (not b_lambda!1617) (not b!24561)))

(assert (=> b!24561 t!3234))

(declare-fun b_and!1529 () Bool)

(assert (= b_and!1527 (and (=> t!3234 result!1095) b_and!1529)))

(assert (=> b!24570 m!19121))

(assert (=> b!24570 m!19121))

(declare-fun m!19137 () Bool)

(assert (=> b!24570 m!19137))

(declare-fun m!19139 () Bool)

(assert (=> b!24569 m!19139))

(declare-fun m!19141 () Bool)

(assert (=> b!24561 m!19141))

(assert (=> b!24561 m!17304))

(declare-fun m!19143 () Bool)

(assert (=> b!24561 m!19143))

(assert (=> b!24561 m!19121))

(declare-fun m!19145 () Bool)

(assert (=> b!24561 m!19145))

(assert (=> b!24561 m!19121))

(assert (=> b!24561 m!19141))

(assert (=> b!24561 m!17304))

(assert (=> b!24578 m!19121))

(assert (=> b!24578 m!19121))

(assert (=> b!24578 m!19123))

(declare-fun m!19147 () Bool)

(assert (=> bm!2156 m!19147))

(assert (=> b!24579 m!19121))

(assert (=> b!24579 m!19121))

(assert (=> b!24579 m!19123))

(declare-fun m!19149 () Bool)

(assert (=> bm!2157 m!19149))

(declare-fun m!19151 () Bool)

(assert (=> b!24568 m!19151))

(declare-fun m!19153 () Bool)

(assert (=> bm!2158 m!19153))

(declare-fun m!19155 () Bool)

(assert (=> b!24566 m!19155))

(declare-fun m!19157 () Bool)

(assert (=> bm!2161 m!19157))

(assert (=> d!4475 m!17050))

(declare-fun m!19159 () Bool)

(assert (=> b!24573 m!19159))

(declare-fun m!19161 () Bool)

(assert (=> b!24573 m!19161))

(declare-fun m!19163 () Bool)

(assert (=> b!24573 m!19163))

(declare-fun m!19165 () Bool)

(assert (=> b!24573 m!19165))

(declare-fun m!19167 () Bool)

(assert (=> b!24573 m!19167))

(assert (=> b!24573 m!19157))

(assert (=> b!24573 m!19161))

(assert (=> b!24573 m!19121))

(declare-fun m!19169 () Bool)

(assert (=> b!24573 m!19169))

(declare-fun m!19171 () Bool)

(assert (=> b!24573 m!19171))

(declare-fun m!19173 () Bool)

(assert (=> b!24573 m!19173))

(assert (=> b!24573 m!19171))

(declare-fun m!19175 () Bool)

(assert (=> b!24573 m!19175))

(declare-fun m!19177 () Bool)

(assert (=> b!24573 m!19177))

(declare-fun m!19179 () Bool)

(assert (=> b!24573 m!19179))

(declare-fun m!19181 () Bool)

(assert (=> b!24573 m!19181))

(assert (=> b!24573 m!19181))

(declare-fun m!19183 () Bool)

(assert (=> b!24573 m!19183))

(assert (=> b!24573 m!19177))

(declare-fun m!19185 () Bool)

(assert (=> b!24573 m!19185))

(declare-fun m!19187 () Bool)

(assert (=> b!24573 m!19187))

(assert (=> d!3993 d!4475))

(declare-fun d!4477 () Bool)

(declare-fun e!15886 () Bool)

(assert (=> d!4477 e!15886))

(declare-fun res!14939 () Bool)

(assert (=> d!4477 (=> (not res!14939) (not e!15886))))

(assert (=> d!4477 (= res!14939 (and (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000000) (bvslt (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (size!693 (_keys!3163 lt!8141)))))))

(declare-fun lt!9344 () Unit!519)

(declare-fun choose!41 (array!1263 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!566) Unit!519)

(assert (=> d!4477 (= lt!9344 (choose!41 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) lt!8566 lt!8565))))

(assert (=> d!4477 (bvslt (size!693 (_keys!3163 lt!8141)) #b01111111111111111111111111111111)))

(assert (=> d!4477 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3163 lt!8141) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) lt!8566 lt!8565) lt!9344)))

(declare-fun b!24582 () Bool)

(assert (=> b!24582 (= e!15886 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) lt!8566 lt!8565))))

(assert (= (and d!4477 res!14939) b!24582))

(declare-fun m!19189 () Bool)

(assert (=> d!4477 m!19189))

(assert (=> b!24582 m!17086))

(assert (=> b!24582 m!17072))

(assert (=> d!3993 d!4477))

(declare-fun d!4479 () Bool)

(declare-fun e!15889 () Bool)

(assert (=> d!4479 e!15889))

(declare-fun res!14942 () Bool)

(assert (=> d!4479 (=> (not res!14942) (not e!15889))))

(assert (=> d!4479 (= res!14942 (and (bvsge (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) #b00000000000000000000000000000000) (bvslt (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (size!693 (_keys!3163 lt!8141)))))))

(declare-fun lt!9347 () Unit!519)

(declare-fun choose!102 ((_ BitVec 64) array!1263 (_ BitVec 32) (_ BitVec 32)) Unit!519)

(assert (=> d!4479 (= lt!9347 (choose!102 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (mask!4729 lt!8141)))))

(assert (=> d!4479 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4479 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (mask!4729 lt!8141)) lt!9347)))

(declare-fun b!24585 () Bool)

(assert (=> b!24585 (= e!15889 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 lt!8141)) (ite c!2976 (index!2344 lt!8240) (index!2341 lt!8240)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (size!693 (_keys!3163 lt!8141))) (mask!4729 lt!8141)))))

(assert (= (and d!4479 res!14942) b!24585))

(declare-fun m!19191 () Bool)

(assert (=> d!4479 m!19191))

(assert (=> d!4479 m!17050))

(assert (=> b!24585 m!17086))

(assert (=> b!24585 m!17094))

(assert (=> d!3993 d!4479))

(declare-fun b!24586 () Bool)

(declare-fun e!15890 () Option!66)

(assert (=> b!24586 (= e!15890 (Some!65 (_2!493 (h!1127 (toList!298 lt!8487)))))))

(declare-fun b!24589 () Bool)

(declare-fun e!15891 () Option!66)

(assert (=> b!24589 (= e!15891 None!64)))

(declare-fun b!24588 () Bool)

(assert (=> b!24588 (= e!15891 (getValueByKey!60 (t!3229 (toList!298 lt!8487)) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24587 () Bool)

(assert (=> b!24587 (= e!15890 e!15891)))

(declare-fun c!3335 () Bool)

(assert (=> b!24587 (= c!3335 (and ((_ is Cons!561) (toList!298 lt!8487)) (not (= (_1!493 (h!1127 (toList!298 lt!8487))) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))))

(declare-fun d!4481 () Bool)

(declare-fun c!3334 () Bool)

(assert (=> d!4481 (= c!3334 (and ((_ is Cons!561) (toList!298 lt!8487)) (= (_1!493 (h!1127 (toList!298 lt!8487))) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(assert (=> d!4481 (= (getValueByKey!60 (toList!298 lt!8487) (_1!493 (ite c!2967 (ite c!2968 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))) e!15890)))

(assert (= (and d!4481 c!3334) b!24586))

(assert (= (and d!4481 (not c!3334)) b!24587))

(assert (= (and b!24587 c!3335) b!24588))

(assert (= (and b!24587 (not c!3335)) b!24589))

(declare-fun m!19193 () Bool)

(assert (=> b!24588 m!19193))

(assert (=> b!23503 d!4481))

(declare-fun d!4483 () Bool)

(declare-fun e!15893 () Bool)

(assert (=> d!4483 e!15893))

(declare-fun res!14943 () Bool)

(assert (=> d!4483 (=> res!14943 e!15893)))

(declare-fun lt!9351 () Bool)

(assert (=> d!4483 (= res!14943 (not lt!9351))))

(declare-fun lt!9350 () Bool)

(assert (=> d!4483 (= lt!9351 lt!9350)))

(declare-fun lt!9349 () Unit!519)

(declare-fun e!15892 () Unit!519)

(assert (=> d!4483 (= lt!9349 e!15892)))

(declare-fun c!3336 () Bool)

(assert (=> d!4483 (= c!3336 lt!9350)))

(assert (=> d!4483 (= lt!9350 (containsKey!24 (toList!298 (map!408 (_2!487 lt!8619))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4483 (= (contains!230 (map!408 (_2!487 lt!8619)) #b1000000000000000000000000000000000000000000000000000000000000000) lt!9351)))

(declare-fun b!24590 () Bool)

(declare-fun lt!9348 () Unit!519)

(assert (=> b!24590 (= e!15892 lt!9348)))

(assert (=> b!24590 (= lt!9348 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (map!408 (_2!487 lt!8619))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24590 (isDefined!22 (getValueByKey!60 (toList!298 (map!408 (_2!487 lt!8619))) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24591 () Bool)

(declare-fun Unit!582 () Unit!519)

(assert (=> b!24591 (= e!15892 Unit!582)))

(declare-fun b!24592 () Bool)

(assert (=> b!24592 (= e!15893 (isDefined!22 (getValueByKey!60 (toList!298 (map!408 (_2!487 lt!8619))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4483 c!3336) b!24590))

(assert (= (and d!4483 (not c!3336)) b!24591))

(assert (= (and d!4483 (not res!14943)) b!24592))

(declare-fun m!19195 () Bool)

(assert (=> d!4483 m!19195))

(declare-fun m!19197 () Bool)

(assert (=> b!24590 m!19197))

(declare-fun m!19199 () Bool)

(assert (=> b!24590 m!19199))

(assert (=> b!24590 m!19199))

(declare-fun m!19201 () Bool)

(assert (=> b!24590 m!19201))

(assert (=> b!24592 m!19199))

(assert (=> b!24592 m!19199))

(assert (=> b!24592 m!19201))

(assert (=> b!23614 d!4483))

(declare-fun d!4485 () Bool)

(assert (=> d!4485 (= (map!408 (_2!487 lt!8619)) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8619)) (_values!1728 (_2!487 lt!8619)) (mask!4729 (_2!487 lt!8619)) (extraKeys!1640 (_2!487 lt!8619)) (zeroValue!1665 (_2!487 lt!8619)) (minValue!1665 (_2!487 lt!8619)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8619))))))

(declare-fun bs!1010 () Bool)

(assert (= bs!1010 d!4485))

(declare-fun m!19203 () Bool)

(assert (=> bs!1010 m!19203))

(assert (=> b!23614 d!4485))

(declare-fun d!4487 () Bool)

(assert (=> d!4487 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))

(declare-fun lt!9352 () Unit!519)

(assert (=> d!4487 (= lt!9352 (choose!210 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))

(declare-fun e!15894 () Bool)

(assert (=> d!4487 e!15894))

(declare-fun res!14944 () Bool)

(assert (=> d!4487 (=> (not res!14944) (not e!15894))))

(assert (=> d!4487 (= res!14944 (isStrictlySorted!165 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))))

(assert (=> d!4487 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))) lt!9352)))

(declare-fun b!24593 () Bool)

(assert (=> b!24593 (= e!15894 (containsKey!24 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))

(assert (= (and d!4487 res!14944) b!24593))

(assert (=> d!4487 m!16722))

(assert (=> d!4487 m!17294))

(assert (=> d!4487 m!17294))

(assert (=> d!4487 m!17296))

(assert (=> d!4487 m!16722))

(declare-fun m!19205 () Bool)

(assert (=> d!4487 m!19205))

(declare-fun m!19207 () Bool)

(assert (=> d!4487 m!19207))

(assert (=> b!24593 m!16722))

(assert (=> b!24593 m!17290))

(assert (=> b!23652 d!4487))

(assert (=> b!23652 d!4359))

(assert (=> b!23652 d!4361))

(declare-fun d!4489 () Bool)

(declare-fun e!15896 () Bool)

(assert (=> d!4489 e!15896))

(declare-fun res!14945 () Bool)

(assert (=> d!4489 (=> res!14945 e!15896)))

(declare-fun lt!9356 () Bool)

(assert (=> d!4489 (= res!14945 (not lt!9356))))

(declare-fun lt!9355 () Bool)

(assert (=> d!4489 (= lt!9356 lt!9355)))

(declare-fun lt!9354 () Unit!519)

(declare-fun e!15895 () Unit!519)

(assert (=> d!4489 (= lt!9354 e!15895)))

(declare-fun c!3337 () Bool)

(assert (=> d!4489 (= c!3337 lt!9355)))

(assert (=> d!4489 (= lt!9355 (containsKey!24 (toList!298 lt!8459) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4489 (= (contains!230 lt!8459 #b1000000000000000000000000000000000000000000000000000000000000000) lt!9356)))

(declare-fun b!24594 () Bool)

(declare-fun lt!9353 () Unit!519)

(assert (=> b!24594 (= e!15895 lt!9353)))

(assert (=> b!24594 (= lt!9353 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8459) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24594 (isDefined!22 (getValueByKey!60 (toList!298 lt!8459) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24595 () Bool)

(declare-fun Unit!583 () Unit!519)

(assert (=> b!24595 (= e!15895 Unit!583)))

(declare-fun b!24596 () Bool)

(assert (=> b!24596 (= e!15896 (isDefined!22 (getValueByKey!60 (toList!298 lt!8459) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4489 c!3337) b!24594))

(assert (= (and d!4489 (not c!3337)) b!24595))

(assert (= (and d!4489 (not res!14945)) b!24596))

(declare-fun m!19209 () Bool)

(assert (=> d!4489 m!19209))

(declare-fun m!19211 () Bool)

(assert (=> b!24594 m!19211))

(assert (=> b!24594 m!18631))

(assert (=> b!24594 m!18631))

(declare-fun m!19213 () Bool)

(assert (=> b!24594 m!19213))

(assert (=> b!24596 m!18631))

(assert (=> b!24596 m!18631))

(assert (=> b!24596 m!19213))

(assert (=> bm!1986 d!4489))

(declare-fun b!24597 () Bool)

(declare-fun res!14949 () Bool)

(declare-fun e!15897 () Bool)

(assert (=> b!24597 (=> (not res!14949) (not e!15897))))

(assert (=> b!24597 (= res!14949 (and (= (size!692 (_values!1728 lt!8141)) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 lt!8141)) (size!692 (_values!1728 lt!8141))) (bvsge (_size!149 lt!8141) #b00000000000000000000000000000000) (bvsle (_size!149 lt!8141) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(declare-fun b!24598 () Bool)

(declare-fun res!14946 () Bool)

(assert (=> b!24598 (=> (not res!14946) (not e!15897))))

(assert (=> b!24598 (= res!14946 (bvsge (size!702 lt!8141) (_size!149 lt!8141)))))

(declare-fun b!24599 () Bool)

(declare-fun res!14947 () Bool)

(assert (=> b!24599 (=> (not res!14947) (not e!15897))))

(assert (=> b!24599 (= res!14947 (= (size!702 lt!8141) (bvadd (_size!149 lt!8141) (bvsdiv (bvadd (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!4491 () Bool)

(declare-fun res!14948 () Bool)

(assert (=> d!4491 (=> (not res!14948) (not e!15897))))

(assert (=> d!4491 (= res!14948 (validMask!0 (mask!4729 lt!8141)))))

(assert (=> d!4491 (= (simpleValid!20 lt!8141) e!15897)))

(declare-fun b!24600 () Bool)

(assert (=> b!24600 (= e!15897 (and (bvsge (extraKeys!1640 lt!8141) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 lt!8141) #b00000000000000000000000000000011) (bvsge (_vacant!149 lt!8141) #b00000000000000000000000000000000)))))

(assert (= (and d!4491 res!14948) b!24597))

(assert (= (and b!24597 res!14949) b!24598))

(assert (= (and b!24598 res!14946) b!24599))

(assert (= (and b!24599 res!14947) b!24600))

(declare-fun m!19215 () Bool)

(assert (=> b!24598 m!19215))

(assert (=> b!24599 m!19215))

(assert (=> d!4491 m!17050))

(assert (=> d!3971 d!4491))

(declare-fun b!24601 () Bool)

(declare-fun res!14953 () Bool)

(declare-fun e!15898 () Bool)

(assert (=> b!24601 (=> (not res!14953) (not e!15898))))

(assert (=> b!24601 (= res!14953 (and (= (size!692 (_values!1728 (v!1601 (underlying!115 thiss!938)))) (bvadd (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) (size!692 (_values!1728 (v!1601 (underlying!115 thiss!938))))) (bvsge (_size!149 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000) (bvsle (_size!149 (v!1601 (underlying!115 thiss!938))) (bvadd (mask!4729 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000001))))))

(declare-fun b!24602 () Bool)

(declare-fun res!14950 () Bool)

(assert (=> b!24602 (=> (not res!14950) (not e!15898))))

(assert (=> b!24602 (= res!14950 (bvsge (size!702 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun b!24603 () Bool)

(declare-fun res!14951 () Bool)

(assert (=> b!24603 (=> (not res!14951) (not e!15898))))

(assert (=> b!24603 (= res!14951 (= (size!702 (v!1601 (underlying!115 thiss!938))) (bvadd (_size!149 (v!1601 (underlying!115 thiss!938))) (bvsdiv (bvadd (extraKeys!1640 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!4493 () Bool)

(declare-fun res!14952 () Bool)

(assert (=> d!4493 (=> (not res!14952) (not e!15898))))

(assert (=> d!4493 (= res!14952 (validMask!0 (mask!4729 (v!1601 (underlying!115 thiss!938)))))))

(assert (=> d!4493 (= (simpleValid!20 (v!1601 (underlying!115 thiss!938))) e!15898)))

(declare-fun b!24604 () Bool)

(assert (=> b!24604 (= e!15898 (and (bvsge (extraKeys!1640 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000011) (bvsge (_vacant!149 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000)))))

(assert (= (and d!4493 res!14952) b!24601))

(assert (= (and b!24601 res!14953) b!24602))

(assert (= (and b!24602 res!14950) b!24603))

(assert (= (and b!24603 res!14951) b!24604))

(declare-fun m!19217 () Bool)

(assert (=> b!24602 m!19217))

(assert (=> b!24603 m!19217))

(assert (=> d!4493 m!16678))

(assert (=> d!3999 d!4493))

(assert (=> d!4007 d!4021))

(declare-fun d!4495 () Bool)

(assert (=> d!4495 (arrayForallSeekEntryOrOpenFound!0 lt!8323 lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))))))

(assert (=> d!4495 true))

(declare-fun _$30!30 () Unit!519)

(assert (=> d!4495 (= (choose!34 lt!8315 (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) lt!8323) _$30!30)))

(declare-fun bs!1011 () Bool)

(assert (= bs!1011 d!4495))

(assert (=> bs!1011 m!16662))

(assert (=> bs!1011 m!16796))

(assert (=> d!4007 d!4495))

(assert (=> d!4007 d!4013))

(declare-fun d!4497 () Bool)

(declare-fun e!15900 () Bool)

(assert (=> d!4497 e!15900))

(declare-fun res!14954 () Bool)

(assert (=> d!4497 (=> res!14954 e!15900)))

(declare-fun lt!9360 () Bool)

(assert (=> d!4497 (= res!14954 (not lt!9360))))

(declare-fun lt!9359 () Bool)

(assert (=> d!4497 (= lt!9360 lt!9359)))

(declare-fun lt!9358 () Unit!519)

(declare-fun e!15899 () Unit!519)

(assert (=> d!4497 (= lt!9358 e!15899)))

(declare-fun c!3338 () Bool)

(assert (=> d!4497 (= c!3338 lt!9359)))

(assert (=> d!4497 (= lt!9359 (containsKey!24 (toList!298 lt!8427) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4497 (= (contains!230 lt!8427 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9360)))

(declare-fun b!24605 () Bool)

(declare-fun lt!9357 () Unit!519)

(assert (=> b!24605 (= e!15899 lt!9357)))

(assert (=> b!24605 (= lt!9357 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8427) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24605 (isDefined!22 (getValueByKey!60 (toList!298 lt!8427) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24606 () Bool)

(declare-fun Unit!584 () Unit!519)

(assert (=> b!24606 (= e!15899 Unit!584)))

(declare-fun b!24607 () Bool)

(assert (=> b!24607 (= e!15900 (isDefined!22 (getValueByKey!60 (toList!298 lt!8427) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4497 c!3338) b!24605))

(assert (= (and d!4497 (not c!3338)) b!24606))

(assert (= (and d!4497 (not res!14954)) b!24607))

(declare-fun m!19219 () Bool)

(assert (=> d!4497 m!19219))

(declare-fun m!19221 () Bool)

(assert (=> b!24605 m!19221))

(assert (=> b!24605 m!18167))

(assert (=> b!24605 m!18167))

(declare-fun m!19223 () Bool)

(assert (=> b!24605 m!19223))

(assert (=> b!24607 m!18167))

(assert (=> b!24607 m!18167))

(assert (=> b!24607 m!19223))

(assert (=> bm!1978 d!4497))

(declare-fun d!4499 () Bool)

(declare-fun lt!9361 () Bool)

(assert (=> d!4499 (= lt!9361 (select (content!15 (toList!298 lt!8587)) (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun e!15901 () Bool)

(assert (=> d!4499 (= lt!9361 e!15901)))

(declare-fun res!14955 () Bool)

(assert (=> d!4499 (=> (not res!14955) (not e!15901))))

(assert (=> d!4499 (= res!14955 ((_ is Cons!561) (toList!298 lt!8587)))))

(assert (=> d!4499 (= (contains!231 (toList!298 lt!8587) (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9361)))

(declare-fun b!24608 () Bool)

(declare-fun e!15902 () Bool)

(assert (=> b!24608 (= e!15901 e!15902)))

(declare-fun res!14956 () Bool)

(assert (=> b!24608 (=> res!14956 e!15902)))

(assert (=> b!24608 (= res!14956 (= (h!1127 (toList!298 lt!8587)) (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24609 () Bool)

(assert (=> b!24609 (= e!15902 (contains!231 (t!3229 (toList!298 lt!8587)) (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (= (and d!4499 res!14955) b!24608))

(assert (= (and b!24608 (not res!14956)) b!24609))

(declare-fun m!19225 () Bool)

(assert (=> d!4499 m!19225))

(declare-fun m!19227 () Bool)

(assert (=> d!4499 m!19227))

(declare-fun m!19229 () Bool)

(assert (=> b!24609 m!19229))

(assert (=> b!23560 d!4499))

(declare-fun d!4501 () Bool)

(assert (=> d!4501 (= (inRange!0 (ite c!3006 (index!2341 lt!8366) (index!2344 lt!8366)) (mask!4729 (_2!487 lt!8138))) (and (bvsge (ite c!3006 (index!2341 lt!8366) (index!2344 lt!8366)) #b00000000000000000000000000000000) (bvslt (ite c!3006 (index!2341 lt!8366) (index!2344 lt!8366)) (bvadd (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000000001))))))

(assert (=> bm!1961 d!4501))

(declare-fun b!24610 () Bool)

(declare-fun e!15904 () SeekEntryResult!55)

(assert (=> b!24610 (= e!15904 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!487 lt!8138))) #b00000000000000000000000000000000 (mask!4729 (_2!487 lt!8138))) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!24611 () Bool)

(declare-fun e!15903 () SeekEntryResult!55)

(assert (=> b!24611 (= e!15903 e!15904)))

(declare-fun c!3340 () Bool)

(declare-fun lt!9363 () (_ BitVec 64))

(assert (=> b!24611 (= c!3340 (or (= lt!9363 #b1000000000000000000000000000000000000000000000000000000000000000) (= (bvadd lt!9363 lt!9363) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24612 () Bool)

(assert (=> b!24612 (= e!15903 (Intermediate!55 true (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun b!24614 () Bool)

(declare-fun e!15906 () Bool)

(declare-fun lt!9362 () SeekEntryResult!55)

(assert (=> b!24614 (= e!15906 (bvsge (x!5577 lt!9362) #b01111111111111111111111111111110))))

(declare-fun b!24615 () Bool)

(assert (=> b!24615 (and (bvsge (index!2343 lt!9362) #b00000000000000000000000000000000) (bvslt (index!2343 lt!9362) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun res!14958 () Bool)

(assert (=> b!24615 (= res!14958 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2343 lt!9362)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!15907 () Bool)

(assert (=> b!24615 (=> res!14958 e!15907)))

(declare-fun e!15905 () Bool)

(assert (=> b!24615 (= e!15905 e!15907)))

(declare-fun b!24616 () Bool)

(assert (=> b!24616 (and (bvsge (index!2343 lt!9362) #b00000000000000000000000000000000) (bvslt (index!2343 lt!9362) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> b!24616 (= e!15907 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2343 lt!9362)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24613 () Bool)

(assert (=> b!24613 (= e!15906 e!15905)))

(declare-fun res!14957 () Bool)

(assert (=> b!24613 (= res!14957 (and ((_ is Intermediate!55) lt!9362) (not (undefined!867 lt!9362)) (bvslt (x!5577 lt!9362) #b01111111111111111111111111111110) (bvsge (x!5577 lt!9362) #b00000000000000000000000000000000) (bvsge (x!5577 lt!9362) #b00000000000000000000000000000000)))))

(assert (=> b!24613 (=> (not res!14957) (not e!15905))))

(declare-fun d!4503 () Bool)

(assert (=> d!4503 e!15906))

(declare-fun c!3339 () Bool)

(assert (=> d!4503 (= c!3339 (and ((_ is Intermediate!55) lt!9362) (undefined!867 lt!9362)))))

(assert (=> d!4503 (= lt!9362 e!15903)))

(declare-fun c!3341 () Bool)

(assert (=> d!4503 (= c!3341 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!4503 (= lt!9363 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!487 lt!8138)))))))

(assert (=> d!4503 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4503 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!487 lt!8138))) #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))) lt!9362)))

(declare-fun b!24617 () Bool)

(assert (=> b!24617 (and (bvsge (index!2343 lt!9362) #b00000000000000000000000000000000) (bvslt (index!2343 lt!9362) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun res!14959 () Bool)

(assert (=> b!24617 (= res!14959 (= (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2343 lt!9362)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24617 (=> res!14959 e!15907)))

(declare-fun b!24618 () Bool)

(assert (=> b!24618 (= e!15904 (Intermediate!55 false (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(assert (= (and d!4503 c!3341) b!24612))

(assert (= (and d!4503 (not c!3341)) b!24611))

(assert (= (and b!24611 c!3340) b!24618))

(assert (= (and b!24611 (not c!3340)) b!24610))

(assert (= (and d!4503 c!3339) b!24614))

(assert (= (and d!4503 (not c!3339)) b!24613))

(assert (= (and b!24613 res!14957) b!24615))

(assert (= (and b!24615 (not res!14958)) b!24617))

(assert (= (and b!24617 (not res!14959)) b!24616))

(assert (=> b!24610 m!17477))

(declare-fun m!19231 () Bool)

(assert (=> b!24610 m!19231))

(assert (=> b!24610 m!19231))

(declare-fun m!19233 () Bool)

(assert (=> b!24610 m!19233))

(assert (=> d!4503 m!17477))

(declare-fun m!19235 () Bool)

(assert (=> d!4503 m!19235))

(assert (=> d!4503 m!16878))

(declare-fun m!19237 () Bool)

(assert (=> b!24617 m!19237))

(assert (=> b!24616 m!19237))

(assert (=> b!24615 m!19237))

(assert (=> d!4069 d!4503))

(declare-fun d!4505 () Bool)

(declare-fun lt!9365 () (_ BitVec 32))

(declare-fun lt!9364 () (_ BitVec 32))

(assert (=> d!4505 (= lt!9365 (bvmul (bvxor lt!9364 (bvlshr lt!9364 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!4505 (= lt!9364 ((_ extract 31 0) (bvand (bvxor #b1000000000000000000000000000000000000000000000000000000000000000 (bvlshr #b1000000000000000000000000000000000000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!4505 (and (bvsge (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000000000) (let ((res!14844 (let ((h!1129 ((_ extract 31 0) (bvand (bvxor #b1000000000000000000000000000000000000000000000000000000000000000 (bvlshr #b1000000000000000000000000000000000000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!5837 (bvmul (bvxor h!1129 (bvlshr h!1129 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!5837 (bvlshr x!5837 #b00000000000000000000000000001101)) (mask!4729 (_2!487 lt!8138))))))) (and (bvslt res!14844 (bvadd (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000000001)) (bvsge res!14844 #b00000000000000000000000000000000))))))

(assert (=> d!4505 (= (toIndex!0 #b1000000000000000000000000000000000000000000000000000000000000000 (mask!4729 (_2!487 lt!8138))) (bvand (bvxor lt!9365 (bvlshr lt!9365 #b00000000000000000000000000001101)) (mask!4729 (_2!487 lt!8138))))))

(assert (=> d!4069 d!4505))

(assert (=> d!4069 d!4291))

(declare-fun d!4507 () Bool)

(assert (=> d!4507 (= (apply!29 lt!8459 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!391 (getValueByKey!60 (toList!298 lt!8459) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))))

(declare-fun bs!1012 () Bool)

(assert (= bs!1012 d!4507))

(assert (=> bs!1012 m!16908))

(assert (=> bs!1012 m!18131))

(assert (=> bs!1012 m!18131))

(declare-fun m!19239 () Bool)

(assert (=> bs!1012 m!19239))

(assert (=> b!23480 d!4507))

(declare-fun d!4509 () Bool)

(declare-fun c!3342 () Bool)

(assert (=> d!4509 (= c!3342 ((_ is ValueCellFull!311) (select (arr!596 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))) #b00000000000000000000000000000000)))))

(declare-fun e!15908 () V!1187)

(assert (=> d!4509 (= (get!390 (select (arr!596 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)) e!15908)))

(declare-fun b!24619 () Bool)

(assert (=> b!24619 (= e!15908 (get!392 (select (arr!596 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24620 () Bool)

(assert (=> b!24620 (= e!15908 (get!393 (select (arr!596 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4509 c!3342) b!24619))

(assert (= (and d!4509 (not c!3342)) b!24620))

(assert (=> b!24619 m!16988))

(assert (=> b!24619 m!16916))

(declare-fun m!19241 () Bool)

(assert (=> b!24619 m!19241))

(assert (=> b!24620 m!16988))

(assert (=> b!24620 m!16916))

(declare-fun m!19243 () Bool)

(assert (=> b!24620 m!19243))

(assert (=> b!23480 d!4509))

(declare-fun d!4511 () Bool)

(declare-fun e!15909 () Bool)

(assert (=> d!4511 e!15909))

(declare-fun res!14960 () Bool)

(assert (=> d!4511 (=> (not res!14960) (not e!15909))))

(declare-fun lt!9368 () ListLongMap!565)

(assert (=> d!4511 (= res!14960 (contains!230 lt!9368 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun lt!9366 () List!565)

(assert (=> d!4511 (= lt!9368 (ListLongMap!566 lt!9366))))

(declare-fun lt!9367 () Unit!519)

(declare-fun lt!9369 () Unit!519)

(assert (=> d!4511 (= lt!9367 lt!9369)))

(assert (=> d!4511 (= (getValueByKey!60 lt!9366 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4511 (= lt!9369 (lemmaContainsTupThenGetReturnValue!18 lt!9366 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4511 (= lt!9366 (insertStrictlySorted!18 (toList!298 call!1984) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (=> d!4511 (= (+!45 call!1984 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))) lt!9368)))

(declare-fun b!24621 () Bool)

(declare-fun res!14961 () Bool)

(assert (=> b!24621 (=> (not res!14961) (not e!15909))))

(assert (=> b!24621 (= res!14961 (= (getValueByKey!60 (toList!298 lt!9368) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))))

(declare-fun b!24622 () Bool)

(assert (=> b!24622 (= e!15909 (contains!231 (toList!298 lt!9368) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))

(assert (= (and d!4511 res!14960) b!24621))

(assert (= (and b!24621 res!14961) b!24622))

(declare-fun m!19245 () Bool)

(assert (=> d!4511 m!19245))

(declare-fun m!19247 () Bool)

(assert (=> d!4511 m!19247))

(declare-fun m!19249 () Bool)

(assert (=> d!4511 m!19249))

(declare-fun m!19251 () Bool)

(assert (=> d!4511 m!19251))

(declare-fun m!19253 () Bool)

(assert (=> b!24621 m!19253))

(declare-fun m!19255 () Bool)

(assert (=> b!24622 m!19255))

(assert (=> b!23452 d!4511))

(declare-fun d!4513 () Bool)

(declare-fun e!15910 () Bool)

(assert (=> d!4513 e!15910))

(declare-fun res!14962 () Bool)

(assert (=> d!4513 (=> (not res!14962) (not e!15910))))

(declare-fun lt!9372 () ListLongMap!565)

(assert (=> d!4513 (= res!14962 (contains!230 lt!9372 (_1!493 (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(declare-fun lt!9370 () List!565)

(assert (=> d!4513 (= lt!9372 (ListLongMap!566 lt!9370))))

(declare-fun lt!9371 () Unit!519)

(declare-fun lt!9373 () Unit!519)

(assert (=> d!4513 (= lt!9371 lt!9373)))

(assert (=> d!4513 (= (getValueByKey!60 lt!9370 (_1!493 (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))) (Some!65 (_2!493 (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4513 (= lt!9373 (lemmaContainsTupThenGetReturnValue!18 lt!9370 (_1!493 (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (_2!493 (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4513 (= lt!9370 (insertStrictlySorted!18 (toList!298 (ite c!3104 call!2038 (ite c!3105 call!2035 call!2036))) (_1!493 (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (_2!493 (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4513 (= (+!45 (ite c!3104 call!2038 (ite c!3105 call!2035 call!2036)) (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) lt!9372)))

(declare-fun b!24623 () Bool)

(declare-fun res!14963 () Bool)

(assert (=> b!24623 (=> (not res!14963) (not e!15910))))

(assert (=> b!24623 (= res!14963 (= (getValueByKey!60 (toList!298 lt!9372) (_1!493 (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))) (Some!65 (_2!493 (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))))

(declare-fun b!24624 () Bool)

(assert (=> b!24624 (= e!15910 (contains!231 (toList!298 lt!9372) (ite (or c!3104 c!3105) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (= (and d!4513 res!14962) b!24623))

(assert (= (and b!24623 res!14963) b!24624))

(declare-fun m!19257 () Bool)

(assert (=> d!4513 m!19257))

(declare-fun m!19259 () Bool)

(assert (=> d!4513 m!19259))

(declare-fun m!19261 () Bool)

(assert (=> d!4513 m!19261))

(declare-fun m!19263 () Bool)

(assert (=> d!4513 m!19263))

(declare-fun m!19265 () Bool)

(assert (=> b!24623 m!19265))

(declare-fun m!19267 () Bool)

(assert (=> b!24624 m!19267))

(assert (=> bm!2032 d!4513))

(assert (=> b!23728 d!4235))

(declare-fun d!4515 () Bool)

(declare-fun e!15912 () Bool)

(assert (=> d!4515 e!15912))

(declare-fun res!14964 () Bool)

(assert (=> d!4515 (=> res!14964 e!15912)))

(declare-fun lt!9377 () Bool)

(assert (=> d!4515 (= res!14964 (not lt!9377))))

(declare-fun lt!9376 () Bool)

(assert (=> d!4515 (= lt!9377 lt!9376)))

(declare-fun lt!9375 () Unit!519)

(declare-fun e!15911 () Unit!519)

(assert (=> d!4515 (= lt!9375 e!15911)))

(declare-fun c!3343 () Bool)

(assert (=> d!4515 (= c!3343 lt!9376)))

(assert (=> d!4515 (= lt!9376 (containsKey!24 (toList!298 lt!8668) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4515 (= (contains!230 lt!8668 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9377)))

(declare-fun b!24625 () Bool)

(declare-fun lt!9374 () Unit!519)

(assert (=> b!24625 (= e!15911 lt!9374)))

(assert (=> b!24625 (= lt!9374 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8668) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24625 (isDefined!22 (getValueByKey!60 (toList!298 lt!8668) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24626 () Bool)

(declare-fun Unit!585 () Unit!519)

(assert (=> b!24626 (= e!15911 Unit!585)))

(declare-fun b!24627 () Bool)

(assert (=> b!24627 (= e!15912 (isDefined!22 (getValueByKey!60 (toList!298 lt!8668) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4515 c!3343) b!24625))

(assert (= (and d!4515 (not c!3343)) b!24626))

(assert (= (and d!4515 (not res!14964)) b!24627))

(declare-fun m!19269 () Bool)

(assert (=> d!4515 m!19269))

(declare-fun m!19271 () Bool)

(assert (=> b!24625 m!19271))

(assert (=> b!24625 m!17879))

(assert (=> b!24625 m!17879))

(declare-fun m!19273 () Bool)

(assert (=> b!24625 m!19273))

(assert (=> b!24627 m!17879))

(assert (=> b!24627 m!17879))

(assert (=> b!24627 m!19273))

(assert (=> bm!2017 d!4515))

(declare-fun d!4517 () Bool)

(assert (=> d!4517 (= (inRange!0 (ite c!3067 (index!2342 lt!8618) (ite c!3069 (index!2341 lt!8630) (index!2344 lt!8630))) (mask!4729 (_2!487 lt!8138))) (and (bvsge (ite c!3067 (index!2342 lt!8618) (ite c!3069 (index!2341 lt!8630) (index!2344 lt!8630))) #b00000000000000000000000000000000) (bvslt (ite c!3067 (index!2342 lt!8618) (ite c!3069 (index!2341 lt!8630) (index!2344 lt!8630))) (bvadd (mask!4729 (_2!487 lt!8138)) #b00000000000000000000000000000001))))))

(assert (=> bm!2013 d!4517))

(assert (=> bm!2022 d!4023))

(assert (=> b!23591 d!4237))

(declare-fun d!4519 () Bool)

(declare-fun e!15914 () Bool)

(assert (=> d!4519 e!15914))

(declare-fun res!14965 () Bool)

(assert (=> d!4519 (=> res!14965 e!15914)))

(declare-fun lt!9381 () Bool)

(assert (=> d!4519 (= res!14965 (not lt!9381))))

(declare-fun lt!9380 () Bool)

(assert (=> d!4519 (= lt!9381 lt!9380)))

(declare-fun lt!9379 () Unit!519)

(declare-fun e!15913 () Unit!519)

(assert (=> d!4519 (= lt!9379 e!15913)))

(declare-fun c!3344 () Bool)

(assert (=> d!4519 (= c!3344 lt!9380)))

(assert (=> d!4519 (= lt!9380 (containsKey!24 (toList!298 lt!8744) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4519 (= (contains!230 lt!8744 #b1000000000000000000000000000000000000000000000000000000000000000) lt!9381)))

(declare-fun b!24628 () Bool)

(declare-fun lt!9378 () Unit!519)

(assert (=> b!24628 (= e!15913 lt!9378)))

(assert (=> b!24628 (= lt!9378 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8744) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24628 (isDefined!22 (getValueByKey!60 (toList!298 lt!8744) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24629 () Bool)

(declare-fun Unit!586 () Unit!519)

(assert (=> b!24629 (= e!15913 Unit!586)))

(declare-fun b!24630 () Bool)

(assert (=> b!24630 (= e!15914 (isDefined!22 (getValueByKey!60 (toList!298 lt!8744) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4519 c!3344) b!24628))

(assert (= (and d!4519 (not c!3344)) b!24629))

(assert (= (and d!4519 (not res!14965)) b!24630))

(declare-fun m!19275 () Bool)

(assert (=> d!4519 m!19275))

(declare-fun m!19277 () Bool)

(assert (=> b!24628 m!19277))

(assert (=> b!24628 m!18805))

(assert (=> b!24628 m!18805))

(declare-fun m!19279 () Bool)

(assert (=> b!24628 m!19279))

(assert (=> b!24630 m!18805))

(assert (=> b!24630 m!18805))

(assert (=> b!24630 m!19279))

(assert (=> bm!2034 d!4519))

(declare-fun d!4521 () Bool)

(assert (=> d!4521 (= (apply!29 lt!8668 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8668) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1013 () Bool)

(assert (= bs!1013 d!4521))

(assert (=> bs!1013 m!17629))

(assert (=> bs!1013 m!17629))

(declare-fun m!19281 () Bool)

(assert (=> bs!1013 m!19281))

(assert (=> b!23664 d!4521))

(assert (=> b!23498 d!4123))

(declare-fun d!4523 () Bool)

(declare-fun e!15915 () Bool)

(assert (=> d!4523 e!15915))

(declare-fun res!14966 () Bool)

(assert (=> d!4523 (=> (not res!14966) (not e!15915))))

(declare-fun lt!9384 () ListLongMap!565)

(assert (=> d!4523 (= res!14966 (contains!230 lt!9384 (_1!493 (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))))

(declare-fun lt!9382 () List!565)

(assert (=> d!4523 (= lt!9384 (ListLongMap!566 lt!9382))))

(declare-fun lt!9383 () Unit!519)

(declare-fun lt!9385 () Unit!519)

(assert (=> d!4523 (= lt!9383 lt!9385)))

(assert (=> d!4523 (= (getValueByKey!60 lt!9382 (_1!493 (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))) (Some!65 (_2!493 (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))))

(assert (=> d!4523 (= lt!9385 (lemmaContainsTupThenGetReturnValue!18 lt!9382 (_1!493 (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) (_2!493 (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))))

(assert (=> d!4523 (= lt!9382 (insertStrictlySorted!18 (toList!298 (ite c!3025 call!1983 (ite c!3026 call!1980 call!1981))) (_1!493 (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) (_2!493 (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))))))

(assert (=> d!4523 (= (+!45 (ite c!3025 call!1983 (ite c!3026 call!1980 call!1981)) (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))) lt!9384)))

(declare-fun b!24631 () Bool)

(declare-fun res!14967 () Bool)

(assert (=> b!24631 (=> (not res!14967) (not e!15915))))

(assert (=> b!24631 (= res!14967 (= (getValueByKey!60 (toList!298 lt!9384) (_1!493 (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138))))))) (Some!65 (_2!493 (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))))

(declare-fun b!24632 () Bool)

(assert (=> b!24632 (= e!15915 (contains!231 (toList!298 lt!9384) (ite (or c!3025 c!3026) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!2989 c!2990) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (zeroValue!1665 (_2!487 lt!8138)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2989 (ite c!2990 (minValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (minValue!1665 (_2!487 lt!8138)))))))))

(assert (= (and d!4523 res!14966) b!24631))

(assert (= (and b!24631 res!14967) b!24632))

(declare-fun m!19283 () Bool)

(assert (=> d!4523 m!19283))

(declare-fun m!19285 () Bool)

(assert (=> d!4523 m!19285))

(declare-fun m!19287 () Bool)

(assert (=> d!4523 m!19287))

(declare-fun m!19289 () Bool)

(assert (=> d!4523 m!19289))

(declare-fun m!19291 () Bool)

(assert (=> b!24631 m!19291))

(declare-fun m!19293 () Bool)

(assert (=> b!24632 m!19293))

(assert (=> bm!1977 d!4523))

(declare-fun d!4525 () Bool)

(assert (=> d!4525 (= (inRange!0 (index!2342 lt!8648) (mask!4729 lt!8141)) (and (bvsge (index!2342 lt!8648) #b00000000000000000000000000000000) (bvslt (index!2342 lt!8648) (bvadd (mask!4729 lt!8141) #b00000000000000000000000000000001))))))

(assert (=> b!23632 d!4525))

(declare-fun d!4527 () Bool)

(assert (=> d!4527 (= (apply!29 lt!8459 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8459) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1014 () Bool)

(assert (= bs!1014 d!4527))

(assert (=> bs!1014 m!18313))

(assert (=> bs!1014 m!18313))

(declare-fun m!19295 () Bool)

(assert (=> bs!1014 m!19295))

(assert (=> b!23485 d!4527))

(declare-fun b!24633 () Bool)

(declare-fun e!15916 () Bool)

(declare-fun call!2165 () Bool)

(assert (=> b!24633 (= e!15916 call!2165)))

(declare-fun b!24634 () Bool)

(declare-fun e!15919 () Bool)

(assert (=> b!24634 (= e!15919 e!15916)))

(declare-fun c!3345 () Bool)

(assert (=> b!24634 (= c!3345 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun d!4529 () Bool)

(declare-fun res!14968 () Bool)

(declare-fun e!15917 () Bool)

(assert (=> d!4529 (=> res!14968 e!15917)))

(assert (=> d!4529 (= res!14968 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> d!4529 (= (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8138)) #b00000000000000000000000000000000 Nil!563) e!15917)))

(declare-fun bm!2162 () Bool)

(assert (=> bm!2162 (= call!2165 (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8138)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3345 (Cons!562 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000) Nil!563) Nil!563)))))

(declare-fun b!24635 () Bool)

(assert (=> b!24635 (= e!15916 call!2165)))

(declare-fun b!24636 () Bool)

(assert (=> b!24636 (= e!15917 e!15919)))

(declare-fun res!14970 () Bool)

(assert (=> b!24636 (=> (not res!14970) (not e!15919))))

(declare-fun e!15918 () Bool)

(assert (=> b!24636 (= res!14970 (not e!15918))))

(declare-fun res!14969 () Bool)

(assert (=> b!24636 (=> (not res!14969) (not e!15918))))

(assert (=> b!24636 (= res!14969 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun b!24637 () Bool)

(assert (=> b!24637 (= e!15918 (contains!232 Nil!563 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (= (and d!4529 (not res!14968)) b!24636))

(assert (= (and b!24636 res!14969) b!24637))

(assert (= (and b!24636 res!14970) b!24634))

(assert (= (and b!24634 c!3345) b!24635))

(assert (= (and b!24634 (not c!3345)) b!24633))

(assert (= (or b!24635 b!24633) bm!2162))

(assert (=> b!24634 m!16908))

(assert (=> b!24634 m!16908))

(assert (=> b!24634 m!16922))

(assert (=> bm!2162 m!16908))

(declare-fun m!19297 () Bool)

(assert (=> bm!2162 m!19297))

(assert (=> b!24636 m!16908))

(assert (=> b!24636 m!16908))

(assert (=> b!24636 m!16922))

(assert (=> b!24637 m!16908))

(assert (=> b!24637 m!16908))

(declare-fun m!19299 () Bool)

(assert (=> b!24637 m!19299))

(assert (=> b!23707 d!4529))

(declare-fun b!24638 () Bool)

(declare-fun res!14974 () Bool)

(declare-fun e!15920 () Bool)

(assert (=> b!24638 (=> (not res!14974) (not e!15920))))

(assert (=> b!24638 (= res!14974 (and (= (size!692 (_values!1728 (_2!487 lt!8234))) (bvadd (mask!4729 (_2!487 lt!8234)) #b00000000000000000000000000000001)) (= (size!693 (_keys!3163 (_2!487 lt!8234))) (size!692 (_values!1728 (_2!487 lt!8234)))) (bvsge (_size!149 (_2!487 lt!8234)) #b00000000000000000000000000000000) (bvsle (_size!149 (_2!487 lt!8234)) (bvadd (mask!4729 (_2!487 lt!8234)) #b00000000000000000000000000000001))))))

(declare-fun b!24639 () Bool)

(declare-fun res!14971 () Bool)

(assert (=> b!24639 (=> (not res!14971) (not e!15920))))

(assert (=> b!24639 (= res!14971 (bvsge (size!702 (_2!487 lt!8234)) (_size!149 (_2!487 lt!8234))))))

(declare-fun b!24640 () Bool)

(declare-fun res!14972 () Bool)

(assert (=> b!24640 (=> (not res!14972) (not e!15920))))

(assert (=> b!24640 (= res!14972 (= (size!702 (_2!487 lt!8234)) (bvadd (_size!149 (_2!487 lt!8234)) (bvsdiv (bvadd (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!4531 () Bool)

(declare-fun res!14973 () Bool)

(assert (=> d!4531 (=> (not res!14973) (not e!15920))))

(assert (=> d!4531 (= res!14973 (validMask!0 (mask!4729 (_2!487 lt!8234))))))

(assert (=> d!4531 (= (simpleValid!20 (_2!487 lt!8234)) e!15920)))

(declare-fun b!24641 () Bool)

(assert (=> b!24641 (= e!15920 (and (bvsge (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000000) (bvsle (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000011) (bvsge (_vacant!149 (_2!487 lt!8234)) #b00000000000000000000000000000000)))))

(assert (= (and d!4531 res!14973) b!24638))

(assert (= (and b!24638 res!14974) b!24639))

(assert (= (and b!24639 res!14971) b!24640))

(assert (= (and b!24640 res!14972) b!24641))

(declare-fun m!19301 () Bool)

(assert (=> b!24639 m!19301))

(assert (=> b!24640 m!19301))

(declare-fun m!19303 () Bool)

(assert (=> d!4531 m!19303))

(assert (=> d!3969 d!4531))

(declare-fun d!4533 () Bool)

(assert (=> d!4533 (= (apply!29 lt!8725 lt!8712) (get!391 (getValueByKey!60 (toList!298 lt!8725) lt!8712)))))

(declare-fun bs!1015 () Bool)

(assert (= bs!1015 d!4533))

(declare-fun m!19305 () Bool)

(assert (=> bs!1015 m!19305))

(assert (=> bs!1015 m!19305))

(declare-fun m!19307 () Bool)

(assert (=> bs!1015 m!19307))

(assert (=> b!23722 d!4533))

(declare-fun d!4535 () Bool)

(assert (=> d!4535 (= (apply!29 (+!45 lt!8720 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8716) (apply!29 lt!8720 lt!8716))))

(declare-fun lt!9386 () Unit!519)

(assert (=> d!4535 (= lt!9386 (choose!211 lt!8720 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8716))))

(declare-fun e!15921 () Bool)

(assert (=> d!4535 e!15921))

(declare-fun res!14975 () Bool)

(assert (=> d!4535 (=> (not res!14975) (not e!15921))))

(assert (=> d!4535 (= res!14975 (contains!230 lt!8720 lt!8716))))

(assert (=> d!4535 (= (addApplyDifferent!14 lt!8720 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8716) lt!9386)))

(declare-fun b!24642 () Bool)

(assert (=> b!24642 (= e!15921 (not (= lt!8716 lt!8714)))))

(assert (= (and d!4535 res!14975) b!24642))

(assert (=> d!4535 m!17447))

(declare-fun m!19309 () Bool)

(assert (=> d!4535 m!19309))

(assert (=> d!4535 m!17433))

(declare-fun m!19311 () Bool)

(assert (=> d!4535 m!19311))

(assert (=> d!4535 m!17433))

(assert (=> d!4535 m!17435))

(assert (=> b!23722 d!4535))

(declare-fun d!4537 () Bool)

(assert (=> d!4537 (contains!230 (+!45 lt!8722 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8721)))

(declare-fun lt!9387 () Unit!519)

(assert (=> d!4537 (= lt!9387 (choose!212 lt!8722 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8721))))

(assert (=> d!4537 (contains!230 lt!8722 lt!8721)))

(assert (=> d!4537 (= (addStillContains!14 lt!8722 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) lt!8721) lt!9387)))

(declare-fun bs!1016 () Bool)

(assert (= bs!1016 d!4537))

(assert (=> bs!1016 m!17453))

(assert (=> bs!1016 m!17453))

(assert (=> bs!1016 m!17455))

(declare-fun m!19313 () Bool)

(assert (=> bs!1016 m!19313))

(declare-fun m!19315 () Bool)

(assert (=> bs!1016 m!19315))

(assert (=> b!23722 d!4537))

(declare-fun d!4539 () Bool)

(declare-fun e!15922 () Bool)

(assert (=> d!4539 e!15922))

(declare-fun res!14976 () Bool)

(assert (=> d!4539 (=> (not res!14976) (not e!15922))))

(declare-fun lt!9390 () ListLongMap!565)

(assert (=> d!4539 (= res!14976 (contains!230 lt!9390 (_1!493 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(declare-fun lt!9388 () List!565)

(assert (=> d!4539 (= lt!9390 (ListLongMap!566 lt!9388))))

(declare-fun lt!9389 () Unit!519)

(declare-fun lt!9391 () Unit!519)

(assert (=> d!4539 (= lt!9389 lt!9391)))

(assert (=> d!4539 (= (getValueByKey!60 lt!9388 (_1!493 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4539 (= lt!9391 (lemmaContainsTupThenGetReturnValue!18 lt!9388 (_1!493 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!493 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4539 (= lt!9388 (insertStrictlySorted!18 (toList!298 lt!8728) (_1!493 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!493 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4539 (= (+!45 lt!8728 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!9390)))

(declare-fun b!24643 () Bool)

(declare-fun res!14977 () Bool)

(assert (=> b!24643 (=> (not res!14977) (not e!15922))))

(assert (=> b!24643 (= res!14977 (= (getValueByKey!60 (toList!298 lt!9390) (_1!493 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(declare-fun b!24644 () Bool)

(assert (=> b!24644 (= e!15922 (contains!231 (toList!298 lt!9390) (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))

(assert (= (and d!4539 res!14976) b!24643))

(assert (= (and b!24643 res!14977) b!24644))

(declare-fun m!19317 () Bool)

(assert (=> d!4539 m!19317))

(declare-fun m!19319 () Bool)

(assert (=> d!4539 m!19319))

(declare-fun m!19321 () Bool)

(assert (=> d!4539 m!19321))

(declare-fun m!19323 () Bool)

(assert (=> d!4539 m!19323))

(declare-fun m!19325 () Bool)

(assert (=> b!24643 m!19325))

(declare-fun m!19327 () Bool)

(assert (=> b!24644 m!19327))

(assert (=> b!23722 d!4539))

(declare-fun b!24645 () Bool)

(declare-fun res!14978 () Bool)

(declare-fun e!15923 () Bool)

(assert (=> b!24645 (=> (not res!14978) (not e!15923))))

(declare-fun lt!9393 () ListLongMap!565)

(assert (=> b!24645 (= res!14978 (not (contains!230 lt!9393 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24646 () Bool)

(assert (=> b!24646 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> b!24646 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8141))))))

(declare-fun e!15924 () Bool)

(assert (=> b!24646 (= e!15924 (= (apply!29 lt!9393 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24647 () Bool)

(declare-fun lt!9395 () Unit!519)

(declare-fun lt!9397 () Unit!519)

(assert (=> b!24647 (= lt!9395 lt!9397)))

(declare-fun lt!9394 () ListLongMap!565)

(declare-fun lt!9392 () (_ BitVec 64))

(declare-fun lt!9396 () (_ BitVec 64))

(declare-fun lt!9398 () V!1187)

(assert (=> b!24647 (not (contains!230 (+!45 lt!9394 (tuple2!971 lt!9396 lt!9398)) lt!9392))))

(assert (=> b!24647 (= lt!9397 (addStillNotContains!2 lt!9394 lt!9396 lt!9398 lt!9392))))

(assert (=> b!24647 (= lt!9392 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!24647 (= lt!9398 (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24647 (= lt!9396 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun call!2166 () ListLongMap!565)

(assert (=> b!24647 (= lt!9394 call!2166)))

(declare-fun e!15928 () ListLongMap!565)

(assert (=> b!24647 (= e!15928 (+!45 call!2166 (tuple2!971 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!15925 () Bool)

(declare-fun b!24648 () Bool)

(assert (=> b!24648 (= e!15925 (= lt!9393 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141))))))

(declare-fun b!24649 () Bool)

(assert (=> b!24649 (= e!15928 call!2166)))

(declare-fun b!24650 () Bool)

(declare-fun e!15927 () Bool)

(assert (=> b!24650 (= e!15927 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24650 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!4541 () Bool)

(assert (=> d!4541 e!15923))

(declare-fun res!14981 () Bool)

(assert (=> d!4541 (=> (not res!14981) (not e!15923))))

(assert (=> d!4541 (= res!14981 (not (contains!230 lt!9393 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15929 () ListLongMap!565)

(assert (=> d!4541 (= lt!9393 e!15929)))

(declare-fun c!3349 () Bool)

(assert (=> d!4541 (= c!3349 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4541 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4541 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9393)))

(declare-fun b!24651 () Bool)

(assert (=> b!24651 (= e!15929 e!15928)))

(declare-fun c!3347 () Bool)

(assert (=> b!24651 (= c!3347 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24652 () Bool)

(assert (=> b!24652 (= e!15925 (isEmpty!172 lt!9393))))

(declare-fun b!24653 () Bool)

(declare-fun e!15926 () Bool)

(assert (=> b!24653 (= e!15926 e!15924)))

(assert (=> b!24653 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun res!14979 () Bool)

(assert (=> b!24653 (= res!14979 (contains!230 lt!9393 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24653 (=> (not res!14979) (not e!15924))))

(declare-fun bm!2163 () Bool)

(assert (=> bm!2163 (= call!2166 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (ite c!2967 (ite c!2968 lt!8238 lt!8258) (extraKeys!1640 lt!8141)) (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)) (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 lt!8141)))))

(declare-fun b!24654 () Bool)

(assert (=> b!24654 (= e!15926 e!15925)))

(declare-fun c!3348 () Bool)

(assert (=> b!24654 (= c!3348 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24655 () Bool)

(assert (=> b!24655 (= e!15929 (ListLongMap!566 Nil!562))))

(declare-fun b!24656 () Bool)

(assert (=> b!24656 (= e!15923 e!15926)))

(declare-fun c!3346 () Bool)

(assert (=> b!24656 (= c!3346 e!15927)))

(declare-fun res!14980 () Bool)

(assert (=> b!24656 (=> (not res!14980) (not e!15927))))

(assert (=> b!24656 (= res!14980 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (= (and d!4541 c!3349) b!24655))

(assert (= (and d!4541 (not c!3349)) b!24651))

(assert (= (and b!24651 c!3347) b!24647))

(assert (= (and b!24651 (not c!3347)) b!24649))

(assert (= (or b!24647 b!24649) bm!2163))

(assert (= (and d!4541 res!14981) b!24645))

(assert (= (and b!24645 res!14978) b!24656))

(assert (= (and b!24656 res!14980) b!24650))

(assert (= (and b!24656 c!3346) b!24653))

(assert (= (and b!24656 (not c!3346)) b!24654))

(assert (= (and b!24653 res!14979) b!24646))

(assert (= (and b!24654 c!3348) b!24648))

(assert (= (and b!24654 (not c!3348)) b!24652))

(declare-fun b_lambda!1619 () Bool)

(assert (=> (not b_lambda!1619) (not b!24646)))

(assert (=> b!24646 t!3234))

(declare-fun b_and!1531 () Bool)

(assert (= b_and!1529 (and (=> t!3234 result!1095) b_and!1531)))

(declare-fun b_lambda!1621 () Bool)

(assert (=> (not b_lambda!1621) (not b!24647)))

(assert (=> b!24647 t!3234))

(declare-fun b_and!1533 () Bool)

(assert (= b_and!1531 (and (=> t!3234 result!1095) b_and!1533)))

(assert (=> b!24651 m!17198))

(assert (=> b!24651 m!17198))

(assert (=> b!24651 m!17310))

(assert (=> b!24646 m!17304))

(assert (=> b!24646 m!17198))

(declare-fun m!19329 () Bool)

(assert (=> b!24646 m!19329))

(assert (=> b!24646 m!17198))

(assert (=> b!24646 m!17413))

(assert (=> b!24646 m!17304))

(assert (=> b!24646 m!17415))

(assert (=> b!24646 m!17413))

(declare-fun m!19331 () Bool)

(assert (=> b!24648 m!19331))

(assert (=> b!24650 m!17198))

(assert (=> b!24650 m!17198))

(assert (=> b!24650 m!17310))

(declare-fun m!19333 () Bool)

(assert (=> b!24652 m!19333))

(assert (=> b!24653 m!17198))

(assert (=> b!24653 m!17198))

(declare-fun m!19335 () Bool)

(assert (=> b!24653 m!19335))

(declare-fun m!19337 () Bool)

(assert (=> b!24645 m!19337))

(assert (=> bm!2163 m!19331))

(assert (=> b!24647 m!17304))

(declare-fun m!19339 () Bool)

(assert (=> b!24647 m!19339))

(declare-fun m!19341 () Bool)

(assert (=> b!24647 m!19341))

(assert (=> b!24647 m!17198))

(assert (=> b!24647 m!19339))

(declare-fun m!19343 () Bool)

(assert (=> b!24647 m!19343))

(assert (=> b!24647 m!17413))

(assert (=> b!24647 m!17304))

(assert (=> b!24647 m!17415))

(assert (=> b!24647 m!17413))

(declare-fun m!19345 () Bool)

(assert (=> b!24647 m!19345))

(declare-fun m!19347 () Bool)

(assert (=> d!4541 m!19347))

(assert (=> d!4541 m!17050))

(assert (=> b!23722 d!4541))

(declare-fun d!4543 () Bool)

(declare-fun e!15930 () Bool)

(assert (=> d!4543 e!15930))

(declare-fun res!14982 () Bool)

(assert (=> d!4543 (=> (not res!14982) (not e!15930))))

(declare-fun lt!9401 () ListLongMap!565)

(assert (=> d!4543 (= res!14982 (contains!230 lt!9401 (_1!493 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(declare-fun lt!9399 () List!565)

(assert (=> d!4543 (= lt!9401 (ListLongMap!566 lt!9399))))

(declare-fun lt!9400 () Unit!519)

(declare-fun lt!9402 () Unit!519)

(assert (=> d!4543 (= lt!9400 lt!9402)))

(assert (=> d!4543 (= (getValueByKey!60 lt!9399 (_1!493 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4543 (= lt!9402 (lemmaContainsTupThenGetReturnValue!18 lt!9399 (_1!493 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!493 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4543 (= lt!9399 (insertStrictlySorted!18 (toList!298 lt!8725) (_1!493 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) (_2!493 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))))))

(assert (=> d!4543 (= (+!45 lt!8725 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!9401)))

(declare-fun b!24657 () Bool)

(declare-fun res!14983 () Bool)

(assert (=> b!24657 (=> (not res!14983) (not e!15930))))

(assert (=> b!24657 (= res!14983 (= (getValueByKey!60 (toList!298 lt!9401) (_1!493 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))))

(declare-fun b!24658 () Bool)

(assert (=> b!24658 (= e!15930 (contains!231 (toList!298 lt!9401) (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))))))

(assert (= (and d!4543 res!14982) b!24657))

(assert (= (and b!24657 res!14983) b!24658))

(declare-fun m!19349 () Bool)

(assert (=> d!4543 m!19349))

(declare-fun m!19351 () Bool)

(assert (=> d!4543 m!19351))

(declare-fun m!19353 () Bool)

(assert (=> d!4543 m!19353))

(declare-fun m!19355 () Bool)

(assert (=> d!4543 m!19355))

(declare-fun m!19357 () Bool)

(assert (=> b!24657 m!19357))

(declare-fun m!19359 () Bool)

(assert (=> b!24658 m!19359))

(assert (=> b!23722 d!4543))

(declare-fun d!4545 () Bool)

(declare-fun e!15931 () Bool)

(assert (=> d!4545 e!15931))

(declare-fun res!14984 () Bool)

(assert (=> d!4545 (=> (not res!14984) (not e!15931))))

(declare-fun lt!9405 () ListLongMap!565)

(assert (=> d!4545 (= res!14984 (contains!230 lt!9405 (_1!493 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(declare-fun lt!9403 () List!565)

(assert (=> d!4545 (= lt!9405 (ListLongMap!566 lt!9403))))

(declare-fun lt!9404 () Unit!519)

(declare-fun lt!9406 () Unit!519)

(assert (=> d!4545 (= lt!9404 lt!9406)))

(assert (=> d!4545 (= (getValueByKey!60 lt!9403 (_1!493 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4545 (= lt!9406 (lemmaContainsTupThenGetReturnValue!18 lt!9403 (_1!493 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) (_2!493 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4545 (= lt!9403 (insertStrictlySorted!18 (toList!298 lt!8720) (_1!493 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) (_2!493 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4545 (= (+!45 lt!8720 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!9405)))

(declare-fun b!24659 () Bool)

(declare-fun res!14985 () Bool)

(assert (=> b!24659 (=> (not res!14985) (not e!15931))))

(assert (=> b!24659 (= res!14985 (= (getValueByKey!60 (toList!298 lt!9405) (_1!493 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))))))))

(declare-fun b!24660 () Bool)

(assert (=> b!24660 (= e!15931 (contains!231 (toList!298 lt!9405) (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))))))

(assert (= (and d!4545 res!14984) b!24659))

(assert (= (and b!24659 res!14985) b!24660))

(declare-fun m!19361 () Bool)

(assert (=> d!4545 m!19361))

(declare-fun m!19363 () Bool)

(assert (=> d!4545 m!19363))

(declare-fun m!19365 () Bool)

(assert (=> d!4545 m!19365))

(declare-fun m!19367 () Bool)

(assert (=> d!4545 m!19367))

(declare-fun m!19369 () Bool)

(assert (=> b!24659 m!19369))

(declare-fun m!19371 () Bool)

(assert (=> b!24660 m!19371))

(assert (=> b!23722 d!4545))

(declare-fun d!4547 () Bool)

(assert (=> d!4547 (= (apply!29 (+!45 lt!8725 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8712) (apply!29 lt!8725 lt!8712))))

(declare-fun lt!9407 () Unit!519)

(assert (=> d!4547 (= lt!9407 (choose!211 lt!8725 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8712))))

(declare-fun e!15932 () Bool)

(assert (=> d!4547 e!15932))

(declare-fun res!14986 () Bool)

(assert (=> d!4547 (=> (not res!14986) (not e!15932))))

(assert (=> d!4547 (= res!14986 (contains!230 lt!8725 lt!8712))))

(assert (=> d!4547 (= (addApplyDifferent!14 lt!8725 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8712) lt!9407)))

(declare-fun b!24661 () Bool)

(assert (=> b!24661 (= e!15932 (not (= lt!8712 lt!8723)))))

(assert (= (and d!4547 res!14986) b!24661))

(assert (=> d!4547 m!17439))

(declare-fun m!19373 () Bool)

(assert (=> d!4547 m!19373))

(assert (=> d!4547 m!17443))

(declare-fun m!19375 () Bool)

(assert (=> d!4547 m!19375))

(assert (=> d!4547 m!17443))

(assert (=> d!4547 m!17445))

(assert (=> b!23722 d!4547))

(declare-fun d!4549 () Bool)

(declare-fun e!15934 () Bool)

(assert (=> d!4549 e!15934))

(declare-fun res!14987 () Bool)

(assert (=> d!4549 (=> res!14987 e!15934)))

(declare-fun lt!9411 () Bool)

(assert (=> d!4549 (= res!14987 (not lt!9411))))

(declare-fun lt!9410 () Bool)

(assert (=> d!4549 (= lt!9411 lt!9410)))

(declare-fun lt!9409 () Unit!519)

(declare-fun e!15933 () Unit!519)

(assert (=> d!4549 (= lt!9409 e!15933)))

(declare-fun c!3350 () Bool)

(assert (=> d!4549 (= c!3350 lt!9410)))

(assert (=> d!4549 (= lt!9410 (containsKey!24 (toList!298 (+!45 lt!8722 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8721))))

(assert (=> d!4549 (= (contains!230 (+!45 lt!8722 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8721) lt!9411)))

(declare-fun b!24662 () Bool)

(declare-fun lt!9408 () Unit!519)

(assert (=> b!24662 (= e!15933 lt!9408)))

(assert (=> b!24662 (= lt!9408 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (+!45 lt!8722 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8721))))

(assert (=> b!24662 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8722 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8721))))

(declare-fun b!24663 () Bool)

(declare-fun Unit!587 () Unit!519)

(assert (=> b!24663 (= e!15933 Unit!587)))

(declare-fun b!24664 () Bool)

(assert (=> b!24664 (= e!15934 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8722 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8721)))))

(assert (= (and d!4549 c!3350) b!24662))

(assert (= (and d!4549 (not c!3350)) b!24663))

(assert (= (and d!4549 (not res!14987)) b!24664))

(declare-fun m!19377 () Bool)

(assert (=> d!4549 m!19377))

(declare-fun m!19379 () Bool)

(assert (=> b!24662 m!19379))

(declare-fun m!19381 () Bool)

(assert (=> b!24662 m!19381))

(assert (=> b!24662 m!19381))

(declare-fun m!19383 () Bool)

(assert (=> b!24662 m!19383))

(assert (=> b!24664 m!19381))

(assert (=> b!24664 m!19381))

(assert (=> b!24664 m!19383))

(assert (=> b!23722 d!4549))

(declare-fun d!4551 () Bool)

(assert (=> d!4551 (= (apply!29 lt!8720 lt!8716) (get!391 (getValueByKey!60 (toList!298 lt!8720) lt!8716)))))

(declare-fun bs!1017 () Bool)

(assert (= bs!1017 d!4551))

(declare-fun m!19385 () Bool)

(assert (=> bs!1017 m!19385))

(assert (=> bs!1017 m!19385))

(declare-fun m!19387 () Bool)

(assert (=> bs!1017 m!19387))

(assert (=> b!23722 d!4551))

(declare-fun d!4553 () Bool)

(assert (=> d!4553 (= (apply!29 (+!45 lt!8725 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8712) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8725 (tuple2!971 lt!8723 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) lt!8712)))))

(declare-fun bs!1018 () Bool)

(assert (= bs!1018 d!4553))

(declare-fun m!19389 () Bool)

(assert (=> bs!1018 m!19389))

(assert (=> bs!1018 m!19389))

(declare-fun m!19391 () Bool)

(assert (=> bs!1018 m!19391))

(assert (=> b!23722 d!4553))

(declare-fun d!4555 () Bool)

(assert (=> d!4555 (= (apply!29 (+!45 lt!8728 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8713) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8728 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141))))) lt!8713)))))

(declare-fun bs!1019 () Bool)

(assert (= bs!1019 d!4555))

(declare-fun m!19393 () Bool)

(assert (=> bs!1019 m!19393))

(assert (=> bs!1019 m!19393))

(declare-fun m!19395 () Bool)

(assert (=> bs!1019 m!19395))

(assert (=> b!23722 d!4555))

(declare-fun d!4557 () Bool)

(assert (=> d!4557 (= (apply!29 (+!45 lt!8728 (tuple2!971 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)))) lt!8713) (apply!29 lt!8728 lt!8713))))

(declare-fun lt!9412 () Unit!519)

(assert (=> d!4557 (= lt!9412 (choose!211 lt!8728 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8713))))

(declare-fun e!15935 () Bool)

(assert (=> d!4557 e!15935))

(declare-fun res!14988 () Bool)

(assert (=> d!4557 (=> (not res!14988) (not e!15935))))

(assert (=> d!4557 (= res!14988 (contains!230 lt!8728 lt!8713))))

(assert (=> d!4557 (= (addApplyDifferent!14 lt!8728 lt!8717 (ite c!2967 (ite c!2968 (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (minValue!1665 lt!8141)) lt!8713) lt!9412)))

(declare-fun b!24665 () Bool)

(assert (=> b!24665 (= e!15935 (not (= lt!8713 lt!8717)))))

(assert (= (and d!4557 res!14988) b!24665))

(assert (=> d!4557 m!17459))

(declare-fun m!19397 () Bool)

(assert (=> d!4557 m!19397))

(assert (=> d!4557 m!17449))

(declare-fun m!19399 () Bool)

(assert (=> d!4557 m!19399))

(assert (=> d!4557 m!17449))

(assert (=> d!4557 m!17457))

(assert (=> b!23722 d!4557))

(declare-fun d!4559 () Bool)

(assert (=> d!4559 (= (apply!29 lt!8728 lt!8713) (get!391 (getValueByKey!60 (toList!298 lt!8728) lt!8713)))))

(declare-fun bs!1020 () Bool)

(assert (= bs!1020 d!4559))

(declare-fun m!19401 () Bool)

(assert (=> bs!1020 m!19401))

(assert (=> bs!1020 m!19401))

(declare-fun m!19403 () Bool)

(assert (=> bs!1020 m!19403))

(assert (=> b!23722 d!4559))

(declare-fun d!4561 () Bool)

(assert (=> d!4561 (= (apply!29 (+!45 lt!8720 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!8716) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8720 (tuple2!971 lt!8714 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) lt!8716)))))

(declare-fun bs!1021 () Bool)

(assert (= bs!1021 d!4561))

(declare-fun m!19405 () Bool)

(assert (=> bs!1021 m!19405))

(assert (=> bs!1021 m!19405))

(declare-fun m!19407 () Bool)

(assert (=> bs!1021 m!19407))

(assert (=> b!23722 d!4561))

(declare-fun d!4563 () Bool)

(declare-fun e!15936 () Bool)

(assert (=> d!4563 e!15936))

(declare-fun res!14989 () Bool)

(assert (=> d!4563 (=> (not res!14989) (not e!15936))))

(declare-fun lt!9415 () ListLongMap!565)

(assert (=> d!4563 (= res!14989 (contains!230 lt!9415 (_1!493 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(declare-fun lt!9413 () List!565)

(assert (=> d!4563 (= lt!9415 (ListLongMap!566 lt!9413))))

(declare-fun lt!9414 () Unit!519)

(declare-fun lt!9416 () Unit!519)

(assert (=> d!4563 (= lt!9414 lt!9416)))

(assert (=> d!4563 (= (getValueByKey!60 lt!9413 (_1!493 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4563 (= lt!9416 (lemmaContainsTupThenGetReturnValue!18 lt!9413 (_1!493 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) (_2!493 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4563 (= lt!9413 (insertStrictlySorted!18 (toList!298 lt!8722) (_1!493 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) (_2!493 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))))))

(assert (=> d!4563 (= (+!45 lt!8722 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))) lt!9415)))

(declare-fun b!24666 () Bool)

(declare-fun res!14990 () Bool)

(assert (=> b!24666 (=> (not res!14990) (not e!15936))))

(assert (=> b!24666 (= res!14990 (= (getValueByKey!60 (toList!298 lt!9415) (_1!493 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141))))) (Some!65 (_2!493 (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))))))))

(declare-fun b!24667 () Bool)

(assert (=> b!24667 (= e!15936 (contains!231 (toList!298 lt!9415) (tuple2!971 lt!8707 (ite (and c!2967 c!2968) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (zeroValue!1665 lt!8141)))))))

(assert (= (and d!4563 res!14989) b!24666))

(assert (= (and b!24666 res!14990) b!24667))

(declare-fun m!19409 () Bool)

(assert (=> d!4563 m!19409))

(declare-fun m!19411 () Bool)

(assert (=> d!4563 m!19411))

(declare-fun m!19413 () Bool)

(assert (=> d!4563 m!19413))

(declare-fun m!19415 () Bool)

(assert (=> d!4563 m!19415))

(declare-fun m!19417 () Bool)

(assert (=> b!24666 m!19417))

(declare-fun m!19419 () Bool)

(assert (=> b!24667 m!19419))

(assert (=> b!23722 d!4563))

(declare-fun b!24668 () Bool)

(declare-fun e!15937 () Option!66)

(assert (=> b!24668 (= e!15937 (Some!65 (_2!493 (h!1127 (toList!298 lt!8587)))))))

(declare-fun b!24671 () Bool)

(declare-fun e!15938 () Option!66)

(assert (=> b!24671 (= e!15938 None!64)))

(declare-fun b!24670 () Bool)

(assert (=> b!24670 (= e!15938 (getValueByKey!60 (t!3229 (toList!298 lt!8587)) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24669 () Bool)

(assert (=> b!24669 (= e!15937 e!15938)))

(declare-fun c!3352 () Bool)

(assert (=> b!24669 (= c!3352 (and ((_ is Cons!561) (toList!298 lt!8587)) (not (= (_1!493 (h!1127 (toList!298 lt!8587))) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))))

(declare-fun d!4565 () Bool)

(declare-fun c!3351 () Bool)

(assert (=> d!4565 (= c!3351 (and ((_ is Cons!561) (toList!298 lt!8587)) (= (_1!493 (h!1127 (toList!298 lt!8587))) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(assert (=> d!4565 (= (getValueByKey!60 (toList!298 lt!8587) (_1!493 (ite c!2989 (ite c!2990 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) e!15937)))

(assert (= (and d!4565 c!3351) b!24668))

(assert (= (and d!4565 (not c!3351)) b!24669))

(assert (= (and b!24669 c!3352) b!24670))

(assert (= (and b!24669 (not c!3352)) b!24671))

(declare-fun m!19421 () Bool)

(assert (=> b!24670 m!19421))

(assert (=> b!23559 d!4565))

(declare-fun d!4567 () Bool)

(assert (=> d!4567 (= (apply!29 lt!8744 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!391 (getValueByKey!60 (toList!298 lt!8744) (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))))

(declare-fun bs!1022 () Bool)

(assert (= bs!1022 d!4567))

(assert (=> bs!1022 m!17198))

(assert (=> bs!1022 m!18361))

(assert (=> bs!1022 m!18361))

(declare-fun m!19423 () Bool)

(assert (=> bs!1022 m!19423))

(assert (=> b!23745 d!4567))

(declare-fun d!4569 () Bool)

(declare-fun c!3353 () Bool)

(assert (=> d!4569 (= c!3353 ((_ is ValueCellFull!311) (select (arr!596 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000)))))

(declare-fun e!15939 () V!1187)

(assert (=> d!4569 (= (get!390 (select (arr!596 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)) e!15939)))

(declare-fun b!24672 () Bool)

(assert (=> b!24672 (= e!15939 (get!392 (select (arr!596 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24673 () Bool)

(assert (=> b!24673 (= e!15939 (get!393 (select (arr!596 (ite (or c!2967 c!2973) (_values!1728 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4569 c!3353) b!24672))

(assert (= (and d!4569 (not c!3353)) b!24673))

(assert (=> b!24672 m!17501))

(assert (=> b!24672 m!17304))

(declare-fun m!19425 () Bool)

(assert (=> b!24672 m!19425))

(assert (=> b!24673 m!17501))

(assert (=> b!24673 m!17304))

(declare-fun m!19427 () Bool)

(assert (=> b!24673 m!19427))

(assert (=> b!23745 d!4569))

(assert (=> bm!1960 d!4051))

(declare-fun d!4571 () Bool)

(declare-fun e!15941 () Bool)

(assert (=> d!4571 e!15941))

(declare-fun res!14991 () Bool)

(assert (=> d!4571 (=> res!14991 e!15941)))

(declare-fun lt!9420 () Bool)

(assert (=> d!4571 (= res!14991 (not lt!9420))))

(declare-fun lt!9419 () Bool)

(assert (=> d!4571 (= lt!9420 lt!9419)))

(declare-fun lt!9418 () Unit!519)

(declare-fun e!15940 () Unit!519)

(assert (=> d!4571 (= lt!9418 e!15940)))

(declare-fun c!3354 () Bool)

(assert (=> d!4571 (= c!3354 lt!9419)))

(assert (=> d!4571 (= lt!9419 (containsKey!24 (toList!298 (map!408 (_2!487 lt!8557))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4571 (= (contains!230 (map!408 (_2!487 lt!8557)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) lt!9420)))

(declare-fun b!24674 () Bool)

(declare-fun lt!9417 () Unit!519)

(assert (=> b!24674 (= e!15940 lt!9417)))

(assert (=> b!24674 (= lt!9417 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (map!408 (_2!487 lt!8557))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24674 (isDefined!22 (getValueByKey!60 (toList!298 (map!408 (_2!487 lt!8557))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24675 () Bool)

(declare-fun Unit!588 () Unit!519)

(assert (=> b!24675 (= e!15940 Unit!588)))

(declare-fun b!24676 () Bool)

(assert (=> b!24676 (= e!15941 (isDefined!22 (getValueByKey!60 (toList!298 (map!408 (_2!487 lt!8557))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!4571 c!3354) b!24674))

(assert (= (and d!4571 (not c!3354)) b!24675))

(assert (= (and d!4571 (not res!14991)) b!24676))

(declare-fun m!19429 () Bool)

(assert (=> d!4571 m!19429))

(declare-fun m!19431 () Bool)

(assert (=> b!24674 m!19431))

(declare-fun m!19433 () Bool)

(assert (=> b!24674 m!19433))

(assert (=> b!24674 m!19433))

(declare-fun m!19435 () Bool)

(assert (=> b!24674 m!19435))

(assert (=> b!24676 m!19433))

(assert (=> b!24676 m!19433))

(assert (=> b!24676 m!19435))

(assert (=> b!23542 d!4571))

(declare-fun d!4573 () Bool)

(assert (=> d!4573 (= (map!408 (_2!487 lt!8557)) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8557)) (_values!1728 (_2!487 lt!8557)) (mask!4729 (_2!487 lt!8557)) (extraKeys!1640 (_2!487 lt!8557)) (zeroValue!1665 (_2!487 lt!8557)) (minValue!1665 (_2!487 lt!8557)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8557))))))

(declare-fun bs!1023 () Bool)

(assert (= bs!1023 d!4573))

(declare-fun m!19437 () Bool)

(assert (=> bs!1023 m!19437))

(assert (=> b!23542 d!4573))

(declare-fun d!4575 () Bool)

(declare-fun res!14992 () Bool)

(declare-fun e!15942 () Bool)

(assert (=> d!4575 (=> res!14992 e!15942)))

(assert (=> d!4575 (= res!14992 (and ((_ is Cons!561) (toList!298 call!1934)) (= (_1!493 (h!1127 (toList!298 call!1934))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!4575 (= (containsKey!24 (toList!298 call!1934) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) e!15942)))

(declare-fun b!24677 () Bool)

(declare-fun e!15943 () Bool)

(assert (=> b!24677 (= e!15942 e!15943)))

(declare-fun res!14993 () Bool)

(assert (=> b!24677 (=> (not res!14993) (not e!15943))))

(assert (=> b!24677 (= res!14993 (and (or (not ((_ is Cons!561) (toList!298 call!1934))) (bvsle (_1!493 (h!1127 (toList!298 call!1934))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))) ((_ is Cons!561) (toList!298 call!1934)) (bvslt (_1!493 (h!1127 (toList!298 call!1934))) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24678 () Bool)

(assert (=> b!24678 (= e!15943 (containsKey!24 (t!3229 (toList!298 call!1934)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4575 (not res!14992)) b!24677))

(assert (= (and b!24677 res!14993) b!24678))

(declare-fun m!19439 () Bool)

(assert (=> b!24678 m!19439))

(assert (=> d!4065 d!4575))

(declare-fun b!24679 () Bool)

(declare-fun e!15944 () Bool)

(declare-fun call!2167 () Bool)

(assert (=> b!24679 (= e!15944 call!2167)))

(declare-fun b!24680 () Bool)

(declare-fun e!15947 () Bool)

(assert (=> b!24680 (= e!15947 e!15944)))

(declare-fun c!3355 () Bool)

(assert (=> b!24680 (= c!3355 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)))))

(declare-fun d!4577 () Bool)

(declare-fun res!14994 () Bool)

(declare-fun e!15945 () Bool)

(assert (=> d!4577 (=> res!14994 e!15945)))

(assert (=> d!4577 (= res!14994 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))))))

(assert (=> d!4577 (= (arrayNoDuplicates!0 (_keys!3163 lt!8306) #b00000000000000000000000000000000 Nil!563) e!15945)))

(declare-fun bm!2164 () Bool)

(assert (=> bm!2164 (= call!2167 (arrayNoDuplicates!0 (_keys!3163 lt!8306) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3355 (Cons!562 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000) Nil!563) Nil!563)))))

(declare-fun b!24681 () Bool)

(assert (=> b!24681 (= e!15944 call!2167)))

(declare-fun b!24682 () Bool)

(assert (=> b!24682 (= e!15945 e!15947)))

(declare-fun res!14996 () Bool)

(assert (=> b!24682 (=> (not res!14996) (not e!15947))))

(declare-fun e!15946 () Bool)

(assert (=> b!24682 (= res!14996 (not e!15946))))

(declare-fun res!14995 () Bool)

(assert (=> b!24682 (=> (not res!14995) (not e!15946))))

(assert (=> b!24682 (= res!14995 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)))))

(declare-fun b!24683 () Bool)

(assert (=> b!24683 (= e!15946 (contains!232 Nil!563 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)))))

(assert (= (and d!4577 (not res!14994)) b!24682))

(assert (= (and b!24682 res!14995) b!24683))

(assert (= (and b!24682 res!14996) b!24680))

(assert (= (and b!24680 c!3355) b!24681))

(assert (= (and b!24680 (not c!3355)) b!24679))

(assert (= (or b!24681 b!24679) bm!2164))

(assert (=> b!24680 m!17663))

(assert (=> b!24680 m!17663))

(assert (=> b!24680 m!17665))

(assert (=> bm!2164 m!17663))

(declare-fun m!19441 () Bool)

(assert (=> bm!2164 m!19441))

(assert (=> b!24682 m!17663))

(assert (=> b!24682 m!17663))

(assert (=> b!24682 m!17665))

(assert (=> b!24683 m!17663))

(assert (=> b!24683 m!17663))

(declare-fun m!19443 () Bool)

(assert (=> b!24683 m!19443))

(assert (=> b!23577 d!4577))

(declare-fun d!4579 () Bool)

(declare-fun e!15948 () Bool)

(assert (=> d!4579 e!15948))

(declare-fun res!14997 () Bool)

(assert (=> d!4579 (=> (not res!14997) (not e!15948))))

(declare-fun lt!9423 () ListLongMap!565)

(assert (=> d!4579 (= res!14997 (contains!230 lt!9423 (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun lt!9421 () List!565)

(assert (=> d!4579 (= lt!9423 (ListLongMap!566 lt!9421))))

(declare-fun lt!9422 () Unit!519)

(declare-fun lt!9424 () Unit!519)

(assert (=> d!4579 (= lt!9422 lt!9424)))

(assert (=> d!4579 (= (getValueByKey!60 lt!9421 (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (Some!65 (_2!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4579 (= lt!9424 (lemmaContainsTupThenGetReturnValue!18 lt!9421 (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4579 (= lt!9421 (insertStrictlySorted!18 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4579 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!9423)))

(declare-fun b!24684 () Bool)

(declare-fun res!14998 () Bool)

(assert (=> b!24684 (=> (not res!14998) (not e!15948))))

(assert (=> b!24684 (= res!14998 (= (getValueByKey!60 (toList!298 lt!9423) (_1!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (Some!65 (_2!493 (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24685 () Bool)

(assert (=> b!24685 (= e!15948 (contains!231 (toList!298 lt!9423) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(assert (= (and d!4579 res!14997) b!24684))

(assert (= (and b!24684 res!14998) b!24685))

(declare-fun m!19445 () Bool)

(assert (=> d!4579 m!19445))

(declare-fun m!19447 () Bool)

(assert (=> d!4579 m!19447))

(declare-fun m!19449 () Bool)

(assert (=> d!4579 m!19449))

(declare-fun m!19451 () Bool)

(assert (=> d!4579 m!19451))

(declare-fun m!19453 () Bool)

(assert (=> b!24684 m!19453))

(declare-fun m!19455 () Bool)

(assert (=> b!24685 m!19455))

(assert (=> d!4029 d!4579))

(declare-fun d!4581 () Bool)

(assert (=> d!4581 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8340 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4581 true))

(declare-fun _$7!38 () Unit!519)

(assert (=> d!4581 (= (choose!206 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) lt!8340 (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) (defaultEntry!1742 (_2!487 lt!8138))) _$7!38)))

(declare-fun bs!1024 () Bool)

(assert (= bs!1024 d!4581))

(assert (=> bs!1024 m!17036))

(assert (=> bs!1024 m!17036))

(assert (=> bs!1024 m!17270))

(assert (=> bs!1024 m!17272))

(assert (=> d!4029 d!4581))

(assert (=> d!4029 d!4119))

(declare-fun b!24686 () Bool)

(declare-fun e!15957 () ListLongMap!565)

(declare-fun call!2170 () ListLongMap!565)

(assert (=> b!24686 (= e!15957 call!2170)))

(declare-fun bm!2165 () Bool)

(declare-fun call!2171 () ListLongMap!565)

(declare-fun call!2173 () ListLongMap!565)

(assert (=> bm!2165 (= call!2171 call!2173)))

(declare-fun b!24687 () Bool)

(declare-fun e!15953 () Bool)

(declare-fun e!15961 () Bool)

(assert (=> b!24687 (= e!15953 e!15961)))

(declare-fun c!3357 () Bool)

(assert (=> b!24687 (= c!3357 (not (= (bvand lt!8340 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24688 () Bool)

(declare-fun e!15952 () Bool)

(declare-fun lt!9429 () ListLongMap!565)

(assert (=> b!24688 (= e!15952 (= (apply!29 lt!9429 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24688 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!487 lt!8138)))))))

(assert (=> b!24688 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun call!2172 () ListLongMap!565)

(declare-fun call!2169 () ListLongMap!565)

(declare-fun c!3358 () Bool)

(declare-fun c!3359 () Bool)

(declare-fun bm!2166 () Bool)

(assert (=> bm!2166 (= call!2173 (+!45 (ite c!3358 call!2172 (ite c!3359 call!2169 call!2170)) (ite (or c!3358 c!3359) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun b!24689 () Bool)

(declare-fun res!15004 () Bool)

(assert (=> b!24689 (=> (not res!15004) (not e!15953))))

(declare-fun e!15958 () Bool)

(assert (=> b!24689 (= res!15004 e!15958)))

(declare-fun c!3356 () Bool)

(assert (=> b!24689 (= c!3356 (not (= (bvand lt!8340 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2167 () Bool)

(declare-fun call!2168 () Bool)

(assert (=> bm!2167 (= call!2168 (contains!230 lt!9429 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24690 () Bool)

(declare-fun e!15950 () Bool)

(assert (=> b!24690 (= e!15961 e!15950)))

(declare-fun res!15002 () Bool)

(declare-fun call!2174 () Bool)

(assert (=> b!24690 (= res!15002 call!2174)))

(assert (=> b!24690 (=> (not res!15002) (not e!15950))))

(declare-fun b!24691 () Bool)

(declare-fun e!15956 () Unit!519)

(declare-fun Unit!589 () Unit!519)

(assert (=> b!24691 (= e!15956 Unit!589)))

(declare-fun b!24692 () Bool)

(assert (=> b!24692 (= e!15961 (not call!2174))))

(declare-fun b!24693 () Bool)

(declare-fun e!15959 () Bool)

(assert (=> b!24693 (= e!15959 (= (apply!29 lt!9429 #b0000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))

(declare-fun bm!2168 () Bool)

(assert (=> bm!2168 (= call!2174 (contains!230 lt!9429 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24694 () Bool)

(assert (=> b!24694 (= e!15958 (not call!2168))))

(declare-fun d!4583 () Bool)

(assert (=> d!4583 e!15953))

(declare-fun res!15001 () Bool)

(assert (=> d!4583 (=> (not res!15001) (not e!15953))))

(assert (=> d!4583 (= res!15001 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun lt!9444 () ListLongMap!565)

(assert (=> d!4583 (= lt!9429 lt!9444)))

(declare-fun lt!9436 () Unit!519)

(assert (=> d!4583 (= lt!9436 e!15956)))

(declare-fun c!3360 () Bool)

(declare-fun e!15960 () Bool)

(assert (=> d!4583 (= c!3360 e!15960)))

(declare-fun res!15005 () Bool)

(assert (=> d!4583 (=> (not res!15005) (not e!15960))))

(assert (=> d!4583 (= res!15005 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun e!15954 () ListLongMap!565)

(assert (=> d!4583 (= lt!9444 e!15954)))

(assert (=> d!4583 (= c!3358 (and (not (= (bvand lt!8340 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8340 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4583 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4583 (= (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8340 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!9429)))

(declare-fun b!24695 () Bool)

(assert (=> b!24695 (= e!15950 (= (apply!29 lt!9429 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!487 lt!8138))))))

(declare-fun b!24696 () Bool)

(assert (=> b!24696 (= e!15954 (+!45 call!2173 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))

(declare-fun b!24697 () Bool)

(declare-fun e!15955 () Bool)

(assert (=> b!24697 (= e!15955 e!15952)))

(declare-fun res!15006 () Bool)

(assert (=> b!24697 (=> (not res!15006) (not e!15952))))

(assert (=> b!24697 (= res!15006 (contains!230 lt!9429 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!24697 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!24698 () Bool)

(declare-fun res!15003 () Bool)

(assert (=> b!24698 (=> (not res!15003) (not e!15953))))

(assert (=> b!24698 (= res!15003 e!15955)))

(declare-fun res!15007 () Bool)

(assert (=> b!24698 (=> res!15007 e!15955)))

(declare-fun e!15951 () Bool)

(assert (=> b!24698 (= res!15007 (not e!15951))))

(declare-fun res!15000 () Bool)

(assert (=> b!24698 (=> (not res!15000) (not e!15951))))

(assert (=> b!24698 (= res!15000 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!24699 () Bool)

(assert (=> b!24699 (= e!15957 call!2171)))

(declare-fun b!24700 () Bool)

(declare-fun lt!9426 () Unit!519)

(assert (=> b!24700 (= e!15956 lt!9426)))

(declare-fun lt!9440 () ListLongMap!565)

(assert (=> b!24700 (= lt!9440 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8340 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9425 () (_ BitVec 64))

(assert (=> b!24700 (= lt!9425 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9439 () (_ BitVec 64))

(assert (=> b!24700 (= lt!9439 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!9445 () Unit!519)

(assert (=> b!24700 (= lt!9445 (addStillContains!14 lt!9440 lt!9425 (minValue!1665 (v!1601 (underlying!115 thiss!938))) lt!9439))))

(assert (=> b!24700 (contains!230 (+!45 lt!9440 (tuple2!971 lt!9425 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!9439)))

(declare-fun lt!9442 () Unit!519)

(assert (=> b!24700 (= lt!9442 lt!9445)))

(declare-fun lt!9446 () ListLongMap!565)

(assert (=> b!24700 (= lt!9446 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8340 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9435 () (_ BitVec 64))

(assert (=> b!24700 (= lt!9435 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9431 () (_ BitVec 64))

(assert (=> b!24700 (= lt!9431 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!9437 () Unit!519)

(assert (=> b!24700 (= lt!9437 (addApplyDifferent!14 lt!9446 lt!9435 (minValue!1665 (_2!487 lt!8138)) lt!9431))))

(assert (=> b!24700 (= (apply!29 (+!45 lt!9446 (tuple2!971 lt!9435 (minValue!1665 (_2!487 lt!8138)))) lt!9431) (apply!29 lt!9446 lt!9431))))

(declare-fun lt!9427 () Unit!519)

(assert (=> b!24700 (= lt!9427 lt!9437)))

(declare-fun lt!9438 () ListLongMap!565)

(assert (=> b!24700 (= lt!9438 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8340 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9432 () (_ BitVec 64))

(assert (=> b!24700 (= lt!9432 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9434 () (_ BitVec 64))

(assert (=> b!24700 (= lt!9434 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!9433 () Unit!519)

(assert (=> b!24700 (= lt!9433 (addApplyDifferent!14 lt!9438 lt!9432 (minValue!1665 (v!1601 (underlying!115 thiss!938))) lt!9434))))

(assert (=> b!24700 (= (apply!29 (+!45 lt!9438 (tuple2!971 lt!9432 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!9434) (apply!29 lt!9438 lt!9434))))

(declare-fun lt!9428 () Unit!519)

(assert (=> b!24700 (= lt!9428 lt!9433)))

(declare-fun lt!9443 () ListLongMap!565)

(assert (=> b!24700 (= lt!9443 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8340 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9441 () (_ BitVec 64))

(assert (=> b!24700 (= lt!9441 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9430 () (_ BitVec 64))

(assert (=> b!24700 (= lt!9430 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(assert (=> b!24700 (= lt!9426 (addApplyDifferent!14 lt!9443 lt!9441 (minValue!1665 (_2!487 lt!8138)) lt!9430))))

(assert (=> b!24700 (= (apply!29 (+!45 lt!9443 (tuple2!971 lt!9441 (minValue!1665 (_2!487 lt!8138)))) lt!9430) (apply!29 lt!9443 lt!9430))))

(declare-fun b!24701 () Bool)

(declare-fun e!15949 () ListLongMap!565)

(assert (=> b!24701 (= e!15949 call!2171)))

(declare-fun b!24702 () Bool)

(assert (=> b!24702 (= e!15954 e!15949)))

(assert (=> b!24702 (= c!3359 (and (not (= (bvand lt!8340 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!8340 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24703 () Bool)

(declare-fun c!3361 () Bool)

(assert (=> b!24703 (= c!3361 (and (not (= (bvand lt!8340 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!8340 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24703 (= e!15949 e!15957)))

(declare-fun bm!2169 () Bool)

(assert (=> bm!2169 (= call!2170 call!2169)))

(declare-fun bm!2170 () Bool)

(assert (=> bm!2170 (= call!2169 call!2172)))

(declare-fun b!24704 () Bool)

(assert (=> b!24704 (= e!15958 e!15959)))

(declare-fun res!14999 () Bool)

(assert (=> b!24704 (= res!14999 call!2168)))

(assert (=> b!24704 (=> (not res!14999) (not e!15959))))

(declare-fun b!24705 () Bool)

(assert (=> b!24705 (= e!15960 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun bm!2171 () Bool)

(assert (=> bm!2171 (= call!2172 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) lt!8340 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!24706 () Bool)

(assert (=> b!24706 (= e!15951 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (= (and d!4583 c!3358) b!24696))

(assert (= (and d!4583 (not c!3358)) b!24702))

(assert (= (and b!24702 c!3359) b!24701))

(assert (= (and b!24702 (not c!3359)) b!24703))

(assert (= (and b!24703 c!3361) b!24699))

(assert (= (and b!24703 (not c!3361)) b!24686))

(assert (= (or b!24699 b!24686) bm!2169))

(assert (= (or b!24701 bm!2169) bm!2170))

(assert (= (or b!24701 b!24699) bm!2165))

(assert (= (or b!24696 bm!2170) bm!2171))

(assert (= (or b!24696 bm!2165) bm!2166))

(assert (= (and d!4583 res!15005) b!24705))

(assert (= (and d!4583 c!3360) b!24700))

(assert (= (and d!4583 (not c!3360)) b!24691))

(assert (= (and d!4583 res!15001) b!24698))

(assert (= (and b!24698 res!15000) b!24706))

(assert (= (and b!24698 (not res!15007)) b!24697))

(assert (= (and b!24697 res!15006) b!24688))

(assert (= (and b!24698 res!15003) b!24689))

(assert (= (and b!24689 c!3356) b!24704))

(assert (= (and b!24689 (not c!3356)) b!24694))

(assert (= (and b!24704 res!14999) b!24693))

(assert (= (or b!24704 b!24694) bm!2167))

(assert (= (and b!24689 res!15004) b!24687))

(assert (= (and b!24687 c!3357) b!24690))

(assert (= (and b!24687 (not c!3357)) b!24692))

(assert (= (and b!24690 res!15002) b!24695))

(assert (= (or b!24690 b!24692) bm!2168))

(declare-fun b_lambda!1623 () Bool)

(assert (=> (not b_lambda!1623) (not b!24688)))

(assert (=> b!24688 t!3232))

(declare-fun b_and!1535 () Bool)

(assert (= b_and!1533 (and (=> t!3232 result!1093) b_and!1535)))

(assert (=> b!24697 m!16908))

(assert (=> b!24697 m!16908))

(declare-fun m!19457 () Bool)

(assert (=> b!24697 m!19457))

(declare-fun m!19459 () Bool)

(assert (=> b!24696 m!19459))

(assert (=> b!24688 m!16914))

(assert (=> b!24688 m!16916))

(assert (=> b!24688 m!16918))

(assert (=> b!24688 m!16908))

(declare-fun m!19461 () Bool)

(assert (=> b!24688 m!19461))

(assert (=> b!24688 m!16908))

(assert (=> b!24688 m!16914))

(assert (=> b!24688 m!16916))

(assert (=> b!24705 m!16908))

(assert (=> b!24705 m!16908))

(assert (=> b!24705 m!16922))

(declare-fun m!19463 () Bool)

(assert (=> bm!2166 m!19463))

(assert (=> b!24706 m!16908))

(assert (=> b!24706 m!16908))

(assert (=> b!24706 m!16922))

(declare-fun m!19465 () Bool)

(assert (=> bm!2167 m!19465))

(declare-fun m!19467 () Bool)

(assert (=> b!24695 m!19467))

(declare-fun m!19469 () Bool)

(assert (=> bm!2168 m!19469))

(declare-fun m!19471 () Bool)

(assert (=> b!24693 m!19471))

(declare-fun m!19473 () Bool)

(assert (=> bm!2171 m!19473))

(assert (=> d!4583 m!16878))

(declare-fun m!19475 () Bool)

(assert (=> b!24700 m!19475))

(declare-fun m!19477 () Bool)

(assert (=> b!24700 m!19477))

(declare-fun m!19479 () Bool)

(assert (=> b!24700 m!19479))

(declare-fun m!19481 () Bool)

(assert (=> b!24700 m!19481))

(declare-fun m!19483 () Bool)

(assert (=> b!24700 m!19483))

(assert (=> b!24700 m!19473))

(assert (=> b!24700 m!19477))

(assert (=> b!24700 m!16908))

(declare-fun m!19485 () Bool)

(assert (=> b!24700 m!19485))

(declare-fun m!19487 () Bool)

(assert (=> b!24700 m!19487))

(declare-fun m!19489 () Bool)

(assert (=> b!24700 m!19489))

(assert (=> b!24700 m!19487))

(declare-fun m!19491 () Bool)

(assert (=> b!24700 m!19491))

(declare-fun m!19493 () Bool)

(assert (=> b!24700 m!19493))

(declare-fun m!19495 () Bool)

(assert (=> b!24700 m!19495))

(declare-fun m!19497 () Bool)

(assert (=> b!24700 m!19497))

(assert (=> b!24700 m!19497))

(declare-fun m!19499 () Bool)

(assert (=> b!24700 m!19499))

(assert (=> b!24700 m!19493))

(declare-fun m!19501 () Bool)

(assert (=> b!24700 m!19501))

(declare-fun m!19503 () Bool)

(assert (=> b!24700 m!19503))

(assert (=> d!4029 d!4583))

(assert (=> d!4029 d!4291))

(declare-fun d!4585 () Bool)

(declare-fun res!15008 () Bool)

(declare-fun e!15962 () Bool)

(assert (=> d!4585 (=> (not res!15008) (not e!15962))))

(assert (=> d!4585 (= res!15008 (simpleValid!20 (_2!487 lt!8557)))))

(assert (=> d!4585 (= (valid!116 (_2!487 lt!8557)) e!15962)))

(declare-fun b!24707 () Bool)

(declare-fun res!15009 () Bool)

(assert (=> b!24707 (=> (not res!15009) (not e!15962))))

(assert (=> b!24707 (= res!15009 (= (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8557)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8557)))) (_size!149 (_2!487 lt!8557))))))

(declare-fun b!24708 () Bool)

(declare-fun res!15010 () Bool)

(assert (=> b!24708 (=> (not res!15010) (not e!15962))))

(assert (=> b!24708 (= res!15010 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!487 lt!8557)) (mask!4729 (_2!487 lt!8557))))))

(declare-fun b!24709 () Bool)

(assert (=> b!24709 (= e!15962 (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8557)) #b00000000000000000000000000000000 Nil!563))))

(assert (= (and d!4585 res!15008) b!24707))

(assert (= (and b!24707 res!15009) b!24708))

(assert (= (and b!24708 res!15010) b!24709))

(declare-fun m!19505 () Bool)

(assert (=> d!4585 m!19505))

(declare-fun m!19507 () Bool)

(assert (=> b!24707 m!19507))

(declare-fun m!19509 () Bool)

(assert (=> b!24708 m!19509))

(declare-fun m!19511 () Bool)

(assert (=> b!24709 m!19511))

(assert (=> b!23549 d!4585))

(declare-fun b!24710 () Bool)

(declare-fun e!15963 () Bool)

(declare-fun call!2175 () Bool)

(assert (=> b!24710 (= e!15963 call!2175)))

(declare-fun b!24711 () Bool)

(declare-fun e!15966 () Bool)

(assert (=> b!24711 (= e!15966 e!15963)))

(declare-fun c!3362 () Bool)

(assert (=> b!24711 (= c!3362 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)))))

(declare-fun d!4587 () Bool)

(declare-fun res!15011 () Bool)

(declare-fun e!15964 () Bool)

(assert (=> d!4587 (=> res!15011 e!15964)))

(assert (=> d!4587 (= res!15011 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))))))

(assert (=> d!4587 (= (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8336)) #b00000000000000000000000000000000 Nil!563) e!15964)))

(declare-fun bm!2172 () Bool)

(assert (=> bm!2172 (= call!2175 (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8336)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3362 (Cons!562 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000) Nil!563) Nil!563)))))

(declare-fun b!24712 () Bool)

(assert (=> b!24712 (= e!15963 call!2175)))

(declare-fun b!24713 () Bool)

(assert (=> b!24713 (= e!15964 e!15966)))

(declare-fun res!15013 () Bool)

(assert (=> b!24713 (=> (not res!15013) (not e!15966))))

(declare-fun e!15965 () Bool)

(assert (=> b!24713 (= res!15013 (not e!15965))))

(declare-fun res!15012 () Bool)

(assert (=> b!24713 (=> (not res!15012) (not e!15965))))

(assert (=> b!24713 (= res!15012 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)))))

(declare-fun b!24714 () Bool)

(assert (=> b!24714 (= e!15965 (contains!232 Nil!563 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)))))

(assert (= (and d!4587 (not res!15011)) b!24713))

(assert (= (and b!24713 res!15012) b!24714))

(assert (= (and b!24713 res!15013) b!24711))

(assert (= (and b!24711 c!3362) b!24712))

(assert (= (and b!24711 (not c!3362)) b!24710))

(assert (= (or b!24712 b!24710) bm!2172))

(assert (=> b!24711 m!17677))

(assert (=> b!24711 m!17677))

(assert (=> b!24711 m!17679))

(assert (=> bm!2172 m!17677))

(declare-fun m!19513 () Bool)

(assert (=> bm!2172 m!19513))

(assert (=> b!24713 m!17677))

(assert (=> b!24713 m!17677))

(assert (=> b!24713 m!17679))

(assert (=> b!24714 m!17677))

(assert (=> b!24714 m!17677))

(declare-fun m!19515 () Bool)

(assert (=> b!24714 m!19515))

(assert (=> b!23704 d!4587))

(declare-fun d!4589 () Bool)

(declare-fun e!15968 () Bool)

(assert (=> d!4589 e!15968))

(declare-fun res!15014 () Bool)

(assert (=> d!4589 (=> res!15014 e!15968)))

(declare-fun lt!9450 () Bool)

(assert (=> d!4589 (= res!15014 (not lt!9450))))

(declare-fun lt!9449 () Bool)

(assert (=> d!4589 (= lt!9450 lt!9449)))

(declare-fun lt!9448 () Unit!519)

(declare-fun e!15967 () Unit!519)

(assert (=> d!4589 (= lt!9448 e!15967)))

(declare-fun c!3363 () Bool)

(assert (=> d!4589 (= c!3363 lt!9449)))

(assert (=> d!4589 (= lt!9449 (containsKey!24 (toList!298 lt!8770) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> d!4589 (= (contains!230 lt!8770 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) lt!9450)))

(declare-fun b!24715 () Bool)

(declare-fun lt!9447 () Unit!519)

(assert (=> b!24715 (= e!15967 lt!9447)))

(assert (=> b!24715 (= lt!9447 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8770) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!24715 (isDefined!22 (getValueByKey!60 (toList!298 lt!8770) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun b!24716 () Bool)

(declare-fun Unit!590 () Unit!519)

(assert (=> b!24716 (= e!15967 Unit!590)))

(declare-fun b!24717 () Bool)

(assert (=> b!24717 (= e!15968 (isDefined!22 (getValueByKey!60 (toList!298 lt!8770) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))))

(assert (= (and d!4589 c!3363) b!24715))

(assert (= (and d!4589 (not c!3363)) b!24716))

(assert (= (and d!4589 (not res!15014)) b!24717))

(assert (=> d!4589 m!16908))

(declare-fun m!19517 () Bool)

(assert (=> d!4589 m!19517))

(assert (=> b!24715 m!16908))

(declare-fun m!19519 () Bool)

(assert (=> b!24715 m!19519))

(assert (=> b!24715 m!16908))

(assert (=> b!24715 m!18141))

(assert (=> b!24715 m!18141))

(declare-fun m!19521 () Bool)

(assert (=> b!24715 m!19521))

(assert (=> b!24717 m!16908))

(assert (=> b!24717 m!18141))

(assert (=> b!24717 m!18141))

(assert (=> b!24717 m!19521))

(assert (=> b!23778 d!4589))

(declare-fun d!4591 () Bool)

(declare-fun res!15015 () Bool)

(declare-fun e!15969 () Bool)

(assert (=> d!4591 (=> res!15015 e!15969)))

(assert (=> d!4591 (= res!15015 (and ((_ is Cons!561) (toList!298 e!15144)) (= (_1!493 (h!1127 (toList!298 e!15144))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!4591 (= (containsKey!24 (toList!298 e!15144) #b1000000000000000000000000000000000000000000000000000000000000000) e!15969)))

(declare-fun b!24718 () Bool)

(declare-fun e!15970 () Bool)

(assert (=> b!24718 (= e!15969 e!15970)))

(declare-fun res!15016 () Bool)

(assert (=> b!24718 (=> (not res!15016) (not e!15970))))

(assert (=> b!24718 (= res!15016 (and (or (not ((_ is Cons!561) (toList!298 e!15144))) (bvsle (_1!493 (h!1127 (toList!298 e!15144))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!561) (toList!298 e!15144)) (bvslt (_1!493 (h!1127 (toList!298 e!15144))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24719 () Bool)

(assert (=> b!24719 (= e!15970 (containsKey!24 (t!3229 (toList!298 e!15144)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!4591 (not res!15015)) b!24718))

(assert (= (and b!24718 res!15016) b!24719))

(declare-fun m!19523 () Bool)

(assert (=> b!24719 m!19523))

(assert (=> d!3975 d!4591))

(declare-fun d!4593 () Bool)

(declare-fun res!15017 () Bool)

(declare-fun e!15971 () Bool)

(assert (=> d!4593 (=> (not res!15017) (not e!15971))))

(assert (=> d!4593 (= res!15017 (simpleValid!20 (_2!487 lt!8619)))))

(assert (=> d!4593 (= (valid!116 (_2!487 lt!8619)) e!15971)))

(declare-fun b!24720 () Bool)

(declare-fun res!15018 () Bool)

(assert (=> b!24720 (=> (not res!15018) (not e!15971))))

(assert (=> b!24720 (= res!15018 (= (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8619)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8619)))) (_size!149 (_2!487 lt!8619))))))

(declare-fun b!24721 () Bool)

(declare-fun res!15019 () Bool)

(assert (=> b!24721 (=> (not res!15019) (not e!15971))))

(assert (=> b!24721 (= res!15019 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!487 lt!8619)) (mask!4729 (_2!487 lt!8619))))))

(declare-fun b!24722 () Bool)

(assert (=> b!24722 (= e!15971 (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8619)) #b00000000000000000000000000000000 Nil!563))))

(assert (= (and d!4593 res!15017) b!24720))

(assert (= (and b!24720 res!15018) b!24721))

(assert (= (and b!24721 res!15019) b!24722))

(declare-fun m!19525 () Bool)

(assert (=> d!4593 m!19525))

(declare-fun m!19527 () Bool)

(assert (=> b!24720 m!19527))

(declare-fun m!19529 () Bool)

(assert (=> b!24721 m!19529))

(declare-fun m!19531 () Bool)

(assert (=> b!24722 m!19531))

(assert (=> b!23621 d!4593))

(assert (=> d!4063 d!4087))

(declare-fun d!4595 () Bool)

(assert (=> d!4595 (= (apply!29 lt!8427 #b1000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8427) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1025 () Bool)

(assert (= bs!1025 d!4595))

(assert (=> bs!1025 m!17851))

(assert (=> bs!1025 m!17851))

(declare-fun m!19533 () Bool)

(assert (=> bs!1025 m!19533))

(assert (=> b!23451 d!4595))

(declare-fun d!4597 () Bool)

(declare-fun res!15020 () Bool)

(declare-fun e!15972 () Bool)

(assert (=> d!4597 (=> res!15020 e!15972)))

(assert (=> d!4597 (= res!15020 (and ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (= (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240)))))))

(assert (=> d!4597 (= (containsKey!24 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))) e!15972)))

(declare-fun b!24723 () Bool)

(declare-fun e!15973 () Bool)

(assert (=> b!24723 (= e!15972 e!15973)))

(declare-fun res!15021 () Bool)

(assert (=> b!24723 (=> (not res!15021) (not e!15973))))

(assert (=> b!24723 (= res!15021 (and (or (not ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (bvsle (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240)))) ((_ is Cons!561) (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (bvslt (_1!493 (h!1127 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240)))))))

(declare-fun b!24724 () Bool)

(assert (=> b!24724 (= e!15973 (containsKey!24 (t!3229 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) lt!8236 (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))) (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!8240))))))

(assert (= (and d!4597 (not res!15020)) b!24723))

(assert (= (and b!24723 res!15021) b!24724))

(assert (=> b!24724 m!16722))

(declare-fun m!19535 () Bool)

(assert (=> b!24724 m!19535))

(assert (=> d!4035 d!4597))

(assert (=> bm!2030 d!4541))

(assert (=> b!23626 d!4485))

(declare-fun d!4599 () Bool)

(declare-fun e!15974 () Bool)

(assert (=> d!4599 e!15974))

(declare-fun res!15022 () Bool)

(assert (=> d!4599 (=> (not res!15022) (not e!15974))))

(declare-fun lt!9453 () ListLongMap!565)

(assert (=> d!4599 (= res!15022 (contains!230 lt!9453 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun lt!9451 () List!565)

(assert (=> d!4599 (= lt!9453 (ListLongMap!566 lt!9451))))

(declare-fun lt!9452 () Unit!519)

(declare-fun lt!9454 () Unit!519)

(assert (=> d!4599 (= lt!9452 lt!9454)))

(assert (=> d!4599 (= (getValueByKey!60 lt!9451 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4599 (= lt!9454 (lemmaContainsTupThenGetReturnValue!18 lt!9451 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4599 (= lt!9451 (insertStrictlySorted!18 (toList!298 (map!408 (_2!487 lt!8138))) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (=> d!4599 (= (+!45 (map!408 (_2!487 lt!8138)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) lt!9453)))

(declare-fun b!24725 () Bool)

(declare-fun res!15023 () Bool)

(assert (=> b!24725 (=> (not res!15023) (not e!15974))))

(assert (=> b!24725 (= res!15023 (= (getValueByKey!60 (toList!298 lt!9453) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24726 () Bool)

(assert (=> b!24726 (= e!15974 (contains!231 (toList!298 lt!9453) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(assert (= (and d!4599 res!15022) b!24725))

(assert (= (and b!24725 res!15023) b!24726))

(declare-fun m!19537 () Bool)

(assert (=> d!4599 m!19537))

(declare-fun m!19539 () Bool)

(assert (=> d!4599 m!19539))

(declare-fun m!19541 () Bool)

(assert (=> d!4599 m!19541))

(declare-fun m!19543 () Bool)

(assert (=> d!4599 m!19543))

(declare-fun m!19545 () Bool)

(assert (=> b!24725 m!19545))

(declare-fun m!19547 () Bool)

(assert (=> b!24726 m!19547))

(assert (=> b!23626 d!4599))

(assert (=> b!23626 d!3987))

(declare-fun d!4601 () Bool)

(assert (=> d!4601 (= (apply!29 lt!8744 #b0000000000000000000000000000000000000000000000000000000000000000) (get!391 (getValueByKey!60 (toList!298 lt!8744) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!1026 () Bool)

(assert (= bs!1026 d!4601))

(assert (=> bs!1026 m!18785))

(assert (=> bs!1026 m!18785))

(declare-fun m!19549 () Bool)

(assert (=> bs!1026 m!19549))

(assert (=> b!23750 d!4601))

(declare-fun b!24727 () Bool)

(declare-fun e!15983 () ListLongMap!565)

(declare-fun call!2178 () ListLongMap!565)

(assert (=> b!24727 (= e!15983 call!2178)))

(declare-fun bm!2173 () Bool)

(declare-fun call!2179 () ListLongMap!565)

(declare-fun call!2181 () ListLongMap!565)

(assert (=> bm!2173 (= call!2179 call!2181)))

(declare-fun b!24728 () Bool)

(declare-fun e!15979 () Bool)

(declare-fun e!15987 () Bool)

(assert (=> b!24728 (= e!15979 e!15987)))

(declare-fun c!3365 () Bool)

(assert (=> b!24728 (= c!3365 (not (= (bvand (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24729 () Bool)

(declare-fun e!15978 () Bool)

(declare-fun lt!9459 () ListLongMap!565)

(assert (=> b!24729 (= e!15978 (= (apply!29 lt!9459 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8234))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8234)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24729 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 (_2!487 lt!8234)))))))

(assert (=> b!24729 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))))))

(declare-fun c!3366 () Bool)

(declare-fun c!3367 () Bool)

(declare-fun call!2177 () ListLongMap!565)

(declare-fun bm!2174 () Bool)

(declare-fun call!2180 () ListLongMap!565)

(assert (=> bm!2174 (= call!2181 (+!45 (ite c!3366 call!2180 (ite c!3367 call!2177 call!2178)) (ite (or c!3366 c!3367) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8234))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8234))))))))

(declare-fun b!24730 () Bool)

(declare-fun res!15029 () Bool)

(assert (=> b!24730 (=> (not res!15029) (not e!15979))))

(declare-fun e!15984 () Bool)

(assert (=> b!24730 (= res!15029 e!15984)))

(declare-fun c!3364 () Bool)

(assert (=> b!24730 (= c!3364 (not (= (bvand (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2175 () Bool)

(declare-fun call!2176 () Bool)

(assert (=> bm!2175 (= call!2176 (contains!230 lt!9459 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24731 () Bool)

(declare-fun e!15976 () Bool)

(assert (=> b!24731 (= e!15987 e!15976)))

(declare-fun res!15027 () Bool)

(declare-fun call!2182 () Bool)

(assert (=> b!24731 (= res!15027 call!2182)))

(assert (=> b!24731 (=> (not res!15027) (not e!15976))))

(declare-fun b!24732 () Bool)

(declare-fun e!15982 () Unit!519)

(declare-fun Unit!591 () Unit!519)

(assert (=> b!24732 (= e!15982 Unit!591)))

(declare-fun b!24733 () Bool)

(assert (=> b!24733 (= e!15987 (not call!2182))))

(declare-fun b!24734 () Bool)

(declare-fun e!15985 () Bool)

(assert (=> b!24734 (= e!15985 (= (apply!29 lt!9459 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!487 lt!8234))))))

(declare-fun bm!2176 () Bool)

(assert (=> bm!2176 (= call!2182 (contains!230 lt!9459 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24735 () Bool)

(assert (=> b!24735 (= e!15984 (not call!2176))))

(declare-fun d!4603 () Bool)

(assert (=> d!4603 e!15979))

(declare-fun res!15026 () Bool)

(assert (=> d!4603 (=> (not res!15026) (not e!15979))))

(assert (=> d!4603 (= res!15026 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))))))))

(declare-fun lt!9474 () ListLongMap!565)

(assert (=> d!4603 (= lt!9459 lt!9474)))

(declare-fun lt!9466 () Unit!519)

(assert (=> d!4603 (= lt!9466 e!15982)))

(declare-fun c!3368 () Bool)

(declare-fun e!15986 () Bool)

(assert (=> d!4603 (= c!3368 e!15986)))

(declare-fun res!15030 () Bool)

(assert (=> d!4603 (=> (not res!15030) (not e!15986))))

(assert (=> d!4603 (= res!15030 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))))))

(declare-fun e!15980 () ListLongMap!565)

(assert (=> d!4603 (= lt!9474 e!15980)))

(assert (=> d!4603 (= c!3366 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4603 (validMask!0 (mask!4729 (_2!487 lt!8234)))))

(assert (=> d!4603 (= (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8234)) (_values!1728 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234)) (extraKeys!1640 (_2!487 lt!8234)) (zeroValue!1665 (_2!487 lt!8234)) (minValue!1665 (_2!487 lt!8234)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8234))) lt!9459)))

(declare-fun b!24736 () Bool)

(assert (=> b!24736 (= e!15976 (= (apply!29 lt!9459 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!487 lt!8234))))))

(declare-fun b!24737 () Bool)

(assert (=> b!24737 (= e!15980 (+!45 call!2181 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8234)))))))

(declare-fun b!24738 () Bool)

(declare-fun e!15981 () Bool)

(assert (=> b!24738 (= e!15981 e!15978)))

(declare-fun res!15031 () Bool)

(assert (=> b!24738 (=> (not res!15031) (not e!15978))))

(assert (=> b!24738 (= res!15031 (contains!230 lt!9459 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)))))

(assert (=> b!24738 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))))))

(declare-fun b!24739 () Bool)

(declare-fun res!15028 () Bool)

(assert (=> b!24739 (=> (not res!15028) (not e!15979))))

(assert (=> b!24739 (= res!15028 e!15981)))

(declare-fun res!15032 () Bool)

(assert (=> b!24739 (=> res!15032 e!15981)))

(declare-fun e!15977 () Bool)

(assert (=> b!24739 (= res!15032 (not e!15977))))

(declare-fun res!15025 () Bool)

(assert (=> b!24739 (=> (not res!15025) (not e!15977))))

(assert (=> b!24739 (= res!15025 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))))))

(declare-fun b!24740 () Bool)

(assert (=> b!24740 (= e!15983 call!2179)))

(declare-fun b!24741 () Bool)

(declare-fun lt!9456 () Unit!519)

(assert (=> b!24741 (= e!15982 lt!9456)))

(declare-fun lt!9470 () ListLongMap!565)

(assert (=> b!24741 (= lt!9470 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8234)) (_values!1728 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234)) (extraKeys!1640 (_2!487 lt!8234)) (zeroValue!1665 (_2!487 lt!8234)) (minValue!1665 (_2!487 lt!8234)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8234))))))

(declare-fun lt!9455 () (_ BitVec 64))

(assert (=> b!24741 (= lt!9455 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9469 () (_ BitVec 64))

(assert (=> b!24741 (= lt!9469 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000))))

(declare-fun lt!9475 () Unit!519)

(assert (=> b!24741 (= lt!9475 (addStillContains!14 lt!9470 lt!9455 (zeroValue!1665 (_2!487 lt!8234)) lt!9469))))

(assert (=> b!24741 (contains!230 (+!45 lt!9470 (tuple2!971 lt!9455 (zeroValue!1665 (_2!487 lt!8234)))) lt!9469)))

(declare-fun lt!9472 () Unit!519)

(assert (=> b!24741 (= lt!9472 lt!9475)))

(declare-fun lt!9476 () ListLongMap!565)

(assert (=> b!24741 (= lt!9476 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8234)) (_values!1728 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234)) (extraKeys!1640 (_2!487 lt!8234)) (zeroValue!1665 (_2!487 lt!8234)) (minValue!1665 (_2!487 lt!8234)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8234))))))

(declare-fun lt!9465 () (_ BitVec 64))

(assert (=> b!24741 (= lt!9465 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9461 () (_ BitVec 64))

(assert (=> b!24741 (= lt!9461 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000))))

(declare-fun lt!9467 () Unit!519)

(assert (=> b!24741 (= lt!9467 (addApplyDifferent!14 lt!9476 lt!9465 (minValue!1665 (_2!487 lt!8234)) lt!9461))))

(assert (=> b!24741 (= (apply!29 (+!45 lt!9476 (tuple2!971 lt!9465 (minValue!1665 (_2!487 lt!8234)))) lt!9461) (apply!29 lt!9476 lt!9461))))

(declare-fun lt!9457 () Unit!519)

(assert (=> b!24741 (= lt!9457 lt!9467)))

(declare-fun lt!9468 () ListLongMap!565)

(assert (=> b!24741 (= lt!9468 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8234)) (_values!1728 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234)) (extraKeys!1640 (_2!487 lt!8234)) (zeroValue!1665 (_2!487 lt!8234)) (minValue!1665 (_2!487 lt!8234)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8234))))))

(declare-fun lt!9462 () (_ BitVec 64))

(assert (=> b!24741 (= lt!9462 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9464 () (_ BitVec 64))

(assert (=> b!24741 (= lt!9464 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000))))

(declare-fun lt!9463 () Unit!519)

(assert (=> b!24741 (= lt!9463 (addApplyDifferent!14 lt!9468 lt!9462 (zeroValue!1665 (_2!487 lt!8234)) lt!9464))))

(assert (=> b!24741 (= (apply!29 (+!45 lt!9468 (tuple2!971 lt!9462 (zeroValue!1665 (_2!487 lt!8234)))) lt!9464) (apply!29 lt!9468 lt!9464))))

(declare-fun lt!9458 () Unit!519)

(assert (=> b!24741 (= lt!9458 lt!9463)))

(declare-fun lt!9473 () ListLongMap!565)

(assert (=> b!24741 (= lt!9473 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8234)) (_values!1728 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234)) (extraKeys!1640 (_2!487 lt!8234)) (zeroValue!1665 (_2!487 lt!8234)) (minValue!1665 (_2!487 lt!8234)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8234))))))

(declare-fun lt!9471 () (_ BitVec 64))

(assert (=> b!24741 (= lt!9471 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9460 () (_ BitVec 64))

(assert (=> b!24741 (= lt!9460 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000))))

(assert (=> b!24741 (= lt!9456 (addApplyDifferent!14 lt!9473 lt!9471 (minValue!1665 (_2!487 lt!8234)) lt!9460))))

(assert (=> b!24741 (= (apply!29 (+!45 lt!9473 (tuple2!971 lt!9471 (minValue!1665 (_2!487 lt!8234)))) lt!9460) (apply!29 lt!9473 lt!9460))))

(declare-fun b!24742 () Bool)

(declare-fun e!15975 () ListLongMap!565)

(assert (=> b!24742 (= e!15975 call!2179)))

(declare-fun b!24743 () Bool)

(assert (=> b!24743 (= e!15980 e!15975)))

(assert (=> b!24743 (= c!3367 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24744 () Bool)

(declare-fun c!3369 () Bool)

(assert (=> b!24744 (= c!3369 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8234)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24744 (= e!15975 e!15983)))

(declare-fun bm!2177 () Bool)

(assert (=> bm!2177 (= call!2178 call!2177)))

(declare-fun bm!2178 () Bool)

(assert (=> bm!2178 (= call!2177 call!2180)))

(declare-fun b!24745 () Bool)

(assert (=> b!24745 (= e!15984 e!15985)))

(declare-fun res!15024 () Bool)

(assert (=> b!24745 (= res!15024 call!2176)))

(assert (=> b!24745 (=> (not res!15024) (not e!15985))))

(declare-fun b!24746 () Bool)

(assert (=> b!24746 (= e!15986 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)))))

(declare-fun bm!2179 () Bool)

(assert (=> bm!2179 (= call!2180 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8234)) (_values!1728 (_2!487 lt!8234)) (mask!4729 (_2!487 lt!8234)) (extraKeys!1640 (_2!487 lt!8234)) (zeroValue!1665 (_2!487 lt!8234)) (minValue!1665 (_2!487 lt!8234)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8234))))))

(declare-fun b!24747 () Bool)

(assert (=> b!24747 (= e!15977 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)))))

(assert (= (and d!4603 c!3366) b!24737))

(assert (= (and d!4603 (not c!3366)) b!24743))

(assert (= (and b!24743 c!3367) b!24742))

(assert (= (and b!24743 (not c!3367)) b!24744))

(assert (= (and b!24744 c!3369) b!24740))

(assert (= (and b!24744 (not c!3369)) b!24727))

(assert (= (or b!24740 b!24727) bm!2177))

(assert (= (or b!24742 bm!2177) bm!2178))

(assert (= (or b!24742 b!24740) bm!2173))

(assert (= (or b!24737 bm!2178) bm!2179))

(assert (= (or b!24737 bm!2173) bm!2174))

(assert (= (and d!4603 res!15030) b!24746))

(assert (= (and d!4603 c!3368) b!24741))

(assert (= (and d!4603 (not c!3368)) b!24732))

(assert (= (and d!4603 res!15026) b!24739))

(assert (= (and b!24739 res!15025) b!24747))

(assert (= (and b!24739 (not res!15032)) b!24738))

(assert (= (and b!24738 res!15031) b!24729))

(assert (= (and b!24739 res!15028) b!24730))

(assert (= (and b!24730 c!3364) b!24745))

(assert (= (and b!24730 (not c!3364)) b!24735))

(assert (= (and b!24745 res!15024) b!24734))

(assert (= (or b!24745 b!24735) bm!2175))

(assert (= (and b!24730 res!15029) b!24728))

(assert (= (and b!24728 c!3365) b!24731))

(assert (= (and b!24728 (not c!3365)) b!24733))

(assert (= (and b!24731 res!15027) b!24736))

(assert (= (or b!24731 b!24733) bm!2176))

(declare-fun b_lambda!1625 () Bool)

(assert (=> (not b_lambda!1625) (not b!24729)))

(declare-fun tb!663 () Bool)

(declare-fun t!3242 () Bool)

(assert (=> (and b!23067 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8234))) t!3242) tb!663))

(declare-fun result!1103 () Bool)

(assert (=> tb!663 (= result!1103 tp_is_empty!1021)))

(assert (=> b!24729 t!3242))

(declare-fun b_and!1537 () Bool)

(assert (= b_and!1535 (and (=> t!3242 result!1103) b_and!1537)))

(assert (=> b!24738 m!17855))

(assert (=> b!24738 m!17855))

(declare-fun m!19551 () Bool)

(assert (=> b!24738 m!19551))

(declare-fun m!19553 () Bool)

(assert (=> b!24737 m!19553))

(declare-fun m!19555 () Bool)

(assert (=> b!24729 m!19555))

(declare-fun m!19557 () Bool)

(assert (=> b!24729 m!19557))

(declare-fun m!19559 () Bool)

(assert (=> b!24729 m!19559))

(assert (=> b!24729 m!17855))

(declare-fun m!19561 () Bool)

(assert (=> b!24729 m!19561))

(assert (=> b!24729 m!17855))

(assert (=> b!24729 m!19555))

(assert (=> b!24729 m!19557))

(assert (=> b!24746 m!17855))

(assert (=> b!24746 m!17855))

(assert (=> b!24746 m!17857))

(declare-fun m!19563 () Bool)

(assert (=> bm!2174 m!19563))

(assert (=> b!24747 m!17855))

(assert (=> b!24747 m!17855))

(assert (=> b!24747 m!17857))

(declare-fun m!19565 () Bool)

(assert (=> bm!2175 m!19565))

(declare-fun m!19567 () Bool)

(assert (=> b!24736 m!19567))

(declare-fun m!19569 () Bool)

(assert (=> bm!2176 m!19569))

(declare-fun m!19571 () Bool)

(assert (=> b!24734 m!19571))

(declare-fun m!19573 () Bool)

(assert (=> bm!2179 m!19573))

(assert (=> d!4603 m!19303))

(declare-fun m!19575 () Bool)

(assert (=> b!24741 m!19575))

(declare-fun m!19577 () Bool)

(assert (=> b!24741 m!19577))

(declare-fun m!19579 () Bool)

(assert (=> b!24741 m!19579))

(declare-fun m!19581 () Bool)

(assert (=> b!24741 m!19581))

(declare-fun m!19583 () Bool)

(assert (=> b!24741 m!19583))

(assert (=> b!24741 m!19573))

(assert (=> b!24741 m!19577))

(assert (=> b!24741 m!17855))

(declare-fun m!19585 () Bool)

(assert (=> b!24741 m!19585))

(declare-fun m!19587 () Bool)

(assert (=> b!24741 m!19587))

(declare-fun m!19589 () Bool)

(assert (=> b!24741 m!19589))

(assert (=> b!24741 m!19587))

(declare-fun m!19591 () Bool)

(assert (=> b!24741 m!19591))

(declare-fun m!19593 () Bool)

(assert (=> b!24741 m!19593))

(declare-fun m!19595 () Bool)

(assert (=> b!24741 m!19595))

(declare-fun m!19597 () Bool)

(assert (=> b!24741 m!19597))

(assert (=> b!24741 m!19597))

(declare-fun m!19599 () Bool)

(assert (=> b!24741 m!19599))

(assert (=> b!24741 m!19593))

(declare-fun m!19601 () Bool)

(assert (=> b!24741 m!19601))

(declare-fun m!19603 () Bool)

(assert (=> b!24741 m!19603))

(assert (=> d!4003 d!4603))

(assert (=> b!23387 d!4135))

(assert (=> b!23387 d!4137))

(declare-fun b!24748 () Bool)

(declare-fun res!15033 () Bool)

(declare-fun e!15988 () Bool)

(assert (=> b!24748 (=> (not res!15033) (not e!15988))))

(declare-fun lt!9478 () ListLongMap!565)

(assert (=> b!24748 (= res!15033 (not (contains!230 lt!9478 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24749 () Bool)

(assert (=> b!24749 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> b!24749 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))))))))

(declare-fun e!15989 () Bool)

(assert (=> b!24749 (= e!15989 (= (apply!29 lt!9478 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!24750 () Bool)

(declare-fun lt!9480 () Unit!519)

(declare-fun lt!9482 () Unit!519)

(assert (=> b!24750 (= lt!9480 lt!9482)))

(declare-fun lt!9477 () (_ BitVec 64))

(declare-fun lt!9479 () ListLongMap!565)

(declare-fun lt!9481 () (_ BitVec 64))

(declare-fun lt!9483 () V!1187)

(assert (=> b!24750 (not (contains!230 (+!45 lt!9479 (tuple2!971 lt!9481 lt!9483)) lt!9477))))

(assert (=> b!24750 (= lt!9482 (addStillNotContains!2 lt!9479 lt!9481 lt!9483 lt!9477))))

(assert (=> b!24750 (= lt!9477 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!24750 (= lt!9483 (get!390 (select (arr!596 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!24750 (= lt!9481 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun call!2183 () ListLongMap!565)

(assert (=> b!24750 (= lt!9479 call!2183)))

(declare-fun e!15993 () ListLongMap!565)

(assert (=> b!24750 (= e!15993 (+!45 call!2183 (tuple2!971 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000) (get!390 (select (arr!596 (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!24751 () Bool)

(declare-fun e!15990 () Bool)

(assert (=> b!24751 (= e!15990 (= lt!9478 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!487 lt!8138)))))))

(declare-fun b!24752 () Bool)

(assert (=> b!24752 (= e!15993 call!2183)))

(declare-fun b!24753 () Bool)

(declare-fun e!15992 () Bool)

(assert (=> b!24753 (= e!15992 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!24753 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!4605 () Bool)

(assert (=> d!4605 e!15988))

(declare-fun res!15036 () Bool)

(assert (=> d!4605 (=> (not res!15036) (not e!15988))))

(assert (=> d!4605 (= res!15036 (not (contains!230 lt!9478 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!15994 () ListLongMap!565)

(assert (=> d!4605 (= lt!9478 e!15994)))

(declare-fun c!3373 () Bool)

(assert (=> d!4605 (= c!3373 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> d!4605 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4605 (= (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!9478)))

(declare-fun b!24754 () Bool)

(assert (=> b!24754 (= e!15994 e!15993)))

(declare-fun c!3371 () Bool)

(assert (=> b!24754 (= c!3371 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun b!24755 () Bool)

(assert (=> b!24755 (= e!15990 (isEmpty!172 lt!9478))))

(declare-fun b!24756 () Bool)

(declare-fun e!15991 () Bool)

(assert (=> b!24756 (= e!15991 e!15989)))

(assert (=> b!24756 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun res!15034 () Bool)

(assert (=> b!24756 (= res!15034 (contains!230 lt!9478 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> b!24756 (=> (not res!15034) (not e!15989))))

(declare-fun bm!2180 () Bool)

(assert (=> bm!2180 (= call!2183 (getCurrentListMapNoExtraKeys!15 (_keys!3163 (_2!487 lt!8138)) (ite (or c!2989 c!2995) (_values!1728 (_2!487 lt!8138)) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (index!2342 lt!8342) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!24757 () Bool)

(assert (=> b!24757 (= e!15991 e!15990)))

(declare-fun c!3372 () Bool)

(assert (=> b!24757 (= c!3372 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun b!24758 () Bool)

(assert (=> b!24758 (= e!15994 (ListLongMap!566 Nil!562))))

(declare-fun b!24759 () Bool)

(assert (=> b!24759 (= e!15988 e!15991)))

(declare-fun c!3370 () Bool)

(assert (=> b!24759 (= c!3370 e!15992)))

(declare-fun res!15035 () Bool)

(assert (=> b!24759 (=> (not res!15035) (not e!15992))))

(assert (=> b!24759 (= res!15035 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (= (and d!4605 c!3373) b!24758))

(assert (= (and d!4605 (not c!3373)) b!24754))

(assert (= (and b!24754 c!3371) b!24750))

(assert (= (and b!24754 (not c!3371)) b!24752))

(assert (= (or b!24750 b!24752) bm!2180))

(assert (= (and d!4605 res!15036) b!24748))

(assert (= (and b!24748 res!15033) b!24759))

(assert (= (and b!24759 res!15035) b!24753))

(assert (= (and b!24759 c!3370) b!24756))

(assert (= (and b!24759 (not c!3370)) b!24757))

(assert (= (and b!24756 res!15034) b!24749))

(assert (= (and b!24757 c!3372) b!24751))

(assert (= (and b!24757 (not c!3372)) b!24755))

(declare-fun b_lambda!1627 () Bool)

(assert (=> (not b_lambda!1627) (not b!24749)))

(assert (=> b!24749 t!3232))

(declare-fun b_and!1539 () Bool)

(assert (= b_and!1537 (and (=> t!3232 result!1093) b_and!1539)))

(declare-fun b_lambda!1629 () Bool)

(assert (=> (not b_lambda!1629) (not b!24750)))

(assert (=> b!24750 t!3232))

(declare-fun b_and!1541 () Bool)

(assert (= b_and!1539 (and (=> t!3232 result!1093) b_and!1541)))

(assert (=> b!24754 m!16908))

(assert (=> b!24754 m!16908))

(assert (=> b!24754 m!16922))

(assert (=> b!24749 m!16916))

(assert (=> b!24749 m!16908))

(declare-fun m!19605 () Bool)

(assert (=> b!24749 m!19605))

(assert (=> b!24749 m!16908))

(assert (=> b!24749 m!16988))

(assert (=> b!24749 m!16916))

(assert (=> b!24749 m!16990))

(assert (=> b!24749 m!16988))

(declare-fun m!19607 () Bool)

(assert (=> b!24751 m!19607))

(assert (=> b!24753 m!16908))

(assert (=> b!24753 m!16908))

(assert (=> b!24753 m!16922))

(declare-fun m!19609 () Bool)

(assert (=> b!24755 m!19609))

(assert (=> b!24756 m!16908))

(assert (=> b!24756 m!16908))

(declare-fun m!19611 () Bool)

(assert (=> b!24756 m!19611))

(declare-fun m!19613 () Bool)

(assert (=> b!24748 m!19613))

(assert (=> bm!2180 m!19607))

(assert (=> b!24750 m!16916))

(declare-fun m!19615 () Bool)

(assert (=> b!24750 m!19615))

(declare-fun m!19617 () Bool)

(assert (=> b!24750 m!19617))

(assert (=> b!24750 m!16908))

(assert (=> b!24750 m!19615))

(declare-fun m!19619 () Bool)

(assert (=> b!24750 m!19619))

(assert (=> b!24750 m!16988))

(assert (=> b!24750 m!16916))

(assert (=> b!24750 m!16990))

(assert (=> b!24750 m!16988))

(declare-fun m!19621 () Bool)

(assert (=> b!24750 m!19621))

(declare-fun m!19623 () Bool)

(assert (=> d!4605 m!19623))

(assert (=> d!4605 m!16878))

(assert (=> bm!1989 d!4605))

(declare-fun d!4607 () Bool)

(assert (=> d!4607 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (getCurrentListMap!129 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> d!4607 true))

(declare-fun _$5!56 () Unit!519)

(assert (=> d!4607 (= (choose!209 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (index!2342 lt!8240) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) _$5!56)))

(declare-fun bs!1027 () Bool)

(assert (= bs!1027 d!4607))

(assert (=> bs!1027 m!17054))

(assert (=> bs!1027 m!17054))

(assert (=> bs!1027 m!17070))

(assert (=> bs!1027 m!16726))

(assert (=> bs!1027 m!17358))

(assert (=> d!4041 d!4607))

(assert (=> d!4041 d!4087))

(assert (=> d!3985 d!4291))

(declare-fun d!4609 () Bool)

(assert (=> d!4609 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(assert (=> d!4609 true))

(declare-fun _$8!40 () Unit!519)

(assert (=> d!4609 (= (choose!205 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) (defaultEntry!1742 lt!8141)) _$8!40)))

(declare-fun bs!1028 () Bool)

(assert (= bs!1028 d!4609))

(assert (=> bs!1028 m!17054))

(assert (=> bs!1028 m!17054))

(assert (=> bs!1028 m!17056))

(assert (=> bs!1028 m!17058))

(assert (=> d!3991 d!4609))

(declare-fun b!24760 () Bool)

(declare-fun e!16003 () ListLongMap!565)

(declare-fun call!2186 () ListLongMap!565)

(assert (=> b!24760 (= e!16003 call!2186)))

(declare-fun bm!2181 () Bool)

(declare-fun call!2187 () ListLongMap!565)

(declare-fun call!2189 () ListLongMap!565)

(assert (=> bm!2181 (= call!2187 call!2189)))

(declare-fun b!24761 () Bool)

(declare-fun e!15999 () Bool)

(declare-fun e!16007 () Bool)

(assert (=> b!24761 (= e!15999 e!16007)))

(declare-fun c!3375 () Bool)

(assert (=> b!24761 (= c!3375 (not (= (bvand lt!8258 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24762 () Bool)

(declare-fun e!15998 () Bool)

(declare-fun lt!9488 () ListLongMap!565)

(assert (=> b!24762 (= e!15998 (= (apply!29 lt!9488 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (_values!1728 lt!8141)) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24762 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (_values!1728 lt!8141))))))

(assert (=> b!24762 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun call!2188 () ListLongMap!565)

(declare-fun c!3377 () Bool)

(declare-fun bm!2182 () Bool)

(declare-fun call!2185 () ListLongMap!565)

(declare-fun c!3376 () Bool)

(assert (=> bm!2182 (= call!2189 (+!45 (ite c!3376 call!2188 (ite c!3377 call!2185 call!2186)) (ite (or c!3376 c!3377) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun b!24763 () Bool)

(declare-fun res!15042 () Bool)

(assert (=> b!24763 (=> (not res!15042) (not e!15999))))

(declare-fun e!16004 () Bool)

(assert (=> b!24763 (= res!15042 e!16004)))

(declare-fun c!3374 () Bool)

(assert (=> b!24763 (= c!3374 (not (= (bvand lt!8258 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2183 () Bool)

(declare-fun call!2184 () Bool)

(assert (=> bm!2183 (= call!2184 (contains!230 lt!9488 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24764 () Bool)

(declare-fun e!15996 () Bool)

(assert (=> b!24764 (= e!16007 e!15996)))

(declare-fun res!15040 () Bool)

(declare-fun call!2190 () Bool)

(assert (=> b!24764 (= res!15040 call!2190)))

(assert (=> b!24764 (=> (not res!15040) (not e!15996))))

(declare-fun b!24765 () Bool)

(declare-fun e!16002 () Unit!519)

(declare-fun Unit!592 () Unit!519)

(assert (=> b!24765 (= e!16002 Unit!592)))

(declare-fun b!24766 () Bool)

(assert (=> b!24766 (= e!16007 (not call!2190))))

(declare-fun b!24767 () Bool)

(declare-fun e!16005 () Bool)

(assert (=> b!24767 (= e!16005 (= (apply!29 lt!9488 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun bm!2184 () Bool)

(assert (=> bm!2184 (= call!2190 (contains!230 lt!9488 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24768 () Bool)

(assert (=> b!24768 (= e!16004 (not call!2184))))

(declare-fun d!4611 () Bool)

(assert (=> d!4611 e!15999))

(declare-fun res!15039 () Bool)

(assert (=> d!4611 (=> (not res!15039) (not e!15999))))

(assert (=> d!4611 (= res!15039 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!9503 () ListLongMap!565)

(assert (=> d!4611 (= lt!9488 lt!9503)))

(declare-fun lt!9495 () Unit!519)

(assert (=> d!4611 (= lt!9495 e!16002)))

(declare-fun c!3378 () Bool)

(declare-fun e!16006 () Bool)

(assert (=> d!4611 (= c!3378 e!16006)))

(declare-fun res!15043 () Bool)

(assert (=> d!4611 (=> (not res!15043) (not e!16006))))

(assert (=> d!4611 (= res!15043 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun e!16000 () ListLongMap!565)

(assert (=> d!4611 (= lt!9503 e!16000)))

(assert (=> d!4611 (= c!3376 (and (not (= (bvand lt!8258 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!8258 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4611 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4611 (= (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9488)))

(declare-fun b!24769 () Bool)

(assert (=> b!24769 (= e!15996 (= (apply!29 lt!9488 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))

(declare-fun b!24770 () Bool)

(assert (=> b!24770 (= e!16000 (+!45 call!2189 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(declare-fun b!24771 () Bool)

(declare-fun e!16001 () Bool)

(assert (=> b!24771 (= e!16001 e!15998)))

(declare-fun res!15044 () Bool)

(assert (=> b!24771 (=> (not res!15044) (not e!15998))))

(assert (=> b!24771 (= res!15044 (contains!230 lt!9488 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24771 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24772 () Bool)

(declare-fun res!15041 () Bool)

(assert (=> b!24772 (=> (not res!15041) (not e!15999))))

(assert (=> b!24772 (= res!15041 e!16001)))

(declare-fun res!15045 () Bool)

(assert (=> b!24772 (=> res!15045 e!16001)))

(declare-fun e!15997 () Bool)

(assert (=> b!24772 (= res!15045 (not e!15997))))

(declare-fun res!15038 () Bool)

(assert (=> b!24772 (=> (not res!15038) (not e!15997))))

(assert (=> b!24772 (= res!15038 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24773 () Bool)

(assert (=> b!24773 (= e!16003 call!2187)))

(declare-fun b!24774 () Bool)

(declare-fun lt!9485 () Unit!519)

(assert (=> b!24774 (= e!16002 lt!9485)))

(declare-fun lt!9499 () ListLongMap!565)

(assert (=> b!24774 (= lt!9499 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9484 () (_ BitVec 64))

(assert (=> b!24774 (= lt!9484 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9498 () (_ BitVec 64))

(assert (=> b!24774 (= lt!9498 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9504 () Unit!519)

(assert (=> b!24774 (= lt!9504 (addStillContains!14 lt!9499 lt!9484 (zeroValue!1665 lt!8141) lt!9498))))

(assert (=> b!24774 (contains!230 (+!45 lt!9499 (tuple2!971 lt!9484 (zeroValue!1665 lt!8141))) lt!9498)))

(declare-fun lt!9501 () Unit!519)

(assert (=> b!24774 (= lt!9501 lt!9504)))

(declare-fun lt!9505 () ListLongMap!565)

(assert (=> b!24774 (= lt!9505 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9494 () (_ BitVec 64))

(assert (=> b!24774 (= lt!9494 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9490 () (_ BitVec 64))

(assert (=> b!24774 (= lt!9490 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9496 () Unit!519)

(assert (=> b!24774 (= lt!9496 (addApplyDifferent!14 lt!9505 lt!9494 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) lt!9490))))

(assert (=> b!24774 (= (apply!29 (+!45 lt!9505 (tuple2!971 lt!9494 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9490) (apply!29 lt!9505 lt!9490))))

(declare-fun lt!9486 () Unit!519)

(assert (=> b!24774 (= lt!9486 lt!9496)))

(declare-fun lt!9497 () ListLongMap!565)

(assert (=> b!24774 (= lt!9497 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9491 () (_ BitVec 64))

(assert (=> b!24774 (= lt!9491 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9493 () (_ BitVec 64))

(assert (=> b!24774 (= lt!9493 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9492 () Unit!519)

(assert (=> b!24774 (= lt!9492 (addApplyDifferent!14 lt!9497 lt!9491 (zeroValue!1665 lt!8141) lt!9493))))

(assert (=> b!24774 (= (apply!29 (+!45 lt!9497 (tuple2!971 lt!9491 (zeroValue!1665 lt!8141))) lt!9493) (apply!29 lt!9497 lt!9493))))

(declare-fun lt!9487 () Unit!519)

(assert (=> b!24774 (= lt!9487 lt!9492)))

(declare-fun lt!9502 () ListLongMap!565)

(assert (=> b!24774 (= lt!9502 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9500 () (_ BitVec 64))

(assert (=> b!24774 (= lt!9500 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9489 () (_ BitVec 64))

(assert (=> b!24774 (= lt!9489 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24774 (= lt!9485 (addApplyDifferent!14 lt!9502 lt!9500 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) lt!9489))))

(assert (=> b!24774 (= (apply!29 (+!45 lt!9502 (tuple2!971 lt!9500 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9489) (apply!29 lt!9502 lt!9489))))

(declare-fun b!24775 () Bool)

(declare-fun e!15995 () ListLongMap!565)

(assert (=> b!24775 (= e!15995 call!2187)))

(declare-fun b!24776 () Bool)

(assert (=> b!24776 (= e!16000 e!15995)))

(assert (=> b!24776 (= c!3377 (and (not (= (bvand lt!8258 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!8258 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24777 () Bool)

(declare-fun c!3379 () Bool)

(assert (=> b!24777 (= c!3379 (and (not (= (bvand lt!8258 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!8258 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24777 (= e!15995 e!16003)))

(declare-fun bm!2185 () Bool)

(assert (=> bm!2185 (= call!2186 call!2185)))

(declare-fun bm!2186 () Bool)

(assert (=> bm!2186 (= call!2185 call!2188)))

(declare-fun b!24778 () Bool)

(assert (=> b!24778 (= e!16004 e!16005)))

(declare-fun res!15037 () Bool)

(assert (=> b!24778 (= res!15037 call!2184)))

(assert (=> b!24778 (=> (not res!15037) (not e!16005))))

(declare-fun b!24779 () Bool)

(assert (=> b!24779 (= e!16006 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2187 () Bool)

(assert (=> bm!2187 (= call!2188 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) lt!8258 (zeroValue!1665 lt!8141) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!24780 () Bool)

(assert (=> b!24780 (= e!15997 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (= (and d!4611 c!3376) b!24770))

(assert (= (and d!4611 (not c!3376)) b!24776))

(assert (= (and b!24776 c!3377) b!24775))

(assert (= (and b!24776 (not c!3377)) b!24777))

(assert (= (and b!24777 c!3379) b!24773))

(assert (= (and b!24777 (not c!3379)) b!24760))

(assert (= (or b!24773 b!24760) bm!2185))

(assert (= (or b!24775 bm!2185) bm!2186))

(assert (= (or b!24775 b!24773) bm!2181))

(assert (= (or b!24770 bm!2186) bm!2187))

(assert (= (or b!24770 bm!2181) bm!2182))

(assert (= (and d!4611 res!15043) b!24779))

(assert (= (and d!4611 c!3378) b!24774))

(assert (= (and d!4611 (not c!3378)) b!24765))

(assert (= (and d!4611 res!15039) b!24772))

(assert (= (and b!24772 res!15038) b!24780))

(assert (= (and b!24772 (not res!15045)) b!24771))

(assert (= (and b!24771 res!15044) b!24762))

(assert (= (and b!24772 res!15041) b!24763))

(assert (= (and b!24763 c!3374) b!24778))

(assert (= (and b!24763 (not c!3374)) b!24768))

(assert (= (and b!24778 res!15037) b!24767))

(assert (= (or b!24778 b!24768) bm!2183))

(assert (= (and b!24763 res!15042) b!24761))

(assert (= (and b!24761 c!3375) b!24764))

(assert (= (and b!24761 (not c!3375)) b!24766))

(assert (= (and b!24764 res!15040) b!24769))

(assert (= (or b!24764 b!24766) bm!2184))

(declare-fun b_lambda!1631 () Bool)

(assert (=> (not b_lambda!1631) (not b!24762)))

(assert (=> b!24762 t!3234))

(declare-fun b_and!1543 () Bool)

(assert (= b_and!1541 (and (=> t!3234 result!1095) b_and!1543)))

(assert (=> b!24771 m!17198))

(assert (=> b!24771 m!17198))

(declare-fun m!19625 () Bool)

(assert (=> b!24771 m!19625))

(declare-fun m!19627 () Bool)

(assert (=> b!24770 m!19627))

(assert (=> b!24762 m!17413))

(assert (=> b!24762 m!17304))

(assert (=> b!24762 m!17415))

(assert (=> b!24762 m!17198))

(declare-fun m!19629 () Bool)

(assert (=> b!24762 m!19629))

(assert (=> b!24762 m!17198))

(assert (=> b!24762 m!17413))

(assert (=> b!24762 m!17304))

(assert (=> b!24779 m!17198))

(assert (=> b!24779 m!17198))

(assert (=> b!24779 m!17310))

(declare-fun m!19631 () Bool)

(assert (=> bm!2182 m!19631))

(assert (=> b!24780 m!17198))

(assert (=> b!24780 m!17198))

(assert (=> b!24780 m!17310))

(declare-fun m!19633 () Bool)

(assert (=> bm!2183 m!19633))

(declare-fun m!19635 () Bool)

(assert (=> b!24769 m!19635))

(declare-fun m!19637 () Bool)

(assert (=> bm!2184 m!19637))

(declare-fun m!19639 () Bool)

(assert (=> b!24767 m!19639))

(declare-fun m!19641 () Bool)

(assert (=> bm!2187 m!19641))

(assert (=> d!4611 m!17050))

(declare-fun m!19643 () Bool)

(assert (=> b!24774 m!19643))

(declare-fun m!19645 () Bool)

(assert (=> b!24774 m!19645))

(declare-fun m!19647 () Bool)

(assert (=> b!24774 m!19647))

(declare-fun m!19649 () Bool)

(assert (=> b!24774 m!19649))

(declare-fun m!19651 () Bool)

(assert (=> b!24774 m!19651))

(assert (=> b!24774 m!19641))

(assert (=> b!24774 m!19645))

(assert (=> b!24774 m!17198))

(declare-fun m!19653 () Bool)

(assert (=> b!24774 m!19653))

(declare-fun m!19655 () Bool)

(assert (=> b!24774 m!19655))

(declare-fun m!19657 () Bool)

(assert (=> b!24774 m!19657))

(assert (=> b!24774 m!19655))

(declare-fun m!19659 () Bool)

(assert (=> b!24774 m!19659))

(declare-fun m!19661 () Bool)

(assert (=> b!24774 m!19661))

(declare-fun m!19663 () Bool)

(assert (=> b!24774 m!19663))

(declare-fun m!19665 () Bool)

(assert (=> b!24774 m!19665))

(assert (=> b!24774 m!19665))

(declare-fun m!19667 () Bool)

(assert (=> b!24774 m!19667))

(assert (=> b!24774 m!19661))

(declare-fun m!19669 () Bool)

(assert (=> b!24774 m!19669))

(declare-fun m!19671 () Bool)

(assert (=> b!24774 m!19671))

(assert (=> d!3991 d!4611))

(declare-fun d!4613 () Bool)

(declare-fun e!16008 () Bool)

(assert (=> d!4613 e!16008))

(declare-fun res!15046 () Bool)

(assert (=> d!4613 (=> (not res!15046) (not e!16008))))

(declare-fun lt!9508 () ListLongMap!565)

(assert (=> d!4613 (= res!15046 (contains!230 lt!9508 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun lt!9506 () List!565)

(assert (=> d!4613 (= lt!9508 (ListLongMap!566 lt!9506))))

(declare-fun lt!9507 () Unit!519)

(declare-fun lt!9509 () Unit!519)

(assert (=> d!4613 (= lt!9507 lt!9509)))

(assert (=> d!4613 (= (getValueByKey!60 lt!9506 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4613 (= lt!9509 (lemmaContainsTupThenGetReturnValue!18 lt!9506 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4613 (= lt!9506 (insertStrictlySorted!18 (toList!298 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141))) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4613 (= (+!45 (getCurrentListMap!129 (_keys!3163 lt!8141) (_values!1728 lt!8141) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9508)))

(declare-fun b!24781 () Bool)

(declare-fun res!15047 () Bool)

(assert (=> b!24781 (=> (not res!15047) (not e!16008))))

(assert (=> b!24781 (= res!15047 (= (getValueByKey!60 (toList!298 lt!9508) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24782 () Bool)

(assert (=> b!24782 (= e!16008 (contains!231 (toList!298 lt!9508) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (= (and d!4613 res!15046) b!24781))

(assert (= (and b!24781 res!15047) b!24782))

(declare-fun m!19673 () Bool)

(assert (=> d!4613 m!19673))

(declare-fun m!19675 () Bool)

(assert (=> d!4613 m!19675))

(declare-fun m!19677 () Bool)

(assert (=> d!4613 m!19677))

(declare-fun m!19679 () Bool)

(assert (=> d!4613 m!19679))

(declare-fun m!19681 () Bool)

(assert (=> b!24781 m!19681))

(declare-fun m!19683 () Bool)

(assert (=> b!24782 m!19683))

(assert (=> d!3991 d!4613))

(assert (=> d!3991 d!4245))

(assert (=> d!3991 d!4087))

(declare-fun d!4615 () Bool)

(assert (=> d!4615 (= (apply!29 lt!8427 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)) (get!391 (getValueByKey!60 (toList!298 lt!8427) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))))

(declare-fun bs!1029 () Bool)

(assert (= bs!1029 d!4615))

(assert (=> bs!1029 m!16908))

(assert (=> bs!1029 m!18865))

(assert (=> bs!1029 m!18865))

(declare-fun m!19685 () Bool)

(assert (=> bs!1029 m!19685))

(assert (=> b!23444 d!4615))

(declare-fun d!4617 () Bool)

(declare-fun c!3380 () Bool)

(assert (=> d!4617 (= c!3380 ((_ is ValueCellFull!311) (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun e!16009 () V!1187)

(assert (=> d!4617 (= (get!390 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)) e!16009)))

(declare-fun b!24783 () Bool)

(assert (=> b!24783 (= e!16009 (get!392 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24784 () Bool)

(assert (=> b!24784 (= e!16009 (get!393 (select (arr!596 (_values!1728 (_2!487 lt!8138))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4617 c!3380) b!24783))

(assert (= (and d!4617 (not c!3380)) b!24784))

(assert (=> b!24783 m!16914))

(assert (=> b!24783 m!16916))

(declare-fun m!19687 () Bool)

(assert (=> b!24783 m!19687))

(assert (=> b!24784 m!16914))

(assert (=> b!24784 m!16916))

(declare-fun m!19689 () Bool)

(assert (=> b!24784 m!19689))

(assert (=> b!23444 d!4617))

(declare-fun b!24785 () Bool)

(declare-fun e!16010 () (_ BitVec 32))

(assert (=> b!24785 (= e!16010 #b00000000000000000000000000000000)))

(declare-fun b!24786 () Bool)

(declare-fun e!16011 () (_ BitVec 32))

(assert (=> b!24786 (= e!16010 e!16011)))

(declare-fun c!3382 () Bool)

(assert (=> b!24786 (= c!3382 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun b!24787 () Bool)

(declare-fun call!2191 () (_ BitVec 32))

(assert (=> b!24787 (= e!16011 (bvadd #b00000000000000000000000000000001 call!2191))))

(declare-fun b!24788 () Bool)

(assert (=> b!24788 (= e!16011 call!2191)))

(declare-fun bm!2188 () Bool)

(assert (=> bm!2188 (= call!2191 (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8138)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun d!4619 () Bool)

(declare-fun lt!9510 () (_ BitVec 32))

(assert (=> d!4619 (and (bvsge lt!9510 #b00000000000000000000000000000000) (bvsle lt!9510 (bvsub (size!693 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(assert (=> d!4619 (= lt!9510 e!16010)))

(declare-fun c!3381 () Bool)

(assert (=> d!4619 (= c!3381 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> d!4619 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (_2!487 lt!8138))) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> d!4619 (= (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8138)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) lt!9510)))

(assert (= (and d!4619 c!3381) b!24785))

(assert (= (and d!4619 (not c!3381)) b!24786))

(assert (= (and b!24786 c!3382) b!24787))

(assert (= (and b!24786 (not c!3382)) b!24788))

(assert (= (or b!24787 b!24788) bm!2188))

(assert (=> b!24786 m!16908))

(assert (=> b!24786 m!16908))

(assert (=> b!24786 m!16922))

(declare-fun m!19691 () Bool)

(assert (=> bm!2188 m!19691))

(assert (=> b!23705 d!4619))

(assert (=> b!23554 d!4573))

(declare-fun d!4621 () Bool)

(declare-fun e!16012 () Bool)

(assert (=> d!4621 e!16012))

(declare-fun res!15048 () Bool)

(assert (=> d!4621 (=> (not res!15048) (not e!16012))))

(declare-fun lt!9513 () ListLongMap!565)

(assert (=> d!4621 (= res!15048 (contains!230 lt!9513 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(declare-fun lt!9511 () List!565)

(assert (=> d!4621 (= lt!9513 (ListLongMap!566 lt!9511))))

(declare-fun lt!9512 () Unit!519)

(declare-fun lt!9514 () Unit!519)

(assert (=> d!4621 (= lt!9512 lt!9514)))

(assert (=> d!4621 (= (getValueByKey!60 lt!9511 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4621 (= lt!9514 (lemmaContainsTupThenGetReturnValue!18 lt!9511 (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4621 (= lt!9511 (insertStrictlySorted!18 (toList!298 (map!408 lt!8141)) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))))))

(assert (=> d!4621 (= (+!45 (map!408 lt!8141) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) lt!9513)))

(declare-fun b!24789 () Bool)

(declare-fun res!15049 () Bool)

(assert (=> b!24789 (=> (not res!15049) (not e!16012))))

(assert (=> b!24789 (= res!15049 (= (getValueByKey!60 (toList!298 lt!9513) (_1!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938))))))) (Some!65 (_2!493 (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))))

(declare-fun b!24790 () Bool)

(assert (=> b!24790 (= e!16012 (contains!231 (toList!298 lt!9513) (tuple2!971 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))))))

(assert (= (and d!4621 res!15048) b!24789))

(assert (= (and b!24789 res!15049) b!24790))

(declare-fun m!19693 () Bool)

(assert (=> d!4621 m!19693))

(declare-fun m!19695 () Bool)

(assert (=> d!4621 m!19695))

(declare-fun m!19697 () Bool)

(assert (=> d!4621 m!19697))

(declare-fun m!19699 () Bool)

(assert (=> d!4621 m!19699))

(declare-fun m!19701 () Bool)

(assert (=> b!24789 m!19701))

(declare-fun m!19703 () Bool)

(assert (=> b!24790 m!19703))

(assert (=> b!23554 d!4621))

(assert (=> b!23554 d!4049))

(assert (=> b!23788 d!4077))

(assert (=> b!23788 d!4079))

(declare-fun d!4623 () Bool)

(assert (=> d!4623 (= (apply!29 (+!45 lt!8761 (tuple2!971 lt!8750 (minValue!1665 lt!8141))) lt!8746) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8761 (tuple2!971 lt!8750 (minValue!1665 lt!8141)))) lt!8746)))))

(declare-fun bs!1030 () Bool)

(assert (= bs!1030 d!4623))

(declare-fun m!19705 () Bool)

(assert (=> bs!1030 m!19705))

(assert (=> bs!1030 m!19705))

(declare-fun m!19707 () Bool)

(assert (=> bs!1030 m!19707))

(assert (=> b!23757 d!4623))

(declare-fun d!4625 () Bool)

(assert (=> d!4625 (= (apply!29 lt!8761 lt!8746) (get!391 (getValueByKey!60 (toList!298 lt!8761) lt!8746)))))

(declare-fun bs!1031 () Bool)

(assert (= bs!1031 d!4625))

(declare-fun m!19709 () Bool)

(assert (=> bs!1031 m!19709))

(assert (=> bs!1031 m!19709))

(declare-fun m!19711 () Bool)

(assert (=> bs!1031 m!19711))

(assert (=> b!23757 d!4625))

(declare-fun d!4627 () Bool)

(assert (=> d!4627 (= (apply!29 (+!45 lt!8761 (tuple2!971 lt!8750 (minValue!1665 lt!8141))) lt!8746) (apply!29 lt!8761 lt!8746))))

(declare-fun lt!9515 () Unit!519)

(assert (=> d!4627 (= lt!9515 (choose!211 lt!8761 lt!8750 (minValue!1665 lt!8141) lt!8746))))

(declare-fun e!16013 () Bool)

(assert (=> d!4627 e!16013))

(declare-fun res!15050 () Bool)

(assert (=> d!4627 (=> (not res!15050) (not e!16013))))

(assert (=> d!4627 (= res!15050 (contains!230 lt!8761 lt!8746))))

(assert (=> d!4627 (= (addApplyDifferent!14 lt!8761 lt!8750 (minValue!1665 lt!8141) lt!8746) lt!9515)))

(declare-fun b!24791 () Bool)

(assert (=> b!24791 (= e!16013 (not (= lt!8746 lt!8750)))))

(assert (= (and d!4627 res!15050) b!24791))

(assert (=> d!4627 m!17547))

(declare-fun m!19713 () Bool)

(assert (=> d!4627 m!19713))

(assert (=> d!4627 m!17537))

(declare-fun m!19715 () Bool)

(assert (=> d!4627 m!19715))

(assert (=> d!4627 m!17537))

(assert (=> d!4627 m!17545))

(assert (=> b!23757 d!4627))

(declare-fun d!4629 () Bool)

(assert (=> d!4629 (= (apply!29 (+!45 lt!8758 (tuple2!971 lt!8756 (minValue!1665 lt!8141))) lt!8745) (apply!29 lt!8758 lt!8745))))

(declare-fun lt!9516 () Unit!519)

(assert (=> d!4629 (= lt!9516 (choose!211 lt!8758 lt!8756 (minValue!1665 lt!8141) lt!8745))))

(declare-fun e!16014 () Bool)

(assert (=> d!4629 e!16014))

(declare-fun res!15051 () Bool)

(assert (=> d!4629 (=> (not res!15051) (not e!16014))))

(assert (=> d!4629 (= res!15051 (contains!230 lt!8758 lt!8745))))

(assert (=> d!4629 (= (addApplyDifferent!14 lt!8758 lt!8756 (minValue!1665 lt!8141) lt!8745) lt!9516)))

(declare-fun b!24792 () Bool)

(assert (=> b!24792 (= e!16014 (not (= lt!8745 lt!8756)))))

(assert (= (and d!4629 res!15051) b!24792))

(assert (=> d!4629 m!17527))

(declare-fun m!19717 () Bool)

(assert (=> d!4629 m!19717))

(assert (=> d!4629 m!17531))

(declare-fun m!19719 () Bool)

(assert (=> d!4629 m!19719))

(assert (=> d!4629 m!17531))

(assert (=> d!4629 m!17533))

(assert (=> b!23757 d!4629))

(declare-fun d!4631 () Bool)

(assert (=> d!4631 (= (apply!29 (+!45 lt!8758 (tuple2!971 lt!8756 (minValue!1665 lt!8141))) lt!8745) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8758 (tuple2!971 lt!8756 (minValue!1665 lt!8141)))) lt!8745)))))

(declare-fun bs!1032 () Bool)

(assert (= bs!1032 d!4631))

(declare-fun m!19721 () Bool)

(assert (=> bs!1032 m!19721))

(assert (=> bs!1032 m!19721))

(declare-fun m!19723 () Bool)

(assert (=> bs!1032 m!19723))

(assert (=> b!23757 d!4631))

(assert (=> b!23757 d!4125))

(declare-fun d!4633 () Bool)

(assert (=> d!4633 (= (apply!29 lt!8758 lt!8745) (get!391 (getValueByKey!60 (toList!298 lt!8758) lt!8745)))))

(declare-fun bs!1033 () Bool)

(assert (= bs!1033 d!4633))

(declare-fun m!19725 () Bool)

(assert (=> bs!1033 m!19725))

(assert (=> bs!1033 m!19725))

(declare-fun m!19727 () Bool)

(assert (=> bs!1033 m!19727))

(assert (=> b!23757 d!4633))

(declare-fun d!4635 () Bool)

(assert (=> d!4635 (= (apply!29 lt!8753 lt!8749) (get!391 (getValueByKey!60 (toList!298 lt!8753) lt!8749)))))

(declare-fun bs!1034 () Bool)

(assert (= bs!1034 d!4635))

(declare-fun m!19729 () Bool)

(assert (=> bs!1034 m!19729))

(assert (=> bs!1034 m!19729))

(declare-fun m!19731 () Bool)

(assert (=> bs!1034 m!19731))

(assert (=> b!23757 d!4635))

(declare-fun d!4637 () Bool)

(declare-fun e!16015 () Bool)

(assert (=> d!4637 e!16015))

(declare-fun res!15052 () Bool)

(assert (=> d!4637 (=> (not res!15052) (not e!16015))))

(declare-fun lt!9519 () ListLongMap!565)

(assert (=> d!4637 (= res!15052 (contains!230 lt!9519 (_1!493 (tuple2!971 lt!8756 (minValue!1665 lt!8141)))))))

(declare-fun lt!9517 () List!565)

(assert (=> d!4637 (= lt!9519 (ListLongMap!566 lt!9517))))

(declare-fun lt!9518 () Unit!519)

(declare-fun lt!9520 () Unit!519)

(assert (=> d!4637 (= lt!9518 lt!9520)))

(assert (=> d!4637 (= (getValueByKey!60 lt!9517 (_1!493 (tuple2!971 lt!8756 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8756 (minValue!1665 lt!8141)))))))

(assert (=> d!4637 (= lt!9520 (lemmaContainsTupThenGetReturnValue!18 lt!9517 (_1!493 (tuple2!971 lt!8756 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8756 (minValue!1665 lt!8141)))))))

(assert (=> d!4637 (= lt!9517 (insertStrictlySorted!18 (toList!298 lt!8758) (_1!493 (tuple2!971 lt!8756 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8756 (minValue!1665 lt!8141)))))))

(assert (=> d!4637 (= (+!45 lt!8758 (tuple2!971 lt!8756 (minValue!1665 lt!8141))) lt!9519)))

(declare-fun b!24793 () Bool)

(declare-fun res!15053 () Bool)

(assert (=> b!24793 (=> (not res!15053) (not e!16015))))

(assert (=> b!24793 (= res!15053 (= (getValueByKey!60 (toList!298 lt!9519) (_1!493 (tuple2!971 lt!8756 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8756 (minValue!1665 lt!8141))))))))

(declare-fun b!24794 () Bool)

(assert (=> b!24794 (= e!16015 (contains!231 (toList!298 lt!9519) (tuple2!971 lt!8756 (minValue!1665 lt!8141))))))

(assert (= (and d!4637 res!15052) b!24793))

(assert (= (and b!24793 res!15053) b!24794))

(declare-fun m!19733 () Bool)

(assert (=> d!4637 m!19733))

(declare-fun m!19735 () Bool)

(assert (=> d!4637 m!19735))

(declare-fun m!19737 () Bool)

(assert (=> d!4637 m!19737))

(declare-fun m!19739 () Bool)

(assert (=> d!4637 m!19739))

(declare-fun m!19741 () Bool)

(assert (=> b!24793 m!19741))

(declare-fun m!19743 () Bool)

(assert (=> b!24794 m!19743))

(assert (=> b!23757 d!4637))

(declare-fun d!4639 () Bool)

(assert (=> d!4639 (= (apply!29 (+!45 lt!8753 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141))) lt!8749) (apply!29 lt!8753 lt!8749))))

(declare-fun lt!9521 () Unit!519)

(assert (=> d!4639 (= lt!9521 (choose!211 lt!8753 lt!8747 (zeroValue!1665 lt!8141) lt!8749))))

(declare-fun e!16016 () Bool)

(assert (=> d!4639 e!16016))

(declare-fun res!15054 () Bool)

(assert (=> d!4639 (=> (not res!15054) (not e!16016))))

(assert (=> d!4639 (= res!15054 (contains!230 lt!8753 lt!8749))))

(assert (=> d!4639 (= (addApplyDifferent!14 lt!8753 lt!8747 (zeroValue!1665 lt!8141) lt!8749) lt!9521)))

(declare-fun b!24795 () Bool)

(assert (=> b!24795 (= e!16016 (not (= lt!8749 lt!8747)))))

(assert (= (and d!4639 res!15054) b!24795))

(assert (=> d!4639 m!17535))

(declare-fun m!19745 () Bool)

(assert (=> d!4639 m!19745))

(assert (=> d!4639 m!17521))

(declare-fun m!19747 () Bool)

(assert (=> d!4639 m!19747))

(assert (=> d!4639 m!17521))

(assert (=> d!4639 m!17523))

(assert (=> b!23757 d!4639))

(declare-fun d!4641 () Bool)

(declare-fun e!16018 () Bool)

(assert (=> d!4641 e!16018))

(declare-fun res!15055 () Bool)

(assert (=> d!4641 (=> res!15055 e!16018)))

(declare-fun lt!9525 () Bool)

(assert (=> d!4641 (= res!15055 (not lt!9525))))

(declare-fun lt!9524 () Bool)

(assert (=> d!4641 (= lt!9525 lt!9524)))

(declare-fun lt!9523 () Unit!519)

(declare-fun e!16017 () Unit!519)

(assert (=> d!4641 (= lt!9523 e!16017)))

(declare-fun c!3383 () Bool)

(assert (=> d!4641 (= c!3383 lt!9524)))

(assert (=> d!4641 (= lt!9524 (containsKey!24 (toList!298 (+!45 lt!8755 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))) lt!8754))))

(assert (=> d!4641 (= (contains!230 (+!45 lt!8755 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141))) lt!8754) lt!9525)))

(declare-fun b!24796 () Bool)

(declare-fun lt!9522 () Unit!519)

(assert (=> b!24796 (= e!16017 lt!9522)))

(assert (=> b!24796 (= lt!9522 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (+!45 lt!8755 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))) lt!8754))))

(assert (=> b!24796 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8755 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))) lt!8754))))

(declare-fun b!24797 () Bool)

(declare-fun Unit!593 () Unit!519)

(assert (=> b!24797 (= e!16017 Unit!593)))

(declare-fun b!24798 () Bool)

(assert (=> b!24798 (= e!16018 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8755 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))) lt!8754)))))

(assert (= (and d!4641 c!3383) b!24796))

(assert (= (and d!4641 (not c!3383)) b!24797))

(assert (= (and d!4641 (not res!15055)) b!24798))

(declare-fun m!19749 () Bool)

(assert (=> d!4641 m!19749))

(declare-fun m!19751 () Bool)

(assert (=> b!24796 m!19751))

(declare-fun m!19753 () Bool)

(assert (=> b!24796 m!19753))

(assert (=> b!24796 m!19753))

(declare-fun m!19755 () Bool)

(assert (=> b!24796 m!19755))

(assert (=> b!24798 m!19753))

(assert (=> b!24798 m!19753))

(assert (=> b!24798 m!19755))

(assert (=> b!23757 d!4641))

(declare-fun d!4643 () Bool)

(declare-fun e!16019 () Bool)

(assert (=> d!4643 e!16019))

(declare-fun res!15056 () Bool)

(assert (=> d!4643 (=> (not res!15056) (not e!16019))))

(declare-fun lt!9528 () ListLongMap!565)

(assert (=> d!4643 (= res!15056 (contains!230 lt!9528 (_1!493 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141)))))))

(declare-fun lt!9526 () List!565)

(assert (=> d!4643 (= lt!9528 (ListLongMap!566 lt!9526))))

(declare-fun lt!9527 () Unit!519)

(declare-fun lt!9529 () Unit!519)

(assert (=> d!4643 (= lt!9527 lt!9529)))

(assert (=> d!4643 (= (getValueByKey!60 lt!9526 (_1!493 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4643 (= lt!9529 (lemmaContainsTupThenGetReturnValue!18 lt!9526 (_1!493 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4643 (= lt!9526 (insertStrictlySorted!18 (toList!298 lt!8753) (_1!493 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4643 (= (+!45 lt!8753 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141))) lt!9528)))

(declare-fun b!24799 () Bool)

(declare-fun res!15057 () Bool)

(assert (=> b!24799 (=> (not res!15057) (not e!16019))))

(assert (=> b!24799 (= res!15057 (= (getValueByKey!60 (toList!298 lt!9528) (_1!493 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141))))))))

(declare-fun b!24800 () Bool)

(assert (=> b!24800 (= e!16019 (contains!231 (toList!298 lt!9528) (tuple2!971 lt!8747 (zeroValue!1665 lt!8141))))))

(assert (= (and d!4643 res!15056) b!24799))

(assert (= (and b!24799 res!15057) b!24800))

(declare-fun m!19757 () Bool)

(assert (=> d!4643 m!19757))

(declare-fun m!19759 () Bool)

(assert (=> d!4643 m!19759))

(declare-fun m!19761 () Bool)

(assert (=> d!4643 m!19761))

(declare-fun m!19763 () Bool)

(assert (=> d!4643 m!19763))

(declare-fun m!19765 () Bool)

(assert (=> b!24799 m!19765))

(declare-fun m!19767 () Bool)

(assert (=> b!24800 m!19767))

(assert (=> b!23757 d!4643))

(declare-fun d!4645 () Bool)

(declare-fun e!16020 () Bool)

(assert (=> d!4645 e!16020))

(declare-fun res!15058 () Bool)

(assert (=> d!4645 (=> (not res!15058) (not e!16020))))

(declare-fun lt!9532 () ListLongMap!565)

(assert (=> d!4645 (= res!15058 (contains!230 lt!9532 (_1!493 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))))))

(declare-fun lt!9530 () List!565)

(assert (=> d!4645 (= lt!9532 (ListLongMap!566 lt!9530))))

(declare-fun lt!9531 () Unit!519)

(declare-fun lt!9533 () Unit!519)

(assert (=> d!4645 (= lt!9531 lt!9533)))

(assert (=> d!4645 (= (getValueByKey!60 lt!9530 (_1!493 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4645 (= lt!9533 (lemmaContainsTupThenGetReturnValue!18 lt!9530 (_1!493 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4645 (= lt!9530 (insertStrictlySorted!18 (toList!298 lt!8755) (_1!493 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))))))

(assert (=> d!4645 (= (+!45 lt!8755 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141))) lt!9532)))

(declare-fun b!24801 () Bool)

(declare-fun res!15059 () Bool)

(assert (=> b!24801 (=> (not res!15059) (not e!16020))))

(assert (=> b!24801 (= res!15059 (= (getValueByKey!60 (toList!298 lt!9532) (_1!493 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141))))))))

(declare-fun b!24802 () Bool)

(assert (=> b!24802 (= e!16020 (contains!231 (toList!298 lt!9532) (tuple2!971 lt!8740 (zeroValue!1665 lt!8141))))))

(assert (= (and d!4645 res!15058) b!24801))

(assert (= (and b!24801 res!15059) b!24802))

(declare-fun m!19769 () Bool)

(assert (=> d!4645 m!19769))

(declare-fun m!19771 () Bool)

(assert (=> d!4645 m!19771))

(declare-fun m!19773 () Bool)

(assert (=> d!4645 m!19773))

(declare-fun m!19775 () Bool)

(assert (=> d!4645 m!19775))

(declare-fun m!19777 () Bool)

(assert (=> b!24801 m!19777))

(declare-fun m!19779 () Bool)

(assert (=> b!24802 m!19779))

(assert (=> b!23757 d!4645))

(declare-fun d!4647 () Bool)

(declare-fun e!16021 () Bool)

(assert (=> d!4647 e!16021))

(declare-fun res!15060 () Bool)

(assert (=> d!4647 (=> (not res!15060) (not e!16021))))

(declare-fun lt!9536 () ListLongMap!565)

(assert (=> d!4647 (= res!15060 (contains!230 lt!9536 (_1!493 (tuple2!971 lt!8750 (minValue!1665 lt!8141)))))))

(declare-fun lt!9534 () List!565)

(assert (=> d!4647 (= lt!9536 (ListLongMap!566 lt!9534))))

(declare-fun lt!9535 () Unit!519)

(declare-fun lt!9537 () Unit!519)

(assert (=> d!4647 (= lt!9535 lt!9537)))

(assert (=> d!4647 (= (getValueByKey!60 lt!9534 (_1!493 (tuple2!971 lt!8750 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8750 (minValue!1665 lt!8141)))))))

(assert (=> d!4647 (= lt!9537 (lemmaContainsTupThenGetReturnValue!18 lt!9534 (_1!493 (tuple2!971 lt!8750 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8750 (minValue!1665 lt!8141)))))))

(assert (=> d!4647 (= lt!9534 (insertStrictlySorted!18 (toList!298 lt!8761) (_1!493 (tuple2!971 lt!8750 (minValue!1665 lt!8141))) (_2!493 (tuple2!971 lt!8750 (minValue!1665 lt!8141)))))))

(assert (=> d!4647 (= (+!45 lt!8761 (tuple2!971 lt!8750 (minValue!1665 lt!8141))) lt!9536)))

(declare-fun b!24803 () Bool)

(declare-fun res!15061 () Bool)

(assert (=> b!24803 (=> (not res!15061) (not e!16021))))

(assert (=> b!24803 (= res!15061 (= (getValueByKey!60 (toList!298 lt!9536) (_1!493 (tuple2!971 lt!8750 (minValue!1665 lt!8141)))) (Some!65 (_2!493 (tuple2!971 lt!8750 (minValue!1665 lt!8141))))))))

(declare-fun b!24804 () Bool)

(assert (=> b!24804 (= e!16021 (contains!231 (toList!298 lt!9536) (tuple2!971 lt!8750 (minValue!1665 lt!8141))))))

(assert (= (and d!4647 res!15060) b!24803))

(assert (= (and b!24803 res!15061) b!24804))

(declare-fun m!19781 () Bool)

(assert (=> d!4647 m!19781))

(declare-fun m!19783 () Bool)

(assert (=> d!4647 m!19783))

(declare-fun m!19785 () Bool)

(assert (=> d!4647 m!19785))

(declare-fun m!19787 () Bool)

(assert (=> d!4647 m!19787))

(declare-fun m!19789 () Bool)

(assert (=> b!24803 m!19789))

(declare-fun m!19791 () Bool)

(assert (=> b!24804 m!19791))

(assert (=> b!23757 d!4647))

(declare-fun d!4649 () Bool)

(assert (=> d!4649 (contains!230 (+!45 lt!8755 (tuple2!971 lt!8740 (zeroValue!1665 lt!8141))) lt!8754)))

(declare-fun lt!9538 () Unit!519)

(assert (=> d!4649 (= lt!9538 (choose!212 lt!8755 lt!8740 (zeroValue!1665 lt!8141) lt!8754))))

(assert (=> d!4649 (contains!230 lt!8755 lt!8754)))

(assert (=> d!4649 (= (addStillContains!14 lt!8755 lt!8740 (zeroValue!1665 lt!8141) lt!8754) lt!9538)))

(declare-fun bs!1035 () Bool)

(assert (= bs!1035 d!4649))

(assert (=> bs!1035 m!17541))

(assert (=> bs!1035 m!17541))

(assert (=> bs!1035 m!17543))

(declare-fun m!19793 () Bool)

(assert (=> bs!1035 m!19793))

(declare-fun m!19795 () Bool)

(assert (=> bs!1035 m!19795))

(assert (=> b!23757 d!4649))

(declare-fun d!4651 () Bool)

(assert (=> d!4651 (= (apply!29 (+!45 lt!8753 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141))) lt!8749) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8753 (tuple2!971 lt!8747 (zeroValue!1665 lt!8141)))) lt!8749)))))

(declare-fun bs!1036 () Bool)

(assert (= bs!1036 d!4651))

(declare-fun m!19797 () Bool)

(assert (=> bs!1036 m!19797))

(assert (=> bs!1036 m!19797))

(declare-fun m!19799 () Bool)

(assert (=> bs!1036 m!19799))

(assert (=> b!23757 d!4651))

(assert (=> b!23681 d!4453))

(assert (=> b!23681 d!4245))

(declare-fun b!24805 () Bool)

(declare-fun e!16030 () ListLongMap!565)

(declare-fun call!2194 () ListLongMap!565)

(assert (=> b!24805 (= e!16030 call!2194)))

(declare-fun bm!2189 () Bool)

(declare-fun call!2195 () ListLongMap!565)

(declare-fun call!2197 () ListLongMap!565)

(assert (=> bm!2189 (= call!2195 call!2197)))

(declare-fun b!24806 () Bool)

(declare-fun e!16026 () Bool)

(declare-fun e!16034 () Bool)

(assert (=> b!24806 (= e!16026 e!16034)))

(declare-fun c!3385 () Bool)

(assert (=> b!24806 (= c!3385 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun e!16025 () Bool)

(declare-fun b!24807 () Bool)

(declare-fun lt!9543 () ListLongMap!565)

(assert (=> b!24807 (= e!16025 (= (apply!29 lt!9543 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141)))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 lt!8141) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24807 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))))))))

(assert (=> b!24807 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun call!2196 () ListLongMap!565)

(declare-fun c!3387 () Bool)

(declare-fun c!3386 () Bool)

(declare-fun bm!2190 () Bool)

(declare-fun call!2193 () ListLongMap!565)

(assert (=> bm!2190 (= call!2197 (+!45 (ite c!3386 call!2196 (ite c!3387 call!2193 call!2194)) (ite (or c!3386 c!3387) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(declare-fun b!24808 () Bool)

(declare-fun res!15067 () Bool)

(assert (=> b!24808 (=> (not res!15067) (not e!16026))))

(declare-fun e!16031 () Bool)

(assert (=> b!24808 (= res!15067 e!16031)))

(declare-fun c!3384 () Bool)

(assert (=> b!24808 (= c!3384 (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2191 () Bool)

(declare-fun call!2192 () Bool)

(assert (=> bm!2191 (= call!2192 (contains!230 lt!9543 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24809 () Bool)

(declare-fun e!16023 () Bool)

(assert (=> b!24809 (= e!16034 e!16023)))

(declare-fun res!15065 () Bool)

(declare-fun call!2198 () Bool)

(assert (=> b!24809 (= res!15065 call!2198)))

(assert (=> b!24809 (=> (not res!15065) (not e!16023))))

(declare-fun b!24810 () Bool)

(declare-fun e!16029 () Unit!519)

(declare-fun Unit!594 () Unit!519)

(assert (=> b!24810 (= e!16029 Unit!594)))

(declare-fun b!24811 () Bool)

(assert (=> b!24811 (= e!16034 (not call!2198))))

(declare-fun b!24812 () Bool)

(declare-fun e!16032 () Bool)

(assert (=> b!24812 (= e!16032 (= (apply!29 lt!9543 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 lt!8141)))))

(declare-fun bm!2192 () Bool)

(assert (=> bm!2192 (= call!2198 (contains!230 lt!9543 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24813 () Bool)

(assert (=> b!24813 (= e!16031 (not call!2192))))

(declare-fun d!4653 () Bool)

(assert (=> d!4653 e!16026))

(declare-fun res!15064 () Bool)

(assert (=> d!4653 (=> (not res!15064) (not e!16026))))

(assert (=> d!4653 (= res!15064 (or (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))))

(declare-fun lt!9558 () ListLongMap!565)

(assert (=> d!4653 (= lt!9543 lt!9558)))

(declare-fun lt!9550 () Unit!519)

(assert (=> d!4653 (= lt!9550 e!16029)))

(declare-fun c!3388 () Bool)

(declare-fun e!16033 () Bool)

(assert (=> d!4653 (= c!3388 e!16033)))

(declare-fun res!15068 () Bool)

(assert (=> d!4653 (=> (not res!15068) (not e!16033))))

(assert (=> d!4653 (= res!15068 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun e!16027 () ListLongMap!565)

(assert (=> d!4653 (= lt!9558 e!16027)))

(assert (=> d!4653 (= c!3386 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4653 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4653 (= (getCurrentListMap!129 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)) lt!9543)))

(declare-fun b!24814 () Bool)

(assert (=> b!24814 (= e!16023 (= (apply!29 lt!9543 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 lt!8141)))))

(declare-fun b!24815 () Bool)

(assert (=> b!24815 (= e!16027 (+!45 call!2197 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))

(declare-fun b!24816 () Bool)

(declare-fun e!16028 () Bool)

(assert (=> b!24816 (= e!16028 e!16025)))

(declare-fun res!15069 () Bool)

(assert (=> b!24816 (=> (not res!15069) (not e!16025))))

(assert (=> b!24816 (= res!15069 (contains!230 lt!9543 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (=> b!24816 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24817 () Bool)

(declare-fun res!15066 () Bool)

(assert (=> b!24817 (=> (not res!15066) (not e!16026))))

(assert (=> b!24817 (= res!15066 e!16028)))

(declare-fun res!15070 () Bool)

(assert (=> b!24817 (=> res!15070 e!16028)))

(declare-fun e!16024 () Bool)

(assert (=> b!24817 (= res!15070 (not e!16024))))

(declare-fun res!15063 () Bool)

(assert (=> b!24817 (=> (not res!15063) (not e!16024))))

(assert (=> b!24817 (= res!15063 (bvslt #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(declare-fun b!24818 () Bool)

(assert (=> b!24818 (= e!16030 call!2195)))

(declare-fun b!24819 () Bool)

(declare-fun lt!9540 () Unit!519)

(assert (=> b!24819 (= e!16029 lt!9540)))

(declare-fun lt!9554 () ListLongMap!565)

(assert (=> b!24819 (= lt!9554 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9539 () (_ BitVec 64))

(assert (=> b!24819 (= lt!9539 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9553 () (_ BitVec 64))

(assert (=> b!24819 (= lt!9553 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9559 () Unit!519)

(assert (=> b!24819 (= lt!9559 (addStillContains!14 lt!9554 lt!9539 (zeroValue!1665 lt!8141) lt!9553))))

(assert (=> b!24819 (contains!230 (+!45 lt!9554 (tuple2!971 lt!9539 (zeroValue!1665 lt!8141))) lt!9553)))

(declare-fun lt!9556 () Unit!519)

(assert (=> b!24819 (= lt!9556 lt!9559)))

(declare-fun lt!9560 () ListLongMap!565)

(assert (=> b!24819 (= lt!9560 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9549 () (_ BitVec 64))

(assert (=> b!24819 (= lt!9549 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9545 () (_ BitVec 64))

(assert (=> b!24819 (= lt!9545 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9551 () Unit!519)

(assert (=> b!24819 (= lt!9551 (addApplyDifferent!14 lt!9560 lt!9549 (minValue!1665 lt!8141) lt!9545))))

(assert (=> b!24819 (= (apply!29 (+!45 lt!9560 (tuple2!971 lt!9549 (minValue!1665 lt!8141))) lt!9545) (apply!29 lt!9560 lt!9545))))

(declare-fun lt!9541 () Unit!519)

(assert (=> b!24819 (= lt!9541 lt!9551)))

(declare-fun lt!9552 () ListLongMap!565)

(assert (=> b!24819 (= lt!9552 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9546 () (_ BitVec 64))

(assert (=> b!24819 (= lt!9546 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9548 () (_ BitVec 64))

(assert (=> b!24819 (= lt!9548 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(declare-fun lt!9547 () Unit!519)

(assert (=> b!24819 (= lt!9547 (addApplyDifferent!14 lt!9552 lt!9546 (zeroValue!1665 lt!8141) lt!9548))))

(assert (=> b!24819 (= (apply!29 (+!45 lt!9552 (tuple2!971 lt!9546 (zeroValue!1665 lt!8141))) lt!9548) (apply!29 lt!9552 lt!9548))))

(declare-fun lt!9542 () Unit!519)

(assert (=> b!24819 (= lt!9542 lt!9547)))

(declare-fun lt!9557 () ListLongMap!565)

(assert (=> b!24819 (= lt!9557 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun lt!9555 () (_ BitVec 64))

(assert (=> b!24819 (= lt!9555 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9544 () (_ BitVec 64))

(assert (=> b!24819 (= lt!9544 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000))))

(assert (=> b!24819 (= lt!9540 (addApplyDifferent!14 lt!9557 lt!9555 (minValue!1665 lt!8141) lt!9544))))

(assert (=> b!24819 (= (apply!29 (+!45 lt!9557 (tuple2!971 lt!9555 (minValue!1665 lt!8141))) lt!9544) (apply!29 lt!9557 lt!9544))))

(declare-fun b!24820 () Bool)

(declare-fun e!16022 () ListLongMap!565)

(assert (=> b!24820 (= e!16022 call!2195)))

(declare-fun b!24821 () Bool)

(assert (=> b!24821 (= e!16027 e!16022)))

(assert (=> b!24821 (= c!3387 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24822 () Bool)

(declare-fun c!3389 () Bool)

(assert (=> b!24822 (= c!3389 (and (not (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 lt!8141) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24822 (= e!16022 e!16030)))

(declare-fun bm!2193 () Bool)

(assert (=> bm!2193 (= call!2194 call!2193)))

(declare-fun bm!2194 () Bool)

(assert (=> bm!2194 (= call!2193 call!2196)))

(declare-fun b!24823 () Bool)

(assert (=> b!24823 (= e!16031 e!16032)))

(declare-fun res!15062 () Bool)

(assert (=> b!24823 (= res!15062 call!2192)))

(assert (=> b!24823 (=> (not res!15062) (not e!16032))))

(declare-fun b!24824 () Bool)

(assert (=> b!24824 (= e!16033 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun bm!2195 () Bool)

(assert (=> bm!2195 (= call!2196 (getCurrentListMapNoExtraKeys!15 (_keys!3163 lt!8141) (array!1262 (store (arr!596 (_values!1728 lt!8141)) (index!2342 lt!8240) (ValueCellFull!311 (ite (or c!2921 c!2920) (zeroValue!1665 (v!1601 (underlying!115 thiss!938))) (minValue!1665 (v!1601 (underlying!115 thiss!938)))))) (size!692 (_values!1728 lt!8141))) (mask!4729 lt!8141) (extraKeys!1640 lt!8141) (zeroValue!1665 lt!8141) (minValue!1665 lt!8141) #b00000000000000000000000000000000 (defaultEntry!1742 lt!8141)))))

(declare-fun b!24825 () Bool)

(assert (=> b!24825 (= e!16024 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (= (and d!4653 c!3386) b!24815))

(assert (= (and d!4653 (not c!3386)) b!24821))

(assert (= (and b!24821 c!3387) b!24820))

(assert (= (and b!24821 (not c!3387)) b!24822))

(assert (= (and b!24822 c!3389) b!24818))

(assert (= (and b!24822 (not c!3389)) b!24805))

(assert (= (or b!24818 b!24805) bm!2193))

(assert (= (or b!24820 bm!2193) bm!2194))

(assert (= (or b!24820 b!24818) bm!2189))

(assert (= (or b!24815 bm!2194) bm!2195))

(assert (= (or b!24815 bm!2189) bm!2190))

(assert (= (and d!4653 res!15068) b!24824))

(assert (= (and d!4653 c!3388) b!24819))

(assert (= (and d!4653 (not c!3388)) b!24810))

(assert (= (and d!4653 res!15064) b!24817))

(assert (= (and b!24817 res!15063) b!24825))

(assert (= (and b!24817 (not res!15070)) b!24816))

(assert (= (and b!24816 res!15069) b!24807))

(assert (= (and b!24817 res!15066) b!24808))

(assert (= (and b!24808 c!3384) b!24823))

(assert (= (and b!24808 (not c!3384)) b!24813))

(assert (= (and b!24823 res!15062) b!24812))

(assert (= (or b!24823 b!24813) bm!2191))

(assert (= (and b!24808 res!15067) b!24806))

(assert (= (and b!24806 c!3385) b!24809))

(assert (= (and b!24806 (not c!3385)) b!24811))

(assert (= (and b!24809 res!15065) b!24814))

(assert (= (or b!24809 b!24811) bm!2192))

(declare-fun b_lambda!1633 () Bool)

(assert (=> (not b_lambda!1633) (not b!24807)))

(assert (=> b!24807 t!3234))

(declare-fun b_and!1545 () Bool)

(assert (= b_and!1543 (and (=> t!3234 result!1095) b_and!1545)))

(assert (=> b!24816 m!17198))

(assert (=> b!24816 m!17198))

(declare-fun m!19801 () Bool)

(assert (=> b!24816 m!19801))

(declare-fun m!19803 () Bool)

(assert (=> b!24815 m!19803))

(declare-fun m!19805 () Bool)

(assert (=> b!24807 m!19805))

(assert (=> b!24807 m!17304))

(declare-fun m!19807 () Bool)

(assert (=> b!24807 m!19807))

(assert (=> b!24807 m!17198))

(declare-fun m!19809 () Bool)

(assert (=> b!24807 m!19809))

(assert (=> b!24807 m!17198))

(assert (=> b!24807 m!19805))

(assert (=> b!24807 m!17304))

(assert (=> b!24824 m!17198))

(assert (=> b!24824 m!17198))

(assert (=> b!24824 m!17310))

(declare-fun m!19811 () Bool)

(assert (=> bm!2190 m!19811))

(assert (=> b!24825 m!17198))

(assert (=> b!24825 m!17198))

(assert (=> b!24825 m!17310))

(declare-fun m!19813 () Bool)

(assert (=> bm!2191 m!19813))

(declare-fun m!19815 () Bool)

(assert (=> b!24814 m!19815))

(declare-fun m!19817 () Bool)

(assert (=> bm!2192 m!19817))

(declare-fun m!19819 () Bool)

(assert (=> b!24812 m!19819))

(declare-fun m!19821 () Bool)

(assert (=> bm!2195 m!19821))

(assert (=> d!4653 m!17050))

(declare-fun m!19823 () Bool)

(assert (=> b!24819 m!19823))

(declare-fun m!19825 () Bool)

(assert (=> b!24819 m!19825))

(declare-fun m!19827 () Bool)

(assert (=> b!24819 m!19827))

(declare-fun m!19829 () Bool)

(assert (=> b!24819 m!19829))

(declare-fun m!19831 () Bool)

(assert (=> b!24819 m!19831))

(assert (=> b!24819 m!19821))

(assert (=> b!24819 m!19825))

(assert (=> b!24819 m!17198))

(declare-fun m!19833 () Bool)

(assert (=> b!24819 m!19833))

(declare-fun m!19835 () Bool)

(assert (=> b!24819 m!19835))

(declare-fun m!19837 () Bool)

(assert (=> b!24819 m!19837))

(assert (=> b!24819 m!19835))

(declare-fun m!19839 () Bool)

(assert (=> b!24819 m!19839))

(declare-fun m!19841 () Bool)

(assert (=> b!24819 m!19841))

(declare-fun m!19843 () Bool)

(assert (=> b!24819 m!19843))

(declare-fun m!19845 () Bool)

(assert (=> b!24819 m!19845))

(assert (=> b!24819 m!19845))

(declare-fun m!19847 () Bool)

(assert (=> b!24819 m!19847))

(assert (=> b!24819 m!19841))

(declare-fun m!19849 () Bool)

(assert (=> b!24819 m!19849))

(declare-fun m!19851 () Bool)

(assert (=> b!24819 m!19851))

(assert (=> b!23681 d!4653))

(declare-fun b!24826 () Bool)

(declare-fun e!16036 () SeekEntryResult!55)

(assert (=> b!24826 (= e!16036 (MissingVacant!55 (index!2343 lt!8658)))))

(declare-fun b!24827 () Bool)

(declare-fun e!16035 () SeekEntryResult!55)

(assert (=> b!24827 (= e!16035 Undefined!55)))

(declare-fun b!24828 () Bool)

(declare-fun e!16037 () SeekEntryResult!55)

(assert (=> b!24828 (= e!16035 e!16037)))

(declare-fun c!3391 () Bool)

(declare-fun lt!9562 () (_ BitVec 64))

(assert (=> b!24828 (= c!3391 (= lt!9562 (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!24829 () Bool)

(assert (=> b!24829 (= e!16037 (Found!55 (index!2343 lt!8658)))))

(declare-fun lt!9561 () SeekEntryResult!55)

(declare-fun d!4655 () Bool)

(assert (=> d!4655 (and (or ((_ is Undefined!55) lt!9561) (not ((_ is Found!55) lt!9561)) (and (bvsge (index!2342 lt!9561) #b00000000000000000000000000000000) (bvslt (index!2342 lt!9561) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!55) lt!9561) ((_ is Found!55) lt!9561) (not ((_ is MissingVacant!55) lt!9561)) (not (= (index!2344 lt!9561) (index!2343 lt!8658))) (and (bvsge (index!2344 lt!9561) #b00000000000000000000000000000000) (bvslt (index!2344 lt!9561) (size!693 (_keys!3163 lt!8141))))) (or ((_ is Undefined!55) lt!9561) (ite ((_ is Found!55) lt!9561) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2342 lt!9561)) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000)) (and ((_ is MissingVacant!55) lt!9561) (= (index!2344 lt!9561) (index!2343 lt!8658)) (= (select (arr!597 (_keys!3163 lt!8141)) (index!2344 lt!9561)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!4655 (= lt!9561 e!16035)))

(declare-fun c!3392 () Bool)

(assert (=> d!4655 (= c!3392 (bvsge (x!5577 lt!8658) #b01111111111111111111111111111110))))

(assert (=> d!4655 (= lt!9562 (select (arr!597 (_keys!3163 lt!8141)) (index!2343 lt!8658)))))

(assert (=> d!4655 (validMask!0 (mask!4729 lt!8141))))

(assert (=> d!4655 (= (seekKeyOrZeroReturnVacant!0 (x!5577 lt!8658) (index!2343 lt!8658) (index!2343 lt!8658) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)) lt!9561)))

(declare-fun b!24830 () Bool)

(assert (=> b!24830 (= e!16036 (seekKeyOrZeroReturnVacant!0 (bvadd (x!5577 lt!8658) #b00000000000000000000000000000001) (nextIndex!0 (index!2343 lt!8658) (x!5577 lt!8658) (mask!4729 lt!8141)) (index!2343 lt!8658) (ite (or c!2921 c!2920) #b0000000000000000000000000000000000000000000000000000000000000000 #b1000000000000000000000000000000000000000000000000000000000000000) (_keys!3163 lt!8141) (mask!4729 lt!8141)))))

(declare-fun b!24831 () Bool)

(declare-fun c!3390 () Bool)

(assert (=> b!24831 (= c!3390 (= lt!9562 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24831 (= e!16037 e!16036)))

(assert (= (and d!4655 c!3392) b!24827))

(assert (= (and d!4655 (not c!3392)) b!24828))

(assert (= (and b!24828 c!3391) b!24829))

(assert (= (and b!24828 (not c!3391)) b!24831))

(assert (= (and b!24831 c!3390) b!24826))

(assert (= (and b!24831 (not c!3390)) b!24830))

(declare-fun m!19853 () Bool)

(assert (=> d!4655 m!19853))

(declare-fun m!19855 () Bool)

(assert (=> d!4655 m!19855))

(assert (=> d!4655 m!17286))

(assert (=> d!4655 m!17050))

(declare-fun m!19857 () Bool)

(assert (=> b!24830 m!19857))

(assert (=> b!24830 m!19857))

(declare-fun m!19859 () Bool)

(assert (=> b!24830 m!19859))

(assert (=> b!23646 d!4655))

(declare-fun d!4657 () Bool)

(declare-fun e!16038 () Bool)

(assert (=> d!4657 e!16038))

(declare-fun res!15071 () Bool)

(assert (=> d!4657 (=> (not res!15071) (not e!16038))))

(declare-fun lt!9565 () ListLongMap!565)

(assert (=> d!4657 (= res!15071 (contains!230 lt!9565 (_1!493 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9563 () List!565)

(assert (=> d!4657 (= lt!9565 (ListLongMap!566 lt!9563))))

(declare-fun lt!9564 () Unit!519)

(declare-fun lt!9566 () Unit!519)

(assert (=> d!4657 (= lt!9564 lt!9566)))

(assert (=> d!4657 (= (getValueByKey!60 lt!9563 (_1!493 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4657 (= lt!9566 (lemmaContainsTupThenGetReturnValue!18 lt!9563 (_1!493 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4657 (= lt!9563 (insertStrictlySorted!18 (toList!298 lt!8468) (_1!493 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4657 (= (+!45 lt!8468 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138)))) lt!9565)))

(declare-fun b!24832 () Bool)

(declare-fun res!15072 () Bool)

(assert (=> b!24832 (=> (not res!15072) (not e!16038))))

(assert (=> b!24832 (= res!15072 (= (getValueByKey!60 (toList!298 lt!9565) (_1!493 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24833 () Bool)

(assert (=> b!24833 (= e!16038 (contains!231 (toList!298 lt!9565) (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4657 res!15071) b!24832))

(assert (= (and b!24832 res!15072) b!24833))

(declare-fun m!19861 () Bool)

(assert (=> d!4657 m!19861))

(declare-fun m!19863 () Bool)

(assert (=> d!4657 m!19863))

(declare-fun m!19865 () Bool)

(assert (=> d!4657 m!19865))

(declare-fun m!19867 () Bool)

(assert (=> d!4657 m!19867))

(declare-fun m!19869 () Bool)

(assert (=> b!24832 m!19869))

(declare-fun m!19871 () Bool)

(assert (=> b!24833 m!19871))

(assert (=> b!23492 d!4657))

(declare-fun d!4659 () Bool)

(assert (=> d!4659 (= (apply!29 lt!8476 lt!8461) (get!391 (getValueByKey!60 (toList!298 lt!8476) lt!8461)))))

(declare-fun bs!1037 () Bool)

(assert (= bs!1037 d!4659))

(declare-fun m!19873 () Bool)

(assert (=> bs!1037 m!19873))

(assert (=> bs!1037 m!19873))

(declare-fun m!19875 () Bool)

(assert (=> bs!1037 m!19875))

(assert (=> b!23492 d!4659))

(declare-fun d!4661 () Bool)

(assert (=> d!4661 (= (apply!29 (+!45 lt!8473 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138)))) lt!8460) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8473 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138))))) lt!8460)))))

(declare-fun bs!1038 () Bool)

(assert (= bs!1038 d!4661))

(declare-fun m!19877 () Bool)

(assert (=> bs!1038 m!19877))

(assert (=> bs!1038 m!19877))

(declare-fun m!19879 () Bool)

(assert (=> bs!1038 m!19879))

(assert (=> b!23492 d!4661))

(declare-fun d!4663 () Bool)

(declare-fun e!16039 () Bool)

(assert (=> d!4663 e!16039))

(declare-fun res!15073 () Bool)

(assert (=> d!4663 (=> (not res!15073) (not e!16039))))

(declare-fun lt!9569 () ListLongMap!565)

(assert (=> d!4663 (= res!15073 (contains!230 lt!9569 (_1!493 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9567 () List!565)

(assert (=> d!4663 (= lt!9569 (ListLongMap!566 lt!9567))))

(declare-fun lt!9568 () Unit!519)

(declare-fun lt!9570 () Unit!519)

(assert (=> d!4663 (= lt!9568 lt!9570)))

(assert (=> d!4663 (= (getValueByKey!60 lt!9567 (_1!493 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4663 (= lt!9570 (lemmaContainsTupThenGetReturnValue!18 lt!9567 (_1!493 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4663 (= lt!9567 (insertStrictlySorted!18 (toList!298 lt!8473) (_1!493 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4663 (= (+!45 lt!8473 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138)))) lt!9569)))

(declare-fun b!24834 () Bool)

(declare-fun res!15074 () Bool)

(assert (=> b!24834 (=> (not res!15074) (not e!16039))))

(assert (=> b!24834 (= res!15074 (= (getValueByKey!60 (toList!298 lt!9569) (_1!493 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24835 () Bool)

(assert (=> b!24835 (= e!16039 (contains!231 (toList!298 lt!9569) (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4663 res!15073) b!24834))

(assert (= (and b!24834 res!15074) b!24835))

(declare-fun m!19881 () Bool)

(assert (=> d!4663 m!19881))

(declare-fun m!19883 () Bool)

(assert (=> d!4663 m!19883))

(declare-fun m!19885 () Bool)

(assert (=> d!4663 m!19885))

(declare-fun m!19887 () Bool)

(assert (=> d!4663 m!19887))

(declare-fun m!19889 () Bool)

(assert (=> b!24834 m!19889))

(declare-fun m!19891 () Bool)

(assert (=> b!24835 m!19891))

(assert (=> b!23492 d!4663))

(declare-fun d!4665 () Bool)

(assert (=> d!4665 (= (apply!29 (+!45 lt!8468 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138)))) lt!8464) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8468 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138))))) lt!8464)))))

(declare-fun bs!1039 () Bool)

(assert (= bs!1039 d!4665))

(declare-fun m!19893 () Bool)

(assert (=> bs!1039 m!19893))

(assert (=> bs!1039 m!19893))

(declare-fun m!19895 () Bool)

(assert (=> bs!1039 m!19895))

(assert (=> b!23492 d!4665))

(assert (=> b!23492 d!4605))

(declare-fun d!4667 () Bool)

(assert (=> d!4667 (= (apply!29 (+!45 lt!8476 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138)))) lt!8461) (get!391 (getValueByKey!60 (toList!298 (+!45 lt!8476 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138))))) lt!8461)))))

(declare-fun bs!1040 () Bool)

(assert (= bs!1040 d!4667))

(declare-fun m!19897 () Bool)

(assert (=> bs!1040 m!19897))

(assert (=> bs!1040 m!19897))

(declare-fun m!19899 () Bool)

(assert (=> bs!1040 m!19899))

(assert (=> b!23492 d!4667))

(declare-fun d!4669 () Bool)

(declare-fun e!16041 () Bool)

(assert (=> d!4669 e!16041))

(declare-fun res!15075 () Bool)

(assert (=> d!4669 (=> res!15075 e!16041)))

(declare-fun lt!9574 () Bool)

(assert (=> d!4669 (= res!15075 (not lt!9574))))

(declare-fun lt!9573 () Bool)

(assert (=> d!4669 (= lt!9574 lt!9573)))

(declare-fun lt!9572 () Unit!519)

(declare-fun e!16040 () Unit!519)

(assert (=> d!4669 (= lt!9572 e!16040)))

(declare-fun c!3393 () Bool)

(assert (=> d!4669 (= c!3393 lt!9573)))

(assert (=> d!4669 (= lt!9573 (containsKey!24 (toList!298 (+!45 lt!8470 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))) lt!8469))))

(assert (=> d!4669 (= (contains!230 (+!45 lt!8470 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138)))) lt!8469) lt!9574)))

(declare-fun b!24836 () Bool)

(declare-fun lt!9571 () Unit!519)

(assert (=> b!24836 (= e!16040 lt!9571)))

(assert (=> b!24836 (= lt!9571 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (+!45 lt!8470 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))) lt!8469))))

(assert (=> b!24836 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8470 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))) lt!8469))))

(declare-fun b!24837 () Bool)

(declare-fun Unit!595 () Unit!519)

(assert (=> b!24837 (= e!16040 Unit!595)))

(declare-fun b!24838 () Bool)

(assert (=> b!24838 (= e!16041 (isDefined!22 (getValueByKey!60 (toList!298 (+!45 lt!8470 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))) lt!8469)))))

(assert (= (and d!4669 c!3393) b!24836))

(assert (= (and d!4669 (not c!3393)) b!24837))

(assert (= (and d!4669 (not res!15075)) b!24838))

(declare-fun m!19901 () Bool)

(assert (=> d!4669 m!19901))

(declare-fun m!19903 () Bool)

(assert (=> b!24836 m!19903))

(declare-fun m!19905 () Bool)

(assert (=> b!24836 m!19905))

(assert (=> b!24836 m!19905))

(declare-fun m!19907 () Bool)

(assert (=> b!24836 m!19907))

(assert (=> b!24838 m!19905))

(assert (=> b!24838 m!19905))

(assert (=> b!24838 m!19907))

(assert (=> b!23492 d!4669))

(declare-fun d!4671 () Bool)

(declare-fun e!16042 () Bool)

(assert (=> d!4671 e!16042))

(declare-fun res!15076 () Bool)

(assert (=> d!4671 (=> (not res!15076) (not e!16042))))

(declare-fun lt!9577 () ListLongMap!565)

(assert (=> d!4671 (= res!15076 (contains!230 lt!9577 (_1!493 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9575 () List!565)

(assert (=> d!4671 (= lt!9577 (ListLongMap!566 lt!9575))))

(declare-fun lt!9576 () Unit!519)

(declare-fun lt!9578 () Unit!519)

(assert (=> d!4671 (= lt!9576 lt!9578)))

(assert (=> d!4671 (= (getValueByKey!60 lt!9575 (_1!493 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4671 (= lt!9578 (lemmaContainsTupThenGetReturnValue!18 lt!9575 (_1!493 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4671 (= lt!9575 (insertStrictlySorted!18 (toList!298 lt!8476) (_1!493 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4671 (= (+!45 lt!8476 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138)))) lt!9577)))

(declare-fun b!24839 () Bool)

(declare-fun res!15077 () Bool)

(assert (=> b!24839 (=> (not res!15077) (not e!16042))))

(assert (=> b!24839 (= res!15077 (= (getValueByKey!60 (toList!298 lt!9577) (_1!493 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24840 () Bool)

(assert (=> b!24840 (= e!16042 (contains!231 (toList!298 lt!9577) (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4671 res!15076) b!24839))

(assert (= (and b!24839 res!15077) b!24840))

(declare-fun m!19909 () Bool)

(assert (=> d!4671 m!19909))

(declare-fun m!19911 () Bool)

(assert (=> d!4671 m!19911))

(declare-fun m!19913 () Bool)

(assert (=> d!4671 m!19913))

(declare-fun m!19915 () Bool)

(assert (=> d!4671 m!19915))

(declare-fun m!19917 () Bool)

(assert (=> b!24839 m!19917))

(declare-fun m!19919 () Bool)

(assert (=> b!24840 m!19919))

(assert (=> b!23492 d!4671))

(declare-fun d!4673 () Bool)

(assert (=> d!4673 (= (apply!29 (+!45 lt!8476 (tuple2!971 lt!8465 (minValue!1665 (_2!487 lt!8138)))) lt!8461) (apply!29 lt!8476 lt!8461))))

(declare-fun lt!9579 () Unit!519)

(assert (=> d!4673 (= lt!9579 (choose!211 lt!8476 lt!8465 (minValue!1665 (_2!487 lt!8138)) lt!8461))))

(declare-fun e!16043 () Bool)

(assert (=> d!4673 e!16043))

(declare-fun res!15078 () Bool)

(assert (=> d!4673 (=> (not res!15078) (not e!16043))))

(assert (=> d!4673 (= res!15078 (contains!230 lt!8476 lt!8461))))

(assert (=> d!4673 (= (addApplyDifferent!14 lt!8476 lt!8465 (minValue!1665 (_2!487 lt!8138)) lt!8461) lt!9579)))

(declare-fun b!24841 () Bool)

(assert (=> b!24841 (= e!16043 (not (= lt!8461 lt!8465)))))

(assert (= (and d!4673 res!15078) b!24841))

(assert (=> d!4673 m!17034))

(declare-fun m!19921 () Bool)

(assert (=> d!4673 m!19921))

(assert (=> d!4673 m!17024))

(declare-fun m!19923 () Bool)

(assert (=> d!4673 m!19923))

(assert (=> d!4673 m!17024))

(assert (=> d!4673 m!17032))

(assert (=> b!23492 d!4673))

(declare-fun d!4675 () Bool)

(assert (=> d!4675 (= (apply!29 (+!45 lt!8468 (tuple2!971 lt!8462 (zeroValue!1665 (_2!487 lt!8138)))) lt!8464) (apply!29 lt!8468 lt!8464))))

(declare-fun lt!9580 () Unit!519)

(assert (=> d!4675 (= lt!9580 (choose!211 lt!8468 lt!8462 (zeroValue!1665 (_2!487 lt!8138)) lt!8464))))

(declare-fun e!16044 () Bool)

(assert (=> d!4675 e!16044))

(declare-fun res!15079 () Bool)

(assert (=> d!4675 (=> (not res!15079) (not e!16044))))

(assert (=> d!4675 (= res!15079 (contains!230 lt!8468 lt!8464))))

(assert (=> d!4675 (= (addApplyDifferent!14 lt!8468 lt!8462 (zeroValue!1665 (_2!487 lt!8138)) lt!8464) lt!9580)))

(declare-fun b!24842 () Bool)

(assert (=> b!24842 (= e!16044 (not (= lt!8464 lt!8462)))))

(assert (= (and d!4675 res!15079) b!24842))

(assert (=> d!4675 m!17022))

(declare-fun m!19925 () Bool)

(assert (=> d!4675 m!19925))

(assert (=> d!4675 m!17008))

(declare-fun m!19927 () Bool)

(assert (=> d!4675 m!19927))

(assert (=> d!4675 m!17008))

(assert (=> d!4675 m!17010))

(assert (=> b!23492 d!4675))

(declare-fun d!4677 () Bool)

(assert (=> d!4677 (= (apply!29 lt!8468 lt!8464) (get!391 (getValueByKey!60 (toList!298 lt!8468) lt!8464)))))

(declare-fun bs!1041 () Bool)

(assert (= bs!1041 d!4677))

(declare-fun m!19929 () Bool)

(assert (=> bs!1041 m!19929))

(assert (=> bs!1041 m!19929))

(declare-fun m!19931 () Bool)

(assert (=> bs!1041 m!19931))

(assert (=> b!23492 d!4677))

(declare-fun d!4679 () Bool)

(assert (=> d!4679 (= (apply!29 (+!45 lt!8473 (tuple2!971 lt!8471 (minValue!1665 (_2!487 lt!8138)))) lt!8460) (apply!29 lt!8473 lt!8460))))

(declare-fun lt!9581 () Unit!519)

(assert (=> d!4679 (= lt!9581 (choose!211 lt!8473 lt!8471 (minValue!1665 (_2!487 lt!8138)) lt!8460))))

(declare-fun e!16045 () Bool)

(assert (=> d!4679 e!16045))

(declare-fun res!15080 () Bool)

(assert (=> d!4679 (=> (not res!15080) (not e!16045))))

(assert (=> d!4679 (= res!15080 (contains!230 lt!8473 lt!8460))))

(assert (=> d!4679 (= (addApplyDifferent!14 lt!8473 lt!8471 (minValue!1665 (_2!487 lt!8138)) lt!8460) lt!9581)))

(declare-fun b!24843 () Bool)

(assert (=> b!24843 (= e!16045 (not (= lt!8460 lt!8471)))))

(assert (= (and d!4679 res!15080) b!24843))

(assert (=> d!4679 m!17014))

(declare-fun m!19933 () Bool)

(assert (=> d!4679 m!19933))

(assert (=> d!4679 m!17018))

(declare-fun m!19935 () Bool)

(assert (=> d!4679 m!19935))

(assert (=> d!4679 m!17018))

(assert (=> d!4679 m!17020))

(assert (=> b!23492 d!4679))

(declare-fun d!4681 () Bool)

(declare-fun e!16046 () Bool)

(assert (=> d!4681 e!16046))

(declare-fun res!15081 () Bool)

(assert (=> d!4681 (=> (not res!15081) (not e!16046))))

(declare-fun lt!9584 () ListLongMap!565)

(assert (=> d!4681 (= res!15081 (contains!230 lt!9584 (_1!493 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9582 () List!565)

(assert (=> d!4681 (= lt!9584 (ListLongMap!566 lt!9582))))

(declare-fun lt!9583 () Unit!519)

(declare-fun lt!9585 () Unit!519)

(assert (=> d!4681 (= lt!9583 lt!9585)))

(assert (=> d!4681 (= (getValueByKey!60 lt!9582 (_1!493 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4681 (= lt!9585 (lemmaContainsTupThenGetReturnValue!18 lt!9582 (_1!493 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4681 (= lt!9582 (insertStrictlySorted!18 (toList!298 lt!8470) (_1!493 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4681 (= (+!45 lt!8470 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138)))) lt!9584)))

(declare-fun b!24844 () Bool)

(declare-fun res!15082 () Bool)

(assert (=> b!24844 (=> (not res!15082) (not e!16046))))

(assert (=> b!24844 (= res!15082 (= (getValueByKey!60 (toList!298 lt!9584) (_1!493 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24845 () Bool)

(assert (=> b!24845 (= e!16046 (contains!231 (toList!298 lt!9584) (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4681 res!15081) b!24844))

(assert (= (and b!24844 res!15082) b!24845))

(declare-fun m!19937 () Bool)

(assert (=> d!4681 m!19937))

(declare-fun m!19939 () Bool)

(assert (=> d!4681 m!19939))

(declare-fun m!19941 () Bool)

(assert (=> d!4681 m!19941))

(declare-fun m!19943 () Bool)

(assert (=> d!4681 m!19943))

(declare-fun m!19945 () Bool)

(assert (=> b!24844 m!19945))

(declare-fun m!19947 () Bool)

(assert (=> b!24845 m!19947))

(assert (=> b!23492 d!4681))

(declare-fun d!4683 () Bool)

(assert (=> d!4683 (contains!230 (+!45 lt!8470 (tuple2!971 lt!8455 (zeroValue!1665 (_2!487 lt!8138)))) lt!8469)))

(declare-fun lt!9586 () Unit!519)

(assert (=> d!4683 (= lt!9586 (choose!212 lt!8470 lt!8455 (zeroValue!1665 (_2!487 lt!8138)) lt!8469))))

(assert (=> d!4683 (contains!230 lt!8470 lt!8469)))

(assert (=> d!4683 (= (addStillContains!14 lt!8470 lt!8455 (zeroValue!1665 (_2!487 lt!8138)) lt!8469) lt!9586)))

(declare-fun bs!1042 () Bool)

(assert (= bs!1042 d!4683))

(assert (=> bs!1042 m!17028))

(assert (=> bs!1042 m!17028))

(assert (=> bs!1042 m!17030))

(declare-fun m!19949 () Bool)

(assert (=> bs!1042 m!19949))

(declare-fun m!19951 () Bool)

(assert (=> bs!1042 m!19951))

(assert (=> b!23492 d!4683))

(declare-fun d!4685 () Bool)

(assert (=> d!4685 (= (apply!29 lt!8473 lt!8460) (get!391 (getValueByKey!60 (toList!298 lt!8473) lt!8460)))))

(declare-fun bs!1043 () Bool)

(assert (= bs!1043 d!4685))

(declare-fun m!19953 () Bool)

(assert (=> bs!1043 m!19953))

(assert (=> bs!1043 m!19953))

(declare-fun m!19955 () Bool)

(assert (=> bs!1043 m!19955))

(assert (=> b!23492 d!4685))

(declare-fun b!24846 () Bool)

(declare-fun e!16047 () Bool)

(declare-fun call!2199 () Bool)

(assert (=> b!24846 (= e!16047 call!2199)))

(declare-fun b!24847 () Bool)

(declare-fun e!16050 () Bool)

(assert (=> b!24847 (= e!16050 e!16047)))

(declare-fun c!3394 () Bool)

(assert (=> b!24847 (= c!3394 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun d!4687 () Bool)

(declare-fun res!15083 () Bool)

(declare-fun e!16048 () Bool)

(assert (=> d!4687 (=> res!15083 e!16048)))

(assert (=> d!4687 (= res!15083 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8141))))))

(assert (=> d!4687 (= (arrayNoDuplicates!0 (_keys!3163 lt!8141) #b00000000000000000000000000000000 Nil!563) e!16048)))

(declare-fun bm!2196 () Bool)

(assert (=> bm!2196 (= call!2199 (arrayNoDuplicates!0 (_keys!3163 lt!8141) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3394 (Cons!562 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000) Nil!563) Nil!563)))))

(declare-fun b!24848 () Bool)

(assert (=> b!24848 (= e!16047 call!2199)))

(declare-fun b!24849 () Bool)

(assert (=> b!24849 (= e!16048 e!16050)))

(declare-fun res!15085 () Bool)

(assert (=> b!24849 (=> (not res!15085) (not e!16050))))

(declare-fun e!16049 () Bool)

(assert (=> b!24849 (= res!15085 (not e!16049))))

(declare-fun res!15084 () Bool)

(assert (=> b!24849 (=> (not res!15084) (not e!16049))))

(assert (=> b!24849 (= res!15084 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(declare-fun b!24850 () Bool)

(assert (=> b!24850 (= e!16049 (contains!232 Nil!563 (select (arr!597 (_keys!3163 lt!8141)) #b00000000000000000000000000000000)))))

(assert (= (and d!4687 (not res!15083)) b!24849))

(assert (= (and b!24849 res!15084) b!24850))

(assert (= (and b!24849 res!15085) b!24847))

(assert (= (and b!24847 c!3394) b!24848))

(assert (= (and b!24847 (not c!3394)) b!24846))

(assert (= (or b!24848 b!24846) bm!2196))

(assert (=> b!24847 m!17198))

(assert (=> b!24847 m!17198))

(assert (=> b!24847 m!17310))

(assert (=> bm!2196 m!17198))

(declare-fun m!19957 () Bool)

(assert (=> bm!2196 m!19957))

(assert (=> b!24849 m!17198))

(assert (=> b!24849 m!17198))

(assert (=> b!24849 m!17310))

(assert (=> b!24850 m!17198))

(assert (=> b!24850 m!17198))

(declare-fun m!19959 () Bool)

(assert (=> b!24850 m!19959))

(assert (=> b!23399 d!4687))

(declare-fun b!24851 () Bool)

(declare-fun e!16051 () Bool)

(declare-fun call!2200 () Bool)

(assert (=> b!24851 (= e!16051 call!2200)))

(declare-fun b!24852 () Bool)

(declare-fun e!16054 () Bool)

(assert (=> b!24852 (= e!16054 e!16051)))

(declare-fun c!3395 () Bool)

(assert (=> b!24852 (= c!3395 (validKeyInArray!0 (select (arr!597 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(declare-fun d!4689 () Bool)

(declare-fun res!15086 () Bool)

(declare-fun e!16052 () Bool)

(assert (=> d!4689 (=> res!15086 e!16052)))

(assert (=> d!4689 (= res!15086 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (v!1601 (underlying!115 thiss!938))))))))

(assert (=> d!4689 (= (arrayNoDuplicates!0 (_keys!3163 (v!1601 (underlying!115 thiss!938))) #b00000000000000000000000000000000 Nil!563) e!16052)))

(declare-fun bm!2197 () Bool)

(assert (=> bm!2197 (= call!2200 (arrayNoDuplicates!0 (_keys!3163 (v!1601 (underlying!115 thiss!938))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3395 (Cons!562 (select (arr!597 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000) Nil!563) Nil!563)))))

(declare-fun b!24853 () Bool)

(assert (=> b!24853 (= e!16051 call!2200)))

(declare-fun b!24854 () Bool)

(assert (=> b!24854 (= e!16052 e!16054)))

(declare-fun res!15088 () Bool)

(assert (=> b!24854 (=> (not res!15088) (not e!16054))))

(declare-fun e!16053 () Bool)

(assert (=> b!24854 (= res!15088 (not e!16053))))

(declare-fun res!15087 () Bool)

(assert (=> b!24854 (=> (not res!15087) (not e!16053))))

(assert (=> b!24854 (= res!15087 (validKeyInArray!0 (select (arr!597 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(declare-fun b!24855 () Bool)

(assert (=> b!24855 (= e!16053 (contains!232 Nil!563 (select (arr!597 (_keys!3163 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000000)))))

(assert (= (and d!4689 (not res!15086)) b!24854))

(assert (= (and b!24854 res!15087) b!24855))

(assert (= (and b!24854 res!15088) b!24852))

(assert (= (and b!24852 c!3395) b!24853))

(assert (= (and b!24852 (not c!3395)) b!24851))

(assert (= (or b!24853 b!24851) bm!2197))

(assert (=> b!24852 m!17703))

(assert (=> b!24852 m!17703))

(assert (=> b!24852 m!17705))

(assert (=> bm!2197 m!17703))

(declare-fun m!19961 () Bool)

(assert (=> bm!2197 m!19961))

(assert (=> b!24854 m!17703))

(assert (=> b!24854 m!17703))

(assert (=> b!24854 m!17705))

(assert (=> b!24855 m!17703))

(assert (=> b!24855 m!17703))

(declare-fun m!19963 () Bool)

(assert (=> b!24855 m!19963))

(assert (=> b!23558 d!4689))

(declare-fun d!4691 () Bool)

(declare-fun e!16056 () Bool)

(assert (=> d!4691 e!16056))

(declare-fun res!15089 () Bool)

(assert (=> d!4691 (=> res!15089 e!16056)))

(declare-fun lt!9590 () Bool)

(assert (=> d!4691 (= res!15089 (not lt!9590))))

(declare-fun lt!9589 () Bool)

(assert (=> d!4691 (= lt!9590 lt!9589)))

(declare-fun lt!9588 () Unit!519)

(declare-fun e!16055 () Unit!519)

(assert (=> d!4691 (= lt!9588 e!16055)))

(declare-fun c!3396 () Bool)

(assert (=> d!4691 (= c!3396 lt!9589)))

(assert (=> d!4691 (= lt!9589 (containsKey!24 (toList!298 lt!8770) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4691 (= (contains!230 lt!8770 #b0000000000000000000000000000000000000000000000000000000000000000) lt!9590)))

(declare-fun b!24856 () Bool)

(declare-fun lt!9587 () Unit!519)

(assert (=> b!24856 (= e!16055 lt!9587)))

(assert (=> b!24856 (= lt!9587 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 lt!8770) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!24856 (isDefined!22 (getValueByKey!60 (toList!298 lt!8770) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24857 () Bool)

(declare-fun Unit!596 () Unit!519)

(assert (=> b!24857 (= e!16055 Unit!596)))

(declare-fun b!24858 () Bool)

(assert (=> b!24858 (= e!16056 (isDefined!22 (getValueByKey!60 (toList!298 lt!8770) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!4691 c!3396) b!24856))

(assert (= (and d!4691 (not c!3396)) b!24857))

(assert (= (and d!4691 (not res!15089)) b!24858))

(declare-fun m!19965 () Bool)

(assert (=> d!4691 m!19965))

(declare-fun m!19967 () Bool)

(assert (=> b!24856 m!19967))

(assert (=> b!24856 m!18715))

(assert (=> b!24856 m!18715))

(declare-fun m!19969 () Bool)

(assert (=> b!24856 m!19969))

(assert (=> b!24858 m!18715))

(assert (=> b!24858 m!18715))

(assert (=> b!24858 m!19969))

(assert (=> bm!2040 d!4691))

(declare-fun d!4693 () Bool)

(declare-fun lt!9591 () (_ BitVec 32))

(assert (=> d!4693 (and (or (bvslt lt!9591 #b00000000000000000000000000000000) (bvsge lt!9591 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (and (bvsge lt!9591 #b00000000000000000000000000000000) (bvslt lt!9591 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))))) (bvsge lt!9591 #b00000000000000000000000000000000) (bvslt lt!9591 (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (= (select (arr!597 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) lt!9591) (_1!493 lt!8312)))))

(declare-fun e!16057 () (_ BitVec 32))

(assert (=> d!4693 (= lt!9591 e!16057)))

(declare-fun c!3397 () Bool)

(assert (=> d!4693 (= c!3397 (= (select (arr!597 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_1!493 lt!8312)))))

(assert (=> d!4693 (and (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)))) (bvslt (size!693 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001))) #b01111111111111111111111111111111))))

(assert (=> d!4693 (= (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!493 lt!8312) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) lt!9591)))

(declare-fun b!24859 () Bool)

(assert (=> b!24859 (= e!16057 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))

(declare-fun b!24860 () Bool)

(assert (=> b!24860 (= e!16057 (arrayScanForKey!0 (array!1264 ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) (bvadd (computeNewMask!30 thiss!938 (mask!4729 (v!1601 (underlying!115 thiss!938))) (_vacant!149 (v!1601 (underlying!115 thiss!938))) (_size!149 (v!1601 (underlying!115 thiss!938)))) #b00000000000000000000000000000001)) (_1!493 lt!8312) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!4693 c!3397) b!24859))

(assert (= (and d!4693 (not c!3397)) b!24860))

(declare-fun m!19971 () Bool)

(assert (=> d!4693 m!19971))

(declare-fun m!19973 () Bool)

(assert (=> d!4693 m!19973))

(declare-fun m!19975 () Bool)

(assert (=> b!24860 m!19975))

(assert (=> b!23477 d!4693))

(declare-fun b!24861 () Bool)

(declare-fun e!16058 () Bool)

(declare-fun call!2201 () Bool)

(assert (=> b!24861 (= e!16058 call!2201)))

(declare-fun b!24862 () Bool)

(declare-fun e!16060 () Bool)

(assert (=> b!24862 (= e!16060 call!2201)))

(declare-fun b!24863 () Bool)

(declare-fun e!16059 () Bool)

(assert (=> b!24863 (= e!16059 e!16058)))

(declare-fun c!3398 () Bool)

(assert (=> b!24863 (= c!3398 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000)))))

(declare-fun d!4695 () Bool)

(declare-fun res!15091 () Bool)

(assert (=> d!4695 (=> res!15091 e!16059)))

(assert (=> d!4695 (= res!15091 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> d!4695 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))) e!16059)))

(declare-fun bm!2198 () Bool)

(assert (=> bm!2198 (= call!2201 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!24864 () Bool)

(assert (=> b!24864 (= e!16058 e!16060)))

(declare-fun lt!9592 () (_ BitVec 64))

(assert (=> b!24864 (= lt!9592 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000))))

(declare-fun lt!9594 () Unit!519)

(assert (=> b!24864 (= lt!9594 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 (_2!487 lt!8138)) lt!9592 #b00000000000000000000000000000000))))

(assert (=> b!24864 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8138)) lt!9592 #b00000000000000000000000000000000)))

(declare-fun lt!9593 () Unit!519)

(assert (=> b!24864 (= lt!9593 lt!9594)))

(declare-fun res!15090 () Bool)

(assert (=> b!24864 (= res!15090 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) #b00000000000000000000000000000000) (_keys!3163 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138))) (Found!55 #b00000000000000000000000000000000)))))

(assert (=> b!24864 (=> (not res!15090) (not e!16060))))

(assert (= (and d!4695 (not res!15091)) b!24863))

(assert (= (and b!24863 c!3398) b!24864))

(assert (= (and b!24863 (not c!3398)) b!24861))

(assert (= (and b!24864 res!15090) b!24862))

(assert (= (or b!24862 b!24861) bm!2198))

(assert (=> b!24863 m!16908))

(assert (=> b!24863 m!16908))

(assert (=> b!24863 m!16922))

(declare-fun m!19977 () Bool)

(assert (=> bm!2198 m!19977))

(assert (=> b!24864 m!16908))

(declare-fun m!19979 () Bool)

(assert (=> b!24864 m!19979))

(declare-fun m!19981 () Bool)

(assert (=> b!24864 m!19981))

(assert (=> b!24864 m!16908))

(declare-fun m!19983 () Bool)

(assert (=> b!24864 m!19983))

(assert (=> b!23706 d!4695))

(declare-fun d!4697 () Bool)

(declare-fun e!16061 () Bool)

(assert (=> d!4697 e!16061))

(declare-fun res!15092 () Bool)

(assert (=> d!4697 (=> (not res!15092) (not e!16061))))

(declare-fun lt!9597 () ListLongMap!565)

(assert (=> d!4697 (= res!15092 (contains!230 lt!9597 (_1!493 (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(declare-fun lt!9595 () List!565)

(assert (=> d!4697 (= lt!9597 (ListLongMap!566 lt!9595))))

(declare-fun lt!9596 () Unit!519)

(declare-fun lt!9598 () Unit!519)

(assert (=> d!4697 (= lt!9596 lt!9598)))

(assert (=> d!4697 (= (getValueByKey!60 lt!9595 (_1!493 (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))) (Some!65 (_2!493 (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4697 (= lt!9598 (lemmaContainsTupThenGetReturnValue!18 lt!9595 (_1!493 (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (_2!493 (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4697 (= lt!9595 (insertStrictlySorted!18 (toList!298 (ite c!3082 call!2022 (ite c!3083 call!2019 call!2020))) (_1!493 (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) (_2!493 (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))))))

(assert (=> d!4697 (= (+!45 (ite c!3082 call!2022 (ite c!3083 call!2019 call!2020)) (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))) lt!9597)))

(declare-fun b!24865 () Bool)

(declare-fun res!15093 () Bool)

(assert (=> b!24865 (=> (not res!15093) (not e!16061))))

(assert (=> b!24865 (= res!15093 (= (getValueByKey!60 (toList!298 lt!9597) (_1!493 (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141))))) (Some!65 (_2!493 (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))))

(declare-fun b!24866 () Bool)

(assert (=> b!24866 (= e!16061 (contains!231 (toList!298 lt!9597) (ite (or c!3082 c!3083) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 lt!8141)) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 lt!8141)))))))

(assert (= (and d!4697 res!15092) b!24865))

(assert (= (and b!24865 res!15093) b!24866))

(declare-fun m!19985 () Bool)

(assert (=> d!4697 m!19985))

(declare-fun m!19987 () Bool)

(assert (=> d!4697 m!19987))

(declare-fun m!19989 () Bool)

(assert (=> d!4697 m!19989))

(declare-fun m!19991 () Bool)

(assert (=> d!4697 m!19991))

(declare-fun m!19993 () Bool)

(assert (=> b!24865 m!19993))

(declare-fun m!19995 () Bool)

(assert (=> b!24866 m!19995))

(assert (=> bm!2016 d!4697))

(assert (=> b!23470 d!4071))

(declare-fun b!24867 () Bool)

(declare-fun e!16062 () Bool)

(declare-fun call!2202 () Bool)

(assert (=> b!24867 (= e!16062 call!2202)))

(declare-fun b!24868 () Bool)

(declare-fun e!16064 () Bool)

(assert (=> b!24868 (= e!16064 call!2202)))

(declare-fun b!24869 () Bool)

(declare-fun e!16063 () Bool)

(assert (=> b!24869 (= e!16063 e!16062)))

(declare-fun c!3399 () Bool)

(assert (=> b!24869 (= c!3399 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000)))))

(declare-fun d!4699 () Bool)

(declare-fun res!15095 () Bool)

(assert (=> d!4699 (=> res!15095 e!16063)))

(assert (=> d!4699 (= res!15095 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8336)))))))

(assert (=> d!4699 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336))) e!16063)))

(declare-fun bm!2199 () Bool)

(assert (=> bm!2199 (= call!2202 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336))))))

(declare-fun b!24870 () Bool)

(assert (=> b!24870 (= e!16062 e!16064)))

(declare-fun lt!9599 () (_ BitVec 64))

(assert (=> b!24870 (= lt!9599 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000))))

(declare-fun lt!9601 () Unit!519)

(assert (=> b!24870 (= lt!9601 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 (_2!487 lt!8336)) lt!9599 #b00000000000000000000000000000000))))

(assert (=> b!24870 (arrayContainsKey!0 (_keys!3163 (_2!487 lt!8336)) lt!9599 #b00000000000000000000000000000000)))

(declare-fun lt!9600 () Unit!519)

(assert (=> b!24870 (= lt!9600 lt!9601)))

(declare-fun res!15094 () Bool)

(assert (=> b!24870 (= res!15094 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 (_2!487 lt!8336))) #b00000000000000000000000000000000) (_keys!3163 (_2!487 lt!8336)) (mask!4729 (_2!487 lt!8336))) (Found!55 #b00000000000000000000000000000000)))))

(assert (=> b!24870 (=> (not res!15094) (not e!16064))))

(assert (= (and d!4699 (not res!15095)) b!24869))

(assert (= (and b!24869 c!3399) b!24870))

(assert (= (and b!24869 (not c!3399)) b!24867))

(assert (= (and b!24870 res!15094) b!24868))

(assert (= (or b!24868 b!24867) bm!2199))

(assert (=> b!24869 m!17677))

(assert (=> b!24869 m!17677))

(assert (=> b!24869 m!17679))

(declare-fun m!19997 () Bool)

(assert (=> bm!2199 m!19997))

(assert (=> b!24870 m!17677))

(declare-fun m!19999 () Bool)

(assert (=> b!24870 m!19999))

(declare-fun m!20001 () Bool)

(assert (=> b!24870 m!20001))

(assert (=> b!24870 m!17677))

(declare-fun m!20003 () Bool)

(assert (=> b!24870 m!20003))

(assert (=> b!23703 d!4699))

(declare-fun b!24871 () Bool)

(declare-fun e!16065 () Bool)

(declare-fun call!2203 () Bool)

(assert (=> b!24871 (= e!16065 call!2203)))

(declare-fun b!24872 () Bool)

(declare-fun e!16067 () Bool)

(assert (=> b!24872 (= e!16067 call!2203)))

(declare-fun b!24873 () Bool)

(declare-fun e!16066 () Bool)

(assert (=> b!24873 (= e!16066 e!16065)))

(declare-fun c!3400 () Bool)

(assert (=> b!24873 (= c!3400 (validKeyInArray!0 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000)))))

(declare-fun d!4701 () Bool)

(declare-fun res!15097 () Bool)

(assert (=> d!4701 (=> res!15097 e!16066)))

(assert (=> d!4701 (= res!15097 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 lt!8306))))))

(assert (=> d!4701 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3163 lt!8306) (mask!4729 lt!8306)) e!16066)))

(declare-fun bm!2200 () Bool)

(assert (=> bm!2200 (= call!2203 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3163 lt!8306) (mask!4729 lt!8306)))))

(declare-fun b!24874 () Bool)

(assert (=> b!24874 (= e!16065 e!16067)))

(declare-fun lt!9602 () (_ BitVec 64))

(assert (=> b!24874 (= lt!9602 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000))))

(declare-fun lt!9604 () Unit!519)

(assert (=> b!24874 (= lt!9604 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3163 lt!8306) lt!9602 #b00000000000000000000000000000000))))

(assert (=> b!24874 (arrayContainsKey!0 (_keys!3163 lt!8306) lt!9602 #b00000000000000000000000000000000)))

(declare-fun lt!9603 () Unit!519)

(assert (=> b!24874 (= lt!9603 lt!9604)))

(declare-fun res!15096 () Bool)

(assert (=> b!24874 (= res!15096 (= (seekEntryOrOpen!0 (select (arr!597 (_keys!3163 lt!8306)) #b00000000000000000000000000000000) (_keys!3163 lt!8306) (mask!4729 lt!8306)) (Found!55 #b00000000000000000000000000000000)))))

(assert (=> b!24874 (=> (not res!15096) (not e!16067))))

(assert (= (and d!4701 (not res!15097)) b!24873))

(assert (= (and b!24873 c!3400) b!24874))

(assert (= (and b!24873 (not c!3400)) b!24871))

(assert (= (and b!24874 res!15096) b!24872))

(assert (= (or b!24872 b!24871) bm!2200))

(assert (=> b!24873 m!17663))

(assert (=> b!24873 m!17663))

(assert (=> b!24873 m!17665))

(declare-fun m!20005 () Bool)

(assert (=> bm!2200 m!20005))

(assert (=> b!24874 m!17663))

(declare-fun m!20007 () Bool)

(assert (=> b!24874 m!20007))

(declare-fun m!20009 () Bool)

(assert (=> b!24874 m!20009))

(assert (=> b!24874 m!17663))

(declare-fun m!20011 () Bool)

(assert (=> b!24874 m!20011))

(assert (=> b!23576 d!4701))

(assert (=> d!4025 d!4061))

(declare-fun d!4703 () Bool)

(declare-fun e!16068 () Bool)

(assert (=> d!4703 e!16068))

(declare-fun res!15098 () Bool)

(assert (=> d!4703 (=> (not res!15098) (not e!16068))))

(assert (=> d!4703 (= res!15098 (and (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000000) (bvslt (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (size!693 (_keys!3163 (_2!487 lt!8138))))))))

(declare-fun lt!9605 () Unit!519)

(assert (=> d!4703 (= lt!9605 (choose!41 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) lt!8628 lt!8627))))

(assert (=> d!4703 (bvslt (size!693 (_keys!3163 (_2!487 lt!8138))) #b01111111111111111111111111111111)))

(assert (=> d!4703 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3163 (_2!487 lt!8138)) #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) lt!8628 lt!8627) lt!9605)))

(declare-fun b!24875 () Bool)

(assert (=> b!24875 (= e!16068 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) lt!8628 lt!8627))))

(assert (= (and d!4703 res!15098) b!24875))

(declare-fun m!20013 () Bool)

(assert (=> d!4703 m!20013))

(assert (=> b!24875 m!17230))

(assert (=> b!24875 m!17214))

(assert (=> d!4025 d!4703))

(assert (=> d!4025 d!4619))

(declare-fun d!4705 () Bool)

(declare-fun res!15099 () Bool)

(declare-fun e!16069 () Bool)

(assert (=> d!4705 (=> res!15099 e!16069)))

(assert (=> d!4705 (= res!15099 (= (select (arr!597 lt!8615) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!4705 (= (arrayContainsKey!0 lt!8615 #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000) e!16069)))

(declare-fun b!24876 () Bool)

(declare-fun e!16070 () Bool)

(assert (=> b!24876 (= e!16069 e!16070)))

(declare-fun res!15100 () Bool)

(assert (=> b!24876 (=> (not res!15100) (not e!16070))))

(assert (=> b!24876 (= res!15100 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 lt!8615)))))

(declare-fun b!24877 () Bool)

(assert (=> b!24877 (= e!16070 (arrayContainsKey!0 lt!8615 #b1000000000000000000000000000000000000000000000000000000000000000 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!4705 (not res!15099)) b!24876))

(assert (= (and b!24876 res!15100) b!24877))

(declare-fun m!20015 () Bool)

(assert (=> d!4705 m!20015))

(declare-fun m!20017 () Bool)

(assert (=> b!24877 m!20017))

(assert (=> d!4025 d!4705))

(declare-fun d!4707 () Bool)

(declare-fun e!16071 () Bool)

(assert (=> d!4707 e!16071))

(declare-fun res!15101 () Bool)

(assert (=> d!4707 (=> (not res!15101) (not e!16071))))

(assert (=> d!4707 (= res!15101 (and (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000000) (bvslt (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (size!693 lt!8620))))))

(declare-fun lt!9606 () Unit!519)

(assert (=> d!4707 (= lt!9606 (choose!208 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4707 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4707 (= (lemmaValidKeyInArrayIsInListMap!10 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (defaultEntry!1742 (_2!487 lt!8138))) lt!9606)))

(declare-fun b!24878 () Bool)

(assert (=> b!24878 (= e!16071 (contains!230 (getCurrentListMap!129 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (select (arr!597 lt!8620) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)))))))

(assert (= (and d!4707 res!15101) b!24878))

(declare-fun m!20019 () Bool)

(assert (=> d!4707 m!20019))

(assert (=> d!4707 m!16878))

(assert (=> b!24878 m!17236))

(declare-fun m!20021 () Bool)

(assert (=> b!24878 m!20021))

(assert (=> b!24878 m!17236))

(assert (=> b!24878 m!20021))

(declare-fun m!20023 () Bool)

(assert (=> b!24878 m!20023))

(assert (=> d!4025 d!4707))

(declare-fun b!24879 () Bool)

(declare-fun e!16072 () Bool)

(declare-fun call!2204 () Bool)

(assert (=> b!24879 (= e!16072 call!2204)))

(declare-fun b!24880 () Bool)

(declare-fun e!16074 () Bool)

(assert (=> b!24880 (= e!16074 call!2204)))

(declare-fun b!24881 () Bool)

(declare-fun e!16073 () Bool)

(assert (=> b!24881 (= e!16073 e!16072)))

(declare-fun c!3401 () Bool)

(assert (=> b!24881 (= c!3401 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000)))))

(declare-fun d!4709 () Bool)

(declare-fun res!15103 () Bool)

(assert (=> d!4709 (=> res!15103 e!16073)))

(assert (=> d!4709 (= res!15103 (bvsge #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(assert (=> d!4709 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138))) e!16073)))

(declare-fun bm!2201 () Bool)

(assert (=> bm!2201 (= call!2204 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138))))))

(declare-fun b!24882 () Bool)

(assert (=> b!24882 (= e!16072 e!16074)))

(declare-fun lt!9607 () (_ BitVec 64))

(assert (=> b!24882 (= lt!9607 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000))))

(declare-fun lt!9609 () Unit!519)

(assert (=> b!24882 (= lt!9609 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) lt!9607 #b00000000000000000000000000000000))))

(assert (=> b!24882 (arrayContainsKey!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) lt!9607 #b00000000000000000000000000000000)))

(declare-fun lt!9608 () Unit!519)

(assert (=> b!24882 (= lt!9608 lt!9609)))

(declare-fun res!15102 () Bool)

(assert (=> b!24882 (= res!15102 (= (seekEntryOrOpen!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000) (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138))) (Found!55 #b00000000000000000000000000000000)))))

(assert (=> b!24882 (=> (not res!15102) (not e!16074))))

(assert (= (and d!4709 (not res!15103)) b!24881))

(assert (= (and b!24881 c!3401) b!24882))

(assert (= (and b!24881 (not c!3401)) b!24879))

(assert (= (and b!24882 res!15102) b!24880))

(assert (= (or b!24880 b!24879) bm!2201))

(declare-fun m!20025 () Bool)

(assert (=> b!24881 m!20025))

(assert (=> b!24881 m!20025))

(declare-fun m!20027 () Bool)

(assert (=> b!24881 m!20027))

(declare-fun m!20029 () Bool)

(assert (=> bm!2201 m!20029))

(assert (=> b!24882 m!20025))

(declare-fun m!20031 () Bool)

(assert (=> b!24882 m!20031))

(declare-fun m!20033 () Bool)

(assert (=> b!24882 m!20033))

(assert (=> b!24882 m!20025))

(declare-fun m!20035 () Bool)

(assert (=> b!24882 m!20035))

(assert (=> d!4025 d!4709))

(declare-fun b!24883 () Bool)

(declare-fun e!16083 () ListLongMap!565)

(declare-fun call!2207 () ListLongMap!565)

(assert (=> b!24883 (= e!16083 call!2207)))

(declare-fun bm!2202 () Bool)

(declare-fun call!2208 () ListLongMap!565)

(declare-fun call!2210 () ListLongMap!565)

(assert (=> bm!2202 (= call!2208 call!2210)))

(declare-fun b!24884 () Bool)

(declare-fun e!16079 () Bool)

(declare-fun e!16087 () Bool)

(assert (=> b!24884 (= e!16079 e!16087)))

(declare-fun c!3403 () Bool)

(assert (=> b!24884 (= c!3403 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun lt!9614 () ListLongMap!565)

(declare-fun e!16078 () Bool)

(declare-fun b!24885 () Bool)

(assert (=> b!24885 (= e!16078 (= (apply!29 lt!9614 (select (arr!597 lt!8620) #b00000000000000000000000000000000)) (get!390 (select (arr!596 lt!8642) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24885 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 lt!8642)))))

(assert (=> b!24885 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8620)))))

(declare-fun bm!2203 () Bool)

(declare-fun call!2206 () ListLongMap!565)

(declare-fun c!3404 () Bool)

(declare-fun c!3405 () Bool)

(declare-fun call!2209 () ListLongMap!565)

(assert (=> bm!2203 (= call!2210 (+!45 (ite c!3404 call!2209 (ite c!3405 call!2206 call!2207)) (ite (or c!3404 c!3405) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun b!24886 () Bool)

(declare-fun res!15109 () Bool)

(assert (=> b!24886 (=> (not res!15109) (not e!16079))))

(declare-fun e!16084 () Bool)

(assert (=> b!24886 (= res!15109 e!16084)))

(declare-fun c!3402 () Bool)

(assert (=> b!24886 (= c!3402 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2204 () Bool)

(declare-fun call!2205 () Bool)

(assert (=> bm!2204 (= call!2205 (contains!230 lt!9614 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24887 () Bool)

(declare-fun e!16076 () Bool)

(assert (=> b!24887 (= e!16087 e!16076)))

(declare-fun res!15107 () Bool)

(declare-fun call!2211 () Bool)

(assert (=> b!24887 (= res!15107 call!2211)))

(assert (=> b!24887 (=> (not res!15107) (not e!16076))))

(declare-fun b!24888 () Bool)

(declare-fun e!16082 () Unit!519)

(declare-fun Unit!597 () Unit!519)

(assert (=> b!24888 (= e!16082 Unit!597)))

(declare-fun b!24889 () Bool)

(assert (=> b!24889 (= e!16087 (not call!2211))))

(declare-fun b!24890 () Bool)

(declare-fun e!16085 () Bool)

(assert (=> b!24890 (= e!16085 (= (apply!29 lt!9614 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!487 lt!8138))))))

(declare-fun bm!2205 () Bool)

(assert (=> bm!2205 (= call!2211 (contains!230 lt!9614 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24891 () Bool)

(assert (=> b!24891 (= e!16084 (not call!2205))))

(declare-fun d!4711 () Bool)

(assert (=> d!4711 e!16079))

(declare-fun res!15106 () Bool)

(assert (=> d!4711 (=> (not res!15106) (not e!16079))))

(assert (=> d!4711 (= res!15106 (or (bvsge #b00000000000000000000000000000000 (size!693 lt!8620)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8620)))))))

(declare-fun lt!9629 () ListLongMap!565)

(assert (=> d!4711 (= lt!9614 lt!9629)))

(declare-fun lt!9621 () Unit!519)

(assert (=> d!4711 (= lt!9621 e!16082)))

(declare-fun c!3406 () Bool)

(declare-fun e!16086 () Bool)

(assert (=> d!4711 (= c!3406 e!16086)))

(declare-fun res!15110 () Bool)

(assert (=> d!4711 (=> (not res!15110) (not e!16086))))

(assert (=> d!4711 (= res!15110 (bvslt #b00000000000000000000000000000000 (size!693 lt!8620)))))

(declare-fun e!16080 () ListLongMap!565)

(assert (=> d!4711 (= lt!9629 e!16080)))

(assert (=> d!4711 (= c!3404 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4711 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4711 (= (getCurrentListMap!129 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!9614)))

(declare-fun b!24892 () Bool)

(assert (=> b!24892 (= e!16076 (= (apply!29 lt!9614 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!487 lt!8138))))))

(declare-fun b!24893 () Bool)

(assert (=> b!24893 (= e!16080 (+!45 call!2210 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))

(declare-fun b!24894 () Bool)

(declare-fun e!16081 () Bool)

(assert (=> b!24894 (= e!16081 e!16078)))

(declare-fun res!15111 () Bool)

(assert (=> b!24894 (=> (not res!15111) (not e!16078))))

(assert (=> b!24894 (= res!15111 (contains!230 lt!9614 (select (arr!597 lt!8620) #b00000000000000000000000000000000)))))

(assert (=> b!24894 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 lt!8620)))))

(declare-fun b!24895 () Bool)

(declare-fun res!15108 () Bool)

(assert (=> b!24895 (=> (not res!15108) (not e!16079))))

(assert (=> b!24895 (= res!15108 e!16081)))

(declare-fun res!15112 () Bool)

(assert (=> b!24895 (=> res!15112 e!16081)))

(declare-fun e!16077 () Bool)

(assert (=> b!24895 (= res!15112 (not e!16077))))

(declare-fun res!15105 () Bool)

(assert (=> b!24895 (=> (not res!15105) (not e!16077))))

(assert (=> b!24895 (= res!15105 (bvslt #b00000000000000000000000000000000 (size!693 lt!8620)))))

(declare-fun b!24896 () Bool)

(assert (=> b!24896 (= e!16083 call!2208)))

(declare-fun b!24897 () Bool)

(declare-fun lt!9611 () Unit!519)

(assert (=> b!24897 (= e!16082 lt!9611)))

(declare-fun lt!9625 () ListLongMap!565)

(assert (=> b!24897 (= lt!9625 (getCurrentListMapNoExtraKeys!15 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9610 () (_ BitVec 64))

(assert (=> b!24897 (= lt!9610 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9624 () (_ BitVec 64))

(assert (=> b!24897 (= lt!9624 (select (arr!597 lt!8620) #b00000000000000000000000000000000))))

(declare-fun lt!9630 () Unit!519)

(assert (=> b!24897 (= lt!9630 (addStillContains!14 lt!9625 lt!9610 (zeroValue!1665 (_2!487 lt!8138)) lt!9624))))

(assert (=> b!24897 (contains!230 (+!45 lt!9625 (tuple2!971 lt!9610 (zeroValue!1665 (_2!487 lt!8138)))) lt!9624)))

(declare-fun lt!9627 () Unit!519)

(assert (=> b!24897 (= lt!9627 lt!9630)))

(declare-fun lt!9631 () ListLongMap!565)

(assert (=> b!24897 (= lt!9631 (getCurrentListMapNoExtraKeys!15 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9620 () (_ BitVec 64))

(assert (=> b!24897 (= lt!9620 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9616 () (_ BitVec 64))

(assert (=> b!24897 (= lt!9616 (select (arr!597 lt!8620) #b00000000000000000000000000000000))))

(declare-fun lt!9622 () Unit!519)

(assert (=> b!24897 (= lt!9622 (addApplyDifferent!14 lt!9631 lt!9620 (minValue!1665 (_2!487 lt!8138)) lt!9616))))

(assert (=> b!24897 (= (apply!29 (+!45 lt!9631 (tuple2!971 lt!9620 (minValue!1665 (_2!487 lt!8138)))) lt!9616) (apply!29 lt!9631 lt!9616))))

(declare-fun lt!9612 () Unit!519)

(assert (=> b!24897 (= lt!9612 lt!9622)))

(declare-fun lt!9623 () ListLongMap!565)

(assert (=> b!24897 (= lt!9623 (getCurrentListMapNoExtraKeys!15 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9617 () (_ BitVec 64))

(assert (=> b!24897 (= lt!9617 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9619 () (_ BitVec 64))

(assert (=> b!24897 (= lt!9619 (select (arr!597 lt!8620) #b00000000000000000000000000000000))))

(declare-fun lt!9618 () Unit!519)

(assert (=> b!24897 (= lt!9618 (addApplyDifferent!14 lt!9623 lt!9617 (zeroValue!1665 (_2!487 lt!8138)) lt!9619))))

(assert (=> b!24897 (= (apply!29 (+!45 lt!9623 (tuple2!971 lt!9617 (zeroValue!1665 (_2!487 lt!8138)))) lt!9619) (apply!29 lt!9623 lt!9619))))

(declare-fun lt!9613 () Unit!519)

(assert (=> b!24897 (= lt!9613 lt!9618)))

(declare-fun lt!9628 () ListLongMap!565)

(assert (=> b!24897 (= lt!9628 (getCurrentListMapNoExtraKeys!15 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9626 () (_ BitVec 64))

(assert (=> b!24897 (= lt!9626 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9615 () (_ BitVec 64))

(assert (=> b!24897 (= lt!9615 (select (arr!597 lt!8620) #b00000000000000000000000000000000))))

(assert (=> b!24897 (= lt!9611 (addApplyDifferent!14 lt!9628 lt!9626 (minValue!1665 (_2!487 lt!8138)) lt!9615))))

(assert (=> b!24897 (= (apply!29 (+!45 lt!9628 (tuple2!971 lt!9626 (minValue!1665 (_2!487 lt!8138)))) lt!9615) (apply!29 lt!9628 lt!9615))))

(declare-fun b!24898 () Bool)

(declare-fun e!16075 () ListLongMap!565)

(assert (=> b!24898 (= e!16075 call!2208)))

(declare-fun b!24899 () Bool)

(assert (=> b!24899 (= e!16080 e!16075)))

(assert (=> b!24899 (= c!3405 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24900 () Bool)

(declare-fun c!3407 () Bool)

(assert (=> b!24900 (= c!3407 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24900 (= e!16075 e!16083)))

(declare-fun bm!2206 () Bool)

(assert (=> bm!2206 (= call!2207 call!2206)))

(declare-fun bm!2207 () Bool)

(assert (=> bm!2207 (= call!2206 call!2209)))

(declare-fun b!24901 () Bool)

(assert (=> b!24901 (= e!16084 e!16085)))

(declare-fun res!15104 () Bool)

(assert (=> b!24901 (= res!15104 call!2205)))

(assert (=> b!24901 (=> (not res!15104) (not e!16085))))

(declare-fun b!24902 () Bool)

(assert (=> b!24902 (= e!16086 (validKeyInArray!0 (select (arr!597 lt!8620) #b00000000000000000000000000000000)))))

(declare-fun bm!2208 () Bool)

(assert (=> bm!2208 (= call!2209 (getCurrentListMapNoExtraKeys!15 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!24903 () Bool)

(assert (=> b!24903 (= e!16077 (validKeyInArray!0 (select (arr!597 lt!8620) #b00000000000000000000000000000000)))))

(assert (= (and d!4711 c!3404) b!24893))

(assert (= (and d!4711 (not c!3404)) b!24899))

(assert (= (and b!24899 c!3405) b!24898))

(assert (= (and b!24899 (not c!3405)) b!24900))

(assert (= (and b!24900 c!3407) b!24896))

(assert (= (and b!24900 (not c!3407)) b!24883))

(assert (= (or b!24896 b!24883) bm!2206))

(assert (= (or b!24898 bm!2206) bm!2207))

(assert (= (or b!24898 b!24896) bm!2202))

(assert (= (or b!24893 bm!2207) bm!2208))

(assert (= (or b!24893 bm!2202) bm!2203))

(assert (= (and d!4711 res!15110) b!24902))

(assert (= (and d!4711 c!3406) b!24897))

(assert (= (and d!4711 (not c!3406)) b!24888))

(assert (= (and d!4711 res!15106) b!24895))

(assert (= (and b!24895 res!15105) b!24903))

(assert (= (and b!24895 (not res!15112)) b!24894))

(assert (= (and b!24894 res!15111) b!24885))

(assert (= (and b!24895 res!15108) b!24886))

(assert (= (and b!24886 c!3402) b!24901))

(assert (= (and b!24886 (not c!3402)) b!24891))

(assert (= (and b!24901 res!15104) b!24890))

(assert (= (or b!24901 b!24891) bm!2204))

(assert (= (and b!24886 res!15109) b!24884))

(assert (= (and b!24884 c!3403) b!24887))

(assert (= (and b!24884 (not c!3403)) b!24889))

(assert (= (and b!24887 res!15107) b!24892))

(assert (= (or b!24887 b!24889) bm!2205))

(declare-fun b_lambda!1635 () Bool)

(assert (=> (not b_lambda!1635) (not b!24885)))

(assert (=> b!24885 t!3232))

(declare-fun b_and!1547 () Bool)

(assert (= b_and!1545 (and (=> t!3232 result!1093) b_and!1547)))

(declare-fun m!20037 () Bool)

(assert (=> b!24894 m!20037))

(assert (=> b!24894 m!20037))

(declare-fun m!20039 () Bool)

(assert (=> b!24894 m!20039))

(declare-fun m!20041 () Bool)

(assert (=> b!24893 m!20041))

(declare-fun m!20043 () Bool)

(assert (=> b!24885 m!20043))

(assert (=> b!24885 m!16916))

(declare-fun m!20045 () Bool)

(assert (=> b!24885 m!20045))

(assert (=> b!24885 m!20037))

(declare-fun m!20047 () Bool)

(assert (=> b!24885 m!20047))

(assert (=> b!24885 m!20037))

(assert (=> b!24885 m!20043))

(assert (=> b!24885 m!16916))

(assert (=> b!24902 m!20037))

(assert (=> b!24902 m!20037))

(declare-fun m!20049 () Bool)

(assert (=> b!24902 m!20049))

(declare-fun m!20051 () Bool)

(assert (=> bm!2203 m!20051))

(assert (=> b!24903 m!20037))

(assert (=> b!24903 m!20037))

(assert (=> b!24903 m!20049))

(declare-fun m!20053 () Bool)

(assert (=> bm!2204 m!20053))

(declare-fun m!20055 () Bool)

(assert (=> b!24892 m!20055))

(declare-fun m!20057 () Bool)

(assert (=> bm!2205 m!20057))

(declare-fun m!20059 () Bool)

(assert (=> b!24890 m!20059))

(declare-fun m!20061 () Bool)

(assert (=> bm!2208 m!20061))

(assert (=> d!4711 m!16878))

(declare-fun m!20063 () Bool)

(assert (=> b!24897 m!20063))

(declare-fun m!20065 () Bool)

(assert (=> b!24897 m!20065))

(declare-fun m!20067 () Bool)

(assert (=> b!24897 m!20067))

(declare-fun m!20069 () Bool)

(assert (=> b!24897 m!20069))

(declare-fun m!20071 () Bool)

(assert (=> b!24897 m!20071))

(assert (=> b!24897 m!20061))

(assert (=> b!24897 m!20065))

(assert (=> b!24897 m!20037))

(declare-fun m!20073 () Bool)

(assert (=> b!24897 m!20073))

(declare-fun m!20075 () Bool)

(assert (=> b!24897 m!20075))

(declare-fun m!20077 () Bool)

(assert (=> b!24897 m!20077))

(assert (=> b!24897 m!20075))

(declare-fun m!20079 () Bool)

(assert (=> b!24897 m!20079))

(declare-fun m!20081 () Bool)

(assert (=> b!24897 m!20081))

(declare-fun m!20083 () Bool)

(assert (=> b!24897 m!20083))

(declare-fun m!20085 () Bool)

(assert (=> b!24897 m!20085))

(assert (=> b!24897 m!20085))

(declare-fun m!20087 () Bool)

(assert (=> b!24897 m!20087))

(assert (=> b!24897 m!20081))

(declare-fun m!20089 () Bool)

(assert (=> b!24897 m!20089))

(declare-fun m!20091 () Bool)

(assert (=> b!24897 m!20091))

(assert (=> d!4025 d!4711))

(declare-fun b!24904 () Bool)

(declare-fun e!16088 () Bool)

(declare-fun call!2212 () Bool)

(assert (=> b!24904 (= e!16088 call!2212)))

(declare-fun b!24905 () Bool)

(declare-fun e!16091 () Bool)

(assert (=> b!24905 (= e!16091 e!16088)))

(declare-fun c!3408 () Bool)

(assert (=> b!24905 (= c!3408 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) lt!8628)))))

(declare-fun d!4713 () Bool)

(declare-fun res!15113 () Bool)

(declare-fun e!16089 () Bool)

(assert (=> d!4713 (=> res!15113 e!16089)))

(assert (=> d!4713 (= res!15113 (bvsge lt!8628 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(assert (=> d!4713 (= (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) lt!8628 lt!8627) e!16089)))

(declare-fun bm!2209 () Bool)

(assert (=> bm!2209 (= call!2212 (arrayNoDuplicates!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (bvadd lt!8628 #b00000000000000000000000000000001) (ite c!3408 (Cons!562 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) lt!8628) lt!8627) lt!8627)))))

(declare-fun b!24906 () Bool)

(assert (=> b!24906 (= e!16088 call!2212)))

(declare-fun b!24907 () Bool)

(assert (=> b!24907 (= e!16089 e!16091)))

(declare-fun res!15115 () Bool)

(assert (=> b!24907 (=> (not res!15115) (not e!16091))))

(declare-fun e!16090 () Bool)

(assert (=> b!24907 (= res!15115 (not e!16090))))

(declare-fun res!15114 () Bool)

(assert (=> b!24907 (=> (not res!15114) (not e!16090))))

(assert (=> b!24907 (= res!15114 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) lt!8628)))))

(declare-fun b!24908 () Bool)

(assert (=> b!24908 (= e!16090 (contains!232 lt!8627 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) lt!8628)))))

(assert (= (and d!4713 (not res!15113)) b!24907))

(assert (= (and b!24907 res!15114) b!24908))

(assert (= (and b!24907 res!15115) b!24905))

(assert (= (and b!24905 c!3408) b!24906))

(assert (= (and b!24905 (not c!3408)) b!24904))

(assert (= (or b!24906 b!24904) bm!2209))

(declare-fun m!20093 () Bool)

(assert (=> b!24905 m!20093))

(assert (=> b!24905 m!20093))

(declare-fun m!20095 () Bool)

(assert (=> b!24905 m!20095))

(assert (=> bm!2209 m!20093))

(declare-fun m!20097 () Bool)

(assert (=> bm!2209 m!20097))

(assert (=> b!24907 m!20093))

(assert (=> b!24907 m!20093))

(assert (=> b!24907 m!20095))

(assert (=> b!24908 m!20093))

(assert (=> b!24908 m!20093))

(declare-fun m!20099 () Bool)

(assert (=> b!24908 m!20099))

(assert (=> d!4025 d!4713))

(declare-fun d!4715 () Bool)

(declare-fun e!16093 () Bool)

(assert (=> d!4715 e!16093))

(declare-fun res!15116 () Bool)

(assert (=> d!4715 (=> res!15116 e!16093)))

(declare-fun lt!9635 () Bool)

(assert (=> d!4715 (= res!15116 (not lt!9635))))

(declare-fun lt!9634 () Bool)

(assert (=> d!4715 (= lt!9635 lt!9634)))

(declare-fun lt!9633 () Unit!519)

(declare-fun e!16092 () Unit!519)

(assert (=> d!4715 (= lt!9633 e!16092)))

(declare-fun c!3409 () Bool)

(assert (=> d!4715 (= c!3409 lt!9634)))

(assert (=> d!4715 (= lt!9634 (containsKey!24 (toList!298 (getCurrentListMap!129 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)))))))

(assert (=> d!4715 (= (contains!230 (getCurrentListMap!129 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (select (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)))) lt!9635)))

(declare-fun b!24909 () Bool)

(declare-fun lt!9632 () Unit!519)

(assert (=> b!24909 (= e!16092 lt!9632)))

(assert (=> b!24909 (= lt!9632 (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (getCurrentListMap!129 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)))))))

(assert (=> b!24909 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)))))))

(declare-fun b!24910 () Bool)

(declare-fun Unit!598 () Unit!519)

(assert (=> b!24910 (= e!16092 Unit!598)))

(declare-fun b!24911 () Bool)

(assert (=> b!24911 (= e!16093 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 lt!8620 lt!8642 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))))))))

(assert (= (and d!4715 c!3409) b!24909))

(assert (= (and d!4715 (not c!3409)) b!24910))

(assert (= (and d!4715 (not res!15116)) b!24911))

(assert (=> d!4715 m!17240))

(declare-fun m!20101 () Bool)

(assert (=> d!4715 m!20101))

(assert (=> b!24909 m!17240))

(declare-fun m!20103 () Bool)

(assert (=> b!24909 m!20103))

(assert (=> b!24909 m!17240))

(declare-fun m!20105 () Bool)

(assert (=> b!24909 m!20105))

(assert (=> b!24909 m!20105))

(declare-fun m!20107 () Bool)

(assert (=> b!24909 m!20107))

(assert (=> b!24911 m!17240))

(assert (=> b!24911 m!20105))

(assert (=> b!24911 m!20105))

(assert (=> b!24911 m!20107))

(assert (=> d!4025 d!4715))

(declare-fun d!4717 () Bool)

(declare-fun e!16094 () Bool)

(assert (=> d!4717 e!16094))

(declare-fun res!15117 () Bool)

(assert (=> d!4717 (=> (not res!15117) (not e!16094))))

(assert (=> d!4717 (= res!15117 (and (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000000) (bvslt (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (size!693 (_keys!3163 (_2!487 lt!8138))))))))

(declare-fun lt!9636 () Unit!519)

(assert (=> d!4717 (= lt!9636 (choose!102 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (mask!4729 (_2!487 lt!8138))))))

(assert (=> d!4717 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4717 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 #b1000000000000000000000000000000000000000000000000000000000000000 (_keys!3163 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (mask!4729 (_2!487 lt!8138))) lt!9636)))

(declare-fun b!24912 () Bool)

(assert (=> b!24912 (= e!16094 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138))))))

(assert (= (and d!4717 res!15117) b!24912))

(declare-fun m!20109 () Bool)

(assert (=> d!4717 m!20109))

(assert (=> d!4717 m!16878))

(assert (=> b!24912 m!17230))

(assert (=> b!24912 m!17238))

(assert (=> d!4025 d!4717))

(declare-fun b!24913 () Bool)

(declare-fun e!16103 () ListLongMap!565)

(declare-fun call!2215 () ListLongMap!565)

(assert (=> b!24913 (= e!16103 call!2215)))

(declare-fun bm!2210 () Bool)

(declare-fun call!2216 () ListLongMap!565)

(declare-fun call!2218 () ListLongMap!565)

(assert (=> bm!2210 (= call!2216 call!2218)))

(declare-fun b!24914 () Bool)

(declare-fun e!16099 () Bool)

(declare-fun e!16107 () Bool)

(assert (=> b!24914 (= e!16099 e!16107)))

(declare-fun c!3411 () Bool)

(assert (=> b!24914 (= c!3411 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24915 () Bool)

(declare-fun e!16098 () Bool)

(declare-fun lt!9641 () ListLongMap!565)

(assert (=> b!24915 (= e!16098 (= (apply!29 lt!9641 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000)) (get!390 (select (arr!596 (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138))))) #b00000000000000000000000000000000) (dynLambda!143 (defaultEntry!1742 (_2!487 lt!8138)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!24915 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!692 (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))))))))

(assert (=> b!24915 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun call!2217 () ListLongMap!565)

(declare-fun bm!2211 () Bool)

(declare-fun call!2214 () ListLongMap!565)

(declare-fun c!3413 () Bool)

(declare-fun c!3412 () Bool)

(assert (=> bm!2211 (= call!2218 (+!45 (ite c!3412 call!2217 (ite c!3413 call!2214 call!2215)) (ite (or c!3412 c!3413) (tuple2!971 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1665 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun b!24916 () Bool)

(declare-fun res!15123 () Bool)

(assert (=> b!24916 (=> (not res!15123) (not e!16099))))

(declare-fun e!16104 () Bool)

(assert (=> b!24916 (= res!15123 e!16104)))

(declare-fun c!3410 () Bool)

(assert (=> b!24916 (= c!3410 (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!2212 () Bool)

(declare-fun call!2213 () Bool)

(assert (=> bm!2212 (= call!2213 (contains!230 lt!9641 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24917 () Bool)

(declare-fun e!16096 () Bool)

(assert (=> b!24917 (= e!16107 e!16096)))

(declare-fun res!15121 () Bool)

(declare-fun call!2219 () Bool)

(assert (=> b!24917 (= res!15121 call!2219)))

(assert (=> b!24917 (=> (not res!15121) (not e!16096))))

(declare-fun b!24918 () Bool)

(declare-fun e!16102 () Unit!519)

(declare-fun Unit!599 () Unit!519)

(assert (=> b!24918 (= e!16102 Unit!599)))

(declare-fun b!24919 () Bool)

(assert (=> b!24919 (= e!16107 (not call!2219))))

(declare-fun b!24920 () Bool)

(declare-fun e!16105 () Bool)

(assert (=> b!24920 (= e!16105 (= (apply!29 lt!9641 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1665 (_2!487 lt!8138))))))

(declare-fun bm!2213 () Bool)

(assert (=> bm!2213 (= call!2219 (contains!230 lt!9641 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24921 () Bool)

(assert (=> b!24921 (= e!16104 (not call!2213))))

(declare-fun d!4719 () Bool)

(assert (=> d!4719 e!16099))

(declare-fun res!15120 () Bool)

(assert (=> d!4719 (=> (not res!15120) (not e!16099))))

(assert (=> d!4719 (= res!15120 (or (bvsge #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))))))

(declare-fun lt!9656 () ListLongMap!565)

(assert (=> d!4719 (= lt!9641 lt!9656)))

(declare-fun lt!9648 () Unit!519)

(assert (=> d!4719 (= lt!9648 e!16102)))

(declare-fun c!3414 () Bool)

(declare-fun e!16106 () Bool)

(assert (=> d!4719 (= c!3414 e!16106)))

(declare-fun res!15124 () Bool)

(assert (=> d!4719 (=> (not res!15124) (not e!16106))))

(assert (=> d!4719 (= res!15124 (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun e!16100 () ListLongMap!565)

(assert (=> d!4719 (= lt!9656 e!16100)))

(assert (=> d!4719 (= c!3412 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!4719 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4719 (= (getCurrentListMap!129 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) lt!9641)))

(declare-fun b!24922 () Bool)

(assert (=> b!24922 (= e!16096 (= (apply!29 lt!9641 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1665 (_2!487 lt!8138))))))

(declare-fun b!24923 () Bool)

(assert (=> b!24923 (= e!16100 (+!45 call!2218 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))

(declare-fun b!24924 () Bool)

(declare-fun e!16101 () Bool)

(assert (=> b!24924 (= e!16101 e!16098)))

(declare-fun res!15125 () Bool)

(assert (=> b!24924 (=> (not res!15125) (not e!16098))))

(assert (=> b!24924 (= res!15125 (contains!230 lt!9641 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000)))))

(assert (=> b!24924 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun b!24925 () Bool)

(declare-fun res!15122 () Bool)

(assert (=> b!24925 (=> (not res!15122) (not e!16099))))

(assert (=> b!24925 (= res!15122 e!16101)))

(declare-fun res!15126 () Bool)

(assert (=> b!24925 (=> res!15126 e!16101)))

(declare-fun e!16097 () Bool)

(assert (=> b!24925 (= res!15126 (not e!16097))))

(declare-fun res!15119 () Bool)

(assert (=> b!24925 (=> (not res!15119) (not e!16097))))

(assert (=> b!24925 (= res!15119 (bvslt #b00000000000000000000000000000000 (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(declare-fun b!24926 () Bool)

(assert (=> b!24926 (= e!16103 call!2216)))

(declare-fun b!24927 () Bool)

(declare-fun lt!9638 () Unit!519)

(assert (=> b!24927 (= e!16102 lt!9638)))

(declare-fun lt!9652 () ListLongMap!565)

(assert (=> b!24927 (= lt!9652 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9637 () (_ BitVec 64))

(assert (=> b!24927 (= lt!9637 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9651 () (_ BitVec 64))

(assert (=> b!24927 (= lt!9651 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000))))

(declare-fun lt!9657 () Unit!519)

(assert (=> b!24927 (= lt!9657 (addStillContains!14 lt!9652 lt!9637 (zeroValue!1665 (_2!487 lt!8138)) lt!9651))))

(assert (=> b!24927 (contains!230 (+!45 lt!9652 (tuple2!971 lt!9637 (zeroValue!1665 (_2!487 lt!8138)))) lt!9651)))

(declare-fun lt!9654 () Unit!519)

(assert (=> b!24927 (= lt!9654 lt!9657)))

(declare-fun lt!9658 () ListLongMap!565)

(assert (=> b!24927 (= lt!9658 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9647 () (_ BitVec 64))

(assert (=> b!24927 (= lt!9647 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9643 () (_ BitVec 64))

(assert (=> b!24927 (= lt!9643 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000))))

(declare-fun lt!9649 () Unit!519)

(assert (=> b!24927 (= lt!9649 (addApplyDifferent!14 lt!9658 lt!9647 (minValue!1665 (_2!487 lt!8138)) lt!9643))))

(assert (=> b!24927 (= (apply!29 (+!45 lt!9658 (tuple2!971 lt!9647 (minValue!1665 (_2!487 lt!8138)))) lt!9643) (apply!29 lt!9658 lt!9643))))

(declare-fun lt!9639 () Unit!519)

(assert (=> b!24927 (= lt!9639 lt!9649)))

(declare-fun lt!9650 () ListLongMap!565)

(assert (=> b!24927 (= lt!9650 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9644 () (_ BitVec 64))

(assert (=> b!24927 (= lt!9644 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9646 () (_ BitVec 64))

(assert (=> b!24927 (= lt!9646 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000))))

(declare-fun lt!9645 () Unit!519)

(assert (=> b!24927 (= lt!9645 (addApplyDifferent!14 lt!9650 lt!9644 (zeroValue!1665 (_2!487 lt!8138)) lt!9646))))

(assert (=> b!24927 (= (apply!29 (+!45 lt!9650 (tuple2!971 lt!9644 (zeroValue!1665 (_2!487 lt!8138)))) lt!9646) (apply!29 lt!9650 lt!9646))))

(declare-fun lt!9640 () Unit!519)

(assert (=> b!24927 (= lt!9640 lt!9645)))

(declare-fun lt!9655 () ListLongMap!565)

(assert (=> b!24927 (= lt!9655 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun lt!9653 () (_ BitVec 64))

(assert (=> b!24927 (= lt!9653 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!9642 () (_ BitVec 64))

(assert (=> b!24927 (= lt!9642 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000))))

(assert (=> b!24927 (= lt!9638 (addApplyDifferent!14 lt!9655 lt!9653 (minValue!1665 (_2!487 lt!8138)) lt!9642))))

(assert (=> b!24927 (= (apply!29 (+!45 lt!9655 (tuple2!971 lt!9653 (minValue!1665 (_2!487 lt!8138)))) lt!9642) (apply!29 lt!9655 lt!9642))))

(declare-fun b!24928 () Bool)

(declare-fun e!16095 () ListLongMap!565)

(assert (=> b!24928 (= e!16095 call!2216)))

(declare-fun b!24929 () Bool)

(assert (=> b!24929 (= e!16100 e!16095)))

(assert (=> b!24929 (= c!3413 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!24930 () Bool)

(declare-fun c!3415 () Bool)

(assert (=> b!24930 (= c!3415 (and (not (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1640 (_2!487 lt!8138)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!24930 (= e!16095 e!16103)))

(declare-fun bm!2214 () Bool)

(assert (=> bm!2214 (= call!2215 call!2214)))

(declare-fun bm!2215 () Bool)

(assert (=> bm!2215 (= call!2214 call!2217)))

(declare-fun b!24931 () Bool)

(assert (=> b!24931 (= e!16104 e!16105)))

(declare-fun res!15118 () Bool)

(assert (=> b!24931 (= res!15118 call!2213)))

(assert (=> b!24931 (=> (not res!15118) (not e!16105))))

(declare-fun b!24932 () Bool)

(assert (=> b!24932 (= e!16106 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000)))))

(declare-fun bm!2216 () Bool)

(assert (=> bm!2216 (= call!2217 (getCurrentListMapNoExtraKeys!15 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))

(declare-fun b!24933 () Bool)

(assert (=> b!24933 (= e!16097 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000)))))

(assert (= (and d!4719 c!3412) b!24923))

(assert (= (and d!4719 (not c!3412)) b!24929))

(assert (= (and b!24929 c!3413) b!24928))

(assert (= (and b!24929 (not c!3413)) b!24930))

(assert (= (and b!24930 c!3415) b!24926))

(assert (= (and b!24930 (not c!3415)) b!24913))

(assert (= (or b!24926 b!24913) bm!2214))

(assert (= (or b!24928 bm!2214) bm!2215))

(assert (= (or b!24928 b!24926) bm!2210))

(assert (= (or b!24923 bm!2215) bm!2216))

(assert (= (or b!24923 bm!2210) bm!2211))

(assert (= (and d!4719 res!15124) b!24932))

(assert (= (and d!4719 c!3414) b!24927))

(assert (= (and d!4719 (not c!3414)) b!24918))

(assert (= (and d!4719 res!15120) b!24925))

(assert (= (and b!24925 res!15119) b!24933))

(assert (= (and b!24925 (not res!15126)) b!24924))

(assert (= (and b!24924 res!15125) b!24915))

(assert (= (and b!24925 res!15122) b!24916))

(assert (= (and b!24916 c!3410) b!24931))

(assert (= (and b!24916 (not c!3410)) b!24921))

(assert (= (and b!24931 res!15118) b!24920))

(assert (= (or b!24931 b!24921) bm!2212))

(assert (= (and b!24916 res!15123) b!24914))

(assert (= (and b!24914 c!3411) b!24917))

(assert (= (and b!24914 (not c!3411)) b!24919))

(assert (= (and b!24917 res!15121) b!24922))

(assert (= (or b!24917 b!24919) bm!2213))

(declare-fun b_lambda!1637 () Bool)

(assert (=> (not b_lambda!1637) (not b!24915)))

(assert (=> b!24915 t!3232))

(declare-fun b_and!1549 () Bool)

(assert (= b_and!1547 (and (=> t!3232 result!1093) b_and!1549)))

(assert (=> b!24924 m!20025))

(assert (=> b!24924 m!20025))

(declare-fun m!20111 () Bool)

(assert (=> b!24924 m!20111))

(declare-fun m!20113 () Bool)

(assert (=> b!24923 m!20113))

(declare-fun m!20115 () Bool)

(assert (=> b!24915 m!20115))

(assert (=> b!24915 m!16916))

(declare-fun m!20117 () Bool)

(assert (=> b!24915 m!20117))

(assert (=> b!24915 m!20025))

(declare-fun m!20119 () Bool)

(assert (=> b!24915 m!20119))

(assert (=> b!24915 m!20025))

(assert (=> b!24915 m!20115))

(assert (=> b!24915 m!16916))

(assert (=> b!24932 m!20025))

(assert (=> b!24932 m!20025))

(assert (=> b!24932 m!20027))

(declare-fun m!20121 () Bool)

(assert (=> bm!2211 m!20121))

(assert (=> b!24933 m!20025))

(assert (=> b!24933 m!20025))

(assert (=> b!24933 m!20027))

(declare-fun m!20123 () Bool)

(assert (=> bm!2212 m!20123))

(declare-fun m!20125 () Bool)

(assert (=> b!24922 m!20125))

(declare-fun m!20127 () Bool)

(assert (=> bm!2213 m!20127))

(declare-fun m!20129 () Bool)

(assert (=> b!24920 m!20129))

(declare-fun m!20131 () Bool)

(assert (=> bm!2216 m!20131))

(assert (=> d!4719 m!16878))

(declare-fun m!20133 () Bool)

(assert (=> b!24927 m!20133))

(declare-fun m!20135 () Bool)

(assert (=> b!24927 m!20135))

(declare-fun m!20137 () Bool)

(assert (=> b!24927 m!20137))

(declare-fun m!20139 () Bool)

(assert (=> b!24927 m!20139))

(declare-fun m!20141 () Bool)

(assert (=> b!24927 m!20141))

(assert (=> b!24927 m!20131))

(assert (=> b!24927 m!20135))

(assert (=> b!24927 m!20025))

(declare-fun m!20143 () Bool)

(assert (=> b!24927 m!20143))

(declare-fun m!20145 () Bool)

(assert (=> b!24927 m!20145))

(declare-fun m!20147 () Bool)

(assert (=> b!24927 m!20147))

(assert (=> b!24927 m!20145))

(declare-fun m!20149 () Bool)

(assert (=> b!24927 m!20149))

(declare-fun m!20151 () Bool)

(assert (=> b!24927 m!20151))

(declare-fun m!20153 () Bool)

(assert (=> b!24927 m!20153))

(declare-fun m!20155 () Bool)

(assert (=> b!24927 m!20155))

(assert (=> b!24927 m!20155))

(declare-fun m!20157 () Bool)

(assert (=> b!24927 m!20157))

(assert (=> b!24927 m!20151))

(declare-fun m!20159 () Bool)

(assert (=> b!24927 m!20159))

(declare-fun m!20161 () Bool)

(assert (=> b!24927 m!20161))

(assert (=> d!4025 d!4719))

(declare-fun d!4721 () Bool)

(declare-fun e!16108 () Bool)

(assert (=> d!4721 e!16108))

(declare-fun res!15127 () Bool)

(assert (=> d!4721 (=> (not res!15127) (not e!16108))))

(assert (=> d!4721 (= res!15127 (and (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000000) (bvslt (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (size!693 (_keys!3163 (_2!487 lt!8138))))))))

(declare-fun lt!9659 () Unit!519)

(assert (=> d!4721 (= lt!9659 (choose!1 (_keys!3163 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!16109 () Bool)

(assert (=> d!4721 e!16109))

(declare-fun res!15129 () Bool)

(assert (=> d!4721 (=> (not res!15129) (not e!16109))))

(assert (=> d!4721 (= res!15129 (and (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000000) (bvslt (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (size!693 (_keys!3163 (_2!487 lt!8138))))))))

(assert (=> d!4721 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3163 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) lt!9659)))

(declare-fun b!24935 () Bool)

(declare-fun res!15130 () Bool)

(assert (=> b!24935 (=> (not res!15130) (not e!16109))))

(assert (=> b!24935 (= res!15130 (validKeyInArray!0 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!24934 () Bool)

(declare-fun res!15128 () Bool)

(assert (=> b!24934 (=> (not res!15128) (not e!16109))))

(assert (=> b!24934 (= res!15128 (not (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))))))))

(declare-fun b!24936 () Bool)

(assert (=> b!24936 (= e!16109 (bvslt (size!693 (_keys!3163 (_2!487 lt!8138))) #b01111111111111111111111111111111))))

(declare-fun b!24937 () Bool)

(assert (=> b!24937 (= e!16108 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (bvadd (arrayCountValidKeys!0 (_keys!3163 (_2!487 lt!8138)) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) #b00000000000000000000000000000001)))))

(assert (= (and d!4721 res!15129) b!24934))

(assert (= (and b!24934 res!15128) b!24935))

(assert (= (and b!24935 res!15130) b!24936))

(assert (= (and d!4721 res!15127) b!24937))

(declare-fun m!20163 () Bool)

(assert (=> d!4721 m!20163))

(declare-fun m!20165 () Bool)

(assert (=> b!24935 m!20165))

(declare-fun m!20167 () Bool)

(assert (=> b!24934 m!20167))

(assert (=> b!24934 m!20167))

(declare-fun m!20169 () Bool)

(assert (=> b!24934 m!20169))

(assert (=> b!24937 m!17230))

(assert (=> b!24937 m!17242))

(assert (=> b!24937 m!17218))

(assert (=> d!4025 d!4721))

(assert (=> d!4025 d!4051))

(declare-fun d!4723 () Bool)

(assert (=> d!4723 (= (arrayCountValidKeys!0 lt!8622 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (bvadd (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!9660 () Unit!519)

(assert (=> d!4723 (= lt!9660 (choose!2 lt!8622 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))))))

(declare-fun e!16110 () Bool)

(assert (=> d!4723 e!16110))

(declare-fun res!15131 () Bool)

(assert (=> d!4723 (=> (not res!15131) (not e!16110))))

(assert (=> d!4723 (= res!15131 (and (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000000) (bvslt (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (size!693 lt!8622))))))

(assert (=> d!4723 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!8622 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))) lt!9660)))

(declare-fun b!24938 () Bool)

(declare-fun res!15132 () Bool)

(assert (=> b!24938 (=> (not res!15132) (not e!16110))))

(assert (=> b!24938 (= res!15132 (validKeyInArray!0 (select (arr!597 lt!8622) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)))))))

(declare-fun b!24939 () Bool)

(assert (=> b!24939 (= e!16110 (bvslt (size!693 lt!8622) #b01111111111111111111111111111111))))

(assert (= (and d!4723 res!15131) b!24938))

(assert (= (and b!24938 res!15132) b!24939))

(assert (=> d!4723 m!17248))

(declare-fun m!20171 () Bool)

(assert (=> d!4723 m!20171))

(declare-fun m!20173 () Bool)

(assert (=> b!24938 m!20173))

(assert (=> b!24938 m!20173))

(declare-fun m!20175 () Bool)

(assert (=> b!24938 m!20175))

(assert (=> d!4025 d!4723))

(declare-fun d!4725 () Bool)

(assert (=> d!4725 (arrayContainsKey!0 lt!8615 #b1000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun lt!9661 () Unit!519)

(assert (=> d!4725 (= lt!9661 (choose!13 lt!8615 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))))))

(assert (=> d!4725 (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000000)))

(assert (=> d!4725 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!8615 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342))) lt!9661)))

(declare-fun bs!1044 () Bool)

(assert (= bs!1044 d!4725))

(assert (=> bs!1044 m!17226))

(declare-fun m!20177 () Bool)

(assert (=> bs!1044 m!20177))

(assert (=> d!4025 d!4725))

(assert (=> d!4025 d!4117))

(declare-fun b!24940 () Bool)

(declare-fun e!16111 () (_ BitVec 32))

(assert (=> b!24940 (= e!16111 #b00000000000000000000000000000000)))

(declare-fun b!24941 () Bool)

(declare-fun e!16112 () (_ BitVec 32))

(assert (=> b!24941 (= e!16111 e!16112)))

(declare-fun c!3417 () Bool)

(assert (=> b!24941 (= c!3417 (validKeyInArray!0 (select (arr!597 lt!8622) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)))))))

(declare-fun b!24942 () Bool)

(declare-fun call!2220 () (_ BitVec 32))

(assert (=> b!24942 (= e!16112 (bvadd #b00000000000000000000000000000001 call!2220))))

(declare-fun b!24943 () Bool)

(assert (=> b!24943 (= e!16112 call!2220)))

(declare-fun bm!2217 () Bool)

(assert (=> bm!2217 (= call!2220 (arrayCountValidKeys!0 lt!8622 (bvadd (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000001) (bvadd (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000001)))))

(declare-fun d!4727 () Bool)

(declare-fun lt!9662 () (_ BitVec 32))

(assert (=> d!4727 (and (bvsge lt!9662 #b00000000000000000000000000000000) (bvsle lt!9662 (bvsub (size!693 lt!8622) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)))))))

(assert (=> d!4727 (= lt!9662 e!16111)))

(declare-fun c!3416 () Bool)

(assert (=> d!4727 (= c!3416 (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (bvadd (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000001)))))

(assert (=> d!4727 (and (bvsle (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (bvadd (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000001)) (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000001) (size!693 lt!8622)))))

(assert (=> d!4727 (= (arrayCountValidKeys!0 lt!8622 (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (bvadd (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000001)) lt!9662)))

(assert (= (and d!4727 c!3416) b!24940))

(assert (= (and d!4727 (not c!3416)) b!24941))

(assert (= (and b!24941 c!3417) b!24942))

(assert (= (and b!24941 (not c!3417)) b!24943))

(assert (= (or b!24942 b!24943) bm!2217))

(assert (=> b!24941 m!20173))

(assert (=> b!24941 m!20173))

(assert (=> b!24941 m!20175))

(declare-fun m!20179 () Bool)

(assert (=> bm!2217 m!20179))

(assert (=> d!4025 d!4727))

(assert (=> d!4025 d!4119))

(assert (=> d!4025 d!4223))

(declare-fun b!24944 () Bool)

(declare-fun e!16113 () (_ BitVec 32))

(assert (=> b!24944 (= e!16113 #b00000000000000000000000000000000)))

(declare-fun b!24945 () Bool)

(declare-fun e!16114 () (_ BitVec 32))

(assert (=> b!24945 (= e!16113 e!16114)))

(declare-fun c!3419 () Bool)

(assert (=> b!24945 (= c!3419 (validKeyInArray!0 (select (arr!597 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000)))))

(declare-fun b!24946 () Bool)

(declare-fun call!2221 () (_ BitVec 32))

(assert (=> b!24946 (= e!16114 (bvadd #b00000000000000000000000000000001 call!2221))))

(declare-fun b!24947 () Bool)

(assert (=> b!24947 (= e!16114 call!2221)))

(declare-fun bm!2218 () Bool)

(assert (=> bm!2218 (= call!2221 (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(declare-fun d!4729 () Bool)

(declare-fun lt!9663 () (_ BitVec 32))

(assert (=> d!4729 (and (bvsge lt!9663 #b00000000000000000000000000000000) (bvsle lt!9663 (bvsub (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138))))) #b00000000000000000000000000000000)))))

(assert (=> d!4729 (= lt!9663 e!16113)))

(declare-fun c!3418 () Bool)

(assert (=> d!4729 (= c!3418 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))))))

(assert (=> d!4729 (and (bvsle #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!693 (_keys!3163 (_2!487 lt!8138))) (size!693 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))))))))

(assert (=> d!4729 (= (arrayCountValidKeys!0 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8138)))) lt!9663)))

(assert (= (and d!4729 c!3418) b!24944))

(assert (= (and d!4729 (not c!3418)) b!24945))

(assert (= (and b!24945 c!3419) b!24946))

(assert (= (and b!24945 (not c!3419)) b!24947))

(assert (= (or b!24946 b!24947) bm!2218))

(assert (=> b!24945 m!20025))

(assert (=> b!24945 m!20025))

(assert (=> b!24945 m!20027))

(declare-fun m!20181 () Bool)

(assert (=> bm!2218 m!20181))

(assert (=> d!4025 d!4729))

(declare-fun d!4731 () Bool)

(declare-fun e!16115 () Bool)

(assert (=> d!4731 e!16115))

(declare-fun res!15133 () Bool)

(assert (=> d!4731 (=> (not res!15133) (not e!16115))))

(assert (=> d!4731 (= res!15133 (and (bvsge (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b00000000000000000000000000000000) (bvslt (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (size!693 (_keys!3163 (_2!487 lt!8138)))) (bvslt (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (size!692 (_values!1728 (_2!487 lt!8138))))))))

(declare-fun lt!9664 () Unit!519)

(assert (=> d!4731 (= lt!9664 (choose!215 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))))))

(assert (=> d!4731 (validMask!0 (mask!4729 (_2!487 lt!8138)))))

(assert (=> d!4731 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!3 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138))) lt!9664)))

(declare-fun b!24948 () Bool)

(assert (=> b!24948 (= e!16115 (= (+!45 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) (_values!1728 (_2!487 lt!8138)) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (getCurrentListMap!129 (array!1264 (store (arr!597 (_keys!3163 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) #b1000000000000000000000000000000000000000000000000000000000000000) (size!693 (_keys!3163 (_2!487 lt!8138)))) (array!1262 (store (arr!596 (_values!1728 (_2!487 lt!8138))) (ite c!2998 (index!2344 lt!8342) (index!2341 lt!8342)) (ValueCellFull!311 (minValue!1665 (v!1601 (underlying!115 thiss!938))))) (size!692 (_values!1728 (_2!487 lt!8138)))) (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))))))

(assert (= (and d!4731 res!15133) b!24948))

(declare-fun m!20183 () Bool)

(assert (=> d!4731 m!20183))

(assert (=> d!4731 m!16878))

(assert (=> b!24948 m!17036))

(assert (=> b!24948 m!17212))

(assert (=> b!24948 m!17036))

(assert (=> b!24948 m!17230))

(assert (=> b!24948 m!17228))

(assert (=> b!24948 m!17224))

(assert (=> d!4025 d!4731))

(assert (=> b!23763 d!4235))

(assert (=> b!23727 d!4235))

(assert (=> d!3987 d!4119))

(declare-fun d!4733 () Bool)

(assert (=> d!4733 (isDefined!22 (getValueByKey!60 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))

(declare-fun lt!9665 () Unit!519)

(assert (=> d!4733 (= lt!9665 (choose!210 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))

(declare-fun e!16116 () Bool)

(assert (=> d!4733 e!16116))

(declare-fun res!15134 () Bool)

(assert (=> d!4733 (=> (not res!15134) (not e!16116))))

(assert (=> d!4733 (= res!15134 (isStrictlySorted!165 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138))))))))

(assert (=> d!4733 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!21 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))) lt!9665)))

(declare-fun b!24949 () Bool)

(assert (=> b!24949 (= e!16116 (containsKey!24 (toList!298 (getCurrentListMap!129 (_keys!3163 (_2!487 lt!8138)) lt!8338 (mask!4729 (_2!487 lt!8138)) (extraKeys!1640 (_2!487 lt!8138)) (zeroValue!1665 (_2!487 lt!8138)) (minValue!1665 (_2!487 lt!8138)) #b00000000000000000000000000000000 (defaultEntry!1742 (_2!487 lt!8138)))) (select (arr!597 (_keys!3163 (_2!487 lt!8138))) (index!2342 lt!8342))))))

(assert (= (and d!4733 res!15134) b!24949))

(assert (=> d!4733 m!16818))

(assert (=> d!4733 m!17553))

(assert (=> d!4733 m!17553))

(assert (=> d!4733 m!17555))

(assert (=> d!4733 m!16818))

(declare-fun m!20185 () Bool)

(assert (=> d!4733 m!20185))

(declare-fun m!20187 () Bool)

(assert (=> d!4733 m!20187))

(assert (=> b!24949 m!16818))

(assert (=> b!24949 m!17549))

(assert (=> b!23764 d!4733))

(assert (=> b!23764 d!4427))

(assert (=> b!23764 d!4429))

(declare-fun d!4735 () Bool)

(assert (=> d!4735 (= (validKeyInArray!0 (select (arr!597 lt!8324) lt!8313)) (and (not (= (select (arr!597 lt!8324) lt!8313) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!597 lt!8324) lt!8313) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!23572 d!4735))

(declare-fun b!24950 () Bool)

(declare-fun e!16117 () Bool)

(declare-fun call!2222 () Bool)

(assert (=> b!24950 (= e!16117 call!2222)))

(declare-fun b!24951 () Bool)

(declare-fun e!16120 () Bool)

(assert (=> b!24951 (= e!16120 e!16117)))

(declare-fun c!3420 () Bool)

(assert (=> b!24951 (= c!3420 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)))))

(declare-fun d!4737 () Bool)

(declare-fun res!15135 () Bool)

(declare-fun e!16118 () Bool)

(assert (=> d!4737 (=> res!15135 e!16118)))

(assert (=> d!4737 (= res!15135 (bvsge #b00000000000000000000000000000000 (size!693 (_keys!3163 (_2!487 lt!8234)))))))

(assert (=> d!4737 (= (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8234)) #b00000000000000000000000000000000 Nil!563) e!16118)))

(declare-fun bm!2219 () Bool)

(assert (=> bm!2219 (= call!2222 (arrayNoDuplicates!0 (_keys!3163 (_2!487 lt!8234)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!3420 (Cons!562 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000) Nil!563) Nil!563)))))

(declare-fun b!24952 () Bool)

(assert (=> b!24952 (= e!16117 call!2222)))

(declare-fun b!24953 () Bool)

(assert (=> b!24953 (= e!16118 e!16120)))

(declare-fun res!15137 () Bool)

(assert (=> b!24953 (=> (not res!15137) (not e!16120))))

(declare-fun e!16119 () Bool)

(assert (=> b!24953 (= res!15137 (not e!16119))))

(declare-fun res!15136 () Bool)

(assert (=> b!24953 (=> (not res!15136) (not e!16119))))

(assert (=> b!24953 (= res!15136 (validKeyInArray!0 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)))))

(declare-fun b!24954 () Bool)

(assert (=> b!24954 (= e!16119 (contains!232 Nil!563 (select (arr!597 (_keys!3163 (_2!487 lt!8234))) #b00000000000000000000000000000000)))))

(assert (= (and d!4737 (not res!15135)) b!24953))

(assert (= (and b!24953 res!15136) b!24954))

(assert (= (and b!24953 res!15137) b!24951))

(assert (= (and b!24951 c!3420) b!24952))

(assert (= (and b!24951 (not c!3420)) b!24950))

(assert (= (or b!24952 b!24950) bm!2219))

(assert (=> b!24951 m!17855))

(assert (=> b!24951 m!17855))

(assert (=> b!24951 m!17857))

(assert (=> bm!2219 m!17855))

(declare-fun m!20189 () Bool)

(assert (=> bm!2219 m!20189))

(assert (=> b!24953 m!17855))

(assert (=> b!24953 m!17855))

(assert (=> b!24953 m!17857))

(assert (=> b!24954 m!17855))

(assert (=> b!24954 m!17855))

(declare-fun m!20191 () Bool)

(assert (=> b!24954 m!20191))

(assert (=> b!23396 d!4737))

(declare-fun d!4739 () Bool)

(declare-fun e!16121 () Bool)

(assert (=> d!4739 e!16121))

(declare-fun res!15138 () Bool)

(assert (=> d!4739 (=> (not res!15138) (not e!16121))))

(declare-fun lt!9668 () ListLongMap!565)

(assert (=> d!4739 (= res!15138 (contains!230 lt!9668 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(declare-fun lt!9666 () List!565)

(assert (=> d!4739 (= lt!9668 (ListLongMap!566 lt!9666))))

(declare-fun lt!9667 () Unit!519)

(declare-fun lt!9669 () Unit!519)

(assert (=> d!4739 (= lt!9667 lt!9669)))

(assert (=> d!4739 (= (getValueByKey!60 lt!9666 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4739 (= lt!9669 (lemmaContainsTupThenGetReturnValue!18 lt!9666 (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4739 (= lt!9666 (insertStrictlySorted!18 (toList!298 call!2046) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))) (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))))))

(assert (=> d!4739 (= (+!45 call!2046 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))) lt!9668)))

(declare-fun b!24955 () Bool)

(declare-fun res!15139 () Bool)

(assert (=> b!24955 (=> (not res!15139) (not e!16121))))

(assert (=> b!24955 (= res!15139 (= (getValueByKey!60 (toList!298 lt!9668) (_1!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138))))) (Some!65 (_2!493 (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))))

(declare-fun b!24956 () Bool)

(assert (=> b!24956 (= e!16121 (contains!231 (toList!298 lt!9668) (tuple2!971 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1665 (_2!487 lt!8138)))))))

(assert (= (and d!4739 res!15138) b!24955))

(assert (= (and b!24955 res!15139) b!24956))

(declare-fun m!20193 () Bool)

(assert (=> d!4739 m!20193))

(declare-fun m!20195 () Bool)

(assert (=> d!4739 m!20195))

(declare-fun m!20197 () Bool)

(assert (=> d!4739 m!20197))

(declare-fun m!20199 () Bool)

(assert (=> d!4739 m!20199))

(declare-fun m!20201 () Bool)

(assert (=> b!24955 m!20201))

(declare-fun m!20203 () Bool)

(assert (=> b!24956 m!20203))

(assert (=> b!23777 d!4739))

(declare-fun mapNonEmpty!1033 () Bool)

(declare-fun mapRes!1033 () Bool)

(declare-fun tp!3535 () Bool)

(declare-fun e!16123 () Bool)

(assert (=> mapNonEmpty!1033 (= mapRes!1033 (and tp!3535 e!16123))))

(declare-fun mapRest!1033 () (Array (_ BitVec 32) ValueCell!311))

(declare-fun mapKey!1033 () (_ BitVec 32))

(declare-fun mapValue!1033 () ValueCell!311)

(assert (=> mapNonEmpty!1033 (= mapRest!1032 (store mapRest!1033 mapKey!1033 mapValue!1033))))

(declare-fun mapIsEmpty!1033 () Bool)

(assert (=> mapIsEmpty!1033 mapRes!1033))

(declare-fun condMapEmpty!1033 () Bool)

(declare-fun mapDefault!1033 () ValueCell!311)

(assert (=> mapNonEmpty!1032 (= condMapEmpty!1033 (= mapRest!1032 ((as const (Array (_ BitVec 32) ValueCell!311)) mapDefault!1033)))))

(declare-fun e!16122 () Bool)

(assert (=> mapNonEmpty!1032 (= tp!3534 (and e!16122 mapRes!1033))))

(declare-fun b!24958 () Bool)

(assert (=> b!24958 (= e!16122 tp_is_empty!1021)))

(declare-fun b!24957 () Bool)

(assert (=> b!24957 (= e!16123 tp_is_empty!1021)))

(assert (= (and mapNonEmpty!1032 condMapEmpty!1033) mapIsEmpty!1033))

(assert (= (and mapNonEmpty!1032 (not condMapEmpty!1033)) mapNonEmpty!1033))

(assert (= (and mapNonEmpty!1033 ((_ is ValueCellFull!311) mapValue!1033)) b!24957))

(assert (= (and mapNonEmpty!1032 ((_ is ValueCellFull!311) mapDefault!1033)) b!24958))

(declare-fun m!20205 () Bool)

(assert (=> mapNonEmpty!1033 m!20205))

(declare-fun b_lambda!1639 () Bool)

(assert (= b_lambda!1579 (or (and b!23067 b_free!757 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8141))) b_lambda!1639)))

(declare-fun b_lambda!1641 () Bool)

(assert (= b_lambda!1573 (or (and b!23067 b_free!757 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138)))) b_lambda!1641)))

(declare-fun b_lambda!1643 () Bool)

(assert (= b_lambda!1571 (or (and b!23067 b_free!757 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138)))) b_lambda!1643)))

(declare-fun b_lambda!1645 () Bool)

(assert (= b_lambda!1575 (or (and b!23067 b_free!757 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8141))) b_lambda!1645)))

(declare-fun b_lambda!1647 () Bool)

(assert (= b_lambda!1581 (or (and b!23067 b_free!757 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 (_2!487 lt!8138)))) b_lambda!1647)))

(declare-fun b_lambda!1649 () Bool)

(assert (= b_lambda!1577 (or (and b!23067 b_free!757 (= (defaultEntry!1742 (v!1601 (underlying!115 thiss!938))) (defaultEntry!1742 lt!8141))) b_lambda!1649)))

(check-sat (not b!24062) (not b!24214) (not d!4195) (not bm!2102) (not d!4633) (not d!4243) (not b!24190) (not d!4163) (not bm!2218) (not b!23810) (not bm!2156) (not b!24010) (not bm!2195) (not d!4343) (not d!4345) (not b!24137) (not b!23841) (not b!24847) (not b!24242) (not b!24425) (not b!24512) (not b_lambda!1599) (not b!24877) (not d!4583) (not d!4193) (not d!4371) (not d!4377) (not b!24678) (not b!24726) (not b!24342) (not b!23800) (not b!24187) (not b!23802) (not b!23863) (not b_lambda!1601) (not b!24684) (not bm!2063) (not b!23954) (not d!4141) (not d!4595) (not d!4241) (not b!24205) (not b!24063) (not b!24003) (not b!24168) (not bm!2114) (not b!24233) (not d!4383) (not b!24865) (not d!4673) (not b!24833) (not b!24152) (not d!4125) (not b!24161) (not b!24556) (not d!4653) (not bm!2080) (not b!24499) (not b!24855) tp_is_empty!1021 (not b!24569) (not b!24956) (not d!4331) (not b!24057) (not b!24786) (not b!24561) (not b!24627) (not b!24016) (not d!4379) (not b!24592) (not d!4335) (not b!24605) (not b!24406) (not d!4685) (not b!23850) (not bm!2120) (not b!24737) (not b_lambda!1607) (not b!24955) (not b!23797) (not b!24052) (not d!4307) (not b!24534) (not b_lambda!1639) (not b!24650) (not b!23916) (not b!24923) (not d!4503) (not d!4305) (not b!24408) (not b!23878) (not b!24738) (not b!24437) (not b!23830) (not b!24173) (not d!4277) (not d!4177) (not d!4717) (not b!24054) (not b!24607) (not b_lambda!1583) (not b!24490) (not b!24206) (not b!24411) (not bm!2153) (not b_lambda!1605) (not bm!2098) (not d!4703) (not d!4287) (not b!24264) (not bm!2052) (not b!24754) (not d!4661) (not d!4179) (not b!24042) (not bm!2183) (not bm!2179) (not b!23816) (not b_lambda!1587) (not bm!2091) (not d!4663) (not b!24911) (not d!4675) (not d!4151) (not b!24750) (not d!4733) (not bm!2192) (not d!4091) (not bm!2146) (not b!24443) (not b!24762) (not b!24210) (not d!4487) (not d!4253) (not b_lambda!1629) (not d!4327) (not b!24784) (not b!23968) (not b!23930) (not d!4557) (not b!24530) (not d!4359) (not d!4315) (not b!24722) (not b!24314) (not b!24812) (not b!24672) (not b!24573) (not b!24216) (not d!4431) (not d!4523) (not b_lambda!1623) (not b!24844) (not b!24526) (not b!24835) (not b!24340) (not b!24908) (not b!23857) (not b!24568) (not b_lambda!1619) (not d!4303) (not b!24673) (not d!4507) (not d!4365) (not b!24474) (not b!24405) (not b!23989) (not b!24647) (not b!24660) (not b!23952) (not b!24709) (not b!24839) (not b!24578) (not b!24707) (not bm!2072) (not b!24630) (not b!23915) (not d!4271) (not d!4289) (not b!23995) (not d!4311) (not b!24189) (not b!24158) (not b!23793) (not bm!2053) (not b!24783) (not b!24230) (not d!4721) (not d!4659) (not d!4493) (not b_lambda!1635) (not b!24066) (not b!24935) (not b!24045) (not b!24522) (not d!4187) (not d!4319) (not b_lambda!1641) (not bm!2164) (not bm!2154) (not d!4731) (not b!24838) (not bm!2196) (not b!24802) (not b!23842) (not d!4627) (not b!24053) (not bm!2070) (not b!24320) (not b!24011) (not d!4519) (not bm!2138) (not b!24769) (not b!24472) (not bm!2176) (not b!23804) (not d!4537) (not b!24696) (not b!24729) (not d!4191) (not b!23975) (not bm!2140) (not b_lambda!1591) (not d!4479) (not b!24290) (not d!4589) (not d!4639) (not b!24798) (not b!24039) (not b!24238) (not b!24121) (not b!24570) (not d!4475) (not b!24199) (not d!4329) (not b!24022) (not d!4395) (not bm!2168) (not d!4655) (not b!24219) (not b!24746) (not b!23962) (not b_lambda!1615) (not d!4113) (not d!4217) (not b!24150) (not b!24885) (not b!24856) (not b!24521) (not d!4499) (not d!4369) (not b!24323) (not d!4543) (not b!24116) (not b!24178) (not bm!2113) (not d!4491) (not b!24915) (not b!24539) (not b!24201) (not b!23883) (not b!23823) (not b!24685) (not b!24579) (not d!4453) (not bm!2067) (not d!4657) (not d!4407) (not b!24657) (not b!24893) (not bm!2203) (not b!24213) (not d!4161) (not b!24863) (not b!24277) (not b!23884) (not b!24934) (not b!24418) (not d!4207) (not d!4347) (not b!24166) (not d!4439) (not b!23862) (not b!24069) (not bm!2097) (not b!24136) (not d!4615) (not d!4467) (not b!24954) (not d!4085) (not b!24624) (not d!4203) (not b!24637) b_and!1549 (not b!24464) (not b!24440) (not bm!2048) (not b_next!757) (not b!24441) (not b!23818) (not b!24203) (not b!24603) (not d!4267) (not d!4545) (not b!23914) (not b!24461) (not d!4651) (not b!24148) (not d!4647) (not b!24537) (not b!24932) (not b!24659) (not b!24194) (not d!4135) (not d!4175) (not b_lambda!1609) (not b!24020) (not b!24179) (not b!24751) (not b!23984) (not b!24824) (not b!24311) (not b!24143) (not d!4463) (not b!24467) (not d!4095) (not b!24636) (not d!4167) (not b_lambda!1625) (not b!24429) (not b!24209) (not bm!2106) (not d!4643) (not b!23990) (not bm!2109) (not bm!2219) (not b!23956) (not b!24593) (not b!23926) (not d!4679) (not b!24800) (not d!4341) (not b!24506) (not b!24706) (not b!24609) (not b_lambda!1621) (not b!24866) (not b_lambda!1617) (not bm!2166) (not b!24680) (not d!4485) (not b!24653) (not d!4677) (not d!4669) (not d!4165) (not b!24217) (not d!4425) (not d!4521) (not bm!2133) (not d!4099) (not b!24414) (not d!4649) (not bm!2045) (not mapNonEmpty!1033) (not b!24713) (not b!24222) (not d!4567) (not bm!2121) (not b!24040) (not b!24294) (not b!24269) (not b!24118) (not d!4603) (not d!4273) (not b!24228) (not b!24529) (not b!23803) (not b!23909) (not d!4711) (not d!4449) (not d!4143) (not bm!2204) (not b!23958) (not b_lambda!1637) (not b!24620) (not b!24789) (not bm!2130) (not b!24882) (not b!24599) (not b!24874) (not b!24431) (not b!24485) (not b!24693) (not b!24674) (not d!4275) (not b!24223) (not b!24688) (not b!24278) (not b!24309) (not b!24825) (not b!24131) (not d!4697) (not b!24484) (not b!24324) (not b!24325) (not bm!2184) (not b!24550) (not b!24634) (not b_lambda!1643) (not b!24774) (not d!4317) (not b!24525) (not d!4413) (not b!24112) (not b!24779) (not b_lambda!1649) (not b!24128) (not b!24170) (not bm!2145) (not b!24736) (not b!24420) (not b!24949) (not b!24645) (not bm!2175) (not b!23961) (not b!24266) (not b!24720) (not d!4211) (not d!4133) (not d!4189) (not b!24770) (not d!4249) (not b!23923) (not d!4183) (not bm!2211) (not b!24836) (not b!24524) (not b_lambda!1613) (not b!24129) (not d!4109) (not b!24854) (not b!24651) (not bm!2119) (not bm!2208) (not b!24552) (not b!24009) (not b!23795) (not bm!2071) (not b!24535) (not b!24623) (not b!24909) (not d!4127) (not b!24321) (not d!4609) (not d!4665) (not b!24753) (not b!24299) (not b!24903) (not b!24221) (not d!4293) (not b!24780) (not b!23980) (not bm!2213) (not b!24339) (not b!24832) (not bm!2167) (not b!23957) (not b_lambda!1627) (not b!24639) (not b!24819) (not b!24140) (not d!4265) (not b!23996) (not b!24927) (not d!4139) (not d!4637) (not b!23799) (not b!24107) (not d!4435) (not bm!2161) (not b!24945) (not b!24852) (not b!24460) (not b!24232) (not b!23950) (not bm!2135) (not b!24540) (not b!24212) (not b!24102) (not b!24705) (not b!24000) (not d!4515) (not b!23845) (not b!23815) (not d!4171) (not d!4631) (not b_lambda!1597) (not b!24328) (not d!4555) (not d!4397) (not b!24830) (not b!24434) (not d!4355) (not d!4559) (not d!4197) (not b!24834) (not d!4635) (not d!4571) (not b!24439) (not d!4261) (not bm!2150) (not d!4131) (not d!4549) (not bm!2200) (not b!24395) (not b!24262) (not d!4309) (not b!24610) (not b!24265) (not bm!2201) (not b!24667) (not d!4185) (not b!23985) (not d!4683) (not b!24933) (not b!23963) (not b!24631) (not b!24664) (not bm!2075) (not b!24432) (not b!24001) (not b!24585) (not b!24816) (not b!24724) (not b!24652) (not d!4625) (not b_lambda!1631) (not bm!2049) (not d!4351) (not d!4323) (not b!24747) (not d!4551) (not d!4147) (not b!24708) (not b!23874) (not bm!2190) (not d!4119) (not bm!2174) (not d!4541) (not d!4553) (not bm!2068) (not d!4149) (not b!23873) (not b!24479) (not b!23941) (not b!24182) (not bm!2077) (not b!24734) (not b!24845) (not d!4393) (not d!4295) (not b!24682) (not d!4353) (not d!4349) (not b!23982) (not b!23917) (not b!23839) (not b!24803) (not b!24494) (not b!24545) (not b!24274) (not d!4601) (not b!24302) (not d!4723) (not bm!2152) (not b!24532) (not d!4667) (not b!24032) (not b_lambda!1567) (not b!24640) (not b!24590) (not b!24114) (not b_lambda!1585) (not d!4535) (not d!4719) (not bm!2112) (not d!4489) (not b!23948) (not d!4199) (not bm!2182) (not d!4419) (not b!24281) (not d!4299) (not b!24602) (not bm!2180) (not b!24717) (not b!23974) (not b!24310) (not d!4441) (not d!4573) (not b!24644) (not b!24344) (not b!23994) (not d!4245) (not bm!2088) (not d!4621) (not b!24476) (not b!24549) (not b!24700) (not bm!2187) (not d!4297) (not bm!2151) (not b!24503) (not b!24938) (not d!4459) (not bm!2147) (not d!4155) (not b!24937) (not d!4641) (not d!4593) (not b!23955) (not b!24138) (not b!24924) (not bm!2076) (not b!23988) (not b!24790) (not b!23983) (not b!24276) (not b!24423) (not d!4325) (not b!24719) (not d!4581) (not b!23871) (not b!24099) (not bm!2094) (not b!23831) (not b!24643) (not b!24012) (not b!24725) (not b!24697) (not b!24453) (not d!4599) (not b!24794) (not d!4117) (not b!24211) (not b!24475) (not b!23969) (not d!4247) (not bm!2162) (not b!24410) (not b!24767) (not b!24628) (not b!24296) (not d!4495) (not d!4623) (not d!4255) (not d!4629) (not d!4671) (not b!24749) (not bm!2099) (not d!4681) (not bm!2124) (not b!24799) (not b_lambda!1645) (not d!4561) (not b!24200) (not d!4715) (not b!24115) (not b!23960) (not d!4333) (not b!24804) (not b!24031) (not bm!2060) (not bm!2212) (not d!4445) (not d!4539) (not b!24858) (not b!24741) (not d!4121) (not b!24037) (not b!23852) (not b!23987) (not b!24097) (not d!4391) (not d!4579) (not b!24245) (not d!4279) (not d!4313) (not bm!2191) (not bm!2205) (not bm!2163) (not b_lambda!1647) (not d!4223) (not bm!2131) (not bm!2158) (not b!23840) (not bm!2056) (not b_lambda!1611) (not b!24149) (not b!24619) (not bm!2198) (not b!24109) (not b_lambda!1589) (not b!24428) (not bm!2105) (not d!4585) (not d!4497) (not d!4209) (not d!4227) (not bm!2172) (not b!24796) (not b!24169) (not b!24666) (not b!24224) (not b!23824) (not b_lambda!1595) (not b!24922) (not d!4159) (not b!24897) (not d!4611) (not d!4455) (not b!24881) (not b!24126) (not b!24878) (not bm!2069) (not d!4423) (not d!4263) (not b!24902) (not d!4373) (not d!4605) (not b!24622) (not b!23853) (not b!23951) (not b!23866) (not b!24711) (not b!23927) (not b!24658) (not b!24941) (not b!24781) (not d!4457) (not b!24415) (not b!24815) (not b!24286) (not b!23953) (not d!4403) (not d!4427) (not b!24155) (not b!24064) (not b!23921) (not bm!2117) (not bm!2157) (not d!4531) (not b!24814) (not b!24462) (not b_lambda!1633) (not b!24948) (not b_lambda!1593) (not bm!2066) (not b!24892) (not b!24134) (not b!24598) (not b!23911) (not b!24501) (not bm!2217) (not d!4321) (not b!24695) (not b!24951) (not d!4477) (not b!24907) (not b!23999) (not b!24873) (not b!24890) (not b!24621) (not b!24319) (not d!4181) (not bm!2188) (not d!4401) (not bm!2058) (not d!4145) (not b!24869) (not b!24566) (not d!4533) (not b!24502) (not d!4511) (not b!24648) (not b!24646) (not b!24953) (not bm!2197) (not b!24075) (not d!4221) (not d!4173) (not b!24026) (not d!4613) (not b!24463) (not bm!2046) (not d!4547) (not d!4201) (not bm!2139) (not b!24191) (not b!24670) (not bm!2171) (not bm!2051) (not d!4645) (not b!23979) (not b!24920) (not d!4169) (not b!24018) (not b!24860) (not b!24287) (not d!4739) (not b!24426) (not b!24594) (not d!4363) (not b!24446) (not d!4563) (not b!23910) (not bm!2047) (not b!23977) (not b!24511) (not bm!2059) (not b!24632) (not b!24625) (not b!23826) (not b!24676) (not b!24782) (not b!24076) (not b!24588) (not b!24756) (not b!24793) (not d!4157) (not d!4381) (not b!23972) (not b!23976) (not b!24905) (not bm!2199) (not d!4387) (not b!24912) (not b!24721) (not b!24850) (not b!24683) (not b!23854) (not d!4205) (not b!24034) (not d!4451) (not bm!2132) (not d!4409) (not b!24875) (not d!4433) (not b!23971) (not bm!2110) (not b!24894) (not b_lambda!1569) (not b!23998) (not b!24771) (not d!4513) (not b!23912) (not d!4691) (not b!24801) (not b_lambda!1603) (not d!4153) (not b!23796) (not b!24755) (not b!23875) (not b!24714) (not d!4607) (not b!24840) (not d!4527) (not d!4483) (not b!24864) (not d!4301) (not b!24715) (not bm!2143) (not d!4725) (not d!4707) (not bm!2129) (not bm!2104) (not b!24582) (not b!24849) (not b!24870) (not b!24807) (not b!24218) (not bm!2209) (not b!24748) (not b!24050) (not bm!2216) (not b!24427) (not d!4093) (not b!24207) (not d!4385) (not b!24662) (not d!4257) (not bm!2073) (not d!4239) (not b!24307) (not b!24596))
(check-sat b_and!1549 (not b_next!757))
